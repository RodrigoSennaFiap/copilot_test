CREATE OR REPLACE PACKAGE TRON2000.em_k_gen_ws_vcr
AS
/* --------------------- version = 1.23 ---------------------------- *
||
|| Package responsavel pelos procedimenos genericos para webservices
||
*/ ---------------------------------------------------------------------
--
/* ---------------------- MODIFICACIONES ----------------------------
|| 2019/02/06  - TRON2000 - v 1.00
||         Creacion del Package
|| -----------------------------------------------------------------
|| 2020/09/09 - v 1.01 Novas procedures p_ws_consulta_coti_spto e
||                     p_ws_revisao_coti_spto
|| -----------------------------------------------------------------
|| 2020/10/20 - v 1.02 Altera??????a???!??a????A???????a???!??a????A?o na procedure p_ws_consulta_coti_spto
|| 2020/10/20 - V 1.03 - AEARAUJO
|| Cria??????a???!??a????A???????a???!??a????A?o de procedure p_gerar_xml_lista_campos_intv para retornar um CLOB contendo uma lista de dados XML : p_xml
|| ------------------------------------------------------------------
|| 2020/10/22 - V 1.04 Inclus??????a???!??a????A?o na procedure p_carga_dados_coti_endosso
|| 2020/10/27 - V 1.05 Inclus??????a???!??a????A?o das procedures: p_ws_consulta_configuracao_banco e p_gerar_xml_dados_banco
||------------------------------------------------------------------
|| 2020/10/22 - V 1.06 - ATARIN - Correcao da funcionalidade de consulta de apolice, para que possa ser realizada por diversos filtros de uma vez.
||                                Inclusao dos types rec_lista_apolice e rec_tab_lista_apolice
||                                Alteracao na procedure p_gerar_xml_apolice, para que receba o type como parametro
|| -----------------------------------------------------------------
|| 2020/11/17 - v 1.07 - JWOLFF - Sobrecarga de p_gerar_xml_lista_campos_mcc
|| -----------------------------------------------------------------
|| 2020/10/22 - V 1.08 - ATARIN - Inclus??????a???!??a????A?o de fluxo para consulta quando o sistema de origem for o MCC
||                                Altera??????a???!??a????A???????a???!??a????A?o no type rec_lista_apolice e rec_tab_lista_apolice
|| ----------------------------------------------------------------
|| 2021/03/25 - V 1.09 - SGRACI1 - g_err_msg se hace publica para poder insertar errores desde packages ajenos.
|| 2020/04/01 - V 1.10 - LRGUIMARAE exposi??????a???!??a????A???????a???!??a????A?o procedure p_calcula_pacote para comparativo 3 pacotes
|| 2021/04/08 - v 1.11 - LRGUIMARAE - ciacao p_grava_pacote_cobertura
|| 2021/05/14 - v 1.12 - EFPEREIRA  - Implementa??????a???!??a????A???????a???!??a????A?o de listagem dinamica no calculo
|| 2021/08/01 - v 1.13 - EFPEREIRA  - Ajuste no Recalculo para permitir alteracao da comissao do corretor
|| 2021/07/28 - v 1.14 - RMOGOMES   - Criacao de variavel publica g_xml_in_cvv para tratar xml de recalculo do convivencia
|| 2021/11/19 - v 1.15 - MBARUCH    - p_graba_datos_cob_pacote e p_marca_cobs_contratadas
|| 2021/11/19 - v 1.16 - MBARUCH    - p_gerar_xml_detalhe_pkt_auto2
|| 2021/11/26 - V 1.14 - RMOGOMES   - Variavel publica para processamento do Rec??????a???!??a????A?lculo no Conviv??????a???!??a????A?ncia
|| 2022/04/06 - v 4.14 - MBARUCH    - p_gerar_xml_detalhe_pkt_auto3, remocao pkt_auto e pkt_auto2
|| 2022/08/05 - v 1.18 - ADURO      - criadas as procedures pp_trata_tip_duracion, pp_trata_tempo_de_casa, e p_insere_tempo_de_casa e alterada a procedure p_grava_dados para ajuste do calculo de renovacao mapfre
|| 2022/02/11 - v 1.19 - KNEVES/KNPEREIRA - Criacao das procedures p_ws_consulta_cotacao_menu e p_gerar_xml_lista_campos_menu - [00421414] - PRBR - Convergencia Expansao Agencias BB
|| 2023/06/20 - V 1.20 - GLFERREI - Inclus?? das rotinas: Verifica a Eligibilidade para aplicac#? do FAF (p_eligibilidade_faf)
                                                                  Gravar as informac?Ys o coeficiente do FAF enviado pela athenea (p_carrega_pct_faf e p_carrega_log_api_athenea)
                                                                  Gravar o histo??#o do FAF aplicado (p_carrega_hist_faf)
|| 2023/07/03 - V 1.21 - JWOLFF     - Chamada da procedure p_gerar_xml_conductor.
|| 2023/07/29 - V 1.22 - WTADASHI   - IBM - Consulta para indicar se existe forma de pagamento cartao recorrente - Projeto Gateway
|| 2023/10/13 - V 1.23 - MBARUCH/GLFERREI - INDRA - criacao da procedure ELIGIBILIDADE_FAF.
*/ ------------------------------------------------------------------
--
   TYPE ref_cursor IS REF CURSOR;

   --
   TYPE t_retorno IS RECORD (
      num_cotizacion   c2009030_vcr.num_cotizacion%TYPE   := NULL,
      cod_ramo         c2009030_vcr.cod_ramo%TYPE         := NULL,
      tip_docum        c2009030_vcr.tip_docum%TYPE        := NULL,
      cod_docum        c2009030_vcr.cod_docum%TYPE        := NULL,
      cod_agt          c2009030_vcr.cod_agt%TYPE          := NULL,
      fec_emision      c2009030_vcr.fec_emision%TYPE      := NULL,
      nom_tercero      c2000000.val_columna%TYPE          := NULL,
      num_paso_atual   c2000000.val_columna%TYPE          := NULL,
      tip_produto      c2000000.val_columna%TYPE          := NULL
   );

   --
   TYPE tab_consulta IS TABLE OF t_retorno;

   -- inicio V 1.06
   --
   TYPE rec_lista_apolice IS RECORD (
      nom_campo_nom_tercero          a2000020.cod_campo%TYPE,
      nom_tercero                    a1001399_vcr.nom_completo%TYPE,
      nom_campo_num_poliza           a2000020.cod_campo%TYPE,
      num_poliza                     a2000020.num_poliza%TYPE,
      nom_campo_num_item             a2000020.cod_campo%TYPE,
      num_item                       a2000031.num_riesgo%TYPE,
      nom_campo_txt_sub_modelo       a2000020.cod_campo%TYPE,
      txt_sub_modelo                 g2109042_vcr.nom_modelo_submodelo%TYPE,
      nom_campo_num_matricula        a2000020.cod_campo%TYPE,
      num_matricula                  a2000020.val_campo%TYPE,
      nom_campo_num_serie            a2000020.cod_campo%TYPE,
      num_serie                      a2000020.val_campo%TYPE,
      nom_campo_mca_poliza_anulada   a2000020.cod_campo%TYPE,       -- V 1.08
      mca_poliza_anulada             a2000030.mca_poliza_anulada%TYPE,
                                                                    -- V 1.08
      nom_campo_mca_provisional      a2000020.cod_campo%TYPE,       -- V 1.08
      mca_provisional                a2000030.mca_provisional%TYPE, -- V 1.08
      nom_campo_fec_vcto_poliza      a2000020.cod_campo%TYPE,       -- V 1.08
      fec_vcto_poliza                a2000030.fec_vcto_poliza%TYPE, -- V 1.08
      nom_fec_prazo_validade         a2000020.cod_campo%TYPE,       -- V 1.20
      num_fec_prazo_validade         a2000030.fec_vcto_poliza%TYPE, -- V 1.20
      cod_agt                        a2000030.cod_agt%TYPE
   );

   --
   g_err_msg      typtab_msg_ws;
   --V 1.09 Se hace publica para poder insertar errores desde packages ajenos.
   --
   g_xml_in_cvv   CLOB;                                                --v1.14

   --
   TYPE rec_tab_lista_apolice IS TABLE OF rec_lista_apolice;

--
-- fim V 1.06
--
/* -----------------------------------------
|| f_formar_xml: crea un XML en funcion de los parametros recbidos
*/ -----------------------------------------
--
   FUNCTION f_formar_xml (
      p_cod_campo1    IN   VARCHAR2,
      p_val_campo1    IN   VARCHAR2,
      p_cod_campo2    IN   VARCHAR2 DEFAULT NULL,
      p_val_campo2    IN   VARCHAR2 DEFAULT NULL,
      p_cod_campo3    IN   VARCHAR2 DEFAULT NULL,
      p_val_campo3    IN   VARCHAR2 DEFAULT NULL,
      p_cod_campo4    IN   VARCHAR2 DEFAULT NULL,
      p_val_campo4    IN   VARCHAR2 DEFAULT NULL,
      p_cod_campo5    IN   VARCHAR2 DEFAULT NULL,
      p_val_campo5    IN   VARCHAR2 DEFAULT NULL,
      p_cod_campo6    IN   VARCHAR2 DEFAULT NULL,
      p_val_campo6    IN   VARCHAR2 DEFAULT NULL,
      p_cod_campo7    IN   VARCHAR2 DEFAULT NULL,
      p_val_campo7    IN   VARCHAR2 DEFAULT NULL,
      p_cod_campo8    IN   VARCHAR2 DEFAULT NULL,
      p_val_campo8    IN   VARCHAR2 DEFAULT NULL,
      p_cod_campo9    IN   VARCHAR2 DEFAULT NULL,
      p_val_campo9    IN   VARCHAR2 DEFAULT NULL,
      p_cod_campo10   IN   VARCHAR2 DEFAULT NULL,
      p_val_campo10   IN   VARCHAR2 DEFAULT NULL,
      p_cod_campo11   IN   VARCHAR2 DEFAULT NULL,
      p_val_campo11   IN   VARCHAR2 DEFAULT NULL,
      p_cod_campo12   IN   VARCHAR2 DEFAULT NULL,
      p_val_campo12   IN   VARCHAR2 DEFAULT NULL,
      p_cod_campo13   IN   VARCHAR2 DEFAULT NULL,
      p_val_campo13   IN   VARCHAR2 DEFAULT NULL,
      p_cod_campo14   IN   VARCHAR2 DEFAULT NULL,
      p_val_campo14   IN   VARCHAR2 DEFAULT NULL,
      p_cod_campo15   IN   VARCHAR2 DEFAULT NULL,
      p_val_campo15   IN   VARCHAR2 DEFAULT NULL,
      p_cod_campo16   IN   VARCHAR2 DEFAULT NULL,
      p_val_campo16   IN   VARCHAR2 DEFAULT NULL,
      p_cod_campo17   IN   VARCHAR2 DEFAULT NULL,
      p_val_campo17   IN   VARCHAR2 DEFAULT NULL,
      p_cod_campo18   IN   VARCHAR2 DEFAULT NULL,
      p_val_campo18   IN   VARCHAR2 DEFAULT NULL,
      p_cod_campo19   IN   VARCHAR2 DEFAULT NULL,
      p_val_campo19   IN   VARCHAR2 DEFAULT NULL,
      p_cod_campo20   IN   VARCHAR2 DEFAULT NULL,
      p_val_campo20   IN   VARCHAR2 DEFAULT NULL,
      p_cod_campo21   IN   VARCHAR2 DEFAULT NULL,
      p_val_campo21   IN   VARCHAR2 DEFAULT NULL,
      p_cod_campo22   IN   VARCHAR2 DEFAULT NULL,
      p_val_campo22   IN   VARCHAR2 DEFAULT NULL,
      p_cod_campo23   IN   VARCHAR2 DEFAULT NULL,
      p_val_campo23   IN   VARCHAR2 DEFAULT NULL,
      p_cod_campo24   IN   VARCHAR2 DEFAULT NULL,
      p_val_campo24   IN   VARCHAR2 DEFAULT NULL,
      p_cod_campo25   IN   VARCHAR2 DEFAULT NULL,
      p_val_campo25   IN   VARCHAR2 DEFAULT NULL,
      p_cod_campo26   IN   VARCHAR2 DEFAULT NULL,
      p_val_campo26   IN   VARCHAR2 DEFAULT NULL,
      p_cod_campo27   IN   VARCHAR2 DEFAULT NULL,
      p_val_campo27   IN   VARCHAR2 DEFAULT NULL,
      p_cod_campo28   IN   VARCHAR2 DEFAULT NULL,
      p_val_campo28   IN   VARCHAR2 DEFAULT NULL
   )
      RETURN CLOB;

/* -----------------------------------------
||  f_recupera_constante
||  Recupera valor de la constante que se indica por parametro.
*/ -----------------------------------------
--
   FUNCTION f_recupera_constante (p_vrb_nam df_cmn_nwt_xx_cnn.vrb_nam%TYPE)
      RETURN df_cmn_nwt_xx_cnn.vrb_nam_val%TYPE;

--
/* ------------------------------------------------------
|| funcao de recuperacao de valor a partir de COD_CAMPO
*/ ------------------------------------------------------
--
   FUNCTION f_recupera_valor (p_xml CLOB, p_cod_campo a2000020.cod_campo%TYPE)
      RETURN a2000020.val_campo%TYPE;

--
--
/* -----------------------------------------
||  f_recupera_val_dv
||  Recupera valor de la constante que se indica por parametro.
*/ -----------------------------------------
--
   FUNCTION f_recupera_val_dv (
      p_cod_cia          c2000000.cod_cia%TYPE,
      p_cod_ramo         c2000000.cod_ramo%TYPE,
      p_num_cotizacion   c2000000.num_cotizacion%TYPE,
      p_nom_columna      c2000000.nom_columna%TYPE,
      p_nom_tabla        c2000000.nom_tabla%TYPE DEFAULT 'A2000020',
      p_cod_fila         c2000000.cod_fila%TYPE DEFAULT '99999'
   )
      RETURN c2000000.val_columna%TYPE;

--
/* -----------------------------------------
|| f_recupera_xml_in
|| Recupera valor del xml de entrada del procesar passo para ser accedida
|| desde otros paquetes.
*/ -----------------------------------------
--
   FUNCTION f_recupera_xml_in
      RETURN CLOB;

--
/* ------------------------------------------------------
|| p_cuotas_cotizacion
*/ ------------------------------------------------------
   PROCEDURE p_cuotas_cotizacion;

--
/* ------------------------------------------------------
|| Trata los mensajes recibidos y retorna un TYPE.
*/ ------------------------------------------------------
   FUNCTION f_trata_msg (
      p_cod_campo   g2000020.cod_campo%TYPE,
      p_cod_erro    NUMBER,
      p_txt_msg     VARCHAR2
   )
      RETURN typreg_msg_ws;

/* ------------------
||  p_borrar_g0009030
*/ ------------------
--
   PROCEDURE p_borrar_g0009030 (
      p_cod_cia           IN   g0009030.cod_cia%TYPE,
      p_cod_estructura    IN   g0009030.cod_estructura%TYPE,
      p_num_proceso_neg   IN   g0009030.num_proceso%TYPE
   );

/* ------------------------------------------------------
|| Carrega tabela A2000560 (ENDOSSO) com dados da apolice
*/ ------------------------------------------------------
--
   PROCEDURE p_carga_dados_endosso;

--
/* ------------------------------------------------------
|| Carrega tabela A2000560 (ENDOSSO) com dados da cotacao
*/ ------------------------------------------------------
--
   PROCEDURE p_carga_dados_coti_endosso;

--
/* ---------------------------------------------------------------- *
|| procedimento do servico de processarPasso
*/ ----------------------------------------------------------------
   PROCEDURE p_busca_procedimento;

 --
/* ---------------------------------------------------------------- *
|| procedimento do servico de processarPasso
*/ ----------------------------------------------------------------
   PROCEDURE p_processa_dados_cotacao;

--
/* ----------------------------------------------------------------
|| Processa parametro CLOB de entrada da cobertura de endosso
*/ ----------------------------------------------------------------
   PROCEDURE p_processa_dados_cob_endosso;

--
-- v1.13
/* ------------------------------------------------------
|| Procedimento p_processa_dados_variaveis
*/ ------------------------------------------------------
--
   PROCEDURE p_processa_dados_variaveis;

--
/* ---------------------------------------------------------------- *
|| procedimento do servico de processarPasso
*/ ----------------------------------------------------------------
   PROCEDURE p_processa_dados_cobertura;

--
/* ---------------------------------------------------------------- *
|| procedimento do servico de processarPasso
*/ ----------------------------------------------------------------
--
   PROCEDURE p_marca_cobs_contratadas;

--
/* ---------------------------------------------------------------- *
|| procedimento do servico de processarPasso
*/ ----------------------------------------------------------------
--
   PROCEDURE p_graba_datos_cob_pacote;

--
/* ---------------------------------------------------------------- *
|| procedimento do servico de processarPasso
*/ ----------------------------------------------------------------
--
   PROCEDURE p_valida_clave_gen_clave;

/* ------------------------------------------------------
|| mbaruch teste rf 11 e 12
*/ ------------------------------------------------------
--
   PROCEDURE p_lista_type_cobs;

--
/* ------------------------------------------------------
|| Executa processo de emissao do endosso
*/ ------------------------------------------------------
--
   PROCEDURE p_processa_emissao_endosso;

--
/* ------------------------------------------------------
|| Executa processo de emissao do endosso
*/ ------------------------------------------------------
--
   PROCEDURE p_actualiza_paso;

--
/* ------------------------------------------------------
|| Executa processo de emissao do endosso
*/ ------------------------------------------------------
--
   PROCEDURE p_valida_paso;

--
/* ------------------------------------------------------
|| Executa efetivacao da emissao do endosso
*/ ------------------------------------------------------
--
   PROCEDURE p_efetiva_emissao_endosso;

--
/* ------------------------------------------------------
|| Executa efetivacao da emissao do endosso - Simulador
*/ ------------------------------------------------------
--
   PROCEDURE p_tron_efetiva_emissao_endosso;

--
/* ------------------------------------------------------
|| Executa a emissao do endosso - CR
*/ ------------------------------------------------------
--
   PROCEDURE p_emitir_endosso;

--
/* ------------------------------------------------------
|| Executa a emissao do endosso - Simulador
*/ ------------------------------------------------------
--
   PROCEDURE p_tron_emitir_endosso;

--
/* ----------------------------------------------------
|| Processo de cancelamento
*/ ----------------------------------------------------
--
   PROCEDURE p_processa_cancelamento;

--
/* ---------------------------------------------------------------- *
|| procedimento do servico de processarPasso
*/ ----------------------------------------------------------------
   PROCEDURE p_inicializar_cotacao (
      p_cod_cia          IN   g9999992.cod_cia%TYPE,
      p_cod_ramo         IN   g9999992.cod_ramo%TYPE,
      p_cod_tarifa       IN   g9999992.cod_tarifa%TYPE,
      p_cod_agt          IN   g9999992.cod_agt%TYPE,
      p_num_cotizacion   IN   c2009030_vcr.num_cotizacion%TYPE,
      p_num_paso         IN   g9999992.num_paso%TYPE
   );

--
/* ------------------------------------------------------
|| Processa atualizacao de dados
*/ ------------------------------------------------------
--
   PROCEDURE p_atualiza_dados;

--
/* ---------------------------------------------------------------- *
|| procedimento do servico de processarPasso
*/ ----------------------------------------------------------------
   PROCEDURE p_grava_dados;

--
/* ---------------------------------------------------------------- *
|| Processa o calculo de pacotes de cotacao
*/ ----------------------------------------------------------------
   PROCEDURE p_calcula;

--
/* ---------------------------------------------------------------- *
|| Processa o recalculo de pacotes de cotacao
*/ ----------------------------------------------------------------
   PROCEDURE p_recalcula;

--
/* ----------------------------------------------------
|| Processar p_carga_presupuesto
*/ ----------------------------------------------------
--
   PROCEDURE p_carga_presupuesto;

--
/* ----------------------------------------------------
|| Processar p_emite
*/ ----------------------------------------------------
--
   PROCEDURE p_emite;

--
/* ----------------------------------------------------
|| Processar p_emite
*/ ----------------------------------------------------
--
   PROCEDURE p_efetiva;

--
/* ---------------------------------------------------------------- *
|| Consulta e grava a formula clave
*/ ----------------------------------------------------------------
   PROCEDURE p_grava_clave;

--
/* ---------------------
||   p_ws_atualiza_rg  :
*/ ---------------------
   PROCEDURE p_ws_atualiza_rg;

--
/* ---------------------------------------------------------------- *
|| Enquadramento de tipo de desconto (Clube Seguro Novo / Renovacao Competitiva)
*/ ----------------------------------------------------------------
   PROCEDURE p_tip_desconto;

--
/* ---------------------------------------------------------------- *
|| p_ws_valida_renov_garantia
*/ ----------------------------------------------------------------
   PROCEDURE p_ws_valida_renov_garantia;

--
/* ---------------------------------------------------------------- *
|| Devolve um CLOB contendo uma lista de dados XML : p_xml
*/ ----------------------------------------------------------------
   PROCEDURE p_ws_consulta_dados_segurado (
      p_cod_cia    IN       a2000030.cod_cia%TYPE,
      p_cod_ramo   IN       a2000030.cod_ramo%TYPE,
      p_cod_agt    IN       a2000030.cod_agt%TYPE,
      p_xml_in     IN       CLOB,
      p_xml        OUT      CLOB
   );

--
/* ---------------------------------------------------------------- *
|| Servico de resumo
*/ ----------------------------------------------------------------
   PROCEDURE p_ws_consulta_resumo (
      p_cod_cia            IN       a2000030.cod_cia%TYPE,
      p_cod_ramo           IN       a2000030.cod_ramo%TYPE,
      p_cod_tarifa         IN       g9999992.cod_tarifa%TYPE,
      p_cod_agt            IN       a2000030.cod_agt%TYPE,
      p_num_cotizacion     IN       c2009030_vcr.num_cotizacion%TYPE,
      p_num_poliza_grupo   IN       a2000500.num_poliza_grupo%TYPE,
      p_num_contrato       IN       a2000500.num_contrato%TYPE,
      p_num_subcontrato    IN       a2000500.num_contrato%TYPE,
      p_tip_mvto_batch     IN       a2000500.tip_mvto_batch%TYPE,
      p_xml_in             IN       CLOB,
      p_cursor_calculo     OUT      sys_refcursor,
      p_cursor_tomador     OUT      sys_refcursor,
      p_cursor_segurado    OUT      sys_refcursor,
      p_cursor_riscos      OUT      sys_refcursor,
      p_cursor_mensagens   OUT      sys_refcursor
   );

--
/* ---------------------------------------------------------------- *
|| Devolve um CLOB contendo uma lista de dados XML : p_xml
*/ ----------------------------------------------------------------
   PROCEDURE p_ws_consulta_uso_categoria (
      p_cod_cia    IN       a2000030.cod_cia%TYPE,
      p_cod_ramo   IN       a2000030.cod_ramo%TYPE,
      p_cod_agt    IN       a2000030.cod_agt%TYPE,
      p_xml_in     IN       CLOB,
      p_xml        OUT      CLOB
   );

--
/* ---------------------------------------------------------------- *
|| Devolve um CLOB contendo uma lista de dados XML : p_xml
*/ ----------------------------------------------------------------
   PROCEDURE p_ws_processar_passo (
      p_cod_cia                IN       g9999992.cod_cia%TYPE,
      p_cod_ramo               IN       g9999992.cod_ramo%TYPE,
      p_cod_tarifa             IN       g9999992.cod_tarifa%TYPE,
      p_cod_agt                IN       g9999992.cod_agt%TYPE,
      p_num_cotizacion         IN       c2009030_vcr.num_cotizacion%TYPE,
      p_num_cotizacion_grupo   IN       c2009030_vcr.num_poliza_grupo%TYPE,
                                                            -- 20200723 jwolff
      p_num_poliza_grupo       IN       a2000500.num_poliza_grupo%TYPE,
      p_num_contrato           IN       a2000500.num_contrato%TYPE,
      p_num_subcontrato        IN       a2000500.num_contrato%TYPE,
      p_num_paso               IN       g9999992.num_paso%TYPE,
      p_tip_mvto_batch         IN       a2000500.tip_mvto_batch%TYPE,
      p_xml_in                 IN       CLOB,
      p_xml                    OUT      CLOB
   );

--
/* ---------------------------------------------------------------- *
|| Devolve um CLOB contendo uma lista de dados XML : p_xml
*/ ----------------------------------------------------------------
   PROCEDURE p_ws_consulta_detalhe_cotacao (
      p_cod_cia                IN       a2000030.cod_cia%TYPE,
      p_cod_ramo               IN       a2000030.cod_ramo%TYPE,
      p_num_cotazion           IN       c2000000.num_cotizacion%TYPE,
      p_num_cotizacion_grupo   IN       c2009030_vcr.num_poliza_grupo%TYPE,
      p_num_poliza_grupo       IN       a2000500.num_poliza_grupo%TYPE,
      p_num_contrato           IN       a2000500.num_contrato%TYPE,
      p_num_subcontrato        IN       a2000500.num_contrato%TYPE,
      p_tip_mvto_batch         IN       a2000500.tip_mvto_batch%TYPE,
      p_xml_in                 IN       CLOB,
      p_xml                    OUT      CLOB
   );

--
--
/* ------------------------------------------------------
|| Devolve para o webmethods parametro CLOB: p_xml
*/ ------------------------------------------------------
--
   PROCEDURE p_ws_autoriza_ct_masivo (
      p_cod_cia          IN       g9999992.cod_cia%TYPE,
      p_cod_ramo         IN       g9999992.cod_ramo%TYPE,
      p_cod_tarifa       IN       g9999992.cod_tarifa%TYPE,
      p_cod_agt          IN       g9999992.cod_agt%TYPE,
      p_num_cotizacion   IN       c2009030_vcr.num_cotizacion%TYPE,
      p_tip_mvto_batch   IN       a2000500.tip_mvto_batch%TYPE,
      p_xml_in           IN       CLOB,
      p_xml              OUT      CLOB
   );

--
/* ---------------------------------------------------------------- *
|| Devolve um CLOB contendo uma lista de dados XML : p_xml
*/ ----------------------------------------------------------------
   PROCEDURE p_ws_consulta_corretor (
      p_cod_cia    IN       a2000030.cod_cia%TYPE,
      p_cod_ramo   IN       a2000030.cod_ramo%TYPE,
      p_cod_agt    IN       a2000030.cod_agt%TYPE,
      p_xml        OUT      CLOB
   );

--
/* ---------------------------------------------------------------- *
|| Devolve um CLOB contendo uma lista de dados XML : p_xml
*/ ----------------------------------------------------------------
   PROCEDURE p_ws_calcular_fim_vigencia (
      p_cod_cia    IN       a2000030.cod_cia%TYPE,
      p_cod_ramo   IN       a2000030.cod_ramo%TYPE,
      p_xml_in     IN       CLOB,
      p_xml        OUT      CLOB
   );

                                      --
/* ------------------------------------------------------
|| Devolve para o webmethods parametro CLOB: p_xml
*/ ------------------------------------------------------
--
   PROCEDURE p_ws_detalhar_atv_economica (
      p_cod_cia    IN       a2000030.cod_cia%TYPE,
      p_cod_ramo   IN       a2000030.cod_ramo%TYPE,
      p_cod_agt    IN       g9999992.cod_agt%TYPE,
      p_xml_in     IN       CLOB,
      p_xml        OUT      CLOB
   );

--
/* ------------------------------------------------------
|| Devolve para o webmethods parametro CLOB: p_xml
*/ ------------------------------------------------------
--
   PROCEDURE p_ws_consultar_poliza_anterior (
      p_cod_cia    IN       a2000030.cod_cia%TYPE,
      p_cod_ramo   IN       a2000030.cod_ramo%TYPE,
      p_cod_agt    IN       g9999992.cod_agt%TYPE,
      p_xml_in     IN       CLOB,
      p_xml        OUT      CLOB
   );

--
/* ---------------------------------------------------------------- *
|| Devolve um CLOB contendo uma lista de dados XML : p_xml
*/ ----------------------------------------------------------------
   PROCEDURE p_ws_calcular_valor_ajustado (
      p_cod_cia    IN       a2000030.cod_cia%TYPE,
      p_cod_ramo   IN       a2000030.cod_ramo%TYPE,
      p_xml_in     IN       CLOB,
      p_xml        OUT      CLOB
   );

--
/* ------------------------------------------------------
|| Devolve para o webmethods parametro CLOB: p_xml
*/ ------------------------------------------------------
--
   PROCEDURE p_ws_calcular_fator_ajuste (
      p_cod_cia          IN       g9999992.cod_cia%TYPE,
      p_cod_ramo         IN       g9999992.cod_ramo%TYPE,
      p_cod_tarifa       IN       g9999992.cod_tarifa%TYPE,
      p_cod_agt          IN       g9999992.cod_agt%TYPE,
      p_num_cotizacion   IN       c2009030_vcr.num_cotizacion%TYPE,
      p_num_paso         IN       g9999992.num_paso%TYPE,
      p_xml_in           IN       CLOB,
      p_xml              OUT      CLOB
   );

--
/* ------------------------------------------------------
|| Devolve para o webmethods parametro CLOB: p_xml
*/ ------------------------------------------------------
--
   PROCEDURE p_ws_consultar_ano_veiculo (
      p_cod_cia     IN       a2109157_vcr.cod_cia%TYPE,
      p_cod_ramo    IN       a2000030.cod_ramo%TYPE,
      p_cod_campo   IN       c2000020.cod_campo%TYPE,
      p_xml_in      IN       CLOB,
      p_xml         OUT      CLOB
   );

--
/* ------------------------------------------------------
|| Devolve as recusas flexiveis se aplicadas
*/ ------------------------------------------------------
--
   PROCEDURE p_ws_recusa_flexivel;

--
/* ---------------------------------------------------------------- *
|| Devolve um CLOB contendo uma lista de dados XML : p_xml
*/ ----------------------------------------------------------------
   PROCEDURE p_ws_consulta_dados_veiculo (
      p_cod_cia          IN       g9999992.cod_cia%TYPE,
      p_cod_ramo         IN       g9999992.cod_ramo%TYPE,
      p_cod_tarifa       IN       g9999992.cod_tarifa%TYPE,
      p_cod_agt          IN       g9999992.cod_agt%TYPE,
      p_num_cotizacion   IN       c2009030_vcr.num_cotizacion%TYPE,
      p_xml_in           IN       CLOB,
      p_xml              OUT      CLOB
   );

--
/* ---------------------------------------------------------------- *
|| Devolve um CLOB contendo uma lista de dados XML : p_xml
*/ ----------------------------------------------------------------
   PROCEDURE p_ws_consulta_cep (
      p_cod_cia          IN       a2000030.cod_cia%TYPE,
      p_cod_ramo         IN       a2000030.cod_ramo%TYPE,
      p_cod_modalidade   IN       g9999992.cod_tarifa%TYPE,
      p_cod_agt          IN       a2000030.cod_agt%TYPE,
      p_xml_in           IN       CLOB,
      p_xml              OUT      CLOB
   );

--
/* ---------------------------------------------------------------- *
|| Devolve um CLOB contendo uma lista de dados XML : p_xml
*/ ----------------------------------------------------------------
   PROCEDURE p_ws_consulta_cotacao (
      p_cod_cia            IN       a2000030.cod_cia%TYPE,
      p_cod_ramo           IN       a2000030.cod_ramo%TYPE,
      p_cod_agt            IN       a2000030.cod_agt%TYPE,
      p_num_poliza_grupo   IN       a2000500.num_poliza_grupo%TYPE,
      p_num_contrato       IN       a2000500.num_contrato%TYPE,
      p_num_subcontrato    IN       a2000500.num_contrato%TYPE,
      p_tip_mvto_batch     IN       a2000500.tip_mvto_batch%TYPE,
      p_xml_in             IN       CLOB,
      p_xml                OUT      CLOB
   );

--
/* -----------------------------------------------------------
|| Retorna os Controles Tecnicos dos riscos da Apolice Grupo
*/ -----------------------------------------------------------
--
   PROCEDURE p_ws_consulta_cts_riscos (
      p_cod_cia            IN       a2000030.cod_cia%TYPE,
      p_cod_ramo           IN       a2000030.cod_ramo%TYPE,
      p_cod_tarifa         IN       g9999992.cod_tarifa%TYPE,
      p_cod_agt            IN       a2000030.cod_agt%TYPE,
      p_num_cotizacion     IN       c2009030_vcr.num_cotizacion%TYPE,
      p_num_poliza_grupo   IN       a2000500.num_poliza_grupo%TYPE,
      p_num_contrato       IN       a2000500.num_contrato%TYPE,
      p_num_subcontrato    IN       a2000500.num_contrato%TYPE,
      p_tip_mvto_batch     IN       a2000500.tip_mvto_batch%TYPE,
      p_xml_in             IN       CLOB,
      p_cursor_cts         OUT      sys_refcursor
   );

/* ---------------------------------------------------------------- *
 || Servico de consulta do clube de pontos
*/ ---------------------------------------------------------------- *
   PROCEDURE p_ws_csn_consultar (
      p_cod_cia            IN       g9999992.cod_cia%TYPE,
      p_cod_ramo           IN       g9999992.cod_ramo%TYPE,
      p_cod_tarifa         IN       g9999992.cod_tarifa%TYPE,
      p_cod_agt            IN       g9999992.cod_agt%TYPE,
      p_num_cotizacion     IN       c2009030_vcr.num_cotizacion%TYPE,
      p_num_poliza_grupo   IN       a2000500.num_poliza_grupo%TYPE,
      p_num_contrato       IN       a2000500.num_contrato%TYPE,
      p_num_subcontrato    IN       a2000500.num_contrato%TYPE,
      p_tip_mvto_batch     IN       a2000500.tip_mvto_batch%TYPE,
      p_xml_in             IN       CLOB,
      p_xml                OUT      CLOB
   );

/* ---------------------------------------------------------------- *
 || Servico de aplicacao de desconto
*/ ---------------------------------------------------------------- *
   PROCEDURE p_ws_csn_baixar (
      p_cod_cia            IN       g9999992.cod_cia%TYPE,
      p_cod_ramo           IN       g9999992.cod_ramo%TYPE,
      p_cod_tarifa         IN       g9999992.cod_tarifa%TYPE,
      p_cod_agt            IN       g9999992.cod_agt%TYPE,
      p_num_cotizacion     IN       c2009030_vcr.num_cotizacion%TYPE,
      p_num_poliza_grupo   IN       a2000500.num_poliza_grupo%TYPE,
      p_num_contrato       IN       a2000500.num_contrato%TYPE,
      p_num_subcontrato    IN       a2000500.num_contrato%TYPE,
      p_tip_mvto_batch     IN       a2000500.tip_mvto_batch%TYPE,
      p_xml_in             IN       CLOB,
      p_xml                OUT      CLOB
   );

--
/* ---------------------------------------------------------------- *
 || Orquestrador Lista Valores Campo Armado (Lista Fixa e Dinamica)
*/ ---------------------------------------------------------------- *
   PROCEDURE p_ws_consultar_lista_valores (
      p_cod_cia     IN       a2000030.cod_cia%TYPE,
      p_cod_ramo    IN       a2000030.cod_ramo%TYPE,
      p_cod_campo   IN       c2000020.cod_campo%TYPE,
      p_xml_in      IN       CLOB,
      p_xml         OUT      CLOB
   );

/* ------------------------------------------------------
|| Retorno da lista de formas de pagamento
*/ ------------------------------------------------------
   PROCEDURE p_ws_consultar_formas_pagto (
      p_cod_cia                IN       a2000030.cod_cia%TYPE,
      p_cod_ramo               IN       a2000030.cod_ramo%TYPE,
      p_cod_agt                IN       a2000030.cod_agt%TYPE,
      p_num_cotizacion         IN       c2000000.num_cotizacion%TYPE,
      p_num_cotizacion_grupo   IN       c2009030_vcr.num_poliza_grupo%TYPE,
      p_num_poliza_grupo       IN       a2000500.num_poliza_grupo%TYPE,
      p_num_contrato           IN       a2000500.num_contrato%TYPE,
      p_num_subcontrato        IN       a2000500.num_contrato%TYPE,
      p_tip_mvto_batch         IN       a2000500.tip_mvto_batch%TYPE,
      p_xml                    OUT      CLOB
   );

--
/* ------------------------------------------------------
|| Devolve Planos de Pagamento
*/ ------------------------------------------------------
   PROCEDURE p_ws_consultar_planos_pagto (
      p_cod_cia                IN       a2000030.cod_cia%TYPE,
      p_cod_ramo               IN       a2000030.cod_ramo%TYPE,
      p_num_cotizacion         IN       c2000000.num_cotizacion%TYPE,
      p_num_cotizacion_grupo   IN       c2009030_vcr.num_poliza_grupo%TYPE,
      p_num_poliza_grupo       IN       a2000500.num_poliza_grupo%TYPE,
      p_num_contrato           IN       a2000500.num_contrato%TYPE,
      p_num_subcontrato        IN       a2000500.num_contrato%TYPE,
      p_tip_mvto_batch         IN       a2000500.tip_mvto_batch%TYPE,
      p_xml_in                 IN       CLOB,
      p_xml                    OUT      CLOB
   );

--
-- v 5.49
/* ------------------------------------------------------
|| Retorno forma de pagamento cartao recorrente
*/ ------------------------------------------------------
   PROCEDURE p_ws_agt_cartao_recorrente (
      p_cod_cia                IN       a2000030.cod_cia%TYPE,
      p_cod_ramo               IN       a2000030.cod_ramo%TYPE,
      p_cod_agt                IN       a2000030.cod_agt%TYPE,
      p_num_cotizacion         IN       c2000000.num_cotizacion%TYPE,
      p_num_cotizacion_grupo   IN       c2009030_vcr.num_poliza_grupo%TYPE,
      p_num_poliza_grupo       IN       a2000500.num_poliza_grupo%TYPE,
      p_num_contrato           IN       a2000500.num_contrato%TYPE,
      p_num_subcontrato        IN       a2000500.num_contrato%TYPE,
      p_tip_mvto_batch         IN       a2000500.tip_mvto_batch%TYPE,
      p_xml                    OUT      CLOB
   );

/* ---------------------------------------------------------------- *
|| Devolve um CLOB contendo uma lista de dados XML : p_xml
*/ ----------------------------------------------------------------
   PROCEDURE p_calcular_valor_ajustado (
      p_val_sub_modelo       IN       a2000031_vcr.val_sub_modelo%TYPE,
      p_pct_ajuste_tab_ref   IN       a2000031_vcr.pct_ajuste_tab_ref%TYPE,
      p_out_val_sub_modelo   OUT      a2000031_vcr.val_sub_modelo%TYPE
   );

--
/* ------------------------------------------------------
|| Processa chamada do webmethods, retorna percentual calculado
*/ ------------------------------------------------------
--
   PROCEDURE p_calcular_fator_ajustado (
      p_val_referencia   IN       a2000031_vcr.val_sub_modelo%TYPE,
      p_val_sub_modelo   IN       a2000031_vcr.val_sub_modelo%TYPE,
      p_pct_ajustado     OUT      a2000031_vcr.pct_ajuste_tab_ref%TYPE
   );

--
/* ---------------------------------------------------------------- *
|| Devolve um CLOB contendo uma lista de dados XML : p_xml
*/ ----------------------------------------------------------------
   PROCEDURE p_ws_consulta_cobertura (
      p_cod_cia            IN       g9999992.cod_cia%TYPE,
      p_cod_ramo           IN       g9999992.cod_ramo%TYPE,
      p_cod_tarifa         IN       g9999992.cod_tarifa%TYPE,
      p_cod_agt            IN       g9999992.cod_agt%TYPE,
      p_num_cotizacion     IN       c2009030_vcr.num_cotizacion%TYPE,
      p_num_poliza_grupo   IN       a2000500.num_poliza_grupo%TYPE,
      p_num_contrato       IN       a2000500.num_contrato%TYPE,
      p_num_subcontrato    IN       a2000500.num_contrato%TYPE,
      p_num_paso           IN       g9999992.num_paso%TYPE,
      p_tip_mvto_batch     IN       a2000500.tip_mvto_batch%TYPE,
      p_xml_in             IN       CLOB,
      p_xml                OUT      CLOB
   );

--
-- {v 1.01
/* ---------------------------------------------------------------- *
|| Devolve um CLOB contendo uma lista de dados XML : p_xml
*/ ----------------------------------------------------------------
   PROCEDURE p_ws_consulta_coti_spto (
      p_cod_cia          IN       a2000030.cod_cia%TYPE,
      p_cod_ramo         IN       a2000030.cod_ramo%TYPE,
      p_cod_tarifa       IN       g9999992.cod_tarifa%TYPE,
      p_cod_agt          IN       g9999992.cod_agt%TYPE,
      p_tip_mvto_batch   IN       a2000500.tip_mvto_batch%TYPE,
      p_xml_in           IN       CLOB,
      p_xml              OUT      CLOB
   );

--
/* ---------------------------------------------------------------- *
|| Devolve um CLOB contendo uma lista de dados XML : p_xml
*/ ----------------------------------------------------------------
   PROCEDURE p_ws_revisao_coti_spto (
      p_cod_cia          IN       a2000030.cod_cia%TYPE,
      p_cod_ramo         IN       a2000030.cod_ramo%TYPE,
      p_cod_tarifa       IN       g9999992.cod_tarifa%TYPE,
      p_cod_agt          IN       g9999992.cod_agt%TYPE,
      p_num_cotizacion   IN       a2000030.num_presupuesto%TYPE,
      p_tip_mvto_batch   IN       a2000500.tip_mvto_batch%TYPE,
      p_xml_in           IN       CLOB,
      p_xml              OUT      CLOB
   );

-- } v1.01
--
/* ---------------------------------------------------------------- *
|| Devolve um CLOB contendo uma lista de dados XML : p_xml
*/ ----------------------------------------------------------------
   PROCEDURE p_gerar_xml_coberturas (
      p_retorno      IN       ref_cursor,
      p_clob_lista   OUT      CLOB
   );

--
/* ---------------------------------------------------------------- *
|| Devolve um CLOB contendo uma lista de dados XML : p_xml
*/ ----------------------------------------------------------------
--
   PROCEDURE p_gerar_xml_coti_spto (
      p_retorno      IN       ref_cursor,
      p_clob_lista   OUT      CLOB
   );

--
/* ---------------------------------------------------------------- *
|| Devolve um CLOB contendo uma lista de dados XML : p_xml
*/ ----------------------------------------------------------------
   PROCEDURE p_ws_consulta_pacote_cobertura (
      p_cod_cia                IN       g9999992.cod_cia%TYPE,
      p_cod_ramo               IN       g9999992.cod_ramo%TYPE,
      p_cod_tarifa             IN       g9999992.cod_tarifa%TYPE,
      p_cod_agt                IN       g9999992.cod_agt%TYPE,
      p_num_cotizacion         IN       c2009030_vcr.num_cotizacion%TYPE,
      p_num_cotizacion_grupo   IN       c2009030_vcr.num_poliza_grupo%TYPE,
      p_num_poliza_grupo       IN       a2000500.num_poliza_grupo%TYPE,
      p_num_contrato           IN       a2000500.num_contrato%TYPE,
      p_num_subcontrato        IN       a2000500.num_contrato%TYPE,
      p_num_paso               IN       g9999992.num_paso%TYPE,
      p_tip_mvto_batch         IN       a2000500.tip_mvto_batch%TYPE,
      p_xml_in                 IN       CLOB,
      p_xml                    OUT      CLOB
   );

--
/* ---------------------------------------------------------------- *
|| Devolve um CLOB contendo uma lista de dados XML : p_xml -> MCA_POLIZA_GRUPO = 'S'
*/ ----------------------------------------------------------------
--
   PROCEDURE p_gerar_xml_detalhe_pkt_auto3 (
      p_retorno_pacote   IN       ref_cursor,
      /*p_retorno_coberturas    IN ref_cursor,
      p_retorno_cascos        IN ref_cursor,
      p_retorno_modalidades   IN ref_cursor,
      p_retorno_franquias     IN ref_cursor,*/
      p_clob_lista       OUT      CLOB
   );

--
/* ---------------------------------------------------------------- *
|| Devolve um CLOB contendo uma lista de dados XML : p_xml
*/ ----------------------------------------------------------------
   PROCEDURE p_ws_detalhe_pacote_coberturas (
      p_cod_cia                IN       g9999992.cod_cia%TYPE,
      p_cod_ramo               IN       g9999992.cod_ramo%TYPE,
      p_cod_tarifa             IN       g9999992.cod_tarifa%TYPE,
      p_cod_agt                IN       g9999992.cod_agt%TYPE,
      p_num_cotizacion         IN       c2009030_vcr.num_cotizacion%TYPE,
      p_num_cotizacion_grupo   IN       c2009030_vcr.num_poliza_grupo%TYPE,
      p_num_poliza_grupo       IN       a2000500.num_poliza_grupo%TYPE,
      p_num_contrato           IN       a2000500.num_contrato%TYPE,
      p_num_subcontrato        IN       a2000500.num_contrato%TYPE,
      p_num_paso               IN       g9999992.num_paso%TYPE,
      p_tip_mvto_batch         IN       a2000500.tip_mvto_batch%TYPE,
      p_xml_in                 IN       CLOB,
      p_xml                    OUT      CLOB
   );

--
/* ---------------------------------------------------------------- *
|| Devolve um CLOB contendo uma lista de dados XML : p_xml
*/ ----------------------------------------------------------------
   PROCEDURE p_lee_lista_ano_veiculo (
      p_cod_cia         IN       a2109157_vcr.cod_cia%TYPE,
      p_cod_ramo        IN       a2000030.cod_ramo%TYPE,
      p_cod_campo       IN       c2000020.cod_campo%TYPE,
      p_cod_marca       IN       a2109157_vcr.cod_marca%TYPE,
      p_cod_modelo      IN       a2109157_vcr.cod_modelo%TYPE,
      p_cod_submodelo   IN       a2109157_vcr.cod_submodelo%TYPE,
      p_retorno         OUT      ref_cursor,
      p_erro            OUT      VARCHAR2
   );

--
/* ------------------------------------------------------
|| Processa chamada do webmethods, retorna um refCursor
*/ ------------------------------------------------------
   PROCEDURE p_lee_cotacao;

--
/* ------------------------------------------------------
|| Processa chamada do webmethods, retorna um refCursor
*/ ------------------------------------------------------
   PROCEDURE p_lee_apolice;

--
/* ------------------------------------------------------
|| Processa chamada do webmethods, retorna um refCursor
*/ ------------------------------------------------------
   PROCEDURE p_lee_detalhe_cotacao;

--
/* ------------------------------------------------------
|| Processa chamada do webmethods, retorna um refCursor
*/ ------------------------------------------------------
   PROCEDURE p_lee_detalhe_endosso;

--
/* ---------------------------------------------------------------- *
|| Devolve um CLOB contendo uma lista de dados XML : p_xml
*/ ----------------------------------------------------------------
   PROCEDURE p_devuelve_lista_valores (
      p_cod_cia     IN       a2000030.cod_cia%TYPE,
      p_cod_ramo    IN       a2000030.cod_ramo%TYPE,
      p_cod_campo   IN       c2000020.cod_campo%TYPE,
      p_xml         OUT      CLOB
   );

--
/* ---------------------------------------------------------------- *
|| Devolve um CLOB contendo uma lista de dados XML : p_xml
*/ ----------------------------------------------------------------
   PROCEDURE p_lee_lista_valores (
      p_cod_cia     IN       a2000030.cod_cia%TYPE,
      p_cod_ramo    IN       a2000030.cod_ramo%TYPE,
      p_cod_campo   IN       c2000020.cod_campo%TYPE,
      p_retorno     OUT      ref_cursor,
      p_erro        OUT      ref_cursor
   );

--
/* ---------------------------------------------------------------- *
|| Devolve um CLOB contendo uma lista de dados XML : p_xml
*/ ---------------------------------------------------------------- *
   PROCEDURE p_devuelve_lista_dinamica (
      p_cod_cia            IN       a2000030.cod_cia%TYPE,
      p_cod_ramo           IN       a2000030.cod_ramo%TYPE,
      p_cod_campo          IN       c2000020.cod_campo%TYPE,
      p_nom_tabla_valida   IN       g2000020.nom_tabla_valida%TYPE,
      p_cod_version        IN       g2000020.cod_version%TYPE,
      p_xml_in             IN       CLOB,
      p_xml                OUT      CLOB
   );

--
/* ---------------------------------------------------------------- *
 || Efetua asigna para executar query da lista dinamica : p_retorno
*/ ---------------------------------------------------------------- *
   PROCEDURE p_lee_lista_dinamica (
      p_cod_cia            IN       a2000030.cod_cia%TYPE,
      p_cod_ramo           IN       a2000030.cod_ramo%TYPE,
      p_cod_campo          IN       c2000020.cod_campo%TYPE,
      p_nom_tabla_valida   IN       g2000020.nom_tabla_valida%TYPE,
      p_cod_version        IN       g2000020.cod_version%TYPE,
      p_xml_in             IN       CLOB,
      p_retorno            OUT      ref_cursor,
      p_erro               OUT      ref_cursor
   );

--
/* ----------------------------------------------------------
|| Valida a obrigatoriedade do rastreador para aquele pacote
*/ ----------------------------------------------------------
--
   PROCEDURE p_ws_processa_mca_rast_obrig;

--
/* ----------------------------------------------------------
|| Processa dados de cartao de credito
*/ ----------------------------------------------------------
--
   PROCEDURE p_processa_cartao_credito;

--
/* ----------------------------------------------------------
|| Processa dados de cartao de credito bb v. 1.19
*/ ----------------------------------------------------------
--
   PROCEDURE p_processa_cartao_credito_bb;

--
/* ------------------------------------------------------
|| Processa dados de pagamento
*/ ------------------------------------------------------
--
   PROCEDURE p_processa_dados_pagto;

--
/* ----------------------------------------------------------
|| VALIDAR RETORNO DA CENTRAL DE BONUS
*/ ----------------------------------------------------------
--
   PROCEDURE p_ws_valida_scb_msg (
      p_cod_error   IN   x2000221.cod_error%TYPE,
      p_obs_error   IN   x2000221.obs_error%TYPE
   );

--
/* ----------------------------------------------------------
|| p_ws_processa_msg
*/ ----------------------------------------------------------
--
   PROCEDURE p_ws_processa_msg (
      p_campo_error   IN   c2000020.cod_campo%TYPE,
      p_cod_error     IN   x2000221.cod_error%TYPE,
      p_obs_error     IN   x2000221.obs_error%TYPE
   );

--
/* ----------------------------------------------------------
|| VALIDAR RETORNO DA CENTRAL DE BONUS
*/ ----------------------------------------------------------
--
   PROCEDURE p_ws_processa_msg_ct (
      p_campo_error   IN   c2000020.cod_campo%TYPE,
      p_cod_error     IN   x2000221.cod_error%TYPE,
      p_obs_error     IN   x2000221.obs_error%TYPE
   );

--
/* ----------------------------------------------------------
|| REGISTRAR RETORNO DA CIELO
*/ ----------------------------------------------------------
--
   PROCEDURE p_ws_registra_msg (
      p_cod_error   IN       x2000221.cod_error%TYPE,
      p_tip_error   IN       VARCHAR2,
      p_obs_error   OUT      x2000221.obs_error%TYPE
   );

--
/* ----------------------------------------------------------
|| Gravar tid do cartao
*/ ----------------------------------------------------------
--
   PROCEDURE p_grava_tid_cartao;

--
/* ----------------------------------------------------------
|| Gravar tid do cartao_a
*/ ----------------------------------------------------------
--
   PROCEDURE p_grava_tid_cartao_a;

--
/* ----------------------------------------------------------
|| Valida a obrigatoriedade do rastreador para endosso
*/ ----------------------------------------------------------
--
   PROCEDURE p_ws_processa_rast_obrig_spto;

--
/* ------------------------------------------------------
|| Calcula o valor a ser restituido para o endosso de cancelamento
*/ ------------------------------------------------------
--
   PROCEDURE p_ws_calcula_restituicao (
      p_cod_cia    IN       a2000030.cod_cia%TYPE,
      p_cod_ramo   IN       a2000030.cod_ramo%TYPE,
      p_cod_agt    IN       a2000030.cod_agt%TYPE,
      p_xml_in     IN       CLOB,
      p_xml        OUT      CLOB
   );

 --
  /* -----------------------------------------------------------------
 || Verifica a consulta de saldo no clube seguro novo
 */--------------------------------------------------------------------
 --
/*PROCEDURE p_ws_consulta_csn; (p_cod_cia          IN a2000030.cod_cia%TYPE,
                                 p_cod_ramo         IN a2000030.cod_ramo%TYPE,
                                -- p_cod_tarifa       IN G9999992.cod_tarifa%TYPE,
                                 p_cod_agt          IN a2000030.cod_agt%TYPE,
                                 p_num_cotizacion   IN C2009030_vcr.num_cotizacion%TYPE,
                                 p_saldo_pontos     OUT a2109001_vcr.num_voucher%TYPE);

--
 */
   /* -----------------------------------------------------------------
 || Verifica a consulta de saldo no clube seguro novo
 */
   --------------------------------------------------------------------
--
/* PROCEDURE p_ws_consultar_saldo_pontos(p_cod_cia          IN  a2000030.cod_cia%TYPE,
                                         p_cod_ramo         IN  a2000030.cod_ramo%TYPE,
                                         p_cod_agt          IN  a2000030.cod_agt%TYPE,
                                         p_num_cotizacion   IN  c2000000.num_cotizacion %TYPE,
                                         p_tip_mvto_batch   IN A2000500.tip_mvto_batch%TYPE,
                                         p_xml              OUT CLOB);
 /* -----------------------------------------------------------------
 || Verifica a consulta de saldo no clube seguro novo
 */--------------------------------------------------------------------
 --
/*PROCEDURE p_ws_baixar_csn  (p_cod_cia          IN a2000030.cod_cia%TYPE,
                               p_cod_ramo         IN a2000030.cod_ramo%TYPE,
                               p_cod_agt          IN a2000030.cod_agt%TYPE,
                               p_nom_servico      IN a2009016_vcr.desc_servico%TYPE,
                               p_num_cotizacion   IN C2009030_vcr.num_cotizacion%TYPE,
                               p_valor_desconto   IN a2000020.val_campo%TYPE);
 /* -----------------------------------------------------------------
 || Verifica a existencia ou nao de vistoria para a proposta emitida
 */ -----------------------------------------------------------------
 --
   PROCEDURE p_ws_verifica_vistoria;

--
/* ------------------------------------------------------
|| Devolve para o webmethods parametro CLOB: p_xml
*/ ------------------------------------------------------
--
   PROCEDURE p_tron_processar_passo (
      p_cod_cia                IN       g9999992.cod_cia%TYPE,
      p_cod_ramo               IN       g9999992.cod_ramo%TYPE,
      p_cod_tarifa             IN       g9999992.cod_tarifa%TYPE,
      p_cod_agt                IN       g9999992.cod_agt%TYPE,
      p_num_cotizacion         IN       c2009030_vcr.num_cotizacion%TYPE,
      p_num_cotizacion_grupo   IN       c2009030_vcr.num_poliza_grupo%TYPE,
                                                            -- 20200723 jwolff
      p_num_poliza_grupo       IN       a2000500.num_poliza_grupo%TYPE,
      p_num_contrato           IN       a2000500.num_contrato%TYPE,
      p_num_subcontrato        IN       a2000500.num_contrato%TYPE,
      p_num_paso               IN       g9999992.num_paso%TYPE,
      p_tip_mvto_batch         IN       a2000500.tip_mvto_batch%TYPE,
      p_xml_in                 IN       CLOB,
      p_xml                    OUT      CLOB
   );

--
/* ------------------------------------------------------
|| Devolve para o webmethods parametro CLOB: p_xml
*/ ------------------------------------------------------
--
   PROCEDURE p_tron_consulta_dados_segurado (
      p_cod_cia    IN       a2000030.cod_cia%TYPE,
      p_cod_ramo   IN       a2000030.cod_ramo%TYPE,
      p_cod_agt    IN       a2000030.cod_agt%TYPE,
      p_xml_in     IN       CLOB,
      p_xml        OUT      CLOB
   );

--
/* ---------------------------------------------------------------- *
|| Devolve um CLOB contendo uma lista de dados XML : p_xml
*/ ----------------------------------------------------------------
   PROCEDURE p_tron_consulta_dados_veiculo (
      p_cod_cia          IN       g9999992.cod_cia%TYPE,
      p_cod_ramo         IN       g9999992.cod_ramo%TYPE,
      p_cod_tarifa       IN       g9999992.cod_tarifa%TYPE,
      p_cod_agt          IN       g9999992.cod_agt%TYPE,
      p_num_cotizacion   IN       c2009030_vcr.num_cotizacion%TYPE,
      p_xml_in           IN       CLOB,
      p_xml              OUT      CLOB
   );

--
/* ---------------------------------------------------------------- *
|| Devolve um CLOB contendo uma lista de dados XML : p_xml
*/ ----------------------------------------------------------------
   PROCEDURE p_tron_detalhe_pacote_cob (
      p_cod_cia            IN       g9999992.cod_cia%TYPE,
      p_cod_ramo           IN       g9999992.cod_ramo%TYPE,
      p_cod_tarifa         IN       g9999992.cod_tarifa%TYPE,
      p_cod_agt            IN       g9999992.cod_agt%TYPE,
      p_num_cotizacion     IN       c2009030_vcr.num_cotizacion%TYPE,
      p_num_poliza_grupo   IN       a2000500.num_poliza_grupo%TYPE,
      p_num_contrato       IN       a2000500.num_contrato%TYPE,
      p_num_subcontrato    IN       a2000500.num_contrato%TYPE,
      p_num_paso           IN       g9999992.num_paso%TYPE,
      p_tip_mvto_batch     IN       a2000500.tip_mvto_batch%TYPE,
      p_xml_in             IN       CLOB,
      p_xml                OUT      CLOB
   );

--
/* ------------------------------------------------------------------------
|| Analisa dados alterados e insere a tipologia correspondente na s2000033
*/ ------------------------------------------------------------------------
--
   PROCEDURE p_analisar_tipologia_spto;

--
/* ------------------------------------------------------
|| Grava e valida dados dos opcionais
*/ ------------------------------------------------------
--
   PROCEDURE p_grava_dados_opcionais;

--
/* ------------------------------------------------------
|| Grava e valida dados de acessorios
*/ ------------------------------------------------------
--
   PROCEDURE p_grava_dados_acessorios;

--
/* ---------------------------------------------------------------- *
|| Devolve um CLOB contendo uma lista de dados XML : p_xml
*/ ----------------------------------------------------------------
   PROCEDURE p_gerar_xml_pacote_cobertura (
      p_retorno_pacote   IN       ref_cursor,
      p_clob_lista       OUT      CLOB
   );

--
/* ---------------------------------------------------------------- *
|| Devolve um CLOB contendo uma lista de dados XML : p_xml
*/ ----------------------------------------------------------------
   PROCEDURE p_gerar_xml_pacote_cob_spto (
      p_retorno_pacote   IN       ref_cursor,
      p_clob_lista       OUT      CLOB
   );

--
/* ---------------------------------------------------------------- *
|| Devolve um CLOB contendo uma lista de dados XML : p_xml
*/ ----------------------------------------------------------------
--
   PROCEDURE p_gerar_xml_detalhe_pacote (
      p_retorno_pacote   IN       ref_cursor,
      /*p_retorno_coberturas    IN ref_cursor,
      p_retorno_cascos        IN ref_cursor,
      p_retorno_modalidades   IN ref_cursor,
      p_retorno_franquias     IN ref_cursor,*/
      p_clob_lista       OUT      CLOB
   );

--
/* ---------------------------------------------------------------- *
|| Devolve um CLOB contendo uma lista de dados XML : p_xml
*/ ----------------------------------------------------------------
   PROCEDURE p_gerar_xml_uso_categoria (
      p_retorno      IN       ref_cursor,
      p_clob_lista   OUT      CLOB
   );

--
/* ---------------------------------------------------------------- *
|| Devolve um CLOB contendo uma lista de dados XML : p_xml
*/ ----------------------------------------------------------------
   PROCEDURE p_gerar_xml_dados_veiculo (
      p_retorno      IN       ref_cursor,
      p_clob_lista   OUT      CLOB
   );

--
/* ------------------------------------------------------
|| Devolve um CLOB contendo uma lista de dados XML : p_xml
*/ ------------------------------------------------------
--
   PROCEDURE p_gerar_xml_dados_plano_pagto (
      p_retorno      IN       ref_cursor,
      p_clob_lista   OUT      CLOB
   );

--
/* ---------------------------------------------------------------- *
|| Devolve um CLOB contendo uma lista de dados XML : p_xml
*/ ----------------------------------------------------------------
   PROCEDURE p_gerar_xml_segurado (
      p_retorno      IN       ref_cursor,
      p_clob_lista   OUT      CLOB
   );

--
/* ---------------------------------------------------------------- *
|| Devolve um CLOB contendo uma lista de dados XML : p_xml
*/ -----------------------------------------------------------------
   PROCEDURE p_gerar_xml_conductor (
      p_retorno      IN       ref_cursor,                               --1.21
      p_clob_lista   OUT      CLOB
   );

--
/* ---------------------------------------------------------------- *
|| Devolve um CLOB contendo uma lista de dados XML : p_xml
*/ ----------------------------------------------------------------
   PROCEDURE p_gerar_xml_campos_cotacao (
      p_retorno      IN       ref_cursor,
      p_clob_lista   OUT      CLOB
   );

--
/* ---------------------------------------------------------------- *
|| Devolve um CLOB contendo uma lista de dados XML : p_xml
*/ ----------------------------------------------------------------
   PROCEDURE p_gerar_xml_campo_unico (
      p_retorno      IN       ref_cursor,
      p_clob_lista   OUT      CLOB
   );

--
/* ---------------------------------------------------------------- *
|| Devolve um CLOB contendo uma lista de dados XML : p_xml
*/ ----------------------------------------------------------------
   PROCEDURE p_gerar_xml_mensagem (
      p_retorno      IN       ref_cursor,
      p_clob_lista   OUT      CLOB
   );

--
/* ---------------------------------------------------------------- *
|| Devolve um CLOB contendo uma lista de dados XML : p_xml
*/ ----------------------------------------------------------------
   PROCEDURE p_gerar_xml_campos_corretor (
      p_retorno      IN       ref_cursor,
      p_clob_lista   OUT      CLOB
   );

--
/* ---------------------------------------------------------------- *
|| Devolve um CLOB contendo uma lista de dados XML : p_xml
*/ ----------------------------------------------------------------
   PROCEDURE p_gerar_xml_cep (p_retorno IN ref_cursor, p_clob_lista OUT CLOB);

--
/* ---------------------------------------------------------------- *
|| Devolve um CLOB contendo uma lista de dados XML : p_xml
*/ ----------------------------------------------------------------
   PROCEDURE p_gerar_xml_lista_campos (
      p_retorno      IN       ref_cursor,
      p_clob_lista   OUT      CLOB
   );

--
/* ---------------------------------------------------------------- *
|| Devolve um CLOB contendo uma lista de dados XML : p_xml
*/ ----------------------------------------------------------------
   PROCEDURE p_gerar_xml_cotacao (
      p_retorno      IN       ref_cursor,
      p_clob_lista   OUT      CLOB
   );

--
/* ---------------------------------------------------------------- *
|| Devolve um CLOB contendo uma lista de dados XML : p_xml
   V 1.06 - Alteracao no parametro de entrada, para receber um type ao inves de cursor
*/ ----------------------------------------------------------------
   PROCEDURE p_gerar_xml_apolice (
      p_retorno      IN       rec_tab_lista_apolice,
      p_clob_lista   OUT      CLOB
   );

--
/* ---------------------------------------------------------------- *
|| Devolve um CLOB contendo uma lista de dados XML : p_xml
*/ ----------------------------------------------------------------
   PROCEDURE p_gerar_xml_calc_restituicao (
      p_retorno      IN       ref_cursor,
      p_clob_lista   OUT      CLOB
   );

--
/* ------------------------------------------------------
|| p_ws_usar_cotizacion
*/ ------------------------------------------------------
--
   PROCEDURE p_ws_usar_cotacao;

--
/* ---------------------------------------------------------------- *
|| Devolve um CLOB contendo uma lista de dados XML : p_xml
*/ ----------------------------------------------------------------
   PROCEDURE p_gerar_xml_lista_campos_mcc (
      p_retorno      IN       ref_cursor,
      p_clob_lista   OUT      CLOB
   );

--
/* ---------------------------------------------------------------- *
|| Devolve um CLOB contendo uma lista de dados XML : p_xml
*/ ----------------------------------------------------------------
   PROCEDURE p_gerar_xml_lista_campos_mcc (
      p_retorno      IN       ref_cursor,
      p_cod_cia      IN       c2000000.cod_cia%TYPE,                 -- jwolff
      p_cod_ramo     IN       c2000000.cod_ramo%TYPE,                -- jwolff
      p_clob_lista   OUT      CLOB
   );

--I 1.03
/* ---------------------------------------------------------------- *
|| Devolve um CLOB contendo uma lista de dados XML : p_xml    *CVG
*/ ----------------------------------------------------------------
   PROCEDURE p_gerar_xml_lista_campos_intv (
      p_retorno      IN       ref_cursor,
      p_clob_lista   OUT      CLOB
   );

--F 1.03
/* ---------------------------------------------------------------- *
|| Devolve um CLOB contendo uma lista de dados XML : p_xml
*/ ----------------------------------------------------------------
   PROCEDURE p_ws_consulta_cotacao_mcc (
      p_cod_cia                IN       a2000030.cod_cia%TYPE,
      p_cod_ramo               IN       a2000030.cod_ramo%TYPE,
      p_cod_agt                IN       a2000030.cod_agt%TYPE,
      p_num_cotizacion_grupo   IN       c2009030_vcr.num_poliza_grupo%TYPE,
      p_num_poliza_grupo       IN       a2000500.num_poliza_grupo%TYPE,
      p_num_contrato           IN       a2000500.num_contrato%TYPE,
      p_num_subcontrato        IN       a2000500.num_contrato%TYPE,
      p_tip_mvto_batch         IN       a2000500.tip_mvto_batch%TYPE,
      p_xml_in                 IN       CLOB,
      p_xml                    OUT      CLOB
   );

--
--
/* ---------------------------------------------------------------- *
|| Valida??????a???!??a????A???????a???!??a????A???????a???!??a????A???????a???!??a????A?o de controle de passo: Flexibilidade da cota??????a???!??a????A???????a???!??a????A???????a???!??a????A???????a???!??a????A?o e Recusa Flex??????a???!??a????A???????a???!??a????A?vel
*/ ----------------------------------------------------------------
--
   PROCEDURE p_valida_controle_passo (
      p_cod_cia            IN       g9999992.cod_cia%TYPE,
      p_cod_ramo           IN       g9999992.cod_ramo%TYPE,
      p_cod_tarifa         IN       g9999992.cod_tarifa%TYPE,
      p_cod_agt            IN       g9999992.cod_agt%TYPE,
      p_num_cotizacion     IN       c2009030_vcr.num_cotizacion%TYPE,
      p_num_poliza_grupo   IN       a2000500.num_poliza_grupo%TYPE,
      p_num_contrato       IN       a2000500.num_contrato%TYPE,
      p_num_subcontrato    IN       a2000500.num_contrato%TYPE,
      p_num_paso           IN       g9999992.num_paso%TYPE,
      p_tip_mvto_batch     IN       a2000500.tip_mvto_batch%TYPE,
      p_xml_in             IN       CLOB,
      p_xml                OUT      CLOB
   );

--
-- I 1.05
/* ---------------------------------------------------------------- *
|| Devolve um CLOB contendo uma lista de dados XML : p_xml
*/ ----------------------------------------------------------------
   PROCEDURE p_ws_consulta_config_banco (p_xml_in IN CLOB, p_xml OUT CLOB);

   --
   /* ---------------------------------------------------------------- *
   || Devolve um CLOB contendo uma lista de dados XML : p_xml
   */
   PROCEDURE p_gerar_xml_dados_banco (
      p_retorno      IN       ref_cursor,
      p_clob_lista   OUT      CLOB
   );

   -- F 1.05
   -- I 1.10
   /* ---------------------------------------------------------------- *
   || Calcula comparativo 3 pacoes
   */
   PROCEDURE p_calcula_pacote;

  --F 1.10
--I 1.11
  --
  /* ---------------------------------------------------------------- *
  || Grava as cobeturas de preferencia do corretor
  */
   PROCEDURE p_grava_pacote_cobertura;

--
-- v1.12
/* ----------------------------------------------------
|| Function f_trata_nom_pacote
*/ ----------------------------------------------------
--
   FUNCTION f_trata_nom_pacote (
      p_nom_pacote   g2109040_vcr.val_clave_formula%TYPE
   )
      RETURN g2109040_vcr.val_clave_formula%TYPE;

--
/* --------------------------------------------------------
|| p_borra_tablas_cotizacion :
*/ --------------------------------------------------------
--
   PROCEDURE p_borra_tablas_cotizacion (
      p_cod_cia            IN   g9999992.cod_cia%TYPE,
      p_cod_ramo           IN   g9999992.cod_ramo%TYPE,
      p_cod_tarifa         IN   g9999992.cod_tarifa%TYPE,
      p_cod_agt            IN   g9999992.cod_agt%TYPE,
      p_num_cotizacion     IN   c2009030_vcr.num_cotizacion%TYPE,
      p_num_simulacion     IN   c2990700.num_simulacion%TYPE,
      p_num_poliza_grupo   IN   a2000500.num_poliza_grupo%TYPE,
      p_num_contrato       IN   a2000500.num_contrato%TYPE,
      p_num_subcontrato    IN   a2000500.num_contrato%TYPE,
      p_num_paso           IN   g9999992.num_paso%TYPE,
      p_tip_mvto_batch     IN   a2000500.tip_mvto_batch%TYPE
   );

---
-- Inicio v 1.18
-- Procedures criadas para calculo de renovacao efetuada pela tela para corretor detentor da apolice ou nao
-- efetuada pela tela para corretor detentor da apolice ou nao
/*  -------------------------
||    pp_trata_tip_duracion    :
*/  -------------------------
--
   PROCEDURE pp_trata_tip_duracion (
      p_fec_efec_poliza         a2000030.fec_efec_poliza%TYPE,
      p_fec_vcto_poliza         a2000030.fec_vcto_poliza%TYPE,
      p_tip_duracion      OUT   a2000020.val_campo%TYPE
   );

/* ------------------------
||  pp_trata_tempo_de_casa  :
*/ ------------------------
   PROCEDURE pp_trata_tempo_de_casa (
      p_num_poliza_renov   IN       a2000030.num_poliza%TYPE,
      p_cod_ramo           IN       a2000030.cod_ramo%TYPE,
      p_cod_cia            IN       a2000030.cod_cia%TYPE,
      p_num_spto           IN       a2000030.num_spto%TYPE,
      p_tempo_de_casa      IN OUT   NUMBER
   );

--
/* ------------------------
||  p_insere_tempo_de_casa  :
*/ ------------------------
   PROCEDURE p_insere_tempo_de_casa (
      p_cod_cia          IN   c2000000.cod_cia%TYPE,
      p_cod_ramo         IN   c2000000.cod_ramo%TYPE,
      p_num_cotizacion   IN   c2000000.num_cotizacion%TYPE,
      p_tempo_de_casa    IN   c2000000.val_columna%TYPE
   );

--
--fim v 1.18
--
--
 -- In?? ? V1.20
/* -------------------------
||  p_eligibiidade_faf: Verificar se o PCT FAF ESTA LEGIVEL V 1.23
*/ ------------------------
   PROCEDURE p_eligibilidade_faf;
   --
   PROCEDURE p_eligibilidade_faf (
      p_cod_cia          IN       c2000000.cod_cia%TYPE,
      p_cod_ramo         IN       c2000000.cod_ramo%TYPE,
      p_num_cotizacion   IN       c2000000.num_cotizacion%TYPE,
      p_xml_in           IN       CLOB,
      p_xml              OUT      CLOB
   );
 --
 --
 --
 --
/*  -----------------------------
||     p_carrega_hist_faf: Carrega histo??#o de aplicac#? do FAF por cotac#?.
*/  -----------------------------
--
   PROCEDURE p_carrega_hist_faf;
   --
   --
   --
   --
--
  --
  /*  ---------------------------------------------------------------------------------------
  ||     p_carrega_pct_faf: Carrega pct faf.
  */  ---------------------------------------------------------------------------------------
  --
  --
   PROCEDURE p_carrega_pct_faf_athenea;

   --
   PROCEDURE p_carrega_pct_faf_athenea (
      p_cod_cia          IN       c2000000.cod_cia%TYPE,
      p_cod_ramo         IN       c2000000.cod_ramo%TYPE,
      p_num_cotizacion   IN       c2000000.num_cotizacion%TYPE,
      p_xml_in           IN       CLOB,
      p_xml              OUT      CLOB
   );

--
--
  --
--
/*  ---------------------------------------------------------------------------------------
||     p_carrega_log_api_athenea: Carrega informac?Ys de Log de erro da athenea.
*/  ---------------------------------------------------------------------------------------
--
   PROCEDURE p_carrega_log_api_athenea;

   --
   PROCEDURE p_carrega_log_api_athenea (
      p_cod_cia          IN       c2000000.cod_cia%TYPE,
      p_cod_ramo         IN       c2000000.cod_ramo%TYPE,
      p_num_cotizacion   IN       c2000000.num_cotizacion%TYPE,
      p_xml_in           IN       CLOB,
      p_xml              OUT      CLOB
   );
-- Fim V1.20
--
--
END em_k_gen_ws_vcr;
/
CREATE OR REPLACE PACKAGE BODY TRON2000."EM_K_GEN_WS_VCR"
AS
   /* ------------------------ VERSION = 5.71 ---------------------------*/
   --
   /* ------------------------- DESCRIPCION -------------------------------
   || Package responsavel pelos procedimenos genericos para webservices
   */ ---------------------------------------------------------------------
   --
   /* --------------------- MODIFICACIONES --------------------------------
   || 2019/10/30 - v 1.37                        - Alteracao no processo de selecao de coberturas de casco para endosso.
   || 2020/07/04 - v 1.38                        - Altercao para consider fez_validez na consulta veiculos.
   || 2020/07/06 - v 1.39                        - Liberacion del backend de los servicios para realizar nuevas cotizaciones de flotas
   ||                                              (Lancamento de servicio de back-end para fazer novas cotacoes de frota).
   || 2020/07/06 - v 1.39                        - Liberacion del backend de los servicios para realizar nuevas cotizaciones
   ||                                              de flotas (Lancamento de servicos de back-end para fazer novas cotacoes de frota).
   || 2020/08/21 - v 1.39                        - Alteracao p_lee_apolice
   || 2020/07/17 - v 1.40                        - Alteracao do servico consultaDadosVeiculo para tratar habilitacao da blindagem
   || 2020/08/13 - v 1.41                        - Criacao da procedure pp_v_carta_verde
   || 2020/08/25 - v 1.42 - Thiago Belao         - Alteracao no cursor da p_lee_detalhes_endosso - MCA_PRINCIPAL_CONDUCTOR
   ||                                              por comparacao
   || 2020/08/26 - v 1.43                        - Alteracao p_grava_dados e p_ws_consulta_coti_spto
   || 2020/08/27 - v 1.44                        - Alterar no processo de recuperar do pacote de coberturas para endosso.
   || 2020/08/28 - v 1.45                        - Alteracao p_lee_apolice e p_ws_consulta_coti_spto
   || 2020/08/31 - v 1.46 - TBELAO               - Alterar da forma do g_cod_tarifa na pp_busca_campos_retorno
   || 2020/09/09 - v 1.47                        - Novas procedures p_ws_revisao_coti_spto,
   ||                                              pp_gera_segurado, pp_gera_condutor,
   ||                                              pp_gera_resp_pagamento, pp_gera_demais_terceiros
   ||                                              e pp_gera_dados_variaveis.
   ||                                              Alteracao na p_lee_apolice
   || 2020/09/24 - v 1.48                        - Resolucao de conflito
   || 2020/09/28 - v 1.49                        - Alteracao p_lee_apolice para consulta de apolices
   ||                                              para o endosso.
   || 2020/09/29 - v 1.50                        - Alteracao p_lee_apolice para consulta de apolices
   ||                                              para o endosso.
   || 2020/09/29 - v 1.51 - FEBSILVA             - Alteracao na rotina pp_ws_consulta_dados_veiculo para que seja permitido a
   ||                                              consulta apenas pelo modelo do veiculo.
   || 2020/08/23 - v 1.52 - LRGUIMARAE           - Alteracao na rotina p_ws_consulta_corretor
   ||                                              para fazera consulta na tabela de preferencia de comissao de corretor.
   || 2020/08/28 - v 1.53 - LRGUIMARAE           - Atualizacao da procedure p_ws_csn_baixar
   ||                                              para retornar a validade.
   ||                                              Atualizacao da procedure p_ws_csn_consultar para retornar
   ||                                              o numero de chassi e o saldo reservado de pontos
   ||                                              Criacao da procedure pp_v_carta_verde
   || 2020/09/24 - v 1.54 - EMGUIMARAE           - Alteracao nas rotinas p_ws_consultar_planos_pagto e p_gerar_xml_dados_plano_pagto
   ||                                              para inclusao do campo MCA_DEFECTO que indica a preferencia de pagamento do corretor.
   || 2020/09/24 - v 1.54 - VGGOMES              - Alteracao na rotina p_ws_consultar_formas_pagto para inclusao do campo referente a
   ||                                              preferencia da forma de pagamento do corretor no xml
   || 2020/10/08 - v 1.55 - LRGUIMARAE           - Alteracao na rotina p_processa_dados_cobertura para contratar corretamente
   ||                                              as coberturas agrupadas  de carta de verde
   || 2020/10/14 - v 1.56 - SGRACI1              - (ENDOSOS - FLOTAS)
   ||                                              Ajuste de pp_busca_campos_retorno para procesar paso 12 (VISTORIA).
   ||                                              Correccion de l_num_simulacion en pp_cuotas_cotizacion
   ||                                              Ajuste de p_ws_consultar_formas_pagto para que tenga en cuenta la forma
   ||                                              de pago de boleto.
   || 2020/10/16 - v 1.57                        - Alteracao na p_grava_dados para gravacao dos
   ||                                              campos na A2000560 para o endosso.
   || 2020/10/20 - v 1.58                        - Alteracao na procedure p_ws_consulta_coti_spto
   || 2020/10/21 - v 1.59                        - Alteracao nas procedures p_ws_consulta_coti_spto
   ||                                              e p_gerar_xml_coti_spto e no type rec_dados_coti_spto
   || 2020/10/20 - v 1.60 - EMGUIMARAE           - Correcao para selecao do principal metodo de pagamento para cada corretor.
   ||                                              criacao de novo campo mcaValDefecto para retornar a selecao da preferencia do corretor no servico.
   || 2020/10/08 - v 1.61 - IFILHO               - Alteracao na p_ws_consulta_cotacao_mcc para consultar cotacao e apolice do Tronweb via Come Round;
   ||                                            - Criacao da procedure P_GERAR_XML_LISTA_CAMPOS_INTV para retornar XML com campo adicional;
   ||                                            - Criacao do tipo REC_LISTA_COTACAO_INTV para retornar um campo a mais no XML;
   ||                                            - Alteracao na PP_CANCELAMENTO_ENDOSSO para adequacao do passo 91.
   || 2020/10/21 - v 1.62                        - Alteracao nas procedures p_ws_consulta_coti_spto e
   ||                                              p_processa_emissao_endosso e inclusao da nova
   ||                                              procedure p_carga_dados_coti_endosso
   || 2020/10/08 - v 1.63 - EFPEREIRA            - Implementacao do bloco de coberturas agrupadas contratadas na apolice
   ||                                              na saida do servicodetalharPacoteCoberturas.
   || 2020/10/25 - v 1.64 - ATARIN               - Alteracao na procedure p_lee_apolice, ajuste nas consultas por placa e chassi.
   || 2020/10/28 - v 1.65 - JJESUS               - Alteracao na procedure p_lee_apolice,
   ||                                              ajuste na p_carga_dados_coti_endosso e
   ||                                              ajuste na pp_cuotas_cotizacion_spto.
   || 2020/10/28 - v 1.66 - IFILHO               - Associacao da variavel L_NUM_PASO dentro da PP_CANCELAMENTO_ENDOSSO.
   || 2020/10/28 - v 1.67 - JJESUS               - Ajuste na p_ws_consultar_planos_pagto
   || 2020/10/29 - v 1.68 - JJESUS               - Ajuste na p_ws_consultar_planos_pagto
   || 2020/10/25 - v 1.69 - EFPEREIRA            - Ajuste nos valores de premios de coberturas no retorno
   ||                                              do servicodetalharPacoteCoberturas para endossos
   || 2020/10/29 - v 1.70 - IFILHO               - Formatacao do campo FEC_EMISION dentro da P_WS_CONSULTA_COTACAO_MCC.
   || 2020/10/29 - v 1.71 - EFPEREIRA            - Ajuste na rotina p_grava_dados_acessorios para tratar acessoerios em caso de descontratacao
   || 2020/11/02 - v 1.72 - T_JMULLER            - Ajuste para considerar o status 508 4 para o interatividade
   || 2020/11/03 - v 1.73 - FEBSILVA             - Ajuste para fluxo do passo 91
   || 2020/11/02 - v 1.74 - SSERRANO             - Ajuste na recuperacao do Complemento de endereco nom_domicilio2 para nom_domicilio3
   || 2020/10/27 - v 1.75 - FEBSILVA / ACFFILHO  - Criacao das procedures p_ws_consulta_configuracao_banco e p_gerar_xml_dados_banco
   || 2020/11/04 - v 1.76 - AFLIMA               - Ajuste servicoconsultarUsoCategoria
   || 2020/11/05 - v 1.77 - JJESUS               - Ajuste na p_ws_consulta_coti_spto, p_gerar_xml_coti_spto e rec_dados_coti_spto
   ||                                              para inclusao do numero da vistoria na consulta da cotacao de endosso.
   || 2020/11/06 - v 1.57 - EFPEREIRA            - Ajuste na marca de selecao para a cobertura gratuita 0km.
   || 2020/11/06 - v 1.78 - AFLIMA               - Ajuste servicoconsultarUsoCategoria
   || 2020/11/06 - v 1.79 - DBAFRANCA            - Exibir as coberturas de carta verde unificadas para endosso
   || 2020/11/07 - v 1.80 - DBAFRANCA            - Criacao rotina pp_v_carta_verde_spto
   || 2020/11/07 - v 1.81 - LRGUIMARAE           - Ajustes p_tip_desconto para  usar a cotacao do endosso em vez da apolice
   || 2020/11/06 - v 1.82 - EFPEREIRA            - Ajuste no retorno das coberturas agrupadas adicionais no servicodetalharPacoteCoberturas
   || 2020/11/08 - v 1.83 - EFPEREIRA            - Ajuste na mensagem de validacao de rastreador no calculo de endosso.
   || 2020/11/08 - v 1.84 - ATARIN               - Correcao da funcionalidade de consulta de apolice, para que possa ser realizada por diversos filtros de uma vez.
   ||                                              Alteracao na procedure p_lee_apolice e p_gerar_xml_apolice
   ||                                              Criacao das funcoes f_busca_chassi, f_busca_placa, f_busca_ano_fab, f_busca_ano_mod, f_busca_risco e f_busca_segurado
   || 2020/11/09 - v 1.85 - LRGUIMARAE           - Ajustes para nao duplicar  carta verde em coberturas pacote
   || 2020/11/11 - v 1.86 - LRGUIMARAE           - Ajustes p_ws_consulta_coti_spto para novo endosso
   || 2020/11/13 - v 1.87 - JJESUS               - Asigna da variavel global num_poliza apos processo de geracao de parcelas do endosso
   ||                                              e inabilitacao da procedure pp_ajusta_parc_pluri.
   || 2020/11/15 - v 1.88 - EFPEREIRA            - Ajuste na rotina fp_cambio_riesgo para asignar as globais pos emissao
   || 2020/11/17 - v 1.89 - JWOLFF               - Ajustes de emision (cantidad de vehiculos afectados), planos de pagamento, detalle cotizacion y calculo de actividad economica.
   || 2020/11/18 - v 1.90 - EFPEREIRA            - Permitir agrupamento da cobertura de Carta Verde para endossos
   || 2020/11/19 - v 1.91 - JWOLFF               - Ajustes en planos pagamento.
   || 2020/11/19 - v 1.92 - EFPEREIRA            - Ajuste no retorno consultarPacoteCoberturas para o endosso
   || 2020/11/15 - v 1.93 - ATARIN               - Alteracao no servico p_ws_consulta_coti_spto, para poder consultar por mais de um filtro e obter os valores da nova tabela A2009201_VCR
   || 2020/11/19 - v 1.94 - JJESUS               - Novo processo de gravacao da nova tabela de cotacoes de endosso.
   || 2020/11/24 - v 1.95 - EFPEREIRA            - Ajuste no processo de geracao de parcelas,
   ||                                              com inclusao da opcao Boleto a Vencer
   || 2020/11/25 - v 1.96 - EFPEREIRA            - Ajuste no servico detalharPacoteCoberturas para o retorno das coberturas agrupadas
   || 2020/11/28 - v 1.97 - EFPEREIRA            - Ajuste no servico copiarDados para retornar a nacionalidade do segurado/tomador
   || 2020/11/28 - v 1.98 - EFPEREIRA            - Ajuste na mensagem de retorno da validacao de chassi
   || 2020/11/30 - v 1.99 - T_RMALTA             - Ajuste na clausula da procedure p_ws_consulta_uso_categoria
   || 2020/12/01 - v 2.00 - JJESUS               - Ajuste no tipo de desconto para o clube de seguro novo procedure p_tip_desconto
   || 2020/12/02 - v 2.01 - T_RMALTA             - Ajuste no processo de consulta de cotacoes de endosso p_ws_consulta_coti_spto
   || 2020/12/10 - v 2.02 - EFPEREIRA            - Ajuste no servico consultarFormaPagto
   || 2020/11/22 - v 2.03 - ATARIN               - Ajuste na pp_ws_consulta_cotacao e p_lee_apolice
   ||                                            - retorno das apolices provisorias e canceladas quando a consulta e realizada pelo Novo Endosso (MCC).
   || 2020/12/15 - v 2.04 - EFPEREIRA            - Ajuste no servico calcularValorAjustado
   || 2020/12/16 - v 2.05 - JJESUS               - Novo processo para limpar as coberturas (pp_limpa_coberturas) no calculo da cotacao do on-line
   || 2020/12/21 - v 2.06 - JWOLFF               - pp_prepara_globales_calculo
   || 2020/12/28 - v 2.07 - EFPEREIRA            - Ajuste no servico consultarPontosClubeSeguroNovo para retornar o premio bruto e liquido
   || 2021/01/12 - v 2.08 - JJESUS               - Ajuste no fluxo do processo de calculo para corretor generico
   || 2021/01/27 - v 2.09 - JJESUS               - Ajuste na procedure pp_busca_campos_retorno para inclusao do corretor generico 999999
   || 2021/02/02 - v 2.10 - SGRACI1              - Ajuste para solucionar defectos de coberturas: pp_prepara_globales_calculo recalcula g_cod_cia, g_cod_ramo y g_num_cotizacion.
   || 2021/02/02 - v 2.11 - JVVIEIRA             - Ajuste p_grava_clave referente a cobertura de Blindagem
   || 2021/02/04 - v 2.12 - BRUNOLEITE           - Ajuste nas procedures p_ws_consulta_dados_veiculo e P_WS_CONSULTAR_ANO_VEICULO para mensagem de cursor invalido.
   || 2021/01/14 - v 2.13 - BMXAVIER/VGGOMES     - Alteracoes para tela de comparativo US09
   || 2020/11/24 - v 2.14 - LRGUIMARAE/VGGOMES   - Ajuste p_ws_consulta_pacote_cobertura para considerar as num_simulacion
   ||                                              2 e 3 com mesma forma de pagamento da 1 . ajustao a query para trazer todas a simulacoes.
   ||                                              Ajuste p_gerar_xml_pacote_cobertura para retornar o codigo da simulacao
   ||                                              no campo codNroSimulacao do xml de retorno
   ||                                              Ajuste p_ws_consultar_planos_pagto para retornar os planos de pagamento
   ||                                              corretamente pelo simulacion setada
   ||                                              Ajuste pp_borra_tablas_simulacion para remover as simulacoes pela nova
   ||                                              cotacao de simulacao
   ||                                              Ajuste na p_grava para que no passo 10 chame a rotina
   ||                                              ea_k_231_coti.p_atualiza_cotacao;
   ||                                            - Ajuste pp_ws_detalhe_pacote_cobertura para incluir na query o tipo de pacote
   ||                                              e atualizacao do rec_detalhe_pacote para incluir o campo do tipo de pacote
   || 2021/01/15 - v 2.15 - DPASOUZA             - Melhoria de performace na consulta por nome proponente e produto no MCC(p_ws_consulta_cotacao_MCC)
   ||                                            - incluido a chamada de atualizacao de passo para gravar na tabela C2009030_vcr
   || 2021/02/15 - v 2.16 - LRGUIMARAE           - Ajustes p_ws_consultar_formas_pagto para 3 pacotes
   || 2021/02/15 - v 2.17 - LRGUIMARAE           - Ajustes verificacao 3 pacotes
   || 2021/02/19 - v 2.18 - JVVIEIRA             - Ajuste p_analisar_tipologia_spto
   || 2021/02/23 - v 2.19 - T_RMALTA             - Ajuste funcao de consulta pacotes cobertura para retorno do tip_produto
   || 2021/02/15 - v 2.20 - LRGUIMARAE           - Ajustes para trazer coberturas agrupadas 3 pacotes e usar a num simulacao de ja gravada no detalharpacotecobertura /p_ws_consulta_pacote_cobertura
   || 2021/03/01 - v 2.21 - LRGUIMARAE           - Ajustes p_ws_consultar_planos_pagto 3 pacotes
   || 2021/03/03 - v 2.22 - Freddy Eliecer Prieto Vega - (BRASIL-CONVERGENCIA)
   ||                                            - consultarCotacaco - MCA_RENOVACION = N
   || 2021/03/08 - v 2.23 - LRGUIMARAE           - Ajustes p_ws_consultar_planos_pagto/p_ws_consultar_formas_pagto para 3 pacotes quando nao passado simulacao
   || 2021/03/15 - v 2.24 - EFPEREIRA            - Ajuste no servico consultar Cotacao para Renovacao Grantida.
   || 2021/03/16 - v 2.25 - JMULLER              - Ajuste no procedimento p_carga_dados_coti_endosso
   || 2021/03/16 - v 2.26 - JJESUS               - Ajustes no procedimento p_processa_emissao_endosso e pp_efetiva_emissao_endosso
   || 2021/03/30 - v 2.27 - JJESUS               - Ajuste no processo de calculo do endosso p_processa_emissao_endosso e
   ||                                              asigna de globais default (pp_asigna_globales_defecto)
   || 2021/03/29 - v 2.29 - SSERRANO             - Ajustes para atender cancel ou cancel com restituicao por interatividade
   || 2021/03/24 - v 2.27 - LRGUIMARAE           - Ajustes fp_bus_coberturas para trazer a faixa de is  para 3 pacotes por tarifa
   ||                                              Ajustes na funcao fp_bus_cob_agrup para recuperar as cobs de casco em 3 pacotes
   || 2021/03/24 - v 2.28 - LRGUIMARAE           - Ajustes para trazer os dados variaveis dos 3 pacotes
   || 2021/03/26 - v 2.29 - LRGUIMARAE           - Ajuste na funcao fp_bus_mca_selec_atrib_agrup para trazer a franquia corretamente no detalharpacotecobertura
   || 2021/03/08 - v 2.30 - LRGUIMARAE           - Ajustes para gravar os dados variaveis da simulao selecionada no passo 7
   || 2021/03/27 - v 2.31 - JJESUS               - Ajuste no processo de copia da cotacao (p_ws_usar_cotacao)
   || 2021/03/28 - v 2.32 - LRGUIMARAE           - Ajustes no detalharpacotecobertura para correta validacao se e concessionaria
   || 2021/03/28 - v 2.33 - EFPEREIRA            - Ajustes no calculo para Renovacao Flex
   || 2021/03/29 - v 2.34 - SSERRANO             - Ajustes para atender cancel ou cancel com restituicao por interatividade
   || 2021/03/29 - v 2.35 - LRGUIMARAE           - Ajuste p_ws_consulta_pacote_cobertura  para sempre retornar os 3 pacotes quando nao vir o  xml
   || 2021/03/29 - v 2.36 - LRGUIMARAE           - Ajuste pp_ws_detalhe_pacote_cobertura para sempre retornar os 3 pacotes quando nao vir o  xml
   || 2021/03/30 - v 2.37 - JJESUS               - Ajuste no processo de asigna de variaveis default (pp_asigna_globales_defecto)
   || 2021/03/30 - v 2.38 - LRGUIMARAE           - Ajuste simulacao recalculo
   || 2021/03/31 - v 2.39 - GKSILVA              - Ajuste concatenar cotacao e numero do pacote
   || 2021/03/31 - v 2.40 - JVVIEIRA             - Ajuste na fp_bus_mca_selec_atrib_agrup
   || 2021/03/31 - v 2.41 - LSS                  - Ajuste na f_busca_placa_mcc
   || 2021/04/01 - v 2.42 - RNSOUZA              - Ajuste para atender o fluxo de nomeacao do agt (l_tip_situ_coti_grp)
   || 2021/04/05 - v 2.43 - JVVIEIRA/VGGOMES     - Ajuste na p_ws_consulta_cotacao_mcc e p_gerar_xml_lista_campos_mcc para retorno do num_simulacion
   || 2021/04/05 - v 2.44 - LRGUIMARAE           - Ajuste p_ws_consulta_pacote_cobertura e pp_ws_detalhe_pacote_cobertura para retornar o numero
   ||                                              da simulacao somente se COD_ROL_BO estiver preenchido
   || 2021/04/06 - v 2.45 - JVVIEIRA             - Remocao dos pontos ('.') na formatacao do Nro Cotacao na funcao p_ws_consulta_pacote_cobertura
   || 2021/04/06 - v 2.46 - JJESUS               - Ajuste no processo de calculo do endosso (cotacao)
   || 2021/04/07 - v 2.47 - T_RMALTA             - Ajuste no processo p_ws_csn_consultar - Inclusao numero da simulacao
   || 2021/04/08 - v 2.48 - JVVIEIRA             - Alteracao do desPacotes no consultar_pacotes_coberturas para trazer nome da agrup. Casco
   || 2021/04/08 - v 2.49 - T_RMALTA             - Ajuste no processo p_lee_detalhe_cotacao - Inclusao numero da simulacao
   || 2021/04/08 - v 2.50 - LRGUIMARAE           - Criacao das rotinas p_grava_pacote_cobertura e pp_ws_detalhe_pacote_prefere
   ||                                              para gravacao e retorno da lista de cadastro de preferencia do corretor
   || 2021/04/08 - v 2.51 - LRGUIMARAE           - Ajuste mensagem nome pacote
   || 2021/04/30 - v 2.52 - SGARCIA              - Merge para o produto Bien Vivir.
   || 2021/04/13 - v 2.53 - LRGUIMARAE           - Ajuste pp_carga_cob_c2000020 para atualizar os dados das variaveis de simulacao quando for 3 pacotes
   || 2021/04/14 - v 2.54 - LRGUIMARAE           - Ajuste para preferencia do corretor
   || 2021/04/14 - v 2.55 - LRGUIMARAE           - Ajuste na rotina de p_ws_consulta_cotacao_mcc para correto retorno quando for 3 pacotes
   || 2021/04/17 - v 2.56 - LRGUIMARAE           - Ajuste para preferencia do corretor para trazer dvs faltantes na lista e gravacao
   || 2021/04/17 - v 2.57 - LRGUIMARAE           - Ajustes na gravacao da g2109142
   || 2021/04/17 - v 2.58 - LRGUIMARAE           - Ajuste para listar o detalhe de comparativo quando for 3 pacotes e coberturas gratuitas e gravar os suma_aseg da preferencia do corretor
   || 2021/04/19 - v 2.59 - LRGUIMARAE           - Ajuste na gravacao da preferencia do corretor
   || 2021/04/19 - v 2.61 - LRGUIMARAE           - Ajustes na  gravacao de preferencia de corretor quando is tem lista , e retorno da
   ||                                              preferencia quando o corretor tem mais de  uma preferencia cadastrada por produto
   || 2021/04/20 - v 2.62 - LRGUIMARAE           - Ajuste para listar a franquia quando criado a listagem de corretor generico
   || 2021/04/20 - v 2.63 - LRGUIMARAE           - Ajuste para listar a franquia quando e corretor existente e apenas as cob 202 e 203 estao selecionadas no detalhepacotelista
   || 2021/04/23 - v 2.64 - LRGUIMARAE           - Ajuste para trazer apenas a franquia da cob casco no consultapacotecoberturas
   || 2021/04/20 - v 2.66 - LRGUIMARAE           - Ajustes na rotina p_grava_pacote_cobertura para gravar a ultima linha
   || 2021/04/23 - v 2.68 - RNSOUZA              - Criado a chamada da cobertura 1303 - p_v_tip_cob_ext_reboq
   || 2021/04/28 - v 2.69 - LRGUIMARAE           - Ajustes na rotina p_grava_pacote_cobertura para gravar o is da cobs 304 e 305 quando nao vierem contratadas.
   || 2021/04/29 - v 2.70 - T_RMALTA             - Ajuste na condicao de definicao de eh 3 pacotes
   || 2021/05/03 - v 2.73 - EFPEREIRA            - Ajuste no servico consultarPacoteCoberturas para retornar as coberturas contratadas  no calculo
   || 2021/05/03 - v 2.74 - EFPEREIRA            - Criacao da C_COBERTURAS_PCT_COT para retornar as coberturas contratadas  no calculo
   || 2021/05/03 - v 2.75 - JMULLER              - Ajustes da chamada para identificar os 3 pacotes
   || 2021/05/06 - v 2.77 - LRGUIMARAE           - Ajuste para listar a cob 106 apenas se o corretor for concessionaria
   || 2021/05/07 - v 2.78 - ALMSOUZA             - Ajuste na rotina de p_ws_consulta_cotacao_mcc para permitir a consulta de cotacao do Bien-Vivir quando
   ||                                              a cotacao ainda nao tiver simulacao selecionada e tambem que a situacao da cotacao tambem seja exibida
   ||                                              este produto (estava fixo para auto - 231)
   || 2021/05/07 - v 2.78 - LRGUIMARAE           - Ajuste p_lee_detalhe_cotacao para retornar num_simulacao se cod_rol_bo nao for nulo
   ||                                              e num_simulacion for nulo for quando 3 pacotes e ajuste p_ws_consulta_pacote_coberturas para retornar
   ||                                              valor premio total quando for 3 pacotes
   || 2021/05/07 - v 2.79 - LRGUIMARAE           - Ajuste fp_bus_coberturas_agrupadas para chamar a rotina pi_mca_concessionaria somente quando
   ||                                              detalhar o pacote de cobetura preferencia
   || 2021/05/07 - v 2.80 - T_RMALTA             - Ajuste pp_ws_detalhe_pacote_cobertura - condicao 3 pacotes - retirada de Joins
   || 2021/05/06 - v 2.81 - DPASOUZA             - Ajuste na na consulta p_ws_consulta_coti_spto, consultar por nome completo
   || 2021/04/30 - v 2.82 - JJESUS               - Nova procedure pp_actualiza_fec_efec_recibo para atualizacao da data de vencimento da primeira parcela
   ||                                              para pagamentos antecipados.
   || 2021/06/04 - v 2.821 - JJESUS              - Nova procedure pp_actualiza_fec_efec_recibo para atualizacao da data de vencimento da primeira parcela
   ||                                              para pagamentos antecipados.
   || 2021/04/30 - v 2.83 - PCANDRADE            - Ajuste na consulta de segurado quando cod_situacao = 7 (TITULAR FALECIDO)
   || 2021/05/07 - v 2.84 - BMXAVIER             - Ajustes para retornar cob 106 quando concessionaria
   || 2021/05/11 - v 2.85 - T_RMALTA             - Ajuste na funcao fp_bus_det_cob_endosso para endosso 3 pacotes
   || 2021/05/13 - v 2.86 - ALMSOUZA             - Correcao na consulta da situacao da cotacao
   || 2021/05/14 - v 2.87 - EFPEREIRA            - Implementacao de listagem dinamica no calculo
   || 2021/05/17 - v 2.89 - JVVIEIRA             - Ajuste p_calcula para borrar tabelas
   || 2021/05/17 - v 2.90 - RFREITAS             - Tratamento de valor de veiculo na alteracao de cotacao
   || 2021/05/20 - v 2.91 - JJESUS               - Alteracao na p_grava_dados para asignar a global de dados variavies DV...
   || 2021/05/28 - v 2.92 - T_RMALTA             - Ajuste para o numero da simulacao no caso de endosso 3 pacotes
   || 2021/04/23 - v 2.93 - TCASANTO             - Ajuste para listar os dados do veiculo a partir da placa
   || 2021/05/30 - v 2.94 - EFPEREIRA            - Ajuste no calculo e coberturas adicionais para BO
   || 2021/05/31 - v 2.95 - AMARCO               - Ajuste de queries de servicio de MCC para su optimizacion y solucion EIF
   || 2021/06/01 - v 2.96 - AMARCO               - Ajuste de queries de servicio de MCC para evitar su mal funcionamiento
   || 2021/06/01 - v 2.97 - MAANJUNIOR           - Tratamento de caracteres especiais no campo de nro de apolice anterior
   || 2021/05/31 - v 2.98 - VGGOMES              - Ajustes para retornar o chassi e a placa quando consultar os dados do veiculo pelos mesmos
   || 2021/05/31 - v 2.99 - VGGOMES              - Ajuste para consumir o servico nortix_decodificador
   || 2021/06/03 - v 2.991- AMARCO               - Ajuste de consultas MCC para defecto EHG
   || 2021/06/04 - v 3.00 - DFELICIO             - Limpar a sessao para retornar os dados do veiculo
   || 2021/06/06 - v 3.01 - EFPEREIRA            - Ajuste no servico consultarpacotecoberturas para renovacao garantida
   || 2021/06/08 - v 3.02 - SMALDONADO           - Se ajusta p_lee_detalhe_cotacao para que calcule correctamente los items totales y pendientes
   ||                                              si ea_k_231_flota_batch.g_k_tip_situ_prop_pend
   || 2021/06/09 - v 3.03 - AMARCO               - Ajustes de optimizacion para p_ws_consulta_cotacao_mcc
   || 2021/06/09 - v 3.04 - AMARCO               - Ajustes de defecto EHG para p_ws_consulta_cotacao_mcc
   || 2021/06/10 - v 3.05 - VGGOMES              - Ajustes no calculo da primeira parcela e demais parcelas
   || 2021/06/07 - v 3.06 - VGGOMES              - Ajuste para consumir o nortix_placa quando consultado os dados do veiculo por chassi
   || 2021/06/07 - v 3.07 - T_RMALTA             - Ajuste no filtro de consulta dos dados de veiculo p_consulta_veic
   || 2021/06/13 - v 3.08 - BMXAVIER             - Ajuste na p_gerar_xml_detalhe_pacote para recuperar cod_agt quando houver fp_cambio_riesgo.
   || 2021/06/15 - v 3.09 - JJESUS               - Inclusao do codigo da taria no cursor c_excluidas da function fp_excluye
   ||                                              procedure p_processa_dados_cob_endosso.
   || 2021/06/16 - v 3.10 - MMNUEZH              - Ajuste en p_lee_detalhe_cotacao para defecto FJD
   || 2021/06/17 - v 3.11 - JVVIEIRA             - Ajuste na pp_v_contrat_automais_casa para asignar cod_cob
   || 2021/06/18 - v 3.12 - T_OCRUZ              - Ajustes  cartao de credito
   || 2021/06/24 - v 3.13 - BMENDONC             - Ajustes Primeira parcela cotacao grupo
   || 2021/06/24 - v 3.14 - JVVIEIRA             - Ajuste mensagem da consulta de dados segurado
   || 2021/06/28 - v 3.15 - AMARCO               - Ajuste en el servicio mcc para el defecto FAD
   || 2021/06/28 - v 3.16 - LRGUIMARAE/BMXAVIER  - Ajuste para contratar coberturas obrigatorias que nao existam no pacote de preferencia.
   || 2021/06/30 - v 3.17 - LRGUIMARAE/BMXAVIER  - Ajuste na p_gerar_xml_detalhe_pacote para contratar coberturas obrigatorias no pacote de preferencia.
   || 2021/07/01 - v 3.18 - EFPEREIRA            - Criacao da rotina pp_v_receita_garantida
   || 2021/07/02 - v 3.19 - LRGUIMARAE/BMXAVIER  - Ajuste na p_gerar_xml_detalhe_pacote para contratar coberturas obrigatorias no pacote de preferencia.
   || 2021/07/05 - v 3.20 - T_OCRUZ              - EMISSAO RCF NAO VALIDAR RASTREADOR
   || 2021/07/05 - v 3.20 - AMARCO               - Modificacion del servicio de consulta mcc para defecto F0E
   || 2021/07/05 - v 3.13 - JWOLFF               - En renovacion flexivel, Se asocia a la nueva cotizacion la antigua en p_ws_usar_cotacao
   || 2021/07/08 - v 3.22 - SSERRANO             - Ajustes em informacoes para obter vencimento da primeira parcela DC
   || 2021/07/08 - v 3.23 - EFPEREIRA            - Ajuste na gravacao das franquias de vidros no calculo individual
   || 2021/07/09 - v 3.24 - JJESUS               - Alteracao nas procedures p_processa_emissao_endosso e pp_efetiva_emissao_endosso para
   ||                                              ajuste no processo de atualizacao da cotacao de endosso.
   || 2021/07/11 - v 3.25 - EFPEREIRA            - Ajuste na lista de valor no detalharPacoteCoberturas para Endossos
   || 2021/07/11 - v 3.26 - BMXAVIER             - Ajuste na p_ws_usar_cotacao para limpar a simulacao
   || 2021/07/14 - v 3.27 - BMXAVIER/GSAARAUJ    - Ajuste na pp_limpa_coberturas para limpar a simulacao
   || 2021/07/15 - v 3.28 - JVVIEIRA/BMXAVIER    - Ajuste na c_agrupamento_cob3p para retornar carta verde endosso
   || 2021/07/15 - v 3.29 - VGGOMES              - Asignar o chassi informado em momento de aplicacao de desconto para utiliza-lo
   ||                                            - quando o mesmo nao for preenchido nos passos anteriores.
   || 2021/07/14 - v 3.30 - RNSOUZA              - Ajustes na procedure p_processa_dados_cob_endosso para validacao quando tip_merc_deter = 'R'
   || 2021/07/20 - v 3.31 - EFPEREIRA            - Ajuste no calculo de cotacao para frente do BackOficce
   || 2021/07/22 - v 3.32 - BMXAVIER             - Remocao da versao 3.28
   || 2021/08/01 - v 3.33 - EFPEREIRA            - Ajuste no Recalculo para permitir alteracao da comissao do corretor
   || 2021/07/29 - v 3.34 - BMXAVIER             - Criacao da funcao fp_valida_nacionalidade e validacao da nacionalidade para substituicao de veiculo no endosso.
   || 2021/08/03 - v 3.35 - RNSOUZA              - AJUSTE DO PASSO 13 DE FROTA FULL PARA NAO MODIFICAR OS DEMAIS PASSOS
   || 2021/08/04 - v 3.36 - EFPEREIRA            - Inclusao do dado variavel comissao no detalharPacoteCoberturas
   || 2021/08/06 - v 3.37 - EFPEREIRA            - Inclusao do campo comissao na saida do servico consultarPacoteCoberturas para 3 pacotes
   || 2021/08/07 - v 3.38 - EFPEREIRA            - Ajuste no calculo no processo de renovacao garantida
   || 2021/08/05 - v 3.39 - GKSILVA              - Correcao realizada quando o NUM_SIMULACAO vir null ao cair na CT 5001
   || 2021/08/07 - v 3.40 - EFPEREIRA            - Remocao da versao 3.37
   || 2021/08/12 - v 3.41 - EFPEREIRA            - Ajuste no recalculo para o renovacao e retorno da versao 3.37
   || 2021/08/16 - v 3.42 - EFPEREIRA            - Ajuste no servico consultarPacoteCoberturas para Renovacao
   || 2021/08/16 - v 3.43 - GGARLETTI            - Ajuste na procedure p_ws_calcular_fim_vigencia
   || 2021/08/16 - v 3.44 - GGARLETTI            - Ajuste na procedure p_ws_consultar_poliza_anterior
   || 2021/08/18 - v 3.45 - SMALDONADO           - Ajuste en el calculo del numero riesgos para propuestas efectivadas (23399).
   || 2021/08/18 - v 3.46 - BMXAVIER             - Substituicao da chamada ea_k_g2109142_vcr.f_eh_3_pacotes
   || 2021/08/19 - v 3.46 - JWOLFF               - Ajustes para renovacion flexivel en p_ws_usar_cotacao
   || 2021/08/25 - v 3.48 - CGARCIA              - Inclusion en p_ws_consulta_cotacao_mcc para retornar el campo OBS_SITU_BO
   || 2021/08/27 - v 3.49 - ADMORILLAS           - Entrega defecto 26091
   || 2021/08/27 - v 3.50 - RFREITAS             - Renovacao flex incluir cod_fila na copia da c2000000
   || 2021/08/30 - v 3.51 - JVVIEIRA             - Ajuste na procedure p_ws_calcular_fator_ajuste
   || 2021/08/23 - v 3.52 - GKSILVA              - Correcao do cancelamento do endosso
   || 2021/08/25 - v 3.53 - GKSILVA              - Correcao do cancelamento do endosso
   || 2021/08/30 - v 3.54 - EFPEREIRA            - Ajuste na funcao fp_cambio_rf para renovaacao flex
   || 2021/08/31 - v 3.55 - JWOLFF               - Ajuste en renovaciones pp_limpa_coberturas para mantener las simulaciones 998 y 999
   || 2021/09/03 - v 3.56 - EFPEREIRA            - Ajuste na mensagem de retorno BackOffice Risco sem Aceitacao
   || 2021/09/04 - v 3.57 - EFPEREIRA            - Ajuste no detalharPacoteCoberturas para renovacao garantida
   || 2021/09/10 - v 3.58 - EFPEREIRA            - Complemento a versao 3.36
   || 2021/09/08 - v 3.58 - JJESUS               - Alteracao na p_processa_emissao_endosso para asignar a variavel global
   ||                                              mca_cotizacion_suplemento apos a execucao do processo batch
   || 2021/09/10 - v 3.59 - JWOLFF               - En p_actualiza_paso se agrega condicion para que no inserte en c20009030_vcr en flotas.
   || 2021/09/10 - v 3.60 - GKSILVA              - Correcao para limitar o campo de endereco do condutor a 80 caraceteres, devido ao erro
   ||                                              que consta no IM02543815. p_processa_dados_cotacao.
   || 2021/09/13 - v 3.61 - JVVIEIRA             - Ajuste realizado na pp_v_contrat_automais_casa para que as Cob 400 e 421 sejam contratadas ou descontratadas em conjunto
   || 2021/09/20 - v 3.63 - SSERRANO             - Ajuste na validacao do chassi servico nortix em etapas em que nao existe a informacao do fipe paa validar.
   || 2021/09/21 - v 3.64 - JJESUS               - Alteracao na pp_limpa_ssr e pp_efetiva_emissao_endosso para correcao de erro de
   ||                                              constraint nas tabelas do SSR.
   || 2021/09/24 - v 3.65 - GKSILVA              - Correcao na pp_limpa_coberturas onde estava escluindo coberturas relacionadas ao 3 pacotes
   || 2021/09/29 - v 3.66 - AEFSOUZA             - Criacao da exception na proc p_ws_consulta_cotacao_mcc
   || 2021/09/29 - v 3.67 - IHARAUJO             - Correcao da function fp_valida_g2109042_vcr fec_validez.
   || 2021/10/05 - v 3.68 - IHARAUJO             - Ajustes da function fp_valida_g2109042_vcr (Criacao de cursores e nova chamada da global).
   || 2021/10/07 - v 3.69 - IHARAUJO             - Ajuste na fp_valida_g2109042_vcr (num_serie, num_matricula,cod_fipe)
   || 2021/09/21 - v 3.70 - IHARAUJO             - Cricao da function fp_valida_g2109042_vcr e ajuste consultar dados veiculos, nao retornar registros se nao houver a configuracao
   ||                                              na tabela g2109042_vcr
   || 2021/10/12 - v 3.75 - EFPEREIRA            - Ajuste no servico consultarFormasPagamento para renovacao Garantida/Flex
   || 2021/10/20 - v 3.76 - VGGOMES              - Ajuste para retornar a mensagem quando houver erro no calculo
   || 2021/10/27 - v 3.77 - EGORDO               - Upper na placa
   || 2021/10/19 - v 3.77 - CROCHAA              - Inclusao EMAIL NA SAIDA DO JSON (p_ws_consulta_corretor)
   || 2021/10/20 - v 3.78 - MBARUCH              - RF 11 e 12 Detalhar pacote cobertura funcionado para listagem de categoria generica
   || 2021/10/27 - v 3.79 - GGARLETTI            - RF036 - Alteracoes: p_lee_detalhe_cotacao
   || 2021/10/28 - v 3.80 - AFIRMANI             - ALTERACAO  p_lee_detalhe_cotacao para incluir campo NUM_QTD_FROTA
   || 2021/10/29 - v 3.81 - ODSILVA              - Retirada do campos NUM_QTD_FROTA e NUM_QTDE_RISCOS da procedure P_LEE_DETALHE_COTACAO
   || 2021/09/20 - v 3.82 - SCARDONA             - Modificacion de los cursores del p_ws_consulta_cotacao_mcc, estatus MCC
   || 2021/11/04 - v 3.83 - MBARUCH              - Ajuste pvalida_clave_gen_clave
   || 2021/11/04 - v 3.84 - MBARUCH              - fi_valida_coti_grupo
   || 2021/10/27 - v 3.77 - EGORDO               - Upper na placa
   || 2021/11/05 - v 3.78 - IHARAUJO             - Correcao p_ws_usar_cotacao fec_validez_tarifa
   || 2021/10/28 - v 3.79 - T_RMALTA             - Inclusao de trecho para mitigar lock contencion C2000000 - pp_ws_processar_passo e tratamento para log de erro.
   || 2021/11/12 - v 3.88 - JVVIEIRA             - Ajuste na recuperacao do TIP_VISTORIA e MCA_VISTORIA_ESPECIAL para o retorno do PP100
   || 2021/11/17 - v 3.89 - MBARUCH              - Ajuste detalhe pacote cobertura num_cotizacion_grupo
   || 2021/11/19 - v 3.90 - MBARUCH              - p_graba_datos_cob_pacote e p_marca_cobs_contratadas
   || 2021/10/28 - v 3.91 - T_RMALTA             - ROLLBACK - 3.79 - Inclusao de trecho para mitigar lock contencion C2000000 - pp_ws_processar_passo e tratamento para log de erro.
   || 2021/10/28 - v 3.92 - MBARUCH              - p_gerar_xml_detalhe_pkt_auto2
   || 2021/10/28 - v 3.93 - MBARUCH              - re-versionamento p_gerar_xml_detalhe_pkt_auto2
   || 2021/11/24 - v 3.94 - T_RMALTA             - Inclusao de trecho para mitigar lock contencion C2000000 - pp_ws_processar_passo e tratamento para log de erro.
   || 2021/12/02 - v 3.95 - GGARLETTI            - Retirado a execucao de alguns campos para poder funcionar a ea_k_231_spto_ws_vcr.p_ws_nortix
   || 2021/11/24 - v 3.79.1 - T_RMALTA           - Inclusao de trecho para mitigar lock contencion C2000000 - pp_ws_processar_passo e tratamento para log de erro.
   || 2021/11/26 - v 3.80.1 - RMOGOMES           - Carregar globais para processamento do Calculo e Recalculo no Convivencia
   || 2021/12/11 - v 3.96 - EFPEREIRA            - Ajuste no detalharPacotecoberturas para coberturas agrupadas
   || 2021/12/15 - v 3.97 - DPEREZ               - Se modifica pp_ws_consulta_detalhe_cotacao para obtener OBS_SITU_BO en flotas
   || 2021/11/26 - v 3.81 - T_RMALTA             - Complemento do 7.38 - mudanca e inclusao de condicao para somente tip_mvto_batch 7
   || 2021/12/08 - v 3.82 - ANDREZA REZENDE      - Ajuste na fp_valida_g2109042_vcr para buscar pelo fipe ou molicar.
   || 2021/10/21 - v 3.83 - LRGUIMARAE           - Adicao Suporte Motor Subscricao
   || 2021/10/28 - v 3.84 - LRGUIMARAE           - Adicao Suporte Motor Subscricao para a funcionalidade do rastreador
   || 2021/11/12 - v 3.85 - LRGUIMARAE           - Ajuste pp_ws_consulta_dados_veiculo qusndo chassi vir reprovado do motor
   || 2020/11/16 - v 3.86 - LRGUIMARAE           - Ajuste pp_ws_processar_passo variaveis motor
   || 2020/11/16 - v 3.87 - LRGUIMARAE           - Desabilita mensagem de erro 11281 motor subcricao
   || 2021/12/12 - v 3.88 - LRGUIMARAE           - Ajuste pp_ws_consulta_dados_veiculo
   || 2021/12/13 - v 3.89 - T_RMALTA             - Melhoria de performance pp_trata_log_processo - alteracao na forma de captura
   || 2021/12/11 - v 3.90 - EFPEREIRA            - Ajuste no detalharPacotecoberturas para coberturas agrupadas
   || 2021/12/18 - v 3.91 - LRGUIMARAE           - Ajuste pp_ws_consulta_dados_veiculo para que quando for motor for chassi ou placa nao consultar a g2109042_vcr
   || 2021/12/20 - v 3.92 - BMXAVIER             - Ajuste na p_ws_consulta_pacote_cobertura para adicionar DBMS_SESSION.RESET_PACKAGE e trn_k_global.borra_todas
   || 2021/12/20 - v 3.93 - LRGUIMARAE           - Ajuste pp_ws_consulta_dados_veiculo para validacao motor
   || 2021/12/22 - v 3.94 - BMXAVIER             - Ajuste no type rec_pacote mudando o des_premio_total para varchar
   || 2021/12/24 - v 3.95 - BMXAVIER             - Ajuste na p_ws_consulta_pacote_cobertura para INNER JOIN da c_modalidad olhar pelo l_num_simulacion
   || 2021/12/26 - v 3.96 - T_RMALTA             - Melhoria de performance nos processos de gravacao c2000000 - cache
   || 2022/01/17 - v 3.97 - MVINHAL              - Estender a utilizacao do cache(v 3.96) para todos os passos.
   || 2021/12/28 - v 3.98 - RMOGOMES             - Carregar global cod_cia no p_processa_mdg_ct para Convivencia validar corretamente o tipo de mensagem
   || 2022/02/01 - v 3.99 - T_RMALTA             - Alteracao da variavel para mvto_batch - Melhoria de performance nos processos de gravacao c2000000 - cache
   || 2022/02/04 - v 4.00 - DPEREZ               - Se modifica p_lee_detalhe_cotacao para quitar cambio en el PCT_AGT_NPR
   || 2022/02/10 - v 4.01 - MPRADA               - Se Modifica p_ws_consulta_cotacao_mcc para obtener TXT_STATUS_MCC en flotas
   || 2022/02/02 - v 4.02 - GGARLETTI/ODSILVA    - RF004 - VOT (ano_modelo e ano_fabricacao)
   || 2022/01/20 - v 4.03 - JVVIEIRA             - Ajuste na recuperacao do TIP_VISTORIA e MCA_VISTORIA_ESPECIAL para o retorno do PP100.
   || 2022/02/08 - v 4.04 - MVINHAL              - Uso de cache - em_k_tarifa_compuesta_vcr.
   || 2022/01/20 - v 4.00 - JVVIEIRA             - Ajuste na recuperacao do TIP_VISTORIA e MCA_VISTORIA_ESPECIAL para o retorno do PP100.
   || 2022/02/08 - v 4.01 - MVINHAL              - Uso de cache - em_k_tarifa_compuesta_vcr.
   || 2022/02/18 - v 4.02 - Andreza              - Limitar caracteres dos campode nom_domicilio a 40 para nao dar erro de em_f_crear_presupuesto_vcr
   || 2022/02/23 - v 4.05 - GGARLETTI            - Correcao no servico 'ConsultarApoliceAnterior' (p_ws_consultar_poliza_anterior)
   || 2022/03/04 - v 4.06 - FISILVA              - OCT 39169 - Alteracao retorno mensagem de CEP (p_ws_consulta_cep)
   || 2022/03/04 - v 4.07 - OTSILVA              - OCT 40891 - Correcao Defeccto Cobertura 214
   || 2022/03/02 - v 4.08 - RGOBBI               - Substituicao da Obrigatoriedade do Rastreador do Passo 6 para o Passo 4;
   ||                                            - Melhoria de Performance na "pp_limpa_coberturas", incluindo o COD_RAMO;
   || 2022/03/10 - v 4.09 - MVINHAL              - Evitar execucoes repetidas do objeto em_f_genera_traza toda vez que o mx for acionado.
   || 2022/03/15 - v 4.10 - MBARUCH              - DEFECTO 41180 - ajuste ref defecto 40891;
   || 2022/03/21 - v 4.11 - MBARUCH              - reverter alteracao de 4.10 e 4.07;
   || 2022/03/10 - v 4.04 - MVINHAL              - Evitar execucoes repetidas do objeto em_f_genera_traza toda vez que o mx for acionado.
   || 2022/03/16 - v 4.05 - MVINHAL              - Uso de cache - ea_k_definicion_pacote_vcr.p_monta_pacotes.
   || 2022/03/21 - v 4.06 - LRGUIMARAE           - IM03093233/IM03096240/IM03096001 - Ajuste na rotina p_ws_processa_mca_rast_obrig para quando nao achar o corretor
   ||                                              na tabela de preferencia de pacotes assumir 3 pacotes
   || 2022/04/01 - v 4.12 - ODSILVA              - DEFECTO 39083 - (p_lee_detalhe_cotacao)
   || 2022/04/04 - v 4.13 - CROCHAA/ODSILVA/GGARLETTI
                                                 - OCTANE 40716 (pp_ws_consulta_dados_veiculo)
   || 2022/04/06 - v 4.14 - MBARUCH              - p_gerar_xml_detalhe_pkt_auto3, remocao pkt_auto e pkt_auto2
   || 2022/04/06 - v 4.15 - JJESUS               - Alteracao p_ws_processa_rast_obrig_spto (BO)
   || 2022/04/06 - v 4.16 - JVVIEIRA             - IM03102590/IM03103265 - Asignar num_serie quando num_serie_matricula for diferente
   || 2022/04/11 - v 4.17 - JVVIEIRA             - IM03128301 - Ajuste na versao 4.06 para asignar com e sem o Prefixo DV
   || 2022/04/14 - v 4.18 - JJESUS               - Alteracao p_ws_processa_rast_obrig_spto para nao execucao do processo
   ||                                              apos envio para BO
   || 2022/04/25 - v 4.19 - JVVIEIRA             - IM03131827 - Alteracao para quando um_serie_matricula eh informado mas o fluxo eh seguido atraves do fipe com as informacoes do veiculo.
   || 2022/04/26 - v 4.23 - T_RMALTA             - Inclusao do DBMS_SESSION.RESET_PACKAGE na procedure p_ws_consultar_planos_pagto
   || 2022/05/06 - v 4.24 - JVVIEIRA             - IM03167854 - Alteracao na p_ws_recusa_flexivel para passar a verificar o cod_modalidade sem ser generico
   || 2022/05/10 - v 4.25 - MVINHAL              - Uso de cache - em_k_tarifa_multivariable_vcr.
   || 2022/05/13 - v 4.26 - MVINHAL              - Otimizacao tron(trn_k_df_cmn_nwt_xx_cnn).
   || 2022/05/17 - v 4.27 - JPEREZ               - Se Modifica p_ws_consulta_cotacao_mcc para recuperar el statu mcc.
   || 2022/05/17 - v 4.28 - MVINHAL              - Otimizacao tron(trn_k_df_cmn_nwt_xx_vrb_cnc).
   || 2022/03/27 - v 4.29 - RMOGOMES             - Validacao para nao limpar tabela quando origem for Calculo por Cobertura do Convivencia
   || 2022/05/23 - v 4.30 - T_JJESUS             - Ajuste na p_grava_dados para asignar o TIP_DOCUM como global para selecao do
   ||                                              pacote de coberturas do endosso.
   || 2022/05/17 - v 4.31 - JPEREZ               - Se Modifica p_ws_consulta_cotacao_mcc para consultar por nombre tercero.
   || 2022/06/02 - v 4.32 - JPEREZ               - Se Modifica p_ws_consulta_cotacao_mcc para ajustar la consulta mcc autos y bien vivir
   ||                                            - Se ajusta el cursor del paquete p_ws_consulta_cotacao_mcc
   ||                                            - se ajusta consulta mcc por producto
   || 2022/06/14 - v 4.33 - EGORDO               - Alteracao para permitir impressao de cancelamento / habilitar pesquisa por nome
   || 2022/06/30 - v 4.35 - JPEREZ               - Se modifica p_ws_processa_mca_rast_obrig para actualizar correctamente
   ||                                              mca_rastreador para el analista
   || 2022/07/06 - v 4.36 - JVVIEIRA             - IM03312801 - Ajuste para cobertura 1303 para modalidad Duas Rodas, quando tiver menos de 500cc.
   || 2022/02/25 - v 4.37 - JVVIEIRA/ATIBURTI    - Ajuste para Demanda Preferencia do Corretor Buscar Forma de Pagamento e Porcentagem Corretor
   || 2022/03/10 - v 4.38 - JVVIEIRA/ATIBURTI    - Criacao de Regras de Pacotes para Demanda Preferecia do Corretor Fase 2
   || 2022/03/17 - v 4.39 - JVVIEIRA             - Asignando dados variaveis para coberturas agregadas Preferencia do Corretor Fase 2
   || 2022/04/06 - v 4.40 - LRGUIMARAE           - Ajustado a rotina p_grava_dados para que quando for seguro novo e existir a preferencia do corretor,
   ||                                              gravar a mesma na c2000000 no passo 4 para o front ler a preferencia cadastrada no passo 6
   || 2022/07/06 - v 4.41 - LRGUIMARAE           - Ajuste para p_grava_pacote_cobertura para chamar a nova ea_k_definicion_pacote.p_grava_pacote_cobertura
   || 2022/07/19 - v.4.42 - BMXAVIER             - IM03338890 - Ajuste para correcao de multi fipe para o BB
   || 2022/08/05 - v 4.43 - JVVIEIRA             - IM03377788 - Ajuste na p_ws_processa_rast_obrig_spto para quando rastreador nao for obrigatorio
   || 2022/08/05 - v 4.44 - ADURO                - Criadas as procedures pp_trata_tip_duracion, pp_trata_tempo_de_casa, e p_insere_tempo_de_casa e alterada a procedure p_grava_dados para ajuste do calculo de renovacao mapfre
   || 2022/06/21 - v 4.45 - LRGUIMARAE           - Ajuste para o timeout e remocao do insert na c2000000 na rotina pp_ws_consulta_dados_veiculo, teste para validacao da consulta no endosso sem passar o num_cotizacion.
   || 2022/08/17 - v 4.46 - GPCAMPOS/SARCILA     - Ajuste  pp_v_contrat_automais_casa para validacao de cobertura 400/421 quando calculo cobertura
   || 2022/09/08 - v 4.47 - SPARRA - INFORCOL    - validacao para quando a rf vem da api
   || 2022/08/25 - v 4.48 - SPARRA - INFORCOL    - muda mca_convivencia de letras para numeros
   || 2022/09/24 - v 4.49 - RGAALVES - MAPFRE    - alteracao da fp_mca_cambio_rf para renovacoes do convivencia BB
   || 2022/09/26 - v 4.50 - JVVIEIRA             - Criacao de logs para servicos internos
   || 2022/09/29 - v 4.51 - RFVSOUSA             - Ajuste para retornar o fluxo de recalculo.
   || 2022/10/03 - v 4.52 - JVVIEIRA / LUMORAIS  - Complemento da versao 4.50 referente aos logs para servicos internos
   || 2022/10/04 - v 4.53 - JVVIEIRA             - IM03478041 - Ajuste para cobertura 392 no endosso
   || 2022/10/13 - v 4.54 - T_RMALTA             - Ajuste no p_ws_consultar_planos_pagto. Inclusao de tratamento de excecao
   || 2022/10/04 - v 4.55 - RGAALVES             - Alteracao p_ws_consulta_pacote_cobertura comentando o trecho de renovacao
   || 2022/10/04 - v 4.56 - RGAALVES             - Correcao da versao 4.55
   || 2022/10/15 - v 4.57 - JVVIEIRA             - IM03504261  - Ajuste para cobertura 1302 no endosso
   || 2022/10/19 - v 4.58 - JVVIEIRA             - IM03507153  - Ajuste para cobertura 281 no endosso
   || 2022/10/24 - v 4.60 - SPARRA - INFORCOL    - Altera pp_pre_calculo tinha um return antes de validar cursor de diferencas da rg e rf
   || 2022/09/05 - v 4.61 - SCARDONA             - Ajuste estabilizacion CIMS se cambia p_row_val por p_cnc_vrb_val y row_val por cnc_vrb_val
   || 2022/11/17 - v 4.62 - T_RMALTA             - Ajuste de estabilizacao CIMs - p_ws_consulta_coti_spto apos inserir COD_CIA na g1010031
   || 2022/10/03 - v 4.63 - LRGUIMARAE           - Criacao Fail safe para passos 14 e 15 das tabelas a1001331 e x0000030
   || 2022/11/23 - v 4.64 - JVVIEIRA             - IM03575267 - ajuste p_ws_usar_cotacao para renovacao
   || 2022/11/29 - v 4.65 - T_RMALTA             - IM03585825 - ajuste p_ws_consulta_cotacao_mcc para recuperacao do TIP_PRODUTO
   || 2022/11/30 - v 4.66 - AEFSOUZA             - IM03572569 - Ajuste p_ws_consulta_cotacao_mcc para filtrar por cod_cia
   || 2022/12/07 - v 4.67 - BMXAVIER             - IM03582921 - Ajuste na pp_val_msg_vistoria para quando houver dispensa de vistoria
   || 2022/12/21 - v 4.69 - AEFSOUZA             - IM03572576 - Ajuste p_ws_consulta_cotacao_mcc para filtrar por cod_cia
   || 2022/07/12 - v 4.70 - WCASCARA             - Alteracao para insercao na tabela de historico.
   || 2022/11/23 - v.4.71 - WCASCARA             - Ajuste para receber o campo token no passo 2 e passo 11 e chamada da api de mailing do menu bb.
   || 2022/12/15 - v 4.72 - WCASCARA             - Tratamento dos campos canais_comerc para o projeto convergencia bb.
   || 2023/01/06 - v 4.73 - ATIBURTI/TTRAVASS    - IM03644560 - Ajuste na p_calcula para buscar a funcao eh_3_pacotes
   || 2023/01/12 - v 4.74 - PCANDRADE            - Ajuste para retorno corretor coberturas perfil analista SGO
   || 2022/08/25 - v 4.75 - T_JJESUS - MAPFRE    - Ajuste no processo de agrupamento das coberturas de incendio, roubo e furto para corretores especificos.
   || 2023/01/20 - v 4.76 - JVVIEIRA             - IM03669992 - Ajuste para coberturas 108 e 254 no endosso
   || 2021/07/23 - v 4.77 - DCEBALLOS            - Se incluyen globales para funcionalidades de VI corretor
   || 2022/08/15 - v 4.78 - FACASTRO             - Ajuste para consulta MCC, ramo vida individual, por cotizacion o producto
   || 2023/02/07 - v 4.77 - JVVIEIRA             - IM03699357  - Ajuste para nao exibir renovacoes fora do range permitido na p_ws_consulta_cotacao_mcc.
   || 2023/02/08 - v 4.78 - BMXAVIER - ACC       - Ajuste na p_ws_consulta_cotacao_mcc para nao retornar a cotacao quando o tip_situ for
   ||                                              diferente de 5,9 ou 13.
   || 2023/02/08 - v 4.79 - BMXAVIER - ACC       - Adicionando o tip_situ 10 na versao 4.61
   || 2023/02/08 - v 4.80 - JVVIEIRA             - Ajuste realizado p_ws_consulta_cotacao_mcc para retornar o campo TIP_RENOV referente as renovacoes
   || 2023/02/11 - v 4.81 - JVVIEIRA             - Ajuste realizado p_ws_consulta_cotacao_mcc para retornar o campo TIP_RENOV referente as renovacoes
   || 2023/01/04 - v 4.82 - LRGUIMARAE/AEARAUJO  - Ref.:00415186.F6.MOTORSUB - Ajustes para recuperar os dados do segurado quando for API e tiver
   ||                                              numero da cotacao no consultardadosSegurado (Solicitante: Wellignton Barboza)
   || 2023/02/08 - v 4.83 - BMXAVIER -  ACC      - Ajuste na versoes versao 4.78 e 4.79 para remover o TIP_SITU 5 e 10
   || 2023/02/12 - v 4.84 - LRGUIMARAE - ACC     - IM03711713 - Ajustes para remover acentos de nome do cartao
   || 2023/02/13 - v 4.85 - LRGUIMARAE - ACC     - IM03708042 - Ajustes p_ws_usar_cotacao para ao copiar Dados da
   ||                                              cotacao nao levar registros invalidos de condutor
   || 2022/02/22 - v 4.86 - AEFSOUZA             - IM03718731  - Correcao passo invalido ao apresentar erro  passo2/apolice se trata de uma renovacao ja disponibilizada
   || 2023/02/27 - v 4.87 - RFVOUSA - ACC        - Mudanca da query da procedure p_lee_detalhe_cotacao
   || 2023/02/28 - v 4.88 - JVVIEIRA             - Alteracao p_ws_consulta_cotacao_mcc para trazer cotacoes que nao tiverem o tip_renov preenchido
   || 2023/03/03 - v 4.89 - RGAALVES             - Criacao da trava na geracao da proposta pp_valida_efetivacao
   || 2023/03/04 - v 4.90 - RGAALVES             - Correcao pp_valida_efetivacao
   || 2023/03/04 - v 4.91 - RGAALVES             - Correcao da versao 4.90
   || 2023/03/07 - v 4.92 - RGAALVES             - Correcao pp_valida_efetivacao para validar as renovacoes
   || 2023/03/04 - v 4.93 - WCASCARA             - Desenvolvimento das estorias 562/528 do Duplo Sim colocando validacao de datas para selecao do DS.
   || 2023/02/14 - v 4.94 - WCASCARA             - Desenvolvimento funcionalidade cartao de credito para convergencia menu BB.
   || 2023/02/14 - v 4.95 - WCASCARA             - Desenvolvimento estoria ACEA-250 menu BB.
   || 2023/03/01 - v 4.96 - WCASCARA             - Ajuste tamnho do campo para receber o token do Menu BB.
   || 2023/03/03 - v 4.97 - WCASCARA             - Ajuste chamada api de mailing.
   || 2023/03/10 - v 4.98 - DEARIAS              - Implementacion del retorno del num_proposta en el xml para los productos de convergencia diversos.
   || 2023/02/14 - v 4.99 - RMOGOMES             - Projeto APIs Genericas
   || 2023/03/10 - v 4.93 - RGAALVES             - Correcao pp_valida_efetivacao para validar as apolices provisorias
   || 2023/01/03 - v 4.94 - MIFRANCO/LUBERTTI    - Alteracao de textos das coberturas circular 639.
   || 2023/03/13 - v 5.00 - RGAALVES             - Correcao do pp_valida_efetivacao.
   || 2023/03/14 - v 5.01 - RGOBBI               - Ajustando problema de perda de versao.
   || 2023/03/14 - v 5.02 - RGOBBI               - Ajustando problema de perda de versao (Residencial).
   || 2023/03/15 - v 5.03 - RGAALVES             - Correcao do pp_valida_efetivacao.
   || 2023/03/21 - v 5.04 - SPARRA INFORCOL      - Correcao servico consulta pacote coberturas para renovacao
   || 2023/03/22 - v 5.05 - BMXAVIER - ACC       - Ajuste na p_ws_consulta_coti_spto para recuperar codigo da
   ||                                              demanda 00421200-BackOfficeP3 para o status no novo endosso.
   || 2023/03/24 - v 5.06 - SSERNA               - Se agrega parametro en p_ws_consulta_mcc para el producto VI
   || 2023/03/27 - v 5.07 - WCASCARA             - Ajuste p_ws_processar_paso para retornar mensagens de erro corretamente.
   || 2023/03/30 - v 5.08 - JVVIEIRA             - Alteracao na pp_calcula_restituicao
   || 2023/03/21 - v 5.09 - RGAALVES             - Tratamento pp_valida_efetivacao para quando nao achar registro na a200030
   || 2023/03/31 - v 5.11 - RGAALVES             - Ajuste complementar da 5.09
   || 2023/04/10 - v 5.12 - PCANDRADE            - Ajuste para retorno dos 3 pacotes para Ituran
   || 2023/04/10 - v 5.13 - RFVSOUSA             - Validar DV da cobertura para os calculos de API (IM03805856)
   || 2023/04/14 - v 5.14 - RGAALVES             - Ajuste nao retorno da msg no p_calcula
   || 2023/04/19 - v 5.15 - TTRAVASS             - Alteracao na pp_calcula_restituicao
   || 2023/04/20 - v 5.16 - RGALVES              - Regra de validacao de proposta
   || 2023/04/25 - v 5.17 - LBERTTI              - Alteracao texto de erro. ORA 2000
   || 2023/05/03 - V 5.18 - BLUCENA              - Tratamento para NUM_SERIE para maiusculo (IM03840254)
   || 2023/05/04 - v 5.19 - SSERNA               - Se crea condicional para cuando es diferente del ramo VI
   || 2022/11/07 - v 5.20 - AEARAUJO             - Ajustes nas rotinas p_ws_usar_cotacao e p_ws_consulta_pacote_coberturas em caso de recaulo
   || 2023/05/09 - v 5.21 - IVALSILV             - Ajuste na p_ws_processa_rast_obrig_spto para recuperar o mca_rastreador
   || 2023/05/09 - v 5.22 - JJESUS - MAPFRE      - Alteracao da validade da cotacao de 15 dias para 07 dias para atender a demanda
   ||                                              MU-2022-041212.
   || 2022-05-12 - v 5.23 - JPEREZ               - Ajuste p_lee_detalhe_cotacao para consulta pacotes en analisis de renovaciones
   || 2023-05-10 - v 5.24 - LRGUIMARAE           - Ref.: PM00006637 - Ajustado a rotina p_emite para quando tiver o erro X2000060 mostrar uma mensagem mais amigavel
   || 2023/05/16 - v 5.25 - LGOLVEI              - PM00006762 - Tratamento para os casos das propostas efetivadas, porem nao encontradas no SCO
   || 2023/05/23 - v 5.26 - EGORDO               - Ajuste na p_lee_cotacao para enviar novo campo FEC_PRAZO_VALIDADE
   || 2023/05/18 - v 5.27 - PSBASTOS             - Inclusao da dorma de pagamento PIX
   || 2023/05/22 - v 5.28 - SSERRANO             - Equalizacao dos campos FEC_VALIDEZ_TARIFA e FEC_VALIDEZ_TARIFA#1
   ||                                            - Vencto de DC considerar maior data entre FEC_EFEC_SPTO e FEC_PROC_TES
   ||                                            - Utilizar MAX no campo num_simulaciona na leitura da tabela c2990700
   || 2023/06/01 - v 5.29 - T_RMALTA             - PM00006755 - Ajuste para recuperacao da info SIMULACION e TIP_SITU_BO na consulta cotacao MCC
   || 2023/06/07 - v 5.30 - GASANTOS             - Projeto Meios de Pagamento - Pix Puro
   || 2023/06/08 - v 5.31 - SPARRA - INFORCOL    - Altera a impressao do p_lee_cotacao para validar data nas renovacoes
   || 2023/06/09 - v 5.32 - LRGUIMARAE           - REF.:PM00006854 Ajuste na pp_efetiva_emissao_endosso para nao reinicializar a fila do erro
   || 2023/06/12 - v 5.33 - AEARAUJO - ACC       - IM03913916 - Tratamento para pular a fp_habilita_trava quando for corretor AUTO COMPARA
   || 2023/06/20 - v 5.34 - GLFERREI:INDRA       - Inclusao das rotinas: Verifica a Eligibilidade para aplicacao do FAF (p_eligibilidade_faf)
                                                                    Gravar as informacoes o coeficiente do FAF enviado pela athenea (p_carrega_pct_faf e p_carrega_log_api_athenea)
                                                                    Gravar o historico do FAF aplicado (p_carrega_hist_faf)
   || 2023/06/27 - v 5.35 - T_JJESUS             - Alteracoes que mudam o prazo de validade de uma cotacao de 15 para 7 dias. p_lee_apolice
                                        Gravar o hist??????A???a????A?rico do FAF aplicado (p_carrega_hist_faf)
   || 2023/07/03 - v 5.36 - JWOLFF:INDRA         - Replicar reglas Serasa de Asegurado para Conductor
   || 2023/06/08 - v 5.37 - T_RMALTA - ACC       - PM00006848 - Tratamento para alterar o FEC_EFEC_SPTO para cancelamento considerando da data de inicio da apolice
   ||                                            - quando solicitar o cancelamento antes do inicio de vigencia
   || 2023/07/07 - v 5.38 - GERVASIO:IBM         - Alteracao componente forma de pagamento - MEIOS DE PAGAMENTO
   || 2023/07/14 - v 5.39 - LRGUIMARAE           - Ajuste texto de error
   || 2023/07/10 - v 5.40 - PCANDRADE            - Altercoes para Renovacao Interna AutoCompara
   || 2023/07/18 - v 5.41 - RGOBBI               - Melhoria de performance na rotina de LOG da A2009710_VCR
   || 2023/07/19 - v 5.42 - T_RMALTA             - Retirada da alteracao realizada na versao 4.99 somente homologacao referente uso da em_k_ws_api_trn
   || 2023/07/19 - v 5.43 - T_JJESUS             - Alteracao na p_lee_cotacao alterando a coluna NUM_DIAS_VALIDEZ para NUM_DIAS_VIGENCIA
   || 2023/07/21 - v 5.44 - RFVSOUSA - ACCENTURE - Erro ao preencher a tela de cobertura do endosso calculos da API (IM03955864)
   ||                                            - Ajuste para listar as opcoes na tela de cobertura do enbdosso calculos da API (IM03971359)
   || 2023/07/20 - v 5.45 - JANTONIO             - Chamada da package EV_K_GEN_WS_VCR para consulta MCC por nome
   || 2023/07/24 - v 5.46 - T_JJESUS             - Alteracao na p_lee_cotacao alterando a coluna NUM_DIAS_VALIDEZ para NUM_DIAS_VIGENCIA
   || 2023/07/21 - v 5.47 - RFVSOUSA - ACCENTURE - Erro ao preencher a tela de cobertura do endosso calculos da API (IM03955864)
   ||                                            - Ajuste para listar as opcoes na tela de cobertura do enbdosso calculos da API (IM03971359)
   || 2023/07/27 - v 5.48 - IHRAUJO              - Ajuste de causa raiz de erro de val_sub_modelo IM03985782
   || 2023/07/29 - v 5.49 - WTADASHI - IBM       - Consulta para indicar se existe forma de pagamento cartao recorrente - Projeto Gateway
   || 2023/08/04 - v 5.50 - RSULTRA              - Melhorias Tunning - Melhorias de performance
   || 2023/08/06 - v 5.51 - T_JJESUS             - Alteracao na p_ws_consulta_cotacao_mcc alterando o valor fixo do NUM_DIAS_VALIDEZ para buscar da tabela
   || 2023/08/11 - v 5.52 - RFVSOUSA - ACCENTURE - Ajuste no detalhar pacote para endosso, devolver as coberturas compulsorias como S (IM04023800)
   || 2023/08/22 - v 5.53 - RFVSOUSA - ACCENTURE - Ajuste para listar o campo NUM_DIAS_VALIDEZ calculado em casos de renovacao (IM04034030)
   || 2023/08/25 - v 5.54 - BMXAVIER - ACCENTURE - Ajuste na f_busca_segurado_mcc para adicionar a validacao pelo campo mca_baja ao recuperar os dados do segurado na A2000060
   || 2023/08/28 - v 5.55 - BMXAVIER - ACCENTURE - Ajuste na p_ws_processa_mca_rast_obrig para corrigir a validacao do mca_rastreador quando se tratar de
   ||                        - uma cotacao na visao do analista/backoffice
   || 2023/08/28 - v 5.56 - AEFSOUZA - ACCENTURE - Ajustena  query para consultar renova??A???A???AYs (p_lee_cotacao) (IM04036741)
   || 2023/09/01 - v 5.57 - SPARRA - INFORCOL    - Ajuste para asignar valor de cod_idioma
   || 2023/09/04 - v 5.58 - T_JJESUS - MAPFRE    - Ajuste na p_ws_usar_cotacao para nao carregar o campo data do primeiro calculo na copia da cota??A???A#??A? (IM04049490)
   || 2023/09/22 - v 5.59 - MFECOSTA - MAPFRE    - Ajuste na query de pacotes para apresentar corretamente melhor forma de pagamento (IM04041249)
   || 2023/09/22 - v 5.60 - RGAALVES - MAPFRE    - Ajuste na pp_valida_efetivacao
   || 2023/10/13 - v 5.61 - MBARUCH/GLFERREI - INDRA - criacao do procedimento P_ELIGIBILIDADE_FAF.
   || 2023/10/17 - v 5.62 - MBARUCH/MAZEVEDO - INDRA - Ajustes gerais p_carrega_pct_faf_athenea e p_carrega_hist_faf.
   || 2023/10/18 - v 5.63 - MBARUCH/MAZEVEDO - INDRA - Ajustes p_carrega_pct_faf_athenea para chamada via api
   || 2023/10/18 - v 5.64 - MBARUCH/MAZEVEDO - INDRA - Ajustes da task T01717115
   || 2023/09/22 - v 5.65 - TTRAVASS - ACCENTURE - Inabilitar consulta balde interno - Projeto otimizacao jornada cliente
   || 2023/10/18 - v 5.66 - MBARUCH/MAZEVEDO - INDRA - Ajustes na convers?#o de datas da p_carrega_hist_faf
   || 2023/10/25 - v 5.67 - TTRAVASS - ACCENTURE - Consulta apolice renovacao - Projeto otimizacao jornada cliente
   || 2023/11/01 - v 5.68 - MBARUCH/MAZEVEDO - INDRA - Ajuste fec_validez para corre???#o ao buscar documento elegivel FAF
   || 01/11/2023 - V 5.69 - BMXAVIER - IBM - Ajuste na p_ws_consulta_cotacao_mcc para quando se tratar de uma cotacao na visao do BackOffice
   || com vigencia retroativa
   || 2023/11/07 - V 5.70 - TTRAVASS - ACCENTURE - Tratamento Tarifa passo 3 - Projeto otimizacao jornada cliente
   || 2023/11/11 - v 5.71 - MBARUCH/MAZEVEDO - INDRA - Ajustes gerais para enquadramento do multitarifadores
   */  ---------------------------------------------------------------------------------------------------------
   ---
   g_k_cod_idioma                   CONSTANT g1010020.cod_idioma            %TYPE  := 'PT';
   g_k_cod_instalacion              CONSTANT g1010020.cod_instalacion       %TYPE  := 'VCR';
   g_cod_usr_automatico             CONSTANT G1010120.cod_usr               %TYPE  := 'AUTOMAT';
   --
   g_k_cod_fila                     CONSTANT c2000000.cod_fila              %TYPE  := ea_k_231_coti.g_k_cod_fila;
   g_k_cod_fila_generica            CONSTANT c2000000.cod_fila              %TYPE  := 99999;
   g_k_cod_fila_accesorios          CONSTANT c2000000.cod_fila              %TYPE  := 214;
   g_k_cod_fila_201                 CONSTANT c2000000.cod_fila              %TYPE  := 201;
   g_k_nom_tabla_accesorios         CONSTANT c2000000.nom_tabla             %TYPE  := 'A2100610';
   g_k_nom_tabla_atribb_cob         CONSTANT c2000000.nom_tabla             %TYPE  := 'A2000020';                              --RECALCULO
   g_k_tar_base                     CONSTANT g0200001.cod_tar               %TYPE  := 'VCREMBATCH';                            --EFETIVACAO/EMISSAO
   g_k_num_orden                    CONSTANT a2000500.num_orden             %TYPE  := 0;                                      --EFETIVACAO/EMISSAO
   g_fec_tratamiento                CONSTANT a2000030.fec_emision_spto      %TYPE  := TRUNC(SYSDATE);                          --EFETIVACAO/EMISSAO
   g_k_cant_registros               CONSTANT NUMBER                                := 9999;                                    --EFETIVACAO/EMISSAO
   g_k_null                         CONSTANT VARCHAR2(4)                           := NULL;
   g_k_fator_ajuste_chassi_remar    CONSTANT NUMBER                                := 80  ;
   --
   g_k_tabla_dv                     CONSTANT c2000000.nom_tabla             %TYPE  := ea_k_231_utils.g_k_tabla_dv;
   g_k_tabla_vg                     CONSTANT VARCHAR2(8)                           := 'A0000000';
   --
   g_k_prefixo_cobertura            CONSTANT g2000550.val_prefijo           %TYPE  := em_k_gen_spto_batch.g_k_pf_coberturas;
   g_k_prefixo_suma_aseg            CONSTANT VARCHAR2(10)                          := 'SUMA_ASEG';
   g_k_prefixo_cod_acessorio        CONSTANT VARCHAR2(1)                           := '#';
   g_k_prefixo_simulacion           CONSTANT VARCHAR2(1)                           := '#';                                     --RECALCULO
   g_k_prefixo_cod_modalidad        CONSTANT VARCHAR2(14)                          := 'COD_MODALIDAD#';                        --RECALCULO
   g_k_tip_cob_vidros               CONSTANT VARCHAR2(18)                          := 'TIP_COB_VIDROS';
   g_k_cod_campo_cob_agrupada       CONSTANT df_cmn_nwt_xx_vrb_cnc.vrb_nam  %TYPE  := 'COD_COB_AGRUPADA';
   g_k_prefixo_cod_pacote           CONSTANT VARCHAR2(18)                          := 'COD_CLAVE_FORMULA#';                    --RECALCULO
   --g_k_prefixo_opcionais            CONSTANT VARCHAR2(15)                          := 'OPCIONAL' || g_k_prefixo_cod_acessorio;
   g_k_prefixo_opcionais            CONSTANT VARCHAR2(15)                          := 'OPCIONAL#';
   g_k_prefixo_acessorio            CONSTANT VARCHAR2(15)                          := 'ACESSORIO#';
   g_k_prf_cod_accesorio            CONSTANT VARCHAR2(15)                          := 'ACCOD_ACCESORIO';
   g_k_prf_nom_accesorio            CONSTANT VARCHAR2(15)                          := 'ACNOM_ACCESORIO';
   g_k_prf_mca_seleccion            CONSTANT VARCHAR2(15)                          := 'ACMCA_SELECCION';
   g_k_prf_txt_accesorio            CONSTANT VARCHAR2(15)                          := 'ACTXT_ACCESORIO';
   g_k_prf_imp_accesorio            CONSTANT VARCHAR2(15)                          := 'ACIMP_ACCESORIO';
   g_k_prf_mca_baja                 CONSTANT VARCHAR2(15)                          := 'ACMCA_BAJA';
   --
   g_k_num_vistoria                 CONSTANT VARCHAR2(30)                          := 'NUM_VISTORIA';
   g_k_mca_vistoria_especial        CONSTANT VARCHAR2(30)                          := 'MCA_VISTORIA_ESPECIAL';
   g_k_tip_vistoria                 CONSTANT VARCHAR2(30)                          := 'TIP_VISTORIA';
   --
   g_k_tip_docum_cpf                CONSTANT a2000030.tip_docum             %TYPE  := ea_k_231_utils.g_k_tip_docum_pessoa_fisica;
   g_k_tip_docum_cgc                CONSTANT a2000030.tip_docum             %TYPE  := ea_k_231_utils.g_k_tip_docum_pessoa_juridica;
   --
   g_k_cod_docum_tam_cpf            CONSTANT NUMBER(2)                             := 11;
   g_k_cod_docum_tam_cgc            CONSTANT NUMBER(2)                             := 14;
   --
   g_k_tip_duracion_prazo_curto     CONSTANT NUMBER(1)                             := 6;
   --
   g_k_num_divisor_porcentagem      CONSTANT NUMBER(3)                             := 100;
   g_k_num_arredondamento           CONSTANT NUMBER(5)                             := 2;
   --
   g_k_val_campo_codCampo           CONSTANT VARCHAR2(15)                          := 'codCampo';
   g_k_val_campo_valCampo           CONSTANT VARCHAR2(15)                          := 'valCampo';
   g_k_val_campo_codAccesorio       CONSTANT VARCHAR2(15)                          := 'codAccesorio';
   g_k_val_campo_nomAccesorio       CONSTANT VARCHAR2(15)                          := 'nomAccesorio';
   g_k_val_campo_impAccesorio       CONSTANT VARCHAR2(15)                          := 'impAccesorio';
   --
   g_k_val_campo_txtCampo           CONSTANT VARCHAR2(15)                          := 'txtCampo';                              -- RECALCULO
   g_k_val_campo_codCobertura       CONSTANT VARCHAR2(15)                          := 'codCobertura';                          -- RECALCULO
   g_k_val_campo_mcaSeleccionCob    CONSTANT VARCHAR2(15)                          := 'mcaSeleccionCob';                       -- RECALCULO
   g_k_val_campo_mcaModifCapital    CONSTANT VARCHAR2(18)                          := 'mcaModificaCapital';                    -- RECALCULO
   g_k_val_campo_mcaSeleAtributo    CONSTANT VARCHAR2(20)                          := 'mcaSeleccionAtributo';                  -- RECALCULO
   g_k_val_campo_mcaValDefecto      CONSTANT VARCHAR2(20)                          := 'mcaValDefecto';                         -- RECALCULO
   g_k_val_campo_codPacote          CONSTANT VARCHAR2(15)                          := 'codPacote';                             -- RECALCULO
   g_k_val_campo_numSimulacion      CONSTANT VARCHAR2(20)                          := 'numSimulacion';                         -- RECALCULO
   --
   g_k_val_campo_pctAgtNpr          CONSTANT VARCHAR2(15)                          := 'pctAgtNpr'; --v3.33
   --
   g_k_val_campo_valFormaPagamento  CONSTANT VARCHAR2(25)                          := 'valFormaPagamento'; -- v4.37
   g_k_val_campo_valParcelasPagamento CONSTANT VARCHAR2(25)                        := 'valParcelasPagamento'; --v 4.37
   --
   g_k_val_tag_valLimiteMaxInden    CONSTANT VARCHAR2(30)                          := 'valLimiteMaxIndenizacao';               -- RECALCULO
   g_k_val_tag_tipAtributoCob       CONSTANT VARCHAR2(15)                          := 'tipAtributoCob';                        -- RECALCULO
   g_k_val_tag_valFranquia          CONSTANT VARCHAR2(15)                          := 'valFranquia';                           -- RECALCULO
   g_k_val_tag_colCoberturasCasco   CONSTANT VARCHAR2(30)                          := 'colCoberturasCasco';                    -- RECALCULO
   g_k_val_tag_colCoberturasAgrup   CONSTANT VARCHAR2(50)                          := 'colValoresCoberturasAgrupadas';         -- RECALCULO
   g_k_val_tag_colCoberturas        CONSTANT VARCHAR2(30)                          := 'colCoberturas';                         -- RECALCULO
   g_k_val_tag_colCoberturasAdi     CONSTANT VARCHAR2(30)                          := 'colValoresCoberturasAdicionais';        -- RECALCULO
   g_k_val_tag_colAtributosLista    CONSTANT VARCHAR2(30)                          := 'colAtributosLista';                     -- RECALCULO
   --
  g_k_val_campo_codAgt CONSTANT VARCHAR2(30) := 'codAg'; -- 2.50 gravao pacote
  --
   --
   g_k_pre_msg_erro                 CONSTANT VARCHAR2(4)                           := 'TRN-';
   g_k_sep_cod_msg                  CONSTANT VARCHAR2(1)                           := ':';
   g_k_pre_msg_erro_tratado         CONSTANT VARCHAR2(5)                           := '[';
   g_k_sep_cod_msg_tratado          CONSTANT VARCHAR2(5)                           := '] - ';
   --
   g_k_separador                    CONSTANT VARCHAR2(1)                           := trn_k_lv.f_devuelve_separador_columnas;
   g_k_separador_col                CONSTANT VARCHAR2(1)                           := ']';
   g_k_separador_bar                CONSTANT VARCHAR2(1)                           := '/';
   --
   g_k_formato_fecha_bar            CONSTANT VARCHAR2(10)                          := 'DD/MM/RRRR';
   --
   g_k_cod_error_gen                CONSTANT g1010020.cod_mensaje           %TYPE  := 20000;
   g_k_cod_info_gen                 CONSTANT g1010020.cod_mensaje           %TYPE  := 20100;
   --
   g_k_num_max_char                 CONSTANT NUMBER(3)                             := 79;
   --
   g_k_tip_msg_error                CONSTANT VARCHAR2(8)                           := 'ERRO';
   g_k_tip_msg_info                 CONSTANT VARCHAR2(8)                           := 'INFO';
   --
   g_k_tip_obs_ok                   CONSTANT VARCHAR2(10)                          := 'OK';
   --
   g_k_cod_version_cod_nivel_bon    CONSTANT g1010300.cod_version           %TYPE  := 2;
   --
   g_k_nom_pgm_help_fixo            CONSTANT g2000020.nom_pgm_help          %TYPE  := 'AL299999';
   g_k_nom_pgm_help_dinamico        CONSTANT g2000020.nom_pgm_help          %TYPE  := 'AL000010';
   g_k_nom_tabla_valida             CONSTANT g2000020.nom_tabla_valida      %TYPE  := 'X2990006_VCR';
   g_k_tabla_valida                 CONSTANT g2000020.nom_tabla_valida      %TYPE  := 'G2990006';
   g_k_tabla_te                     CONSTANT g2000550.nom_tabla_tarea       %TYPE  := 'A1001331';
   g_k_tabla_te_vcr                 CONSTANT g2000550.nom_tabla_tarea       %TYPE  := 'A1001331_VCR';
   --
   g_k_cod_consulta_num_serie       CONSTANT NUMBER(1)                             := 1;
   g_k_cod_consulta_marca_modelo    CONSTANT NUMBER(1)                             := 2;
   g_k_cod_consulta_marca           CONSTANT NUMBER(1)                             := 3;
   g_k_cod_consulta_fipe            CONSTANT NUMBER(1)                             := 4;
   g_k_cod_consulta_marca_ano       CONSTANT NUMBER(1)                             := 5;
   g_k_cod_consulta_zero_km         CONSTANT NUMBER(1)                             := 6;
   g_k_cod_consulta_modelo          CONSTANT NUMBER(1)                             := 7; -- 1.51
   --
   g_k_cod_cons_cob_contrada        CONSTANT NUMBER(1)                             := 1;
   g_k_cod_cons_cob_adicional       CONSTANT NUMBER(1)                             := 2;
   g_k_cod_cons_cob_bloqueada       CONSTANT NUMBER(1)                             := 3;
   --
   g_k_nom_servico_serasa           CONSTANT a2009033_vcr.nom_servico       %TYPE   := 'SERASA';
   --
   g_k_num_tam_fipe                 CONSTANT NUMBER(1)                             := 8;
   g_k_num_tam_molicar              CONSTANT NUMBER(2)                             := 10;
   --
   g_k_pref_simulacion              CONSTANT c2000000.val_columna           %TYPE  := ea_k_231_coti.g_k_pref_simulacion;
   --
   g_k_cod_desglose_iof             CONSTANT c2109170_vcr.cod_desglose      %TYPE  := 6;
   g_k_ini_val_franq_dv             CONSTANT g2000020.cod_campo             %TYPE  := 'VAL_FRANQ';
   g_k_cod_campo_cob_casco          CONSTANT df_cmn_nwt_xx_vrb_cnc.vrb_nam  %TYPE  := 'COD_COB_CASCO';
   g_k_separador_vir                CONSTANT VARCHAR2(1)                           := ',';
   --
   g_k_cod_pais                     CONSTANT a1000103.cod_pais              %TYPE  := 'BRA';
   g_k_cod_modalidade               CONSTANT NUMBER                                := 99999;
   g_k_codigo_susep_gen             CONSTANT g2109043_vcr.cod_susep         %TYPE  := '999999999999999';
   g_k_propriedade_rastreador       CONSTANT NUMBER                                := 2;
   g_k_dias_rastreador              CONSTANT NUMBER(3)                             := 150;
   g_k_mca_rast_obrig               CONSTANT VARCHAR2(15)                          := 'MCA_RAST_OBRIG';
   g_k_tip_merc_deter_rcf           CONSTANT VARCHAR2(1)                           := 'R';
   g_k_data                         CONSTANT DATE                                  := TRUNC(SYSDATE);
   g_k_ano_1930                     CONSTANT VARCHAR2(4)                           := '1930';
   g_k_cod_marca_outro              CONSTANT a2109157_vcr.cod_marca         %TYPE  := 998;
   g_k_ano_1950                     CONSTANT VARCHAR2(4)                           := '1950'; -- v 4.02
   g_k_suma_aseg201                 CONSTANT a2000560.cod_campo             %TYPE  := 'COSUMA_ASEG201';
   g_k_suma_aseg202                 CONSTANT a2000560.cod_campo             %TYPE  := 'COSUMA_ASEG202';
   g_k_suma_aseg203                 CONSTANT a2000560.cod_campo             %TYPE  := 'COSUMA_ASEG203';
   g_k_suma_aseg218                 CONSTANT a2000560.cod_campo             %TYPE  := 'COSUMA_ASEG218';
   g_k_suma_aseg281                 CONSTANT a2000560.cod_campo             %TYPE  := 'COSUMA_ASEG281';
   g_k_suma_aseg214                 CONSTANT a2000560.cod_campo             %TYPE  := 'COSUMA_ASEG214';
   --
   g_k_cod_spto                     CONSTANT NUMBER(3)                             := 501;
   --
   g_cod_idioma                     CONSTANT g1010010.cod_idioma            %TYPE  := trn_k_global.cod_idioma;
   --
   g_k_cod_ramo_generico            CONSTANT g9999991.cod_ramo              %TYPE  := 999;
   g_k_cod_tarifa_generico          CONSTANT g9999991.cod_tarifa            %TYPE  := 99999;
   g_k_cod_agt_generico             CONSTANT g9999991.cod_agt               %TYPE  := 999999;
   g_k_num_paso_generico            CONSTANT g9999991.num_paso              %TYPE  := 99999;
   g_k_tip_mvto_batch_cotacao       CONSTANT A2000500.tip_mvto_batch        %TYPE  := '7';
   g_k_tip_mvto_batch_endosso       CONSTANT A2000500.tip_mvto_batch        %TYPE  := '4';
   --
   g_k_cod_tar_campo_saida          CONSTANT g9999992.cod_tar        %TYPE  := 'SAIDA';
   --
   g_k_cod_srv_consulta_cotacao     CONSTANT g9999991.cod_servicio          %TYPE  := 70001;
   g_k_cod_srv_cons_det_cotacao     CONSTANT g9999991.cod_servicio          %TYPE  := 70002;
   g_k_cod_srv_processa_dv_coti     CONSTANT g9999991.cod_servicio          %TYPE  := 70003; --v3.33
   g_k_cod_srv_consulta_apolice     CONSTANT g9999991.cod_servicio          %TYPE  := 40001;
   g_k_cod_srv_cons_det_apolice     CONSTANT g9999991.cod_servicio          %TYPE  := 40002;
   -- { jwolff
   g_k_cod_srv_flotas               CONSTANT g9999991.cod_servicio          %TYPE  := 70010;
   -- } jwolff
   g_k_cod_cob_acessorio            CONSTANT a1002090.cod_cob               %TYPE  := 214;
   g_k_cod_cob_blindagem            CONSTANT a1002090.cod_cob               %TYPE  := 281;
   g_k_cod_cob_ass_veic             CONSTANT a1002090.cod_cob               %TYPE  := 1304;
   g_k_tip_nivel_cob                CONSTANT g2000020.tip_nivel             %TYPE  := 3;
   --
   g_k_error_cotacao                CONSTANT a2000221.cod_error             %TYPE :=  5001;
   g_k_error_ssr                    CONSTANT a2000221.cod_error             %TYPE :=  540;
   --
   g_k_anual                        CONSTANT a1001403.cod_fracc_pago %TYPE := 2301;
   --
   g_num_paso_controle_inicial      CONSTANT g9999994.num_paso%TYPE := -99999;
   --
   g_k_cod_retorno_suce             CONSTANT a2009700_vcr.cod_retorno%TYPE := 1;
   g_k_cod_retorno_erro             CONSTANT a2009700_vcr.cod_retorno%TYPE := 2;
   --
   g_k_subst_veiculo                CONSTANT a2000033.cod_tip_spto   %TYPE := '80';
   --
   g_k_tip_gestor_ba                CONSTANT a2000030.tip_gestor     %TYPE := 'BA';
   g_k_cod_gestor_ba                CONSTANT a2000030.cod_gestor     %TYPE := '00011912';
   g_k_tip_gestor_ta                CONSTANT a2000030.tip_gestor     %TYPE := 'TA';
   g_k_cod_gestor_ta                CONSTANT a2000030.cod_gestor     %TYPE := '77770015';
   g_k_tip_gestor_db                CONSTANT a2000030.tip_gestor     %TYPE := 'DB';
   g_k_tip_gestor_dc                CONSTANT a2000030.tip_gestor     %TYPE := 'DC';
   g_k_tip_gestor_px                CONSTANT a2000030.tip_gestor     %TYPE := 'PX'; --5.27
   --
   g_k_cod_de_para_forma_pxpx       CONSTANT a2000030.tip_gestor     %TYPE := '8'; -- 5.30
   g_k_cod_de_para_forma_pxba       CONSTANT a2000030.tip_gestor     %TYPE := '10'; -- 5.30
   g_k_cod_de_para_forma_pxdb       CONSTANT a2000030.tip_gestor     %TYPE := '9'; -- 5.30
   --
   g_k_tip_franquia_201             CONSTANT a2000560.cod_campo      %TYPE := 'TIP_FRANQUIA201';
   g_k_cob_casco                    CONSTANT a2000040.cod_cob        %TYPE := 201;
   --
   g_k_paso_cond_spto               CONSTANT g9999991.num_paso       %TYPE := 3;
   --
   g_k_isento_imposto               CONSTANT g2109024_vcr.cod_isencao_imposto%TYPE := 4; --v2.04
   --{ v 2.29M
   g_k_paso_interatividade          CONSTANT g9999991.num_paso       %TYPE := 91;
   g_k_txt_motivo_interatividade    CONSTANT a2000030.txt_motivo_spto%TYPE := 'INTERATIVIDADE';
   --}
   g_k_bien_vivir                   CONSTANT c2000000.cod_ramo              %TYPE := 803; --v2.78
   g_k_vida_individual              CONSTANT c2000000.cod_ramo              %TYPE := 901;
   g_k_residencial                  CONSTANT c2000000.cod_ramo              %TYPE := 417; --v 4.98
   --
   -- {v5.35
   g_k_tip_mvto_batch              CONSTANT g2109013_vcr.tip_mvto_batch             %TYPE := 'ZZ';
   g_k_mca_renov_outras            CONSTANT g2109013_vcr.tip_seguro                 %TYPE := 9;
   g_k_cod_canal_origen_gen        CONSTANT g2109013_vcr.cod_canal_origen           %TYPE := '99999';
   g_k_cod_canal_comerc_entrada    CONSTANT g2109013_vcr.cod_canal_comerc_entrada   %TYPE := '-1';
   g_k_cod_canal_comerc_calculo    CONSTANT g2109013_vcr.cod_canal_comerc_calculo   %TYPE := '-1';
   g_k_mca_zero_km                 CONSTANT g2109013_vcr.mca_zero_km                %TYPE := 'Z';
   g_k_mca_sini_ult_vigencia       CONSTANT g2109013_vcr.mca_sini_ult_vigencia      %TYPE := 'Z';
   g_k_cod_afinidade               CONSTANT g2109013_vcr.cod_afinidade              %TYPE := 99999;
   -- v5.35}
   --
   --
   g_k_num_dias_parc1_DC            CONSTANT NUMBER                               := 8; -- { v 3.22 }
   --
   g_k_flex  CONSTANT a2009540_vcr.tip_situ  %TYPE := '13'; -- V 4.78
   --
   g_txt_error                      a2000520.txt_error                      %TYPE;
   g_txt_ruta_error                 a2000520.txt_ruta_error                 %TYPE;
   --
   g_cod_mensaje                    g1010020.cod_mensaje                    %TYPE;
   g_anx_mensaje                    VARCHAR2(350);
   --
   v_tab_fipe                       TYPTAB_FIPE ;
   v_reg_fipe                       TYPREG_FIPE ;
   --
   g_cot_dados                      TYPTAB_DADOS_COT;
   g_cot_reg                        TYPREG_DADOS_COT;
   --
   g_cob_dados                      TYPTAB_DADOS_COB; -- RECALCULO
   g_cob_reg                        TYPREG_DADOS_COB; -- RECALCULO
   --
   g_tab_veic                       TYPTAB_DADOS_VEIC;
   g_reg_veic                       TYPREG_DADOS_VEIC;
   --
   g_cod_agt_consulta               a2000030.cod_agt                 %TYPE;
   g_num_cotizacion                 c2000000.num_cotizacion          %TYPE;
   g_num_cotizacion_grupo           c2000000.num_cotizacion          %TYPE; -- jwolff
   g_num_simulacion                 c2990700.num_simulacion          %TYPE;
   g_num_poliza_grupo               g2109040_vcr.num_poliza_grupo    %TYPE;
   g_num_contrato                   g2109040_vcr.num_contrato        %TYPE;
   g_num_subcontrato                g1001332_vcr.num_subcontrato     %TYPE;
   g_num_poliza_cliente             g2109040_vcr.num_poliza_cliente  %TYPE;
   g_cod_nivel1                     g2109040_vcr.cod_nivel1          %TYPE;
   g_cod_nivel2                     g2109040_vcr.cod_nivel2          %TYPE;
   g_cod_nivel3                     g2109040_vcr.cod_nivel3          %TYPE;
   g_cod_canal1                     g2109040_vcr.cod_canal1          %TYPE;
   g_cod_canal2                     g2109040_vcr.cod_canal2          %TYPE;
   g_cod_canal3                     g2109040_vcr.cod_canal3          %TYPE;
   g_num_propuesta                  c2000000.num_cotizacion          %TYPE;
   g_tip_mvto_batch                 g9999992.tip_mvto_batch          %TYPE;
   g_hay_recusa_flexible            a2992130_vcr.mca_aviso           %TYPE;
   g_mca_existe_bo                  a2992130_vcr.mca_aviso           %TYPE;
   g_cod_cia                        g9999992.cod_cia                 %TYPE;
   g_cod_ramo                       g9999992.cod_ramo                %TYPE;
   g_cod_agt                        g9999992.cod_agt                 %TYPE;
   g_num_paso                       g9999992.num_paso                %TYPE;
   g_cod_tarifa                     g9999992.cod_tarifa              %TYPE;
   g_fec_validez                    g2109040_vcr.fec_validez         %TYPE;
   --
   g_num_poliza                     a2000500.num_poliza              %TYPE;
   g_num_presupuesto                a2000030.num_presupuesto         %TYPE;
   g_num_spto                       a2000500.num_spto                %TYPE;
   g_num_spto_apli                  a2000500.num_spto_apli           %TYPE;
   g_num_apli                       a2000500.num_apli                %TYPE;
   g_num_riesgo                     a2000031.num_riesgo              %TYPE;
   g_num_periodo                    a2000020.num_periodo             %TYPE;
   g_fec_efec_spto                  a2000500.fec_efec_spto           %TYPE;
   g_fec_vcto_spto                  a2000500.fec_vcto_spto           %TYPE;
   g_cod_usr                        a2000500.cod_usr                 %TYPE;
   --
   g_val_clave_formula              g2109040_vcr.val_clave_formula   %TYPE;
   --
   g_cod_modalidad                  g2990004.cod_modalidad           %TYPE;
   g_tip_segmento                   g2109040_vcr.tip_segmento        %TYPE;
   g_tip_produto                    g2109141_vcr.tip_produto         %TYPE;
   g_cod_cob                        a1002150.cod_cob                 %TYPE;
   --
   g_fec_validez_tarifa             a2000500.fec_tratamiento         %TYPE;
   --
   g_mca_coti_spto                  VARCHAR2(1);
   --
   g_mca_cancelamento               VARCHAR2(1) := NULL;
   g_mca_cancel_parc_pend           VARCHAR2(1) := NULL;
   --
   g_mca_valida                     VARCHAR2(1) := NULL;
   --
   g_fic_traza                      VARCHAR2(80) := 'gen_ws';
   --
   g_xml                            CLOB;
   g_xml_in                         CLOB;
   --
   g_qtdd_erro                      NUMBER;
   --
   g_k_qtde_prazo_curto             CONSTANT NUMBER(8)               := 150;
   --
   g_k_range_dias CONSTANT VARCHAR2(30):= 'DIAS_EXPIRA';-- v 4.98
   --
   g_num_sumula_def_pac c2000000.num_cotizacion          %TYPE; --2.28
   --
  g_existe_num_serie     BOOLEAN := FALSE; -- 2.98
  g_existe_num_matricula BOOLEAN := FALSE; -- 2.98
   --
   g_existe_g2109042_vcr   VARCHAR2(5); --3.70
   --
   g_k_AC                           CONSTANT NUMBER(4)                             := 5246; -- 5.33
   --
   g_k_paso_calculo        CONSTANT g9999991.num_paso       %TYPE := 6; -- 3.96
   g_local_traza           BOOLEAN := em_f_genera_traza; --v4.09
   --
   g_node_lista           DBMS_XMLDOM.DOMNODE    ;
   g_document             DBMS_XMLDOM.DOMDOCUMENT;
   g_node_lista_observ    DBMS_XMLDOM.DOMNODE    ;
   g_xml_lista            XMLTYPE                ;
   g_text_cdata           DBMS_XMLDOM.DOMTEXT    ;
   g_node_codigo          DBMS_XMLDOM.DOMNODE    ;
   g_node_observ          DBMS_XMLDOM.DOMNODE    ;
   --
   g_tip_situ_duplo_sim             c2000000.val_columna%TYPE := NULL; --v 4.93
   g_num_poliza_grupo_generico      CONSTANT C2009030_vcr.Num_Poliza_Grupo  %TYPE  := 9999999999999; --v 4.93
   g_num_contrato_generico          CONSTANT C2009030_VCR.NUM_COTRATO       %TYPE  := 99999; --v 4.93
   g_num_subcontrato_generico       CONSTANT C2009030_VCR.Num_Subcontrato   %TYPE  := 99999; --v 4.93
   --
   g_clave_calc_cobertura        CONSTANT VARCHAR(28) := 'Calculo Cobertura Completo-%'; --v5.47
   g_habilita_stop_loop_endosso  CONSTANT VARCHAR(26) := 'HABILITA.STOP.LOOP.ENDOSSO'; --v5.47
   g_habilita_pacote_gen_endosso CONSTANT VARCHAR(27) := 'HABILITA.PACOTE.GEN.ENDOSSO'; --v5.47
   g_pacote_gen_endosso          CONSTANT VARCHAR(27) := 'PACOTE.GEN.ENDOSSO'; --v5.47
   --
   CURSOR gc_num_veiculos(pc_cod_cia               a2000030.cod_cia           %TYPE,
                          pc_cod_ramo              a2000030.cod_ramo          %TYPE,
                          pc_num_coti_grupo        a2000500.num_poliza_grupo  %TYPE)
   IS
      SELECT COUNT(*)
        FROM c2009030_vcr
       WHERE cod_cia          = pc_cod_cia
         AND cod_ramo         = pc_cod_ramo
         AND num_poliza_grupo = pc_num_coti_grupo;
   --
   --
   CURSOR gc_num_veiculos_prop_efec(pc_cod_cia          IN p2000030.cod_cia          %TYPE,
                                    pc_cod_ramo         IN p2000030.cod_ramo         %TYPE,
                                    pc_num_poliza_grupo IN p2000030.num_poliza_grupo %TYPE,
                                    pc_num_spto         IN p2000030.num_spto         %TYPE DEFAULT 0,
                                    pc_num_apli         IN p2000030.num_apli         %TYPE DEFAULT 0,
                                    pc_num_spto_apli    IN p2000030.num_spto_apli    %TYPE DEFAULT 0)
   IS
      SELECT COUNT(1)
        FROM p2000030
       WHERE cod_cia          = pc_cod_cia
         AND cod_ramo         = pc_cod_ramo
         AND num_poliza_grupo = pc_num_poliza_grupo
         AND num_spto         = pc_num_spto
         AND num_apli         = pc_num_apli
         AND num_spto_apli    = pc_num_spto_apli
         AND mca_provisional  = 'N'
         AND num_poliza       <> num_presupuesto;
   --
   --
   g_flag_coti VARCHAR2(5);--v 2.96
   --
   --v 2.96
   CURSOR gc_num_veiculos_coti(pc_cod_cia        a2000030.cod_cia %TYPE,
                               pc_cod_ramo       a2000030.cod_ramo %TYPE,
                               pc_num_coti_grupo a2000500.num_poliza_grupo %TYPE) IS
    SELECT COUNT(*)
      FROM c2009030_vcr
     WHERE cod_cia = pc_cod_cia
       AND cod_ramo = pc_cod_ramo
       AND num_poliza_grupo = pc_num_coti_grupo
       AND num_cotizacion  != pc_num_coti_grupo;--v 2.96
   --
   TYPE rec_lista_campo       IS RECORD(
        cod_campo                      VARCHAR2(30),
        val_campo                      VARCHAR2(250));
   --
   --I 1.60
   /*TYPE rec_lista_pref_pago   IS RECORD(
        cod_campo                      VARCHAR2(30),
        val_campo                      VARCHAR2(250),
        mca_defecto                    VARCHAR2(1));
   */
   --F 1.60
   --
   TYPE rec_lista_cotacao     IS RECORD(
        nom_cod_cia                    a2000020.cod_campo                   %TYPE, --v2.25
        cod_cia                        a2000020.cod_cia                     %TYPE, --v2.25
        nom_num_cotizacion             a2000020.cod_campo                   %TYPE,
        num_cotizacion                 c2009030_vcr.num_cotizacion          %TYPE,
        nom_num_poliza_renov           a2000020.cod_campo                   %TYPE, --v2.25
        num_poliza_renov               a2000020.val_campo                   %TYPE, --v2.25
        nom_nom_tercero                a2000020.cod_campo                   %TYPE,
        nom_tercero                    a1001399.nom_tercero                 %TYPE,
        nom_num_serie                  a2000020.cod_campo                   %TYPE, --v2.25
        num_serie                      a2000020.val_campo                   %TYPE, --v2.25
        nom_num_matricula              a2000020.cod_campo                   %TYPE, --v2.25
        num_matricula                  a2000020.val_campo                   %TYPE, --v2.25
        nom_txt_sub_modelo             a2000020.cod_campo                   %TYPE,
        txt_sub_modelo                 a2109157_vcr.nom_modelo_submodelo    %TYPE,
        nom_mca_renovacion             a2000020.cod_campo                   %TYPE, --v2.25
        mca_renovacion                 a2000020.val_campo                   %TYPE, --v2.25
        nom_mca_renov_outras           a2000020.cod_campo                   %TYPE, --v2.25
        mca_renov_outras               a2000020.val_campo                   %TYPE, --v2.25
        nom_cod_tip_renov              a2000020.cod_campo                   %TYPE, --v2.25
        cod_tip_renov                  a2000020.val_campo                   %TYPE, --v2.25
        nom_fec_vcto_poliza_congenere  c2000000.nom_columna                 %TYPE,--
        fec_vcto_poliza_congenere      c2000000.val_columna                 %TYPE,--
        nom_tip_situ_coti_ind_renov    c2000000.nom_columna                 %TYPE,--
        tip_situ_coti_ind_renov        c2000000.val_columna                 %TYPE,--
        nom_num_paso_atual             c2000000.nom_columna                 %TYPE,--
        num_paso_atual                 c2000000.val_columna                 %TYPE,--v2.25
        nom_fec_prazo_validade         c2000000.nom_columna                 %TYPE, --v 5.26
        fec_prazo_validade             c2000000.nom_columna                 %TYPE);--v 5.26
        --
        TYPE rec_lista_cotacao_mcc  IS RECORD(
             NUM_COTIZACION     c2000000.val_columna                 %TYPE,
             NOM_TERCERO        c2000000.val_columna                 %TYPE,
             COD_DOCUM          c2000000.val_columna                 %TYPE,
             NUM_PASO_ATUAL     c2000000.val_columna                 %TYPE,
             COD_AGT            c2000000.val_columna                 %TYPE,
             FEC_EMISION        c2000000.val_columna                 %TYPE,
             MCA_CALCULADO      c2000000.val_columna                 %TYPE,
             NOM_NIVEL_COTACAO  c2000000.val_columna                 %TYPE,
             FEC_ENVIO          c2000000.val_columna                 %TYPE,
             TIP_PRODUTO        c2000000.val_columna                 %TYPE,
             PRODUTO            C2009030_VCR.COD_RAMO                %TYPE,
             TOT_REGISTRO       NUMBER, -- v 2.15
             NUM_SIMULACION     c2000000.val_columna                 %TYPE, --2.55
             TIP_RENOV          c2000000.val_columna                 %TYPE, -- 4.80
             TIP_SITU_BO        c2000000.val_columna                 %TYPE, -- 5.29
             NUM_DIAS_VALIDEZ   c2000000.val_columna                 %TYPE  --v5.35
             );
        --
        TYPE rec_lista_cotacao_mcc_proposta  IS RECORD(
             NUM_COTIZACION     c2000000.val_columna   %TYPE,
             NOM_TERCERO        c2000000.val_columna   %TYPE,
             COD_DOCUM          c2000000.val_columna   %TYPE,
             NUM_PASO_ATUAL     c2000000.val_columna   %TYPE,
             COD_AGT            c2000000.val_columna   %TYPE,
             FEC_EMISION        c2000000.val_columna   %TYPE,
             MCA_CALCULADO      c2000000.val_columna   %TYPE,
             NOM_NIVEL_COTACAO  c2000000.val_columna   %TYPE,
             FEC_ENVIO          c2000000.val_columna   %TYPE,
             TIP_PRODUTO        c2000000.val_columna   %TYPE,
             PRODUTO            C2009030_VCR.COD_RAMO  %TYPE,
             TOT_REGISTRO                              NUMBER,
             NUM_SIMULACION     c2000000.val_columna   %TYPE,
             NUM_PROPOSTA       c2000000.val_columna   %TYPE);--} v4.98
        --v 2.98
        TYPE rec_lista_cotacao_mcc_aux IS RECORD(
             COD_CIA        a2000030.cod_cia     %TYPE,
             COD_RAMO       a2000030.cod_ramo    %TYPE,
             NUM_COTIZACION c2000000.val_columna %TYPE,
             NOM_TERCERO    c2000000.val_columna %TYPE,
             TIP_DOCUM      c2000000.val_columna %TYPE,
             COD_DOCUM      c2000000.val_columna %TYPE,
             TIP_SITU       c2000000.val_columna %TYPE,
             NUM_PASO       c2000000.val_columna %TYPE,
             TIP_PRODUTO    c2000000.val_columna %TYPE,
             NUM_DIAS_VALIDEZ c2000000.val_columna %TYPE); --v5.35
        -- I 2.43
          TYPE rec_lista_cotacao_mcc_3_pct IS RECORD(
                NUM_COTIZACION    c2000000.val_columna %TYPE,
                NOM_TERCERO       c2000000.val_columna %TYPE,
                COD_DOCUM         c2000000.val_columna %TYPE,
                NUM_PASO_ATUAL    c2000000.val_columna %TYPE,
                COD_AGT           c2000000.val_columna %TYPE,
                FEC_EMISION       c2000000.val_columna %TYPE,
                MCA_CALCULADO     c2000000.val_columna %TYPE,
                NOM_NIVEL_COTACAO c2000000.val_columna %TYPE,
                FEC_ENVIO         c2000000.val_columna %TYPE,
                TIP_PRODUTO       c2000000.val_columna %TYPE,
                PRODUTO           C2009030_VCR.COD_RAMO %TYPE,
                TOT_REGISTRO      NUMBER, -- v 2.15
                NUM_SIMULACION    c2000000.val_columna %TYPE,
                TIP_RENOV         c2000000.val_columna %TYPE, -- 4.80
                TIP_SITU_BO       c2000000.val_columna %TYPE,  -- 5.29
                NUM_DIAS_VALIDEZ  c2000000.val_columna %TYPE  -- v5.35
                );
        -- F 2.43
        --
  --I 1.61
        TYPE rec_lista_cotacao_intv  IS RECORD(
             NUM_COTIZACION     c2000000.val_columna                 %TYPE,
             NUM_POLIZA         a2000030.num_poliza                  %TYPE,
             NOM_TERCERO        c2000000.val_columna                 %TYPE,
             COD_DOCUM          c2000000.val_columna                 %TYPE,
             NUM_PASO_ATUAL     c2000000.val_columna                 %TYPE,
             COD_AGT            c2000000.val_columna                 %TYPE,
             FEC_EMISION        c2000000.val_columna                 %TYPE,
             MCA_CALCULADO      c2000000.val_columna                 %TYPE,
             NOM_NIVEL_COTACAO  c2000000.val_columna                 %TYPE,
             FEC_ENVIO          c2000000.val_columna                 %TYPE,
             TIP_PRODUTO        c2000000.val_columna                 %TYPE,
             PRODUTO            C2009030_VCR.COD_RAMO                %TYPE,
             NUM_DIAS_VALIDEZ   c2000000.val_columna                 %TYPE);  -- v5.35
    --F 1.61
        --

  -- V 1.84 - Retirada do type da package body
  /*
   TYPE rec_lista_apolice     IS RECORD(
        nom_campo_nom_tercero          a2000020.cod_campo                   %TYPE,
        nom_tercero                    a1001399_vcr.nom_completo            %TYPE,
        nom_campo_num_poliza           a2000020.cod_campo                   %TYPE,
        num_poliza                     a2000020.num_poliza                  %TYPE,
        nom_campo_num_item             a2000020.cod_campo                   %TYPE,
        num_item                       a2000031.num_riesgo                  %TYPE,
        nom_campo_txt_sub_modelo       a2000020.cod_campo                   %TYPE,
        txt_sub_modelo                 g2109042_vcr.nom_modelo_submodelo    %TYPE,
        nom_campo_num_matricula        a2000020.cod_campo                   %TYPE,
        num_matricula                  a2000020.val_campo                   %TYPE,
        nom_campo_num_serie            a2000020.cod_campo                   %TYPE,
        num_serie                      a2000020.val_campo                   %TYPE,
        cod_agt                        a2000030.cod_agt                     %TYPE);
        */
   --
   TYPE rec_lista_restituicao IS RECORD(
        nom_campo_num_poliza           a2000020.cod_campo                   %TYPE,
        num_poliza                     a2000030.num_poliza                  %TYPE,
        nom_campo_imp_restituicao      a2000020.cod_campo                   %TYPE,
        imp_restituicao                a2990700.imp_neta                    %TYPE);
   --
   TYPE rec_dados_grav        IS RECORD(
        cod_campo                      g9999992.cod_campo                   %TYPE,
        val_campo                      a2000020.val_campo                   %TYPE,
        nom_tabla                      g9999992.nom_tabla                   %TYPE,
        nom_prg                        g9999992.nom_prg                     %TYPE);
   --
   TYPE rec_procedimentos    IS RECORD(
        nom_prg                        g9999991.nom_prg                     %TYPE);
   --
   TYPE rec_campos_corretor  IS RECORD(
        nom_campo_nom_tercero_agt      a2000020.cod_campo                   %TYPE,
        nom_tercero_agt                a1001399.nom_tercero                 %TYPE,
        nom_campo_tlf_numero_agt       a2000020.cod_campo                   %TYPE,
        tlf_numero_agt                 a2000020.val_campo                   %TYPE,
        nom_campo_cod_campanha_vcr     a2000020.cod_campo                   %TYPE,
        cod_campanha_vcr               a2000020.val_campo                   %TYPE,
        nom_campo_mca_sicredi          a2000020.cod_campo                   %TYPE,
        mca_sicredi                    a2000020.val_campo                   %TYPE,
        nom_campo_pct_agt_npr          a2000020.cod_campo                   %TYPE, --1.52
        pct_agt_npr                    a2000020.val_campo                   %TYPE, --1.52
        nom_campo_email                a2000020.cod_campo                   %TYPE, --3.77
        email                          a2000020.val_campo                   %TYPE,--3.77
        nom_campo_cod_docum_susep      a2000020.val_campo                   %TYPE,--} v4.98
        cod_docum_susep                a1001332_vcr.cod_docum_susep         %TYPE,--} v4.98
        nom_campo_cod_docum            a2000020.val_campo                   %TYPE, -- JORGE MARIO RESIDENDIAL --} v4.98
        cod_docum                      a1001332_vcr.cod_docum               %TYPE);-- JORGE MARIO RESIDENDIAL --} v4.98
   --
   TYPE rec_campos_cotacao   IS RECORD(
        nom_columna                    c2000000.nom_columna                 %TYPE,
        val_columna                    c2000000.val_columna                 %TYPE);
   --
   TYPE rec_dados_segurado   IS RECORD(
        nom_campo_nom_tercero          a2000020.cod_campo                   %TYPE,
        nom_tercero                    a2009016_vcr.nom_tercero             %TYPE,
        nom_campo_fec_nascimento       a2000020.cod_campo                   %TYPE,
        fec_nascimento                 a1001331.fec_nacimiento              %TYPE,
        nom_campo_tlf_movil            a1001331.tlf_movil                   %TYPE,
        tlf_movil                      a2000020.val_campo                   %TYPE,
        nom_campo_tlf_numero           a2000020.cod_campo                   %TYPE,
        --tlf_numero                     a1001331.tlf_numero                %TYPE,
        tlf_numero                     VARCHAR2(15),
        nom_campo_tlf_numero_com       a2000020.cod_campo                   %TYPE,
        tlf_numero_com                 VARCHAR2(15),
        nom_campo_email                a2000020.cod_campo                   %TYPE,
        email                          a1001331.email                       %TYPE,
        nom_campo_mca_autoriza_sms     a2000020.cod_campo                   %TYPE,
        mca_autoriza_sms               a2000020.val_campo                   %TYPE,
        nom_campo_sexo                 a2000020.cod_campo                   %TYPE,
        sexo                           a2009016_vcr.sexo                    %TYPE,
        nom_campo_estado_civil         a2000020.cod_campo                   %TYPE,
        estado_civil                   a2009016_vcr.estado_civil            %TYPE,
        nom_campo_tip_act_economica     a2000020.cod_campo                  %TYPE,
        tip_act_economica               a1001331_vcr.tip_act_economica_vcr  %TYPE,
        nom_campo_desc_act_economica    a2000020.cod_campo                  %TYPE,
        desc_act_economica              a2007702_vcr.desc_act_econ_vcr      %TYPE);
   --
   TYPE rec_dados_uso        IS RECORD(
        nom_campo_cod_categoria        a2000020.cod_campo                   %TYPE,
        cod_categoria                  g2109019_vcr.cod_categoria_agregada  %TYPE,
        nom_campo_nom_categoria        a2000020.cod_campo                   %TYPE,
        nom_categoria                  g2100001.nom_categoria               %TYPE,
        nom_campo_cod_uso_vehi         a2000020.cod_campo                   %TYPE,
        cod_uso_vehi                   g2109019_VCR.cod_uso_vehi            %TYPE,
        nom_campo_nom_cod_uso_vehi     a2000020.cod_campo                   %TYPE,
        nom_cod_uso_vehi               A2100200.nom_uso_vehi                %TYPE,
        nom_campo_mca_isencao_imposto  a2000020.cod_campo                   %TYPE,
        mca_isencao_imposto            g2109019_vcr.mca_isencao_imposto     %TYPE);
   --
   TYPE rec_dados_veiculo    IS RECORD(
        nom_campo_cod_fipe             a2000020.cod_campo                   %TYPE,
        cod_fipe                       g2109042_vcr.cod_fipe                %TYPE,
        nom_campo_cod_molicar          a2000020.cod_campo                   %TYPE,
        cod_molicar                    g2109042_vcr.cod_molicar             %TYPE,
        nom_campo_cod_marca            a2000020.cod_campo                   %TYPE,
        cod_marca                      g2109042_vcr.cod_marca               %TYPE,
        nom_campo_cod_modelo           a2000020.cod_campo                   %TYPE,
        cod_modelo                     g2109042_vcr.cod_modelo              %TYPE,
        nom_campo_cod_sub_modelo       a2000020.cod_campo                   %TYPE,
        cod_sub_modelo                 g2109042_vcr.cod_sub_modelo          %TYPE,
        nom_campo_anio_sub_modelo      a2000020.cod_campo                   %TYPE,
        anio_sub_modelo                a2100430.anio_sub_modelo             %TYPE,
        nom_campo_cod_ano_fabr         a2000020.cod_campo                   %TYPE,
        cod_ano_fabr                   a2009018_vcr.ano_fabricacao          %TYPE,
        nom_campo_val_sub_modelo       a2000020.cod_campo                   %TYPE,
        val_sub_modelo                 a2100430.val_sub_modelo              %TYPE,
        nom_campo_nom_modelo_submodelo a2000020.cod_campo                   %TYPE,
        nom_modelo_submodelo           g2109042_vcr.nom_modelo_submodelo    %TYPE,
        nom_campo_cod_madre            a2000020.cod_campo                   %TYPE,
        cod_madre                      g2109042_vcr.cod_madre               %TYPE,
        nom_campo_cod_categoria        a2000020.cod_campo                   %TYPE,
        cod_categoria                  g2109042_vcr.cod_categoria           %TYPE);
    /*    nom_campo_num_portas           a2000020.cod_campo                   %TYPE,
        num_portas                     g2109042_vcr.num_portas              %TYPE,
        nom_campo_num_passageiros      a2000020.cod_campo                   %TYPE,
        num_passageiros                g2109042_vcr.num_passageiros         %TYPE,
        nom_campo_cod_classe           a2000020.cod_campo                   %TYPE,
        cod_classe                     g2109042_vcr.cod_classe              %TYPE,
        nom_campo_qtde_irregular       a2000020.cod_campo                   %TYPE,
        num_qtde_irregular             a2009018_vcr.num_qtde_irregular      %TYPE,
        nom_campo_fec_consulta         a2000020.cod_campo                   %TYPE,
        fec_consulta                   a2009018_vcr.fec_consulta            %TYPE,
        nom_campo_retorno_servico      a2000020.cod_campo                   %TYPE,
        retorno_servico                a2009018_vcr.txt_mensagem            %TYPE,
        nom_campo_nom_marca            a2000020.cod_campo                   %TYPE,
        nom_marca                      a2100400.nom_marca                   %TYPE); */
   -- I 2.96
   TYPE rec_dados_veiculo_2 IS RECORD(
    nom_campo_cod_fipe             a2000020.cod_campo %TYPE,
    cod_fipe                       g2109042_vcr.cod_fipe %TYPE,
    nom_campo_cod_molicar          a2000020.cod_campo %TYPE,
    cod_molicar                    g2109042_vcr.cod_molicar %TYPE,
    nom_campo_cod_marca            a2000020.cod_campo %TYPE,
    cod_marca                      g2109042_vcr.cod_marca %TYPE,
    nom_campo_cod_modelo           a2000020.cod_campo %TYPE,
    cod_modelo                     g2109042_vcr.cod_modelo %TYPE,
    nom_campo_cod_sub_modelo       a2000020.cod_campo %TYPE,
    cod_sub_modelo                 g2109042_vcr.cod_sub_modelo %TYPE,
    nom_campo_anio_sub_modelo      a2000020.cod_campo %TYPE,
    anio_sub_modelo                a2100430.anio_sub_modelo %TYPE,
    nom_campo_cod_ano_fabr         a2000020.cod_campo %TYPE,
    cod_ano_fabr                   a2009018_vcr.ano_fabricacao %TYPE,
    nom_campo_val_sub_modelo       a2000020.cod_campo %TYPE,
    val_sub_modelo                 a2100430.val_sub_modelo %TYPE,
    nom_campo_nom_modelo_submodelo a2000020.cod_campo %TYPE,
    nom_modelo_submodelo           g2109042_vcr.nom_modelo_submodelo %TYPE,
    nom_campo_cod_madre            a2000020.cod_campo %TYPE,
    cod_madre                      g2109042_vcr.cod_madre %TYPE,
    nom_campo_cod_categoria        a2000020.cod_campo %TYPE,
    cod_categoria                  g2109042_vcr.cod_categoria %TYPE,
    nom_campo_num_serie_matricula  a2000020.cod_campo %TYPE,
    num_serie_matricula            a2009018_vcr.num_chassi %TYPE);
   -- F 2.96
   TYPE rec_dados_cep        IS RECORD(
        nom_campo_nom_domicilo1        a2000020.cod_campo                   %TYPE,
        nom_domicilo1                  log_logradouro.log_no                %TYPE,
        nom_campo_num_apartado         a2000020.cod_campo                   %TYPE,
        num_apartado                   log_logradouro.log_nu                %TYPE,
        nom_campo_nom_domicilio2       a2000020.cod_campo                   %TYPE,
        nom_domicilio2                 log_logradouro.log_complemento       %TYPE,
        nom_campo_nom_localidad        a2000020.cod_campo                   %TYPE,
        nom_localidad                  a1000102.nom_localidad               %TYPE,
        nom_campo_cod_estado           a2000020.cod_campo                   %TYPE,
        cod_estado                     a1000104.cod_estado                  %TYPE,
        nom_campo_nom_estado           a2000020.cod_campo                   %TYPE,
        nom_estado                     a1000104.nom_estado                  %TYPE,
        nom_campo_abr_estado           a2000020.cod_campo                   %TYPE,
        abr_estado                     a1000104.abr_estado                  %TYPE,
        nom_campo_cod_prov             a2000020.cod_campo                   %TYPE,
        cod_prov                       a1000103.cod_prov                    %TYPE,
        nom_campo_nom_cidade           a2000020.cod_campo                   %TYPE,
        nom_cidade                     a1000100.nom_prov                    %TYPE,
        nom_campo_nom_pais             a2000020.cod_campo                   %TYPE,
        nom_pais                       a1000101.nom_pais                    %TYPE,
        nom_campo_cep                  a2000020.cod_campo                   %TYPE,
        cod_cep                        log_logradouro.cep                   %TYPE);
     --
     TYPE rec_pacote          IS RECORD(
        cod_pacote                     c2000000.val_columna                 %TYPE,
        nom_pacote                     c2000000.val_columna                 %TYPE,
        des_pacote                     c2000000.val_columna                 %TYPE, -- 2.48
        des_franquia_total             c2000000.val_columna                 %TYPE,
        des_premio_total               c2000000.val_columna                 %TYPE, -- 3.94
        des_parcelamento               c2000000.val_columna                 %TYPE,
        des_rastreador_obrigatorio     c2000000.val_columna                 %TYPE,
        cod_nro_simulacao              c2000000.val_columna                 %TYPE,
        des_nro_simulacao              c2000000.val_columna                 %TYPE,
        tip_desconto                   c2000000.val_columna                 %TYPE);
      --
   TYPE rec_coberturas_pacote  IS RECORD(
        cod_cob                        c2009040_vcr.cod_cob                 %TYPE,
        des_cob                        g2009016_vcr.val_columna             %TYPE);
   --
   TYPE rec_cob_endosso_retorno IS RECORD(
        cod_cob                        a1002090.cod_cob                     %TYPE,
        mca_contratado                 VARCHAR2(2),
        val_is                         a2000040.suma_aseg                   %TYPE,
        nom_atributo                   g2000020.cod_campo                   %TYPE,
        val_atributo                   a2000560.val_campo                   %TYPE);
   --
   TYPE rec_tab_cob_endosso_retorno      IS TABLE OF rec_cob_endosso_retorno;
   --
   TYPE rec_coberturas_endosso  IS RECORD(
        cod_cob                        a1002090.cod_cob                     %TYPE,
        nom_cob                        a1002150.nom_cob                     %TYPE,
        mca_obligatorio                a1002090.mca_obligatorio             %TYPE,
        mca_permite_alteracao_is       a1002150.mca_mod_suma_aseg           %TYPE,
        mca_contratado                 VARCHAR2(2),
        val_is                         a2000040.suma_aseg                   %TYPE,
        val_franquia                   a2000040.val_franquicia_min          %TYPE,
        val_premio                     a2100170.imp_spto                    %TYPE,
        mca_acessorio                  a1002150.mca_tip_capital             %TYPE,
        seq_atributo                   g2000020.num_secu                    %TYPE,
        nom_atributo                   g2000020.cod_campo                   %TYPE,
        val_atributo                   a2000560.val_campo                   %TYPE);
   --
   TYPE rec_coberturas         IS RECORD(
        num_simulacion                 c2009040_vcr.num_simulacion          %TYPE,
        nom_pacote                     C2000000.val_columna                 %TYPE,
        mca_tip_cobertura              C2000000.val_columna                 %TYPE,
        cod_cob                        x2000040.cod_cob                     %TYPE,
        nom_cob                        VARCHAR2(500)                             ,
        val_indenizacao                c2009040_vcr.suma_aseg               %TYPE,
        val_franquia                   c2009040_vcr.val_franquicia_min      %TYPE,
        val_premio                     c2109170_vcr.imp_anual               %TYPE);
   --
   TYPE rec_detalhe_pacote     IS RECORD(
        cod_cia                        c2009030_vcr.cod_cia                 %TYPE,
        cod_ramo                       c2009030_vcr.cod_ramo                %TYPE,
        num_cotizacion                 c2009030_vcr.num_cotizacion          %TYPE,
        num_simulacion                 c2000000.val_columna                 %TYPE,
        cod_pacote                     c2000000.val_columna                 %TYPE,
        nom_pacote                     c2000000.val_columna                 %TYPE,
        cod_tarifa                     c2000000.val_columna                 %TYPE,
        fec_validez_tarifa             c2000000.val_columna                 %TYPE,
        val_clave_formula              c2000000.val_columna                 %TYPE,
        val_total                      c2109170_vcr.imp_anual               %TYPE,
        pct_fator_ajuste               c2000000.val_columna                 %TYPE,
        val_veiculo                    c2000000.val_columna                 %TYPE,
        tip_merc_deter                 c2000000.val_columna                 %TYPE,
        tip_pacote                     c2000000.val_columna                 %TYPE, --2.14
        pct_agt_npr                    c2000000.val_columna                 %TYPE,  --v3.36
        cod_plan_pago                  a1009215_vcr.cod_plan_pago           %TYPE,  -- 4.37
        cod_forma_pago                 a1009215_vcr.cod_forma_pago          %TYPE); -- 4.37
   --
   --
   TYPE rec_pref_forma_pago IS RECORD(
    cod_forma_pago a2000020.cod_campo %TYPE,
    nom_forma_pago a2000020.val_campo %TYPE); -- 4.37
   --
   TYPE rec_pref_parcelas_pago IS RECORD(
    cod_forma_pago    a2000020.cod_campo %TYPE,
    cod_parcelas_pago a2000020.val_campo %TYPE); -- 4.37
   --
   TYPE rec_val_lim_inde       IS RECORD(
        cod_campo                      a2000020.cod_campo                   %TYPE,
        val_campo                      a2000020.val_campo                   %TYPE,
        mca_val_defec                  g2109040_vcr.mca_defecto             %TYPE);
   --
   TYPE rec_tab_val_lim_inde   IS TABLE OF rec_val_lim_inde;
   --
   TYPE rec_atri_cob           IS RECORD(
        cod_campo                      a2000020.cod_campo                %TYPE,
        val_campo                      a2000020.val_campo                %TYPE,
        txt_campo                      g2009016_vcr.val_columna          %TYPE,
        mca_selec                      C2000000.val_columna              %TYPE);
   --
   TYPE rec_tab_atri_cob       IS TABLE OF rec_atri_cob;
   --
   TYPE rec_tab_atri_lista     IS TABLE OF rec_tab_atri_cob;
   --
   TYPE rec_val_franq          IS RECORD(
        cod_campo                      a2000020.cod_campo                %TYPE,
        txt_campo                      g2000010.nom_campo                %TYPE,
        val_campo                      a2000020.val_campo                %TYPE);
   --
   TYPE rec_tab_val_franq      IS TABLE OF rec_val_franq;
   --
   TYPE rec_det_cob            IS RECORD(
        cod_cob                        x2000040.cod_cob                  %TYPE,
        nom_cob                        VARCHAR2(500)                          ,
        mca_selec_cob                  C2000000.val_columna              %TYPE,
        mca_modif_cap                  C2000000.val_columna              %TYPE,
        tab_val_lim_inde               rec_tab_val_lim_inde                   ,
        tab_atri_lista                 rec_tab_atri_lista                     ,
        tab_val_franq                  rec_tab_val_franq                      ,
        val_premio                     c2109170_vcr.imp_anual            %TYPE);
   --
   TYPE rec_tab_det_cob        IS TABLE OF rec_det_cob;
   --
   TYPE rec_tab_cod_cob_casco  IS TABLE OF df_cmn_nwt_xx_vrb_cnc.cnc_vrb_val%TYPE;
   --
   TYPE rec_tab_cod_cob_agrupadas  IS TABLE OF df_cmn_nwt_xx_vrb_cnc.cnc_vrb_val%TYPE;
   --
   TYPE rec_dados_coti_spto        IS RECORD(
        nom_campo_num_cotizacion   a2000020.cod_campo        %TYPE,
        num_coitizacion            VARCHAR2(17)                   ,
        nom_campo_num_simulacion   a2000020.cod_campo        %TYPE,
        num_simulacion             a2000030.num_spto_apli    %TYPE,
        nom_campo_cod_ramo         a2000020.cod_campo        %TYPE,
        cod_ramo                   a1001800.cod_ramo         %TYPE,
        nom_campo_fec_calculo      a2000020.cod_campo        %TYPE,
        fec_calculo                a2000030.fec_validez      %TYPE,
        nom_campo_num_poliza       a2000020.cod_campo        %TYPE,
        num_poliza                 a2000030.num_poliza       %TYPE,
        nom_campo_num_spto         a2000020.cod_campo        %TYPE,
        num_spto                   a2000030.num_spto         %TYPE,
        nom_campo_fec_efec_spto    a2000020.cod_campo        %TYPE,
        fec_efec_spto              a2000030.fec_efec_spto    %TYPE,
        nom_campo_fec_vcto_spto    a2000020.cod_campo        %TYPE,
        fec_vcto_spto              a2000030.fec_vcto_spto    %TYPE,
        nom_campo_tip_docum        a2000020.cod_campo        %TYPE,
        tip_docum                  a2000030.tip_docum        %TYPE,
        nom_campo_cod_docum        a2000020.cod_campo        %TYPE,
        cod_docum                  a2000030.cod_docum        %TYPE,
        nom_campo_nom_completo     a2000020.cod_campo        %TYPE,
        nom_completo               v1001390.nom_completo     %TYPE,
        nom_campo_tip_spto         a2000020.cod_campo        %TYPE,
        tip_spto                   a2000030.tip_spto         %TYPE,
        nom_campo_nom_riesgo       a2000020.cod_campo        %TYPE,
        nom_riesgo                 a2000031.nom_riesgo       %TYPE,
        nom_campo_num_matricula    a2000020.cod_campo        %TYPE,
        num_matricula              a2000020.val_campo        %TYPE,
        nom_campo_num_serie        a2000020.cod_campo        %TYPE,
        num_serie                  a2000020.val_campo        %TYPE,
        nom_campo_num_vistoria     a2000020.cod_campo        %TYPE,
        num_vistoria               a2000020.val_campo        %TYPE,
        nom_campo_imp_recibo       a2000020.cod_campo        %TYPE,
        imp_recibo                 a2990700.imp_recibo       %TYPE,
        nom_campo_imp_neta         a2000020.cod_campo        %TYPE,
        imp_neta                   a2990700.imp_neta         %TYPE,
        nom_campo_status           a2000020.cod_campo        %TYPE,
        status                     a2000020.val_campo        %TYPE);
   --
   TYPE type_cobs_excluidas IS TABLE OF a2000040.cod_cob%TYPE;
   --
   -- I 1.75
    TYPE rec_dados_banco    IS RECORD(
        NOM_CAMPO_MCA_DEBITO_CONTA         a2000020.cod_campo                    %TYPE,
        MCA_DEBITO_CONTA                   A2109170_VCR.MCA_DEBITO_CONTA         %TYPE,
        NOM_CAMPO_MCA_DIGITO_AGENCIA       a2000020.cod_campo                    %TYPE,
        MCA_DIGITO_AGENCIA                 A2109170_VCR.MCA_DIGITO_AGENCIA       %TYPE,
        NOM_CAMPO_NUM_CAMPO_AGENCIA        a2000020.cod_campo                    %TYPE,
        NUM_CAMPO_AGENCIA                  A2109170_VCR.NUM_CAMPO_AGENCIA        %TYPE,
        NOM_CAMPO_NUM_CAMPO_DG_AG          a2000020.cod_campo                    %TYPE,
        NUM_CAMPO_DIGITO_AGENCIA           A2109170_VCR.NUM_CAMPO_DIGITO_AGENCIA %TYPE,
        NOM_CAMPO_MCA_DIGITO_CONTA         a2000020.cod_campo                    %TYPE,
        MCA_DIGITO_CONTA                   A2109170_VCR.MCA_DIGITO_CONTA         %TYPE,
        NOM_CAMPO_NUM_CAMPO_CONTA          a2000020.cod_campo                    %TYPE,
        NUM_CAMPO_CONTA                    A2109170_VCR.NUM_CAMPO_CONTA          %TYPE,
        NOM_CAMPO_NUM_CAMPO_DG_CONTA       a2000020.cod_campo                    %TYPE,
        NUM_CAMPO_DIGITO_CONTA             A2109170_VCR.NUM_CAMPO_DIGITO_CONTA   %TYPE,
        NOM_CAMPO_MCA_TIPO_CONTA           a2000020.cod_campo                    %TYPE,
        MCA_TIPO_CONTA                     A2109170_VCR.MCA_TIPO_CONTA           %TYPE,
        NOM_CAMPO_NUM_CAMPO_TIPO_CONTA     a2000020.cod_campo                    %TYPE,
        NUM_CAMPO_TIPO_CONTA               A2109170_VCR.NUM_CAMPO_TIPO_CONTA     %TYPE);
   -- F 1.75
   --
   t_cobs_excluidas type_cobs_excluidas;
   --
   --
   CURSOR gc_c2009030_vcr (pc_cod_cia          c2009030_vcr.cod_cia         %TYPE,
                           pc_cod_ramo         c2009030_vcr.cod_ramo        %TYPE,
                           pc_num_poliza_grupo c2009030_vcr.num_poliza_grupo%TYPE)
   IS
      SELECT h.num_cotizacion, h.cod_agt
        FROM c2009030_vcr h
       WHERE h.cod_cia          = pc_cod_cia
         AND h.cod_ramo         = pc_cod_ramo
         AND h.num_poliza_grupo = pc_num_poliza_grupo;
   --
   PROCEDURE pp_limpa_globais
   IS
   --
   BEGIN
     --
     g_txt_error          := NULL;
     g_txt_ruta_error        := NULL;
     --
     g_cod_mensaje           := NULL;
     g_anx_mensaje           := NULL;
     --
     v_tab_fipe              := NULL;
     v_reg_fipe              := NULL;
     --
     g_cot_dados             := NULL;
     g_cot_reg               := NULL;
     --
     g_cob_dados             := NULL;
     g_cob_reg               := NULL;
     --
     g_err_msg               := NULL; -- 5.03 -- v5.14
     --
     g_tab_veic              := NULL;
     g_reg_veic              := NULL;
     --
     g_num_cotizacion        := NULL;
     g_num_simulacion        := NULL;
     g_num_propuesta         := NULL;
     g_tip_mvto_batch        := NULL;
     g_cod_cia               := NULL;
     g_cod_ramo              := NULL;
     g_cod_agt               := NULL;
     g_num_paso              := NULL;
     g_cod_tarifa            := NULL;
     --
     g_num_poliza            := NULL;
     g_num_spto              := NULL;
     g_num_spto_apli         := NULL;
     g_num_apli              := NULL;
     --
     g_mca_coti_spto         := NULL;
     --
     g_fic_traza             := NULL;
     --
     g_xml                   := NULL;
     g_xml_in                := NULL;
     --
   END pp_limpa_globais;
   --
   /* ----------------------------------------------------
   || mx : Procedimiento que genera las trazas
   */ ----------------------------------------------------
   --
   PROCEDURE mx (p_cod_campo   IN VARCHAR2 ,
                 p_val_campo   IN VARCHAR2 )
   IS
   --
   BEGIN
      --
      IF g_local_traza THEN --IF em_f_genera_traza THEN --v4.09
         --
         trn_k_global.asigna('fic_traza', g_fic_traza);
         trn_k_global.asigna('cab_traza', 'gen_ws->');
         --
         em_k_traza.p_escribe(p_cod_campo,
                              p_val_campo);
         --
      END IF;
      --
   END mx;
   --
   /* ----------------------------------------------------
   || pp_trata_log_processo : Procediemtno que gera o log do processo
   */ ----------------------------------------------------
   --
   PROCEDURE pp_trata_log_processo (p_reg_a2009700 IN OUT a2009700_vcr%ROWTYPE)
   IS
      --
      PRAGMA AUTONOMOUS_TRANSACTION;
      --
      l_reg_a2009701 a2009701_vcr%ROWTYPE;
      --
   BEGIN
      --
      mx('I', 'pp_trata_log_processo');
      --
      IF em_f_genera_log THEN
         --
         p_reg_a2009700.cod_session_id := SYS_CONTEXT('userenv','sessionid');
         --
         -- I 3.89
         --SELECT HOST_NAME
         -- INTO p_reg_a2009700.txt_host_rac
         -- FROM GV$INSTANCE
         -- WHERE INSTANCE_NUMBER = USERENV('INSTANCE');
         --
         p_reg_a2009700.txt_host_rac := sys_context('USERENV', 'INSTANCE_NAME');
         -- F 3.89
         --
         p_reg_a2009700.cod_id_log := NVL(p_reg_a2009700.cod_id_log, seq_id_log.NEXTVAL);
         --
         BEGIN
            --
            em_k_a2009700.p_inserta(p_reg_a2009700);
            --
         EXCEPTION
            WHEN OTHERS THEN
               --
               em_k_a2009700.p_actualiza(p_reg_a2009700);
               --
         END;
         --
         /*
         IF g_err_msg.EXISTS(1) THEN
            --
            l_reg_a2009701.cod_id_log := p_reg_a2009700.cod_id_log;
            --
            FOR i IN 1 .. g_err_msg.COUNT LOOP
               --
               l_reg_a2009701.cod_campo    := g_err_msg(i).cod_campo   ;
               l_reg_a2009701.tip_mensagem := g_err_msg(i).tip_mensagem;
               l_reg_a2009701.cod_mensagem := g_err_msg(i).cod_mensagem;
               l_reg_a2009701.txt_mensagem := g_err_msg(i).des_mensagem;
               --
               BEGIN
                  --
                  em_k_a2009701.p_inserta(l_reg_a2009701);
                  --
               EXCEPTION
                  WHEN OTHERS THEN
                     --
                     em_k_a2009701.p_actualiza(l_reg_a2009701);
                     --
               END;
               --
            END LOOP;
            --
         END IF;
         */
         --
      END IF;
      --
      COMMIT;
      --
      mx('F', 'pp_trata_log_processo');
      --
   END pp_trata_log_processo;
   --
   /* --------------------------------------------------------
   || pp_devuelve_error :
   */ --------------------------------------------------------
   --
   PROCEDURE pp_devuelve_error
   IS
   --
   BEGIN
      --
      IF g_cod_mensaje BETWEEN 20000
                           AND 20999
      THEN
        --
        RAISE_APPLICATION_ERROR(-g_cod_mensaje                           ,
                                ss_k_mensaje.f_texto_idioma(g_cod_mensaje,
                                                            g_cod_idioma ) ||
                                g_anx_mensaje);
        --
      ELSE
        --
        RAISE_APPLICATION_ERROR(-20000                             ,
                                ss_k_mensaje.f_texto_idioma(g_cod_mensaje,
                                                            g_cod_idioma ) ||
                                g_anx_mensaje);
        --
      END IF;
      --
   END pp_devuelve_error;
   /* ------------------------------------------------------
   || funcao de transformacao de texto para xml
   */ ------------------------------------------------------
   --
   procedure pp_inserta_c2000000_defecto (
                                             p_num_cotizacion c2000000.num_cotizacion   %TYPE,
                                             p_nom_tabla      c2000000.nom_tabla        %TYPE,
                                             p_nom_columna    c2000000.nom_tabla        %TYPE,
                                             p_vrb_nam        df_cmn_nwt_xx_cnn.vrb_nam %TYPE,
                                             p_val_defecto    c2000000.val_columna       %TYPE
                                             )
   IS
      --
      l_reg_c2000000  c2000000%ROWTYPE := null;
      --
   BEGIN
      --
      mx('I', 'pp_inserta_c2000000_defecto');
      --
      l_reg_c2000000.cod_cia        := trn_k_global.cod_cia;
      l_reg_c2000000.cod_ramo       := ea_k_231_utils.g_k_ramo_motor;
      l_reg_c2000000.num_cotizacion := p_num_cotizacion;
      l_reg_c2000000.nom_tabla      := p_nom_tabla;
      l_reg_c2000000.nom_columna    := p_nom_columna;
      l_reg_c2000000.cod_fila       := g_k_cod_fila;
      IF p_val_defecto IS NULL THEN
         --
         l_reg_c2000000.val_columna    := trn_k_df_cmn_nwt_xx_cnn.f_vrb_nam_val(p_vrb_nam);
         --
      ELSE
         --
         l_reg_c2000000.val_columna    := p_val_defecto;
         --
      END IF;
      --
      em_k_c2000000.p_inserta_borrando(p_reg => l_reg_c2000000);
      --
      mx('F', 'pp_inserta_c2000000_defecto');
      --
   END pp_inserta_c2000000_defecto;
   --
   /* --------------------------------------------------------
   || pp_asigna :
   ||
   || Llama a trn_k_global.asigna
   */ --------------------------------------------------------
   --
   PROCEDURE pp_asigna(p_nom_global VARCHAR2,
                       p_val_global VARCHAR2) IS
   BEGIN
      --
      mx('I','pp_asigna');
      --
      trn_k_global.asigna(p_nom_global,p_val_global);
      --
      mx(p_nom_global,p_val_global);
      --
      mx('F','pp_asigna');
      --
   END pp_asigna;
   --
   /* --------------------------------------------------------
   || pp_asigna :
   ||
   || Llama a trn_k_global.asigna
   */ --------------------------------------------------------
   --
   PROCEDURE pp_asigna(p_nom_global VARCHAR2,
                       p_val_global NUMBER  ) IS
   BEGIN
      --
      mx('I','pp_asigna');
      --
      trn_k_global.asigna(p_nom_global,TO_CHAR(p_val_global));
      --
      mx(p_nom_global,TO_CHAR(p_val_global));
      --
      mx('F','pp_asigna');
      --
   END pp_asigna;
   --
   /* --------------------------------------------------------
   || pp_asigna :
   ||
   || Llama a trn_k_global.asigna
   */ --------------------------------------------------------
   --
   PROCEDURE pp_asigna(p_nom_global VARCHAR2,
                       p_val_global DATE    ) IS
   BEGIN
      --
      mx('I','pp_asigna');
      --
      trn_k_global.asigna(p_nom_global,TO_CHAR(p_val_global,'ddmmyyyy'));
      --
      mx(p_nom_global,TO_CHAR(p_val_global,'ddmmyyyy'));
      --
      mx('F','pp_asigna');
      --
   END pp_asigna;
   --
   /* -------------------------------
   ||  Busca se aquele acessorio da lista
   ||  esta selecionado com valor e
   ||  descricao
   */ -------------------------------
   --
   PROCEDURE pp_busca_dados_accesorio(p_num_cotizacion  IN a2000030.num_poliza%TYPE,
                                      p_cod_opcional    IN NUMBER                  ,
                                      p_mca_selecion   OUT a2000560.val_campo %TYPE,
                                      p_imp_accesorio  OUT a2000560.val_campo %TYPE)
    IS
     --
     l_cod_accesorio    NUMBER  := NULL;
     --
     CURSOR c_accesorio IS
     SELECT TO_NUMBER(SUBSTR(cod_campo,16,2))
       FROM A2000560
      WHERE cod_cia       = trn_k_global.cod_cia
        AND num_propuesta = p_num_cotizacion
        AND cod_campo     LIKE g_k_prf_cod_accesorio ||'%'
        AND val_campo     = p_cod_opcional;
     --
     CURSOR c_impacces IS
     SELECT val_campo
       FROM A2000560
      WHERE cod_cia       = trn_k_global.cod_cia
        AND num_propuesta = p_num_cotizacion
        AND cod_campo     LIKE g_k_prf_imp_accesorio ||l_cod_accesorio;
     --
     CURSOR c_selecacces IS
     SELECT val_campo
       FROM A2000560
      WHERE cod_cia       = trn_k_global.cod_cia
        AND num_propuesta = p_num_cotizacion
        AND cod_campo     LIKE g_k_prf_mca_seleccion ||l_cod_accesorio;
     --
   BEGIN
     --
     mx('I', 'pp_busca_dados_accesorio');
     --
     IF c_accesorio%ISOPEN THEN
      --
      CLOSE c_accesorio;
      --
     END IF;
     --
     OPEN c_accesorio;
     --
     FETCH c_accesorio INTO l_cod_accesorio;
     --
     CLOSE c_accesorio;
     --
     mx('l_cod_accesorio', l_cod_accesorio);
     --
     IF c_impacces%ISOPEN THEN
      --
      CLOSE c_impacces;
      --
     END IF;
     --
     OPEN c_impacces;
     --
     FETCH c_impacces INTO p_imp_accesorio;
     --
     CLOSE c_impacces;
     --
     mx('p_imp_accesorio', p_imp_accesorio);
     --
     IF c_selecacces%ISOPEN THEN
      --
      CLOSE c_selecacces;
      --
     END IF;
     --
     OPEN c_selecacces;
     --
     FETCH c_selecacces INTO p_mca_selecion;
     --
     CLOSE c_selecacces;
     --
     mx('p_mca_selecion', p_mca_selecion);
     --
     mx('F', 'pp_busca_dados_accesorio');
     --
   END pp_busca_dados_accesorio;
   --
   -- I v3.70
   --
   /* ----------------------------------
   || fp_valida_g2109042_vcr
   */ ----------------------------------
   --
   FUNCTION fp_valida_g2109042_vcr (p_cod_cia            g2109042_vcr.cod_cia             %TYPE,
                                    p_num_serie          a2009018_vcr.num_chassi          %TYPE,
                                    p_num_matricula      a2009018_vcr.num_placa           %TYPE,
                                    p_cod_fipe           a2009018_vcr.cod_fipe            %TYPE,
                                    p_nom_servico        df_cmn_nwt_xx_cnn.vrb_nam_val    %TYPE,
                                    p_cod_marca          g2109042_vcr.cod_marca           %TYPE,
                                    p_cod_modelo         g2109042_vcr.cod_modelo          %TYPE,
                                    p_ano_modelo         g2109042_vcr.num_ano_ate         %TYPE,
                                    p_sub_modelo         g2109042_vcr.cod_sub_modelo      %TYPE,
                                    p_txt_sub_modelo     g2109042_vcr.nom_modelo_submodelo%TYPE)
   RETURN VARCHAR2 IS
    --
    l_existe                   VARCHAR2(5) := 'FALSE';
    --
    reg_cia_g2109042_vcr       g2109042_vcr.cod_cia%TYPE;
    --I 3.68
    CURSOR valida_serie IS
      SELECT DISTINCT g42.cod_cia
         FROM g2109042_vcr g42
            , a2009018_vcr a18
        WHERE g42.cod_cia         = p_cod_cia
          and a18.num_chassi      = p_num_serie  --3.69
          AND g42.fec_validez     = (SELECT MAX(g42_aux.fec_validez)
                                       FROM g2109042_vcr g42_aux
                                      WHERE g42_aux.cod_cia        = g42.cod_cia
                                        AND g42_aux.cod_marca      = g42.cod_marca
                                        AND g42_aux.cod_modelo     = g42.cod_modelo
                                        AND g42_aux.cod_sub_modelo = g42.cod_sub_modelo)
          AND a18.cod_cia     (+) = g42.cod_cia
          AND a18.desc_servico(+) = p_nom_servico
          AND a18.fec_validez (+)>= NVL(g_fec_validez_tarifa
                                       ,TRUNC(SYSDATE))
          --AND a18.cod_fipe    (+) like ('%'||g42.COD_FIPE||'%') --3.69
          AND (a18.cod_fipe  like ('%'||g42.COD_FIPE||'%') OR a18.cod_MOLICAR  like ('%'||g42.COD_MOLICAR||'%'))-- 3.82
          AND a18.ano_modelo  (+) BETWEEN g42.num_ano_de  AND
                                       g42.num_ano_ate
          AND rownum             <= trn.UNO;
  --
  CURSOR valida_matricula IS
   SELECT DISTINCT g42.cod_cia
         FROM g2109042_vcr g42
            , a2009018_vcr a18
        WHERE g42.cod_cia          = p_cod_cia
          AND a18.NUM_PLACA        = p_num_matricula   --3.69
          AND g42.fec_validez      = (SELECT MAX(g42_aux.fec_validez)
                                        FROM g2109042_vcr g42_aux
                                       WHERE g42_aux.cod_cia        = g42.cod_cia
                                         AND g42_aux.cod_marca      = g42.cod_marca
                                         AND g42_aux.cod_modelo     = g42.cod_modelo
                                         AND g42_aux.cod_sub_modelo = g42.cod_sub_modelo)
          AND a18.cod_cia      (+) = g42.cod_cia
          AND a18.desc_servico (+) = p_nom_servico
          AND a18.fec_validez  (+)>= NVL(g_fec_validez_tarifa
                                        ,TRUNC(SYSDATE))
        --  AND a18.cod_fipe     (+) like ('%'||g42.COD_FIPE||'%')   --3.69
          AND (a18.cod_fipe  like ('%'||g42.COD_FIPE||'%') OR a18.cod_MOLICAR  like ('%'||g42.COD_MOLICAR||'%'))-- 3.82
          AND a18.ano_modelo   (+) BETWEEN g42.num_ano_de  AND
                                           g42.num_ano_ate
          AND rownum              = trn.UNO;
    --
    CURSOR valida_marca_modelo_ano IS
    SELECT cod_cia
         FROM g2109042_vcr
        WHERE cod_cia         = p_cod_cia
          AND cod_marca       = p_cod_marca
          AND cod_modelo      = p_cod_modelo
          AND cod_sub_modelo  = p_sub_modelo
          AND fec_validez    <= NVL(g_fec_validez_tarifa
                                   ,TRUNC(SYSDATE))
          AND p_ano_modelo    BETWEEN num_ano_de  AND
                                      num_ano_ate
          AND rownum         = trn.UNO;
    --
    CURSOR valida_marca IS
     SELECT cod_cia
         FROM g2109042_vcr
        WHERE cod_cia         = p_cod_cia
          AND cod_marca       = p_cod_marca
          AND fec_validez    <= NVL(g_fec_validez_tarifa,TRUNC(SYSDATE))
          AND rownum         <= trn.UNO;
    --
    CURSOR valida_txt_sub_modelo IS
     SELECT cod_cia
         FROM g2109042_vcr
        WHERE cod_cia                     = p_cod_cia
          AND UPPER(nom_modelo_submodelo) LIKE UPPER('%'||p_txt_sub_modelo||'%')
          AND fec_validez                <= NVL(g_fec_validez_tarifa
                                               ,TRUNC(SYSDATE))
          AND rownum                     = trn.UNO;
    --
    CURSOR valida_fipe IS
     SELECT DISTINCT g42.cod_cia
         FROM g2109042_vcr g42
            , a2009018_vcr a18
        WHERE g42.cod_cia          = p_cod_cia
          AND g42.COD_FIPE         = p_cod_fipe    --3.69
          AND g42.fec_validez      = (SELECT MAX(g42_aux.fec_validez)
                                        FROM g2109042_vcr g42_aux
                                       WHERE g42_aux.cod_cia        = g42.cod_cia
                                         AND g42_aux.cod_marca      = g42.cod_marca
                                         AND g42_aux.cod_modelo     = g42.cod_modelo
                                         AND g42_aux.cod_sub_modelo = g42.cod_sub_modelo)
          AND a18.cod_cia      (+) = g42.cod_cia
          AND a18.desc_servico (+) = p_nom_servico
          AND a18.fec_validez  (+)>= NVL(g_fec_validez_tarifa
                                         ,TRUNC(SYSDATE))
          AND a18.cod_fipe     (+) like ('%'||g42.COD_FIPE||'%')    --3.69
          AND a18.ano_modelo   (+) BETWEEN g42.num_ano_de  AND
                                           g42.num_ano_ate
          AND rownum              <= trn.UNO;
    --
      CURSOR valida_molicar IS
     SELECT DISTINCT g42.cod_cia
         FROM g2109042_vcr g42
            , a2009018_vcr a18
        WHERE g42.cod_cia          = p_cod_cia
          AND g42.cod_molicar      = p_cod_fipe
          AND g42.fec_validez      = (SELECT MAX(g42_aux.fec_validez)
                                        FROM g2109042_vcr g42_aux
                                       WHERE g42_aux.cod_cia        = g42.cod_cia
                                         AND g42_aux.cod_marca      = g42.cod_marca
                                         AND g42_aux.cod_modelo     = g42.cod_modelo
                                         AND g42_aux.cod_sub_modelo = g42.cod_sub_modelo)
          AND a18.cod_cia      (+) = g42.cod_cia
          AND a18.desc_servico (+) = p_nom_servico
          AND a18.fec_validez  (+)>= NVL(g_fec_validez_tarifa
                                        ,TRUNC(SYSDATE))
          AND a18.cod_fipe     (+)  like ('%'||g42.COD_FIPE||'%') --3.69
          AND a18.ano_modelo   (+) BETWEEN g42.num_ano_de  AND
                                           g42.num_ano_ate
          AND rownum              <= trn.UNO;
    --F 3.68
    BEGIN
     --
     mx('I', 'fp_valida_g2109042_vcr');
     --
     mx('num_serie', P_NUM_SERIE );
     mx('num_matricula', P_NUM_MATRICULA );
     mx('cod_fipe', P_COD_FIPE );
     --
     IF p_num_serie IS NOT NULL
     THEN
       --I 3.68
       OPEN valida_serie;
       --
       FETCH valida_serie INTO reg_cia_g2109042_vcr;
       --
       CLOSE valida_serie;
       --F 3.68
       IF reg_cia_g2109042_vcr IS NULL THEN
         --
         l_existe := 'FALSE';
         --
         mx('F', 'fp_valida_g2109042_vcr');
         --
         RETURN l_existe;
         --
       ELSE
         --
         l_existe := 'TRUE';
         --
         mx('F', 'fp_valida_g2109042_vcr');
         --
         RETURN l_existe;
         --
       END IF;
       --
     ELSIF p_num_matricula IS NOT NULL
     THEN
       --I 3.68
       OPEN valida_matricula;
       --
       FETCH valida_matricula INTO reg_cia_g2109042_vcr;
       --
       CLOSE valida_matricula;
       --F 3.68
       IF reg_cia_g2109042_vcr IS NULL THEN
         --
         l_existe := 'FALSE';
         --
         mx('F', 'fp_valida_g2109042_vcr');
         --
         RETURN l_existe;
         --
       ELSE
         --
         l_existe := 'TRUE';
         --
         mx('F', 'fp_valida_g2109042_vcr');
         --
         RETURN l_existe;
         --
       END IF;
       --
     ELSIF p_cod_fipe IS NOT NULL
     THEN
   --I 3.68
     IF g_k_num_tam_fipe = LENGTH (p_cod_fipe) THEN
         --
         OPEN valida_fipe;
         --
         FETCH valida_fipe INTO reg_cia_g2109042_vcr;
         --
         CLOSE valida_fipe;
         --F 3.68
         IF reg_cia_g2109042_vcr IS NULL  THEN
           --
           l_existe := 'FALSE';
           --
           mx('F', 'fp_valida_g2109042_vcr');
           --
           RETURN l_existe;
           --
         ELSE
           --
           l_existe := 'TRUE';
           --
           mx('F', 'fp_valida_g2109042_vcr');
           --
           RETURN l_existe;
           --
         END IF;
     ELSE
         --I 3.68
         OPEN valida_molicar;
         --
         FETCH valida_molicar INTO reg_cia_g2109042_vcr;
         --
         CLOSE valida_molicar;
         --F 3.68
         IF reg_cia_g2109042_vcr IS NULL  THEN
           --
           l_existe := 'FALSE';
           --
           mx('F', 'fp_valida_g2109042_vcr');
           --
           RETURN l_existe;
           --
         ELSE
           --
           l_existe := 'TRUE';
           --
           mx('F', 'fp_valida_g2109042_vcr');
           --
           RETURN l_existe;
       --
       END IF;
     --
     END IF;
       --
     ELSIF p_cod_marca  IS NOT NULL AND
           p_cod_modelo IS NOT NULL AND
           p_ano_modelo IS NOT NULL AND
           p_sub_modelo IS NOT NULL
     THEN
       --I 3.68
       OPEN valida_marca_modelo_ano;
       --
       FETCH valida_marca_modelo_ano INTO reg_cia_g2109042_vcr;
       --
       CLOSE valida_marca_modelo_ano;
       --F 3.68
       mx('l_cod_modelo ', p_cod_modelo );
       mx('l_cod_marca  ', p_cod_marca  );
       mx('l_sub_modelo ', p_sub_modelo );
       mx('l_ano_modelo ', p_ano_modelo );
       mx('fec_validez_tarifa', g_fec_validez_tarifa);
       --
       IF reg_cia_g2109042_vcr IS NULL THEN
         --
         l_existe := 'FALSE';
         --
         mx('F', 'fp_valida_g2109042_vcr');
         --
         RETURN l_existe;
         --
       ELSE
         --
         l_existe := 'TRUE';
         --
         mx('F', 'fp_valida_g2109042_vcr');
         --
         RETURN l_existe;
         --
       END IF;
       --
     ELSIF p_cod_marca IS NOT NULL
     THEN
       --I 3.68
       OPEN valida_marca;
       --
       FETCH valida_marca INTO reg_cia_g2109042_vcr;
       --
       CLOSE valida_marca;
       --F 3.68
       IF reg_cia_g2109042_vcr IS NULL
       THEN
         --
         l_existe := 'FALSE';
         --
         mx('F', 'fp_valida_g2109042_vcr');
         --
         RETURN l_existe;
         --
       ELSE
         --
         l_existe := 'TRUE';
         --
         mx('F', 'fp_valida_g2109042_vcr');
         --
         RETURN l_existe;
         --
       END IF;
       --
     ELSIF p_txt_sub_modelo IS NOT NULL
     THEN
       --I 3.68
       OPEN valida_txt_sub_modelo;
       --
       FETCH valida_txt_sub_modelo INTO reg_cia_g2109042_vcr;
       --
       CLOSE valida_txt_sub_modelo;
       --F 3.68
       IF reg_cia_g2109042_vcr IS NULL
       THEN
         --
         l_existe := 'FALSE';
         --
         mx('F', 'fp_valida_g2109042_vcr');
         --
         RETURN l_existe;
         --
       ELSE
         --
         l_existe := 'TRUE';
         --
         mx('F', 'fp_valida_g2109042_vcr');
         --
         RETURN l_existe;
         --
       END IF;
       --
     END IF;
     --
     mx('cod_cia', p_cod_cia );
     mx('g_fec_validez_tarifa ', g_fec_validez_tarifa );
     mx('p_nom_servico', P_NOM_SERVICO );
     mx('p_num_serie', P_NUM_SERIE );
     --
     mx('F', 'fp_valida_g2109042_vcr');
     --
   EXCEPTION --VALIDAR
     WHEN OTHERS
     THEN
       --
       mx('F', 'EXCEPTION - fp_valida_g2109042_vcr');
       --
   END fp_valida_g2109042_vcr;
   -- F v3.70
   /* ------------------------------------------------------
   || Efetua DE/PARA de mensagens de listas fixas.
   */ ------------------------------------------------------
   --
   FUNCTION fp_valores_lista (p_cod_cia   a2000030.cod_cia  %TYPE,
                              p_cod_campo a2000020.cod_campo%TYPE,
                              p_val_campo a2000020.val_campo%TYPE,
                              p_cod_valor g2990006.cod_valor%TYPE)
   RETURN a2000020.val_campo%TYPE
   IS
   --
   l_val_campo VARCHAR2(2000)                := trn.NULO;
   l_cod_ramo  g2009017_vcr.cod_ramo   %TYPE            ; -- I 4.94 Alteracao das descricoes das coberturas
   --
   BEGIN
     --
     mx('I', 'fp_valores_lista');
     --
     l_cod_ramo := trn_k_global.devuelve('cod_ramo');
     -- I 4.94  Alteracao da descricao das coberturas
     --ea_k_g2009016_vcr.p_lee_2(p_cod_cia     => p_cod_cia  ,
     --                          p_cod_ramo    => l_cod_ramo ,
     --                          p_nom_columna => p_cod_campo,
     --                          p_cod_valor   => p_cod_valor);

     SELECT val_columna
       INTO l_val_campo
       FROM g2009017_vcr
       WHERE cod_cia     = p_cod_cia
         AND cod_ramo    = l_cod_ramo
         AND nom_columna = p_cod_campo
         AND cod_valor   = p_cod_valor;
     --
     --l_val_campo := ea_k_g2009016_vcr.f_val_columna;
     --F 4.94  Alteracao da descricao das coberturas

     --
     mx('l_val_campo', l_val_campo);
     --
     mx('F', 'fp_valores_lista');
     --
     RETURN l_val_campo;
     --
   EXCEPTION WHEN OTHERS
   THEN
     --
     l_val_campo := p_val_campo;
     --
     mx('l_val_campo', l_val_campo);
     --
     mx('F', 'EXCEPTION - fp_valores_lista');
     --
     RETURN l_val_campo;
     --
   END fp_valores_lista;
   --
   /* --------------------------------------------------------
   || fp_devuelve_c :
   ||
   || Llama a trn_k_global.devuelve
   */ --------------------------------------------------------
   --
   FUNCTION fp_devuelve_c(p_nom_global VARCHAR2)
            RETURN VARCHAR2 IS
   BEGIN
      --
      RETURN NVL(trn_k_global.ref_f_global (p_nom_global),
                 trn_k_global.devuelve(p_nom_global));
      --
   END fp_devuelve_c;
   --
   /* --------------------------------------------------------
   || fp_devuelve_n :
   ||
   || Llama a trn_k_global.devuelve
   */ --------------------------------------------------------
   --
   FUNCTION fp_devuelve_n(p_nom_global VARCHAR2)
            RETURN NUMBER IS
   BEGIN
      --
      RETURN TO_NUMBER(trn_k_global.devuelve(p_nom_global));
      --
   END fp_devuelve_n;
   --
   /* --------------------------------------------------------
   || fp_devuelve_f :
   ||
   || Llama a trn_k_global.devuelve
   */ --------------------------------------------------------
   --
   FUNCTION fp_devuelve_f(p_nom_global VARCHAR2)
            RETURN DATE IS
   BEGIN
      --
      RETURN TO_DATE(trn_k_global.devuelve(p_nom_global),trn_k_g0000000.f_formato_fecha_sin_separador);
      --
   END fp_devuelve_f;
   --
   /* --------------------------------------------------------
   || fp_ref_devuelve_c :
   ||
   || Llama a trn_k_global.ref_f_global
   */ --------------------------------------------------------
   --
   FUNCTION fp_ref_devuelve_c(p_nom_global VARCHAR2)
            RETURN VARCHAR2 IS
   BEGIN
      --
      RETURN trn_k_global.ref_f_global(p_nom_global);
      --
   END fp_ref_devuelve_c;
   --
   /* --------------------------------------------------------
   || fp_ref_devuelve_n :
   ||
   || Llama a trn_k_global.ref_f_global
   */ --------------------------------------------------------
   --
   FUNCTION fp_ref_devuelve_n(p_nom_global VARCHAR2)
            RETURN VARCHAR2 IS
   BEGIN
      --
      RETURN TO_NUMBER(trn_k_global.ref_f_global(p_nom_global));
      --
   END fp_ref_devuelve_n;
   --
   /* --------------------------------------------------------
   || fp_devuelve_cod_servicio : Retorna el codigo de servicio
   || segun el tipo de movimiento batch usado principalmente para procesar paso
   || Tipo de Servicio D - Detalle, C-Consulta, P - Procesar Passo 20200723 jwolff
   */ --------------------------------------------------------
   --
   FUNCTION fp_devuelve_cod_servicio(p_tip_servicio         IN VARCHAR2                           ,
                                     p_tip_mvto_batch       IN a2000500.tip_mvto_batch       %TYPE,
                                     p_num_cotizacion_grupo IN c2009030_vcr.num_poliza_grupo %TYPE,
                                     p_mca_poliza_grupo     IN VARCHAR2                           )--jwolff)
      RETURN g9999991.cod_servicio%TYPE
   IS
   --
      l_cod_servico      g9999991.cod_servicio%TYPE;
      l_mca_poliza_grupo VARCHAR2(1); -- jwolff
   --
   BEGIN
      --
      IF p_tip_servicio = 'C' -- Consulta
      THEN
         --
         IF p_tip_mvto_batch = g_k_tip_mvto_batch_cotacao
         THEN
            --
            l_cod_servico  := g_k_cod_srv_consulta_cotacao;
            --
         END IF;
         --
         IF p_tip_mvto_batch = g_k_tip_mvto_batch_endosso THEN
            --
            l_cod_servico  := g_k_cod_srv_consulta_apolice;
            --
         END IF;
         --
      ELSIF p_tip_servicio = 'D' -- Detalle
      THEN
         --
         IF p_tip_mvto_batch = g_k_tip_mvto_batch_cotacao THEN
            --
            l_cod_servico  := g_k_cod_srv_cons_det_cotacao;
            --
         END IF;
         --
         IF p_tip_mvto_batch = g_k_tip_mvto_batch_endosso THEN
            --
            l_cod_servico  := g_k_cod_srv_cons_det_apolice;
            --
         END IF;
         --
      ELSIF    p_tip_servicio         = 'P' -- Processar Passo
                      AND p_tip_mvto_batch       IN (g_k_tip_mvto_batch_cotacao,
                                          g_k_tip_mvto_batch_endosso) --jwolff
           AND (   p_num_cotizacion_grupo          IS NOT NULL -- jwolff
                OR NVL(p_mca_poliza_grupo, trn.NO) = trn.SI) -- jwolff
      THEN
         --
         l_cod_servico := g_k_cod_srv_flotas;
         --
      END IF;
      --
      RETURN l_cod_servico;
      --
   END fp_devuelve_cod_servicio;
   --
   --
   /* --------------------------------------------------------
   || fp_ref_devuelve_n :
   ||
   || Llama a trn_k_global.ref_f_global
   */ --------------------------------------------------------
   --
   FUNCTION fp_ref_devuelve_f(p_nom_global VARCHAR2)
            RETURN DATE IS
   BEGIN
      --
      RETURN TO_DATE(trn_k_global.ref_f_global(p_nom_global),trn_k_g0000000.f_formato_fecha_sin_separador);
      --
   END fp_ref_devuelve_f;
   --
   /* -----------------------------------------
   || pp_inicializa_variables                 :
   */ -----------------------------------------
   --
   PROCEDURE pp_inicializa_variables
   IS
   --
   BEGIN
      --
      mx('I', 'pp_inicializa_variables');
      --
      g_cod_cia            := fp_ref_devuelve_n('cod_cia');
      g_cod_ramo           := fp_ref_devuelve_n('cod_ramo');
      g_cod_agt            := fp_ref_devuelve_n('cod_agt');
      g_num_poliza         := fp_ref_devuelve_c('num_poliza');
      g_num_presupuesto    := fp_ref_devuelve_c('num_presupuesto');
      g_num_cotizacion     := fp_ref_devuelve_c('num_cotizacion');
      g_num_poliza_grupo   := fp_ref_devuelve_n('num_poliza_grupo');
      g_num_contrato       := fp_ref_devuelve_n('num_contrato');
      g_num_subcontrato    := fp_ref_devuelve_n('num_subcontrato');
      g_num_poliza_cliente := fp_ref_devuelve_n('num_poliza_cliente');
      g_cod_nivel1         := fp_ref_devuelve_n('cod_nivel1');
      g_cod_nivel2         := fp_ref_devuelve_n('cod_nivel2');
      g_cod_nivel3         := fp_ref_devuelve_n('cod_nivel3');
      g_cod_canal1         := fp_ref_devuelve_c('cod_canal1');
      g_cod_canal2         := fp_ref_devuelve_c('cod_canal2');
      g_cod_canal3         := fp_ref_devuelve_c('cod_canal3');
      g_fec_validez        := fp_ref_devuelve_f('fec_validez');
      g_num_simulacion     := NVL(fp_ref_devuelve_n('num_simulacion')
                                 ,trn.UNO);
      g_num_spto           := NVL(fp_ref_devuelve_n('num_spto')
                                 ,trn.CERO);
      g_num_apli           := NVL(fp_ref_devuelve_n('num_apli')
                                 ,trn.CERO);
      g_num_spto_apli      := NVL(fp_ref_devuelve_n('num_spto_apli')
                                 ,trn.CERO);
      g_num_riesgo         := NVL(fp_ref_devuelve_n('num_riesgo')
                                 ,trn.UNO);
      g_num_periodo        := NVL(fp_ref_devuelve_n('num_periodo')
                                 ,trn.UNO);
      g_fec_efec_spto      := fp_ref_devuelve_f('fec_efec_spto');
      g_fec_vcto_spto      := fp_ref_devuelve_f('fec_vcto_spto');
      g_cod_usr            := NVL(trn_k_global.cod_usr
                                 ,fp_ref_devuelve_c('cod_usr'));
      g_tip_mvto_batch     := fp_ref_devuelve_c('tip_mvto_batch');
      --
      g_cod_modalidad      := ea_k_231_utils.f_valor_dv('cod_modalidad');
      g_tip_segmento       := ea_k_231_utils.f_valor_dv('tip_segmento');
      g_cod_tarifa         := ea_k_231_utils.f_valor_dv('cod_tarifa');
      g_tip_produto        := ea_k_231_utils.f_valor_dv('tip_produto');
      g_cod_cob            := fp_ref_devuelve_n('cod_cob');
      --
      g_fec_validez_tarifa := TO_DATE(ea_k_231_utils.f_valor_dv('fec_validez_tarifa')
                                     ,trn.FORMATO_FECHA);
      --
      IF g_num_presupuesto IS NULL
      THEN
        --
        BEGIN
          --
          em_k_a2000500.p_lee2(p_cod_cia    => g_cod_cia
                              ,p_num_poliza => g_num_cotizacion);
          --
          g_num_presupuesto := em_k_a2000500.f_num_poliza_definitivo;
          --
          pp_asigna('NUM_PRESUPUESTO'
                   ,g_num_presupuesto);
          --
        EXCEPTION
          WHEN OTHERS
          THEN
            --
            g_num_presupuesto := trn.NULO;
            --
        END;
        --
      END IF;
      --
      IF g_num_poliza IS NULL
      THEN
        --
        BEGIN
          --
          em_k_a2000500.p_lee2(p_cod_cia    => g_cod_cia
                              ,p_num_poliza => g_num_presupuesto);
          --
          g_num_poliza := em_k_a2000500.f_num_poliza_definitivo;
          --
          pp_asigna('NUM_POLIZA'
                   ,g_num_poliza);
          --
        EXCEPTION
          WHEN OTHERS
          THEN
            --
            g_num_poliza := trn.NULO;
            --
        END;
        --
      END IF;
      --
      mx('-', 'g_cod_cia:         ' || g_cod_cia         );
      mx('-', 'g_cod_ramo:        ' || g_cod_ramo        );
      mx('-', 'g_num_poliza:      ' || g_num_poliza      );
      mx('-', 'g_num_presupuesto: ' || g_num_presupuesto );
      mx('-', 'g_num_cotizacion:  ' || g_num_cotizacion  );
      mx('-', 'g_num_simulacion:  ' || g_num_simulacion  );
      mx('-', 'g_num_spto:        ' || g_num_spto        );
      mx('-', 'g_num_apli:        ' || g_num_apli        );
      mx('-', 'g_num_spto_apli:   ' || g_num_spto_apli   );
      mx('-', 'g_num_riesgo:      ' || g_num_riesgo      );
      mx('-', 'g_num_periodo:     ' || g_num_periodo     );
      mx('-', 'g_tip_mvto_batch:  ' || g_tip_mvto_batch  ); --v1.88
      --
      mx('F', 'pp_inicializa_variables');
      --
   END pp_inicializa_variables;
   --
   /* -----------------------------------------
   || pp_borra_tablas_simulacion               :
   */ -----------------------------------------
   --
   PROCEDURE pp_borra_tablas_simulacion IS
     --
   BEGIN
     --
     mx('I', 'pp_borra_tablas_simulacion');
     --
     DELETE c2009040_vcr
      WHERE cod_cia        = g_cod_cia
        AND cod_ramo       = g_cod_ramo
        AND num_cotizacion = g_num_cotizacion
        AND num_simulacion = g_num_simulacion;
     --
     DELETE c2109170_vcr
      WHERE cod_cia        = g_cod_cia
        AND cod_ramo       = g_cod_ramo
        AND num_cotizacion = g_num_cotizacion
        AND num_simulacion = g_num_simulacion;
     --
     mx('F', 'pp_borra_tablas_simulacion');
     --
   END pp_borra_tablas_simulacion;
   --
   /* -----------------------------------------------------
   || pp_borra_tablas_cotiza_cuotas :
   ||
   || Borra las tablas utilizadas en la cotizacion (cuotas)
   */ -----------------------------------------------------
   --
   PROCEDURE pp_borra_tablas_cotiza_cuotas IS
   BEGIN
    --
    mx('I','pp_borra_tablas_cotiza_cuotas');
    --
    DELETE FROM c2000161
     WHERE cod_cia        = g_cod_cia
       AND cod_ramo       = g_cod_ramo
       AND num_cotizacion = g_num_cotizacion;
    --
    DELETE FROM c2990700
     WHERE cod_cia        = g_cod_cia
       AND cod_ramo       = g_cod_ramo
       AND num_cotizacion = g_num_cotizacion;
    --
    mx('F','pp_borra_tablas_cotiza_cuotas');
    --
   END pp_borra_tablas_cotiza_cuotas;
   --
   /* --------------------------------------------------------
   || pp_borra_tablas_cotizacion :
   */ --------------------------------------------------------
   --
   PROCEDURE pp_borra_tablas_cotizacion(p_cod_cia          IN  G9999992.cod_cia%TYPE,
                                        p_cod_ramo         IN  G9999992.cod_ramo%TYPE,
                                        p_cod_tarifa       IN  G9999992.cod_tarifa%TYPE,
                                        p_cod_agt          IN  G9999992.cod_agt%TYPE,
                                        p_num_cotizacion   IN  C2009030_vcr.num_cotizacion%TYPE,
                                        p_num_simulacion   IN  c2990700.num_simulacion%TYPE,
                                        p_num_poliza_grupo IN  A2000500.num_poliza_grupo%TYPE,
                                        p_num_contrato     IN  A2000500.num_contrato%TYPE,
                                        p_num_subcontrato  IN  A2000500.num_contrato%TYPE,
                                        p_num_paso         IN  G9999992.num_paso%TYPE,
                                        p_tip_mvto_batch   IN  A2000500.tip_mvto_batch%TYPE)
   IS
     --
     PROCEDURE pi_asigna_variables
     IS
     --
     BEGIN
       --
       pp_asigna('COD_CIA'         , NVL(p_cod_cia, trn_k_global.cod_cia));
       pp_asigna('COD_RAMO'        , NVL(p_cod_ramo, ea_k_231_utils.g_k_ramo_motor));
       pp_asigna('COD_TARIFA'      , p_cod_tarifa);
       pp_asigna('COD_AGT'         , p_cod_agt);
       pp_asigna('NUM_COTIZACION'  , p_num_cotizacion);
       pp_asigna('NUM_SIMULACION'  , p_num_simulacion);
       pp_asigna('NUM_POLIZA_GRUPO', p_num_poliza_grupo);
       pp_asigna('NUM_CONTRATO'    , p_num_contrato);
       pp_asigna('NUM_SUBCONTRATO' , p_num_subcontrato);
       pp_asigna('NUM_PASO'        , p_num_paso);
       pp_asigna('TIP_MVTO_BATCH'  , p_tip_mvto_batch);
       pp_asigna('COD_IDIOMA'      , NVL(fp_ref_devuelve_c('COD_IDIOMA'), g_k_cod_idioma));
       pp_asigna('COD_INSTALACION' , NVL(fp_ref_devuelve_c('COD_INSTALACION'), g_k_cod_instalacion));
       pp_asigna('COD_USR'         , NVL(fp_ref_devuelve_c('COD_USR'), g_cod_usr_automatico));
       --
     END pi_asigna_variables;
     --
   BEGIN
     --
     mx('I', 'pp_borra_tablas_cotizacion');
     --
     pi_asigna_variables;
     --
     pp_inicializa_variables;
     --
     ea_k_231_cob.p_limpia_tmv;
     --
     em_p_borra_transitorias(g_cod_cia       ,
                             g_num_cotizacion);
     --
     pp_borra_tablas_cotiza_cuotas;
     --
     pp_borra_tablas_simulacion;
     --
     mx('F', 'pp_borra_tablas_cotizacion');
     --
   END pp_borra_tablas_cotizacion;
   --
   /* --------------------------------------------------------
   || p_borra_tablas_cotizacion :
   */ --------------------------------------------------------
   --
   PROCEDURE p_borra_tablas_cotizacion (p_cod_cia          IN G9999992.cod_cia           %TYPE,
                                        p_cod_ramo         IN G9999992.cod_ramo          %TYPE,
                                        p_cod_tarifa       IN G9999992.cod_tarifa        %TYPE,
                                        p_cod_agt          IN G9999992.cod_agt           %TYPE,
                                        p_num_cotizacion   IN C2009030_vcr.num_cotizacion%TYPE,
                                        p_num_simulacion   IN c2990700.num_simulacion    %TYPE,
                                        p_num_poliza_grupo IN A2000500.num_poliza_grupo  %TYPE,
                                        p_num_contrato     IN A2000500.num_contrato      %TYPE,
                                        p_num_subcontrato  IN A2000500.num_contrato      %TYPE,
                                        p_num_paso         IN G9999992.num_paso          %TYPE,
                                        p_tip_mvto_batch   IN A2000500.tip_mvto_batch    %TYPE) IS
     --
   BEGIN
     --
     mx('I', 'p_borra_tablas_cotizacion');
     --
     pp_borra_tablas_cotizacion (p_cod_cia          => p_cod_cia         ,
                                 p_cod_ramo         => p_cod_ramo        ,
                                 p_cod_tarifa       => p_cod_tarifa      ,
                                 p_cod_agt          => p_cod_agt         ,
                                 p_num_cotizacion   => p_num_cotizacion  ,
                                 p_num_simulacion   => p_num_simulacion  ,
                                 p_num_poliza_grupo => p_num_poliza_grupo,
                                 p_num_contrato     => p_num_contrato    ,
                                 p_num_subcontrato  => p_num_subcontrato ,
                                 p_num_paso         => p_num_paso        ,
                                 p_tip_mvto_batch   => p_tip_mvto_batch  );
     --
     mx('F', 'p_borra_tablas_cotizacion');
     --
   END p_borra_tablas_cotizacion;
   --
   /* --------------------------------------------------------
   || fp_valida_controle_passo :
   */ --------------------------------------------------------
   --
   FUNCTION fp_valida_controle_passo(p_cod_cia          IN  G9999992.cod_cia%TYPE,
                                     p_cod_ramo         IN  G9999992.cod_ramo%TYPE,
                                     p_cod_tarifa       IN  G9999992.cod_tarifa%TYPE,
                                     p_cod_agt          IN  G9999992.cod_agt%TYPE,
                                     p_num_cotizacion   IN  C2009030_vcr.num_cotizacion%TYPE,
                                     p_num_simulacion   IN  c2990700.num_simulacion%TYPE,
                                     p_num_poliza_grupo IN  A2000500.num_poliza_grupo%TYPE,
                                     p_num_contrato     IN  A2000500.num_contrato%TYPE,
                                     p_num_subcontrato  IN  A2000500.num_contrato%TYPE,
                                     p_num_paso         IN  G9999992.num_paso%TYPE,
                                     p_tip_mvto_batch   IN  A2000500.tip_mvto_batch%TYPE)
   RETURN BOOLEAN
   IS
     --
     PROCEDURE pi_inicializa_variables
     IS
     --
     l_cod_tarifa c2000000.val_columna%TYPE;
     --
     BEGIN
       --
       mx('I', 'pi_inicializa_variables');
       --
       g_err_msg := TYPTAB_MSG_WS(); -- 4.99
       --
       pp_asigna('COD_CIA'         , p_cod_cia);
       pp_asigna('COD_RAMO'        , p_cod_ramo);
       pp_asigna('COD_AGT'         , p_cod_agt);
       pp_asigna('NUM_COTIZACION'  , p_num_cotizacion);
       pp_asigna('NUM_POLIZA_GRUPO', p_num_poliza_grupo);
       pp_asigna('NUM_CONTRATO'    , p_num_contrato);
       pp_asigna('NUM_SUBCONTRATO' , p_num_subcontrato);
       pp_asigna('NUM_PASO'        , p_num_paso);
       pp_asigna('NUM_SIMULACION'  , NVL(p_num_simulacion, trn.UNO));
       pp_asigna('TIP_MVTO_BATCH'  , p_tip_mvto_batch);
       pp_asigna('NUM_POLIZA'      , NVL(fp_ref_devuelve_c('NUM_POLIZA') ,em.NUM_POLIZA_GEN));
       pp_asigna('FEC_VALIDEZ'     , g_fec_tratamiento);
       --
       l_cod_tarifa := p_cod_tarifa;
       --
       IF l_cod_tarifa IS NULL
       THEN
         --
         ea_k_231_utils.p_devuelve_dato_cotizacion(p_nom_tabla   => 'G2000000'
                                                  ,p_nom_columna => 'COD_TARIFA' || g_k_prefixo_simulacion || NVL(p_num_simulacion, trn.UNO)
                                                  ,p_val_campo   => l_cod_tarifa);

         --
       END IF;
       --
       pp_asigna('COD_TARIFA'      , l_cod_tarifa);
       --
       mx('p_cod_cia'          , p_cod_cia);
       mx('p_cod_ramo'         , p_cod_ramo);
       mx('p_cod_agt'          , p_cod_agt);
       mx('pi_num_cotizacion'  , p_num_cotizacion);
       mx('p_num_poliza_grupo' , p_num_poliza_grupo);
       mx('p_num_contrato'     , p_num_contrato);
       mx('p_num_subcontrato'  , p_num_subcontrato);
       mx('p_num_paso'         , p_num_paso);
       mx('pi_num_simulacion'  , p_num_simulacion);
       mx('pi_tip_mvto_batch'  , p_tip_mvto_batch);
       mx('l_cod_tarifa'       , l_cod_tarifa);
       --
       mx('F', 'pi_inicializa_variables');
       --
     END pi_inicializa_variables;
     --
     FUNCTION fi_valida_passo_atual RETURN BOOLEAN
     IS
     --
     l_num_paso g9999994.num_paso%TYPE;
     --
     BEGIN
       --
       mx('I', 'fi_valida_passo_atual');
       --
       ea_k_231_utils.p_devuelve_dato_cotizacion(p_nom_tabla   => 'G9999994'
                                                ,p_nom_columna => 'NUM_PASO_ATUAL'
                                                ,p_val_campo   => l_num_paso);
       --
       IF l_num_paso                      < ea_k_231_utils.f_recupera_constante(p_cod_cia   => trn_k_global.cod_cia
                                                                               ,p_cod_campo => 'NUM_PASO_COTIZACION') AND
          ea_k_231_utils.g_k_cotiza_batch = fp_ref_devuelve_n('TIP_MVTO_BATCH')
       THEN
         --
         mx('F', 'fi_valida_passo_atual - FALSE');
         --
         RETURN FALSE;
         --
       ELSE
         --
         mx('F', 'fi_valida_passo_atual - TRUE');
         --
         RETURN TRUE;
         --
       END IF;
       --
     EXCEPTION
       WHEN OTHERS
       THEN
         --
         mx('F', 'fi_valida_passo_atual - Exception');
         --
     END fi_valida_passo_atual;
     --
     FUNCTION fi_valida_recusa_flex RETURN BOOLEAN
     IS
     --
     BEGIN
       --
       mx('I', 'fi_valida_recusa_flex');
       --
       p_ws_recusa_flexivel;
       --
       IF g_hay_recusa_flexible = trn.SI -- utiliza g
       THEN
         --
         mx('F', 'fi_valida_recusa_flex - FALSE');
         --
         RETURN FALSE;
         --
       ELSE
         --
         mx('F', 'fi_valida_recusa_flex - TRUE');
         --
         RETURN TRUE;
         --
       END IF;
       --
     EXCEPTION
       --
       WHEN OTHERS
       THEN
         --
         mx('F', 'fi_valida_recusa_flex - Exception');
         --
         RETURN TRUE;
         --
     END fi_valida_recusa_flex;
     --
   BEGIN
     --
     mx('I', 'fp_valida_controle_passo');
     --
     pi_inicializa_variables;
     --
     IF fi_valida_passo_atual AND
        fi_valida_recusa_flex
     THEN
       --
       mx('F', 'fp_valida_controle_passo - TRUE');
       --
       RETURN TRUE;
       --
     ELSE
       --
       mx('F', 'fp_valida_controle_passo - FALSE');
       --
       RETURN FALSE;
       --
     END IF;
     --
   EXCEPTION
     WHEN OTHERS
     THEN
       --
       mx('F', 'fp_valida_controle_passo - Exception');
       --
       RETURN FALSE;
       --
   END fp_valida_controle_passo;
   --
   /* ------------------------------------------------------
   || Resgata a modalidade dos dados da cotacao
   */ ------------------------------------------------------
   --
   PROCEDURE pp_resgata_modalidad
   IS
      l_cod_cia            g2109140_vcr.cod_cia            %TYPE;
      l_cod_agt            g2109140_vcr.cod_agt            %TYPE;
      l_cod_ramo           g2109140_vcr.cod_ramo           %TYPE;
      l_cod_nivel1         g2109140_vcr.cod_nivel1         %TYPE;
      l_cod_nivel2         g2109140_vcr.cod_nivel2         %TYPE;
      l_cod_nivel3         g2109140_vcr.cod_nivel3         %TYPE;
      l_cod_canal1         g2109140_vcr.cod_canal1         %TYPE;
      l_cod_canal2         g2109140_vcr.cod_canal2         %TYPE;
      l_cod_canal3         g2109140_vcr.cod_canal3         %TYPE;
      l_num_poliza_grupo   g2109140_vcr.num_poliza_grupo   %TYPE;
      l_num_contrato       g2109140_vcr.num_contrato       %TYPE;
      l_num_subcontrato    g2109140_vcr.num_subcontrato    %TYPE;
      l_num_poliza_cliente g2109140_vcr.num_poliza_cliente %TYPE;
      l_num_poliza         g2109140_vcr.num_poliza         %TYPE;
      l_tip_segmento       g2109140_vcr.tip_segmento       %TYPE;
      l_tip_produto        g2109140_vcr.tip_produto        %TYPE;
      l_cod_tarifa         g2109140_vcr.cod_tarifa         %TYPE;
      l_cod_modalidad      g2109140_vcr.cod_modalidad      %TYPE;
      l_fec_validez_tarifa g2109140_vcr.fec_validez        %TYPE;
   BEGIN
      --
      mx('I', 'pp_resgata_modalidad');
      --
      ea_k_231_utils.p_devuelve_dato_cotizacion(ea_k_231_utils.g_k_tabla_dv,
                                                'TIP_PRODUTO'              ,
                                                l_tip_produto              );
      --
      IF  l_tip_produto IS NOT NULL
      THEN
         --
         l_cod_cia             := fp_ref_devuelve_n('cod_cia');
         l_cod_ramo            := fp_ref_devuelve_n('cod_ramo');
         --
         ea_k_231_utils.p_devuelve_dato_cotizacion(ea_k_231_utils.g_k_tabla_dv,
                                                   'TIP_SEGMENTO'             ,
                                                   l_tip_segmento             );
         --
         IF l_tip_segmento IS NULL
         THEN
            --
            l_tip_segmento := ea_k_231_utils.f_valor_dv('TIP_SEGMENTO');
            --
         END IF;
         --
         l_cod_nivel1          := fp_ref_devuelve_n('cod_nivel1');
         l_cod_nivel2          := fp_ref_devuelve_n('cod_nivel2');
         l_cod_nivel3          := fp_ref_devuelve_n('cod_nivel3');
         l_cod_canal1          := fp_ref_devuelve_c('cod_canal1');
         l_cod_canal2          := fp_ref_devuelve_c('cod_canal2');
         l_cod_canal3          := fp_ref_devuelve_c('cod_canal3');
         l_cod_agt             := fp_ref_devuelve_n('cod_agt');
         l_num_poliza_grupo    := fp_ref_devuelve_c('num_poliza_grupo');
         l_num_contrato        := fp_ref_devuelve_n('num_contrato');
         l_num_subcontrato     := fp_ref_devuelve_n('num_subcontrato');
         l_num_poliza_cliente  := fp_ref_devuelve_c('num_poliza_cliente');
         l_num_poliza          := fp_ref_devuelve_c('num_poliza');
         l_fec_validez_tarifa  := fp_ref_devuelve_f(em.PREFIJO_DATOS_VARIABLES||'fec_validez_tarifa');
         --
         mx('l_cod_cia             ',l_cod_cia             );
         mx('l_cod_ramo            ',l_cod_ramo            );
         mx('l_cod_nivel1          ',l_cod_nivel1          );
         mx('l_cod_nivel2          ',l_cod_nivel2          );
         mx('l_cod_nivel3          ',l_cod_nivel3          );
         mx('l_cod_canal1          ',l_cod_canal1          );
         mx('l_cod_canal2          ',l_cod_canal2          );
         mx('l_cod_canal3          ',l_cod_canal3          );
         mx('l_cod_agt             ',l_cod_agt             );
         mx('l_num_poliza_grupo    ',l_num_poliza_grupo    );
         mx('l_num_contrato        ',l_num_contrato        );
         mx('l_num_subcontrato     ',l_num_subcontrato     );
         mx('l_num_poliza_cliente  ',l_num_poliza_cliente  );
         mx('l_num_poliza          ',l_num_poliza          );
         mx('l_tip_segmento        ',l_tip_segmento        );
         mx('l_fec_validez_tarifa  ',l_fec_validez_tarifa  );
         mx('l_tip_produto         ',l_tip_produto         );
         --
         ea_k_g2109140.p_lee(l_cod_cia            ,
                             l_cod_ramo           ,
                             l_cod_agt            ,
                             l_cod_nivel1         ,
                             l_cod_nivel2         ,
                             l_cod_nivel3         ,
                             l_cod_canal1         ,
                             l_cod_canal2         ,
                             l_cod_canal3         ,
                             l_num_poliza_grupo   ,
                             l_num_contrato       ,
                             l_num_subcontrato    ,
                             l_num_poliza_cliente ,
                             l_num_poliza         ,
                             l_tip_segmento       ,
                             l_tip_produto        ,
                             NULL                 , -- cod_tarifa
                             NULL                 , -- cod_modalidad
                             NULL                 , -- val_clave_formula
                             l_fec_validez_tarifa );
         --
         l_cod_tarifa    := ea_k_g2109140.f_cod_tarifa   ;
         l_cod_modalidad := ea_k_g2109140.f_cod_modalidad;
         --
         mx('-', 'l_cod_tarifa   : '||l_cod_tarifa   );
         mx('-', 'l_cod_modalidad: '||l_cod_modalidad);
         --
         pp_asigna(em.PREFIJO_DATOS_VARIABLES||'tip_produto'  , l_tip_produto  );
         pp_asigna(em.PREFIJO_DATOS_VARIABLES||'cod_modalidad', l_cod_modalidad);
         pp_asigna(em.PREFIJO_DATOS_VARIABLES||'cod_tarifa'   , l_cod_tarifa   );
         pp_asigna('tip_produto'  , l_tip_produto  );
         pp_asigna('cod_modalidad', l_cod_modalidad);
         pp_asigna('cod_tarifa'   , l_cod_tarifa   );
         --
      END IF;
      --
      mx('F', 'pp_resgata_modalidad');
      --
   EXCEPTION
      WHEN OTHERS
      THEN
         --
         g_cod_mensaje    := g_k_cod_error_gen;
         g_anx_mensaje    := SQLERRM;
         --
         mx('F', 'pp_resgata_modalidad - EXCEPTION');
         --
         pp_devuelve_error;
         --
   END pp_resgata_modalidad;
   --
   /* --------------------------------------------------------
   || pp_busca_campos_retorno :
   */ --------------------------------------------------------
   --
   PROCEDURE pp_busca_campos_retorno(l_campos_retorno OUT ref_cursor)
   IS
   --
   BEGIN
     --
     mx('I','pp_busca_campos_retorno');
     --
     pp_inicializa_variables;
     --i 1.46
     IF g_cod_tarifa is null THEN
        pp_resgata_modalidad;
        --
        g_cod_tarifa := ea_k_231_utils.f_valor_dv('cod_tarifa');
     END IF;
     --f 1.46
     --
     mx('-','g_num_cotizacion: ' || g_num_cotizacion);
     mx('-','g_tip_mvto_batch: ' || g_tip_mvto_batch);
     --
     IF g_tip_mvto_batch = g_k_tip_mvto_batch_cotacao THEN
       --
       mx('-','l_campos_retorno');
       --
       IF l_campos_retorno%ISOPEN
       THEN
         --
         mx('-','cursor ja esta aberto');
         --
       END IF;
       --
       OPEN l_campos_retorno FOR
       --
         SELECT 'NUM_COTIZACION'  as codCampo,
                g_num_cotizacion  as valCampo
         FROM dual
         UNION
         SELECT c.nom_columna  AS codCampo,
                c.val_columna  AS valCampo
           FROM g9999992 g,
                c2000000 c
          WHERE c.cod_cia        = g.cod_cia
            AND c.cod_ramo       = g.cod_ramo
            AND c.nom_columna    = g.cod_campo
            AND c.num_cotizacion IN (g_num_cotizacion, g_num_cotizacion_grupo)
            AND g.cod_cia        = g_cod_cia
            AND g.cod_ramo       = g_cod_ramo
            AND g.tip_mvto_batch = g_tip_mvto_batch
            AND g.cod_agt        IN ( g_cod_agt, em.cod_agt_gen, g_k_cod_agt_generico ) -- /*v2.09*/
            AND g.num_paso       = g_num_paso
            AND g.cod_tarifa     IN ( g_cod_tarifa, em.cod_tarifa_gen )
            AND g.cod_tar        = g_k_cod_tar_campo_saida
            AND g.mca_inh        = trn.NO;
       --
     ELSIF g_tip_mvto_batch = g_k_tip_mvto_batch_endosso
     THEN
       --
          OPEN l_campos_retorno FOR
        SELECT 'NUM_PROPUESTA' as codCampo, g_num_propuesta as valCampo
          FROM dual
        UNION
        SELECT c.cod_campo AS codCampo, c.val_campo AS valCampo
          FROM g9999992 g, a2000560 c
         WHERE c.cod_cia = g.cod_cia
           AND c.cod_campo = g.cod_campo
           AND c.num_propuesta = g_num_poliza
           AND g.cod_cia = g_cod_cia
           AND g.cod_ramo = g_cod_ramo
           AND g.tip_mvto_batch = g_tip_mvto_batch
           AND g.cod_agt IN
               (g_cod_agt, em.cod_agt_gen, g_k_cod_agt_generico)
           AND g.num_paso = g_num_paso
           AND g.cod_tarifa IN (g_cod_tarifa, em.cod_tarifa_gen)
           AND g.cod_tar = g_k_cod_tar_campo_saida
           AND g.mca_inh = trn.NO;
       --
     END IF;
     --
     mx('F','pp_busca_campos_retorno');
     --
   END pp_busca_campos_retorno;
   --
   -- I v 2.15
   /*-------------------------------------------------
   ||  fp_recupera_config_g1010031
   ||  Recupera valor da tabela de parametro g1010031.
   */ -------------------------------------------------
   --
   FUNCTION fp_recupera_config_G1010031(p_cod_campo    g1010031.cod_campo     %TYPE,
                                        p_cod_ramo     c2000000.cod_ramo      %TYPE,
                                        p_cod_idioma   g1010031.cod_idioma    %TYPE,
                                        p_cod_valor    g1010031.cod_valor     %TYPE)
      RETURN g1010031.nom_valor%TYPE
   IS
   --
      l_nom_valor g1010031.nom_valor%TYPE;
   --
   BEGIN
      --
      mx('I','fp_recupera_config_G1010031');
      --
      trn_k_global.p_asigna('cod_idioma',p_cod_idioma); -- v5.57
      --
      dc_k_g1010031_vcr.p_lee( p_cod_campo    => p_cod_campo    ,
                               p_cod_ramo     => p_cod_ramo     ,
                               p_cod_idioma   => p_cod_idioma   ,
                               p_cod_valor    => p_cod_valor    );
      --
      l_nom_valor := dc_k_g1010031_vcr.f_nom_valor;
      --
      mx('F','fp_recupera_config_G1010031');
      --
      RETURN l_nom_valor;
      --
   END fp_recupera_config_G1010031;
   -- F v 2.15

   /* ------------------------------------------------------
   || funcao de transformacao de texto para xml
   */ ------------------------------------------------------
   --
   FUNCTION fp_transforma_xml (p_xml CLOB)
      RETURN DBMS_XMLDOM.DOMDOCUMENT
   IS
      --
      l_parser DBMS_XMLPARSER.PARSER;
      l_my_doc DBMS_XMLDOM.DOMDOCUMENT;
      --
   BEGIN
      --
      mx('I', 'fp_transforma_xml');
      --
      l_parser := dbms_xmlparser.newParser;
      --
      dbms_xmlparser.parseClob(l_parser, REPLACE(p_xml,'&', ';'));
      --
      l_my_doc := dbms_xmlparser.getDocument(l_parser);
      --
      dbms_xmlparser.freeParser(l_parser);
      --
      mx('F', 'fp_transforma_xml');
      --
      RETURN l_my_doc;
      --
   END fp_transforma_xml;
   --
   /* ------------------------------------------------------
   || funcao de recuperacao de valor a partir de COD_CAMPO
   */ ------------------------------------------------------
   --
   FUNCTION fp_recupera_valor (p_xml       CLOB,
                               p_cod_campo a2000020.cod_campo %TYPE)
      RETURN VARCHAR2 --v 4.70
      --RETURN a2000020.val_campo%TYPE
   IS
      --
      l_xmldoc             DBMS_XMLDOM.DOMDOCUMENT;
      l_node_list          DBMS_XMLDOM.DOMNODELIST;
      l_node               DBMS_XMLDOM.DOMNODE;
      --
      l_val_cod_campo      c2000000.nom_columna%TYPE;
      l_cod_campo          c2000000.nom_columna%TYPE;
      l_val_campo          VARCHAR2(30000); --v 4.70
      l_val_campo_retorno  VARCHAR2(30000); --v 4.70
      --l_val_campo          VARCHAR2(2000); -- se amplio por el tema de observaciones > 80 caraceteres --v 4.70
      --l_val_campo_retorno  VARCHAR2(2000); -- se amplio por el tema de observaciones > 80 caraceteres --v 4.70
      l_len                NUMBER;
      --
   BEGIN
      --
      mx('I', 'fp_recupera_valor');
      --
      l_cod_campo   := NULL;
      l_val_campo   := NULL;
      --
      IF p_xml IS NOT NULL THEN
        --
        l_xmldoc      := fp_transforma_xml (p_xml);
        --
        l_node_list   := DBMS_XMLDOM.getElementsByTagName(l_xmldoc, trn.ASTERISCO);
        l_len         := DBMS_XMLDOM.getLength(l_node_list);
        --
        FOR i IN trn.CERO .. l_len - trn.UNO LOOP
           --
           l_node := DBMS_XMLDOM.item(l_node_list, i);
           l_val_cod_campo := DBMS_XMLDOM.getNodeName(l_node);
           --
           IF l_val_cod_campo = g_k_val_campo_codCampo THEN
              --
              l_cod_campo := DBMS_XMLDOM.getNodeValue(DBMS_XMLDOM.getFirstChild(l_node));
              --
           ELSIF l_val_cod_campo = g_k_val_campo_valCampo THEN
              --
              l_val_campo := DBMS_XMLDOM.getNodeValue(DBMS_XMLDOM.getFirstChild(l_node));
              --
           END IF;
           --
           IF l_val_campo IS NOT NULL AND l_cod_campo IS NOT NULL THEN
              --
              IF p_cod_campo = l_cod_campo THEN
                 --
                 l_val_campo_retorno := l_val_campo;
                 --
              END IF;
              --
              l_cod_campo   := NULL;
              l_val_campo   := NULL;
              --
           END IF;
           --
        END LOOP;
        --
      END IF;
      --
      mx('l_val_campo_retorno', l_val_campo_retorno);
      mx('F', 'fp_recupera_valor');
      --
      return l_val_campo_retorno;
      --
   END fp_recupera_valor;
   --
  /* ------------------------------------------------------
  || Funcion fp_recupera_txt_obser, para recuperar la observacion
  || del analista bo
  */ ------------------------------------------------------
  --
  FUNCTION fp_recupera_txt_obser(p_cod_cia        a2992131_vcr.cod_cia %TYPE,
                                 p_cod_ramo       a2992131_vcr.cod_ramo %TYPE,
                                 p_num_cotizacion a2992131_vcr.num_cotacao %TYPE)
    RETURN a2992131_vcr.obs_situ_bo%TYPE IS
    --
    l_obs_situ_bo a2992131_vcr.obs_situ_bo %TYPE;
    --
  BEGIN
    --
    mx('I', 'fp_recupera_txt_obser');
    --
    SELECT l.obs_situ_bo
      INTO l_obs_situ_bo
      FROM a2992131_vcr l
     WHERE l.cod_cia = p_cod_cia
       AND l.cod_ramo = p_cod_ramo
       AND l.num_cotacao = p_num_cotizacion
       AND l.num_spto = 0
       AND l.num_apli = 0
       AND l.num_spto_apli = 0
       AND l.num_mvto_bo =
           (SELECT MAX(m.num_mvto_bo)
              FROM a2992131_vcr m
             WHERE m.cod_cia = p_cod_cia
               AND m.cod_ramo = NVL(p_cod_ramo, m.cod_ramo)
               AND m.num_cotacao = l.num_cotacao)
       AND l.fec_actu_bo =
           (SELECT MAX(m.fec_actu_bo)
              FROM a2992131_vcr m
             WHERE m.cod_cia = p_cod_cia
               AND m.cod_ramo = NVL(p_cod_ramo, m.cod_ramo)
               AND m.num_cotacao = l.num_cotacao);
    --
    RETURN l_obs_situ_bo;
    --
    --
    mx('F', 'fp_recupera_txt_obser');
    --
  EXCEPTION
    WHEN OTHERS THEN
      --
      RETURN NULL;
      --
      --
      mx('F', 'EXCEPTION fp_recupera_txt_obser');
      --
  END fp_recupera_txt_obser;
  --
   /* ------------------------------------------------------
   || funcao de recuperacao de valor a partir de COD_CAMPO
   */ ------------------------------------------------------
   --
   FUNCTION f_recupera_valor  (p_xml       CLOB                    ,
                               p_cod_campo a2000020.cod_campo %TYPE)
      RETURN a2000020.val_campo%TYPE
   IS
   --
   BEGIN
      --
      mx('I','f_recupera_valor');
      mx('F','f_recupera_valor');
      --
      RETURN fp_recupera_valor (p_xml       =>  p_xml      ,
                                p_cod_campo =>  p_cod_campo);
      --
   END f_recupera_valor;
   --
   --
   /* -----------------------------------------
   ||  f_recupera_constante
   ||  Recupera valor de la constante que se indica por parametro.
   */ -----------------------------------------
   --
   FUNCTION f_recupera_constante (p_vrb_nam   df_cmn_nwt_xx_cnn.vrb_nam%TYPE)
      RETURN df_cmn_nwt_xx_cnn.vrb_nam_val%TYPE
   IS
   --
      l_constante     df_cmn_nwt_xx_cnn.vrb_nam_val%TYPE;
   --
   BEGIN
      --
      mx('I','f_recupera_constante');
      --
      trn_k_global.asigna('cod_cia'    ,trn.UNO                   );
      trn_k_global.asigna('cod_ramo'   ,em.COD_RAMO_GEN           );
      trn_k_global.asigna('cod_mon'    ,dc.COD_MON_GEN            );
      trn_k_global.asigna('cod_cob'    ,em.COD_COB_GEN            );
      trn_k_global.asigna('cod_nivel1' ,dc.COD_NIVEL1_GEN         );
      trn_k_global.asigna('cod_nivel2' ,dc.COD_NIVEL2_GEN         );
      trn_k_global.asigna('cod_nivel3' ,dc.COD_NIVEL3_GEN         );
      trn_k_global.asigna('cod_agt'    ,trn.COD_TERCERO_GEN       );
      trn_k_global.asigna('num_poliza' ,em.NUM_POLIZA_GEN         );
      trn_k_global.asigna('fec_validez',TO_CHAR(SYSDATE,'DDMMYYYY'));
      --
      l_constante := trn_k_df_cmn_nwt_xx_cnn.f_vrb_nam_val(p_vrb_nam);
      --
      mx('F','f_recupera_constante');
      --
      RETURN l_constante;
      --
   END f_recupera_constante;
   --
   /* -----------------------------------------
   ||  f_recupera_val_dv
   ||  Recupera valor de la constante que se indica por parametro.
   */ -----------------------------------------
   --
   FUNCTION f_recupera_val_dv (p_cod_cia        c2000000.cod_cia       %TYPE,
                               p_cod_ramo       c2000000.cod_ramo      %TYPE,
                               p_num_cotizacion c2000000.num_cotizacion%TYPE,
                               p_nom_columna    c2000000.nom_columna   %TYPE,
                               p_nom_tabla      c2000000.nom_tabla     %TYPE DEFAULT 'A2000020',
                               p_cod_fila       c2000000.cod_fila      %TYPE DEFAULT '99999'
                               )
      RETURN c2000000.val_columna%TYPE
   IS
   --
      l_val_columna c2000000.val_columna%TYPE;
   --
   BEGIN
      --
      mx('I','f_recupera_val_dv');
      --
      em_k_c2000000.p_lee(p_cod_cia        => p_cod_cia       ,
                          p_cod_ramo       => p_cod_ramo      ,
                          p_num_cotizacion => p_num_cotizacion,
                          p_nom_tabla      => p_nom_tabla     ,
                          p_nom_columna    => p_nom_columna   ,
                          p_cod_fila       => p_cod_fila     );
      --
      l_val_columna := em_k_c2000000.f_val_columna;
      --
      mx('F','f_recupera_val_dv');
      --
      RETURN l_val_columna;
      --
   END f_recupera_val_dv;
   --
   /* -----------------------------------------
   || f_recupera_xml_in
   || Recupera valor del xml de entrada del procesar passo para ser accedida
   || desde otros paquetes.
   */ -----------------------------------------
   --
   FUNCTION f_recupera_xml_in
      RETURN CLOB
   IS
   --
   BEGIN
      --
      mx('I','f_recupera_xml_in');
      --
      mx('F','f_recupera_xml_in');
      --
      RETURN g_xml_in;
      --
   END f_recupera_xml_in;
   --
   /* -----------------------------------------
   || f_formar_xml: crea un XML en funcion de los parametros recbidos
   */ -----------------------------------------
   --
   FUNCTION f_formar_xml (p_cod_campo1          IN VARCHAR2             ,
                          p_val_campo1          IN VARCHAR2             ,
                          p_cod_campo2          IN VARCHAR2 DEFAULT NULL,
                          p_val_campo2          IN VARCHAR2 DEFAULT NULL,
                          p_cod_campo3          IN VARCHAR2 DEFAULT NULL,
                          p_val_campo3          IN VARCHAR2 DEFAULT NULL,
                          p_cod_campo4          IN VARCHAR2 DEFAULT NULL,
                          p_val_campo4          IN VARCHAR2 DEFAULT NULL,
                          p_cod_campo5          IN VARCHAR2 DEFAULT NULL,
                          p_val_campo5          IN VARCHAR2 DEFAULT NULL,
                          p_cod_campo6          IN VARCHAR2 DEFAULT NULL,
                          p_val_campo6          IN VARCHAR2 DEFAULT NULL,
                          p_cod_campo7          IN VARCHAR2 DEFAULT NULL,
                          p_val_campo7          IN VARCHAR2 DEFAULT NULL,
                          p_cod_campo8          IN VARCHAR2 DEFAULT NULL,
                          p_val_campo8          IN VARCHAR2 DEFAULT NULL,
                          p_cod_campo9          IN VARCHAR2 DEFAULT NULL,
                          p_val_campo9          IN VARCHAR2 DEFAULT NULL,
                          p_cod_campo10         IN VARCHAR2 DEFAULT NULL,
                          p_val_campo10         IN VARCHAR2 DEFAULT NULL,
                          p_cod_campo11         IN VARCHAR2 DEFAULT NULL,
                          p_val_campo11         IN VARCHAR2 DEFAULT NULL,
                          p_cod_campo12         IN VARCHAR2 DEFAULT NULL,
                          p_val_campo12         IN VARCHAR2 DEFAULT NULL,
                          p_cod_campo13         IN VARCHAR2 DEFAULT NULL,
                          p_val_campo13         IN VARCHAR2 DEFAULT NULL,
                          p_cod_campo14         IN VARCHAR2 DEFAULT NULL,
                          p_val_campo14         IN VARCHAR2 DEFAULT NULL,
                          p_cod_campo15         IN VARCHAR2 DEFAULT NULL,
                          p_val_campo15         IN VARCHAR2 DEFAULT NULL,
                          p_cod_campo16         IN VARCHAR2 DEFAULT NULL,
                          p_val_campo16         IN VARCHAR2 DEFAULT NULL,
                          p_cod_campo17         IN VARCHAR2 DEFAULT NULL,
                          p_val_campo17         IN VARCHAR2 DEFAULT NULL,
                          p_cod_campo18         IN VARCHAR2 DEFAULT NULL,
                          p_val_campo18         IN VARCHAR2 DEFAULT NULL,
                          p_cod_campo19         IN VARCHAR2 DEFAULT NULL,
                          p_val_campo19         IN VARCHAR2 DEFAULT NULL,
                          p_cod_campo20         IN VARCHAR2 DEFAULT NULL,
                          p_val_campo20         IN VARCHAR2 DEFAULT NULL,
                          p_cod_campo21         IN VARCHAR2 DEFAULT NULL,
                          p_val_campo21         IN VARCHAR2 DEFAULT NULL,
                          p_cod_campo22         IN VARCHAR2 DEFAULT NULL,
                          p_val_campo22         IN VARCHAR2 DEFAULT NULL,
                          p_cod_campo23         IN VARCHAR2 DEFAULT NULL,
                          p_val_campo23         IN VARCHAR2 DEFAULT NULL,
                          p_cod_campo24         IN VARCHAR2 DEFAULT NULL,
                          p_val_campo24         IN VARCHAR2 DEFAULT NULL,
                          p_cod_campo25         IN VARCHAR2 DEFAULT NULL,
                          p_val_campo25         IN VARCHAR2 DEFAULT NULL,
                          p_cod_campo26         IN VARCHAR2 DEFAULT NULL,
                          p_val_campo26         IN VARCHAR2 DEFAULT NULL,
                          p_cod_campo27         IN VARCHAR2 DEFAULT NULL,
                          p_val_campo27         IN VARCHAR2 DEFAULT NULL,
                          p_cod_campo28         IN VARCHAR2 DEFAULT NULL,
                          p_val_campo28         IN VARCHAR2 DEFAULT NULL)
       RETURN CLOB
    IS
    --
       p_xml             CLOB;
       l_xml_lista       XMLTYPE;
       l_document        DBMS_XMLDOM.DOMDOCUMENT;
       --
       l_node_lista      DBMS_XMLDOM.DOMNODE;
       l_node_lista2     DBMS_XMLDOM.DOMNODE;
       --
       PROCEDURE pi_formar_xml(p_cod_campo IN VARCHAR2,
                               p_val_campo IN VARCHAR2)
       IS
       --
          li_node_dados      DBMS_XMLDOM.DOMNODE;
          li_node_codigo     DBMS_XMLDOM.DOMNODE;
          li_node_valor      DBMS_XMLDOM.DOMNODE;
          li_text_campo      DBMS_XMLDOM.DOMTEXT;
          li_text_cdata      DBMS_XMLDOM.DOMTEXT;
          li_node_poliza     DBMS_XMLDOM.DOMNODE;
       --
       BEGIN
          --
          IF p_cod_campo IS NOT NULL
          THEN
              --
              li_node_dados  := DBMS_XMLDOM.appendchild(l_node_lista2, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
              li_node_codigo := DBMS_XMLDOM.appendchild(li_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'codCampo')));--crear la etiqueta XML
              li_text_campo  := DBMS_XMLDOM.createtextnode(l_document, p_cod_campo);--Almacenar el valor del campo
              li_node_codigo := DBMS_XMLDOM.appendchild(li_node_codigo, DBMS_XMLDOM.makenode(li_text_campo)); --Introducir el valor del campo en la etiqueta
              --
              li_node_codigo := DBMS_XMLDOM.appendchild(li_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valCampo')));--crear la etiqueta XML
              li_text_cdata  := DBMS_XMLDOM.createtextnode(l_document,p_val_campo);
              li_node_codigo := DBMS_XMLDOM.appendchild(li_node_codigo, DBMS_XMLDOM.makenode(li_text_cdata)); --Introducir el valor del campo en la etiqueta
              --
          END IF;
          --
       END pi_formar_xml;
    --
    BEGIN
       --
       mx('I', 'f_formar_xml');
       --
       l_document    := DBMS_XMLDOM.newdomdocument;
       --
       l_node_lista  := DBMS_XMLDOM.makenode(l_document);
       l_node_lista2  := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresLista')));
       --monta codigo
       pi_formar_xml(p_cod_campo1, p_val_campo1);
       pi_formar_xml(p_cod_campo2, p_val_campo2);
       pi_formar_xml(p_cod_campo3, p_val_campo3);
       pi_formar_xml(p_cod_campo4, p_val_campo4);
       pi_formar_xml(p_cod_campo5, p_val_campo5);
       pi_formar_xml(p_cod_campo6, p_val_campo6);
       pi_formar_xml(p_cod_campo7, p_val_campo7);
       pi_formar_xml(p_cod_campo8, p_val_campo8);
       pi_formar_xml(p_cod_campo9, p_val_campo9);
       pi_formar_xml(p_cod_campo10, p_val_campo10);
       pi_formar_xml(p_cod_campo11, p_val_campo11);
       pi_formar_xml(p_cod_campo12, p_val_campo12);
       pi_formar_xml(p_cod_campo13, p_val_campo13);
       pi_formar_xml(p_cod_campo14, p_val_campo14);
       pi_formar_xml(p_cod_campo15, p_val_campo15);
       pi_formar_xml(p_cod_campo16, p_val_campo16);
       pi_formar_xml(p_cod_campo17, p_val_campo17);
       pi_formar_xml(p_cod_campo18, p_val_campo18);
       pi_formar_xml(p_cod_campo19, p_val_campo19);
       pi_formar_xml(p_cod_campo20, p_val_campo20);
       pi_formar_xml(p_cod_campo21, p_val_campo21);
       pi_formar_xml(p_cod_campo22, p_val_campo22);
       pi_formar_xml(p_cod_campo23, p_val_campo23);
       pi_formar_xml(p_cod_campo24, p_val_campo24);
       pi_formar_xml(p_cod_campo25, p_val_campo25);
       pi_formar_xml(p_cod_campo26, p_val_campo26);
       pi_formar_xml(p_cod_campo27, p_val_campo27);
       pi_formar_xml(p_cod_campo28, p_val_campo28);
       --
       l_xml_lista := DBMS_XMLDOM.getxmltype(l_document);
       --
       DBMS_XMLDOM.freedocument(l_document);
       --
       p_xml  := l_xml_lista.getclobval;
       --
       mx('F', 'f_formar_xml');
       --
       RETURN p_xml;
       --
    END f_formar_xml;
    --
    /* ------------------
    || p_borrar_g0009030: DEberia ser solo usado para borrar cuando termina el proceso
    || o se cancela, usando un proceso en negativo.
    */ ------------------
    --
    PROCEDURE p_borrar_g0009030  (p_cod_cia            IN  g0009030.cod_cia       %TYPE,
                                  p_cod_estructura     IN  g0009030.cod_estructura%TYPE,
                                  p_num_proceso_neg    IN  g0009030.num_proceso   %TYPE)
    IS
    --
    --PRAGMA AUTONOMOUS_TRANSACTION;
    --
    BEGIN
       --
       mx('I', 'p_borrar_g0009030');
       --
       DELETE FROM g0009030
        WHERE cod_cia        = p_cod_cia
          AND cod_estructura = p_cod_estructura
          AND num_proceso    = p_num_proceso_neg;
       --
       COMMIT;
       --
       mx('F', 'p_borrar_g0009030');
       --
   END p_borrar_g0009030;
   --
   /* ------------------------------------------------------
   || funcao de recuperacao de logradouro
   */ ------------------------------------------------------
   --
   FUNCTION fp_recupera_logradouro (p_nom_logradouro       log_logradouro.log_no%TYPE)
      RETURN log_logradouro.log_no%TYPE
   IS
     --
     l_val_retorno        log_logradouro.log_no%TYPE;
     l_val_verificacao    log_logradouro.log_no%TYPE;
     --
   BEGIN
      --
      mx('I', 'fp_recupera_logradouro');
      --
      FOR c IN (SELECT *
                  FROM g1010031
                 WHERE cod_campo       = 'TIPO_LOGRADOURO'
                   AND cod_idioma      = g_k_cod_idioma
                   AND cod_ramo        = em.COD_RAMO_GEN
                   AND cod_instalacion = g_k_cod_instalacion)
      LOOP
         --
         l_val_verificacao := TO_CHAR(REGEXP_SUBSTR(UPPER(p_nom_logradouro),
                                                          '^(' || c.nom_valor || ')'));
         --
         IF c.nom_valor = l_val_verificacao THEN
            --
            l_val_retorno := TO_CHAR(REGEXP_REPLACE(UPPER(p_nom_logradouro),
                                                          '^(' || c.nom_valor || ')'));
            --
            EXIT;
            --
         END IF;
         --
      END LOOP;
      --
      mx('F', 'fp_recupera_logradouro');
      --
      RETURN l_val_retorno;
      --
   END fp_recupera_logradouro;
   --
   /* ------------------------------------------------------
   || Trata as mensagens recebidas e retorna um type
   */ ------------------------------------------------------
   FUNCTION fp_trata_msg(p_cod_campo   g2000020.cod_campo%TYPE,
                         p_cod_erro    NUMBER,
                         p_txt_msg     VARCHAR2)
     RETURN TYPREG_MSG_WS
     --
   IS
     --
     l_reg_msg_ws          TYPREG_MSG_WS;
     --
     l_txt_msg             VARCHAR2(400);
     l_desc_msg            VARCHAR2(400);
     --
     l_msg_iguais_dv       VARCHAR2(400);
     l_msg_iguais_ws       VARCHAR2(400);
     --
     l_cod_campo_erro_ref  g2000020.cod_campo%TYPE;
     --
   BEGIN
     --
     mx('I', 'fp_trata_msg');
     --
     BEGIN
        --
        mx('p_cod_campo', p_cod_campo);
        mx('p_cod_erro' , p_cod_erro );
        mx('p_txt_msg'  , p_txt_msg  );
        --
        l_reg_msg_ws := TYPREG_MSG_WS.autocreate;
        --
        --l_reg_msg_ws.cod_campo := p_cod_campo;
        --
        IF ABS(p_cod_erro) = g_k_cod_error_gen OR p_cod_erro IS NULL THEN
           --
           mx('-', 'Opcion 1');
           --
           l_txt_msg := SUBSTR(p_txt_msg,INSTR(p_txt_msg,g_k_pre_msg_erro));
           --
           l_reg_msg_ws.cod_mensagem := SUBSTR(l_txt_msg,
                                               LENGTH(g_k_pre_msg_erro)+trn.UNO,                         --RETORNA A PROXIMA POSICAO APOS PREFIXO, POR EXEMPLO: 'TRN-'
                                               INSTR(SUBSTR(l_txt_msg,LENGTH(g_k_pre_msg_erro)+trn.UNO), --RETORNA QUANTIDADE DE CARACTERS NO CODIGO DO ERRO
                                                                             g_k_sep_cod_msg)-trn.UNO);
           --
           l_cod_campo_erro_ref := trn_k_global.ref_f_global('cod_campo_erro_'||l_reg_msg_ws.cod_mensagem);
           --
           l_reg_msg_ws.cod_campo := NVL(l_cod_campo_erro_ref, p_cod_campo);
           --
           ss_k_g2109999.p_lee_vigente(p_cod_cia => trn_k_global.cod_cia,
                                       p_cod_ramo => trn_k_global.ref_f_global('COD_RAMO'),
                                       p_cod_agt => trn_k_global.ref_f_global('COD_AGT'),
                                       p_cod_nivel1 => trn_k_global.ref_f_global('COD_NIVEL1'),
                                       p_cod_nivel2 => trn_k_global.ref_f_global('COD_NIVEL2'),
                                       p_cod_nivel3 => trn_k_global.ref_f_global('COD_NIVEL3'),
                                       p_cod_canal1 => trn_k_global.ref_f_global('COD_CANAL1'),
                                       p_cod_canal2 => trn_k_global.ref_f_global('COD_CANAL2'),
                                       p_cod_canal3 => trn_k_global.ref_f_global('COD_CANAL3'),
                                       p_num_poliza_grupo => trn_k_global.ref_f_global('NUM_POLIZA_GRUPO'),
                                       p_num_contrato => trn_k_global.ref_f_global('NUM_CONTRATO'),
                                       p_num_subcontrato => trn_k_global.ref_f_global('NUM_SUBCONTRATO'),
                                       p_num_poliza_cliente => trn_k_global.ref_f_global('NUM_POLIZA_CLIENTE'),
                                       p_num_poliza => trn_k_global.ref_f_global('NUM_POLIZA'),
                                       p_cod_mensagem => l_reg_msg_ws.cod_mensagem,
                                       p_fec_validez => TRUNC(SYSDATE));
           --
           l_desc_msg := TRIM(SUBSTR(l_txt_msg,
                                     INSTR(l_txt_msg,
                                     g_k_sep_cod_msg)+trn.UNO));
           --
           l_msg_iguais_dv := SUBSTR(l_desc_msg,1,27);
           l_msg_iguais_ws := SUBSTR(ss_k_g2109999.f_txt_mensagem,1,27);
           --
           IF l_msg_iguais_dv = l_msg_iguais_ws THEN
         --
             l_desc_msg := NULL;
       --
           END IF;
           l_reg_msg_ws.des_mensagem := ss_k_g2109999.f_txt_mensagem || SUBSTR(l_desc_msg,                                       --CONCATENA A MENSAGEM BUSCADA NA TABELA COM O RETORNO DA BASE, REMOVENDO O CODIGO DA MENSAGEM CASO EXITA
                                                                               INSTR(l_desc_msg, l_reg_msg_ws.cod_mensagem) +
                                                                               CASE INSTR(l_desc_msg, l_reg_msg_ws.cod_mensagem)
                                                                                     WHEN trn.CERO THEN trn.CERO
                                                                                     ELSE LENGTH(l_reg_msg_ws.cod_mensagem) END);
           --
           l_reg_msg_ws.des_mensagem := SUBSTR(l_reg_msg_ws.des_mensagem,
                                         INSTR(l_reg_msg_ws.des_mensagem,g_k_separador_col) + trn.UNO);
           --
           l_reg_msg_ws.tip_mensagem := NVL(ss_k_g2109999.f_tip_mensagem,g_k_tip_msg_error);
           --
        ELSE
           --
           mx('-', 'Opcion 2');
           --
           l_reg_msg_ws.cod_campo := p_cod_campo;
           --
           IF p_cod_erro IS NULL THEN
             --
             l_reg_msg_ws.cod_mensagem := '20098400';
             --
           ELSE
             --
             l_reg_msg_ws.cod_mensagem := p_cod_erro;
             --
           END IF;
           --
           ss_k_g2109999.p_lee_vigente(p_cod_cia => trn_k_global.cod_cia,
                                       p_cod_ramo => trn_k_global.ref_f_global('COD_RAMO'),
                                       p_cod_agt => trn_k_global.ref_f_global('COD_AGT'),
                                       p_cod_nivel1 => trn_k_global.ref_f_global('COD_NIVEL1'),
                                       p_cod_nivel2 => trn_k_global.ref_f_global('COD_NIVEL2'),
                                       p_cod_nivel3 => trn_k_global.ref_f_global('COD_NIVEL3'),
                                       p_cod_canal1 => trn_k_global.ref_f_global('COD_CANAL1'),
                                       p_cod_canal2 => trn_k_global.ref_f_global('COD_CANAL2'),
                                       p_cod_canal3 => trn_k_global.ref_f_global('COD_CANAL3'),
                                       p_num_poliza_grupo => trn_k_global.ref_f_global('NUM_POLIZA_GRUPO'),
                                       p_num_contrato => trn_k_global.ref_f_global('NUM_CONTRATO'),
                                       p_num_subcontrato => trn_k_global.ref_f_global('NUM_SUBCONTRATO'),
                                       p_num_poliza_cliente => trn_k_global.ref_f_global('NUM_POLIZA_CLIENTE'),
                                       p_num_poliza => trn_k_global.ref_f_global('NUM_POLIZA'),
                                       p_cod_mensagem => l_reg_msg_ws.cod_mensagem,
                                       p_fec_validez => TRUNC(SYSDATE));
           --
           l_reg_msg_ws.des_mensagem := ss_k_g2109999.f_txt_mensagem || p_txt_msg;
           --
           IF LENGTH(l_reg_msg_ws.des_mensagem)>INSTR(l_reg_msg_ws.des_mensagem,g_k_separador_col) THEN
         --
         l_reg_msg_ws.des_mensagem := SUBSTR(l_reg_msg_ws.des_mensagem,
                       INSTR(l_reg_msg_ws.des_mensagem,g_k_separador_col) + trn.UNO);
         --
       END IF;
           --
           l_reg_msg_ws.tip_mensagem := NVL(ss_k_g2109999.f_tip_mensagem,g_k_tip_msg_error);
           --
        END IF;
        --
        trn_k_global.asigna('cod_campo_erro_'||l_reg_msg_ws.cod_mensagem, NULL);
        --
     EXCEPTION
        WHEN OTHERS THEN
           --
           l_reg_msg_ws := NULL;
           --
     END;
     --
     mx('F', 'fp_trata_msg');
     --
     RETURN l_reg_msg_ws;
     --
   END fp_trata_msg;
   --
   --
   /* ------------------------------------------------------
   || Trata los mensajes recibidos y retorna un TYPE.
   */ ------------------------------------------------------
   FUNCTION f_trata_msg(p_cod_campo   g2000020.cod_campo%TYPE,
                        p_cod_erro    NUMBER,
                        p_txt_msg     VARCHAR2)
     RETURN TYPREG_MSG_WS
   IS
      --
      l_mensaje TYPREG_MSG_WS;
      --
   BEGIN
      --
      mx('I', 'fp_trata_msg');
      --
      l_mensaje :=  fp_trata_msg(p_cod_campo => p_cod_campo,
                                 p_cod_erro  => p_cod_erro,
                                 p_txt_msg   => p_txt_msg);
      --
      mx('F', 'fp_trata_msg');
      --
      RETURN l_mensaje;
      --
   END f_trata_msg;
   --
   --
   /* ----------------------------------
   ||  fp_cambio_riesgo                :
   */ ----------------------------------
   --
   FUNCTION fp_cambio_riesgo
   RETURN BOOLEAN IS
   --
   CURSOR c_recupera_datos_variables IS
     SELECT a.cod_campo
           ,a.val_campo
       FROM a2000560 a,
            g9999992 b
      WHERE a.cod_cia        = g_cod_cia
        AND a.num_propuesta  = g_num_poliza
        AND b.tip_mvto_batch = g_tip_mvto_batch
        AND b.cod_ramo       = em.COD_RAMO_GEN
        AND b.cod_agt        = g_k_cod_agt_generico
        AND b.nom_tabla      = ea_k_231_utils.g_k_tabla_dv
        AND a.cod_cia        = b.cod_cia
        AND a.cod_campo      = b.cod_campo
      GROUP BY a.cod_campo
              ,a.val_campo;
   --
   reg_dados c_recupera_datos_variables%ROWTYPE;
   --
   BEGIN
     --
     mx('I', 'fp_cambio_riesgo');
     --
     pp_inicializa_variables;
     --
     IF trn_k_global.ref_f_global('mca_cambio_riesgo') IS NULL                         AND
        trn_k_global.ref_f_global('tip_mvto_batch')    = ea_k_231_utils.g_k_spto_batch
     THEN
       --v1.66 ini
       BEGIN
         --
         pp_asigna('cod_cia'   ,g_cod_cia   );
         pp_asigna('cod_ramo'  ,g_cod_ramo  );
         pp_asigna('num_poliza',g_num_poliza);
         pp_asigna('num_riesgo',g_num_riesgo);
         --
         em_k_a2000560.p_lee(p_cod_cia       => g_cod_cia      ,
                             p_num_propuesta => g_num_poliza   ,
                             p_cod_campo     => em_k_gen_spto_batch.g_k_pf_Datos_Fijos || 'NUM_SPTO');
         --
         pp_asigna('num_spto',em_k_a2000560.f_val_campo);
         --
       EXCEPTION
         WHEN OTHERS
         THEN
           --
           NULL;
           --
       END;
       --v1.66 fim
       --
       IF c_recupera_datos_variables%ISOPEN
       THEN
         --
         CLOSE c_recupera_datos_variables;
         --
       END IF;
       --
       OPEN c_recupera_datos_variables;
       --
       LOOP
         --
         FETCH c_recupera_datos_variables INTO reg_dados;
         EXIT WHEN c_recupera_datos_variables%NOTFOUND;
         --
         mx('-', 'cod_campo: ' || em.PREFIJO_DATOS_VARIABLES || reg_dados.cod_campo);
         mx('-', 'val_campo: ' || reg_dados.val_campo);
         --
         trn_k_global.asigna(em.PREFIJO_DATOS_VARIABLES || reg_dados.cod_campo
                            ,reg_dados.val_campo);
         --
       END LOOP;
       --
       CLOSE c_recupera_datos_variables;
       --
       IF em_f_cambio_riesgo
       THEN
         --
         trn_k_global.asigna('mca_cambio_riesgo'
                            ,trn.SI);
         --
       ELSE
         --
         trn_k_global.asigna('mca_cambio_riesgo'
                            ,trn.NO);
         --
       END IF;
       --
     END IF;
     --
     mx('F', 'fp_cambio_riesgo');
     --
     IF NVL(trn_k_global.ref_f_global('mca_cambio_riesgo')
           ,trn.NO) = trn.SI
     THEN
       --
       RETURN TRUE;
       --
     ELSE
       --
       RETURN FALSE;
       --
     END IF;
     --
   END fp_cambio_riesgo;
   --
   /* ------------------------------------------------------
   || Devuelve MAX suplemento de la Poliza
   */ ------------------------------------------------------
   FUNCTION fp_busca_max_spto(p_cod_cia    a2000500.cod_cia%TYPE
                             ,p_num_poliza a2000500.num_poliza%TYPE)
   RETURN a2000500.num_spto%TYPE IS
   --
   BEGIN
     --
     mx('I', 'fp_busca_max_spto');
     --
     mx('F', 'fp_busca_max_spto');
     --
     RETURN em_f_max_spto(p_cod_cia    => p_cod_cia
                         ,p_num_poliza => p_num_poliza
                         ,p_num_spto   => trn.NULO);
     --
   EXCEPTION
     WHEN OTHERS
     THEN
       --
       mx('F', 'fp_busca_max_spto - Exception');
       --
       RETURN NULL;
       --
   END fp_busca_max_spto;
   --
   /*-------------------------------------------------
   ||  pp_valida_efetivacao
   */ ------------------------------------------------
   --
   -- I v4.89 - V4.90 -- F v5.11
   PROCEDURE pp_valida_efetivacao(p_cod_cia         c2000000.cod_cia        %TYPE
                                 ,p_cod_ramo        c2000000.cod_ramo       %TYPE
                                 ,p_num_cotizacion  c2000000.num_cotizacion %TYPE
                                 ) IS
     --
     l_tip_situ             a2000500.tip_situ         %TYPE;
     l_reg                  a2000030                  %ROWTYPE;
     l_num_serie            c2000000.val_columna      %TYPE;
     l_tip_docum            c2000000.val_columna      %TYPE;
     l_cod_docum            c2000000.val_columna      %TYPE;
     l_num_spto             a2000030.num_spto         %TYPE;
     l_fec_efec_poliza      a2000030.fec_efec_poliza  %TYPE;
     l_cod_ramo             c2000000.cod_ramo         %TYPE;
     l_fec_efec_poliza_20   a2000020.cod_campo        %TYPE:= NULL;
     l_cod_agt_coti         a2000030.cod_agt          %TYPE;
     l_cod_agt_apolice      a2000030.cod_agt          %TYPE;
     l_fec_emision_spto     a2000030.fec_emision_spto %TYPE;
     --
     l_cod_mensaje          VARCHAR2(250);
     l_anx_mensaje          VARCHAR2(250);
     --
     l_existe               BOOLEAN := FALSE;
     --
     l_trava_renov          df_cmn_nwt_xx_cnn.vrb_nam_val%TYPE;
     l_trava_batch          df_cmn_nwt_xx_cnn.vrb_nam_val%TYPE;
     l_trava_dias           NUMBER; -- v4.95
     l_qtde_dias            NUMBER;
     --
     e_retorno              EXCEPTION;
     --
     CURSOR c_proposta_efetivada IS
      SELECT NVL(b.tip_situ, a.tip_situ)                tip_situ
           , NVL(b.tip_mvto_batch, a.tip_mvto_batch)    tip_mvto_batch
           , NVL(b.num_poliza, a.num_poliza_definitivo) num_poliza_definitivo
           , a.cod_agt
        FROM tron2000.a2000500 a --4.94 - RGAALVES
           , tron2000.a2000500 b
       WHERE a.cod_cia                = p_cod_cia
         AND a.cod_ramo               = p_cod_ramo
         AND a.num_poliza             = p_num_cotizacion
         AND a.tip_mvto_batch         = 8
         AND a.cod_cia                = b.cod_cia  (+)
         AND a.cod_ramo               = b.cod_ramo (+)
         AND b.num_poliza     (+)     = a.num_poliza_definitivo
         AND b.tip_mvto_batch (+)     = 3; --4.94 - RGAALVES
       /*SELECT NVL(b.tip_situ, a.tip_situ) tip_situ
            , NVL(b.tip_mvto_batch, a.tip_mvto_batch) tip_mvto_batch
            , NVL(b.num_poliza, a.num_poliza_definitivo) num_poliza_definitivo
            , a.cod_agt
         FROM tron2000.a2000500 a
            , tron2000.a2000500 b
        WHERE a.cod_cia            = p_cod_cia
          AND a.cod_ramo           = p_cod_ramo
          AND a.num_poliza         = p_num_cotizacion
          AND a.tip_mvto_batch     = 8
          AND a.cod_cia            = b.cod_cia  (+)
          AND a.cod_ramo           = b.cod_ramo (+)
          AND b.num_poliza     (+) = a.num_poliza_definitivo
          AND b.tip_mvto_batch (+) = 3;*/
     --
     l_reg_a2000500           c_proposta_efetivada%ROWTYPE;
     --
     CURSOR c_a2000030 (p_cod_cia     a2000030.cod_cia    %TYPE
                       ,p_cod_ramo    a2000030.cod_ramo   %TYPE
                       ,p_num_poliza  a2000030.num_poliza %TYPE
                        )IS
       SELECT *
         FROM a2000030 a
        WHERE a.cod_cia    = p_cod_cia
          AND a.cod_ramo   = p_cod_ramo
          AND a.num_poliza = p_num_poliza;
     --
     l_reg_a2000030        c_a2000030%ROWTYPE;
     --
     CURSOR c_apolice_ct(p_cod_cia     a2000030.cod_cia    %TYPE
                        ,p_num_poliza  a2000030.num_poliza %TYPE
                        ,p_num_spto    a2000030.num_spto   %TYPE
                        ,p_cod_ramo    a2000030.cod_ramo   %TYPE) IS
        SELECT *
          FROM a2000030 a
         WHERE a.cod_cia             = p_cod_cia
           AND a.num_poliza          = p_num_poliza
           AND a.cod_ramo            = p_cod_ramo
           AND a.num_spto            = p_num_spto
           AND a.mca_poliza_anulada  = trn.SI;
     --
     CURSOR c_p2000030(pc_cod_cia     a2000030.cod_cia    %TYPE
                      ,pc_cod_ramo    a2000030.cod_ramo   %TYPE
                      ,pc_num_poliza  a2000030.num_poliza %TYPE) IS
       SELECT *
         FROM p2000030 a
        WHERE a.cod_cia         = pc_cod_cia
          AND a.cod_ramo        = pc_cod_ramo
          AND a.num_poliza      = pc_num_poliza
          AND a.num_spto        = trn.CERO
          AND a.num_spto_apli   = trn.CERO;
     --
     l_reg_p2000030       c_p2000030%ROWTYPE;
     --
     CURSOR c_a2000060 (p_cod_cia     a2000060.cod_cia   %TYPE
                       ,p_tip_docum   a2000060.tip_docum %TYPE
                       ,p_cod_docum   a2000060.cod_docum %TYPE )IS
       SELECT *
         FROM a2000060
        WHERE cod_cia     = p_cod_cia
          AND tip_benef   = 2
          AND tip_docum   = p_tip_docum
          AND cod_docum   = p_cod_docum
          AND mca_vigente = 'S'
          AND mca_baja    = 'N';
     --
     --l_reg_a2000060       c_a2000060%ROWTYPE;
     --
     CURSOR c_a2000020 (p_cod_cia     a2000030.cod_cia    %TYPE
                       ,p_cod_ramo    a2000030.cod_ramo   %TYPE
                       ,p_num_poliza  a2000030.num_poliza %TYPE
                       )IS
       SELECT *
         FROM a2000020
        WHERE cod_cia     = p_cod_cia
          AND cod_ramo    = p_cod_ramo
          AND num_poliza  = p_num_poliza
          AND mca_vigente = trn.SI
          AND cod_campo   = 'NUM_SERIE';
     --
     l_reg_a2000020       c_a2000020%ROWTYPE;
     --
     CURSOR c_a2219016_vcr (p_cod_cia     a2000030.cod_cia    %TYPE
                           ,p_num_poliza  a2000030.num_poliza %TYPE) IS
       SELECT *
         FROM a2219016_vcr
        WHERE cod_cia    = p_cod_cia
          AND num_poliza = p_num_poliza
          AND cod_error  = 428;
     --
     l_reg_a2219016_vcr       c_a2219016_vcr%ROWTYPE;
     --
     CURSOR c_c2009030_vcr (p_cod_cia         c2009030_vcr.cod_cia        %TYPE
                           ,p_cod_ramo        c2009030_vcr.cod_ramo       %TYPE
                           ,p_num_cotizacion  c2009030_vcr.num_cotizacion %TYPE) IS
       SELECT *
         FROM c2009030_vcr
        WHERE cod_cia    = p_cod_cia
          AND cod_ramo   = p_cod_ramo
          AND num_cotizacion = p_num_cotizacion;
     --
     l_reg_c2009030_vcr       c_c2009030_vcr%ROWTYPE;
     --
   BEGIN
     --
     mx('I','pp_valida_efetivacao');
     --
     trn_k_global.borra_variable('erro_trava'); -- v 4.94 - RGAALVES
     --
     trn_k_global.asigna('erro_trava',trn.NO); -- v 4.94 - RGAALVES
     --
     --
     ea_k_231_utils.p_devuelve_dato_cotizacion(ea_k_231_coti.g_k_tabla_df
                                              ,'COD_AGT'
                                              ,l_cod_agt_coti);
     --
     mx('-','l_cod_agt_coti: ' || l_cod_agt_coti);
     --
     ea_k_231_utils.p_devuelve_dato_cotizacion(ea_k_231_coti.g_k_tabla_int
                                              ,'TIP_DOCUM'
                                              ,l_tip_docum);
     --
     mx('-','l_tip_docum: ' || l_tip_docum);
     --
     ea_k_231_utils.p_devuelve_dato_cotizacion(ea_k_231_coti.g_k_tabla_int
                                              ,'COD_DOCUM'
                                              ,l_cod_docum);
     --
     l_cod_docum := TO_NUMBER(l_cod_docum);
     --
     mx('-','l_cod_docum: ' || l_cod_docum);
     --
     -- valida transmissao pelo mesmo numero de cotacao
     --
     BEGIN
       --
       l_trava_batch := trn_k_df_cmn_nwt_xx_cnn.f_vrb_nam_val('HABILITA_TRAVA_BATCH');
       --
       mx('-','erro_trava_2: ' || trn.SI);
       --
     EXCEPTION
       WHEN OTHERS THEN
         --
         mx('-','erro_trava_3: ' || trn.SI);
         l_trava_batch := trn.NO;
         --
     END;
     --
     IF NVL(l_trava_batch, trn.NO) = trn.SI
     THEN
       --
       OPEN c_proposta_efetivada;
         --
         FETCH c_proposta_efetivada INTO l_reg_a2000500;
         --
       CLOSE c_proposta_efetivada;
       --
       mx('-','l_reg_a2000500.tip_situ: ' || l_reg_a2000500.tip_situ);
       --
       IF l_reg_a2000500.tip_situ IN ( 1, 2 )      AND
          l_reg_a2000500.cod_agt  = l_cod_agt_coti
       THEN
         --
         trn_k_global.asigna('erro_trava',trn.SI);
         --
         l_anx_mensaje := trn.BLANCO || ss_k_mensaje.f_solo_texto_idioma(20099910, g_cod_idioma) ||' ' ||
                                        ss_k_mensaje.f_solo_texto_idioma(20099912, g_cod_idioma);
         g_err_msg.EXTEND(1);
         g_err_msg(g_err_msg.LAST) := fp_trata_msg('COD_RETORNO',
                                                   '20099910',
                                                   l_cod_mensaje ||
                                                   l_anx_mensaje);
         --
         g_cod_mensaje := l_cod_mensaje;
         --
         pp_devuelve_error;
         --
       END IF;
       --
     END IF;
     --
     -- valida transmissao pelo risco e documento
     --
     trn_k_global.asigna('erro_trava',trn.NO);
     --
     FOR l_reg_a2000060 IN (SELECT *
                              FROM a2000060
                             WHERE cod_cia     = p_cod_cia
                               AND tip_benef   = 2
                               AND tip_docum   = l_tip_docum
                               AND cod_docum   = l_cod_docum
                               AND mca_vigente = 'S'
                               AND mca_baja    = 'N')
     LOOP
       --
       BEGIN
         --
         mx('-','l_reg_a2000060.num_poliza: ' || l_reg_a2000060.num_poliza);
         --
         IF l_reg_a2000060.num_poliza IS NOT NULL THEN
           --
           l_num_spto  := em_f_max_spto_1(p_cod_cia    => p_cod_cia,
                                          p_num_poliza => l_reg_a2000060.num_poliza);
           --
           em_k_a2000030.p_lee(p_cod_cia        => p_cod_cia
                              ,p_num_poliza     => l_reg_a2000060.num_poliza
                              ,p_num_spto       => l_num_spto
                              ,p_num_apli       => l_reg_a2000060.num_apli
                              ,p_num_spto_apli  => l_reg_a2000060.num_spto_apli);
           --
           l_cod_ramo         := em_k_a2000030.f_cod_ramo;
           l_cod_agt_apolice  := em_k_a2000030.f_cod_agt;
           l_fec_emision_spto := em_k_a2000030.f_fec_emision_spto;
           --
           ea_k_231_utils.p_devuelve_dato_cotizacion(ea_k_231_coti.g_k_tabla_dv
                                                    ,'NUM_SERIE'
                                                    ,l_num_serie);
           --
           OPEN c_c2009030_vcr(p_cod_cia
                              ,p_cod_ramo
                              ,p_num_cotizacion);
             --
             FETCH c_c2009030_vcr  INTO l_reg_c2009030_vcr;
             --
           CLOSE c_c2009030_vcr;
           --
           mx('-','l_num_serie: ' || l_num_serie);
           --
           OPEN c_a2000020(p_cod_cia
                          ,l_cod_ramo
                          ,l_reg_a2000060.num_poliza);

           --
           FETCH c_a2000020 INTO l_reg_a2000020;
           --
           CLOSE c_a2000020;
           --
           mx('-','l_reg_a2000020.val_campo: ' || l_reg_a2000020.val_campo);
           --
           mx('1-val_campo'        ,l_reg_a2000020.val_campo        );
           mx('1-num_serie'        ,l_num_serie                     );
           mx('1-cod_agt_apolice'  ,l_cod_agt_apolice               );
           mx('1-cod_agt_coti'     ,l_cod_agt_coti                  );
           mx('1-fec_emision'      ,l_fec_emision_spto              );
           mx('1-fec_emision'      ,l_reg_c2009030_vcr.fec_emision  );
           --
           l_qtde_dias  := ABS(l_fec_emision_spto - TRUNC(l_reg_c2009030_vcr.fec_emision)); -- 4.95
           --
           BEGIN
             --
             l_trava_dias := TO_NUMBER(trn_k_df_cmn_nwt_xx_cnn.f_vrb_nam_val('HABILITA_TRAVA_DIAS')); -- 4.95
             --
             mx('-','erro_trava_2: ' || trn.SI);
             --
           EXCEPTION
             WHEN OTHERS THEN
               --
               mx('-','erro_trava_3: ' || trn.SI);
               l_trava_dias := l_qtde_dias;
               --
           END;
           --
           IF l_reg_a2000020.val_campo = l_num_serie    AND
              l_cod_agt_apolice        = l_cod_agt_coti AND
              l_qtde_dias             <= l_trava_dias
           THEN
             --
             OPEN c_a2000030(p_cod_cia
                            ,l_cod_ramo
                            ,l_reg_a2000060.num_poliza);
             --
             FETCH c_a2000030 INTO l_reg_a2000030;
             --
             CLOSE c_a2000030;
             --
             mx('-','l_reg_a2000030.mca_provisional: ' || l_reg_a2000030.mca_provisional);
             --
             IF l_reg_a2000030.mca_provisional = trn.SI THEN
               --
               OPEN c_a2219016_vcr(p_cod_cia
                                  ,l_reg_a2000030.num_poliza );
               --
               FETCH c_a2219016_vcr  INTO l_reg_a2219016_vcr;
               --
               CLOSE c_a2219016_vcr;
               --
               mx('-','l_reg_a2219016_vcr.mca_autorizacion: ' || l_reg_a2219016_vcr.mca_autorizacion);
               --
               IF NVL(l_reg_a2219016_vcr.mca_autorizacion, trn.SI) = trn.SI THEN
                 --
                 mx('-','erro_trava2: ' || trn.SI);
                 --
                 trn_k_global.asigna('erro_trava',trn.SI);
                 --
                 OPEN c_p2000030(p_cod_cia
                                ,l_cod_ramo
                                ,l_reg_a2000030.num_presupuesto);
                 --
                 FETCH c_p2000030  INTO l_reg_p2000030;
                 --
                 CLOSE c_p2000030;
                 --
                 l_anx_mensaje := trn.BLANCO || ss_k_mensaje.f_solo_texto_idioma(20099910, g_cod_idioma) ||'(' || NVL(l_reg_p2000030.num_presupuesto
                                                                                                                     ,l_reg_a2000030.num_poliza) ||') '
                                             || ss_k_mensaje.f_solo_texto_idioma(20099911, g_cod_idioma);
                 g_err_msg.EXTEND(1);
                 g_err_msg(g_err_msg.LAST) := fp_trata_msg('COD_RETORNO',
                                                           '20099910',
                                                            l_cod_mensaje ||
                                                            l_anx_mensaje);
                 --
                 g_cod_mensaje := l_cod_mensaje;
                 --
                 RAISE e_retorno;
                 --
               END IF;
               --
               mx('-','erro_trava2: ' || trn.NO);
               --
             END IF;
             --
           END IF;
           --
           l_reg_a2000020 := NULL; -- v5.60
          --
         END IF;
         --
       EXCEPTION
         WHEN e_retorno
         THEN
           --
           RAISE e_retorno;
           --
         WHEN OTHERS
         THEN
           --
           CONTINUE;
           --
       END;
       --
     END LOOP;
     --
     mx('F','pp_valida_efetivacao');
     --
   EXCEPTION
     WHEN e_retorno
     THEN
       --
       pp_devuelve_error;
       --
     WHEN OTHERS
     THEN
       --
       NULL;
       --
   END pp_valida_efetivacao;
   -- F v4.89 -- F v5.11
   -- V1.69
   /* ------------------------------------------------------
   || Devuelve MAX suplemento definitivo de la Poliza
   */ ------------------------------------------------------
   FUNCTION fp_busca_max_spto_def(p_cod_cia          a2000500.cod_cia         %TYPE
                                 ,p_num_poliza       a2000500.num_poliza      %TYPE
                                 ,p_num_spto         a2000500.num_spto        %TYPE DEFAULT ea_k_231_utils.g_k_num_spto_gen
                                 ,p_num_apli         a2000030.num_apli        %TYPE DEFAULT trn.CERO
                                 ,p_num_spto_apli    a2000030.num_spto_apli   %TYPE DEFAULT trn.CERO
                                 ,p_mca_spto_tmp     a2000030.mca_spto_tmp    %TYPE DEFAULT trn.NO
                                 ,p_mca_spto_anulado a2000030.mca_spto_anulado%TYPE DEFAULT trn.NO
                                 ,p_mca_provisional  a2000030.mca_provisional %TYPE DEFAULT trn.NO)
   RETURN a2000500.num_spto%TYPE IS
     --
     CURSOR ci_a2000030 IS
       SELECT MAX(num_spto)
         FROM a2000030
        WHERE cod_cia          = p_cod_cia
          AND num_poliza       = p_num_poliza
          AND num_spto        <= p_num_spto
          AND num_apli         = p_num_apli
          AND num_spto_apli    = p_num_spto_apli
          AND mca_spto_tmp     = p_mca_spto_tmp
          AND mca_spto_anulado = p_mca_spto_anulado
          AND mca_provisional  = p_mca_provisional;
     --
     l_num_spto       a2000030.num_spto%TYPE;
     --
     l_mca_calculo_ok VARCHAR2(1) := trn.NULO;
     --
   BEGIN
     --
     mx('I', 'fp_busca_max_spto_def');
     --
     mx('p_cod_cia', p_cod_cia);
     mx('p_num_poliza', p_num_poliza);
     mx('p_num_spto', p_num_spto);
     mx('p_num_apli', p_num_apli);
     mx('p_num_spto_apli', p_num_spto_apli);
     mx('p_mca_spto_tmp', p_mca_spto_tmp);
     mx('p_mca_spto_anulado', p_mca_spto_anulado);
     mx('p_mca_provisional', p_mca_provisional);
     --
     SELECT NVL(MAX(val_campo)
               ,trn.SI)
       INTO l_mca_calculo_ok
       FROM a2000560
      WHERE cod_cia       = p_cod_cia
        AND num_propuesta = p_num_poliza
        AND cod_campo     = 'MCA_CALCULO_OK';
     --
     IF NVL(l_mca_calculo_ok, trn.SI) = trn.SI
     THEN
       --
       l_num_spto := em_f_max_spto(p_cod_cia    => p_cod_cia
                                  ,p_num_poliza => p_num_poliza
                                  ,p_num_spto   => trn.NULO);
       --
     ELSE
       --
       OPEN  ci_a2000030;
       FETCH ci_a2000030 INTO l_num_spto;
       CLOSE ci_a2000030;
       --
     END IF;
     --
     mx('F', 'fp_busca_max_spto_def');
     --
     RETURN l_num_spto;
     --
   EXCEPTION
     WHEN OTHERS
     THEN
       --
       mx('F', 'fp_busca_max_spto_def - Exception');
       --
   END fp_busca_max_spto_def;
   --
   /* ----------------------------------
   ||  pp_lee_config_cob               :
   */ ----------------------------------
   --
   PROCEDURE pp_lee_config_cob IS
   --
   BEGIN
     --
     mx('I', 'pp_lee_config_cob');
     --
     mx('g_val_clave_formula'    , g_val_clave_formula);
     --
     pp_inicializa_variables;
     --
     ea_k_g2109040.p_lee_vigente(p_cod_cia            => g_cod_cia            ,
                                 p_cod_ramo           => g_cod_ramo           ,
                                 p_cod_agt            => g_cod_agt            ,
                                 p_cod_nivel1         => g_cod_nivel1         ,
                                 p_cod_nivel2         => g_cod_nivel2         ,
                                 p_cod_nivel3         => g_cod_nivel3         ,
                                 p_cod_canal1         => g_cod_canal1         ,
                                 p_cod_canal2         => g_cod_canal2         ,
                                 p_cod_canal3         => g_cod_canal3         ,
                                 p_num_poliza_grupo   => g_num_poliza_grupo   ,
                                 p_num_contrato       => g_num_contrato       ,
                                 p_num_subcontrato    => g_num_subcontrato    ,
                                 p_num_poliza_cliente => g_num_poliza_cliente ,
                                 p_num_poliza         => g_num_poliza         ,
                                 p_cod_modalidad      => g_cod_modalidad      ,
                                 p_val_clave_formula  => g_val_clave_formula  ,
                                 p_cod_tarifa         => g_cod_tarifa         ,
                                 p_tip_segmento       => g_tip_segmento       ,
                                 p_cod_cob            => g_cod_cob            ,
                                 p_fec_validez_tarifa => g_fec_validez_tarifa);
     --
     mx('F', 'pp_lee_config_cob');
     --
   END pp_lee_config_cob;
   --
   /* ------------------------------------------------------
   || Busca as coberturas gratuitas
   */ ------------------------------------------------------
   FUNCTION fp_bus_coberturas_gratuitas (p_num_simulacao VARCHAR2)
      RETURN ref_cursor
   IS
      --
      l_cod_cia                  C2009030_vcr.cod_cia%TYPE;
      l_cod_ramo                 C2009030_vcr.cod_ramo%TYPE;
      l_num_simulacao            c2990700.num_simulacion%TYPE;
      l_num_cotizacion           C2009030_vcr.num_cotizacion%TYPE;
      --
      l_retorno_cob              ref_cursor;
      --
   BEGIN
     --
     mx('I', 'fp_bus_coberturas_gratuitas');
     --
     l_num_simulacao := to_number(SUBSTR(p_num_simulacao,14,1));
     --
     l_cod_cia        := trn_k_global.devuelve('COD_CIA');
     --
     l_cod_ramo       := trn_k_global.devuelve('COD_RAMO');
     --
     l_num_cotizacion := trn_k_global.devuelve('NUM_COTIZACION');

      -- I 4.94 Alteracao das descricoes das coberturas

     OPEN l_retorno_cob
          FOR
            SELECT c.cod_cob,
            CASE c.cod_cob
              WHEN 108
                THEN (SELECT r.val_columna
                           FROM g2009017_vcr r
                          WHERE r.cod_valor   = '91'
                            AND r.nom_columna = 'NOM_COB_AGRUPADA')
              WHEN 254
                THEN (SELECT l.val_columna
                           FROM g2009017_vcr l
                          WHERE l.cod_valor   = '91'
                            AND l.nom_columna = 'NOM_COB_AGRUPADA')
            ELSE
              a.nom_cob
            END AS nom_cob
              FROM c2009040_vcr c, a1002150 a
             WHERE c.cod_cia          = l_cod_cia
               AND c.cod_ramo         = l_cod_ramo
               AND c.num_cotizacion   = l_num_cotizacion
               AND c.num_simulacion   = l_num_simulacao
               AND c.cod_cob          IN (139
                                         ,1304
                                         ,206
                                         ,108
                                         ,254)
               AND a.cod_cia          = c.cod_cia
               AND a.cod_ramo         = c.cod_ramo
               AND a.cod_cob          = c.cod_cob
               AND a.fec_validez      = (SELECT MAX(fec_validez)
                                           FROM a1002150 b
                                          WHERE a.cod_cia  = b.cod_cia
                                            AND a.cod_ramo = b.cod_ramo
                                            AND a.cod_cob  = b.cod_cob)
          ORDER BY c.cod_cob;
     --F 4.94 Alteracao das descricoes das coberturas

     mx('F', 'fp_bus_coberturas_gratuitas');
     --
     RETURN l_retorno_cob;
     --
   END fp_bus_coberturas_gratuitas;
   --
   -- v2.73
   /* ------------------------------------------------------
   || Busca as propriedades das coberturas contratadas no calculo
   */ ------------------------------------------------------
   FUNCTION fp_bus_coberturas_dv (p_num_simulacion c2000000.val_columna%TYPE
                                 ,p_cod_cob        c2009040_vcr.cod_cob%TYPE)
   RETURN g2009016_vcr.val_columna%TYPE IS
   --
   l_cod_cia                  C2009030_vcr.cod_cia       %TYPE;
   l_cod_ramo                 C2009030_vcr.cod_ramo      %TYPE;
   l_num_simulacao            c2990700.num_simulacion    %TYPE;
   l_num_cotizacion           C2009030_vcr.num_cotizacion%TYPE;
   --
   l_retorno                  g2009016_vcr.val_columna   %TYPE := trn.NULO;
   --
   CURSOR c_dados(pc_cod_cia        c2009040_vcr.cod_cia       %TYPE
                 ,pc_cod_ramo       c2009040_vcr.cod_ramo      %TYPE
                 ,pc_num_cotizacion c2009040_vcr.num_cotizacion%TYPE
                 ,pc_num_simulacion c2009040_vcr.num_simulacion%TYPE
                 ,pc_cod_cob        c2009040_vcr.cod_cob       %TYPE)
   IS
   -- I 4.94 Alteracao das descricoes das coberturas
     SELECT r.val_columna
       FROM g2009017_vcr r
           ,g2000020     g
           ,c2000000     h
      WHERE h.cod_cia        = pc_cod_cia
        AND h.cod_ramo       = pc_cod_ramo
        AND h.num_cotizacion = pc_num_cotizacion
        AND h.nom_tabla      = ea_k_231_utils.g_k_tabla_dv
        AND g.cod_cia        = h.cod_cia
        AND g.cod_ramo       = h.cod_ramo
        AND g.cod_cob        = pc_cod_cob
        AND g.tip_nivel      = 3
        AND r.cod_cia        = h.cod_cia
        AND r.cod_ramo       = h.cod_ramo
        AND r.nom_columna    = g.cod_campo
        AND r.cod_valor      = h.val_columna
        AND h.nom_columna    = (CASE trn_k_global.ref_f_global('MCA_RENOVACION')
                                  WHEN trn.SI
                                  THEN
                                    g.cod_campo
                                  ELSE
                                    g.cod_campo || g_k_pref_simulacion || pc_num_simulacion
                                END) --v3.80
      ORDER BY g.num_secu ASC;
   -- F 4.94 Alteracao das descricoes das coberturas

   --
   reg_dados                  c_dados%ROWTYPE;
   --
   BEGIN
     --
     mx('I', 'fp_bus_coberturas_dv');
     --
     l_num_simulacao  := to_number(SUBSTR(p_num_simulacion,14,1));
     l_cod_cia        := trn_k_global.devuelve('COD_CIA')        ;
     l_cod_ramo       := trn_k_global.devuelve('COD_RAMO')       ;
     l_num_cotizacion := trn_k_global.devuelve('NUM_COTIZACION') ;
     --
     IF c_dados%ISOPEN
     THEN
       --
       CLOSE c_dados;
       --
     END IF;
     --
     OPEN c_dados(l_cod_cia
                 ,l_cod_ramo
                 ,l_num_cotizacion
                 ,l_num_simulacao
                 ,p_cod_cob);
     --
     LOOP
       --
       FETCH c_dados INTO reg_dados;
       EXIT WHEN c_dados%NOTFOUND;
       --
       l_retorno := l_retorno || trn.BLANCO || reg_dados.val_columna;
       --
     END LOOP;
     --
     CLOSE c_dados;
     --
     mx('F', 'fp_bus_coberturas_dv');
     --
     RETURN l_retorno;
     --
   EXCEPTION
     WHEN OTHERS
     THEN
       --
       CLOSE c_dados;
       --
       mx('F', 'fp_bus_coberturas_dv - Exception');
       --
       RETURN trn.NULO;
       --
   END fp_bus_coberturas_dv;
   --
   -- v2.73
   /* ------------------------------------------------------
   || Busca as coberturas contratadas no pacote calculado
   */ ------------------------------------------------------
   FUNCTION fp_bus_coberturas_pacote (p_num_simulacao c2990700.num_simulacion%TYPE)
   RETURN ref_cursor IS
   --
   l_cod_cia                  C2009030_vcr.cod_cia       %TYPE;
   l_cod_ramo                 C2009030_vcr.cod_ramo      %TYPE;
   l_num_simulacao            c2990700.num_simulacion    %TYPE;
   l_num_cotizacion           C2009030_vcr.num_cotizacion%TYPE;
   --
   l_retorno_cob              ref_cursor;
   --
   BEGIN
     --
     mx('I', 'fp_bus_coberturas_pacote');
     --
     l_num_simulacao  := NVL(to_number(SUBSTR(p_num_simulacao,14,1))
                            ,trn.UNO)                               ; --v3.80
     l_cod_cia        := trn_k_global.devuelve('COD_CIA')           ;
     l_cod_ramo       := trn_k_global.devuelve('COD_RAMO')          ;
     l_num_cotizacion := trn_k_global.devuelve('NUM_COTIZACION')    ;
     --
     OPEN l_retorno_cob
          FOR
          SELECT m.cod_cob
                ,m.nom_cob
            FROM (SELECT x.cod_cia
                        ,x.cod_ramo
                        ,x.num_cotizacion
                        ,'99' cod_cob
                        ,DECODE(x.val_columna
                               ,'M'
                               ,y.val_columna || ' - ' ||
                                (SELECT z.val_columna
                                   FROM c2000000 z
                                  WHERE z.cod_cia        = x.cod_cia
                                    AND z.cod_ramo       = x.cod_ramo
                                    AND z.num_cotizacion = x.num_cotizacion
                                    AND z.nom_columna    = 'PCT_AJUSTE_TAB_REF' || g_k_pref_simulacion || l_num_simulacao ) ||
                                '% FIPE'
                               ,'D'
                               ,y.val_columna || ' - R$ ' ||
                                LTRIM(TO_CHAR((SELECT TO_NUMBER(z.val_columna,'999999999.99')
                                                 FROM c2000000 z
                                                WHERE z.cod_cia        = x.cod_cia
                                                  AND z.cod_ramo       = x.cod_ramo
                                                  AND z.num_cotizacion = x.num_cotizacion
                                                  AND z.nom_columna    = 'VAL_SUB_MODELO' || g_k_pref_simulacion || l_num_simulacao)
                                              ,'999G999G999D99'))
                               ,y.val_columna) nom_cob
                        ,0 num_secu
                    FROM c2000000     x
                        ,g2009017_vcr y --I 4.94 Alteracao das descricoes das coberturas
                   WHERE x.cod_cia        = l_cod_cia
                     AND x.cod_ramo       = l_cod_ramo
                     AND x.num_cotizacion = l_num_cotizacion
                     AND x.nom_columna    = y.nom_columna || g_k_pref_simulacion || l_num_simulacao
                     AND x.cod_cia        = y.cod_cia
                     AND x.cod_ramo       = y.cod_ramo
                     AND y.nom_columna    = 'TIP_MERC_DETER'
                     AND x.val_columna    = y.cod_valor
                  --
                  UNION
                  --
                  -- v3.37 ini
                  SELECT x.cod_cia
                        ,x.cod_ramo
                        ,x.num_cotizacion
                        ,'98' cod_cob
                        ,y.val_columna|| ' - ' || x.val_columna || '%' nom_cob
                        ,-1 num_secu
                    FROM tron2000.c2000000     x
                        ,g2009017_vcr y --I 4.94 Alteracao das descricoes das coberturas
                   WHERE x.cod_cia        = l_cod_cia
                     AND x.cod_ramo       = l_cod_ramo
                     AND x.num_cotizacion = l_num_cotizacion
                     AND x.cod_cia        = y.cod_cia
                     AND x.cod_ramo       = y.cod_ramo
                     AND y.nom_columna    = 'PCT_AGT_NPR'
                     AND x.nom_columna    = (CASE trn_k_global.ref_f_global('MCA_RENOVACION')
                                               WHEN trn.SI
                                               THEN
                                                 y.nom_columna
                                               ELSE
                                                 y.nom_columna || g_k_pref_simulacion || l_num_simulacao
                                             END) --v3.80
                  -- v3.37 fim
                  --
                  UNION
                  --
                  SELECT c.cod_cia
                        ,c.cod_ramo
                        ,c.num_cotizacion
                        ,NVL((SELECT cod_valor
                                FROM g2009017_vcr e --I 4.94 Alteracao das descricoes das coberturas
                               WHERE a.cod_cia = e.cod_cia
                                 AND a.cod_ramo = e.cod_ramo
                                 AND e.nom_columna LIKE '%NOM_COB_AGRUPADA%'
                                 AND e.cod_valor = SUBSTR(d.vrb_nam, INSTR(d.vrb_nam, g_k_pref_simulacion) + 1, 2))
                            ,c.cod_cob) cod_cob
                        ,TRIM(NVL((SELECT val_columna
                                     FROM g2009017_vcr f --I 4.94 Alteracao das descricoes das coberturas
                                    WHERE a.cod_cia = f.cod_cia
                                      AND a.cod_ramo = f.cod_ramo
                                      AND f.nom_columna LIKE '%NOM_COB_AGRUPADA%'
                                      AND f.cod_valor = SUBSTR(d.vrb_nam, INSTR(d.vrb_nam, g_k_pref_simulacion) + 1, 2))
                                 ,b.val_columna || NVL2(DECODE(DECODE(c.cod_cob
                                                                           ,121
                                                                           ,0
                                                                           ,400
                                                                           ,0
                                                                           ,421
                                                                           ,0
                                                                           ,206
                                                                           ,0
                                                                           ,c.suma_aseg)
                                                                    ,0
                                                                    ,NULL
                                                                    ,c.suma_aseg)
                                                              ,' R$ ' || LTRIM(TO_CHAR(c.suma_aseg
                                                                                     ,'9G999G999'))
                                                              ,''))) nom_cob
                        ,b.num_secu
                    FROM c2009040_vcr          c,
                         a1002150              a,
                        g2009017_vcr          b, -- I 4.94 Alteracao das descricoes das coberturas
                         df_cmn_nwt_xx_vrb_cnc d
                   WHERE c.cod_cia        = l_cod_cia
                     AND c.cod_ramo       = l_cod_ramo
                     AND c.num_cotizacion = l_num_cotizacion
                     AND c.num_simulacion = l_num_simulacao
                     AND a.cod_cia        = c.cod_cia
                     AND a.cod_ramo       = c.cod_ramo
                     AND a.cod_cob        = c.cod_cob
                     AND a.cod_cia        = b.cod_cia
                     AND a.cod_ramo       = b.cod_ramo
                     AND a.cod_cob        = b.cod_valor
                     AND b.nom_columna    = 'NOM_COB_PCT'
                     AND a.cod_cia        = d.cmp_val(+)
                     AND a.cod_ramo       = d.lob_val(+)
                     AND a.cod_cob        = d.cnc_vrb_val(+)
                     AND d.vrb_nam    (+) LIKE 'COD_COB_AGRUPADA#%'
                     AND a.fec_validez    = (SELECT MAX(fec_validez)
                                                FROM a1002150 e
                                               WHERE a.cod_cia = e.cod_cia
                                                 AND a.cod_ramo = e.cod_ramo
                                                 AND a.cod_cob = e.cod_cob)) m
            GROUP BY m.cod_cob
                    ,m.nom_cob
            ORDER BY MAX(m.num_secu);
     --
     mx('F', 'fp_bus_coberturas_pacote');
     --
     RETURN l_retorno_cob;
     --
   END fp_bus_coberturas_pacote;
   --
   /* ------------------------------------------------------
   || Busca as coberturas gratuitas endosso
   */ ------------------------------------------------------
   FUNCTION fp_bus_cob_gratuitas_spto (p_num_simulacao VARCHAR2)
      RETURN ref_cursor
   IS
      --
      l_cod_cia                  C2009030_vcr.cod_cia%TYPE;
      l_cod_ramo                 C2009030_vcr.cod_ramo%TYPE;
      l_num_simulacao            c2990700.num_simulacion%TYPE;
      l_num_cotizacion           C2009030_vcr.num_cotizacion%TYPE;
      --
      l_retorno_cob              ref_cursor;
      --
   BEGIN
     --
     mx('I', 'fp_bus_cob_gratuitas_spto');
     --
     l_num_simulacao := to_number(SUBSTR(p_num_simulacao,14,1));
     --
     l_cod_cia        := trn_k_global.devuelve('COD_CIA');
     --
     l_cod_ramo       := trn_k_global.devuelve('COD_RAMO');
     --
     l_num_cotizacion := trn_k_global.devuelve('NUM_COTIZACION');
     --
     OPEN l_retorno_cob
      FOR
        SELECT to_number(substr(c.cod_campo,16,4)) cod_cob,
        CASE to_number(substr(c.cod_campo,16,4))
          WHEN 108
            THEN (SELECT r.val_columna
                       FROM tron2000.g2009017_vcr r --I 4.94 Alteracao das descricoes das coberturas
                      WHERE r.cod_valor   = '91'
                        AND r.nom_columna = 'NOM_COB_AGRUPADA')
          WHEN 254
            THEN (SELECT l.val_columna
                       FROM tron2000.g2009017_vcr l --I 4.94 Alteracao das descricoes das coberturas
                      WHERE l.cod_valor   = '91'
                        AND l.nom_columna = 'NOM_COB_AGRUPADA')
        ELSE
          a.nom_cob
        END AS nom_cob
          FROM A2000560 c, a1002150 a
         WHERE c.cod_cia          = 1
           AND c.num_propuesta    = l_num_cotizacion
           AND c.cod_campo        IN ('COMCA_SELECCION139'
                                     ,'COMCA_SELECCION1304'
                                     ,'COMCA_SELECCION206'
                                     ,'COMCA_SELECCION108'
                                     ,'COMCA_SELECCION254')
           AND c.val_campo        = trn.SI
           AND a.cod_cia          = c.cod_cia
           AND a.cod_ramo         = l_cod_ramo
           AND a.cod_cob          = to_number(substr(c.cod_campo,16,4))
           AND a.fec_validez      = (SELECT MAX(fec_validez)
                                       FROM a1002150 b
                                      WHERE a.cod_cia  = b.cod_cia
                                        AND a.cod_ramo = b.cod_ramo
                                        AND a.cod_cob  = b.cod_cob)
      ORDER BY cod_cob;
     --
     mx('F', 'fp_bus_cob_gratuitas_spto');
     --
     RETURN l_retorno_cob;
     --
   END fp_bus_cob_gratuitas_spto;
   --
   /* -------------------------------
   ||  Retorna se o suma_aseg nao calculado
   */ -------------------------------
   --
   FUNCTION fp_bus_mca_defecto(p_cod_cia        c2009040_vcr.cod_cia%TYPE,
                               p_cod_ramo       c2009040_vcr.cod_ramo%TYPE,
                               p_num_cotizacion c2009040_vcr.num_cotizacion%TYPE,
                               p_num_simulacion c2009040_vcr.num_simulacion%TYPE,
                               p_cod_cob        VARCHAR2,
                               p_suma_aseg      c2009040_vcr.suma_aseg%TYPE)
      RETURN c2000000.val_columna%TYPE
   IS
      --
      l_mca_defecto c2000000.val_columna%TYPE := NULL;
      l_existe NUMBER;
      --
   BEGIN
      --
      mx('I', 'fp_bus_mca_defecto');
      --
      --VERIFICA SE EXISTE ALGUM REGISTRO CALCULADO PARA AQUELA COBERTUA NA c2009040_vcr
      BEGIN
         --
         -- COD_COB_PARSER TRANSFORMA VARIAVEL VARCHAR COM OS COD_COB EM SUBCONSULTA PARA SER USANDO EM IN
         WITH cod_cob_parser AS (SELECT regexp_substr(p_cod_cob,
                                                         '[^,]+',
                                                         trn.UNO,
                                                         LEVEL) AS cod_cob
                                      FROM dual
                                      CONNECT BY LEVEL <= LENGTH(p_cod_cob) - LENGTH(REPLACE(p_cod_cob,
                                                                                             g_k_separador_vir,
                                                                                             trn.NULO))
                                                                              + trn.UNO)
         SELECT DISTINCT trn.UNO
           INTO l_existe
           FROM c2009040_vcr c,
                cod_cob_parser p
          WHERE c.cod_cia        = p_cod_cia
            AND c.cod_ramo       = p_cod_ramo
            AND c.num_cotizacion = p_num_cotizacion
            AND c.num_simulacion = p_num_simulacion
            AND c.cod_cob        = p.cod_cob
            AND c.suma_aseg       IS NOT NULL;
         --
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
            --
            l_existe := trn.CERO;
            --
      END;
      --
      IF l_existe = trn.UNO THEN
         --
         --SE EXISTE, VERIFICA SE A SUMA_ASEG ESPECIFICADA FOI A CALCULADA
         BEGIN
            --
            -- COD_COB_PARSER TRANSFORMA VARIAVEL VARCHAR COM OS COD_COB EM SUBCONSULTA PARA SER USANDO EM IN
            WITH cod_cob_parser AS (SELECT regexp_substr(p_cod_cob,
                                                         '[^,]+',
                                                         trn.UNO,
                                                         LEVEL) AS cod_cob
                                      FROM dual
                                      CONNECT BY LEVEL <= LENGTH(p_cod_cob) - LENGTH(REPLACE(p_cod_cob,
                                                                                             g_k_separador_vir,
                                                                                             trn.NULO))
                                                                              + trn.UNO)
            SELECT DISTINCT trn.SI
                INTO l_mca_defecto
              FROM c2009040_vcr c,
                   cod_cob_parser p
              WHERE c.cod_cia        = p_cod_cia
                 AND c.cod_ramo       = p_cod_ramo
               AND c.num_cotizacion = p_num_cotizacion
                 AND c.num_simulacion = p_num_simulacion
               AND c.suma_aseg      = p_suma_aseg
               AND c.cod_cob        = p.cod_cob;
           --
         EXCEPTION
            WHEN NO_DATA_FOUND THEN
               --
               l_mca_defecto := trn.NO;
               --
         END;
         --
      END IF;
      --
      mx('F', 'fp_bus_mca_defecto');
      --
      RETURN l_mca_defecto;
      --
   END fp_bus_mca_defecto;
   --
   /* -------------------------------
   ||  Retorna se o suma_aseg nao calculado
   */ -------------------------------
   --
   FUNCTION fp_bus_mca_defecto_endosso(p_cod_cia        a2000040.cod_cia%TYPE,
                                       p_cod_ramo       a2000040.cod_ramo%TYPE,
                                       p_num_poliza     a2000040.num_poliza%TYPE,
                                       p_num_riesgo     a2000040.num_riesgo%TYPE,
                                       p_suma_aseg      a2000040.suma_aseg%TYPE,
                                       p_cod_cob        VARCHAR2)
      RETURN VARCHAR2
   IS
      --
      l_mca_defecto VARCHAR2(1) := NULL;
      --
   BEGIN
      --
      mx('I', 'fp_bus_mca_defecto_endosso');
      --
      --VERIFICA SE EXISTE ALGUM REGISTRO CALCULADO PARA AQUELA COBERTURA NA a2000040
      BEGIN
         --
         -- COD_COB_PARSER TRANSFORMA VARIAVEL VARCHAR COM OS COD_COB EM SUBCONSULTA PARA SER USANDO EM IN
         WITH cod_cob_parser AS (SELECT regexp_substr(p_cod_cob, '[^,]+', trn.UNO, LEVEL) AS cod_cob
                                   FROM dual
                                 CONNECT BY LEVEL <= LENGTH(p_cod_cob) -
                                                     LENGTH(REPLACE(p_cod_cob, g_k_separador_vir, trn.NULO))
                                                     + trn.UNO)
         SELECT DISTINCT trn.SI
           INTO l_mca_defecto
           FROM a2000040 a,
                cod_cob_parser p
          WHERE a.cod_cia                 = p_cod_cia
            AND a.cod_ramo                = p_cod_ramo
            AND a.num_poliza              = p_num_poliza
            AND a.num_riesgo              = p_num_riesgo
            AND a.cod_cob                 = p.cod_cob
            AND TRUNC(a.suma_aseg)        = TRUNC(p_suma_aseg)
            AND NVL(mca_baja_cob, trn.NO) = trn.NO
            AND mca_vigente               = trn.SI
            AND mca_vigente_apli          = trn.SI;
         --
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
            --
            l_mca_defecto := trn.NULO;
            --
      END;
      --
      mx('F', 'fp_bus_mca_defecto_endosso');
      --
      RETURN l_mca_defecto;
      --
   END fp_bus_mca_defecto_endosso;
   --
   /* -------------------------------
   ||  Retorna se o suma_aseg nao calculado
   */ -------------------------------
   --
   FUNCTION fp_bus_mca_defecto_end_casco(p_cod_cia        a2000040.cod_cia%TYPE,
                                         p_cod_ramo       a2000040.cod_ramo%TYPE,
                                         p_num_poliza     a2000040.num_poliza%TYPE,
                                         p_num_riesgo     a2000040.num_riesgo%TYPE,
                                         p_cod_cob        VARCHAR2)
      RETURN VARCHAR2
   IS
      --
      l_mca_defecto VARCHAR2(1) := NULL;
      --
   BEGIN
      --
      mx('I', 'fp_bus_mca_defecto_end_casco');
      --
      mx('p_cod_cob', p_cod_cob);
      --
      --VERIFICA SE EXISTE ALGUM REGISTRO CALCULADO PARA AQUELA COBERTURA NA a2000040
      --
      BEGIN
         --
         -- COD_COB_PARSER TRANSFORMA VARIAVEL VARCHAR COM OS COD_COB EM SUBCONSULTA PARA SER USANDO EM IN
         WITH cod_cob_parser AS (SELECT regexp_substr(p_cod_cob, '[^,]+', trn.UNO, LEVEL) AS cod_cob
                                   FROM dual
                                 CONNECT BY LEVEL <= LENGTH(p_cod_cob) -
                                                     LENGTH(REPLACE(p_cod_cob, g_k_separador_vir, trn.NULO))
                                                     + trn.UNO)
         SELECT DISTINCT trn.SI
           INTO l_mca_defecto
           FROM a2000040 a,
                cod_cob_parser p
          WHERE a.cod_cia    = p_cod_cia
            AND a.cod_ramo   = p_cod_ramo
            AND a.num_poliza = p_num_poliza
            AND a.num_riesgo = p_num_riesgo
            AND a.cod_cob    = p.cod_cob
            AND TRUNC(a.suma_aseg)        <> trn.CERO
            AND NVL(mca_baja_cob, trn.NO) = trn.NO
            AND mca_vigente               = trn.SI
            AND mca_vigente_apli          = trn.SI;
         --
         EXCEPTION
          WHEN NO_DATA_FOUND THEN
            --
            l_mca_defecto := trn.SI;
            --
      END;
      --
      mx('l_mca_defecto', l_mca_defecto);
      --
      mx('F', 'fp_bus_mca_defecto_end_casco');
      --
      RETURN l_mca_defecto;
      --
   END fp_bus_mca_defecto_end_casco;
   --
   /* -------------------------------
   ||  Busca valor do premio por cobertura
   */ -------------------------------
   --
   FUNCTION fp_bus_val_premio_cob_coti(p_cod_cia        c2109170_vcr.cod_cia%TYPE,
                                       p_cod_ramo       c2109170_vcr.cod_ramo%TYPE,
                                       p_num_cotizacion c2109170_vcr.num_cotizacion%TYPE,
                                       p_num_simulacion c2109170_vcr.num_simulacion%TYPE,
                                       p_cod_cob        VARCHAR2)
      RETURN c2109170_vcr.imp_anual%TYPE
   IS
      --
      l_val_premio c2109170_vcr.imp_anual%TYPE;
      --
   BEGIN
      --
      mx('I', 'fp_bus_val_premio_cob_coti');
      --
      -- EXECUTA A SOMATORIA DE TODOS OS REGISTROS (MENOS IOF) PARA AQUELA COBERTURA NA TABELA c2109170_vcr
      BEGIN
      --
      -- COD_COB_PARSER TRANSFORMA VARIAVEL VARCHAR COM OS COD_COB EM SUBCONSULTA PARA SER USANDO EM IN
      WITH cod_cob_parser AS (SELECT regexp_substr(p_cod_cob,
                                                   '[^,]+',
                                                   trn.UNO,
                                                   LEVEL) AS cod_cob
                                FROM dual
                                CONNECT BY LEVEL <= LENGTH(p_cod_cob) - LENGTH(REPLACE(p_cod_cob,
                                                                                       g_k_separador_vir,
                                                                                       trn.NULO))
                                                                        + trn.UNO)
      SELECT SUM(NVL(imp_spto,trn.CERO)) AS val_premio
        INTO l_val_premio
        FROM c2109170_vcr c,
             cod_cob_parser p
       WHERE c.cod_cia        =  p_cod_cia
         AND c.cod_ramo       =  p_cod_ramo
         AND c.num_cotizacion =  p_num_cotizacion
         AND c.num_simulacion =  p_num_simulacion
         AND c.cod_cob        =  p.cod_cob
         AND c.cod_desglose   <> g_k_cod_desglose_iof;
      --
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
            --
            l_val_premio := trn.NULO;
            --
      END;
      --
      mx('F', 'fp_bus_val_premio_cob_coti');
      --
      RETURN l_val_premio;
      --
   END fp_bus_val_premio_cob_coti;
   --
   /* -------------------------------
   ||  Busca valor do premio por cobertura
   */ -------------------------------
   --
   FUNCTION fp_bus_val_premio_cob_endosso(p_cod_cia        A2100170.cod_cia%TYPE,
                                          p_cod_ramo       A2100170.cod_ramo%TYPE,
                                          p_num_poliza     A2100170.num_poliza%TYPE,
                                          p_num_spto       A2100170.num_spto%TYPE,
                                          p_num_riesgo     A2100170.num_riesgo%TYPE,
                                          p_todos_cod_cobs VARCHAR2)
      RETURN A2100170.imp_spto%TYPE
   IS
      --
      l_val_premio A2100170.imp_spto%TYPE;
      l_num_spto   a2100170.num_spto%TYPE; --v1.69
      --
   BEGIN
      --
      mx('I', 'fp_bus_val_premio_cob_endosso');
      --
      -- EXECUTA A SOMATORIA DE TODOS OS REGISTROS (MENOS IOF) PARA AQUELA COBERTURA NA TABELA A2100170
      BEGIN
      --
      l_num_spto := fp_busca_max_spto_def(p_cod_cia
                                         ,p_num_poliza); --v1.69
      --
      -- COD_COB_PARSER TRANSFORMA VARIAVEL VARCHAR COM OS COD_COB EM SUBCONSULTA PARA SER USANDO EM IN
      WITH cod_cob_parser AS
       (SELECT regexp_substr(p_todos_cod_cobs, '[^,]+', trn.uno, LEVEL) AS cod_cob
          FROM dual
        CONNECT BY LEVEL <=
                   length(p_todos_cod_cobs) -
                   length(REPLACE(p_todos_cod_cobs, g_k_separador_vir, trn.nulo)) +
                   trn.uno)
      SELECT SUM(nvl(imp_spto, trn.cero)) AS val_premio
        INTO l_val_premio
        FROM A2100170 a,
             cod_cob_parser p
       WHERE a.cod_cia        = p_cod_cia
         AND a.cod_ramo       = p_cod_ramo
         AND a.num_poliza     = p_num_poliza
         AND a.num_spto       = l_num_spto --v1.69
         AND a.num_riesgo     = p_num_riesgo
         AND a.cod_cob        = p.cod_cob
         AND a.cod_desglose   <> g_k_cod_desglose_iof;
      --
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
            --
            l_val_premio := trn.NULO;
            --
      END;
      --
      mx('F', 'fp_bus_val_premio_cob_endosso');
      --
      RETURN l_val_premio;
      --
   END fp_bus_val_premio_cob_endosso;
   --
   /* -------------------------------
   ||  Busca valor da franquia por cobertura
   */ -------------------------------
   --
   FUNCTION fp_bus_val_franq_cob_coti(p_cod_cia        c2000000.cod_cia%TYPE,
                                      p_cod_ramo       c2000000.cod_ramo%TYPE,
                                      p_num_cotizacion c2000000.num_cotizacion%TYPE,
                                      p_num_simulacion c2009040_vcr.num_simulacion%TYPE,
                                      p_todos_cod_cobs VARCHAR2)
      RETURN c2009040_vcr.val_franquicia_min%TYPE
   IS
      --
      l_val_franquia c2009040_vcr.val_franquicia_min%TYPE;
      --
   BEGIN
      --
      mx('I', 'fp_bus_val_franq_cob_coti');
      --
      BEGIN
        --
        WITH cod_cob_parser AS
         (SELECT regexp_substr(p_todos_cod_cobs, '[^,]+', trn.uno, LEVEL) AS cod_cob
            FROM dual
          CONNECT BY LEVEL <= length(p_todos_cod_cobs) -
                     length(REPLACE(p_todos_cod_cobs,
                                             g_k_separador_vir,
                                             trn.nulo)) + trn.uno)
        SELECT SUM(nvl(c.val_franquicia_min, trn.cero)) AS val_franquicia_min
          INTO l_val_franquia
          FROM c2009040_vcr c,
               cod_cob_parser p
         WHERE c.cod_cia        = p_cod_cia
           AND c.cod_ramo       = p_cod_ramo
           AND c.num_cotizacion = p_num_cotizacion
           AND c.num_simulacion = p_num_simulacion
           AND c.cod_cob        = p.cod_cob;
        --
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          --
          l_val_franquia := trn.NULO;
          --
      END;
      --
      mx('F', 'fp_bus_val_franq_cob_coti');
      --
      RETURN l_val_franquia;
      --
   END fp_bus_val_franq_cob_coti;
   --
   /* -------------------------------
   ||  Busca valor da franquia por cobertura
   */ -------------------------------
   --
   FUNCTION fp_bus_val_franq_cob_endosso(p_cod_cia        a2000040.cod_cia%TYPE,
                                         p_cod_ramo       a2000040.cod_ramo%TYPE,
                                         p_num_poliza     a2000040.num_poliza%TYPE,
                                         p_num_riesgo     a2000040.num_riesgo%TYPE,
                                         p_todos_cod_cobs VARCHAR2)
      RETURN a2000040.val_franquicia_min%TYPE
   IS
      --
      l_val_franquia a2000040.val_franquicia_min%TYPE;
      --
   BEGIN
      --
      mx('I', 'fp_bus_val_franq_cob_endosso');
      --
      BEGIN
        --
        WITH cod_cob_parser AS
         (SELECT regexp_substr(p_todos_cod_cobs, '[^,]+', trn.uno, LEVEL) AS cod_cob
            FROM dual
          CONNECT BY LEVEL <= length(p_todos_cod_cobs) -
                              length(REPLACE(p_todos_cod_cobs, g_k_separador_vir, trn.nulo)) +
                              trn.uno)
        SELECT SUM(nvl(a.val_franquicia_min, trn.cero)) AS val_franquicia_min
          INTO l_val_franquia
          FROM a2000040 a,
               cod_cob_parser p
         WHERE a.cod_cia    = p_cod_cia
           AND a.cod_ramo   = p_cod_ramo
           AND a.num_poliza = p_num_poliza
           AND a.num_riesgo = p_num_riesgo
           AND a.cod_cob    = p.cod_cob
           AND nvl(a.mca_baja_cob,trn.NO) = trn.NO
           AND a.mca_vigente              = trn.SI
           AND a.mca_vigente_apli         = trn.SI;
        --
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          --
          l_val_franquia := trn.NULO;
          --
      END;
      --
      mx('F', 'fp_bus_val_franq_cob_endosso');
      --
      RETURN l_val_franquia;
      --
   END fp_bus_val_franq_cob_endosso;
   --
   /* -------------------------------
   ||  Busca se aquele acessorio da lista
   ||  esta selecionado
   */ -------------------------------
   --
   FUNCTION fp_bus_mca_selec_accesorio(p_cod_cia        a2000030.cod_cia%TYPE,
                                       p_num_cotizacion a2000030.num_poliza%TYPE,
                                       p_cod_campo      g2990006.cod_campo%TYPE)
      RETURN VARCHAR2
   IS
      --
      l_mca_selec VARCHAR2(1);
      --
   BEGIN
      --
      mx('I', 'fp_bus_mca_selec_accesorio');
      --
      BEGIN
         --
         SELECT decode(val_campo, trn.NULO, trn.NO, trn.SI)
           INTO l_mca_selec
           FROM a2000560 a
          WHERE a.cod_cia        = p_cod_cia
            AND a.num_propuesta  = p_num_cotizacion
            AND a.cod_campo   LIKE p_cod_campo;
         --
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
           --
           l_mca_selec := trn.NO;
           --
      END;
      --
      mx('F', 'fp_bus_mca_selec_accesorio');
      --
      RETURN l_mca_selec;
      --
   END fp_bus_mca_selec_accesorio;
   --
   /* -------------------------------
   ||  Busca se aquele item da lista do DV
   ||  esta selecionado
   */ -------------------------------
   --
   FUNCTION fp_bus_mca_selec(p_cod_cia        c2009040_vcr.cod_cia%TYPE,
                             p_cod_ramo       c2009040_vcr.cod_ramo%TYPE,
                             p_num_cotizacion c2009040_vcr.num_cotizacion%TYPE,
                             p_cod_campo      g2990006.cod_campo%TYPE,
                             p_cod_valor      g2990006.cod_valor%TYPE,
                             p_cod_cob        c2000000.cod_fila%TYPE,
                             p_cod_modalidad  g2109010_vcr.cod_modalidad%TYPE)
      RETURN c2000000.val_columna%TYPE
   IS
      --
      l_mca_selec c2000000.val_columna%TYPE;
      --
   BEGIN
      --
      mx('I', 'fp_bus_mca_selec');
      mx('p_cod_campo:     ', p_cod_campo);
      mx('p_cod_valor:     ', p_cod_valor);
      mx('p_cod_cob:       ', p_cod_cob);
      mx('p_cod_modalidad: ', p_cod_modalidad);
      mx('p_num_cotizacion: ', p_num_cotizacion);
      --
      -- VERIFICA SE O VALOR DO CAMPO PASSADO CONSTA NA c2000000
      BEGIN
         --
         IF NVL(g_tip_mvto_batch,g_k_tip_mvto_batch_cotacao) = g_k_tip_mvto_batch_cotacao THEN
           --
            mx('g_tip_mvto_batch: ', g_tip_mvto_batch);
           --I 2.28
           BEGIN
             --
             SELECT trn.SI
               INTO l_mca_selec
               FROM c2000000 c
              WHERE c.cod_cia        =    p_cod_cia
                AND c.cod_ramo       =    p_cod_ramo
                AND c.num_cotizacion =    p_num_cotizacion
                AND c.nom_columna    =    p_cod_campo || g_k_prefixo_simulacion || g_num_sumula_def_pac --2.28
                AND c.val_columna    =    p_cod_valor
                AND c.cod_fila       IN  (g_k_cod_fila_generica);
             --
           EXCEPTION
             WHEN OTHERS THEN
           --
           SELECT trn.SI
             INTO l_mca_selec
             FROM c2000000 c
            WHERE c.cod_cia        =    p_cod_cia
              AND c.cod_ramo       =    p_cod_ramo
              AND c.num_cotizacion =    p_num_cotizacion
              AND c.nom_columna    =    p_cod_campo
              AND c.val_columna    =    p_cod_valor
              AND c.cod_fila       IN  (g_k_cod_fila_generica);
           --
           END;
           --f 2.28
         ELSIF g_tip_mvto_batch = g_k_tip_mvto_batch_endosso THEN
           --
           mx('g_tip_mvto_batch: ', g_tip_mvto_batch);
           --
           SELECT trn.SI
             INTO l_mca_selec
             FROM a2000560 a
            WHERE a.cod_cia        =    p_cod_cia
              AND a.num_propuesta  =    p_num_cotizacion
              AND a.cod_campo      LIKE (p_cod_campo || p_cod_cob || '%')
              AND a.val_campo      =    p_cod_valor;
           --
         END IF;
         --
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
           --
           l_mca_selec := trn.NO;
           --
      END;
      --
      mx('l_mca_selec: ', l_mca_selec);
      --
      mx('F', 'fp_bus_mca_selec');
      --
      RETURN l_mca_selec;
      --
   END fp_bus_mca_selec;
   --
   /* -------------------------------
   ||  Busca se a cobertura possui
   ||  franquia em dados variaves ou
   ||  na c2009040_vcr
   */ -------------------------------
   --
   FUNCTION fp_bus_fran_dv(p_cod_cia        g2000020.cod_cia%TYPE,
                           p_cod_ramo       g2000020.cod_ramo%TYPE,
                           p_cod_cob        g2000020.cod_cob%TYPE)
      RETURN c2000000.val_columna%TYPE
   IS
      --
      l_mca_selec c2000000.val_columna%TYPE;
      --
   BEGIN
      --
      mx('I', 'fp_bus_fran_dv');
      --
      -- EXEMPLO: COBERTURA DE VIDROS POSSUI SUA FANQUICIA ARMAZENADA EM DIFERENTES DADOS VARIAVEIS NA g2000020
      BEGIN
         --
         SELECT DISTINCT trn.SI
            INTO l_mca_selec
           FROM g2000020 g
          WHERE g.cod_cia   = p_cod_cia
            AND g.cod_ramo  = p_cod_ramo
            AND g.cod_cob   = p_cod_cob
            AND g.cod_campo LIKE (g_k_ini_val_franq_dv || '%');
         --
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
           --
           l_mca_selec := trn.NO;
           --
      END;
      --
      mx('F', 'fp_bus_fran_dv');
      --
      RETURN l_mca_selec;
      --
   END fp_bus_fran_dv;
   --
   /* ------------------------------------------------------
   || fp_devuelve_campo_coti
   */ ------------------------------------------------------
   FUNCTION fp_devuelve_val_coti(p_cod_campo a2000560.cod_campo%TYPE)
   RETURN a2000560.val_campo%TYPE IS
   --
   l_cod_cia           a2000560.cod_cia      %TYPE;
   l_num_propuesta     a2000560.num_propuesta%TYPE;
   --
   BEGIN
      --
      mx('I', 'fp_devuelve_campo_coti');
      --
      l_cod_cia       := fp_devuelve_n('cod_cia');
      l_num_propuesta := nvl(fp_devuelve_c('num_propuesta'),
                                              g_num_poliza);
      --
      em_k_a2000560.p_lee(p_cod_cia       => l_cod_cia      ,
                          p_num_propuesta => l_num_propuesta,
                          p_cod_campo     => p_cod_campo    );
      --
      mx('f_val_campo'    , em_k_a2000560.f_val_campo);
      --
      mx('F', 'fp_devuelve_campo_coti');
      --
      RETURN em_k_a2000560.f_val_campo;
      --
   EXCEPTION
      WHEN OTHERS
      THEN
         --
         mx('F', 'fp_devuelve_campo_coti - EXCEPTION');
         --
         RETURN trn.NULO;
         --
   END fp_devuelve_val_coti;
   --
   /* -------------------------------
   ||  Retorna as coberturas de casco
   ||  contratadas na cotacao em um VARCHAR
   ||  separado por virgula
   */ -------------------------------
   --
   FUNCTION fp_verifica_cob_cotacao(p_cod_cia        c2000000.cod_cia%TYPE,
                                    p_cod_ramo       c2000000.cod_ramo%TYPE,
                                    p_num_cotizacion c2000000.num_cotizacion%TYPE,
                                    p_num_simulacion c2009040_vcr.num_simulacion%TYPE,
                                    p_todos_cod_cobs VARCHAR2)
      RETURN VARCHAR2
   IS
      --
      l_cod_cobs_contratadas VARCHAR2(50)  := '';
      --
   BEGIN
      --
      mx('I', 'fp_verifica_cob_cotacao');
      --
      WITH cod_cob_parser AS
       (SELECT regexp_substr(p_todos_cod_cobs, '[^,]+', trn.uno, LEVEL) AS cod_cob
          FROM dual
        CONNECT BY LEVEL <= length(p_todos_cod_cobs) -
                   length(REPLACE(p_todos_cod_cobs,
                                           g_k_separador_vir,
                                           trn.nulo)) + trn.uno)
      SELECT listagg(c.cod_cob, g_k_separador_vir) within GROUP(ORDER BY c.cod_cob) AS cod_cobs_contratadas
        INTO l_cod_cobs_contratadas
        FROM c2009040_vcr c,
             cod_cob_parser p
       WHERE c.cod_cia        = p_cod_cia
         AND c.cod_ramo       = p_cod_ramo
         AND c.num_cotizacion = p_num_cotizacion
         AND c.num_simulacion = p_num_simulacion
         AND c.cod_cob        = p.cod_cob
         AND c.suma_aseg      IS NOT NULL;
      --
      mx('F', 'fp_verifica_cob_cotacao');
      --
      RETURN l_cod_cobs_contratadas;
      --
   END fp_verifica_cob_cotacao;
   --
   /* -------------------------------
   ||  Retorna as coberturas de casco
   ||  contratadas na apolice/endosso
   ||  anterior em um VARCHAR
   ||  separado por virgula
   */ -------------------------------
   --
   FUNCTION fp_verifica_cob_endosso(p_cod_cia        a2000040.cod_cia%TYPE,
                                    p_cod_ramo       a2000040.cod_ramo%TYPE,
                                    p_num_poliza     a2000040.num_poliza%TYPE,
                                    p_num_riesgo     a2000040.num_riesgo%TYPE,
                                    p_todos_cod_cobs VARCHAR2)
      RETURN VARCHAR2
   IS
      --
      l_cod_cobs_contratadas VARCHAR2(50)  := '';
      --
   BEGIN
      --
      mx('I', 'fp_verifica_cob_endosso');
      --
      WITH cod_cob_parser AS
       (SELECT regexp_substr(p_todos_cod_cobs, '[^,]+', trn.uno, LEVEL) AS cod_cob
          FROM dual
        CONNECT BY LEVEL <= length(p_todos_cod_cobs) -
                            length(REPLACE(p_todos_cod_cobs, g_k_separador_vir,trn.nulo)) +
                            trn.uno)
      SELECT listagg(a.cod_cob, g_k_separador_vir) within GROUP(ORDER BY a.cod_cob) AS cod_cobs_contratadas
        INTO l_cod_cobs_contratadas
        FROM a2000040 a,
             cod_cob_parser p
       WHERE a.cod_cia     = p_cod_cia
         AND a.cod_ramo    = p_cod_ramo
         AND a.num_poliza  = p_num_poliza
         AND a.num_riesgo  = p_num_riesgo
         AND a.cod_cob     = p.cod_cob
         AND nvl(a.mca_baja_cob, trn.NO) = trn.NO
         AND a.mca_vigente               = trn.SI
         AND a.mca_vigente_apli          = trn.SI;
      --
      mx('F', 'fp_verifica_cob_endosso');
      --
      RETURN l_cod_cobs_contratadas;
      --
   END fp_verifica_cob_endosso;
   --
   -- I 3.34
  /* ----------------------------------
  ||  fp_valida_nacionalidade:
  */ ----------------------------------
  --
  FUNCTION fp_valida_nacionalidade RETURN BOOLEAN IS
 --
 l_hay             BOOLEAN    := FALSE;
 --
 CURSOR cp_g2109042_vcr(p_cod_marca     g2109042_vcr.cod_marca     %TYPE,
                        p_cod_modelo    g2109042_vcr.cod_modelo    %TYPE,
                        p_cod_submodelo g2109042_vcr.cod_sub_modelo%TYPE) IS
        SELECT cod_configuracao,
               cod_madre,
               cod_nacionalidade
          FROM g2109042_vcr
         WHERE cod_cia        = g_cod_cia
           AND cod_marca      = p_cod_marca
           AND cod_modelo     = p_cod_modelo
           AND cod_sub_modelo = p_cod_submodelo
           AND fec_validez    = (SELECT MAX(FEC_VALIDEZ)
                                   FROM g2109042_vcr
                                  WHERE cod_cia        = g_cod_cia
                                    AND cod_marca      = p_cod_marca
                                    AND cod_modelo     = p_cod_modelo
                                    AND cod_sub_modelo = p_cod_submodelo
                                    AND fec_validez   <= g_fec_efec_spto)
         ORDER BY cod_configuracao,
                  cod_madre,
                  cod_nacionalidade;
 --
 l_reg_auto      cp_g2109042_vcr            %ROWTYPE;
 l_cod_marca     g2109042_vcr.cod_marca     %TYPE;
 l_cod_modelo    g2109042_vcr.cod_modelo    %TYPE;
 l_cod_submodelo g2109042_vcr.cod_sub_modelo%TYPE;
 --
 BEGIN
    --
    mx('I', 'fp_valida_nacionalidade');
    --
    ea_k_231_utils.p_devuelve_dato_cotizacion(p_nom_tabla   => ea_k_231_utils.g_k_tabla_dv
                                                 ,p_nom_columna => 'COD_MARCA'
                                                 ,p_val_campo   => l_cod_marca);

    ea_k_231_utils.p_devuelve_dato_cotizacion(p_nom_tabla   => ea_k_231_utils.g_k_tabla_dv
                                                 ,p_nom_columna => 'COD_MODELO'
                                                 ,p_val_campo   => l_cod_modelo);

    ea_k_231_utils.p_devuelve_dato_cotizacion(p_nom_tabla   => ea_k_231_utils.g_k_tabla_dv
                                                 ,p_nom_columna => 'COD_SUB_MODELO'
                                                 ,p_val_campo   => l_cod_submodelo);
    --
    OPEN cp_g2109042_vcr(l_cod_marca,
                         l_cod_modelo,
                         l_cod_submodelo);
    FETCH cp_g2109042_vcr INTO l_reg_auto;
          l_hay := cp_g2109042_vcr%FOUND;
    CLOSE cp_g2109042_vcr;
    --
    IF l_reg_auto.cod_nacionalidade = 3 THEN
       --
      RETURN TRUE;
      --
    ELSE
      --
      RETURN FALSE;
      --
    END IF;
    --
    EXCEPTION
    WHEN OTHERS THEN
      --
      NULL;
      --
  END fp_valida_nacionalidade;
  -- F 3.34
   /* -------------------------------
   ||  Recebe o tab das coberturas de casco
   ||  e retorno os cod_cob em um VARCHAR
   ||  separado por virgula
   */ -------------------------------
   --
   FUNCTION fp_trata_lista_cob(p_tab_cod_cob_agrupadas rec_tab_cod_cob_agrupadas)
      RETURN VARCHAR2
   IS
      --
      l_cod_cobs VARCHAR2(50)  := '';
      --
   BEGIN
      --
      mx('I', 'fp_trata_lista_cob');
      --
      -- CONCATENA TODOS OS COD_COB EM UMA UNICA VARIAVEL
      FOR i IN p_tab_cod_cob_agrupadas.FIRST..p_tab_cod_cob_agrupadas.LAST
      LOOP
         --
         l_cod_cobs := l_cod_cobs || p_tab_cod_cob_agrupadas(i) || g_k_separador_vir;
         --
      END LOOP;
      --
      -- REMOVE O ULTIMO SEPARADOR
      l_cod_cobs := SUBSTR(l_cod_cobs,trn.CERO,LENGTH(l_cod_cobs) - trn.UNO);
      --
      mx('F', 'fp_trata_lista_cob');
      --
      RETURN l_cod_cobs;
      --
   END fp_trata_lista_cob;
   --
   /* -------------------------------
   ||  Busca na tabela todas os cod_cob
   ||  de casco para aquele conjunto
   */ -------------------------------
   --
   FUNCTION fp_bus_cod_cob_agrupadas(p_cod_cia                df_cmn_nwt_xx_vrb_cnc.cmp_val%TYPE,
                                     p_cod_ramo               df_cmn_nwt_xx_vrb_cnc.lob_val%TYPE,
                                     p_vrb_nam                df_cmn_nwt_xx_vrb_cnc.vrb_nam%TYPE)
      RETURN rec_tab_cod_cob_agrupadas
   IS
      --
      l_tab_cod_cob_agrupadas rec_tab_cod_cob_agrupadas;
      --
   BEGIN
      --
      mx('I', 'fp_bus_cod_cob_agrupadas');
      --
      l_tab_cod_cob_agrupadas := rec_tab_cod_cob_agrupadas();
      --
      -- BUSCA NA TABELA TODOS OS COD_COB PARAMETRIZADOS PARA O AGRUPAMENTO PASSADO
      FOR cob IN (SELECT DISTINCT a.cnc_vrb_val AS cod_cob
                             FROM df_cmn_nwt_xx_vrb_cnc a
                            WHERE a.cmp_val         = p_cod_cia
                              AND a.lob_val         = p_cod_ramo
                              and a.vrb_nam         LIKE  (p_vrb_nam || '%')
                              AND a.mdt_val         = EM.cod_modalidad_gen
                              AND a.crn_val         = DC.cod_mon_gen
                              AND a.cvr_val         = EM.cod_cob_gen
                              AND a.frs_lvl_val     = DC.cod_nivel1_gen
                              AND a.scn_lvl_val     = DC.cod_nivel2_gen
                              AND a.thr_lvl_val     = DC.cod_nivel3_gen
                              AND a.frs_dst_hnl_val = DC.cod_canal1_gen
                              AND a.scn_dst_hnl_val = DC.cod_canal2_gen
                              AND a.thr_dst_hnl_val = DC.cod_canal3_gen
                              AND a.agn_val         = TRN.cod_tercero_gen
                              AND a.gpp_val         = 'ZZZZZZZZZZZZZ'
                              AND a.del_val         = EM.num_contrato_gen
                              AND a.sbl_val         = EM.num_subcontrato_gen
                              AND a.ply_val         = 'ZZZZZZZZZZZZZ'
                              AND a.cnc_vrb_val     IN (SELECT g40.cod_Cob
                                                          FROM g2109040_vcr g40,
                                                               g2109041_vcr g41
                                                         WHERE g40.val_clave_formula = g_val_clave_formula
                                                           AND g40.val_clave_formula = g41.val_clave_formula
                                                           AND g40.cod_Cob = g41.cod_Cob
                                                          AND (   g40.mca_contrata = 'S' AND g41.mca_contrata_cob = 'S'
                                                               OR g40.mca_contrata = 'N' AND g41.mca_contrata_cob = 'S'
                                                               OR g40.mca_contrata = 'S' AND g41.mca_contrata_cob = 'N'
                                                               --OR g40.mca_contrata = 'N' AND g41.mca_contrata_cob = 'N'
                                                               )
                                                       )
                              AND a.vld_dat          = (SELECT MAX(vld_dat)
                                                          FROM df_cmn_nwt_xx_vrb_cnc b
                                                         WHERE b.cmp_val         = a.cmp_val
                                                           AND b.lob_val         = a.lob_val
                                                           AND b.mdt_val         = a.mdt_val
                                                           AND b.crn_val         = a.crn_val
                                                           AND b.cvr_val         = a.cvr_val
                                                           AND b.frs_lvl_val     = a.frs_lvl_val
                                                           AND b.scn_lvl_val     = a.scn_lvl_val
                                                           AND b.thr_lvl_val     = a.thr_lvl_val
                                                           AND b.frs_dst_hnl_val = a.frs_dst_hnl_val
                                                           AND b.scn_dst_hnl_val = a.scn_dst_hnl_val
                                                           AND b.thr_dst_hnl_val = a.thr_dst_hnl_val
                                                           AND b.gpp_val         = a.gpp_val
                                                           AND b.del_val         = a.del_val
                                                           AND b.sbl_val         = a.sbl_val
                                                           AND b.ply_val         = a.ply_val
                                                           AND b.agn_val         = a.agn_val
                                                           AND b.vrb_nam         = a.vrb_nam
                                                           AND b.cnc_vrb_val     = a.cnc_vrb_val)
                  ORDER BY TO_NUMBER(cod_cob))
      LOOP
         --
         l_tab_cod_cob_agrupadas.EXTEND(1);
         l_tab_cod_cob_agrupadas(l_tab_cod_cob_agrupadas.LAST) := cob.cod_cob;
         --
      END LOOP;
      --
      mx('F', 'fp_bus_cod_cob_agrupadas');
      --
      RETURN l_tab_cod_cob_agrupadas;
      --
   END fp_bus_cod_cob_agrupadas;
   --
   /* -------------------------------
   ||  Busca na tabela todas os cod_cob
   ||  de casco para aquele conjunto
   */ -------------------------------
   --
   FUNCTION fp_bus_cod_cob_casco(p_cod_cia                df_cmn_nwt_xx_vrb_cnc.cmp_val%TYPE,
                                 p_cod_ramo               df_cmn_nwt_xx_vrb_cnc.lob_val%TYPE,
                                 p_vrb_nam                df_cmn_nwt_xx_vrb_cnc.vrb_nam%TYPE)
      RETURN rec_tab_cod_cob_agrupadas
   IS
      --
      l_tab_cod_cob_casco rec_tab_cod_cob_agrupadas;
      --
   BEGIN
      --
      mx('I', 'fp_bus_cod_cob_casco');
      --
      l_tab_cod_cob_casco := rec_tab_cod_cob_agrupadas();
      --
      -- BUSCA NA TABELA TODOS OS COD_COB PARAMETRIZADOS PARA O AGRUPAMENTO PASSADO
      FOR cob IN (SELECT DISTINCT a.cnc_vrb_val AS cod_cob
                             FROM df_cmn_nwt_xx_vrb_cnc a
                            WHERE a.cmp_val         = p_cod_cia
                              AND a.lob_val         = p_cod_ramo
                              and a.vrb_nam         LIKE  (p_vrb_nam || '%')
                              AND a.mdt_val         = EM.cod_modalidad_gen
                              AND a.crn_val         = DC.cod_mon_gen
                              AND a.cvr_val         = EM.cod_cob_gen
                              AND a.frs_lvl_val     = DC.cod_nivel1_gen
                              AND a.scn_lvl_val     = DC.cod_nivel2_gen
                              AND a.thr_lvl_val     = DC.cod_nivel3_gen
                              AND a.frs_dst_hnl_val = DC.cod_canal1_gen
                              AND a.scn_dst_hnl_val = DC.cod_canal2_gen
                              AND a.thr_dst_hnl_val = DC.cod_canal3_gen
                              AND a.agn_val         = TRN.cod_tercero_gen
                              AND a.gpp_val         = 'ZZZZZZZZZZZZZ'
                              AND a.del_val         = EM.num_contrato_gen
                              AND a.sbl_val         = EM.num_subcontrato_gen
                              AND a.ply_val         = 'ZZZZZZZZZZZZZ'
                              AND a.vld_dat          = (SELECT MAX(vld_dat)
                                                          FROM df_cmn_nwt_xx_vrb_cnc b
                                                         WHERE b.cmp_val         = a.cmp_val
                                                           AND b.lob_val         = a.lob_val
                                                           AND b.mdt_val         = a.mdt_val
                                                           AND b.crn_val         = a.crn_val
                                                           AND b.cvr_val         = a.cvr_val
                                                           AND b.frs_lvl_val     = a.frs_lvl_val
                                                           AND b.scn_lvl_val     = a.scn_lvl_val
                                                           AND b.thr_lvl_val     = a.thr_lvl_val
                                                           AND b.frs_dst_hnl_val = a.frs_dst_hnl_val
                                                           AND b.scn_dst_hnl_val = a.scn_dst_hnl_val
                                                           AND b.thr_dst_hnl_val = a.thr_dst_hnl_val
                                                           AND b.gpp_val         = a.gpp_val
                                                           AND b.del_val         = a.del_val
                                                           AND b.sbl_val         = a.sbl_val
                                                           AND b.ply_val         = a.ply_val
                                                           AND b.agn_val         = a.agn_val
                                                           AND b.vrb_nam         = a.vrb_nam
                                                           AND b.cnc_vrb_val     = a.cnc_vrb_val)
                  ORDER BY TO_NUMBER(cod_cob))
      LOOP
         --
         l_tab_cod_cob_casco.EXTEND(1);
         l_tab_cod_cob_casco(l_tab_cod_cob_casco.LAST) := cob.cod_cob;
         --
      END LOOP;
      --
      mx('F', 'fp_bus_cod_cob_casco');
      --
      RETURN l_tab_cod_cob_casco;
      --
   END fp_bus_cod_cob_casco;
   --
   /* ------------------------------------------------------
   || Retorna se aquele conjunto de coberturas de casco
   || esta selecionado
   */ ------------------------------------------------------
   --
   FUNCTION fp_bus_mca_selec_casco(p_cod_cia                a2000030.cod_cia%TYPE,
                                   p_cod_ramo               a2000030.cod_ramo%TYPE,
                                   p_num_cotizacion         a2000030.num_poliza%TYPE,
                                   p_num_simulacion         c2009040_vcr.num_simulacion%TYPE,
                                   p_tab_cod_cob_casco      rec_tab_cod_cob_agrupadas)
   RETURN c2000000.val_columna%TYPE
   IS
      --
      l_cod_cobs                VARCHAR2(50)  := '';
      l_todos_cod_cobs          VARCHAR2(50)  := '';
      l_cod_cobs_contratadas    VARCHAR2(50)  := '';
      l_mca_selec               VARCHAR2(1) := trn.NO;
      --
      l_tab_todos_cod_cob_casco rec_tab_cod_cob_agrupadas;
      --
   BEGIN
      --
      mx('I', 'fp_bus_mca_selec_casco');
      --
      -- RETORNA LISTA DE COD_COBS DO AGRUPAMENTO PARA SER COMPARADO COM OS COD_COB CONTRATADOS
      l_cod_cobs := fp_trata_lista_cob(p_tab_cod_cob_casco);
      --
      -- BUSCA TODOS OS COD_COB DE TODOS OS AGRUPAMENTOS PARAMETRIZADOS PARA O COD_RAMO
      l_tab_todos_cod_cob_casco := fp_bus_cod_cob_casco(p_cod_cia,
                                                        p_cod_ramo,
                                                        g_k_cod_campo_cob_casco);
      --
      -- RETORNA LISTA DE COD_COBS DE TODOS OS AGRUPAMENTOS PARA SER USANDO NO 'IN' DA CONSULTA PRINCIPAL
      l_todos_cod_cobs := fp_trata_lista_cob(l_tab_todos_cod_cob_casco);
      --
      -- VERIFICA DE TODOS OS COD_COB PARAMETRIZADOS COMO DE CASCO PARA O COD_RAMO, QUAIS ESTAO SELECIONADOS
      -- COD_COB_PARSER TRANSFORMA VARIAVEL VARCHAR COM OS COD_COB EM SUBCONSULTA PARA SER USANDO EM IN
      IF g_tip_mvto_batch = g_k_tip_mvto_batch_cotacao THEN
         --
         l_cod_cobs_contratadas := fp_verifica_cob_cotacao(p_cod_cia,
                                                           p_cod_ramo,
                                                           p_num_cotizacion,
                                                           p_num_simulacion,
                                                           l_todos_cod_cobs);
         --
      ELSIF g_tip_mvto_batch = g_k_tip_mvto_batch_endosso THEN
         --
         l_cod_cobs_contratadas := fp_verifica_cob_endosso(p_cod_cia,
                                                           p_cod_ramo,
                                                           p_num_cotizacion,
                                                           trn.uno,
                                                           l_todos_cod_cobs);
         --
      END IF;
      --
      -- COMPARA LISTA DE COD_COB DO AGRUPAMENTO COM A DOS CONTRATADAS E VALIDA SE AGRUPAMENTO ESTA SELECIONADO
      IF l_cod_cobs = l_cod_cobs_contratadas THEN
         --
         l_mca_selec := trn.SI;
         --
      END IF;
      --
      mx('F', 'fp_bus_mca_selec_casco');
      --
      RETURN l_mca_selec;
      --
   END fp_bus_mca_selec_casco;
   --
   /* ------------------------------------------------------
   || Busca as coberturas de casco
   */ ------------------------------------------------------
   --
   FUNCTION fp_bus_coberturas_casco (p_cod_cia            c2009040_vcr.cod_cia%TYPE,
                                     p_cod_ramo           c2009040_vcr.cod_ramo%TYPE,
                                     p_num_cotizacion     c2009040_vcr.num_cotizacion%TYPE,
                                     p_num_simulacion     c2009040_vcr.num_simulacion%TYPE,
                                     p_cod_modalidad      a1002090.cod_modalidad%TYPE,
                                     p_val_sub_modelo     c2000000.val_columna%TYPE,
                                     p_fec_validez_tarifa c2000000.val_columna%TYPE,
                                     p_val_clave_formula  g2109040_vcr.val_clave_formula%TYPE,
                                     p_cod_consulta       NUMBER)
      RETURN rec_tab_det_cob
   IS
      --
      c_dados_variaveis_cob ref_cursor;
      --
      l_devuelve_fila      VARCHAR2(850);
      l_fila_dados         TYPTAB_DADOS_COT;
      l_fila_reg           TYPREG_DADOS_COT;
      ldv                  rec_atri_cob;
      --
      l_detalhe_cobertura  rec_det_cob;
      l_valor_lim_indeni   rec_val_lim_inde;
      l_atributo_cobertura rec_atri_cob;
      l_valor_franquia     rec_val_franq;
      l_retorno_cob_casci  rec_tab_det_cob;
      l_tab_cod_cob_casco  rec_tab_cod_cob_agrupadas;
      --
      l_num_max_spto       a2000030.num_spto%TYPE;
      --
      l_count              number;
      l_cod_cobs           VARCHAR2(50);
      --
      CURSOR c_agrupamento_cob IS
        --
        SELECT DISTINCT substr(a.vrb_nam,
                        instr(a.vrb_nam, g_k_pref_simulacion) + trn.uno,
                        length(a.vrb_nam)) AS cod_cob_casco,
                        a.vrb_nam AS cod_campo
          FROM df_cmn_nwt_xx_vrb_cnc a
         WHERE a.cmp_val         = p_cod_cia
           AND a.lob_val         = p_cod_ramo
           AND a.vrb_nam         LIKE  (g_k_cod_campo_cob_casco || g_k_pref_simulacion || '%')
           AND a.mdt_val         = EM.cod_modalidad_gen
           AND a.crn_val         = DC.cod_mon_gen
           AND a.cvr_val         = EM.cod_cob_gen
           AND a.frs_lvl_val     = DC.cod_nivel1_gen
           AND a.scn_lvl_val     = DC.cod_nivel2_gen
           AND a.thr_lvl_val     = DC.cod_nivel3_gen
           AND a.frs_dst_hnl_val = DC.cod_canal1_gen
           AND a.scn_dst_hnl_val = DC.cod_canal2_gen
           AND a.thr_dst_hnl_val = DC.cod_canal3_gen
           AND a.agn_val         = TRN.cod_tercero_gen
           AND a.gpp_val         = 'ZZZZZZZZZZZZZ'
           AND a.del_val         = EM.num_contrato_gen
           AND a.sbl_val         = EM.num_subcontrato_gen
           AND a.ply_val         = 'ZZZZZZZZZZZZZ'
           AND a.vld_dat         = (SELECT MAX(vld_dat)
                                      FROM df_cmn_nwt_xx_vrb_cnc b
                                     WHERE b.cmp_val         = a.cmp_val
                                       AND b.lob_val         = a.lob_val
                                       AND b.mdt_val         = a.mdt_val
                                       AND b.crn_val         = a.crn_val
                                       AND b.cvr_val         = a.cvr_val
                                       AND b.frs_lvl_val     = a.frs_lvl_val
                                       AND b.scn_lvl_val     = a.scn_lvl_val
                                       AND b.thr_lvl_val     = a.thr_lvl_val
                                       AND b.frs_dst_hnl_val = a.frs_dst_hnl_val
                                       AND b.scn_dst_hnl_val = a.scn_dst_hnl_val
                                       AND b.thr_dst_hnl_val = a.thr_dst_hnl_val
                                       AND b.gpp_val         = a.gpp_val
                                       AND b.del_val         = a.del_val
                                       AND b.sbl_val         = a.sbl_val
                                       AND b.ply_val         = a.ply_val
                                       AND b.agn_val         = a.agn_val
                                       AND b.vrb_nam         = a.vrb_nam
                                       AND b.cnc_vrb_val     = a.cnc_vrb_val)
       ORDER BY cod_cob_casco;
      /* ------------------------------------------------------
      || Retorna nome da cobertura de casco composta
      || pelas sub coberturas
      */ ------------------------------------------------------
      --
     FUNCTION fp_trata_nom_cob_casco(p_tab_cod_cob_casco rec_tab_cod_cob_agrupadas)
        RETURN VARCHAR2
     IS
        --
        l_cod_cobs VARCHAR2(50)  := '';
        l_nom_cobs VARCHAR2(400) := '';
        --
        l_nom_cob_casco VARCHAR2(400) := '';
        --
     BEGIN
        --
        mx('I', 'fp_trata_nom_cob_casco');
        --
        -- RETORNA LISTA DE COD_COBS DO AGRUPAMENTO PARA SER USANDO NO 'IN' DA CONSULTA PRINCIPAL
        l_cod_cobs := fp_trata_lista_cob(p_tab_cod_cob_casco);
        --
        -- BUSCA O NOME DAS COBERTURAS DO AGRUPAMENTO
        -- COD_COB_PARSER TRANSFORMA VARIAVEL VARCHAR COM OS COD_COB EM SUBCONSULTA PARA SER USANDO EM IN
        WITH cod_cob_parser AS (SELECT regexp_substr(l_cod_cobs,
                                                     '[^,]+',
                                                     trn.UNO,
                                                     LEVEL) AS cod_cob
                                 FROM dual
                                 CONNECT BY LEVEL <= LENGTH(l_cod_cobs) - LENGTH(REPLACE(l_cod_cobs,
                                                                                         g_k_separador_vir,
                                                                                         trn.NULO)) + trn.UNO)
         SELECT LISTAGG(xx.row_nam, ',' || ' ') WITHIN GROUP (ORDER BY xx.row_nam) AS nom_cobs
         INTO l_nom_cobs
            FROM (
                SELECT
                   x.row_nam
                FROM
                   df_cmn_nwt_xx_vrb_cnc x,
                   cod_cob_parser        p
                WHERE x.cmp_val      = p_cod_cia
                   AND x.lob_val     = TO_CHAR(p_cod_ramo)
                   AND x.vrb_nam     LIKE (g_k_cod_campo_cob_casco || g_k_pref_simulacion || '%')
                   AND x.cnc_vrb_val IN   (p.cod_cob)
                GROUP BY
                   x.row_nam ) xx;
        --
        l_nom_cob_casco := 'Casco: ' || l_nom_cobs;
        --
        mx('F', 'fp_trata_nom_cob_casco');
        --
        RETURN l_nom_cob_casco;
        --
      END fp_trata_nom_cob_casco;
      --
   BEGIN
     --
     mx('I', 'fp_bus_coberturas_casco');
     --
     l_retorno_cob_casci := rec_tab_det_cob();
     --
     -- BUSCA TODOS OS AGRUPAMENTOS DISPONIVEIS PARA O COD_RAMO
     FOR cob IN c_agrupamento_cob
      LOOP
         --
         -- RETORNA TODOS OS COD_COB DO AGRUPAMENTO E OS TRANSFORMA EM UMA LISTA
         l_tab_cod_cob_casco := fp_bus_cod_cob_casco(p_cod_cia,
                                                     p_cod_ramo,
                                                     cob.cod_campo);
         --
         l_cod_cobs := fp_trata_lista_cob(l_tab_cod_cob_casco);
         --
         WITH cod_cob_parser AS
          (SELECT regexp_substr(l_cod_cobs, '[^,]+', trn.uno, LEVEL) AS cod_cob
             FROM dual
           CONNECT BY LEVEL <=
                      length(l_cod_cobs) -
                      length(REPLACE(l_cod_cobs, g_k_separador_vir, trn.nulo)) +
                      trn.uno)
         SELECT COUNT(r.cod_cob)
           INTO l_count
           FROM g2109040_vcr r
          WHERE r.cod_cia           = p_cod_cia
            AND r.val_clave_formula = p_val_clave_formula
            AND r.mca_baja          = trn.NO
            AND r.mca_contrata      = trn.NO
            AND r.fec_validez       =  (SELECT MAX(ii.fec_validez)
                                          FROM g2109040_vcr ii
                                         WHERE ii.cod_cia           = r.cod_cia
                                           AND ii.val_clave_formula = r.val_clave_formula
                                           AND ii.cod_cob           = r.cod_cob
                                           AND ii.fec_validez      <= to_date(NVL(p_fec_validez_tarifa,to_char(trunc(sysdate),'ddmmrrrr')), 'ddmmyyyy'))
            AND r.cod_cob IN (SELECT cod_cob FROM cod_cob_parser)
            AND r.cod_cob IN (SELECT j.cod_cob
                                FROM g2109041_vcr j
                               WHERE j.cod_cia           = r.cod_cia
                                 AND j.val_clave_formula = r.val_clave_formula
                                 AND j.cod_cob           = r.cod_cob
                                 AND j.fec_validez       = r.fec_validez
                                 AND j.mca_baja          = trn.no
                                 AND j.mca_contrata_cob  = trn.no);
         --
         IF p_cod_consulta = g_k_cod_cons_cob_bloqueada THEN
           --
           IF l_count > trn.CERO AND fp_bus_mca_selec_casco(p_cod_cia,
                                                            p_cod_ramo,
                                                            p_num_cotizacion,
                                                            p_num_simulacion,
                                                            l_tab_cod_cob_casco)= trn.SI THEN
             --
             l_detalhe_cobertura.cod_cob       := cob.cod_cob_casco;
             --
             -- GERA NOME DO AGRUPAMENTO
             l_detalhe_cobertura.nom_cob       := fp_trata_nom_cob_casco(l_tab_cod_cob_casco);
             --
             -- VERIFICA SE AGRUPAMENTO ESTA SELECIONADO
             l_detalhe_cobertura.mca_selec_cob := trn.NO;
             --
             l_detalhe_cobertura.mca_modif_cap := trn.NO;
             --
             l_detalhe_cobertura.tab_val_lim_inde := rec_tab_val_lim_inde();
             --
             l_valor_lim_indeni.cod_campo     := 'SUMA_ASEG_' || TO_CHAR(cob.cod_cob_casco);
             --
             l_valor_lim_indeni.val_campo     := trn.CERO;
             --
             -- VERIFICA SE A INDENIZACAO ESTA CALCULADA
             --
             l_valor_lim_indeni.mca_val_defec := NVL(fp_bus_mca_defecto_end_casco(p_cod_cia,
                                                                                  p_cod_ramo,
                                                                                  p_num_cotizacion,
                                                                                  trn.UNO,
                                                                                  l_cod_cobs), trn.NO);
             --
             l_detalhe_cobertura.tab_val_lim_inde.EXTEND(1);
             l_detalhe_cobertura.tab_val_lim_inde(l_detalhe_cobertura.tab_val_lim_inde.LAST) := l_valor_lim_indeni;
             --
             l_detalhe_cobertura.tab_atri_lista := rec_tab_atri_lista();
             --
             -- VERIFICA NA g2000020 TODOS OS DADOS VARIAVEIS DAS COBERTURAS DO AGRUPAMENTO QUE POSSUEM LISTA E NAO SAO RELACIONADOS A FRANQUA (VAL_FRANQ)
             -- COD_COB_PARSER TRANSFORMA VARIAVEL VARCHAR COM OS COD_COB EM SUBCONSULTA PARA SER USANDO EM IN
             FOR dv IN (WITH cod_cob_parser AS (SELECT regexp_substr(l_cod_cobs, '[^,]+', trn.UNO, LEVEL) AS cod_cob
                                                  FROM dual
                                                CONNECT BY LEVEL <=
                                                           length(l_cod_cobs) -
                                                           length(REPLACE(l_cod_cobs, g_k_separador_vir, trn.NULO)) +
                                                           trn.UNO)
                      SELECT g.cod_campo,
                             g.cod_cob,
                             g.nom_pgm_help,
                             g.nom_tabla_valida,
                             g.cod_version
                          FROM g2000020 g,
                               cod_cob_parser p
                         WHERE g.cod_cia      = p_cod_cia
                           AND g.cod_ramo     = p_cod_ramo
                           AND (   g.nom_pgm_help = g_k_nom_pgm_help_fixo
                                OR g.nom_pgm_help = g_k_nom_pgm_help_dinamico)
                           AND g.cod_cob      = p.cod_cob
                           AND g.cod_campo    NOT LIKE (g_k_ini_val_franq_dv || '%')
                        ORDER BY g.num_secu)
             LOOP
                --
                l_detalhe_cobertura.tab_atri_lista.EXTEND(1);
                l_detalhe_cobertura.tab_atri_lista(l_detalhe_cobertura.tab_atri_lista.LAST) := rec_tab_atri_cob();
                --
                IF dv.nom_pgm_help = g_k_nom_pgm_help_fixo THEN
                   --RETORNA LISTA VARIAVEL RELACIONADA AOS DADOS VARIAVEIS DAS COBERTURAS
                   OPEN  c_dados_variaveis_cob
                    FOR  SELECT l.cod_campo as cod_campo,
                                l.cod_valor as val_campo,
                                l.nom_valor as txt_campo,
                                NULL        as mca_selec
                           FROM g2990006 l
                          WHERE l.cod_cia   = p_cod_cia
                            AND l.cod_ramo  = p_cod_ramo
                            AND l.cod_campo = dv.cod_campo
                       ORDER BY l.cod_valor;
                   --
                ELSE
                  --RETORNA LISTA FIXA RELACIONADA AOS DADOS VARIAVEIS DAS COBERTURAS
                   trn_k_global.asigna('COD_CIA'          , p_cod_cia                                                    );
                   trn_k_global.asigna('COD_RAMO'         , p_cod_ramo                                                   );
                   trn_k_global.asigna('COD_CAMPO'        , dv.cod_campo                                                 );
                   trn_k_global.asigna('DVCOD_CAMPO'      , dv.cod_campo                                                 );
                   trn_k_global.asigna('NUM_RIESGO'       , trn.UNO                                                      );
                   trn_k_global.asigna('DVCOD_MODALIDAD'  , p_cod_modalidad                                              );
                   trn_k_global.asigna('NUM_POLIZA'       , p_num_cotizacion                                             );
                   trn_k_global.asigna('NUM_COTIZACION'   , p_num_cotizacion                                             );
                   trn_k_global.asigna('COD_MON'          , trn_k_global.cod_mon                                         );
                   trn_k_global.asigna('COD_COB'          , dv.cod_cob                                                   );
                   trn_k_global.asigna('COD_NIVEL1'       , DC.cod_nivel1_gen                                            );
                   trn_k_global.asigna('COD_NIVEL2'       , DC.cod_nivel2_gen                                            );
                   trn_k_global.asigna('COD_NIVEL3'       , DC.cod_nivel3_gen                                            );
                   trn_k_global.asigna('COD_CANAL1'       , dc.COD_CANAL1_GEN                                            );
                   trn_k_global.asigna('COD_CANAL2'       , dc.COD_CANAL2_GEN                                            );
                   trn_k_global.asigna('COD_CANAL3'       , dc.COD_CANAL3_GEN                                            );
                   trn_k_global.asigna('COD_AGT'          , g_k_cod_agt_generico                                         );
                   trn_k_global.asigna('FEC_EFEC_SPTO'    , to_char(trunc(sysdate),'ddmmrrrr')                           );
                   trn_k_global.asigna('FEC_VALIDEZ'      , to_char(trunc(sysdate),'ddmmrrrr')                           );
                   trn_k_global.asigna('DVTIP_SEGMENTO'   , trn_k_df_cmn_nwt_xx_cnn.f_vrb_nam_val('DVTIP_SEGMENTO_DEFEC'));
                   --
                   mx('COBERTURAS DE CASCO - nom_tabla_valida ', dv.nom_tabla_valida);
                   mx('COBERTURAS DE CASCO - dv.cod_version   ', dv.cod_version     );
                   mx('COBERTURAS DE CASCO - dv.cod_campo     ', dv.cod_campo       );
                   --dbms_output.put_line('COBERTURAS DE CASCO - nom_tabla_valida :' || dv.nom_tabla_valida);
                   --dbms_output.put_line('COBERTURAS DE CASCO - dv.cod_version   :' || dv.cod_version     );
                   --dbms_output.put_line('COBERTURAS DE CASCO - dv.cod_campo     :' || dv.cod_campo       );
                   --
                   IF dv.nom_tabla_valida = 'X2990006_VCR' THEN em_p_lista_dinamica_dv; END IF;
                   --
                   trn_k_lv.p_query(dv.nom_tabla_valida, dv.cod_version);
                   --
                   l_fila_dados := TYPTAB_DADOS_COT();
                   l_fila_reg   := TYPREG_DADOS_COT.autocreate;
                   --
                   mx('COBERTURAS DE CASCO - LISTA DE VALORES ---- ', '------------------');
                   --dbms_output.put_line('COBERTURAS DE CASCO - LISTA DE VALORES ----  ------------------');
                   --
                   LOOP
                      --
                      l_devuelve_fila := trn_k_lv.f_devuelve_fila(NULL);
                      --
                      --mx('COBERTURAS DE CASCO - l_devuelve_fila : ' || l_devuelve_fila);
                      --
                      EXIT WHEN l_devuelve_fila IS NULL;
                      --
            mx('l_devuelve_fila', l_devuelve_fila);
            --
                      l_fila_reg.cod_campo := substr(l_devuelve_fila, 0, INSTR(l_devuelve_fila, '~') - 1) ;
                      l_fila_reg.val_campo := substr(l_devuelve_fila, INSTR(l_devuelve_fila, '~') + 1, INSTR(l_devuelve_fila, '[') - (LENGTH(l_fila_reg.cod_campo) + 2));
                      --
                      mx('COBERTURAS DE CASCO - l_fila_reg.cod_campo  ', l_fila_reg.cod_campo);
                      mx('COBERTURAS DE CASCO - l_fila_reg.val_campo  ', l_fila_reg.val_campo);
                      mx('------------------------------------------- ', '------------------');
                      --dbms_output.put_line('COBERTURAS DE CASCO - l_fila_reg.cod_campo  :' || l_fila_reg.cod_campo);
                      --dbms_output.put_line('COBERTURAS DE CASCO - l_fila_reg.val_campo  :' || l_fila_reg.val_campo);
                      --dbms_output.put_line('-------------------------------------------  ------------------');
                      --
                      l_fila_dados.EXTEND(1);
                      l_fila_dados(l_fila_dados.LAST) := l_fila_reg;

                      --
                   END LOOP;
                   --
                   --trn_k_global.borra_todas;
                   --
                   OPEN  c_dados_variaveis_cob
                    FOR   SELECT dv.cod_campo        AS cod_campo,
                                 x0000000.cod_campo  AS val_campo,
                                 x0000000.val_campo  AS txt_campo,
                                 NULL             AS mca_selec
                            FROM TABLE(CAST(l_fila_dados AS TYPTAB_DADOS_COT)) x0000000;
                END IF;
                --
                LOOP FETCH c_dados_variaveis_cob INTO ldv;
                 ---
                 EXIT WHEN c_dados_variaveis_cob%NOTFOUND;
                   --
                   l_atributo_cobertura.cod_campo := ldv.cod_campo;
                   --
                   l_atributo_cobertura.val_campo := ldv.val_campo;
                   --
                   l_atributo_cobertura.txt_campo := ldv.txt_campo;
                   --
                   -- VERIFICA SE O ITEM DA LISTA CONSTA COMO SELECIONADO PARA ESTA COTACAO
                   l_atributo_cobertura.mca_selec := fp_bus_mca_selec(p_cod_cia,
                                                                      p_cod_ramo,
                                                                      p_num_cotizacion,
                                                                      ldv.cod_campo,
                                                                      ldv.val_campo,
                                                                      dv.cod_cob,
                                                                      NULL);
                   --
                   l_detalhe_cobertura.tab_atri_lista(l_detalhe_cobertura.tab_atri_lista.LAST).EXTEND(1);
                   l_detalhe_cobertura.tab_atri_lista(l_detalhe_cobertura.tab_atri_lista.LAST)(l_detalhe_cobertura.tab_atri_lista(l_detalhe_cobertura.tab_atri_lista.LAST).LAST) := l_atributo_cobertura;
                   --
                 END LOOP;
                --
             END LOOP;
             --
             l_detalhe_cobertura.tab_val_franq := rec_tab_val_franq();
             l_detalhe_cobertura.val_premio    := trn.NULO           ;
             --
             -- SE AGRUPAMENTO FOI CALCULADO, RETORNA FRANQUIA
             --
             -- COD_COB_PARSER TRANSFORMA VARIAVEL VARCHAR COM OS COD_COB EM SUBCONSULTA PARA SER USANDO EM IN
             --
             l_valor_franquia.cod_campo := g_k_ini_val_franq_dv || '_' || cob.cod_cob_casco;
             --
             l_valor_franquia.txt_campo := trn.NULO;
             --
             l_valor_franquia.val_campo := fp_bus_val_franq_cob_endosso(p_cod_cia,
                                                                        p_cod_ramo,
                                                                        p_num_cotizacion,
                                                                        trn.uno,
                                                                        l_cod_cobs);
             --
             l_detalhe_cobertura.tab_val_franq.EXTEND(1);
             l_detalhe_cobertura.tab_val_franq(l_detalhe_cobertura.tab_val_franq.LAST) := l_valor_franquia;
             --
             BEGIN
               --
               l_num_max_spto := em_f_max_spto(p_cod_cia => p_cod_cia,
                                               p_num_poliza => p_num_cotizacion,
                                               p_num_spto => trn.nulo);
               --
             EXCEPTION
               WHEN OTHERS THEN
                 --
                 l_num_max_spto := trn.cero;
             END;
             --
             -- BUSCA VALOR DO PREMIO DO AGRUPAMENTO
             l_detalhe_cobertura.val_premio := fp_bus_val_premio_cob_endosso(p_cod_cia,
                                                                             p_cod_ramo,
                                                                             p_num_cotizacion,
                                                                             l_num_max_spto,
                                                                             trn.uno,
                                                                             l_cod_cobs);
             --
             --
             l_retorno_cob_casci.EXTEND(1);
             l_retorno_cob_casci(l_retorno_cob_casci.LAST) := l_detalhe_cobertura;
             --
           END IF;
           --
         ELSE
           --
           IF l_count = trn.CERO THEN
             --
             l_detalhe_cobertura.cod_cob       := cob.cod_cob_casco;
             --
             -- GERA NOME DO AGRUPAMENTO
             l_detalhe_cobertura.nom_cob       := fp_trata_nom_cob_casco(l_tab_cod_cob_casco);
             --
             -- VERIFICA SE AGRUPAMENTO ESTA SELECIONADO
             l_detalhe_cobertura.mca_selec_cob := fp_bus_mca_selec_casco(p_cod_cia,
                                                                         p_cod_ramo,
                                                                         p_num_cotizacion,
                                                                         p_num_simulacion,
                                                                         l_tab_cod_cob_casco);
             --
             l_detalhe_cobertura.mca_modif_cap := trn.NO;
             --
             l_detalhe_cobertura.tab_val_lim_inde := rec_tab_val_lim_inde();
             --
             l_valor_lim_indeni.cod_campo     := 'SUMA_ASEG_' || TO_CHAR(cob.cod_cob_casco);
             --
             l_valor_lim_indeni.val_campo     := p_val_sub_modelo;
             --
             -- VERIFICA SE A INDENIZACAO ESTA CALCULADA
             IF g_tip_mvto_batch = g_k_tip_mvto_batch_cotacao THEN
               --
               l_valor_lim_indeni.mca_val_defec := NVL(fp_bus_mca_defecto(p_cod_cia,
                                                                          p_cod_ramo,
                                                                          p_num_cotizacion,
                                                                          p_num_simulacion,
                                                                          l_cod_cobs,
                                                                          p_val_sub_modelo),
                                                       trn.NO);
               --
             ELSIF g_tip_mvto_batch = g_k_tip_mvto_batch_endosso THEN
               --
               l_valor_lim_indeni.mca_val_defec := NVL(fp_bus_mca_defecto_end_casco(p_cod_cia,
                                                                                    p_cod_ramo,
                                                                                    p_num_cotizacion,
                                                                                    trn.UNO,
                                                                                    l_cod_cobs), trn.NO);
               --
             END IF;
             --
             l_detalhe_cobertura.tab_val_lim_inde.EXTEND(1);
             l_detalhe_cobertura.tab_val_lim_inde(l_detalhe_cobertura.tab_val_lim_inde.LAST) := l_valor_lim_indeni;
             --
             l_detalhe_cobertura.tab_atri_lista := rec_tab_atri_lista();
             --
             -- VERIFICA NA g2000020 TODOS OS DADOS VARIAVEIS DAS COBERTURAS DO AGRUPAMENTO QUE POSSUEM LISTA E NAO SAO RELACIONADOS A FRANQUA (VAL_FRANQ)
             -- COD_COB_PARSER TRANSFORMA VARIAVEL VARCHAR COM OS COD_COB EM SUBCONSULTA PARA SER USANDO EM IN
             FOR dv IN (WITH cod_cob_parser AS (SELECT regexp_substr(l_cod_cobs, '[^,]+', trn.UNO, LEVEL) AS cod_cob
                                                  FROM dual
                                                CONNECT BY LEVEL <=
                                                           length(l_cod_cobs) -
                                                           length(REPLACE(l_cod_cobs, g_k_separador_vir, trn.NULO)) +
                                                           trn.UNO)
                      SELECT g.cod_campo,
                             g.cod_cob,
                             g.nom_pgm_help,
                             g.nom_tabla_valida,
                             g.cod_version
                          FROM g2000020 g,
                               cod_cob_parser p
                         WHERE g.cod_cia      = p_cod_cia
                           AND g.cod_ramo     = p_cod_ramo
                           AND (   g.nom_pgm_help = g_k_nom_pgm_help_fixo
                                OR g.nom_pgm_help = g_k_nom_pgm_help_dinamico)
                           AND g.cod_cob      = p.cod_cob
                           AND g.cod_campo    NOT LIKE (g_k_ini_val_franq_dv || '%')
                        ORDER BY g.num_secu)
               LOOP
                --
                l_detalhe_cobertura.tab_atri_lista.EXTEND(1);
                l_detalhe_cobertura.tab_atri_lista(l_detalhe_cobertura.tab_atri_lista.LAST) := rec_tab_atri_cob();
                --
                IF dv.nom_pgm_help = g_k_nom_pgm_help_fixo THEN
                   --RETORNA LISTA VARIAVEL RELACIONADA AOS DADOS VARIAVEIS DAS COBERTURAS
                   OPEN  c_dados_variaveis_cob
                    FOR  SELECT l.cod_campo as cod_campo,
                                l.cod_valor as val_campo,
                                l.nom_valor as txt_campo,
                                NULL        as mca_selec
                           FROM g2990006 l
                          WHERE l.cod_cia   = p_cod_cia
                            AND l.cod_ramo  = p_cod_ramo
                            AND l.cod_campo = dv.cod_campo
                       ORDER BY l.cod_valor;
                   --
                ELSE
                  --RETORNA LISTA FIXA RELACIONADA AOS DADOS VARIAVEIS DAS COBERTURAS
                   trn_k_global.asigna('COD_CIA'          , p_cod_cia                                                    );
                   trn_k_global.asigna('COD_RAMO'         , p_cod_ramo                                                   );
                   trn_k_global.asigna('COD_CAMPO'        , dv.cod_campo                                                 );
                   trn_k_global.asigna('DVCOD_CAMPO'      , dv.cod_campo                                                 );
                   trn_k_global.asigna('NUM_RIESGO'       , trn.UNO                                                      );
                   trn_k_global.asigna('DVCOD_MODALIDAD'  , p_cod_modalidad                                              );
                   trn_k_global.asigna('NUM_POLIZA'       , p_num_cotizacion                                             );
                   trn_k_global.asigna('NUM_COTIZACION'   , p_num_cotizacion                                             );
                   trn_k_global.asigna('COD_MON'          , trn_k_global.cod_mon                                         );
                   trn_k_global.asigna('COD_COB'          , dv.cod_cob                                                   );
                   trn_k_global.asigna('COD_NIVEL1'       , DC.cod_nivel1_gen                                            );
                   trn_k_global.asigna('COD_NIVEL2'       , DC.cod_nivel2_gen                                            );
                   trn_k_global.asigna('COD_NIVEL3'       , DC.cod_nivel3_gen                                            );
                   trn_k_global.asigna('COD_CANAL1'       , dc.COD_CANAL1_GEN                                            );
                   trn_k_global.asigna('COD_CANAL2'       , dc.COD_CANAL2_GEN                                            );
                   trn_k_global.asigna('COD_CANAL3'       , dc.COD_CANAL3_GEN                                            );
                   trn_k_global.asigna('COD_AGT'          , g_k_cod_agt_generico                                         );
                   trn_k_global.asigna('FEC_EFEC_SPTO'    , to_char(trunc(sysdate),'ddmmrrrr')                           );
                   trn_k_global.asigna('FEC_VALIDEZ'      , to_char(trunc(sysdate),'ddmmrrrr')                           );
                   trn_k_global.asigna('DVTIP_SEGMENTO'   , trn_k_df_cmn_nwt_xx_cnn.f_vrb_nam_val('DVTIP_SEGMENTO_DEFEC'));
                   --
                   mx('COBERTURAS DE CASCO - nom_tabla_valida ', dv.nom_tabla_valida);
                   mx('COBERTURAS DE CASCO - dv.cod_version   ', dv.cod_version     );
                   mx('COBERTURAS DE CASCO - dv.cod_campo     ', dv.cod_campo       );
                   --dbms_output.put_line('COBERTURAS DE CASCO - nom_tabla_valida :' || dv.nom_tabla_valida);
                   --dbms_output.put_line('COBERTURAS DE CASCO - dv.cod_version   :' || dv.cod_version     );
                   --dbms_output.put_line('COBERTURAS DE CASCO - dv.cod_campo     :' || dv.cod_campo       );
                   --
                   IF dv.nom_tabla_valida = 'X2990006_VCR' THEN em_p_lista_dinamica_dv; END IF;
                   --
                   trn_k_lv.p_query(dv.nom_tabla_valida, dv.cod_version);
                   --
                   l_fila_dados := TYPTAB_DADOS_COT();
                   l_fila_reg   := TYPREG_DADOS_COT.autocreate;
                   --
                   mx('COBERTURAS DE CASCO - LISTA DE VALORES ---- ', '------------------');
                   --dbms_output.put_line('COBERTURAS DE CASCO - LISTA DE VALORES ---- ------------------');
                   --
                   LOOP
                      --
                      l_devuelve_fila := trn_k_lv.f_devuelve_fila(NULL);
                      --
                      --mx('COBERTURAS DE CASCO - l_devuelve_fila : ' || l_devuelve_fila);
                      --
                      EXIT WHEN l_devuelve_fila IS NULL;
                      --
            mx('l_devuelve_fila', l_devuelve_fila);
            --
                      l_fila_reg.cod_campo := substr(l_devuelve_fila, 0, INSTR(l_devuelve_fila, '~') - 1) ;
                      l_fila_reg.val_campo := substr(l_devuelve_fila, INSTR(l_devuelve_fila, '~') + 1, INSTR(l_devuelve_fila, '[') - (LENGTH(l_fila_reg.cod_campo) + 2));
                      --
                      mx('COBERTURAS DE CASCO - l_fila_reg.cod_campo  ', l_fila_reg.cod_campo);
                      mx('COBERTURAS DE CASCO - l_fila_reg.val_campo  ', l_fila_reg.val_campo);
                      mx('------------------------------------------- ', '------------------');
                      --dbms_output.put_line('COBERTURAS DE CASCO - l_fila_reg.cod_campo  :' || l_fila_reg.cod_campo);
                      --dbms_output.put_line('COBERTURAS DE CASCO - l_fila_reg.val_campo  :' || l_fila_reg.val_campo);
                      --dbms_output.put_line('-------------------------------------------  ------------------');
                      --
                      l_fila_dados.EXTEND(1);
                      l_fila_dados(l_fila_dados.LAST) := l_fila_reg;

                      --
                   END LOOP;
                   --
                   --trn_k_global.borra_todas;
                   --
                   OPEN  c_dados_variaveis_cob
                    FOR   SELECT dv.cod_campo        AS cod_campo,
                                 x0000000.cod_campo  AS val_campo,
                                 x0000000.val_campo  AS txt_campo,
                                 NULL             AS mca_selec
                            FROM TABLE(CAST(l_fila_dados AS TYPTAB_DADOS_COT)) x0000000;
                END IF;
                --
                   LOOP FETCH c_dados_variaveis_cob INTO ldv;
                   ---
                   EXIT WHEN c_dados_variaveis_cob%NOTFOUND;
                     --
                     l_atributo_cobertura.cod_campo := ldv.cod_campo;
                     --
                     l_atributo_cobertura.val_campo := ldv.val_campo;
                     --
                     l_atributo_cobertura.txt_campo := ldv.txt_campo;
                     --
                     -- VERIFICA SE O ITEM DA LISTA CONSTA COMO SELECIONADO PARA ESTA COTACAO
                     l_atributo_cobertura.mca_selec := fp_bus_mca_selec(p_cod_cia,
                                                                        p_cod_ramo,
                                                                        p_num_cotizacion,
                                                                        ldv.cod_campo,
                                                                        ldv.val_campo,
                                                                        dv.cod_cob,
                                                                        NULL);
                     --
                     l_detalhe_cobertura.tab_atri_lista(l_detalhe_cobertura.tab_atri_lista.LAST).EXTEND(1);
                     l_detalhe_cobertura.tab_atri_lista(l_detalhe_cobertura.tab_atri_lista.LAST)(l_detalhe_cobertura.tab_atri_lista(l_detalhe_cobertura.tab_atri_lista.LAST).LAST) := l_atributo_cobertura;
                     --
                   END LOOP;
                  --
               END LOOP;
               --
               l_detalhe_cobertura.tab_val_franq := rec_tab_val_franq();
               l_detalhe_cobertura.val_premio    := trn.NULO           ;
               --
               -- SE AGRUPAMENTO FOI CALCULADO, RETORNA FRANQUIA
               IF l_detalhe_cobertura.mca_selec_cob = trn.SI THEN
                  --
                  -- COD_COB_PARSER TRANSFORMA VARIAVEL VARCHAR COM OS COD_COB EM SUBCONSULTA PARA SER USANDO EM IN
                  --
                  l_valor_franquia.cod_campo := g_k_ini_val_franq_dv || '_' || cob.cod_cob_casco;
                  --
                  l_valor_franquia.txt_campo := trn.NULO;
                  --
                  IF g_tip_mvto_batch = g_k_tip_mvto_batch_cotacao THEN
                    --
                    l_valor_franquia.val_campo := fp_bus_val_franq_cob_coti(p_cod_cia,
                                                                            p_cod_ramo,
                                                                            p_num_cotizacion,
                                                                            p_num_simulacion,
                                                                            l_cod_cobs);
                    --
                    l_detalhe_cobertura.tab_val_franq.EXTEND(1);
                    l_detalhe_cobertura.tab_val_franq(l_detalhe_cobertura.tab_val_franq.LAST) := l_valor_franquia;
                    --
                    -- BUSCA VALOR DO PREMIO DO AGRUPAMENTO
                    l_detalhe_cobertura.val_premio := fp_bus_val_premio_cob_coti(p_cod_cia,
                                                                                 p_cod_ramo,
                                                                                 p_num_cotizacion,
                                                                                 p_num_simulacion,
                                                                                 l_cod_cobs);
                    --
                  ELSIF g_tip_mvto_batch = g_k_tip_mvto_batch_endosso THEN
                    --
                    l_valor_franquia.val_campo := fp_bus_val_franq_cob_endosso(p_cod_cia,
                                                                               p_cod_ramo,
                                                                               p_num_cotizacion,
                                                                               trn.uno,
                                                                               l_cod_cobs);
                    --
                    l_detalhe_cobertura.tab_val_franq.EXTEND(1);
                    l_detalhe_cobertura.tab_val_franq(l_detalhe_cobertura.tab_val_franq.LAST) := l_valor_franquia;
                    --
                    BEGIN
                      --
                      l_num_max_spto := em_f_max_spto(p_cod_cia => p_cod_cia,
                                                      p_num_poliza => p_num_cotizacion,
                                                      p_num_spto => trn.nulo);
                      --
                    EXCEPTION
                      WHEN OTHERS THEN
                        --
                        l_num_max_spto := trn.cero;
                    END;
                    --
                    -- BUSCA VALOR DO PREMIO DO AGRUPAMENTO
                    l_detalhe_cobertura.val_premio := fp_bus_val_premio_cob_endosso(p_cod_cia,
                                                                                    p_cod_ramo,
                                                                                    p_num_cotizacion,
                                                                                    l_num_max_spto,
                                                                                    trn.uno,
                                                                                    l_cod_cobs);
                    --
                  END IF;
                  --
               END IF;
               --
               l_retorno_cob_casci.EXTEND(1);
               l_retorno_cob_casci(l_retorno_cob_casci.LAST) := l_detalhe_cobertura;
               --
           END IF;
           --
         END IF;
      END LOOP;
     --
     mx('F', 'fp_bus_coberturas_casco');
     --
     RETURN l_retorno_cob_casci;
     --
   END fp_bus_coberturas_casco;
   --
   --
     /* ------------------------------------------------------
  || Busca a forma de pagamento preferencial
  */ ------------------------------------------------------
  --
  FUNCTION fp_bus_forma_pago(p_cod_cia        a1009215_vcr.cod_cia %TYPE,
                             p_cod_ramo       a1009215_vcr.cod_ramo %TYPE,
                             p_cod_agt        a1009215_vcr.cod_agt %TYPE,
                             p_cod_forma_pago a1009215_vcr.cod_forma_pago %TYPE) -- I 4.37
   RETURN VARCHAR2 IS
    --
    l_mca_val_defecto VARCHAR2(1);
    --
  BEGIN
    --
    BEGIN
      --
      SELECT b.mca_defecto
        INTO l_mca_val_defecto
        FROM a1009215_vcr b
       WHERE b.cod_cia = p_cod_cia
         AND b.cod_ramo = p_cod_ramo
         AND b.cod_agt = p_cod_agt
         AND b.cod_forma_pago = p_cod_forma_pago;
      --
    EXCEPTION
      WHEN OTHERS THEN
        --
        l_mca_val_defecto := trn.NO;
        --
    END;
    --
    RETURN l_mca_val_defecto;
    --
  END fp_bus_forma_pago; -- F 4.37
  --
  /* ------------------------------------------------------
  || Busca a forma de parcelamento preferencial
  */ ------------------------------------------------------
  --
  FUNCTION fp_bus_parcelas_pago(p_cod_cia           a1009215_vcr.cod_cia %TYPE,
                                p_cod_ramo          a1009215_vcr.cod_ramo %TYPE,
                                p_cod_agt           a1009215_vcr.cod_agt %TYPE,
                                p_cod_forma_pago    a1009215_vcr.cod_forma_pago %TYPE,
                                p_cod_parcelas_pago a1009213_vcr.cod_plan_pago %TYPE) -- I 4.37
   RETURN VARCHAR2 IS
    --
    l_mca_val_defecto VARCHAR2(1);
    --
  BEGIN
    --
    BEGIN
      --
      SELECT b.mca_defecto
        INTO l_mca_val_defecto
        FROM a1009215_vcr b
       WHERE b.cod_cia = p_cod_cia
         AND b.cod_ramo = p_cod_ramo
         AND b.cod_agt = p_cod_agt
         AND b.cod_forma_pago = p_cod_forma_pago
         AND b.cod_plan_pago = p_cod_parcelas_pago;
      --
    EXCEPTION
      WHEN OTHERS THEN
        --
        l_mca_val_defecto := trn.NO;
        --
    END;
    --
    RETURN l_mca_val_defecto;
    --
  END fp_bus_parcelas_pago; -- F 4.37
  --
  /* ------------------------------------------------------
  || Busca a forma de parcelamento preferencial
  */ ------------------------------------------------------
  --
  FUNCTION fp_bus_comissao_pref(p_cod_cia  a1009215_vcr.cod_cia %TYPE,
                                p_cod_ramo a1009215_vcr.cod_ramo %TYPE,
                                p_cod_agt  a1009215_vcr.cod_agt %TYPE) -- I 4.37
   RETURN VARCHAR2 IS
    --
    l_pct_comissao NUMBER;
    --
  BEGIN
    --
    BEGIN
      --
      SELECT b.pct_agt_npr
        INTO l_pct_comissao
        FROM a1009215_vcr b
       WHERE b.cod_cia = p_cod_cia
         AND b.cod_ramo = p_cod_ramo
         AND b.cod_agt = p_cod_agt
         AND b.mca_defecto = trn.SI;
      --
    EXCEPTION
      WHEN OTHERS THEN
        --
        l_pct_comissao := NULL;
        --
    END;
    --
    RETURN l_pct_comissao;
    --
  END fp_bus_comissao_pref; -- F 4.37
   /* ------------------------------------------------------
   || Busca as coberturas Agrupadas
   */ ------------------------------------------------------
   --
   --
   FUNCTION fp_bus_coberturas_agrupadas (p_cod_cia                 c2009040_vcr.cod_cia               %TYPE,
                                         p_cod_ramo                c2009040_vcr.cod_ramo              %TYPE,
                                         p_num_cotizacion          c2009040_vcr.num_cotizacion        %TYPE,
                                         p_num_simulacion          c2009040_vcr.num_simulacion        %TYPE,
                                         p_cod_modalidad           a1002090.cod_modalidad             %TYPE,
                                         p_val_sub_modelo          c2000000.val_columna               %TYPE,
                                         p_fec_validez_tarifa      c2000000.val_columna               %TYPE,
                                         p_val_clave_formula       g2109040_vcr.val_clave_formula     %TYPE,
                                         p_cod_campo_cob_agrupada  df_cmn_nwt_xx_vrb_cnc.vrb_nam      %TYPE,
                                         p_mca_cob_gratuita        df_cmn_nwt_xx_vrb_cnc.row_val_val  %TYPE,
                                         p_tip_lista_cob           VARCHAR)
      RETURN rec_tab_det_cob
   IS
   --
   c_dados_variaveis_cob ref_cursor;
   --
   l_devuelve_fila      VARCHAR2(850);
   l_fila_dados         TYPTAB_DADOS_COT;
   l_fila_reg           TYPREG_DADOS_COT;
   ldv                  rec_atri_cob;
   --
   l_detalhe_cobertura      rec_det_cob;
   l_valor_lim_indeni       rec_val_lim_inde;
   l_atributo_cobertura     rec_atri_cob;
   l_valor_franquia         rec_val_franq;
   l_retorno_cob_agrupadas  rec_tab_det_cob;
   l_tab_cod_cob_agrupadas  rec_tab_cod_cob_agrupadas;
   --
   l_num_max_spto       a2000030.num_spto%TYPE;
   --
   l_count              number;
   l_cod_cobs           VARCHAR2(50);
   --
   l_val_clave_formula_tmp  g2109040_vcr.val_clave_formula%TYPE; -- 2.14
   l_valida                 BOOLEAN ; -- 2.14
   l_eh_3_pacotes           BOOLEAN ; -- 2.14
   l_cod_agt                G9999992.cod_agt%TYPE; -- 2.14
   --
   l_k_cod_cob_106         a2000040.cod_cob%TYPE := 106; -- 2.77
   l_mca_concessionaria    VARCHAR(1)            := trn.NO; -- 2.84
   --
   l_mca_renovacion        c2000000.val_columna%TYPE; --v3.57
   l_num_poliza_renov      c2000000.val_columna%TYPE; --v3.57
   --
   l_cod_modalidad_esp     c2000000.val_columna%TYPE; --v3.96
   l_cod_agt_esp           c2009030_vcr.cod_agt%TYPE; --v3.96
   --
   CURSOR c_agrupamento_cob IS
      --
        WITH
           -- BUSCA COBERTURAS CONTRATADAS PARA APOLICE
           cob_apolices       AS /*(select
                                    a.cod_cob
                               from
                                    a2000040     a
                              where
                                    a.cod_cia                   = p_cod_cia
                                and a.cod_ramo                  = p_cod_ramo
                                and a.num_poliza                = p_num_cotizacion
                                and a.num_riesgo                = trn.uno
                                and nvl(a.mca_baja_cob, trn.no) = trn.no
                                and a.mca_vigente               = trn.si
                                and a.mca_vigente_apli          = trn.si)*/
                                (SELECT a.cod_cob
                                   FROM a2000040 a
                                  WHERE a.cod_cia       = p_cod_cia
                                    AND a.cod_ramo      = p_cod_ramo
                                    AND a.num_poliza    = p_num_cotizacion
                                    AND a.num_apli      = trn.CERO
                                    AND a.num_spto_apli = trn.CERO
                                    AND a.num_riesgo    = trn.UNO
                                    AND a.mca_baja_cob  = trn.NO
                                    AND a.num_spto  = (SELECT MAX(b.num_spto)
                                                         FROM a2000030 b
                                                        WHERE b.cod_cia           = a.cod_cia
                                                          AND b.cod_ramo          = a.cod_ramo
                                                          AND b.num_poliza        = a.num_poliza
                                                          AND b.num_spto         <= NVL(g_num_spto
                                                                                       ,b.num_spto)
                                                          AND b.num_apli          = trn.CERO
                                                          AND b.mca_spto_tmp      = trn.NO
                                                          AND b.mca_provisional   = trn.NO
                                                          AND b.mca_spto_anulado  = trn.NO)),
           --BUSCA COBERTURAS NO PACOTE E CONTRATADAS NA APOLICE
           cob_pacote         AS ( select
                                       g40.cod_cob,
                                       'P' as tip_cob
                                  from
                                                       g2109040_vcr g40
                                       left outer join g2109041_vcr g41 on g40.cod_cob = g41.cod_cob and g40.val_clave_formula = g41.val_clave_formula
                                 where
                                         g40.val_clave_formula = p_val_clave_formula
                                   and ((g41.mca_contrata_cob  = trn.SI    and g40.mca_contrata     = trn.SI )
                                    or ( g40.mca_contrata      = trn.SI    and g41.mca_contrata_cob = trn.NO)
                                    or ( g41.mca_contrata_cob  = trn.SI    and g40.mca_contrata     = trn.NO))
                                   and   g40.cod_cob in (select cod_cob from cob_apolices)
                              group by
                                       g40.cod_cob,
                                       g40.val_clave_formula,
                                       g40.mca_contrata,
                                       g41.mca_contrata_cob),
           --BUSCA COBERTURAS NO PACOTE E NAO CONTRATADAS NA APOLICE
           cob_adicionais    AS (select
                                   g40.cod_cob,
                                   'A' as tip_cob
                              from
                                                   g2109040_vcr g40
                                   left outer join g2109041_vcr g41 on g40.cod_cob = g41.cod_cob and g40.val_clave_formula = g41.val_clave_formula
                             where
                                     g40.val_clave_formula = p_val_clave_formula
                               and ((g41.mca_contrata_cob  = trn.SI    and g40.mca_contrata     = trn.SI )
                                or ( g40.mca_contrata      = trn.SI    and g41.mca_contrata_cob = trn.NO)
                                or ( g41.mca_contrata_cob  = trn.SI    and g40.mca_contrata     = trn.NO))
                               and   g40.cod_cob not in (select cod_cob from cob_apolices)
                               -- v1.63 ini
                               and   g40.cod_cob not in (SELECT tst.cnc_vrb_val
                                                           FROM tron2000.df_cmn_nwt_xx_vrb_cnc tst
                                                          WHERE tst.cmp_val = p_cod_cia
                                                            AND tst.lob_val = p_cod_ramo
                                                            AND tst.vrb_nam IN
                                                                (SELECT a.vrb_nam
                                                                   FROM tron2000.df_cmn_nwt_xx_vrb_cnc a,
                                                                         cob_apolices                 capol
                                                                  WHERE a.cmp_val = p_cod_cia
                                                                    AND a.lob_val = p_cod_ramo
                                                                    AND a.vrb_nam LIKE  (p_cod_campo_cob_agrupada || '#' || '%')
                                                                    AND capol.cod_cob = a.cnc_vrb_val
                                                                       -- Ini. v 1.41
                                                                       -- Condicao para nao exibir AS coberturas de carta verde unificadas para endosso
                                                                    /*AND a.vrb_nam = (CASE
                                                                                       WHEN a.vrb_nam = 'COD_COB_AGRUPADA#92' AND
                                                                                            trn_k_global.ref_f_global('tip_mvto_batch') = ea_k_231_utils.g_k_spto_batch
                                                                                       THEN
                                                                                         NULL
                                                                                       ELSE
                                                                                         a.vrb_nam
                                                                                     END)--v1.90*/))
                                                                       --
                                                                       -- Fim. v 1.41
                               -- v1.63 fim
                          group by
                                   g40.cod_cob,
                                   g40.val_clave_formula,
                                   g40.mca_contrata,
                                   g41.mca_contrata_cob),
           --BUSCA COBERTURAS NAO NO PACOTE E CONTRATADAS NA APOLICE
           cob_bloqueadas as ( select
                                   g40.cod_cob,
                                   'B' as tip_cob
                              from
                                                   g2109040_vcr g40
                                   left outer join g2109041_vcr g41 on g40.cod_cob = g41.cod_cob and g40.val_clave_formula = g41.val_clave_formula
                             where
                                     g40.val_clave_formula = p_val_clave_formula
                               and ( g41.mca_contrata_cob  = trn.NO    and g40.mca_contrata     = trn.NO )
                               and   g40.cod_cob in (select cod_cob from cob_apolices)
                          group by
                                   g40.cod_cob,
                                   g40.val_clave_formula,
                                   g40.mca_contrata,
                                   g41.mca_contrata_cob),
           --SELECIONA TIPO DE COBERTURAS EXIBIDAS PARA ENDOSSO
           C_COBERTURAS_PACOTE_SPTO AS (select
                                       cobs.cod_cob,
                                       '4' as tip_mvto_batch
                                  from
                                       (     select * from cob_pacote
                                       union select * from cob_adicionais
                                       union select * from cob_bloqueadas) cobs
                                where
                                       cobs.tip_cob = p_tip_lista_cob),
           C_COBERTURAS_PACOTE_COT  AS      (
                                        SELECT g40.cod_cob                AS cod_cob
                                             , g_k_tip_mvto_batch_cotacao AS tip_mvto_batch
                                             , trn.NO                     AS mca_renovacion --v3.57
                                          FROM g2109040_vcr g40,
                                               g2109041_vcr g41
                                         WHERE

                                               g40.cod_cia           = p_cod_cia
                                           AND g40.cod_ramo          = p_cod_ramo
                                           AND g40.val_clave_formula = p_val_clave_formula
                                           AND g40.val_clave_formula = g41.val_clave_formula
                                           AND g40.cod_Cob           = g41.cod_Cob
                                           AND (
                                                   g40.mca_contrata = trn.SI AND g41.mca_contrata_cob = trn.SI
                                                --OR g40.mca_contrata = trn.NO AND g41.mca_contrata_cob = trn.SI
                                                OR g40.mca_contrata = trn.SI AND g41.mca_contrata_cob = trn.NO
                                                OR (g40.mca_contrata =     (CASE
                                                                              WHEN p_tip_lista_cob = 'A'
                                                                              THEN
                                                                                trn.NO
                                                                              ELSE
                                                                                trn.NULO
                                                                            END) AND
                                                    g41.mca_contrata_cob = (CASE
                                                                              WHEN p_tip_lista_cob = 'A'
                                                                              THEN
                                                                                trn.SI
                                                                              ELSE
                                                                                trn.NULO
                                                                            END)) --v1.96
                                               )
                                        GROUP BY g40.cod_Cob),
           --v3.57 ini
           C_COBERTURAS_PACOTE_RENOV_APOL AS
            (SELECT g40.cod_cob                AS cod_cob
                  , g_k_tip_mvto_batch_cotacao AS tip_mvto_batch
                  , trn.SI                     AS mca_renovacion
                  , 'P'                        AS tip_cob
               FROM g2109040_vcr g40
               LEFT OUTER JOIN g2109041_vcr g41
                 ON g40.cod_cob           = g41.cod_cob
                AND g40.val_clave_formula = g41.val_clave_formula
              WHERE g40.val_clave_formula = p_val_clave_formula
                AND g40.cod_cob           IN (select c9040.cod_cob
                                                from TRON2000.c2009040_vcr c9040
                                               WHERE c9040.cod_cia        = p_cod_cia
                                                 AND c9040.cod_ramo       = p_cod_ramo
                                                 AND c9040.num_simulacion = p_num_simulacion
                                                 AND c9040.num_cotizacion = l_num_poliza_renov)
                AND NOT (g40.mca_contrata = g41.mca_contrata_cob AND
                         g40.mca_contrata = trn.NO)
              GROUP BY g40.cod_cob
                 --
              UNION
                 --
             SELECT g40.cod_cob                AS cod_cob
                  , g_k_tip_mvto_batch_cotacao AS tip_mvto_batch
                  , trn.SI                     AS mca_renovacion
                  , 'P'                        AS tip_cob
               FROM g2109040_vcr g40
                  , g2109041_vcr g41
              WHERE g40.cod_cia           = p_cod_cia
                AND g40.cod_ramo          = p_cod_ramo
                AND g40.val_clave_formula = p_val_clave_formula
                AND g40.val_clave_formula = g41.val_clave_formula
                AND g40.cod_cob = g41.cod_cob
                AND ((g40.mca_contrata = trn.SI AND g41.mca_contrata_cob = trn.SI) OR
                     (g40.mca_contrata = trn.SI AND g41.mca_contrata_cob = trn.NO))
              GROUP BY g40.cod_cob),
                 --
           C_COBERTURAS_PACOTE_RENOV_ADIC AS
            (SELECT g40.cod_cob                AS cod_cob
                  , g_k_tip_mvto_batch_cotacao AS tip_mvto_batch
                  , trn.SI                     AS mca_renovacion
                  , 'A'                        AS tip_cob
               FROM g2109040_vcr g40
               LEFT OUTER JOIN g2109041_vcr g41
                 ON g40.cod_cob           = g41.cod_cob
                AND g40.val_clave_formula = g41.val_clave_formula
              WHERE g40.val_clave_formula = p_val_clave_formula
                AND NOT (g40.mca_contrata = g41.mca_contrata_cob AND
                         g40.mca_contrata = trn.NO)
                AND NOT EXISTS (SELECT 1
                                  FROM C_COBERTURAS_PACOTE_RENOV_APOL apol
                                 WHERE g40.cod_cob = apol.cod_cob)
              GROUP BY g40.cod_cob),

           -- v3.57 fim
           C_COBERTURAS_PACOTE AS
            (SELECT cod_cob
               FROM C_COBERTURAS_PACOTE_COT
              WHERE tip_mvto_batch = g_tip_mvto_batch
                AND mca_renovacion = l_mca_renovacion
                 --
              UNION
                 --
                 -- v3.57 ini
             SELECT cod_cob
               FROM C_COBERTURAS_PACOTE_RENOV_APOL
              WHERE tip_mvto_batch = g_tip_mvto_batch
                AND mca_renovacion = l_mca_renovacion
                AND tip_cob        = p_tip_lista_cob
                 --
              UNION
                 --
             SELECT cod_cob
               FROM C_COBERTURAS_PACOTE_RENOV_ADIC
              WHERE tip_mvto_batch = g_tip_mvto_batch
                AND mca_renovacion = l_mca_renovacion
                AND tip_cob        = p_tip_lista_cob
                 -- v3.57 fim
                 --
              UNION
                 --
             SELECT cod_cob
               FROM C_COBERTURAS_PACOTE_SPTO
              where tip_mvto_batch = g_tip_mvto_batch),

           C_COBERTURAS_GRATUITAS AS   (
                                         SELECT a.vrb_nam,
                                               a.cnc_vrb_val,
                                               a.row_val_val
                                        FROM   df_cmn_nwt_xx_vrb_cnc a
                                         WHERE a.cmp_val         = p_cod_cia
                                           AND a.lob_val         = p_cod_ramo
                                           AND a.vrb_nam         = 'COD_COB_GRATUITAS'


                                       ),
           C_COBERTURAS_AGRUPADAS AS   (
                                        SELECT a.vrb_nam,
                                               a.cnc_vrb_val,
                                               a.row_val_val
                                        FROM   df_cmn_nwt_xx_vrb_cnc a
                                         WHERE a.cmp_val         = p_cod_cia
                                           AND a.lob_val         = p_cod_ramo
                                           AND a.vrb_nam         LIKE  (p_cod_campo_cob_agrupada || '#' || '%')
                                           --/* 1.79 I
                                           -- Ini. v 1.41
                                           -- Condicao para nao exibir AS coberturas de carta verde unificadas para endosso
                                           /*AND a.vrb_nam =
                                              (CASE
                                                 WHEN a.vrb_nam = 'COD_COB_AGRUPADA#92'                                           AND
                                                      trn_k_global.ref_f_global('tip_mvto_batch') = ea_k_231_utils.g_k_spto_batch
                                                 THEN
                                                  trn.NULO
                                                 ELSE
                                                  a.vrb_nam
                                               END)*/--v1.90
                                           --
                                           -- Fim. v 1.41
                                           --1.79 F */
                                       )
        SELECT
           DISTINCT substr(a.vrb_nam, instr(a.vrb_nam, '#') + 1, length(a.vrb_nam)) AS cod_cob_agrupadas,
                           a.vrb_nam                                                 AS cod_campo
        FROM
            (SELECT
               C_COBERTURAS_AGRUPADAS.vrb_nam,
               NVL(C_COBERTURAS_GRATUITAS.row_val_val,'N') as col_gratuita
            FROM
                               C_COBERTURAS_AGRUPADAS
               INNER JOIN      C_COBERTURAS_PACOTE    ON C_COBERTURAS_AGRUPADAS.cnc_vrb_val = C_COBERTURAS_PACOTE.cod_cob
               LEFT OUTER JOIN C_COBERTURAS_GRATUITAS ON C_COBERTURAS_AGRUPADAS.cnc_vrb_val = C_COBERTURAS_GRATUITAS.cnc_vrb_val) a
        WHERE
           a.col_gratuita = p_mca_cob_gratuita
        ORDER BY
           cod_cob_agrupadas;
     --I 2.14
      CURSOR c_agrupamento_cob3p IS
      --
        WITH
           -- BUSCA COBERTURAS CONTRATADAS PARA APOLICE
           cob_apolices       AS
                                (SELECT a.cod_cob
                                   FROM a2000040 a
                                  WHERE a.cod_cia       = p_cod_cia
                                    AND a.cod_ramo      = p_cod_ramo
                                    AND a.num_poliza    = p_num_cotizacion
                                    AND a.num_apli      = trn.CERO
                                    AND a.num_spto_apli = trn.CERO
                                    AND a.num_riesgo    = trn.UNO
                                    AND a.mca_baja_cob  = trn.NO
                                    AND a.num_spto  = (SELECT MAX(b.num_spto)
                                                         FROM a2000030 b
                                                        WHERE b.cod_cia           = a.cod_cia
                                                          AND b.cod_ramo          = a.cod_ramo
                                                          AND b.num_poliza        = a.num_poliza
                                                          AND b.num_spto         <= NVL(g_num_spto
                                                                                       ,b.num_spto)
                                                          AND b.num_apli          = trn.CERO
                                                          AND b.mca_spto_tmp      = trn.NO
                                                          AND b.mca_provisional   = trn.NO
                                                          AND b.mca_spto_anulado  = trn.NO)),
           --BUSCA COBERTURAS NO PACOTE E CONTRATADAS NA APOLICE
           cob_pacote         AS ( SELECT
                                          g40.cod_cob,
                                          'P' as tip_cob
                                     FROM g2109040_vcr g40
                                    WHERE g40.val_clave_formula = p_val_clave_formula
                                      AND ea_k_definicion_pacote_vcr.f_check_cob_valida( p_num_simulacion -1, g40.cod_Cob,'P') >0 -- 2.21 -- 3.32
                                      AND g40.cod_modalidad = p_cod_modalidad -- 2.61
                                      AND g40.cod_cob in (select cod_cob from cob_apolices)
                                 group by
                                       g40.cod_cob,
                                       g40.val_clave_formula,
                                       g40.mca_contrata),
           --BUSCA COBERTURAS NO PACOTE E NAO CONTRATADAS NA APOLICE
           cob_adicionais    AS (SELECT
                                        g40.cod_cob,
                                        'A' as tip_cob
                                   FROM g2109040_vcr g40
                                  WHERE g40.val_clave_formula = p_val_clave_formula
                                    AND ea_k_definicion_pacote_vcr.f_check_cob_valida( p_num_simulacion -1, g40.cod_Cob,'A') >0 -- 2.21 -- 3.32
                                    AND g40.cod_modalidad = p_cod_modalidad -- 2.61
                                    AND g40.cod_cob not in (select cod_cob from cob_apolices)
                               -- v1.63 ini
                                    AND g40.cod_cob not in (SELECT tst.cnc_vrb_val
                                                           FROM tron2000.df_cmn_nwt_xx_vrb_cnc tst
                                                          WHERE tst.cmp_val = p_cod_cia
                                                            AND tst.lob_val = p_cod_ramo
                                                            AND tst.vrb_nam IN
                                                                (SELECT a.vrb_nam
                                                                   FROM tron2000.df_cmn_nwt_xx_vrb_cnc a,
                                                                         cob_apolices                 capol
                                                                  WHERE a.cmp_val = p_cod_cia
                                                                    AND a.lob_val = p_cod_ramo
                                                                    AND a.vrb_nam LIKE  (p_cod_campo_cob_agrupada || '#' || '%')
                                                                    AND capol.cod_cob = a.cnc_vrb_val
                                                                       -- I D
                                                                       -- Ini. v 1.41
                                                                       -- Condicao para nao exibir AS coberturas de carta verde unificadas para endosso
                                                                    AND a.vrb_nam =      -- 1.82
                                                                    --(CASE -- 1.82
                                                                    --                    WHEN a.vrb_nam = 'COD_COB_AGRUPADA#92' AND  -- 1.82
                                                                    --                          trn_k_global.ref_f_global('tip_mvto_batch') = ea_k_231_utils.g_k_spto_batch  -- 1.82
                                                                    --                    THEN -- 1.82
                                                                    --                      NULL -- 1.82
                                                                    --                     ELSE -- 1.82
                                                                                         a.vrb_nam -- 1.82
                                                                     --                 END) -- 1.82
                                                                                    )) -- 1.82
                                                                       --
                                                                       -- Fim. v 1.41
                                                                       -- F D
                               -- v1.63 fim
                          group by
                                   g40.cod_cob,
                                   g40.val_clave_formula,
                                   g40.mca_contrata),
           --BUSCA COBERTURAS NAO NO PACOTE E CONTRATADAS NA APOLICE
           cob_bloqueadas as ( SELECT
                                      g40.cod_cob,
                                      'B' as tip_cob
                                 FROM g2109040_vcr g40
                                WHERE g40.val_clave_formula = p_val_clave_formula
                                  AND ea_k_definicion_pacote_vcr.f_check_cob_bloqueada( p_num_simulacion -1, g40.cod_Cob) >0
                                  AND g40.cod_modalidad = p_cod_modalidad -- 2.61
                                  AND g40.cod_cob in (select cod_cob from cob_apolices)
                          group by
                                   g40.cod_cob,
                                   g40.val_clave_formula,
                                   g40.mca_contrata),
           --SELECIONA TIPO DE COBERTURAS EXIBIDAS PARA ENDOSSO
       C_COBERTURAS_PACOTE_SPTO AS
       (select cobs.cod_cob, '4' as tip_mvto_batch
          from (select *
                  from cob_pacote
                union
                select *
                  from cob_adicionais
                union
                select *
                  from cob_bloqueadas) cobs
         where cobs.tip_cob = p_tip_lista_cob),
      -- I 2.74
      C_COBERTURAS_PCT_COT AS
       (SELECT g40.cod_Cob, '7' as tip_mvto_batch
              ,'P'              AS tip_cob
                                          FROM g2109040_vcr g40
         WHERE g40.cod_cia = p_cod_cia
                                           AND g40.cod_ramo          = p_cod_ramo
                                           AND g40.val_clave_formula = p_val_clave_formula
           AND g40.cod_modalidad = p_cod_modalidad -- 2.60
           AND ea_k_definicion_pacote_vcr.f_check_cob_valida(p_num_simulacion - 1,
                                                             g40.cod_Cob,
                                                             p_tip_lista_cob) > 0 -- 2.21AND ea_k_definicion_pacote_vcr.f_check_cob_cotacao( p_num_simulacion -1, g40.cod_Cob, p_tip_lista_cob) >0 -- 3.32
           AND g40.cod_cob IN (SELECT tst.cnc_vrb_val
                                 FROM tron2000.df_cmn_nwt_xx_vrb_cnc tst
                                WHERE tst.cmp_val = p_cod_cia
                                  AND tst.lob_val = p_cod_ramo
                                  AND tst.vrb_nam IN (SELECT cnc.vrb_nam
                                                        FROM tron2000.df_cmn_nwt_xx_vrb_cnc cnc
                                                       WHERE cnc.cmp_val = tst.cmp_val
                                                         AND cnc.lob_val = tst.lob_val
                                                         AND cnc.vrb_nam LIKE p_cod_campo_cob_agrupada || '%'
                                                         AND cnc.cnc_vrb_val IN (SELECT cod_cob
                                                                               FROM g2109040_vcr a
                                                                              WHERE a.cod_cia           = g40.cod_cia
                                                                                AND a.cod_ramo          = g40.cod_ramo
                                                                                AND a.cod_modalidad     = g40.cod_modalidad
                                                                                AND a.mca_contrata      = trn.SI
                                                                                AND a.val_clave_formula = g40.val_clave_formula)))
         GROUP BY g40.cod_Cob),
      C_COBERTURAS_PCT_COT_ADD AS
       (SELECT g40.cod_Cob, '7' as tip_mvto_batch
              ,'A'              as tip_cob
          FROM g2109040_vcr g40
         WHERE g40.cod_cia = p_cod_cia
           AND g40.cod_ramo = p_cod_ramo
           AND g40.val_clave_formula = p_val_clave_formula
           AND g40.cod_modalidad = p_cod_modalidad -- 2.60
           AND ea_k_definicion_pacote_vcr.f_check_cob_valida(p_num_simulacion - 1,
                                                             g40.cod_Cob,
                                                             p_tip_lista_cob) > 0 -- 2.21AND ea_k_definicion_pacote_vcr.f_check_cob_cotacao( p_num_simulacion -1, g40.cod_Cob, p_tip_lista_cob) >0 -- 3.32
           AND g40.cod_cob NOT IN (SELECT tst.cnc_vrb_val
                                     FROM tron2000.df_cmn_nwt_xx_vrb_cnc tst
                                    WHERE tst.cmp_val = p_cod_cia
                                      AND tst.lob_val = p_cod_ramo
                                      AND tst.vrb_nam IN (SELECT cnc.vrb_nam
                                                            FROM tron2000.df_cmn_nwt_xx_vrb_cnc cnc
                                                           WHERE cnc.cmp_val = tst.cmp_val
                                                             AND cnc.lob_val = tst.lob_val
                                                             AND cnc.vrb_nam LIKE p_cod_campo_cob_agrupada  || '%'
                                                             AND cnc.cnc_vrb_val IN (SELECT cod_cob
                                                                                   FROM g2109040_vcr a
                                                                                  WHERE a.cod_cia           = g40.cod_cia
                                                                                    AND a.cod_ramo          = g40.cod_ramo
                                                                                    AND a.cod_modalidad     = g40.cod_modalidad
                                                                                    AND a.mca_contrata      = trn.SI
                                                                                    AND a.val_clave_formula = g40.val_clave_formula)))
         GROUP BY g40.cod_Cob),
      C_COBERTURAS_PACOTE_COT AS
       (SELECT cobs.cod_cob, '7' as tip_mvto_batch
          FROM (SELECT *
                  FROM c_coberturas_pct_cot
                UNION
                SELECT *
                  FROM c_coberturas_pct_cot_add) cobs
         WHERE cobs.tip_cob = p_tip_lista_cob),
      -- 2.74
      C_COBERTURAS_PACOTE AS
       (SELECT cod_cob
          FROM C_COBERTURAS_PACOTE_COT
         where tip_mvto_batch = g_tip_mvto_batch
                                        UNION
                                        SELECT cod_cob FROM C_COBERTURAS_PACOTE_SPTO where tip_mvto_batch = g_tip_mvto_batch),
           C_COBERTURAS_GRATUITAS AS   (
                                         SELECT a.vrb_nam,
                                               a.cnc_vrb_val,
                                               a.row_val_val
                                        FROM   df_cmn_nwt_xx_vrb_cnc a
                                         WHERE a.cmp_val         = p_cod_cia
                                           AND a.lob_val         = p_cod_ramo
                                           AND a.vrb_nam         = 'COD_COB_GRATUITAS'


                                       ),
           C_COBERTURAS_AGRUPADAS AS   (
                                        SELECT a.vrb_nam,
                                               a.cnc_vrb_val,
                                               a.row_val_val
                                        FROM   df_cmn_nwt_xx_vrb_cnc a
                                         WHERE a.cmp_val         = p_cod_cia
                                           AND a.lob_val         = p_cod_ramo
                                           AND a.vrb_nam         LIKE  (p_cod_campo_cob_agrupada || '#' || '%')
                                           AND a.agn_val         = NVL(l_cod_agt_esp      , a.agn_val) --v3.96
                                           AND a.mdt_val         = NVL(l_cod_modalidad_esp, a.mdt_val) --v3.96
                                           -- I D
                                           -- Ini. v 1.41
                                           -- Condicao para nao exibir AS coberturas de carta verde unificadas para endosso
                                           AND a.vrb_nam =   -- 1.82
                                           --   (CASE  -- 1.82
                                          --       WHEN a.vrb_nam = 'COD_COB_AGRUPADA#92'                                           AND  -- 1.82
                                           --           trn_k_global.ref_f_global('tip_mvto_batch') = ea_k_231_utils.g_k_spto_batch  -- 1.82
                                           --      THEN -- 1.82
                                           --       trn.NULO -- 1.82
                                           --      ELSE -- 1.82
                                                a.vrb_nam -- 1.82
                                            --   END) -- 1.82
                                           --
                                           -- Fim. v 1.41
                                           -- F D
                                       )
        SELECT
           DISTINCT substr(a.vrb_nam, instr(a.vrb_nam, '#') + 1, length(a.vrb_nam)) AS cod_cob_agrupadas,
                           a.vrb_nam                                                 AS cod_campo
        FROM
            (SELECT
               C_COBERTURAS_AGRUPADAS.vrb_nam,
               NVL(C_COBERTURAS_GRATUITAS.row_val_val,'N') as col_gratuita
            FROM
                               C_COBERTURAS_AGRUPADAS
               INNER JOIN      C_COBERTURAS_PACOTE    ON C_COBERTURAS_AGRUPADAS.cnc_vrb_val = C_COBERTURAS_PACOTE.cod_cob
               LEFT OUTER JOIN C_COBERTURAS_GRATUITAS ON C_COBERTURAS_AGRUPADAS.cnc_vrb_val = C_COBERTURAS_GRATUITAS.cnc_vrb_val) a
        WHERE
           a.col_gratuita = p_mca_cob_gratuita
        ORDER BY
           cod_cob_agrupadas;
   --F 2.14
   --
   --
   FUNCTION fp_bus_cob_casco_agrup(p_cod_cia                df_cmn_nwt_xx_vrb_cnc.cmp_val%TYPE,
                                   p_cod_ramo               df_cmn_nwt_xx_vrb_cnc.lob_val%TYPE,
                                   p_vrb_nam                df_cmn_nwt_xx_vrb_cnc.vrb_nam%TYPE)
    RETURN rec_tab_cod_cob_agrupadas
    IS
    --
    l_tab_cod_cob_casco rec_tab_cod_cob_agrupadas;
    --
    BEGIN
          --
          mx('I', 'fp_bus_cob_casco_agrup');
          --
          l_tab_cod_cob_casco := rec_tab_cod_cob_agrupadas();
          --
          -- BUSCA NA TABELA TODOS OS COD_COB PARAMETRIZADOS PARA O AGRUPAMENTO PASSADO
          FOR cob IN (SELECT DISTINCT a.cnc_vrb_val AS cod_cob
                                 FROM df_cmn_nwt_xx_vrb_cnc a
                                WHERE a.cmp_val         = p_cod_cia
                                  AND a.lob_val         = p_cod_ramo
                                  and a.vrb_nam         LIKE  (p_vrb_nam || '%')
                                  AND a.mdt_val         = EM.cod_modalidad_gen
                                  AND a.crn_val         = DC.cod_mon_gen
                                  AND a.cvr_val         = EM.cod_cob_gen
                                  AND a.frs_lvl_val     = DC.cod_nivel1_gen
                                  AND a.scn_lvl_val     = DC.cod_nivel2_gen
                                  AND a.thr_lvl_val     = DC.cod_nivel3_gen
                                  AND a.frs_dst_hnl_val = DC.cod_canal1_gen
                                  AND a.scn_dst_hnl_val = DC.cod_canal2_gen
                                  AND a.thr_dst_hnl_val = DC.cod_canal3_gen
                                  AND a.agn_val         = TRN.cod_tercero_gen
                                  AND a.gpp_val         = 'ZZZZZZZZZZZZZ'
                                  AND a.del_val         = EM.num_contrato_gen
                                  AND a.sbl_val         = EM.num_subcontrato_gen
                                  AND a.ply_val         = 'ZZZZZZZZZZZZZ'
                                  AND a.vld_dat          = (SELECT MAX(vld_dat)
                                                              FROM df_cmn_nwt_xx_vrb_cnc b
                                                             WHERE b.cmp_val         = a.cmp_val
                                                               AND b.lob_val         = a.lob_val
                                                               AND b.mdt_val         = a.mdt_val
                                                               AND b.crn_val         = a.crn_val
                                                               AND b.cvr_val         = a.cvr_val
                                                               AND b.frs_lvl_val     = a.frs_lvl_val
                                                               AND b.scn_lvl_val     = a.scn_lvl_val
                                                               AND b.thr_lvl_val     = a.thr_lvl_val
                                                               AND b.frs_dst_hnl_val = a.frs_dst_hnl_val
                                                               AND b.scn_dst_hnl_val = a.scn_dst_hnl_val
                                                               AND b.thr_dst_hnl_val = a.thr_dst_hnl_val
                                                               AND b.gpp_val         = a.gpp_val
                                                               AND b.del_val         = a.del_val
                                                               AND b.sbl_val         = a.sbl_val
                                                               AND b.ply_val         = a.ply_val
                                                               AND b.agn_val         = a.agn_val
                                                               AND b.vrb_nam         = a.vrb_nam
                                                               AND b.cnc_vrb_val     = a.cnc_vrb_val)
                      ORDER BY TO_NUMBER(cod_cob))
          LOOP
             --
             l_tab_cod_cob_casco.EXTEND(1);
             l_tab_cod_cob_casco(l_tab_cod_cob_casco.LAST) := cob.cod_cob;
             --
          END LOOP;
          --
          mx('F', 'fp_bus_cob_casco_agrup');
          --
          RETURN l_tab_cod_cob_casco;
          --
   END fp_bus_cob_casco_agrup;
   --
   --
   FUNCTION fp_trata_lista_agrup(p_tab_cod_cob_agrupadas rec_tab_cod_cob_agrupadas)
   RETURN VARCHAR2
   IS
   --
   l_cod_cobs VARCHAR2(50)  := '';
   --
   BEGIN
      --
      mx('I', 'fp_trata_lista_agrup');
      --
      -- CONCATENA TODOS OS COD_COB EM UMA UNICA VARIAVEL
      FOR i IN p_tab_cod_cob_agrupadas.FIRST..p_tab_cod_cob_agrupadas.LAST
      LOOP
         --
         l_cod_cobs := l_cod_cobs || p_tab_cod_cob_agrupadas(i) || g_k_separador_vir;
         --
      END LOOP;
      --
      mx('l_cod_cobs', l_cod_cobs);
      -- REMOVE O ULTIMO SEPARADOR
      IF l_cod_cobs IS NOT NULL AND LENGTH(l_cod_cobs) > 0 THEN
         --
         l_cod_cobs := SUBSTR(l_cod_cobs,trn.CERO,LENGTH(l_cod_cobs) - trn.UNO);
         --
      END IF;
      --
      mx('F', 'fp_trata_lista_agrup');
      --
      RETURN l_cod_cobs;
      --
   END fp_trata_lista_agrup;
   --
   --
   FUNCTION fp_bus_mca_selec_casco_agrup(p_cod_cia                a2000030.cod_cia           %TYPE,
                                         p_cod_ramo               a2000030.cod_ramo          %TYPE,
                                         p_num_cotizacion         a2000030.num_poliza        %TYPE,
                                         p_num_simulacion         c2009040_vcr.num_simulacion%TYPE,
                                         p_num_spto               A2100170.num_spto          %TYPE,
                                         p_tab_cod_cob_casco      rec_tab_cod_cob_agrupadas)
   RETURN c2000000.val_columna%TYPE
   IS
      --
      l_cod_cobs                VARCHAR2(50)  := '';
      l_todos_cod_cobs          VARCHAR2(50)  := '';
      l_cod_cobs_contratadas    VARCHAR2(50)  := '';
      l_mca_selec               VARCHAR2(1) := trn.NO;
      --
      l_tab_todos_cod_cob_casco rec_tab_cod_cob_agrupadas;
      --
   BEGIN
      --
      mx('I', 'fp_bus_mca_selec_casco_agrup');
      --
      -- RETORNA LISTA DE COD_COBS DO AGRUPAMENTO PARA SER COMPARADO COM OS COD_COB CONTRATADOS
      l_cod_cobs := fp_trata_lista_agrup(p_tab_cod_cob_casco);
      --
      -- BUSCA TODOS OS COD_COB DE TODOS OS AGRUPAMENTOS PARAMETRIZADOS PARA O COD_RAMO
      l_tab_todos_cod_cob_casco := fp_bus_cob_casco_agrup(p_cod_cia,
                                                        p_cod_ramo,
                                                        g_k_cod_campo_cob_casco);
      --
      -- RETORNA LISTA DE COD_COBS DE TODOS OS AGRUPAMENTOS PARA SER USANDO NO 'IN' DA CONSULTA PRINCIPAL
      l_todos_cod_cobs := fp_trata_lista_agrup(l_tab_todos_cod_cob_casco);
      --
      -- VERIFICA DE TODOS OS COD_COB PARAMETRIZADOS COMO DE CASCO PARA O COD_RAMO, QUAIS ESTAO SELECIONADOS
      -- COD_COB_PARSER TRANSFORMA VARIAVEL VARCHAR COM OS COD_COB EM SUBCONSULTA PARA SER USANDO EM IN
      IF g_tip_mvto_batch = g_k_tip_mvto_batch_cotacao THEN
          --
          WITH cod_cob_parser AS
           (SELECT regexp_substr(l_todos_cod_cobs, '[^,]+', trn.uno, LEVEL) AS cod_cob
              FROM dual
            CONNECT BY LEVEL <= length(l_todos_cod_cobs) -
                       length(REPLACE(l_todos_cod_cobs,
                                               g_k_separador_vir,
                                               trn.nulo)) + trn.uno)
          SELECT listagg(c.cod_cob, g_k_separador_vir) within GROUP(ORDER BY c.cod_cob) AS cod_cobs_contratadas
            INTO l_cod_cobs_contratadas
            FROM c2009040_vcr c,
                 cod_cob_parser p
           WHERE c.cod_cia        = p_cod_cia
             AND c.cod_ramo       = p_cod_ramo
             AND c.num_cotizacion = p_num_cotizacion
             AND c.num_simulacion = p_num_simulacion
             AND c.cod_cob        = p.cod_cob
             AND c.suma_aseg      IS NOT NULL;
          --
      ELSIF g_tip_mvto_batch = g_k_tip_mvto_batch_endosso THEN
          --
          WITH cod_cob_parser AS
           (SELECT regexp_substr(l_todos_cod_cobs, '[^,]+', trn.uno, LEVEL) AS cod_cob
              FROM dual
            CONNECT BY LEVEL <= length(l_todos_cod_cobs) -
                                length(REPLACE(l_todos_cod_cobs, g_k_separador_vir,trn.nulo)) +
                                trn.uno)
          SELECT listagg(a.cod_cob, g_k_separador_vir) within GROUP(ORDER BY a.cod_cob) AS cod_cobs_contratadas
            INTO l_cod_cobs_contratadas
            FROM a2000040 a,
                 cod_cob_parser p
           WHERE a.cod_cia     = p_cod_cia
             AND a.cod_ramo    = p_cod_ramo
             AND a.num_poliza  = p_num_cotizacion
             AND a.num_riesgo  = trn.uno
             AND a.num_spto    = p_num_spto
             AND a.cod_cob     = p.cod_cob
             AND nvl(a.mca_baja_cob, trn.NO) = trn.NO
             AND a.mca_vigente               = trn.SI
             AND a.mca_vigente_apli          = trn.SI;
          --
      END IF;
      --
      -- COMPARA LISTA DE COD_COB DO AGRUPAMENTO COM A DOS CONTRATADAS E VALIDA SE AGRUPAMENTO ESTA SELECIONADO
      IF l_cod_cobs = l_cod_cobs_contratadas THEN
         --
         l_mca_selec := trn.SI;
         --
      END IF;
      --
      mx('F', 'fp_bus_mca_selec_casco_agrup');
      --
      RETURN l_mca_selec;
      --
   END fp_bus_mca_selec_casco_agrup;
   --
   --
   FUNCTION fp_bus_mca_selec_agrup(p_cod_cia           c2000000.cod_cia             %TYPE,
                                      p_cod_ramo       c2000000.cod_ramo            %TYPE,
                                      p_num_cotizacion c2000000.num_cotizacion      %TYPE,
                                      p_num_simulacion c2009040_vcr.num_simulacion  %TYPE,
                                      p_todos_cod_cobs VARCHAR2                          )
      RETURN VARCHAR2
   IS
   --
   l_mca_select VARCHAR2(1) := trn.NO;
   --
   BEGIN
      --
      mx('I', 'fp_bus_mca_selec_agrup');
      --
      BEGIN
         --
         IF NVL(g_tip_mvto_batch,g_k_tip_mvto_batch_cotacao) = g_k_tip_mvto_batch_cotacao THEN
             --
             mx('g_tip_mvto_batch: ', g_tip_mvto_batch);
             --
             WITH cod_cob_parser AS
                                (SELECT regexp_substr(p_todos_cod_cobs, '[^,]+', trn.uno, LEVEL) AS cod_cob
                                 FROM dual
                                 CONNECT BY LEVEL <= length(p_todos_cod_cobs) - length(REPLACE(p_todos_cod_cobs, g_k_separador_vir, trn.nulo)) + trn.uno)
              SELECT trn.SI       AS mca_selec
              INTO l_mca_select
              FROM c2009040_vcr   c,
                   cod_cob_parser p
              WHERE  c.cod_cia        = p_cod_cia
                 AND c.cod_ramo       = p_cod_ramo
                 AND c.num_cotizacion = p_num_cotizacion
                 AND c.num_simulacion = p_num_simulacion
                 AND c.cod_cob        = p.cod_cob;
            --
         ELSIF g_tip_mvto_batch = g_k_tip_mvto_batch_endosso THEN
             --
             mx('g_tip_mvto_batch: ', g_tip_mvto_batch);
             --
             WITH cod_cob_parser AS
                                (SELECT regexp_substr(p_todos_cod_cobs, '[^,]+', trn.uno, LEVEL) AS cod_cob
                                 FROM dual
                                 CONNECT BY LEVEL <= length(p_todos_cod_cobs) - length(REPLACE(p_todos_cod_cobs, g_k_separador_vir, trn.nulo)) + trn.uno)
             SELECT trn.SI
               INTO l_mca_select
               FROM         a2000560 a,
                      cod_cob_parser p
              WHERE a.cod_cia        =    p_cod_cia
                AND (a.num_propuesta =    p_num_cotizacion
                AND  a.cod_campo     =    'COMCA_SELECCION' || p.cod_cob
                AND  a.val_campo     =    'S');
             --
         END IF;
         --
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
         --
         l_mca_select := trn.NO;
         --
      END;
      --
      mx('F', 'fp_bus_mca_selec_agrup');
      --
      RETURN l_mca_select;
      --
   END fp_bus_mca_selec_agrup;
   --
   --
   FUNCTION fp_bus_cob_agrup(p_cod_cia                df_cmn_nwt_xx_vrb_cnc.cmp_val%TYPE,
                                      p_cod_ramo               df_cmn_nwt_xx_vrb_cnc.lob_val%TYPE,
                                      p_vrb_nam                df_cmn_nwt_xx_vrb_cnc.vrb_nam%TYPE)
   RETURN rec_tab_cod_cob_agrupadas
   IS
   --
   l_tab_cod_cob_agrupadas rec_tab_cod_cob_agrupadas;
   --
   BEGIN
      --
      mx('I', 'fp_bus_cob_agrup');
      -- Ini. v 1.41
      mx('p_cod_cia' , p_cod_cia);
      mx('p_cod_ramo', p_cod_ramo);
      mx('p_vrb_nam' , p_vrb_nam);
      -- Fim. v 1.41
      --
      l_tab_cod_cob_agrupadas := rec_tab_cod_cob_agrupadas();
      --
      -- BUSCA NA TABELA TODOS OS COD_COB PARAMETRIZADOS PARA O AGRUPAMENTO PASSADO
      IF NOT l_eh_3_pacotes THEN -- 2.14
         --
         FOR cob IN (SELECT DISTINCT a.cnc_vrb_val AS cod_cob
                                FROM df_cmn_nwt_xx_vrb_cnc a
                               WHERE a.cmp_val         = p_cod_cia
                                 AND a.lob_val         = p_cod_ramo
                                 AND a.vrb_nam         LIKE  (p_vrb_nam || '%')
                                 --/* 1.79 I
                                 -- Ini. v 1.41
                                 -- Condicao para nao exibir AS coberturas de carta verde unificadas para endosso
                                 /*AND a.vrb_nam =
                                    (CASE
                                       WHEN a.vrb_nam = 'COD_COB_AGRUPADA#92'                                           AND
                                            trn_k_global.ref_f_global('tip_mvto_batch') = ea_k_231_utils.g_k_spto_batch
                                       THEN
                                        trn.NULO
                                       ELSE
                                        a.vrb_nam
                                     END)*/--v1.90
                                 -- Fim. v 1.41
                                 --1.79 F*/
                                 --
                                 AND a.mdt_val         = EM.cod_modalidad_gen
                                 AND a.crn_val         = DC.cod_mon_gen
                                 AND a.cvr_val         = EM.cod_cob_gen
                                 AND a.frs_lvl_val     = DC.cod_nivel1_gen
                                 AND a.scn_lvl_val     = DC.cod_nivel2_gen
                                 AND a.thr_lvl_val     = DC.cod_nivel3_gen
                                 AND a.frs_dst_hnl_val = DC.cod_canal1_gen
                                 AND a.scn_dst_hnl_val = DC.cod_canal2_gen
                                 AND a.thr_dst_hnl_val = DC.cod_canal3_gen
                                 AND a.agn_val         = TRN.cod_tercero_gen
                                 AND a.gpp_val         = 'ZZZZZZZZZZZZZ'
                                 AND a.del_val         = EM.num_contrato_gen
                                 AND a.sbl_val         = EM.num_subcontrato_gen
                                 AND a.ply_val         = 'ZZZZZZZZZZZZZ'
                                 AND a.cnc_vrb_val     IN (SELECT g40.cod_Cob
                                                             FROM g2109040_vcr g40,
                                                                  g2109041_vcr g41
                                                            WHERE g40.val_clave_formula = g_val_clave_formula
                                                              AND g40.val_clave_formula = g41.val_clave_formula
                                                              AND g40.cod_Cob = g41.cod_Cob
                                                              AND (   g40.mca_contrata = 'S' AND g41.mca_contrata_cob = 'S'
                                                                 OR g40.mca_contrata = 'N' AND g41.mca_contrata_cob = 'S'
                                                                 OR g40.mca_contrata = 'S' AND g41.mca_contrata_cob = 'N'
                                                               --OR g40.mca_contrata = 'N' AND g41.mca_contrata_cob = 'N'
                                                                 OR (g40.mca_contrata = (CASE
                                                                                         WHEN p_tip_lista_cob = 'B' THEN
                                                                                          'N'
                                                                                         ELSE
                                                                                          NULL
                                                                                        END) AND
                                                                     g41.mca_contrata_cob = (CASE
                                                                                             WHEN p_tip_lista_cob = 'B' THEN
                                                                                              'N'
                                                                                             ELSE
                                                                                              NULL
                                                                                            END)) --v1.82
                                                                  )
                                                          )
                                 AND a.vld_dat          = (SELECT MAX(vld_dat)
                                                             FROM df_cmn_nwt_xx_vrb_cnc b
                                                            WHERE b.cmp_val         = a.cmp_val
                                                              AND b.lob_val         = a.lob_val
                                                              AND b.mdt_val         = a.mdt_val
                                                              AND b.crn_val         = a.crn_val
                                                              AND b.cvr_val         = a.cvr_val
                                                              AND b.frs_lvl_val     = a.frs_lvl_val
                                                              AND b.scn_lvl_val     = a.scn_lvl_val
                                                              AND b.thr_lvl_val     = a.thr_lvl_val
                                                              AND b.frs_dst_hnl_val = a.frs_dst_hnl_val
                                                              AND b.scn_dst_hnl_val = a.scn_dst_hnl_val
                                                              AND b.thr_dst_hnl_val = a.thr_dst_hnl_val
                                                              AND b.gpp_val         = a.gpp_val
                                                              AND b.del_val         = a.del_val
                                                              AND b.sbl_val         = a.sbl_val
                                                              AND b.ply_val         = a.ply_val
                                                              AND b.agn_val         = a.agn_val
                                                              AND b.vrb_nam         = a.vrb_nam
                                                              AND b.cnc_vrb_val     = a.cnc_vrb_val)
                     ORDER BY TO_NUMBER(cod_cob))
         LOOP
            --
            mx('cob.cod_cob', cob.cod_cob);-- 1.0
            l_tab_cod_cob_agrupadas.EXTEND(1);
            l_tab_cod_cob_agrupadas(l_tab_cod_cob_agrupadas.LAST) := cob.cod_cob;
            --
         END LOOP;
         --
      ELSE -- I 2.14
         --
         FOR cob IN (SELECT DISTINCT a.cnc_vrb_val AS cod_cob
                                FROM df_cmn_nwt_xx_vrb_cnc a
                               WHERE a.cmp_val         = p_cod_cia
                                 AND a.lob_val         = p_cod_ramo
                                 AND a.vrb_nam         LIKE  (p_vrb_nam || '%')
                                 AND a.mdt_val         = EM.cod_modalidad_gen
                                 AND a.crn_val         = DC.cod_mon_gen
                                 AND a.cvr_val         = EM.cod_cob_gen
                                 AND a.frs_lvl_val     = DC.cod_nivel1_gen
                                 AND a.scn_lvl_val     = DC.cod_nivel2_gen
                                 AND a.thr_lvl_val     = DC.cod_nivel3_gen
                                 AND a.frs_dst_hnl_val = DC.cod_canal1_gen
                                 AND a.scn_dst_hnl_val = DC.cod_canal2_gen
                                 AND a.thr_dst_hnl_val = DC.cod_canal3_gen
                                 AND a.agn_val         = TRN.cod_tercero_gen
                                 AND a.gpp_val         = 'ZZZZZZZZZZZZZ'
                                 AND a.del_val         = EM.num_contrato_gen
                                 AND a.sbl_val         = EM.num_subcontrato_gen
                                 AND a.ply_val         = 'ZZZZZZZZZZZZZ'
                                 AND a.cnc_vrb_val     IN (SELECT g40.cod_Cob
                                                             FROM g2109040_vcr g40
                                                            WHERE (ea_k_definicion_pacote_vcr.f_check_cob_valida(p_num_simulacion -1, g40.cod_Cob,'P') >0 --2.21
                                                                OR ea_k_definicion_pacote_vcr.f_check_cob_valida(p_num_simulacion -1, g40.cod_Cob,'A') >0 ) -- 2.27
                                                              AND g40.val_clave_formula = g_val_clave_formula
                                                              AND g40.cod_modalidad     = p_cod_modalidad -- 2.61

                                                          )
                                 AND a.vld_dat          = (SELECT MAX(vld_dat)
                                                             FROM df_cmn_nwt_xx_vrb_cnc b
                                                            WHERE b.cmp_val         = a.cmp_val
                                                              AND b.lob_val         = a.lob_val
                                                              AND b.mdt_val         = a.mdt_val
                                                              AND b.crn_val         = a.crn_val
                                                              AND b.cvr_val         = a.cvr_val
                                                              AND b.frs_lvl_val     = a.frs_lvl_val
                                                              AND b.scn_lvl_val     = a.scn_lvl_val
                                                              AND b.thr_lvl_val     = a.thr_lvl_val
                                                              AND b.frs_dst_hnl_val = a.frs_dst_hnl_val
                                                              AND b.scn_dst_hnl_val = a.scn_dst_hnl_val
                                                              AND b.thr_dst_hnl_val = a.thr_dst_hnl_val
                                                              AND b.gpp_val         = a.gpp_val
                                                              AND b.del_val         = a.del_val
                                                              AND b.sbl_val         = a.sbl_val
                                                              AND b.ply_val         = a.ply_val
                                                              AND b.agn_val         = a.agn_val
                                                              AND b.vrb_nam         = a.vrb_nam
                                                              AND b.cnc_vrb_val     = a.cnc_vrb_val)
                     ORDER BY TO_NUMBER(cod_cob))
         LOOP
            --
            mx('cob.cod_cob', cob.cod_cob);-- 1.0
            l_tab_cod_cob_agrupadas.EXTEND(1);
            l_tab_cod_cob_agrupadas(l_tab_cod_cob_agrupadas.LAST) := cob.cod_cob;
            --
         END LOOP;
         --
      END IF; -- F 2.14
      --
      mx('F', 'fp_bus_cob_agrup');
      --
      RETURN l_tab_cod_cob_agrupadas;
      --
   END fp_bus_cob_agrup;
   --
   --
   FUNCTION fp_trata_nom_cob_agrup(p_cod_cia                 c2009040_vcr.cod_cia     %TYPE,
                                       p_cod_ramo                c2009040_vcr.cod_ramo    %TYPE,
                                       p_tab_cod_cob_agrupadas   rec_tab_cod_cob_agrupadas     )
        RETURN VARCHAR2
   IS
   --
   l_cod_cobs          VARCHAR2(50)  := '';
   l_nom_cobs          VARCHAR2(400) := '';
   --
   l_nom_cob_agrupadas VARCHAR2(400) := '';
   --
   BEGIN
      --
      mx('I', 'fp_trata_nom_cob_agrup');
      --
      -- RETORNA LISTA DE COD_COBS DO AGRUPAMENTO PARA SER USANDO NO 'IN' DA CONSULTA PRINCIPAL
      l_cod_cobs := fp_trata_lista_agrup(p_tab_cod_cob_agrupadas);
      --
      -- BUSCA O NOME DAS COBERTURAS DO AGRUPAMENTO
      -- COD_COB_PARSER TRANSFORMA VARIAVEL VARCHAR COM OS COD_COB EM SUBCONSULTA PARA SER USANDO EM IN
      WITH
         cod_cob_parser AS (SELECT regexp_substr(l_cod_cobs,
                                                     '[^,]+',
                                                     trn.UNO,
                                                     LEVEL) AS cod_cob
                                 FROM dual
                                 CONNECT BY LEVEL <= LENGTH(l_cod_cobs) - LENGTH(REPLACE(l_cod_cobs,
                                                                                         g_k_separador_vir,
                                                                                         trn.NULO)) + trn.UNO)
         SELECT      LISTAGG(xx.row_nam, ',' || ' ') WITHIN GROUP (ORDER BY xx.row_nam) AS nom_cobs
         INTO        l_nom_cobs
        FROM (SELECT x.row_nam
                FROM df_cmn_nwt_xx_vrb_cnc x,
                     cod_cob_parser        p
               WHERE x.cmp_val      = p_cod_cia
                 AND x.lob_val     = TO_CHAR(p_cod_ramo)
                 AND x.vrb_nam     LIKE (p_cod_campo_cob_agrupada || g_k_pref_simulacion || '%')
                 AND x.cnc_vrb_val IN   (p.cod_cob)
           GROUP BY  x.row_nam ) xx;
      --
      l_nom_cob_agrupadas :=  l_nom_cobs;
      --
      mx('F', 'fp_trata_nom_cob_agrup');
      --
      RETURN l_nom_cob_agrupadas;
      --
   END fp_trata_nom_cob_agrup;
   --
   --
   FUNCTION fp_bus_mca_selec_atrib_agrup(p_cod_cia        c2009040_vcr.cod_cia%TYPE,
                                         p_cod_ramo       c2009040_vcr.cod_ramo%TYPE,
                                         p_num_cotizacion c2009040_vcr.num_cotizacion%TYPE,
                                         p_cod_campo      g2990006.cod_campo%TYPE,
                                         p_cod_valor      g2990006.cod_valor%TYPE,
                                         p_cod_cob        c2000000.cod_fila%TYPE,
                                         p_cod_modalidad  g2109010_vcr.cod_modalidad%TYPE)
     RETURN c2000000.val_columna%TYPE
     IS
     --
     l_mca_selec    c2000000.val_columna%TYPE;
     l_existe_campo NUMBER := trn.CERO; --2.29
     --
   BEGIN
     --
     mx('I', 'fp_bus_mca_selec_atrib_agrup');
     mx('p_cod_campo:      ', p_cod_campo     );
     mx('p_cod_valor:      ', p_cod_valor     );
     mx('p_cod_cob:        ', p_cod_cob       );
     mx('p_cod_modalidad:  ', p_cod_modalidad );
     mx('p_num_cotizacion: ', p_num_cotizacion);
     --
     -- VERIFICA SE O VALOR DO CAMPO PASSADO CONSTA NA c2000000
     BEGIN
       --
       IF NVL(g_tip_mvto_batch, g_k_tip_mvto_batch_cotacao) = g_k_tip_mvto_batch_cotacao THEN
         --
         mx('g_tip_mvto_batch: ', g_tip_mvto_batch);
         -- 2.28
         IF NVL(fp_devuelve_n('tres_pacotes'), trn.CERO) > trn.CERO THEN --2.29
           --I 2.29
           BEGIN
             --
             SELECT COUNT(1)
               INTO l_existe_campo
               FROM c2000000 c
              WHERE c.cod_cia        =    p_cod_cia
                AND c.cod_ramo       =    p_cod_ramo
                AND c.num_cotizacion =    p_num_cotizacion
                AND c.nom_columna    =    p_cod_campo || g_k_prefixo_simulacion || p_num_simulacion -- 2.29
                AND c.cod_fila      IN  (g_k_cod_fila_generica);
           EXCEPTION
             WHEN OTHERS THEN
               --
               l_existe_campo := trn.CERO;
               --
           END;
       END IF; -- 2.39
           --
       IF l_existe_campo > trn.CERO THEN
             --
             SELECT trn.SI
               INTO l_mca_selec
               FROM c2000000 c
              WHERE c.cod_cia        =    p_cod_cia
                AND c.cod_ramo       =    p_cod_ramo
                AND c.num_cotizacion =    p_num_cotizacion
                AND c.nom_columna    =    p_cod_campo || g_k_prefixo_simulacion || p_num_simulacion
                AND c.val_columna    =    p_cod_valor
                AND c.cod_fila      IN    (g_k_cod_fila_generica);
             --
        ELSE
             --
             SELECT trn.SI
               INTO l_mca_selec
               FROM c2000000 c
              WHERE c.cod_cia        =    p_cod_cia
                AND c.cod_ramo       =    p_cod_ramo
                AND c.num_cotizacion =    p_num_cotizacion
                AND c.nom_columna    =    p_cod_campo
                AND c.val_columna    =    p_cod_valor
                AND c.cod_fila      IN    (g_k_cod_fila_generica);
             --
         END IF;
           -- F 2.29
           --
         ELSIF g_tip_mvto_batch = g_k_tip_mvto_batch_endosso THEN
           --
           mx('g_tip_mvto_batch: ', g_tip_mvto_batch);
           --
           SELECT trn.SI
             INTO l_mca_selec
             FROM a2000560 a
            WHERE a.cod_cia        =    p_cod_cia
              AND a.num_propuesta  =    p_num_cotizacion
              AND a.cod_campo      LIKE (p_cod_campo || p_cod_cob || '%')
              AND a.val_campo      =    p_cod_valor;
           --
       END IF;
       --
       -- 2.39
       --
     EXCEPTION
       WHEN NO_DATA_FOUND THEN
         --
         l_mca_selec := trn.NO;
         --
     END;
     --
     mx('l_mca_selec: ', l_mca_selec);
     --
     mx('F', 'fp_bus_mca_selec_atrib_agrup');
     --
     RETURN l_mca_selec;
     --
   END fp_bus_mca_selec_atrib_agrup;
   --
   --
   FUNCTION fp_bus_val_premio_cob_agrup(p_cod_cia        c2109170_vcr.cod_cia%TYPE,
                                       p_cod_ramo       c2109170_vcr.cod_ramo%TYPE,
                                       p_num_cotizacion c2109170_vcr.num_cotizacion%TYPE,
                                       p_num_simulacion c2109170_vcr.num_simulacion%TYPE,
                                       p_num_spto       A2100170.num_spto%TYPE,
                                       p_cod_cob        VARCHAR2)
      RETURN c2109170_vcr.imp_anual%TYPE
   IS
      --
      l_val_premio c2109170_vcr.imp_anual%TYPE;
      l_num_spto   a2100170.num_spto%TYPE; --v1.69
      --
   BEGIN
      --
      mx('I', 'fp_bus_val_premio_cob_agrup');
      --
      -- EXECUTA A SOMATORIA DE TODOS OS REGISTROS (MENOS IOF) PARA AQUELA COBERTURA NA TABELA c2109170_vcr
      BEGIN
      --
      IF NVL(g_tip_mvto_batch,g_k_tip_mvto_batch_cotacao) = g_k_tip_mvto_batch_cotacao THEN
      --
      WITH cod_cob_parser AS (SELECT regexp_substr(p_cod_cob,
                                                   '[^,]+',
                                                   trn.UNO,
                                                   LEVEL) AS cod_cob
                                FROM dual
                                CONNECT BY LEVEL <= LENGTH(p_cod_cob) - LENGTH(REPLACE(p_cod_cob,
                                                                                       g_k_separador_vir,
                                                                                       trn.NULO))
                                                                        + trn.UNO)
      SELECT SUM(NVL(imp_spto,trn.CERO)) AS val_premio
        INTO l_val_premio
        FROM c2109170_vcr c,
             cod_cob_parser p
       WHERE c.cod_cia        =  p_cod_cia
         AND c.cod_ramo       =  p_cod_ramo
         AND c.num_cotizacion =  p_num_cotizacion
         AND c.num_simulacion =  p_num_simulacion
         AND c.cod_cob        =  p.cod_cob
         AND c.cod_desglose   <> g_k_cod_desglose_iof;
      --
      ELSIF g_tip_mvto_batch = g_k_tip_mvto_batch_endosso THEN
      --
      l_num_spto := fp_busca_max_spto_def(p_cod_cia
                                         ,p_num_cotizacion); --v1.69
      --
      WITH cod_cob_parser AS
       (SELECT regexp_substr(p_cod_cob, '[^,]+', trn.uno, LEVEL) AS cod_cob
          FROM dual
        CONNECT BY LEVEL <= length(p_cod_cob) - length(REPLACE(p_cod_cob, g_k_separador_vir, trn.nulo)) + trn.uno)

      SELECT SUM(nvl(imp_spto, trn.cero)) AS val_premio
        INTO l_val_premio
        FROM A2100170 a,
             cod_cob_parser p
       WHERE a.cod_cia        = p_cod_cia
         AND a.cod_ramo       = p_cod_ramo
         AND a.num_poliza     = p_num_cotizacion
         AND a.num_spto       = l_num_spto --v1.69
         AND a.num_riesgo     = trn.UNO
         AND a.cod_cob        = p.cod_cob
         AND a.cod_desglose   <> g_k_cod_desglose_iof;
      --
      END IF;
      --
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
            --
            l_val_premio := trn.NULO;
            --
      END;
      --
      mx('F', 'fp_bus_val_premio_cob_agrup');
      --
      RETURN l_val_premio;
      --
   END fp_bus_val_premio_cob_agrup;
   --
   --
   FUNCTION fp_bus_val_franq_cob_agrup(p_cod_cia        c2000000.cod_cia           %TYPE,
                                       p_cod_ramo       c2000000.cod_ramo          %TYPE,
                                       p_num_cotizacion c2000000.num_cotizacion    %TYPE,
                                       p_num_simulacion c2009040_vcr.num_simulacion%TYPE,
                                       p_num_spto       A2100170.num_spto          %TYPE,
                                       p_todos_cod_cobs VARCHAR2)
      RETURN c2009040_vcr.val_franquicia_min%TYPE
   IS
      --
      l_val_franquia c2009040_vcr.val_franquicia_min%TYPE;
      --
   BEGIN
      --
      mx('I', 'fp_bus_val_franq_cob_agrup');
      --
      BEGIN
      --
      IF NVL(g_tip_mvto_batch,g_k_tip_mvto_batch_cotacao) = g_k_tip_mvto_batch_cotacao THEN
      --
        WITH cod_cob_parser AS
         (SELECT regexp_substr(p_todos_cod_cobs, '[^,]+', trn.uno, LEVEL) AS cod_cob
            FROM dual
          CONNECT BY LEVEL <= length(p_todos_cod_cobs) -
                     length(REPLACE(p_todos_cod_cobs,
                                             g_k_separador_vir,
                                             trn.nulo)) + trn.uno)
        SELECT SUM(nvl(c.val_franquicia_min, trn.cero)) AS val_franquicia_min
          INTO l_val_franquia
          FROM c2009040_vcr c,
               cod_cob_parser p
         WHERE c.cod_cia        = p_cod_cia
           AND c.cod_ramo       = p_cod_ramo
           AND c.num_cotizacion = p_num_cotizacion
           AND c.num_simulacion = p_num_simulacion
           AND c.cod_cob        = p.cod_cob;
      --
      ELSIF g_tip_mvto_batch = g_k_tip_mvto_batch_endosso THEN
      --
        WITH cod_cob_parser AS
         (SELECT regexp_substr(p_todos_cod_cobs, '[^,]+', trn.uno, LEVEL) AS cod_cob
            FROM dual
          CONNECT BY LEVEL <= length(p_todos_cod_cobs) -
                     length(REPLACE(p_todos_cod_cobs,
                                             g_k_separador_vir,
                                             trn.nulo)) + trn.uno)
         SELECT SUM(nvl(a.val_franquicia_min, trn.cero)) AS val_franquicia_min
           INTO l_val_franquia
           FROM a2000040 a,
                cod_cob_parser p
          WHERE a.cod_cia    = p_cod_cia
            AND a.cod_ramo   = p_cod_ramo
            AND a.num_poliza = p_num_cotizacion
            AND a.num_riesgo = trn.uno
            AND a.num_spto   = p_num_spto
            AND a.cod_cob    = p.cod_cob
            AND nvl(a.mca_baja_cob, trn.NO) = trn.NO
            AND a.mca_vigente               = trn.SI
            AND a.mca_vigente_apli          = trn.SI
            AND a.val_franquicia_min IS NOT NULL;
      --
      END IF;
      --
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          --
          l_val_franquia := trn.NULO;
          --
      END;
      --
      mx('F', 'fp_bus_val_franq_cob_agrup');
      --
      RETURN l_val_franquia;
      --
   END fp_bus_val_franq_cob_agrup;
   --
   -- I 2.77
   PROCEDURE pi_mca_concessionaria IS
   --
   --
   l_cod_cia            a1001332.cod_cia         %TYPE              ;
   l_cod_sector         a2999027_vcr.cod_sector  %TYPE              ;
   l_cod_ramo           a2999027_vcr.cod_ramo    %TYPE              ;
   l_cod_agt            a1001332.cod_agt         %TYPE              ;
   l_cod_nivel3         a2999027_vcr.cod_nivel3  %TYPE              ;
   l_num_contrato       a2999027_vcr.num_contrato%TYPE     := 99998 ;
   l_mca_concessionaria VARCHAR(1)                         := trn.NO;
   l_cod_campanha       a2999027_vcr.cod_campanha_vcr%TYPE := NULL  ;
   l_mca_preferencia    VARCHAR(1)                         :=trn.NO ;--2.84
   --
   BEGIN
     --
     mx('I', 'pi_mca_concessionaria');
     --
     l_cod_cia      := trn_k_global.ref_f_global('cod_cia');
     l_cod_ramo     := trn_k_global.ref_f_global('cod_ramo');
     l_cod_agt      := trn_k_global.ref_f_global('cod_agt');
     l_mca_concessionaria:=trn_k_global.ref_f_global('mca_concessionaria');--2.84
     l_mca_preferencia:=trn_k_global.ref_f_global('mca_preferencia');--2.84
     --
     dc_k_a1001800.p_lee(p_cod_cia  => l_cod_cia,
                         p_cod_ramo => l_cod_ramo);
     --
     l_cod_sector   := dc_k_a1001800.f_cod_sector;
     --
     l_cod_nivel3   := dc_f_a1001332(p_cod_cia         => l_cod_cia,
                                     p_cod_act_tercero => dc.ACT_AGENTE,
                                     p_cod_agt         => l_cod_agt,
                                     p_fec_validez     => TRUNC(SYSDATE)).cod_nivel3;
     --
     IF l_mca_concessionaria IS NULL THEN--2.84
       --
       em_k_a2999027_vcr.p_lee(p_cod_cia          => l_cod_cia,
                               p_cod_sector       => l_cod_sector,
                               p_cod_ramo         => l_cod_ramo,
                               p_cod_agt          => l_cod_agt,
                               p_cod_nivel3       => l_cod_nivel3,
                               p_num_contrato     => l_num_contrato,
                               p_fec_vig_ini_vcr  => TRUNC(SYSDATE),
                               p_cod_campanha_vcr => 45);
       --
       BEGIN
         --
         l_cod_campanha := em_k_a2999027_vcr.f_cod_campanha_vcr;
         --
       EXCEPTION
         WHEN OTHERS THEN
           --
           em_k_a2999027_vcr.p_lee(p_cod_cia          => l_cod_cia,
                                   p_cod_sector       => l_cod_sector,
                                   p_cod_ramo         => l_cod_ramo,
                                   p_cod_agt          => l_cod_agt,
                                   p_cod_nivel3       => l_cod_nivel3,
                                   p_num_contrato     => l_num_contrato,
                                   p_fec_vig_ini_vcr  => TRUNC(SYSDATE),
                                   p_cod_campanha_vcr => 16);
           --
           BEGIN
             --
             l_cod_campanha := em_k_a2999027_vcr.f_cod_campanha_vcr;
             --
           EXCEPTION
             WHEN OTHERS THEN
               --
               em_k_a2999027_vcr.p_lee(p_cod_cia          => l_cod_cia,
                                       p_cod_sector       => l_cod_sector,
                                       p_cod_ramo         => l_cod_ramo,
                                       p_cod_agt          => l_cod_agt,
                                       p_cod_nivel3       => l_cod_nivel3,
                                       p_num_contrato     => l_num_contrato,
                                       p_fec_vig_ini_vcr  => TRUNC(SYSDATE),
                                       p_cod_campanha_vcr => 49);
   --
             BEGIN
               --
                l_cod_campanha := em_k_a2999027_vcr.f_cod_campanha_vcr;
                --
             EXCEPTION
               WHEN OTHERS THEN
                 --
                 l_cod_campanha := NULL;
                 --
             END;
              --
           END;
           --
        END;
        --
        IF l_cod_campanha IS NOT NULL THEN
          --
          l_mca_concessionaria := trn.SI;
          --
        END IF;
        --
        trn_k_global.asigna('mca_concessionaria', l_mca_concessionaria);
        --
      END IF;
      --
      mx('F', 'pi_mca_concessionaria');
      --
    EXCEPTION
      WHEN OTHERS THEN
        --
        pp_asigna('mca_concessionaria', trn.NO);
        --
        mx('F', 'pi_mca_concessionaria - Exception');
        --
    END pi_mca_concessionaria;
    --F 2.77
    --
    -- {v4.75
    FUNCTION fp_cod_agt_cob_casco
    RETURN BOOLEAN
    AS
    --
    l_cod_cia            g2009080_vcr.cod_cia           %TYPE;
    l_cod_ramo           g2009080_vcr.cod_ramo          %TYPE;
    l_cod_agt            g2009080_vcr.cod_agt           %TYPE;
    l_cod_susep_agt      g2009080_vcr.cod_susep_agt     %TYPE;
    l_cod_nivel1         g2009080_vcr.cod_nivel1        %TYPE;
    l_cod_nivel2         g2009080_vcr.cod_nivel2        %TYPE;
    l_cod_nivel3         g2009080_vcr.cod_nivel3        %TYPE;
    l_cod_canal1         g2009080_vcr.cod_canal1        %TYPE;
    l_cod_canal2         g2009080_vcr.cod_canal2        %TYPE;
    l_cod_canal3         g2009080_vcr.cod_canal3        %TYPE;
    l_num_poliza_grupo   g2009080_vcr.num_poliza_grupo  %TYPE;
    l_num_contrato       g2009080_vcr.num_contrato      %TYPE;
    l_num_subcontrato    g2009080_vcr.num_subcontrato   %TYPE;
    l_num_poliza_cliente g2009080_vcr.num_poliza_cliente%TYPE;
    l_num_poliza         g2009080_vcr.num_poliza        %TYPE;
    l_tip_segmento       g2009080_vcr.tip_segmento      %TYPE;
    l_cod_modalidad      g2009080_vcr.cod_modalidad     %TYPE;
    l_tip_merc_deter     g2009080_vcr.tip_merc_deter    %TYPE;
    l_mca_renov_outras   g2009080_vcr.mca_renov_outras  %TYPE;
    l_tip_produto        g2009080_vcr.tip_produto       %TYPE;
    l_fec_validez        g2009080_vcr.fec_validez       %TYPE;
    --
    CURSOR c_g2009080_vcr(pc_cod_cia            g2009080_vcr.cod_cia           %TYPE
                         ,pc_cod_ramo           g2009080_vcr.cod_ramo          %TYPE
                         ,pc_cod_agt            g2009080_vcr.cod_agt           %TYPE
                         ,pc_cod_susep_agt      g2009080_vcr.cod_susep_agt     %TYPE
                         ,pc_cod_nivel1         g2009080_vcr.cod_nivel1        %TYPE
                         ,pc_cod_nivel2         g2009080_vcr.cod_nivel2        %TYPE
                         ,pc_cod_nivel3         g2009080_vcr.cod_nivel3        %TYPE
                         ,pc_cod_canal1         g2009080_vcr.cod_canal1        %TYPE
                         ,pc_cod_canal2         g2009080_vcr.cod_canal2        %TYPE
                         ,pc_cod_canal3         g2009080_vcr.cod_canal3        %TYPE
                         ,pc_num_poliza_grupo   g2009080_vcr.num_poliza_grupo  %TYPE
                         ,pc_num_contrato       g2009080_vcr.num_contrato      %TYPE
                         ,pc_num_subcontrato    g2009080_vcr.num_subcontrato   %TYPE
                         ,pc_num_poliza_cliente g2009080_vcr.num_poliza_cliente%TYPE
                         ,pc_num_poliza         g2009080_vcr.num_poliza        %TYPE
                         ,pc_tip_segmento       g2009080_vcr.tip_segmento      %TYPE
                         ,pc_cod_modalidad      g2009080_vcr.cod_modalidad     %TYPE
                         ,pc_tip_merc_deter     g2009080_vcr.tip_merc_deter    %TYPE
                         ,pc_mca_renov_outras   g2009080_vcr.mca_renov_outras  %TYPE
                         ,pc_tip_produto        g2009080_vcr.tip_produto       %TYPE
                         ,pc_fec_validez        g2009080_vcr.fec_validez       %TYPE)
     IS
      SELECT *
        FROM g2009080_vcr
       WHERE cod_cia            = pc_cod_cia
         AND cod_ramo           IN (pc_cod_ramo          , em.COD_RAMO_GEN)
         AND cod_agt            IN (pc_cod_agt           , trn.COD_TERCERO_GEN)
         AND cod_susep_agt      IN (pc_cod_susep_agt     , ea_k_231_utils.g_k_cod_susep_gen_2)
         AND cod_nivel1         IN (pc_cod_nivel1        , dc.COD_NIVEL1_GEN )
         AND cod_nivel2         IN (pc_cod_nivel2        , dc.COD_NIVEL2_GEN )
         AND cod_nivel3         IN (pc_cod_nivel3        , dc.COD_NIVEL3_GEN )
         AND cod_canal1         IN (pc_cod_canal1        , dc.COD_CANAL1_GEN )
         AND cod_canal2         IN (pc_cod_canal2        , dc.COD_CANAL2_GEN )
         AND cod_canal3         IN (pc_cod_canal3        , dc.COD_CANAL3_GEN )
         AND num_poliza_grupo   IN (pc_num_poliza_grupo  , em.NUM_POLIZA_GRUPO_GEN )
         AND num_contrato       IN (pc_num_contrato      , em.NUM_CONTRATO_GEN )
         AND num_subcontrato    IN (pc_num_subcontrato   , em.NUM_SUBCONTRATO_GEN )
         AND num_poliza_cliente IN (pc_num_poliza_cliente, em.NUM_POLIZA_GEN )
         AND num_poliza         IN (pc_num_poliza        , em.NUM_POLIZA_GEN )
         AND tip_segmento       IN (pc_tip_segmento      , ea_k_231_utils.g_k_tip_segmento_gen)
         AND cod_modalidad      IN (pc_cod_modalidad     , em.COD_MODALIDAD_GEN)
         AND tip_merc_deter     IN (pc_tip_merc_deter    , ea_k_231_utils.g_k_tip_merc_deter_gen)
         AND mca_renov_outras   IN (pc_mca_renov_outras  , ea_k_231_utils.g_k_mca_renov_outras_gen)
         AND tip_produto        IN (pc_tip_produto       , ea_k_231_utils.g_k_tip_produto_gen)
         AND fec_validez       <= pc_fec_validez
         AND mca_inh            = trn.NO
       ORDER BY fec_validez DESC;

    --
    reg_g2009080_vcr c_g2009080_vcr%ROWTYPE;
    --
    l_existe         BOOLEAN := FALSE;
    --
    BEGIN
      --
      mx('I','fp_cod_agt_cob_casco');
      --
      IF trn_k_global.ref_f_global('tip_mvto_batch') = ea_k_231_utils.g_k_cotiza_batch
      THEN
        --
        l_cod_cia            := trn_k_global.cod_cia;
        l_cod_ramo           := trn_k_global.ref_f_global('cod_ramo');
        l_cod_agt            := trn_k_global.ref_f_global('cod_agt_param');
        l_cod_nivel1         := trn_k_global.ref_f_global('cod_nivel1');
        l_cod_nivel2         := trn_k_global.ref_f_global('cod_nivel2');
        l_cod_nivel3         := trn_k_global.ref_f_global('cod_nivel3');
        l_cod_canal1         := trn_k_global.ref_f_global('cod_canal1');
        l_cod_canal2         := trn_k_global.ref_f_global('cod_canal2');
        l_cod_canal3         := trn_k_global.ref_f_global('cod_canal3');
        l_num_poliza_grupo   := trn_k_global.ref_f_global('num_poliza_grupo');
        l_num_contrato       := trn_k_global.ref_f_global('num_contrato');
        l_num_subcontrato    := trn_k_global.ref_f_global('num_subcontrato');
        l_num_poliza_cliente := trn_k_global.ref_f_global('num_poliza_cliente');
        l_num_poliza         := trn_k_global.ref_f_global('num_cotizacion');
        l_tip_segmento       := ea_k_231_utils.f_valor_dv('tip_segmento');
        l_cod_modalidad      := ea_k_231_utils.f_valor_dv('cod_modalidad');
        l_tip_merc_deter     := ea_k_231_utils.f_valor_dv('tip_merc_deter');
        l_mca_renov_outras   := ea_k_231_utils.f_valor_dv('mca_renov_outras');
        l_tip_produto        := ea_k_231_utils.f_valor_dv('tip_produto');
        l_fec_validez        := TO_DATE(ea_k_231_utils.f_valor_dv('fec_validez_tarifa')
                                       ,trn.FORMATO_FECHA);
        --
        dc_k_a1001332.p_lee(p_cod_cia     => l_cod_cia
                           ,p_cod_agt     => l_cod_agt
                           ,p_fec_validez => l_fec_validez);
        --
        l_cod_susep_agt := dc_k_a1001332.f_cod_agt_colegio;
        --
        IF c_g2009080_vcr%ISOPEN
        THEN
          --
          CLOSE c_g2009080_vcr;
          --
        END IF;
        --
        OPEN c_g2009080_vcr(l_cod_cia
                           ,l_cod_ramo
                           ,l_cod_agt
                           ,l_cod_susep_agt
                           ,l_cod_nivel1
                           ,l_cod_nivel2
                           ,l_cod_nivel3
                           ,l_cod_canal1
                           ,l_cod_canal2
                           ,l_cod_canal3
                           ,l_num_poliza_grupo
                           ,l_num_contrato
                           ,l_num_subcontrato
                           ,l_num_poliza_cliente
                           ,l_num_poliza
                           ,l_tip_segmento
                           ,l_cod_modalidad
                           ,l_tip_merc_deter
                           ,l_mca_renov_outras
                           ,l_tip_produto
                           ,l_fec_validez);
        --
        FETCH c_g2009080_vcr INTO reg_g2009080_vcr;
        --
        l_existe := c_g2009080_vcr%FOUND;
        --
        CLOSE c_g2009080_vcr;
        --
        RETURN l_existe;
        --
      END IF;
      --
      mx('F','fp_cod_agt_cob_casco');
      --
      RETURN TRUE;
      --
    EXCEPTION
      WHEN OTHERS
      THEN
        --
        mx('F','EXCEPTION - fp_cod_agt_cob_casco');
        RETURN TRUE;
        --
    END fp_cod_agt_cob_casco;
    -- v4.75}
    --
    --I v3.96
    /* --
    || Busca corretor e modalidad espec?ficos
    || para consulta na tabela de constantes de agrupamentos
    -- */
    PROCEDURE pi_busca_modalidade_especifica
    IS
      --
      l_cod_modalidad c2000000.val_columna%TYPE;
      l_existe        BOOLEAN := FALSE         ;
      --
      CURSOR c_df_cmn_nwt_xx_vrb_cnc IS
        SELECT a.mdt_val
             , a.agn_val
          FROM df_cmn_nwt_xx_vrb_cnc a
         WHERE a.cmp_val = p_cod_cia
           AND a.lob_val = p_cod_ramo
           AND a.vrb_nam LIKE (p_cod_campo_cob_agrupada || '#' || '%')
           AND a.mdt_val IN (l_cod_modalidad, EM.cod_modalidad_gen)
           AND a.agn_val IN (l_cod_agt, TRN.cod_tercero_gen)
         ORDER BY a.agn_val
                , a.mdt_val;
      --
      reg_df_cmn_nwt_xx_vrb_cnc c_df_cmn_nwt_xx_vrb_cnc%ROWTYPE;
      --
    BEGIN
      --
      mx('I', 'pi_busca_modalidade_especifica');
      --
      ea_k_231_utils.p_devuelve_dato_cotizacion(p_nom_tabla   => ea_k_231_utils.g_k_tabla_dv
                                               ,p_nom_columna => 'COD_MODALIDAD'
                                               ,p_val_campo   => l_cod_modalidad);
      --
      IF NVL(l_mca_renovacion, trn.NO) = trn.NO
      THEN
        --
        IF c_df_cmn_nwt_xx_vrb_cnc%ISOPEN
        THEN
          --
          CLOSE c_df_cmn_nwt_xx_vrb_cnc;
          --
        END IF;
        --
        OPEN c_df_cmn_nwt_xx_vrb_cnc;
        --
        FETCH c_df_cmn_nwt_xx_vrb_cnc
         INTO reg_df_cmn_nwt_xx_vrb_cnc;
        --
        l_existe := c_df_cmn_nwt_xx_vrb_cnc%FOUND;
        --
        IF l_existe
        THEN
          --
          l_cod_modalidad_esp := reg_df_cmn_nwt_xx_vrb_cnc.mdt_val;
          l_cod_agt_esp       := reg_df_cmn_nwt_xx_vrb_cnc.agn_val;
          --
        END IF;
        --
        CLOSE c_df_cmn_nwt_xx_vrb_cnc;
        --
      END IF;
      --
      mx('-', 'l_cod_modalidad_esp: ' || l_cod_modalidad_esp);
      mx('-', 'l_cod_agt_esp      : ' || l_cod_agt_esp      );
      --
      mx('F', 'pi_busca_modalidade_especifica');
      --
    EXCEPTION
      WHEN OTHERS
      THEN
        --
        mx('F', 'pi_busca_modalidade_especifica - Excepcion');
        --
    END pi_busca_modalidade_especifica;
    --F v3.96
    --
   BEGIN
      --
      mx('I', 'fp_bus_coberturas_agrupadas');
      --
      l_cod_agt := fp_devuelve_c('COD_AGT');
      l_eh_3_pacotes :=NVL( fp_devuelve_n( 'tres_pacotes' ) ,0 ) > 0 ;
      --
      l_retorno_cob_agrupadas := rec_tab_det_cob();
      --
      IF g_tip_mvto_batch = ea_k_231_utils.g_k_spto_batch
      THEN
        --
        g_num_spto := fp_busca_max_spto(p_cod_cia
                                       ,p_num_cotizacion);
        --
      END IF;
      --
     /* IF  NVL(trn_k_global.ref_f_global('mca_preferencia')   , trn.NO) = trn.SI THEN --2.79
        --
        pi_mca_concessionaria; --2.77
        --
      END IF;  -- 2.79 */
      pi_mca_concessionaria; --EFPEREIRA
      l_mca_concessionaria  := trn_k_global.ref_f_global('mca_concessionaria'); -- 2.84
      --
      -- BUSCA TODOS OS AGRUPAMENTOS DISPONIVEIS PARA O COD_RAMO
      IF NOT l_eh_3_pacotes THEN -- 2.14
      --
      -- v3.57 ini
      ea_k_231_utils.p_devuelve_dato_cotizacion(p_nom_tabla   => ea_k_231_utils.g_k_tabla_df
                                               ,p_nom_columna => 'MCA_RENOVACION'
                                               ,p_val_campo   => l_mca_renovacion);
      --
      l_mca_renovacion := NVL(l_mca_renovacion, trn.NO);
      --
      IF l_mca_renovacion = trn.SI
      THEN
        --
        ea_k_231_utils.p_devuelve_dato_cotizacion(p_nom_tabla   => ea_k_231_utils.g_k_tabla_dv
                                                 ,p_nom_columna => 'NUM_POLIZA_RENOV'
                                                 ,p_val_campo   => l_num_poliza_renov);
        --
      END IF;
      -- v3.57 fim
      --
      FOR cob IN c_agrupamento_cob
      LOOP
         --
         EXIT WHEN c_agrupamento_cob%NOTFOUND;
         --
         -- RETORNA TODOS OS COD_COB DO AGRUPAMENTO E OS TRANSFORMA EM UMA LISTA
         l_tab_cod_cob_agrupadas := fp_bus_cob_agrup(p_cod_cia    ,
                                                             p_cod_ramo   ,
                                                             cob.cod_campo);
         --
         l_cod_cobs := fp_trata_lista_agrup(l_tab_cod_cob_agrupadas);
         --
         -- DEFINE CODIGO DA COBERTURA AGRUPADA
         l_detalhe_cobertura.cod_cob := cob.cod_cob_agrupadas;
         -- GERA NOME DO AGRUPAMENTO
         l_detalhe_cobertura.nom_cob := fp_trata_nom_cob_agrup(p_cod_cia    ,
                                                                   p_cod_ramo   ,
                                                                   l_tab_cod_cob_agrupadas);
         --
         l_detalhe_cobertura.nom_cob := fp_valores_lista(p_cod_cia
                                                        ,'NOM_COB_AGRUPADA'
                                                        ,l_detalhe_cobertura.nom_cob
                                                        ,l_detalhe_cobertura.cod_cob);
         -- INICIALIZA AGRUPAMENTO COMO NAO SELECIONADO
         l_detalhe_cobertura.mca_selec_cob    := trn.NO;
         -- DEFINE AGRUPAMENTO COMO COBERTURAS QUE NAO ALTERAM IS
         l_detalhe_cobertura.mca_modif_cap    := trn.NO;
       --
         -- CRIA LISTA DE LIMITES DE VALORES
         l_detalhe_cobertura.tab_val_lim_inde := rec_tab_val_lim_inde();
         -- DEFINE COD_CAMPO DA COBERTURA AGRUPADA
         l_valor_lim_indeni.cod_campo         := 'SUMA_ASEG_' || TO_CHAR(cob.cod_cob_agrupadas);
         -- INICIALIZA CAMPO DE VALOR DA COBERTURA ACGRUPADA
         -- Ini. v 1.41
         IF l_detalhe_cobertura.cod_cob = 92
         THEN
           --
           l_valor_lim_indeni.val_campo := trn.CERO;
           --
         ELSE
           --
           l_valor_lim_indeni.val_campo := p_val_sub_modelo;
           --
         END IF;
         -- Fim v 1.41
         -- INICIALIZA DEFINICAO DE VALOR DE LIMITE PADRAO
         l_valor_lim_indeni.mca_val_defec     := trn.SI;
         -- GRAVA VALOR LIMITE NO TABLETYPE
         l_detalhe_cobertura.tab_val_lim_inde.EXTEND(1);
         l_detalhe_cobertura.tab_val_lim_inde(l_detalhe_cobertura.tab_val_lim_inde.LAST) := l_valor_lim_indeni;
         --
         -- CRIA LISTA DE ATRIBUTOS (COBERTURAS)
         --
         IF g_k_cod_campo_cob_agrupada = p_cod_campo_cob_agrupada
         THEN
            --
            l_detalhe_cobertura.tab_atri_lista := rec_tab_atri_lista();
            l_detalhe_cobertura.tab_atri_lista.EXTEND(1);
            l_detalhe_cobertura.tab_atri_lista(l_detalhe_cobertura.tab_atri_lista.LAST) := rec_tab_atri_cob();
            --
            -- VERIFICA AS COBERTURAS AGRUPADAS
            FOR cobAgrup IN (WITH
                                cod_cob_parser AS (SELECT regexp_substr(l_cod_cobs,
                                                     '[^,]+',
                                                     trn.UNO,
                                                     LEVEL) AS cod_cob
                                 FROM dual
                                 CONNECT BY LEVEL <= LENGTH(l_cod_cobs) - LENGTH(REPLACE(l_cod_cobs,
                                                                                         g_k_separador_vir,
                                                                                         trn.NULO)) + trn.UNO),

                                c_nom_cob      AS (SELECT
                                                      COD_VALOR   AS COD_COB,
                                                      VAL_COLUMNA AS NOM_COB,
                                                      NUM_SECU    AS NUM_SECU
                                                   FROM
                                                      G2009017_VCR -- I 4.94 Alteracao das descricoes das coberturas
                                                   WHERE
                                                          COD_CIA     = p_cod_cia
                                                      AND COD_RAMO    = p_cod_ramo
                                                      AND NOM_COLUMNA = 'NOM_COB')
                                SELECT
                                   a.cod_cob AS COD_COB,
                                   a.nom_cob AS NOM_COB,
                                   '0'       AS VAL_COB
                            FROM
                               cod_cob_parser cp
                               INNER JOIN c_nom_cob a ON cp.cod_cob = a.cod_cob
                            ORDER BY
                               a.NUM_SECU)
            LOOP
             --
             -- MONTA DADOS DE CADA COBERTURA AGRUPADA
             -- I 2.77
             IF NVL(trn_k_global.ref_f_global('mca_concessionaria'), trn.NO) = trn.NO          AND
                NVL(trn_k_global.ref_f_global('mca_preferencia')   , trn.NO) = trn.SI          AND
                cobAgrup.cod_cob                                             = l_k_cod_cob_106
             THEN
               --
               CONTINUE;
             --
             END IF;
             --F 2.77
             l_atributo_cobertura.cod_campo := 'COD_COB';
             --
             l_atributo_cobertura.val_campo := cobAgrup.cod_cob;
             --
             l_atributo_cobertura.txt_campo := cobAgrup.nom_cob;
             --
             l_atributo_cobertura.txt_campo := fp_valores_lista(p_cod_cia
                                                               ,'NOM_COB'
                                                               ,l_atributo_cobertura.txt_campo
                                                               ,l_atributo_cobertura.val_campo);
             --
             -- VERIFICA SE O ITEM DA LISTA CONSTA COMO SELECIONADO PARA ESTA COTACAO
             l_atributo_cobertura.mca_selec := fp_bus_mca_selec_agrup(p_cod_cia,
                                                                      p_cod_ramo,
                                                                      p_num_cotizacion,
                                                                      p_num_simulacion,
                                                                      cobAgrup.cod_cob);
             --
             l_detalhe_cobertura.tab_atri_lista(l_detalhe_cobertura.tab_atri_lista.LAST).EXTEND(1);
             l_detalhe_cobertura.tab_atri_lista(l_detalhe_cobertura.tab_atri_lista.LAST)(l_detalhe_cobertura.tab_atri_lista(l_detalhe_cobertura.tab_atri_lista.LAST).LAST) := l_atributo_cobertura;
             --
             -- VERIFICA SE EXISTE ALGUMA COBERTURA DO AGRUPAMENTO SELECIONADA
             IF l_atributo_cobertura.mca_selec = TRN.SI THEN
                -- CASO EXISTA, MARCA O AGRUPAMENTO COMO SELECIONADO
                l_detalhe_cobertura.mca_selec_cob := trn.SI;
                --
             END IF;
             --
            END LOOP;
            --
        ELSE
            --
            WITH cod_cob_parser AS
            (SELECT regexp_substr(l_cod_cobs, '[^,]+', trn.uno, LEVEL) AS cod_cob
               FROM dual
             CONNECT BY LEVEL <=
                        length(l_cod_cobs) -
                        length(REPLACE(l_cod_cobs, g_k_separador_vir, trn.nulo)) +
                        trn.uno)
           SELECT COUNT(r.cod_cob)
             INTO l_count
             FROM g2109040_vcr r
            WHERE r.cod_cia           = p_cod_cia
              AND r.val_clave_formula = p_val_clave_formula
              AND r.mca_baja          = trn.NO
              AND r.mca_contrata      = trn.NO
              AND r.cod_modalidad = p_cod_modalidad  -- 2.61
              AND r.fec_validez       =  (SELECT MAX(ii.fec_validez)
                                            FROM g2109040_vcr ii
                                           WHERE ii.cod_cia           = r.cod_cia
                                             AND ii.val_clave_formula = r.val_clave_formula
                                             AND ii.cod_cob           = r.cod_cob
                                             AND ii.cod_modalidad =  r.cod_modalidad  -- 2.61
                                             AND ii.fec_validez      <= to_date(NVL(p_fec_validez_tarifa,to_char(trunc(sysdate),'ddmmrrrr')), 'ddmmyyyy'))
              AND r.cod_cob IN (SELECT cod_cob FROM cod_cob_parser)
              AND r.cod_cob IN (SELECT j.cod_cob
                                  FROM g2109041_vcr j
                                 WHERE j.cod_cia           = r.cod_cia
                                   AND j.val_clave_formula = r.val_clave_formula
                                   AND j.cod_cob           = r.cod_cob
                                   AND j.fec_validez       = r.fec_validez
                                   AND j.mca_baja          = trn.no
                                   AND j.cod_modalidad     = r.cod_modalidad  -- 2.61
                                   AND j.mca_contrata_cob  = trn.no);
            --
            IF l_count = trn.CERO THEN
             --
             -- BUSCA O MAIOR NUMERO DO ULTIMO ENDOSSO, EM CASO DE COTACAO DE ENDOSSO
             BEGIN
                --
                IF g_tip_mvto_batch = g_k_tip_mvto_batch_endosso THEN
                    --
                    l_num_max_spto := em_f_max_spto(p_cod_cia => p_cod_cia,
                                                    p_num_poliza => p_num_cotizacion,
                                                    p_num_spto => trn.nulo);
                    --
                END IF;
                --
             EXCEPTION
               WHEN OTHERS THEN
               --
               l_num_max_spto := trn.cero;
               --
             END;
             --
             -- VERIFICA SE AGRUPAMENTO ESTA SELECIONADO
             --
             l_detalhe_cobertura.mca_selec_cob := fp_bus_mca_selec_casco_agrup(p_cod_cia,
                                                                          p_cod_ramo,
                                                                          p_num_cotizacion,
                                                                          p_num_simulacion,
                                                                          l_num_max_spto,
                                                                          l_tab_cod_cob_agrupadas);
             --
            END IF;
            --
            l_detalhe_cobertura.tab_atri_lista := rec_tab_atri_lista();
            --
            -- VERIFICA NA g2000020 TODOS OS DADOS VARIAVEIS DA COBERTURA QUE POSSUEM LISTA E NAO SAO RELACIONADOS A FRANQUA (VAL_FRANQ)
            FOR dv IN (
                    WITH cod_cob_parser AS (SELECT regexp_substr(l_cod_cobs, '[^,]+', trn.UNO, LEVEL) AS cod_cob
                                                          FROM dual
                                                        CONNECT BY LEVEL <=
                                                                   length(l_cod_cobs) -
                                                                   length(REPLACE(l_cod_cobs, g_k_separador_vir, trn.NULO)) +
                                                                   trn.UNO)
                              SELECT g.cod_campo,
                                     g.cod_cob,
                                     g.nom_pgm_help,
                                     g.nom_tabla_valida,
                                     g.cod_version
                                  FROM g2000020 g,
                                       cod_cob_parser p
                                 WHERE g.cod_cia      = p_cod_cia
                                   AND g.cod_ramo     = p_cod_ramo
                                   AND (   g.nom_pgm_help = g_k_nom_pgm_help_fixo
                                        OR g.nom_pgm_help = g_k_nom_pgm_help_dinamico)
                                   AND g.cod_cob      = p.cod_cob
                                   AND g.cod_campo    NOT LIKE (g_k_ini_val_franq_dv || '%')
                                ORDER BY g.num_secu)
            LOOP
                 --
                 l_detalhe_cobertura.tab_atri_lista.EXTEND(1);
                 l_detalhe_cobertura.tab_atri_lista(l_detalhe_cobertura.tab_atri_lista.LAST) := rec_tab_atri_cob();
                 --
                 IF dv.nom_pgm_help = g_k_nom_pgm_help_fixo THEN
                    --RETORNA LISTA VARIAVEL RELACIONADA AOS DADOS VARIAVEIS DAS COBERTURAS
                    OPEN  c_dados_variaveis_cob
                     FOR  SELECT l.cod_campo as cod_campo,
                           l.cod_valor as val_campo,
                           l.nom_valor as txt_campo,
                           NULL        as mca_selec
                        FROM g2990006 l
                       WHERE l.cod_cia   = p_cod_cia
                         AND l.cod_ramo  = p_cod_ramo
                         AND l.cod_campo = dv.cod_campo
                       UNION
                        SELECT NOM_COLUMNA  AS cod_campo,
                           VAL_COLUMNA  AS val_campo,
                           ''           AS txt_campo,
                           NULL         AS mca_selec
                        FROM C2000000
                       WHERE cod_cia        = p_cod_cia
                         AND cod_ramo       = p_cod_ramo
                         AND nom_columna LIKE '%' || dv.cod_campo || '%'
                         AND num_cotizacion = p_num_cotizacion
                       UNION
                      SELECT COD_CAMPO  AS cod_campo,
                             VAL_CAMPO  AS val_campo,
                             ''         AS txt_campo,
                             NULL       AS mca_selec
                        FROM A2000560
                       WHERE cod_cia          = p_cod_cia
                         AND num_propuesta    = p_num_cotizacion
                         AND cod_campo     LIKE dv.cod_campo || '%' --v3.25
                         AND cod_campo NOT LIKE '%' || dv.cod_cob
                    ORDER BY cod_campo;
                    --
                 ELSE
                    --RETORNA LISTA FIXA RELACIONADA AOS DADOS VARIAVEIS DAS COBERTURAS
                    trn_k_global.asigna('COD_CIA'          , p_cod_cia                                                    );
                    trn_k_global.asigna('COD_RAMO'         , p_cod_ramo                                                   );
                    trn_k_global.asigna('COD_CAMPO'        , dv.cod_campo                                                 );
                    trn_k_global.asigna('DVCOD_CAMPO'      , dv.cod_campo                                                 );
                    trn_k_global.asigna('NUM_RIESGO'       , trn.UNO                                                      );
                    trn_k_global.asigna('DVCOD_MODALIDAD'  , p_cod_modalidad                                              );
                    trn_k_global.asigna('NUM_POLIZA'       , p_num_cotizacion                                             );
                    trn_k_global.asigna('NUM_COTIZACION'   , p_num_cotizacion                                             );
                    trn_k_global.asigna('COD_MON'          , trn_k_global.cod_mon                                         );
                    -- i 2.63
                    IF dv.cod_cob = 202 AND
                       NVL(trn_k_global.ref_f_global('MCA_GERA_FRANQUIA_DETALHE'),'0') = '1' THEN
                       --
                       trn_k_global.asigna('COD_COB', '201');
                       --
                    ELSE
                       --
                    trn_k_global.asigna('COD_COB'          , dv.cod_cob                                                   );
                    --
                    END IF;
                    -- f 2.63

                    trn_k_global.asigna('COD_NIVEL1'       , DC.cod_nivel1_gen                                            );
                    trn_k_global.asigna('COD_NIVEL2'       , DC.cod_nivel2_gen                                            );
                    trn_k_global.asigna('COD_NIVEL3'       , DC.cod_nivel3_gen                                            );
                    trn_k_global.asigna('COD_CANAL1'       , dc.COD_CANAL1_GEN                                            );
                    trn_k_global.asigna('COD_CANAL2'       , dc.COD_CANAL2_GEN                                            );
                    trn_k_global.asigna('COD_CANAL3'       , dc.COD_CANAL3_GEN                                            );
                    trn_k_global.asigna('COD_AGT'          , g_k_cod_agt_generico                                         );
                    trn_k_global.asigna('FEC_EFEC_SPTO'    , to_char(trunc(sysdate),'ddmmrrrr')                           );
                    trn_k_global.asigna('FEC_VALIDEZ'      , to_char(trunc(sysdate),'ddmmrrrr')                           );
                    trn_k_global.asigna('DVTIP_SEGMENTO'   , trn_k_df_cmn_nwt_xx_cnn.f_vrb_nam_val('DVTIP_SEGMENTO_DEFEC'));
                    --
                    IF dv.nom_tabla_valida = 'X2990006_VCR' THEN em_p_lista_dinamica_dv; END IF;
                    --
                    trn_k_lv.p_query(dv.nom_tabla_valida, dv.cod_version);
                    --
                    l_fila_dados := TYPTAB_DADOS_COT();
                    l_fila_reg   := TYPREG_DADOS_COT.autocreate;
                    --
                    LOOP
                     --
                     l_devuelve_fila := trn_k_lv.f_devuelve_fila(NULL);
                     --
                     EXIT WHEN l_devuelve_fila IS NULL;
                     --
                     mx('l_devuelve_fila', l_devuelve_fila);
                     --
                     l_fila_reg.cod_campo := substr(l_devuelve_fila, 0, INSTR(l_devuelve_fila, '~') - 1) ;
                     l_fila_reg.val_campo := substr(l_devuelve_fila, INSTR(l_devuelve_fila, '~') + 1, INSTR(l_devuelve_fila, '[') - (LENGTH(l_fila_reg.cod_campo) + 2));
                     --
                     l_fila_dados.EXTEND(1);
                     l_fila_dados(l_fila_dados.LAST) := l_fila_reg;
                     --
                    END LOOP;
                    --
                    OPEN  c_dados_variaveis_cob
                     FOR SELECT dv.cod_campo        AS cod_campo,
                          x0000000.cod_campo  AS val_campo,
                          x0000000.val_campo  AS txt_campo,
                          NULL             AS mca_selec
                       FROM TABLE(CAST(l_fila_dados AS TYPTAB_DADOS_COT)) x0000000
                        WHERE x0000000.val_campo IS NOT NULL;
                    --
                 END IF;
                 --
                 LOOP FETCH c_dados_variaveis_cob INTO ldv;
                    ---
                    EXIT WHEN c_dados_variaveis_cob%NOTFOUND;
                    --
                    l_atributo_cobertura.cod_campo := ldv.cod_campo;
                    --
                    l_atributo_cobertura.val_campo := ldv.val_campo;
                    --
                    l_atributo_cobertura.txt_campo := ldv.txt_campo;
                    --
                    -- VERIFICA SE O ITEM DA LISTA CONSTA COMO SELECIONADO PARA ESTA COTACAO
                    l_atributo_cobertura.mca_selec := fp_bus_mca_selec_atrib_agrup( p_cod_cia,
                                                                                    p_cod_ramo,
                                                                                    p_num_cotizacion,
                                                                                    ldv.cod_campo,
                                                                                    ldv.val_campo,
                                                                                    dv.cod_cob,
                                                                                    NULL);
                    --
                    l_detalhe_cobertura.tab_atri_lista(l_detalhe_cobertura.tab_atri_lista.LAST).EXTEND(1);
                    l_detalhe_cobertura.tab_atri_lista(l_detalhe_cobertura.tab_atri_lista.LAST)(l_detalhe_cobertura.tab_atri_lista(l_detalhe_cobertura.tab_atri_lista.LAST).LAST) := l_atributo_cobertura;
                    --
                  END LOOP;
                 --
            END LOOP;
            --
        END IF;
        --
        -- CRIA LISTA DE VALORES DE FRANQUIA
        l_detalhe_cobertura.tab_val_franq := rec_tab_val_franq();
        --
        l_detalhe_cobertura.val_premio    := trn.NULO           ;
        --
        -- SE AGRUPAMENTO FOI CALCULADO, RETORNA FRANQUIA
        IF l_detalhe_cobertura.mca_selec_cob = trn.SI THEN
             --
             -- BUSCA O MAIOR NUMERO DO ULTIMO ENDOSSO, EM CASO DE COTACAO DE ENDOSSO
             BEGIN
               --
               IF g_tip_mvto_batch = g_k_tip_mvto_batch_endosso THEN
                   --
                   l_num_max_spto := em_f_max_spto(p_cod_cia => p_cod_cia,
                                                   p_num_poliza => p_num_cotizacion,
                                                   p_num_spto => trn.nulo);
                   --
               END IF;
               --
             EXCEPTION
               WHEN OTHERS THEN
                 --
                 l_num_max_spto := trn.cero;
                 --
             END;
             --
             l_valor_franquia.cod_campo := g_k_ini_val_franq_dv || '_' || cob.cod_cob_agrupadas;
             --
             l_valor_franquia.txt_campo := trn.NULO;
             --
             l_valor_franquia.val_campo := fp_bus_val_franq_cob_agrup(p_cod_cia,
                                                                     p_cod_ramo,
                                                                     p_num_cotizacion,
                                                                     p_num_simulacion,
                                                                     l_num_max_spto,
                                                                     l_cod_cobs);
             --
             l_detalhe_cobertura.tab_val_franq.EXTEND(1);
             l_detalhe_cobertura.tab_val_franq(l_detalhe_cobertura.tab_val_franq.LAST) := l_valor_franquia;
             --
             l_detalhe_cobertura.val_premio := fp_bus_val_premio_cob_agrup(p_cod_cia,
                                                                          p_cod_ramo,
                                                                          p_num_cotizacion,
                                                                          p_num_simulacion,
                                                                          l_num_max_spto,
                                                                          l_cod_cobs);
             --
        END IF;
        --
        l_retorno_cob_agrupadas.EXTEND(1);
        l_retorno_cob_agrupadas(l_retorno_cob_agrupadas.LAST) := l_detalhe_cobertura;
        --
      END LOOP;
      --
      ELSE -- I 2.14
      --
      pi_busca_modalidade_especifica; --v3.96
      --
      FOR cob IN c_agrupamento_cob3p
      LOOP
         --
         EXIT WHEN c_agrupamento_cob3p%NOTFOUND;
         --
         -- RETORNA TODOS OS COD_COB DO AGRUPAMENTO E OS TRANSFORMA EM UMA LISTA
         l_tab_cod_cob_agrupadas := fp_bus_cob_agrup(p_cod_cia    ,
                                                             p_cod_ramo   ,
                                                             cob.cod_campo);
         --
         l_cod_cobs := fp_trata_lista_agrup(l_tab_cod_cob_agrupadas);
         --
         -- DEFINE CODIGO DA COBERTURA AGRUPADA
         l_detalhe_cobertura.cod_cob := cob.cod_cob_agrupadas;
         --
         -- {v4.75
         -- Filtro agrupamento incendio e Roubo e Furto por corretor
         IF cob.cod_campo               = 'COD_COB_CASCO'              ||
                                          g_k_pref_simulacion          ||
                                          l_detalhe_cobertura.cod_cob      AND
            l_detalhe_cobertura.cod_cob = 3                                AND
            NOT fp_cod_agt_cob_casco
         THEN
           --
           CONTINUE;
           --
         END IF;
         -- v4.75}
         --
         -- GERA NOME DO AGRUPAMENTO
         l_detalhe_cobertura.nom_cob := fp_trata_nom_cob_agrup(p_cod_cia    ,
                                                                   p_cod_ramo   ,
                                                                   l_tab_cod_cob_agrupadas);
         --
         l_detalhe_cobertura.nom_cob := fp_valores_lista(p_cod_cia
                                                        ,'NOM_COB_AGRUPADA'
                                                        ,l_detalhe_cobertura.nom_cob
                                                        ,l_detalhe_cobertura.cod_cob);
         -- INICIALIZA AGRUPAMENTO COMO NAO SELECIONADO
         l_detalhe_cobertura.mca_selec_cob    := trn.NO;
         -- DEFINE AGRUPAMENTO COMO COBERTURAS QUE NAO ALTERAM IS
         l_detalhe_cobertura.mca_modif_cap    := trn.NO;
       --
         -- CRIA LISTA DE LIMITES DE VALORES
         l_detalhe_cobertura.tab_val_lim_inde := rec_tab_val_lim_inde();
         -- DEFINE COD_CAMPO DA COBERTURA AGRUPADA
         l_valor_lim_indeni.cod_campo         := 'SUMA_ASEG_' || TO_CHAR(cob.cod_cob_agrupadas);
         -- INICIALIZA CAMPO DE VALOR DA COBERTURA ACGRUPADA
         -- Ini. v 1.41
         IF l_detalhe_cobertura.cod_cob = 92
         THEN
           --
           l_valor_lim_indeni.val_campo := trn.CERO;
           --
         ELSE
           --
           l_valor_lim_indeni.val_campo := p_val_sub_modelo;
           --
         END IF;
         -- Fim v 1.41
         -- INICIALIZA DEFINICAO DE VALOR DE LIMITE PADRAO
         l_valor_lim_indeni.mca_val_defec     := trn.SI;
         -- GRAVA VALOR LIMITE NO TABLETYPE
         l_detalhe_cobertura.tab_val_lim_inde.EXTEND(1);
         l_detalhe_cobertura.tab_val_lim_inde(l_detalhe_cobertura.tab_val_lim_inde.LAST) := l_valor_lim_indeni;
         --
         -- CRIA LISTA DE ATRIBUTOS (COBERTURAS)
         --
         IF g_k_cod_campo_cob_agrupada = p_cod_campo_cob_agrupada
         THEN
            --
            l_detalhe_cobertura.tab_atri_lista := rec_tab_atri_lista();
            l_detalhe_cobertura.tab_atri_lista.EXTEND(1);
            l_detalhe_cobertura.tab_atri_lista(l_detalhe_cobertura.tab_atri_lista.LAST) := rec_tab_atri_cob();
            --
            -- VERIFICA AS COBERTURAS AGRUPADAS
            FOR cobAgrup IN (WITH
                                cod_cob_parser AS (SELECT regexp_substr(l_cod_cobs,
                                                     '[^,]+',
                                                     trn.UNO,
                                                     LEVEL) AS cod_cob
                                 FROM dual
                                 CONNECT BY LEVEL <= LENGTH(l_cod_cobs) - LENGTH(REPLACE(l_cod_cobs,
                                                                                         g_k_separador_vir,
                                                                                         trn.NULO)) + trn.UNO),

                                c_nom_cob      AS (SELECT
                                                      COD_VALOR   AS COD_COB,
                                                      VAL_COLUMNA AS NOM_COB,
                                                      NUM_SECU    AS NUM_SECU
                                                   FROM
                                                      G2009017_VCR -- I 4.94 Alteracao das descricoes das coberturas
                                                   WHERE
                                                          COD_CIA     = p_cod_cia
                                                      AND COD_RAMO    = p_cod_ramo
                                                      AND NOM_COLUMNA = 'NOM_COB')
                                SELECT
                                   a.cod_cob AS COD_COB,
                                   a.nom_cob AS NOM_COB,
                                   '0'       AS VAL_COB
                            FROM
                               cod_cob_parser cp
                               INNER JOIN c_nom_cob a ON cp.cod_cob = a.cod_cob
                            ORDER BY
                               a.NUM_SECU)
            LOOP
             --
             -- MONTA DADOS DE CADA COBERTURA AGRUPADA
             --
             l_atributo_cobertura.cod_campo := 'COD_COB';
             --
             l_atributo_cobertura.val_campo := cobAgrup.cod_cob;
             --
             l_atributo_cobertura.txt_campo := cobAgrup.nom_cob;
             --
             l_atributo_cobertura.txt_campo := fp_valores_lista(p_cod_cia
                                                               ,'NOM_COB'
                                                               ,l_atributo_cobertura.txt_campo
                                                               ,l_atributo_cobertura.val_campo);
             --
             -- VERIFICA SE O ITEM DA LISTA CONSTA COMO SELECIONADO PARA ESTA COTACAO
             l_atributo_cobertura.mca_selec := fp_bus_mca_selec_agrup(p_cod_cia,
                                                                      p_cod_ramo,
                                                                      p_num_cotizacion,
                                                                      p_num_simulacion,
                                                                      cobAgrup.cod_cob);
             --
             l_detalhe_cobertura.tab_atri_lista(l_detalhe_cobertura.tab_atri_lista.LAST).EXTEND(1);
             l_detalhe_cobertura.tab_atri_lista(l_detalhe_cobertura.tab_atri_lista.LAST)(l_detalhe_cobertura.tab_atri_lista(l_detalhe_cobertura.tab_atri_lista.LAST).LAST) := l_atributo_cobertura;
             --
             -- VERIFICA SE EXISTE ALGUMA COBERTURA DO AGRUPAMENTO SELECIONADA
             IF l_atributo_cobertura.mca_selec = TRN.SI THEN
                -- CASO EXISTA, MARCA O AGRUPAMENTO COMO SELECIONADO
                l_detalhe_cobertura.mca_selec_cob := trn.SI;
                --
             END IF;
             --
            END LOOP;
            --
        ELSE
            --
            WITH cod_cob_parser AS
            (SELECT regexp_substr(l_cod_cobs, '[^,]+', trn.uno, LEVEL) AS cod_cob
               FROM dual
             CONNECT BY LEVEL <=
                        length(l_cod_cobs) -
                        length(REPLACE(l_cod_cobs, g_k_separador_vir, trn.nulo)) +
                        trn.uno)
           SELECT COUNT(r.cod_cob)
             INTO l_count
             FROM g2109040_vcr r
            WHERE r.cod_cia           = p_cod_cia
              AND r.val_clave_formula = p_val_clave_formula
              AND r.mca_baja          = trn.NO
              AND r.mca_contrata      = trn.NO
              AND r.cod_modalidad = p_cod_modalidad  -- 2.61
              AND r.fec_validez       =  (SELECT MAX(ii.fec_validez)
                                            FROM g2109040_vcr ii
                                           WHERE ii.cod_cia           = r.cod_cia
                                             AND ii.val_clave_formula = r.val_clave_formula
                                             AND ii.cod_cob           = r.cod_cob
                                             AND ii.cod_modalidad =  r.cod_modalidad  -- 2.61
                                             AND ii.fec_validez      <= to_date(NVL(p_fec_validez_tarifa,to_char(trunc(sysdate),'ddmmrrrr')), 'ddmmyyyy'))
              AND r.cod_cob IN (SELECT cod_cob FROM cod_cob_parser)
              AND r.cod_cob IN (SELECT j.cod_cob
                                  FROM g2109041_vcr j
                                 WHERE j.cod_cia           = r.cod_cia
                                   AND j.val_clave_formula = r.val_clave_formula
                                   AND j.cod_cob           = r.cod_cob
                                   AND j.fec_validez       = r.fec_validez
                                   AND j.mca_baja          = trn.no
                                   AND j.cod_modalidad =  r.cod_modalidad  -- 2.61
                                   AND j.mca_contrata_cob  = trn.no);
            --
            IF l_count = trn.CERO THEN
             --
             -- BUSCA O MAIOR NUMERO DO ULTIMO ENDOSSO, EM CASO DE COTACAO DE ENDOSSO
             BEGIN
                --
                IF g_tip_mvto_batch = g_k_tip_mvto_batch_endosso THEN
                    --
                    l_num_max_spto := em_f_max_spto(p_cod_cia => p_cod_cia,
                                                    p_num_poliza => p_num_cotizacion,
                                                    p_num_spto => trn.nulo);
                    --
                END IF;
                --
             EXCEPTION
               WHEN OTHERS THEN
               --
               l_num_max_spto := trn.cero;
               --
             END;
             --
             -- VERIFICA SE AGRUPAMENTO ESTA SELECIONADO
             --
             l_detalhe_cobertura.mca_selec_cob := fp_bus_mca_selec_casco_agrup(p_cod_cia,
                                                                          p_cod_ramo,
                                                                          p_num_cotizacion,
                                                                          p_num_simulacion,
                                                                          l_num_max_spto,
                                                                          l_tab_cod_cob_agrupadas);
             --
            END IF;
            --
            l_detalhe_cobertura.tab_atri_lista := rec_tab_atri_lista();
            --
            -- VERIFICA NA g2000020 TODOS OS DADOS VARIAVEIS DA COBERTURA QUE POSSUEM LISTA E NAO SAO RELACIONADOS A FRANQUA (VAL_FRANQ)
            FOR dv IN (
                    WITH cod_cob_parser AS (SELECT regexp_substr(l_cod_cobs, '[^,]+', trn.UNO, LEVEL) AS cod_cob
                                                          FROM dual
                                                        CONNECT BY LEVEL <=
                                                                   length(l_cod_cobs) -
                                                                   length(REPLACE(l_cod_cobs, g_k_separador_vir, trn.NULO)) +
                                                                   trn.UNO)
                              SELECT g.cod_campo,
                                     g.cod_cob,
                                     g.nom_pgm_help,
                                     g.nom_tabla_valida,
                                     g.cod_version
                                  FROM g2000020 g,
                                       cod_cob_parser p
                                 WHERE g.cod_cia      = p_cod_cia
                                   AND g.cod_ramo     = p_cod_ramo
                                   AND (   g.nom_pgm_help = g_k_nom_pgm_help_fixo
                                        OR g.nom_pgm_help = g_k_nom_pgm_help_dinamico)
                                   AND g.cod_cob  = CASE WHEN  p.cod_cob = 202 AND
                                                      NVL(trn_k_global.ref_f_global('MCA_GERA_FRANQUIA_DETALHE'),'0') = '1'
                                                      THEN
                                                        '201'
                                                      ELSE
                                                        p.cod_cob
                                                      END --  2.63  = p.cod_cob
                                   AND g.cod_campo    NOT LIKE (g_k_ini_val_franq_dv || '%')
                                ORDER BY g.num_secu)
            LOOP
                 --
                 l_detalhe_cobertura.tab_atri_lista.EXTEND(1);
                 l_detalhe_cobertura.tab_atri_lista(l_detalhe_cobertura.tab_atri_lista.LAST) := rec_tab_atri_cob();
                 --
                 IF dv.nom_pgm_help = g_k_nom_pgm_help_fixo THEN
                    --RETORNA LISTA VARIAVEL RELACIONADA AOS DADOS VARIAVEIS DAS COBERTURAS
                    OPEN  c_dados_variaveis_cob
                     FOR  SELECT l.cod_campo as cod_campo,
                           l.cod_valor as val_campo,
                           l.nom_valor as txt_campo,
                           NULL        as mca_selec
                        FROM g2990006 l
                       WHERE l.cod_cia   = p_cod_cia
                         AND l.cod_ramo  = p_cod_ramo
                         AND l.cod_campo = dv.cod_campo
                       UNION
                        SELECT NOM_COLUMNA  AS cod_campo,
                           VAL_COLUMNA  AS val_campo,
                           ''           AS txt_campo,
                           NULL         AS mca_selec
                        FROM C2000000
                       WHERE cod_cia        = p_cod_cia
                         AND cod_ramo       = p_cod_ramo
                         AND nom_columna LIKE '%' || dv.cod_campo || '%'
                         AND num_cotizacion = p_num_cotizacion
                       UNION
                      SELECT COD_CAMPO  AS cod_campo,
                             VAL_CAMPO  AS val_campo,
                             ''         AS txt_campo,
                             NULL       AS mca_selec
                        FROM A2000560
                       WHERE cod_cia          = p_cod_cia
                         AND num_propuesta    = p_num_cotizacion
                         AND cod_campo     LIKE dv.cod_campo || '%' --v3.25
                         AND cod_campo NOT LIKE '%' || dv.cod_cob
                    ORDER BY cod_campo;
                    --
                 ELSE
                    --RETORNA LISTA FIXA RELACIONADA AOS DADOS VARIAVEIS DAS COBERTURAS
                    trn_k_global.asigna('COD_CIA'          , p_cod_cia                                                    );
                    trn_k_global.asigna('COD_RAMO'         , p_cod_ramo                                                   );
                    trn_k_global.asigna('COD_CAMPO'        , dv.cod_campo                                                 );
                    trn_k_global.asigna('DVCOD_CAMPO'      , dv.cod_campo                                                 );
                    trn_k_global.asigna('NUM_RIESGO'       , trn.UNO                                                      );
                    trn_k_global.asigna('DVCOD_MODALIDAD'  , p_cod_modalidad                                              );
                    trn_k_global.asigna('NUM_POLIZA'       , p_num_cotizacion                                             );
                    trn_k_global.asigna('NUM_COTIZACION'   , p_num_cotizacion                                             );
                    trn_k_global.asigna('COD_MON'          , trn_k_global.cod_mon                                         );
                    --trn_k_global.asigna('COD_COB'          , dv.cod_cob                                                   ); --2.63
                    --   trn_k_global.asigna('COD_COB', dv.cod_cob); --2.63
                    -- i 2.63
                    IF dv.cod_cob = 202 AND
                       NVL(trn_k_global.ref_f_global('MCA_GERA_FRANQUIA_DETALHE'),'0') = '1' THEN
                       --
                       trn_k_global.asigna('COD_COB', '201');
                       --
                    ELSE
                       --
                       trn_k_global.asigna('COD_COB'          , dv.cod_cob                                                   );
                       --
                    END IF;
                    -- f 2.63
                    trn_k_global.asigna('COD_NIVEL1'       , DC.cod_nivel1_gen                                            );
                    trn_k_global.asigna('COD_NIVEL2'       , DC.cod_nivel2_gen                                            );
                    trn_k_global.asigna('COD_NIVEL3'       , DC.cod_nivel3_gen                                            );
                    trn_k_global.asigna('COD_CANAL1'       , dc.COD_CANAL1_GEN                                            );
                    trn_k_global.asigna('COD_CANAL2'       , dc.COD_CANAL2_GEN                                            );
                    trn_k_global.asigna('COD_CANAL3'       , dc.COD_CANAL3_GEN                                            );
                    trn_k_global.asigna('COD_AGT'          , g_k_cod_agt_generico                                         );
                    trn_k_global.asigna('FEC_EFEC_SPTO'    , to_char(trunc(sysdate),'ddmmrrrr')                           );
                    trn_k_global.asigna('FEC_VALIDEZ'      , to_char(trunc(sysdate),'ddmmrrrr')                           );
                    trn_k_global.asigna('DVTIP_SEGMENTO'   , trn_k_df_cmn_nwt_xx_cnn.f_vrb_nam_val('DVTIP_SEGMENTO_DEFEC'));
                    --
                    IF dv.nom_tabla_valida = 'X2990006_VCR' THEN em_p_lista_dinamica_dv; END IF;
                    --
                    trn_k_lv.p_query(dv.nom_tabla_valida, dv.cod_version);
                    --
                    l_fila_dados := TYPTAB_DADOS_COT();
                    l_fila_reg   := TYPREG_DADOS_COT.autocreate;
                    --
                    LOOP
                     --
                     l_devuelve_fila := trn_k_lv.f_devuelve_fila(NULL);
                     --
                     EXIT WHEN l_devuelve_fila IS NULL;
                     --
                     mx('l_devuelve_fila', l_devuelve_fila);
                     --
                     l_fila_reg.cod_campo := substr(l_devuelve_fila, 0, INSTR(l_devuelve_fila, '~') - 1) ;
                     l_fila_reg.val_campo := substr(l_devuelve_fila, INSTR(l_devuelve_fila, '~') + 1, INSTR(l_devuelve_fila, '[') - (LENGTH(l_fila_reg.cod_campo) + 2));
                     --
                     l_fila_dados.EXTEND(1);
                     l_fila_dados(l_fila_dados.LAST) := l_fila_reg;
                     --
                    END LOOP;
                    --
                    OPEN  c_dados_variaveis_cob
                     FOR SELECT dv.cod_campo        AS cod_campo,
                          x0000000.cod_campo  AS val_campo,
                          x0000000.val_campo  AS txt_campo,
                          NULL             AS mca_selec
                       FROM TABLE(CAST(l_fila_dados AS TYPTAB_DADOS_COT)) x0000000
                        WHERE x0000000.val_campo IS NOT NULL;
                    --
                 END IF;
                 --
                 LOOP FETCH c_dados_variaveis_cob INTO ldv;
                    ---
                    EXIT WHEN c_dados_variaveis_cob%NOTFOUND;
                    --
                    l_atributo_cobertura.cod_campo := ldv.cod_campo;
                    --
                    l_atributo_cobertura.val_campo := ldv.val_campo;
                    --
                    l_atributo_cobertura.txt_campo := ldv.txt_campo;
                    --
                    -- VERIFICA SE O ITEM DA LISTA CONSTA COMO SELECIONADO PARA ESTA COTACAO
                    l_atributo_cobertura.mca_selec := fp_bus_mca_selec_atrib_agrup( p_cod_cia,
                                                                                    p_cod_ramo,
                                                                                    p_num_cotizacion,
                                                                                    ldv.cod_campo,
                                                                                    ldv.val_campo,
                                                                                    dv.cod_cob,
                                                                                    NULL);
                    --
                    l_detalhe_cobertura.tab_atri_lista(l_detalhe_cobertura.tab_atri_lista.LAST).EXTEND(1);
                    l_detalhe_cobertura.tab_atri_lista(l_detalhe_cobertura.tab_atri_lista.LAST)(l_detalhe_cobertura.tab_atri_lista(l_detalhe_cobertura.tab_atri_lista.LAST).LAST) := l_atributo_cobertura;
                    --
                  END LOOP;
                 --
            END LOOP;
            --
        END IF;
        --
        -- CRIA LISTA DE VALORES DE FRANQUIA
        l_detalhe_cobertura.tab_val_franq := rec_tab_val_franq();
        --
        l_detalhe_cobertura.val_premio    := trn.NULO           ;
        --
        -- SE AGRUPAMENTO FOI CALCULADO, RETORNA FRANQUIA
        IF l_detalhe_cobertura.mca_selec_cob = trn.SI THEN
             --
             -- BUSCA O MAIOR NUMERO DO ULTIMO ENDOSSO, EM CASO DE COTACAO DE ENDOSSO
             BEGIN
               --
               IF g_tip_mvto_batch = g_k_tip_mvto_batch_endosso THEN
                   --
                   l_num_max_spto := em_f_max_spto(p_cod_cia => p_cod_cia,
                                                   p_num_poliza => p_num_cotizacion,
                                                   p_num_spto => trn.nulo);
                   --
               END IF;
               --
             EXCEPTION
               WHEN OTHERS THEN
                 --
                 l_num_max_spto := trn.cero;
                 --
             END;
             --
             l_valor_franquia.cod_campo := g_k_ini_val_franq_dv || '_' || cob.cod_cob_agrupadas;
             --
             l_valor_franquia.txt_campo := trn.NULO;
             --
             l_valor_franquia.val_campo := fp_bus_val_franq_cob_agrup(p_cod_cia,
                                                                     p_cod_ramo,
                                                                     p_num_cotizacion,
                                                                     p_num_simulacion,
                                                                     l_num_max_spto,
                                                                     l_cod_cobs);
             --
             l_detalhe_cobertura.tab_val_franq.EXTEND(1);
             l_detalhe_cobertura.tab_val_franq(l_detalhe_cobertura.tab_val_franq.LAST) := l_valor_franquia;
             --
             l_detalhe_cobertura.val_premio := fp_bus_val_premio_cob_agrup(p_cod_cia,
                                                                          p_cod_ramo,
                                                                          p_num_cotizacion,
                                                                          p_num_simulacion,
                                                                          l_num_max_spto,
                                                                          l_cod_cobs);
             --
        END IF;
        --
        l_retorno_cob_agrupadas.EXTEND(1);
        l_retorno_cob_agrupadas(l_retorno_cob_agrupadas.LAST) := l_detalhe_cobertura;
        --
      END LOOP;
      END IF; -- F 2.14
      --
      mx('F', 'fp_bus_coberturas_agrupadas');
      --
      RETURN l_retorno_cob_agrupadas;
      --
    END fp_bus_coberturas_agrupadas;
    --
    /* ------------------------------------------------------
    || Busca as coberturas
    */ ------------------------------------------------------
    --
    FUNCTION fp_bus_coberturas (p_cod_cia           c2009040_vcr.cod_cia           %TYPE,
                                p_cod_ramo          c2009040_vcr.cod_ramo          %TYPE,
                                p_num_cotizacion    c2009040_vcr.num_cotizacion    %TYPE,
                                p_num_simulacion    c2009040_vcr.num_simulacion    %TYPE,
                                p_cod_modalidad     a1002090.cod_modalidad         %TYPE,
                                p_cod_tarifa        g2109040_vcr.cod_tarifa        %TYPE,
                                p_val_clave_formula g2109040_vcr.val_clave_formula %TYPE,
                                p_tip_lista_cob     VARCHAR)
      RETURN rec_tab_det_cob
    IS
    --
    c_dados_variaveis_cob    ref_cursor               ;
    --
    ldv                      rec_atri_cob             ;
    l_detalhe_cobertura      rec_det_cob              ;
    l_valor_lim_indeni       rec_val_lim_inde         ;
    l_atributo_cobertura     rec_atri_cob             ;
    l_valor_franquia         rec_val_franq            ;
    l_retorno_cob            rec_tab_det_cob          ;
    l_reg_cobs_agr           rec_tab_cod_cob_agrupadas;
    --
    l_fila_dados             TYPTAB_DADOS_COT;
    l_fila_reg               TYPREG_DADOS_COT;
    --
    l_devuelve_fila          VARCHAR2(850)            ;
    l_mca_selec              VARCHAR2(1)   := trn.NO  ;
    --
    l_existe_atrib           BOOLEAN       := FALSE   ;
    l_mca_selec_atrib        VARCHAR2(1)   := trn.NULO;
    --
    l_cod_cobs               VARCHAR2(50)             ;
    l_indice                 number        := trn.CERO;
    --
    l_reg_c2009030_vcr       c2009030_vcr                 %ROWTYPE;
    --
    l_valor_lim              c2009040_vcr.suma_aseg       %TYPE;
    l_num_max_spto           a2000030.num_spto            %TYPE;
    l_mca_contrata_I         g2109040_vcr.mca_contrata    %TYPE;
    l_mca_contrata_cob_I     g2109041_vcr.mca_contrata_cob%TYPE;
    l_mca_contrata_II        g2109040_vcr.mca_contrata    %TYPE;
    l_mca_contrata_cob_II    g2109041_vcr.mca_contrata_cob%TYPE;
   --
    l_val_clave_formula_tmp  g2109040_vcr.val_clave_formula%TYPE; -- 2.14
    l_valida                 BOOLEAN ; -- 2.14
    l_eh_3_pacotes           BOOLEAN ; -- 2.14
   --
    l_mca_pre_contrata_pref g2109040_vcr.mca_contrata     %TYPE; -- 3.19
    l_mca_contrata_cob_pref g2109041_vcr.mca_contrata_cob %TYPE; -- 3.19
    l_mca_pre_contrata      g2109040_vcr.mca_contrata     %TYPE; -- 3.19
    l_mca_contrata_cob      g2109041_vcr.mca_contrata_cob %TYPE; -- 3.19
    l_val_sum_aseg_cob      g2109040_vcr.suma_aseg        %TYPE; -- 3.19
    l_val_sum_aseg_pref     g2109040_vcr.suma_aseg        %TYPE; -- 3.19
    --
    l_mca_renovacion        c2000000.val_columna          %TYPE; --v3.57
    l_num_poliza_renov      c2000000.val_columna          %TYPE; --v3.57
    --
   /* ----------------------------------------------------------
   ||  CALCULA SE A COBERTURA FOI SELECIONADA
   */ ----------------------------------------------------------
   --
    FUNCTION fp_bus_mca_selec_cob(p_cod_cia        c2000000.cod_cia           %TYPE,
                                  p_cod_ramo       c2000000.cod_ramo          %TYPE,
                                  p_num_cotizacion c2000000.num_cotizacion    %TYPE,
                                  p_num_simulacion c2009040_vcr.num_simulacion%TYPE,
                                  p_cod_cob        g2000020.cod_cob           %TYPE)
    RETURN VARCHAR2
    IS
    --
    l_mca_select VARCHAR2(1) := trn.NO;
    --
    BEGIN
      --
      mx('I', 'fp_bus_mca_selec_cob');
      --
      BEGIN
         --
         IF NVL(g_tip_mvto_batch,g_k_tip_mvto_batch_cotacao) = g_k_tip_mvto_batch_cotacao THEN
             --
             mx('g_tip_mvto_batch: ', g_tip_mvto_batch);
             --
             SELECT trn.SI       AS mca_selec
               INTO l_mca_select
               FROM c2009040_vcr   c
             WHERE  c.cod_cia        = p_cod_cia
                AND c.cod_ramo       = p_cod_ramo
                AND c.num_cotizacion = p_num_cotizacion
                AND c.num_simulacion = p_num_simulacion
                AND c.cod_cob        = p_cod_cob;
             --
         ELSIF g_tip_mvto_batch = g_k_tip_mvto_batch_endosso THEN
             --
             mx('g_tip_mvto_batch: ', g_tip_mvto_batch);
             --
             SELECT trn.SI
               INTO l_mca_select
               FROM a2000560 a
              WHERE a.cod_cia       =  p_cod_cia
                AND a.num_propuesta =  p_num_cotizacion
                AND a.cod_campo     =  'COMCA_SELECCION' || p_cod_cob
                AND a.val_campo     =  trn.SI;
           --
         END IF;
         --
         EXCEPTION
            WHEN NO_DATA_FOUND THEN
               --
               l_mca_select := trn.NO;
               --
         END;
         --
         mx('F', 'fp_bus_mca_selec_cob');
         --
         RETURN l_mca_select;
         --
    END fp_bus_mca_selec_cob;
    --
    --
    FUNCTION fp_bus_cob_casco(p_cod_cia                df_cmn_nwt_xx_vrb_cnc.cmp_val%TYPE,
                              p_cod_ramo               df_cmn_nwt_xx_vrb_cnc.lob_val%TYPE,
                              p_vrb_nam                df_cmn_nwt_xx_vrb_cnc.vrb_nam%TYPE)
    RETURN rec_tab_cod_cob_agrupadas
    IS
    --
    l_tab_cod_cob_casco rec_tab_cod_cob_agrupadas;
    --
    BEGIN
          --
          mx('I', 'fp_bus_cob_casco');
          --
          l_tab_cod_cob_casco := rec_tab_cod_cob_agrupadas();
          --
          -- BUSCA NA TABELA TODOS OS COD_COB PARAMETRIZADOS PARA O AGRUPAMENTO PASSADO
          FOR cob IN (SELECT DISTINCT a.cnc_vrb_val AS cod_cob
                                 FROM df_cmn_nwt_xx_vrb_cnc a
                                WHERE a.cmp_val         = p_cod_cia
                                  AND a.lob_val         = p_cod_ramo
                                  and a.vrb_nam         LIKE  (p_vrb_nam || '%')
                                  AND a.mdt_val         = EM.cod_modalidad_gen
                                  AND a.crn_val         = DC.cod_mon_gen
                                  AND a.cvr_val         = EM.cod_cob_gen
                                  AND a.frs_lvl_val     = DC.cod_nivel1_gen
                                  AND a.scn_lvl_val     = DC.cod_nivel2_gen
                                  AND a.thr_lvl_val     = DC.cod_nivel3_gen
                                  AND a.frs_dst_hnl_val = DC.cod_canal1_gen
                                  AND a.scn_dst_hnl_val = DC.cod_canal2_gen
                                  AND a.thr_dst_hnl_val = DC.cod_canal3_gen
                                  AND a.agn_val         = TRN.cod_tercero_gen
                                  AND a.gpp_val         = 'ZZZZZZZZZZZZZ'
                                  AND a.del_val         = EM.num_contrato_gen
                                  AND a.sbl_val         = EM.num_subcontrato_gen
                                  AND a.ply_val         = 'ZZZZZZZZZZZZZ'
                                  AND a.vld_dat          = (SELECT MAX(vld_dat)
                                                              FROM df_cmn_nwt_xx_vrb_cnc b
                                                             WHERE b.cmp_val         = a.cmp_val
                                                               AND b.lob_val         = a.lob_val
                                                               AND b.mdt_val         = a.mdt_val
                                                               AND b.crn_val         = a.crn_val
                                                               AND b.cvr_val         = a.cvr_val
                                                               AND b.frs_lvl_val     = a.frs_lvl_val
                                                               AND b.scn_lvl_val     = a.scn_lvl_val
                                                               AND b.thr_lvl_val     = a.thr_lvl_val
                                                               AND b.frs_dst_hnl_val = a.frs_dst_hnl_val
                                                               AND b.scn_dst_hnl_val = a.scn_dst_hnl_val
                                                               AND b.thr_dst_hnl_val = a.thr_dst_hnl_val
                                                               AND b.gpp_val         = a.gpp_val
                                                               AND b.del_val         = a.del_val
                                                               AND b.sbl_val         = a.sbl_val
                                                               AND b.ply_val         = a.ply_val
                                                               AND b.agn_val         = a.agn_val
                                                               AND b.vrb_nam         = a.vrb_nam
                                                               AND b.cnc_vrb_val     = a.cnc_vrb_val)
                      ORDER BY TO_NUMBER(cod_cob))
          LOOP
             --
             l_tab_cod_cob_casco.EXTEND(1);
             l_tab_cod_cob_casco(l_tab_cod_cob_casco.LAST) := cob.cod_cob;
             --
          END LOOP;
          --
          mx('F', 'fp_bus_cob_casco');
          --
          RETURN l_tab_cod_cob_casco;
          --
    END fp_bus_cob_casco;
    --
    --
    FUNCTION fp_trata_lista(p_tab_cod_cob_agrupadas rec_tab_cod_cob_agrupadas)
    RETURN VARCHAR2
    IS
    --
    l_cod_cobs VARCHAR2(50)  := '';
    --
    BEGIN
      --
      mx('I', 'fp_trata_lista');
      --
      -- CONCATENA TODOS OS COD_COB EM UMA UNICA VARIAVEL
      FOR i IN p_tab_cod_cob_agrupadas.FIRST..p_tab_cod_cob_agrupadas.LAST
      LOOP
         --
         l_cod_cobs := l_cod_cobs || p_tab_cod_cob_agrupadas(i) || g_k_separador_vir;
         --
      END LOOP;
      --
      -- REMOVE O ULTIMO SEPARADOR
      l_cod_cobs := SUBSTR(l_cod_cobs,trn.CERO,LENGTH(l_cod_cobs) - trn.UNO);
      --
      mx('F', 'fp_trata_lista');
      --
      RETURN l_cod_cobs;
      --
    END fp_trata_lista;
    --
    --
    FUNCTION fp_bus_cob_agrupadas(p_cod_cia                df_cmn_nwt_xx_vrb_cnc.cmp_val%TYPE,
                                      p_cod_ramo               df_cmn_nwt_xx_vrb_cnc.lob_val%TYPE,
                                      p_vrb_nam                df_cmn_nwt_xx_vrb_cnc.vrb_nam%TYPE)
    RETURN rec_tab_cod_cob_agrupadas
    IS
    --
    l_tab_cod_cob_agrupadas rec_tab_cod_cob_agrupadas;
    --
    BEGIN
      --
      mx('I', 'fp_bus_cob_agrupadas');
      --
      l_tab_cod_cob_agrupadas := rec_tab_cod_cob_agrupadas();
      --
      -- BUSCA NA TABELA TODOS OS COD_COB PARAMETRIZADOS PARA O AGRUPAMENTO PASSADO
      FOR cob IN (SELECT DISTINCT a.cnc_vrb_val AS cod_cob
                             FROM df_cmn_nwt_xx_vrb_cnc a
                            WHERE a.cmp_val         = p_cod_cia
                              AND a.lob_val         = p_cod_ramo
                              -- Ini. v 1.41
                              AND a.vrb_nam         LIKE  (p_vrb_nam || '%')
                              --/* 1.79 I
                              -- Condicao para nao exibir AS coberturas de carta verde unificadas para endosso
                              /*AND a.vrb_nam =
                                 (CASE
                                    WHEN a.vrb_nam = 'COD_COB_AGRUPADA#92'                                           AND
                                         trn_k_global.ref_f_global('tip_mvto_batch') = ea_k_231_utils.g_k_spto_batch
                                    THEN
                                     trn.NULO
                                    ELSE
                                     a.vrb_nam
                                  END)*/--v1.90
                              -- Fim. v 1.41
                              --1.79 F */
                              --
                              AND a.mdt_val         = EM.cod_modalidad_gen
                              AND a.crn_val         = DC.cod_mon_gen
                              AND a.cvr_val         = EM.cod_cob_gen
                              AND a.frs_lvl_val     = DC.cod_nivel1_gen
                              AND a.scn_lvl_val     = DC.cod_nivel2_gen
                              AND a.thr_lvl_val     = DC.cod_nivel3_gen
                              AND a.frs_dst_hnl_val = DC.cod_canal1_gen
                              AND a.scn_dst_hnl_val = DC.cod_canal2_gen
                              AND a.thr_dst_hnl_val = DC.cod_canal3_gen
                              AND a.agn_val         = TRN.cod_tercero_gen
                              AND a.gpp_val         = 'ZZZZZZZZZZZZZ'
                              AND a.del_val         = EM.num_contrato_gen
                              AND a.sbl_val         = EM.num_subcontrato_gen
                              AND a.ply_val         = 'ZZZZZZZZZZZZZ'
                              AND a.cnc_vrb_val     IN (SELECT g40.cod_Cob
                                                          FROM g2109040_vcr g40,
                                                               g2109041_vcr g41
                                                         WHERE g40.val_clave_formula = g_val_clave_formula
                                                           AND g40.val_clave_formula = g41.val_clave_formula
                                                           AND g40.cod_Cob = g41.cod_Cob
                                                          AND (   g40.mca_contrata = 'S' AND g41.mca_contrata_cob = 'S'
                                                               OR g40.mca_contrata = 'N' AND g41.mca_contrata_cob = 'S'
                                                               OR g40.mca_contrata = 'S' AND g41.mca_contrata_cob = 'N'
                                                               OR g40.mca_contrata = 'N' AND g41.mca_contrata_cob = 'N'
                                                               )
                                                       )
                              AND a.vld_dat          = (SELECT MAX(vld_dat)
                                                          FROM df_cmn_nwt_xx_vrb_cnc b
                                                         WHERE b.cmp_val         = a.cmp_val
                                                           AND b.lob_val         = a.lob_val
                                                           AND b.mdt_val         = a.mdt_val
                                                           AND b.crn_val         = a.crn_val
                                                           AND b.cvr_val         = a.cvr_val
                                                           AND b.frs_lvl_val     = a.frs_lvl_val
                                                           AND b.scn_lvl_val     = a.scn_lvl_val
                                                           AND b.thr_lvl_val     = a.thr_lvl_val
                                                           AND b.frs_dst_hnl_val = a.frs_dst_hnl_val
                                                           AND b.scn_dst_hnl_val = a.scn_dst_hnl_val
                                                           AND b.thr_dst_hnl_val = a.thr_dst_hnl_val
                                                           AND b.gpp_val         = a.gpp_val
                                                           AND b.del_val         = a.del_val
                                                           AND b.sbl_val         = a.sbl_val
                                                           AND b.ply_val         = a.ply_val
                                                           AND b.agn_val         = a.agn_val
                                                           AND b.vrb_nam         = a.vrb_nam
                                                           AND b.cnc_vrb_val     = a.cnc_vrb_val)
                  ORDER BY TO_NUMBER(cod_cob))
      LOOP
         --
         l_tab_cod_cob_agrupadas.EXTEND(1);
         l_tab_cod_cob_agrupadas(l_tab_cod_cob_agrupadas.LAST) := cob.cod_cob;
         --
      END LOOP;
      --
      mx('F', 'fp_bus_cob_agrupadas');
      --
      RETURN l_tab_cod_cob_agrupadas;
      --
    END fp_bus_cob_agrupadas;
    --
    --
    FUNCTION fp_bus_mca_selec_atrib(p_cod_cia        c2009040_vcr.cod_cia%TYPE,
                                    p_cod_ramo       c2009040_vcr.cod_ramo%TYPE,
                                    p_num_cotizacion c2009040_vcr.num_cotizacion%TYPE,
                                    p_cod_campo      g2990006.cod_campo%TYPE,
                                    p_cod_valor      g2990006.cod_valor%TYPE,
                                    p_cod_cob        c2000000.cod_fila%TYPE,
                                    p_cod_modalidad  g2109010_vcr.cod_modalidad%TYPE)
    RETURN c2000000.val_columna%TYPE
    IS
    --
    l_mca_selec c2000000.val_columna%TYPE;
    --
    BEGIN
      --
      mx('I', 'fp_bus_mca_selec_atrib');
      mx('p_cod_campo:      ', p_cod_campo     );
      mx('p_cod_valor:      ', p_cod_valor     );
      mx('p_cod_cob:        ', p_cod_cob       );
      mx('p_cod_modalidad:  ', p_cod_modalidad );
      mx('p_num_cotizacion: ', p_num_cotizacion);
      --
      -- VERIFICA SE O VALOR DO CAMPO PASSADO CONSTA NA c2000000
      BEGIN
         --
         IF NVL(g_tip_mvto_batch,g_k_tip_mvto_batch_cotacao) = g_k_tip_mvto_batch_cotacao THEN
           --
            mx('g_tip_mvto_batch: ', g_tip_mvto_batch);
           --
           -- I 2.28
            --
             BEGIN
               --
               SELECT trn.SI
                 INTO l_mca_selec
                 FROM c2000000 c
                WHERE c.cod_cia        =    p_cod_cia
                  AND c.cod_ramo       =    p_cod_ramo
                  AND c.num_cotizacion =    p_num_cotizacion
                  AND c.nom_columna    =    p_cod_campo || g_k_prefixo_simulacion || p_num_simulacion
                  AND c.val_columna    =    p_cod_valor
                  AND c.cod_fila       IN  (g_k_cod_fila_generica);
              --
              EXCEPTION
                WHEN OTHERS THEN
                  --
             SELECT trn.SI
               INTO l_mca_selec
               FROM c2000000 c
              WHERE c.cod_cia        =    p_cod_cia
                AND c.cod_ramo       =    p_cod_ramo
                AND c.num_cotizacion =    p_num_cotizacion
                AND c.nom_columna    =    p_cod_campo
                AND c.val_columna    =    p_cod_valor
                AND c.cod_fila       IN  (g_k_cod_fila_generica);
       END;
           --
         ELSIF g_tip_mvto_batch = g_k_tip_mvto_batch_endosso THEN
           --
           mx('g_tip_mvto_batch: ', g_tip_mvto_batch);
           --
           -- jjesus
           SELECT trn.SI
             INTO l_mca_selec
             FROM (SELECT trn.SI
                     FROM a2000560 a
                    WHERE a.cod_cia        =    p_cod_cia
                      AND a.num_propuesta  =    p_num_cotizacion
                      AND a.cod_campo      LIKE (p_cod_campo || p_cod_cob || '%')
                      AND a.val_campo      =    p_cod_valor
                   UNION
                   SELECT trn.SI
                     FROM a2000560 a
                    WHERE a.cod_cia        =   p_cod_cia
                      AND a.num_propuesta  =   p_num_cotizacion
                      AND a.cod_campo      LIKE (g_k_prefixo_acessorio || '%')
                      AND a.cod_campo      =   p_cod_campo
                      AND a.val_campo      =   p_cod_valor
                      AND a.val_campo      IS NOT NULL);
           -- jjesus
         END IF;
         --
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
           --
           l_mca_selec := trn.NO;
           --
          --I 3.16
          IF NVL(ea_k_231_utils.f_valor_dv('mca_blindagem'), trn.NO) =
             trn.SI AND p_cod_cob = 281 AND
             p_cod_campo = 'NUM_NIVEL_BLINDAGEM' AND p_cod_valor = 5 THEN
            l_mca_selec := trn.SI;
          END IF;
          -- F 3.16
      END;
      --
      mx('l_mca_selec: ', l_mca_selec);
      --
      mx('F', 'fp_bus_mca_selec_atrib');
      --
      RETURN l_mca_selec;
      --
    END fp_bus_mca_selec_atrib;
    --
    --
    FUNCTION fp_bus_fran_dv_cob(p_cod_cia        g2000020.cod_cia%TYPE,
                                p_cod_ramo       g2000020.cod_ramo%TYPE,
                                p_cod_cob        g2000020.cod_cob%TYPE)
    RETURN c2000000.val_columna%TYPE
    IS
    --
    l_mca_selec c2000000.val_columna%TYPE;
    --
    BEGIN
      --
      mx('I', 'fp_bus_fran_dv_cob');
      --
      -- EXEMPLO: COBERTURA DE VIDROS POSSUI SUA FANQUICIA ARMAZENADA EM DIFERENTES DADOS VARIAVEIS NA g2000020
      BEGIN
         --
         SELECT DISTINCT trn.SI
            INTO l_mca_selec
           FROM g2000020 g
          WHERE g.cod_cia   = p_cod_cia
            AND g.cod_ramo  = p_cod_ramo
            AND g.cod_cob   = p_cod_cob
            AND g.cod_campo LIKE (g_k_ini_val_franq_dv || '%');
         --
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
           --
           l_mca_selec := trn.NO;
           --
      END;
      --
      mx('F', 'fp_bus_fran_dv_cob');
      --
      RETURN l_mca_selec;
      --
    END fp_bus_fran_dv_cob;
    --
    --
    FUNCTION fp_bus_val_premio_cob(p_cod_cia        c2109170_vcr.cod_cia       %TYPE,
                                   p_cod_ramo       c2109170_vcr.cod_ramo      %TYPE,
                                   p_num_cotizacion c2109170_vcr.num_cotizacion%TYPE,
                                   p_num_simulacion c2109170_vcr.num_simulacion%TYPE,
                                   p_num_spto       A2100170.num_spto          %TYPE,
                                   p_cod_cob        VARCHAR2)
    RETURN c2109170_vcr.imp_anual%TYPE
    IS
    --
    l_val_premio c2109170_vcr.imp_anual%TYPE;
    l_num_spto   a2100170.num_spto     %TYPE; --v1.69
    --
    BEGIN
      --
      mx('I', 'fp_bus_val_premio_cob');
      --
      -- EXECUTA A SOMATORIA DE TODOS OS REGISTROS (MENOS IOF) PARA AQUELA COBERTURA NA TABELA c2109170_vcr
      BEGIN
      --
      IF NVL(g_tip_mvto_batch,g_k_tip_mvto_batch_cotacao) = g_k_tip_mvto_batch_cotacao THEN
      --
      WITH cod_cob_parser AS (SELECT regexp_substr(p_cod_cob,
                                                   '[^,]+',
                                                   trn.UNO,
                                                   LEVEL) AS cod_cob
                                FROM dual
                                CONNECT BY LEVEL <= LENGTH(p_cod_cob) - LENGTH(REPLACE(p_cod_cob,
                                                                                       g_k_separador_vir,
                                                                                       trn.NULO))
                                                                        + trn.UNO)
      SELECT SUM(NVL(imp_spto,trn.CERO)) AS val_premio
        INTO l_val_premio
        FROM c2109170_vcr c,
             cod_cob_parser p
       WHERE c.cod_cia        =  p_cod_cia
         AND c.cod_ramo       =  p_cod_ramo
         AND c.num_cotizacion =  p_num_cotizacion
         AND c.num_simulacion =  p_num_simulacion
         AND c.cod_cob        =  p.cod_cob
         AND c.cod_desglose   <> g_k_cod_desglose_iof;
      --
      ELSIF g_tip_mvto_batch = g_k_tip_mvto_batch_endosso THEN
      --
      l_num_spto := fp_busca_max_spto_def(p_cod_cia
                                         ,p_num_cotizacion); --v1.69
      --
      WITH cod_cob_parser AS
       (SELECT regexp_substr(p_cod_cob, '[^,]+', trn.uno, LEVEL) AS cod_cob
          FROM dual
        CONNECT BY LEVEL <= length(p_cod_cob) - length(REPLACE(p_cod_cob, g_k_separador_vir, trn.nulo)) + trn.uno)

      SELECT SUM(nvl(imp_spto, trn.cero)) AS val_premio
        INTO l_val_premio
        FROM A2100170 a,
             cod_cob_parser p
       WHERE a.cod_cia        = p_cod_cia
         AND a.cod_ramo       = p_cod_ramo
         AND a.num_poliza     = p_num_cotizacion
         AND a.num_spto       = l_num_spto --v1.69
         AND a.num_riesgo     = trn.uno
         AND a.cod_cob        = p.cod_cob
         AND a.cod_desglose   <> g_k_cod_desglose_iof;
      --
      END IF;
      --
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
            --
            l_val_premio := trn.NULO;
            --
      END;
      --
      mx('F', 'fp_bus_val_premio_cob');
      --
      RETURN l_val_premio;
      --
    END fp_bus_val_premio_cob;
    --
    --
    BEGIN
      --
      mx('I', 'fp_bus_coberturas');
      --
      mx('p_cod_cia          ', p_cod_cia);
      mx('p_cod_ramo         ', p_cod_ramo);
      mx('p_num_cotizacion   ', p_num_cotizacion);
      mx('p_num_simulacion   ', p_num_simulacion);
      mx('p_cod_modalidad    ', p_cod_modalidad);
      mx('p_cod_tarifa       ', p_cod_tarifa);
      mx('p_val_clave_formula', p_val_clave_formula);
      mx('p_tip_lista_cob    ', p_tip_lista_cob);
      --
      l_eh_3_pacotes := NVL( fp_devuelve_n( 'tres_pacotes' ) ,0 ) > 0 ;
      l_retorno_cob := rec_tab_det_cob();
      --
      IF g_tip_mvto_batch = ea_k_231_utils.g_k_spto_batch
      THEN
        --
        g_num_spto := fp_busca_max_spto(p_cod_cia
                                       ,p_num_cotizacion);
        --
      END IF;
      --
      -- RETORNA TODOS OS COD_COB DE CASCO PARA NAO SEREM INCLUIDOS NO RETORNO DA FUNCTION
      l_cod_cobs := fp_trata_lista(fp_bus_cob_casco(p_cod_cia,
                                                    p_cod_ramo,
                                                    g_k_cod_campo_cob_casco));
      --
      mx('l_cod_cobs', l_cod_cobs);
      --
      l_reg_cobs_agr := fp_bus_cob_agrupadas(p_cod_cia
                                            ,p_cod_ramo
                                            ,g_k_cod_campo_cob_agrupada);
      --
      IF l_reg_cobs_agr.EXISTS(1) THEN
         --
         l_cod_cobs := l_cod_cobs ||
                       ','        ||
                       fp_trata_lista(l_reg_cobs_agr);
         --
         mx('l_cod_cobs', l_cod_cobs);
         --
      END IF;
      --
      -- DEFINE TIPO DE BUSCA DE COBERTURAS (DE PACOTE OU ADICIONAIS)
      IF p_tip_lista_cob = 'P' THEN
         --
         l_mca_contrata_I      := trn.SI;
         l_mca_contrata_cob_I  := trn.SI;
         --
         l_mca_contrata_II     := trn.SI;
         l_mca_contrata_cob_II := trn.NO;
         --
      ELSIF p_tip_lista_cob = 'A' THEN
         --
         l_mca_contrata_I      := trn.NO;
         l_mca_contrata_cob_I  := trn.SI;
         --
         l_mca_contrata_II     := trn.NO;
         l_mca_contrata_cob_II := trn.SI;
         --
      ELSIF p_tip_lista_cob = 'B' THEN
         --
         l_mca_contrata_cob_I  := trn.NO;
         l_mca_contrata_I      := trn.NO;
         --
         l_mca_contrata_cob_II := trn.NO;
         l_mca_contrata_II     := trn.NO;
         --
      END IF;
      --

      --
      IF NOT l_eh_3_pacotes THEN -- 2.14
      --
      -- v3.57 ini
      ea_k_231_utils.p_devuelve_dato_cotizacion(p_nom_tabla   => ea_k_231_utils.g_k_tabla_df
                                               ,p_nom_columna => 'MCA_RENOVACION'
                                               ,p_val_campo   => l_mca_renovacion);
      --
      l_mca_renovacion := NVL(l_mca_renovacion, trn.NO);
      --
      IF l_mca_renovacion = trn.SI
      THEN
        --
        ea_k_231_utils.p_devuelve_dato_cotizacion(p_nom_tabla   => ea_k_231_utils.g_k_tabla_dv
                                                 ,p_nom_columna => 'NUM_POLIZA_RENOV'
                                                 ,p_val_campo   => l_num_poliza_renov);
        --
      END IF;
      -- v3.57 fim
      --
      FOR cob IN (WITH

        -- COD_COB_PARSER TRANSFORMA VARIAVEL VARCHAR COM OS COD_COB EM SUBCONSULTA PARA SER USANDO EM IN
        cod_cob_parser AS (SELECT regexp_substr(l_cod_cobs, '[^,]+', trn.UNO, LEVEL) AS cod_cob
                             FROM dual CONNECT BY LEVEL <= LENGTH(l_cod_cobs) - LENGTH(REPLACE(l_cod_cobs, g_k_separador_vir, trn.NULO)) + trn.UNO),
        -- BUSCA TODAS AS COBERTURAS POR PACOTE G2109040_VCR
        c_cobertura_cotacao AS (select
                                       g40.cod_cob                AS cod_cob,
                                       g_k_tip_mvto_batch_cotacao AS tip_mvto_batch,
                                       trn.NO                     AS mca_renovacion --v3.57
                                  from
                                                       g2109040_vcr g40
                                       left outer join g2109041_vcr g41 on g40.cod_cob = g41.cod_cob and g40.val_clave_formula = g41.val_clave_formula
                                 where
                                         g40.val_clave_formula = p_val_clave_formula
                                   and ((g40.mca_contrata = l_mca_contrata_I      and g41.mca_contrata_cob = l_mca_contrata_cob_I )
                                    or ( g40.mca_contrata = l_mca_contrata_II     and g41.mca_contrata_cob = l_mca_contrata_cob_II))
                              group by
                                       g40.cod_cob,
                                       g40.val_clave_formula,
                                       g40.mca_contrata,
                                       g41.mca_contrata_cob),
        -- BUSCA TODAS AS COBERTURAS DA RENOVACAO GARANTIDA
        -- v3.57 ini
        c_cobertura_renov_apol AS
         (SELECT g40.cod_cob                AS cod_cob
               , g_k_tip_mvto_batch_cotacao AS tip_mvto_batch
               , trn.SI                     AS mca_renovacion
               , 'P'                        AS tip_cob
            FROM g2109040_vcr g40
            LEFT outer join g2109041_vcr g41
              ON g40.cod_cob = g41.cod_cob
             AND g40.val_clave_formula = g41.val_clave_formula
           WHERE g40.val_clave_formula = p_val_clave_formula
             AND g40.cod_cob           IN (select c9040.cod_cob
                                             from c2009040_vcr c9040
                                            WHERE c9040.cod_cia        = p_cod_cia
                                              AND c9040.cod_ramo       = p_cod_ramo
                                              AND c9040.num_simulacion = p_num_simulacion
                                              AND c9040.num_cotizacion = l_num_poliza_renov)
             AND NOT (g40.mca_contrata = g41.mca_contrata_cob AND
                      g40.mca_contrata = trn.NO)
           GROUP BY g40.cod_cob
              --
           UNION
              --
          SELECT g40.cod_cob                AS cod_cob
               , g_k_tip_mvto_batch_cotacao AS tip_mvto_batch
               , trn.SI                     AS mca_renovacion
               , 'P'                        AS tip_cob
            FROM g2109040_vcr g40
            LEFT OUTER JOIN g2109041_vcr g41
              ON g40.cod_cob           = g41.cod_cob
             AND g40.val_clave_formula = g41.val_clave_formula
           WHERE g40.val_clave_formula = p_val_clave_formula
             AND ((g40.mca_contrata    = trn.SI AND g41.mca_contrata_cob = trn.SI) OR
                  (g40.mca_contrata    = trn.SI AND g41.mca_contrata_cob = trn.NO))
           GROUP BY g40.cod_cob),
           --
        c_cobertura_renov_adic AS
         (select g40.cod_cob                AS cod_cob
               , g_k_tip_mvto_batch_cotacao AS tip_mvto_batch
               , trn.SI                     AS mca_renovacion
               , 'A'                        AS tip_cob
            FROM g2109040_vcr g40
            LEFT OUTER JOIN g2109041_vcr g41
              ON g40.cod_cob = g41.cod_cob
             AND g40.val_clave_formula = g41.val_clave_formula
           WHERE g40.val_clave_formula = p_val_clave_formula
             AND NOT (g40.mca_contrata = g41.mca_contrata_cob AND
                      g40.mca_contrata = trn.NO)
             AND NOT EXISTS (SELECT 1
                               FROM c_cobertura_renov_apol apol
                              WHERE g40.cod_cob = apol.cod_cob)
           GROUP BY g40.cod_cob),

        -- v3.57 fim
        -- BUSCA COBERTURAS CONTRATADAS PARA APOLICE
        cob_apolices       AS /*(select
                                    a.cod_cob
                               from
                                    a2000040     a
                              where
                                    a.cod_cia                   = p_cod_cia
                                and a.cod_ramo                  = p_cod_ramo
                                and a.num_poliza                = p_num_cotizacion
                                and a.num_riesgo                = trn.uno
                                and nvl(a.mca_baja_cob, trn.no) = trn.no
                                and a.mca_vigente               = trn.si
                                and a.mca_vigente_apli          = trn.si)*/
                                (SELECT a.cod_cob
                                   FROM a2000040 a
                                  WHERE a.cod_cia       = p_cod_cia
                                    AND a.cod_ramo      = p_cod_ramo
                                    AND a.num_poliza    = p_num_cotizacion
                                    AND a.num_apli      = trn.CERO
                                    AND a.num_spto_apli = trn.CERO
                                    AND a.num_riesgo    = trn.UNO
                                    AND a.mca_baja_cob  = trn.NO
                                    AND a.num_spto  = (SELECT MAX(b.num_spto)
                                                         FROM a2000030 b
                                                        WHERE b.cod_cia           = a.cod_cia
                                                          AND b.cod_ramo          = a.cod_ramo
                                                          AND b.num_poliza        = a.num_poliza
                                                          AND b.num_spto         <= NVL(g_num_spto
                                                                                       ,b.num_spto)
                                                          AND b.num_apli          = trn.CERO
                                                          AND b.mca_spto_tmp      = trn.NO
                                                          AND b.mca_provisional   = trn.NO
                                                          AND b.mca_spto_anulado  = trn.NO)),
        --BUSCA COBERTURAS NAO NO PACOTE E CONTRATADAS NA APOLICE
        cob_bloqueadas as ( select
                                   g40.cod_cob,
                                   'B' as tip_cob
                              from
                                                   g2109040_vcr g40
                                   left outer join g2109041_vcr g41 on g40.cod_cob = g41.cod_cob and g40.val_clave_formula = g41.val_clave_formula
                             where
                                     g40.val_clave_formula = p_val_clave_formula
                               and ( g41.mca_contrata_cob  = trn.NO    and g40.mca_contrata     = trn.NO )
                               and   g40.cod_cob in (select cod_cob from cob_apolices)
                          group by
                                   g40.cod_cob,
                                   g40.val_clave_formula,
                                   g40.mca_contrata,
                                   g41.mca_contrata_cob),
        --BUSCA COBERTURAS NO PACOTE E CONTRATADAS NA APOLICE
        cob_pacote         AS ( select
                                       g40.cod_cob,
                                       'P' as tip_cob
                                  from
                                                       g2109040_vcr g40
                                       left outer join g2109041_vcr g41 on g40.cod_cob = g41.cod_cob and g40.val_clave_formula = g41.val_clave_formula
                                 where
                                         g40.val_clave_formula = p_val_clave_formula
                                   and ((g41.mca_contrata_cob  = trn.SI    and g40.mca_contrata     = trn.SI )
                                    or ( g40.mca_contrata      = trn.SI    and g41.mca_contrata_cob = trn.NO)
                                    or ( g41.mca_contrata_cob  = trn.SI    and g40.mca_contrata     = trn.NO))
                                   and   g40.cod_cob in (select cod_cob
                                                           from cob_apolices
                                                          WHERE cod_cob <> 1301
                                                             OR (cod_cob = 1301 AND
                                                                 NOT EXISTS (SELECT 1
                                                                               FROM cob_bloqueadas x
                                                                              WHERE x.cod_cob = 281)))
                              group by
                                       g40.cod_cob,
                                       g40.val_clave_formula,
                                       g40.mca_contrata,
                                       g41.mca_contrata_cob),
        --BUSCA COBERTURAS NO PACOTE E NAO CONTRATADAS NA APOLICE
        cob_adicionais    AS (select
                                   g40.cod_cob,
                                   'A' as tip_cob
                              from
                                                   g2109040_vcr g40
                                   left outer join g2109041_vcr g41 on g40.cod_cob = g41.cod_cob and g40.val_clave_formula = g41.val_clave_formula
                             where
                                     g40.val_clave_formula = p_val_clave_formula
                               and ((g41.mca_contrata_cob  = trn.SI    and g40.mca_contrata     = trn.SI )
                                or ( g40.mca_contrata      = trn.SI    and g41.mca_contrata_cob = trn.NO)
                                or ( g41.mca_contrata_cob  = trn.SI    and g40.mca_contrata     = trn.NO))
                               and   g40.cod_cob not in (select cod_cob from cob_pacote)
                          group by
                                   g40.cod_cob,
                                   g40.val_clave_formula,
                                   g40.mca_contrata,
                                   g41.mca_contrata_cob),
        --SELECIONA TIPO DE COBERTURAS EXIBIDAS PARA ENDOSSO
        c_cobertura_endosso AS (select
                                       cobs.cod_cob,
                                       '4' as tip_mvto_batch
                                  from
                                       (     select * from cob_pacote
                                       union select * from cob_adicionais
                                       union select * from cob_bloqueadas) cobs
                                where
                                       cobs.tip_cob = p_tip_lista_cob),
        -- SELECIONA A ORDEM DE VISUALIZACAO DAS COBERUTRAS ADICIONAIS
        -- I 4.94 Alteracao das descricoes das coberturas
        cob_orden AS (select COD_VALOR AS cod_cob, VAL_COLUMNA AS nom_cob, num_secu from g2009017_vcr where cod_cia = p_cod_cia and cod_ramo = p_cod_ramo and nom_columna = 'NOM_COB' ),
        -- SELECIONA COBERTURAS PARAMETRIZADAS NA TABELA DE CONSTANTES PARA NAO SEREM RETORNADAS
        cob_excep AS (select CNC_VRB_VAL AS cod_cob, ROW_NAM AS nom_cob from df_cmn_nwt_xx_vrb_cnc where cmp_val = p_cod_cia and lob_val = p_cod_ramo and vrb_nam = 'COD_COB_EXCEPTION' and row_val_val = 'N')
        -- BUSCA O NOME DAS COBERTURAS CONTRATADAS
         SELECT b.cod_cob,
                d.nom_cob,
                DECODE(g_tip_mvto_batch, 7, --c.suma_aseg
                                             (SELECT c.suma_aseg
                                                FROM c2009040_vcr c
                                               WHERE b.cod_cob        = c.cod_cob
                                                 AND c.cod_cia        = p_cod_cia
                                                 AND c.cod_ramo       = p_cod_ramo
                                                 AND c.num_cotizacion = p_num_cotizacion
                                                 AND c.num_simulacion = p_num_simulacion),
/*                                          4, --a.suma_aseg
                                             (SELECT a.suma_aseg
                                                FROM a2000040 A
                                               WHERE b.cod_cob       = a.cod_cob
                                                 AND a.cod_cia       = p_cod_cia
                                                 AND a.cod_ramo      = p_cod_ramo
                                                 AND a.num_poliza    = p_num_cotizacion
                                                 AND a.num_apli      = trn.CERO
                                                 AND a.num_spto_apli = trn.CERO
                                                 AND a.num_riesgo    = trn.UNO
                                                 AND a.mca_baja_cob  = trn.NO
                                                 AND a.num_spto  = (SELECT MAX(b.num_spto)
                                                                      FROM a2000030 b
                                                                     WHERE b.cod_cia          = a.cod_cia
                                                                       AND b.cod_ramo         = a.cod_ramo
                                                                       AND b.num_poliza       = a.num_poliza
                                                                       AND b.num_spto        <= NVL(g_num_spto
                                                                                                   ,b.num_spto)
                                                                       AND b.num_apli         = trn.CERO
                                                                       AND b.mca_spto_tmp     = trn.NO
                                                                       AND b.mca_provisional  = trn.NO
                                                                       AND b.mca_spto_anulado = trn.NO))) as suma_aseg*/
                                          4, --a.suma_aseg
                                             (SELECT a560.val_campo
                                                FROM a2000560 a560
                                               WHERE a560.cod_cia       = p_cod_cia
                                                 AND a560.num_propuesta = p_num_cotizacion
                                                 AND a560.cod_campo     = 'COSUMA_ASEG' || b.cod_cob)) as suma_aseg
           FROM                            a1002150    b
           LEFT OUTER JOIN cob_orden    d ON
                                             b.cod_cob                   = d.cod_cob
          WHERE b.cod_cia        = p_cod_cia
            AND b.cod_ramo       = p_cod_ramo
            AND b.cod_cob     IN (SELECT cod_cob
                                    FROM c_cobertura_cotacao
                                   WHERE tip_mvto_batch = g_tip_mvto_batch
                                     AND mca_renovacion = l_mca_renovacion
                                  --
                                  -- v3.57 ini
                                  UNION
                                  --
                                  SELECT cod_cob
                                    from c_cobertura_renov_apol
                                   WHERE tip_mvto_batch = g_tip_mvto_batch
                                     AND mca_renovacion = l_mca_renovacion
                                     AND tip_cob        = p_tip_lista_cob
                                  --
                                  UNION
                                  --
                                  SELECT cod_cob
                                    FROM c_cobertura_renov_adic
                                   WHERE tip_mvto_batch = g_tip_mvto_batch
                                     AND mca_renovacion = l_mca_renovacion
                                     AND tip_cob        = p_tip_lista_cob
                                  -- v3.57 fim
                                  --
                                  UNION
                                  --
                                  SELECT cod_cob
                                    FROM c_cobertura_endosso
                                   WHERE tip_mvto_batch = g_tip_mvto_batch)


            AND b.cod_cob NOT IN (SELECT cod_cob FROM cod_cob_parser)
            AND b.cod_cob NOT IN (SELECT cod_cob FROM cob_excep     )
         ORDER BY d.num_secu)
      LOOP
         --
         l_detalhe_cobertura.cod_cob       := cob.cod_cob;
         --
         mx('cob.cod_cob', cob.cod_cob);
         --
         l_detalhe_cobertura.nom_cob       := cob.nom_cob;
         --
         mx('cob.nom_cob', cob.nom_cob);
         --
         l_detalhe_cobertura.mca_selec_cob := fp_bus_mca_selec_cob(p_cod_cia,
                                                                   p_cod_ramo,
                                                                   p_num_cotizacion,
                                                                   p_num_simulacion,
                                                                   cob.cod_cob);
         -- DEFINE SE A COBERTURA MODIFICA CAPITAL
         SELECT
            mca_mod_suma_aseg
         INTO
            l_detalhe_cobertura.mca_modif_cap
         FROM
            A1002150
         WHERE
            COD_CIA  = p_cod_cia  AND
            COD_RAMO = p_cod_ramo AND
            COD_COB  = cob.cod_cob;
         --
         l_detalhe_cobertura.tab_val_lim_inde := rec_tab_val_lim_inde();
         --
         l_indice                             :=  0;
         --
         -- BUSCA OS LIMITES DE INDENIZACAO DA COBERTURA CALCULADA
        --I 2.54
        IF NVL(trn_k_global.ref_f_global('MCA_PREFE_PCT'),'0') = '1' THEN
        FOR lj IN (WITH lista_cob AS
                        (SELECT j.cod_cob, j.suma_aseg, j.mca_defecto
                          FROM g2109040_vcr j
                         WHERE j.cod_cia = p_cod_cia
                           AND j.val_clave_formula = (case p_cod_tarifa
                                                      when 207 then 'Generico-99998'
                                                      when 213 then 'Generico-99997'
                                                      when 214 then 'Generico-99997'
                                                      when 215 then 'Generico-99999' end) -- 2.54
                           AND j.cod_cob = cob.cod_cob
                           AND j.mca_baja = trn.NO
                           AND j.cod_tarifa = p_cod_tarifa -- 2.27
                           AND j.fec_validez =
                               (SELECT MAX(jj.fec_validez)
                                  FROM g2109040_vcr jj
                                 WHERE jj.cod_cia = j.cod_cia

                                   AND jj.val_clave_formula =
                                       j.val_clave_formula
                                   AND jj.cod_cob = j.cod_cob))
                       SELECT j2.cod_cob,
                              j2.suma_aseg,
                              CASE
                                WHEN j.suma_aseg = j2.suma_aseg THEN
                                 trn.SI
                                ELSE
                                 trn.NO
                              END mca_default
                         FROM g2109040_vcr j
                         join lista_cob j2
                           on j2.cod_cob = j.cod_cob
                        WHERE j.cod_cia = p_cod_cia
                          AND j.val_clave_formula = p_val_clave_formula
                          AND j.cod_cob = cob.cod_cob
                          AND j.mca_baja = trn.NO
                          AND j.fec_validez =
                              (SELECT MAX(jj.fec_validez)
                                 FROM g2109040_vcr jj
                                WHERE jj.cod_cia = j.cod_cia
                                  AND jj.val_clave_formula =
                                      j.val_clave_formula
                                  AND jj.cod_cob = j.cod_cob)
                        ORDER BY j2.suma_aseg)

         LOOP
          --
          mx('VALOR DO LIMITE DA COBERTURA  ' || cob.cod_cob ||
             ' CONTRATADA',
             lj.suma_aseg);
          mx('VALOR DO LIMITE DA COBERTURA  ' || cob.cod_cob ||
             ' CONTRATADA',
             cob.suma_aseg);
         --
          l_indice := l_indice + 1;
          --
          l_valor_lim_indeni.cod_campo := 'SUMA_ASEG_' ||
                                          TO_CHAR(lj.cod_cob);
          --
          l_valor_lim_indeni.val_campo := lj.suma_aseg;
          --
          IF lj.suma_aseg = cob.suma_aseg THEN
            --
            l_valor_lim_indeni.mca_val_defec := trn.SI;
            --
          ELSE
            --
            l_valor_lim_indeni.mca_val_defec := trn.NO;
            --
          END IF;
          --
          l_detalhe_cobertura.tab_val_lim_inde.EXTEND(1);
          l_detalhe_cobertura.tab_val_lim_inde(l_detalhe_cobertura.tab_val_lim_inde.LAST) := l_valor_lim_indeni;
          --
        END LOOP;
        --
        ELSE
        --
        FOR lj IN (SELECT j.cod_cob, j.suma_aseg, j.mca_defecto
                      FROM g2109040_vcr j
                     WHERE j.cod_cia            = p_cod_cia
                       AND j.val_clave_formula  = p_val_clave_formula
                       AND j.cod_cob            = cob.cod_cob
                       AND j.mca_baja           = trn.NO
                       AND j.cod_tarifa = p_cod_tarifa --2.50
                       AND j.fec_validez        = (SELECT MAX(jj.fec_validez)
                                                     FROM g2109040_vcr jj
                                                    WHERE jj.cod_cia            = j.cod_cia
                                                      AND jj.val_clave_formula  = j.val_clave_formula
                            AND jj.num_poliza_grupo = j.num_poliza_grupo --5.50
                                                      AND jj.cod_cob            = j.cod_cob)
                  ORDER BY j.suma_aseg)

         LOOP
            --
            mx('VALOR DO LIMITE DA COBERTURA  ' || cob.cod_cob || ' CONTRATADA', lj.suma_aseg);
            mx('VALOR DO LIMITE DA COBERTURA  ' || cob.cod_cob || ' CONTRATADA', cob.suma_aseg);
            --
            l_indice                         := l_indice + 1;
            --
            l_valor_lim_indeni.cod_campo     := 'SUMA_ASEG_' || TO_CHAR(lj.cod_cob);
            --
            l_valor_lim_indeni.val_campo     := lj.suma_aseg;
            --
            IF lj.suma_aseg = cob.suma_aseg THEN
               --
               l_valor_lim_indeni.mca_val_defec := trn.SI;
               --
            ELSE
               --
               l_valor_lim_indeni.mca_val_defec := trn.NO;
               --
            END IF;
            --
            l_detalhe_cobertura.tab_val_lim_inde.EXTEND(1);
            l_detalhe_cobertura.tab_val_lim_inde(l_detalhe_cobertura.tab_val_lim_inde.LAST) := l_valor_lim_indeni;
            --
         END LOOP;
         --
        END IF;
        --F 2.54
         IF l_indice = 1 THEN
            --
            IF g_tip_mvto_batch = ea_k_231_utils.g_k_spto_batch
            THEN
              --
              ea_k_231_utils.p_devuelve_dato_cotizacion(p_nom_tabla   => NULL
                                                       ,p_nom_columna => 'COSUMA_ASEG' || cob.cod_cob
                                                       ,p_val_campo   => l_detalhe_cobertura.tab_val_lim_inde(1).val_campo);
              --
            ELSE
              --
              l_detalhe_cobertura.tab_val_lim_inde(1).val_campo     := cob.suma_aseg;
              --
            END IF;
            --
            l_detalhe_cobertura.tab_val_lim_inde(1).mca_val_defec := trn.SI;
            --
         END IF;
         --
         l_detalhe_cobertura.tab_atri_lista := rec_tab_atri_lista();
         --
         l_existe_atrib    := FALSE   ;
         l_mca_selec_atrib := trn.NULO;
         --
         -- VERIFICA NA g2000020 TODOS OS DADOS VARIAVEIS DA COBERTURA QUE POSSUEM LISTA E NAO SAO RELACIONADOS A FRANQUA (VAL_FRANQ)
         FOR dv IN (
                    SELECT g.cod_campo,
                           g.cod_cob,
                           g.nom_pgm_help,
                           g.nom_tabla_valida,
                           g.cod_version,
                           g.num_secu
                      FROM g2000020 g
                     WHERE g.cod_cia          = p_cod_cia
                       AND g.cod_ramo         = p_cod_ramo
                       AND g.cod_cob          = cob.cod_cob
                       AND (   g.nom_pgm_help = g_k_nom_pgm_help_fixo
                            OR g.nom_pgm_help = g_k_nom_pgm_help_dinamico)
                       AND g.cod_campo        NOT LIKE (g_k_ini_val_franq_dv || '%')
                       UNION
                      SELECT
                             DECODE(g_tip_mvto_batch, g_k_tip_mvto_batch_cotacao, 'ACESSORIO',
                                                      g_k_tip_mvto_batch_endosso, 'ACESSORIO') as cod_campo, --jjesus
                             a.cod_cob,
                             g_k_nom_pgm_help_fixo as nom_pgm_help,
                             null                  as nom_tabla_valida,
                             null                  as cod_version,
                             1                     as num_secu
                        FROM a1002150 a
                       WHERE a.cod_cia        = p_cod_cia
                         AND a.cod_ramo       = p_cod_ramo
                         AND a.cod_cob        = cob.cod_cob
                         AND a.MCA_ACCESORIOS = trn.SI
                    ORDER BY num_secu)
         LOOP
            --
            l_detalhe_cobertura.tab_atri_lista.EXTEND(1);
            l_detalhe_cobertura.tab_atri_lista(l_detalhe_cobertura.tab_atri_lista.LAST) := rec_tab_atri_cob();
            --
            IF dv.nom_pgm_help = g_k_nom_pgm_help_fixo THEN
               --RETORNA LISTA VARIAVEL RELACIONADA AOS DADOS VARIAVEIS DAS COBERTURAS
               OPEN  c_dados_variaveis_cob
                  FOR  SELECT l.cod_campo AS cod_campo,
                              l.cod_valor AS val_campo,
                              l.nom_valor AS txt_campo,
                              NULL        AS mca_selec
                         FROM g2990006 l
                        WHERE l.cod_cia   = p_cod_cia
                          AND l.cod_ramo  = p_cod_ramo
                          AND l.cod_campo = dv.cod_campo
                        UNION
                       SELECT NOM_COLUMNA  AS cod_campo,
                              VAL_COLUMNA  AS val_campo,
                              NULL         AS txt_campo,
                              NULL         AS mca_selec
                         FROM C2000000
                        WHERE cod_cia        = p_cod_cia
                          AND cod_ramo       = p_cod_ramo
                          AND nom_columna LIKE '%' || dv.cod_campo || '%'
                          AND nom_tabla      = 'A2100610'
                          AND num_cotizacion = p_num_cotizacion
                        UNION
                       SELECT COD_CAMPO  AS cod_campo,
                              VAL_CAMPO  AS val_campo,
                              ''         AS txt_campo,
                              NULL       AS mca_selec
                         FROM A2000560
                        WHERE cod_cia          = p_cod_cia
                          AND num_propuesta    = p_num_cotizacion
                          AND cod_campo     LIKE dv.cod_campo || '%' --v3.25
                          AND cod_campo NOT LIKE '%' || dv.cod_cob
                     ORDER BY cod_campo;
               --
            ELSE
               --RETORNA LISTA FIXA RELACIONADA AOS DADOS VARIAVEIS DAS COBERTURAS
               trn_k_global.asigna('COD_CIA'          , p_cod_cia                                                    );
               trn_k_global.asigna('COD_RAMO'         , p_cod_ramo                                                   );
               trn_k_global.asigna('COD_CAMPO'        , dv.cod_campo                                                 );
               trn_k_global.asigna('DVCOD_CAMPO'      , dv.cod_campo                                                 );
               trn_k_global.asigna('NUM_RIESGO'       , trn.UNO                                                      );
               trn_k_global.asigna('DVCOD_MODALIDAD'  , p_cod_modalidad                                              );
               trn_k_global.asigna('NUM_POLIZA'       , p_num_cotizacion                                             );
               trn_k_global.asigna('NUM_COTIZACION'   , p_num_cotizacion                                             );
               trn_k_global.asigna('COD_MON'          , trn_k_global.cod_mon                                         );
               trn_k_global.asigna('COD_COB'          , dv.cod_cob                                                   );
               trn_k_global.asigna('COD_NIVEL1'       , DC.cod_nivel1_gen                                            );
               trn_k_global.asigna('COD_NIVEL2'       , DC.cod_nivel2_gen                                            );
               trn_k_global.asigna('COD_NIVEL3'       , DC.cod_nivel3_gen                                            );
               trn_k_global.asigna('COD_CANAL1'       , dc.COD_CANAL1_GEN                                            );
               trn_k_global.asigna('COD_CANAL2'       , dc.COD_CANAL2_GEN                                            );
               trn_k_global.asigna('COD_CANAL3'       , dc.COD_CANAL3_GEN                                            );
               trn_k_global.asigna('COD_AGT'          , g_k_cod_agt_generico                                         );
               trn_k_global.asigna('FEC_VALIDEZ'      , to_char(trunc(sysdate),'ddmmrrrr')                           );
               trn_k_global.asigna('DVTIP_SEGMENTO'   , trn_k_df_cmn_nwt_xx_cnn.f_vrb_nam_val('DVTIP_SEGMENTO_DEFEC'));
               --
               --mx('COBERTURAS (' || dv.cod_cob || ') - nom_tabla_valida ', dv.nom_tabla_valida);
               --mx('COBERTURAS (' || dv.cod_cob || ') - dv.cod_version   ', dv.cod_version     );
               --mx('COBERTURAS (' || dv.cod_cob || ') - dv.cod_campo     ', dv.cod_campo       );
               --
               IF dv.nom_tabla_valida = 'X2990006_VCR' THEN em_p_lista_dinamica_dv; END IF;
               --
               trn_k_lv.p_query(dv.nom_tabla_valida, dv.cod_version);
               --
               l_fila_dados := TYPTAB_DADOS_COT();
               l_fila_reg   := TYPREG_DADOS_COT.autocreate;
               --
               --mx('COBERTURAS CONTRATADAS - LISTA DE VALORES ---- ', '------------------');
               --
               LOOP
                  --
                  l_devuelve_fila := trn_k_lv.f_devuelve_fila(NULL);
                  --
                  EXIT WHEN l_devuelve_fila IS NULL;
                  --
                  --mx('l_devuelve_fila', l_devuelve_fila);
                  --
                  l_fila_reg.cod_campo := substr(l_devuelve_fila, 0, INSTR(l_devuelve_fila, '~') - 1) ;
                  l_fila_reg.val_campo := substr(l_devuelve_fila, INSTR(l_devuelve_fila, '~') + 1, INSTR(l_devuelve_fila, '[') - (LENGTH(l_fila_reg.cod_campo) + 2));
                  --
                  --mx('COBERTURAS (' || dv.cod_cob || ') - l_fila_reg.cod_campo  ', l_fila_reg.cod_campo);
                  --mx('COBERTURAS (' || dv.cod_cob || ') - l_fila_reg.val_campo  ', l_fila_reg.val_campo);
                  --mx('------------------------------------------- ', '------------------');
                  --
                  l_fila_dados.EXTEND(1);
                  l_fila_dados(l_fila_dados.LAST) := l_fila_reg;
                  --
               END LOOP;
               --
               OPEN  c_dados_variaveis_cob
                  FOR SELECT dv.cod_campo        AS cod_campo,
                             x0000000.cod_campo  AS val_campo,
                             x0000000.val_campo  AS txt_campo,
                             NULL                AS mca_selec
                        FROM TABLE(CAST(l_fila_dados AS TYPTAB_DADOS_COT)) x0000000;
               --
            END IF;
            --
            LOOP FETCH c_dados_variaveis_cob INTO ldv;
               ---
               EXIT WHEN c_dados_variaveis_cob%NOTFOUND;
               --
               l_existe_atrib := TRUE;
               --
               l_atributo_cobertura.cod_campo := ldv.cod_campo;
               --
               l_atributo_cobertura.val_campo := ldv.val_campo;
               --
               l_atributo_cobertura.txt_campo := ldv.txt_campo;
               --
               -- VERIFICA SE O ITEM DA LISTA CONSTA COMO SELECIONADO PARA ESTA COTACAO
               --
               l_mca_selec := fp_bus_mca_selec_atrib(p_cod_cia,
                                                     p_cod_ramo,
                                                     p_num_cotizacion,
                                                     ldv.cod_campo,
                                                     ldv.val_campo,
                                                     dv.cod_cob,
                                                     p_cod_modalidad);
               --
               l_atributo_cobertura.mca_selec := l_mca_selec;
               --
               IF dv.nom_tabla_valida         = 'X2990006_VCR'       AND
                  l_detalhe_cobertura.cod_cob = g_k_cod_cob_ass_veic
               THEN
                 --
                 l_atributo_cobertura.mca_selec := trn.SI;
                 --
               END IF;
               --
               IF l_atributo_cobertura.mca_selec = trn.SI
               THEN
                 --
                 l_mca_selec_atrib := l_atributo_cobertura.mca_selec;
                 --
               END IF;
               --
               l_detalhe_cobertura.tab_atri_lista(l_detalhe_cobertura.tab_atri_lista.LAST).EXTEND(1);
               l_detalhe_cobertura.tab_atri_lista(l_detalhe_cobertura.tab_atri_lista.LAST)(l_detalhe_cobertura.tab_atri_lista(l_detalhe_cobertura.tab_atri_lista.LAST).LAST) := l_atributo_cobertura;
               --
            END LOOP;
            --
         END LOOP;
         --
         IF l_existe_atrib                          AND
            NVL(l_mca_selec_atrib, trn.NO) = trn.NO
         THEN
           --
           l_detalhe_cobertura.mca_selec_cob := trn.NO;
           --
         END IF;
         --
         l_detalhe_cobertura.tab_val_franq := rec_tab_val_franq();
         --
         -- VERIFICA SE COBERTURA POSSUI FRANQUIA EM DADOS VARIAVEIS (VAL_FRANQ) OU NA c2009040_vcr
         IF fp_bus_fran_dv_cob(p_cod_cia,
                               p_cod_ramo,
                               cob.cod_cob) = trn.SI
         THEN
            --
            mx('IF fp_bus_fran_dv_cob','trn.SI');
            --
            FOR fdv IN (SELECT g2.cod_campo,
                               g1.nom_campo,
                        DECODE(g_tip_mvto_batch, g_k_tip_mvto_batch_cotacao, c.val_columna,
                                                 g_k_tip_mvto_batch_endosso, a.val_campo) as val_columna
                          FROM       g2000020 g2
                          INNER JOIN g2000010 g1    ON (g1.cod_cia       = g2.cod_cia
                                                   AND  g1.cod_campo     = g2.cod_campo)
                          LEFT  JOIN c2000000 c     ON (c.cod_cia        = g2.cod_cia
                                                   AND  c.nom_columna    = g2.cod_campo
                                                   AND  c.num_cotizacion = p_num_cotizacion)
                          LEFT  JOIN A2000560 a     ON (a.cod_cia        = g2.cod_cia
                                                   AND  a.cod_campo  LIKE (g2.cod_campo || '%')
                                                   AND  a.num_propuesta  = p_num_cotizacion)
                         WHERE g2.cod_cia       = p_cod_cia
                           AND g2.cod_ramo      = p_cod_ramo
                           AND g2.cod_cob       = cob.cod_cob
                           AND g2.cod_campo     LIKE (g_k_ini_val_franq_dv || '%')
                        ORDER BY g2.num_secu)
            LOOP
               --
               mx('--', 'LOOP fdv - 2');
               --
               mx('fdv.cod_campo'  , fdv.cod_campo  );
               mx('fdv.nom_campo'  , fdv.nom_campo  );
               mx('fdv.val_columna', fdv.val_columna);
               --
               l_valor_franquia.cod_campo := fdv.cod_campo;
               --
               l_valor_franquia.txt_campo := fdv.nom_campo;
               --
               IF l_detalhe_cobertura.mca_selec_cob = trn.SI
               THEN
                 --
                 l_valor_franquia.val_campo := fdv.val_columna;
                 --
               ELSE
                 --
                 l_valor_franquia.val_campo := trn.NULO;
                 --
               END IF;
               --
               l_detalhe_cobertura.tab_val_franq.EXTEND(1);
               l_detalhe_cobertura.tab_val_franq(l_detalhe_cobertura.tab_val_franq.LAST) := l_valor_franquia;
               --
            END LOOP;
            --
         ELSE
            --
            mx('ELSE fp_bus_fran_dv_cob','trn.NO');
            --
            -- BUSCA O MAIOR NUMERO DO ULTIMO ENDOSSO, EM CASO DE COTACAO DE ENDOSSO
            BEGIN
               --
               IF g_tip_mvto_batch = g_k_tip_mvto_batch_endosso THEN
                   --
                   l_num_max_spto := em_f_max_spto(p_cod_cia => p_cod_cia,
                                                   p_num_poliza => p_num_cotizacion,
                                                   p_num_spto => trn.nulo);
                   --
               END IF;
               --
            EXCEPTION
               WHEN OTHERS THEN
                 --
                 l_num_max_spto := trn.cero;
            END;
            --
            FOR tf IN (SELECT  c.cod_cob,
                               c.val_franquicia_min
                          FROM c2009040_vcr c
                         WHERE c.cod_cia        = p_cod_cia
                           AND c.cod_ramo       = p_cod_ramo
                           AND c.num_cotizacion = p_num_cotizacion
                           AND c.num_simulacion = p_num_simulacion
                           AND c.cod_cob        = cob.cod_cob
                           AND c.val_franquicia_min IS NOT NULL
                        UNION
                        SELECT a.cod_cob,
                               a.val_franquicia_min
                          FROM a2000040 a
                         WHERE a.cod_cia    = p_cod_cia
                           AND a.cod_ramo   = p_cod_ramo
                           AND a.num_poliza = p_num_cotizacion
                           AND a.num_riesgo = trn.UNO
                           AND a.num_spto   = l_num_max_spto
                           AND a.cod_cob    = cob.cod_cob
                           AND nvl(a.mca_baja_cob, trn.NO) = trn.NO
                           AND a.mca_vigente               = trn.SI
                           AND a.mca_vigente_apli          = trn.SI
                           AND a.val_franquicia_min IS NOT NULL)
            LOOP
               --
               l_valor_franquia.cod_campo := g_k_ini_val_franq_dv || '_' || tf.cod_cob;
               --
               l_valor_franquia.txt_campo := trn.NULO;
               --
               IF l_detalhe_cobertura.mca_selec_cob = trn.SI
               THEN
                 --
                 l_valor_franquia.val_campo := tf.val_franquicia_min;
                 --
               ELSE
                 --
                 l_valor_franquia.val_campo := trn.NULO;
                 --
               END IF;
               --
               l_detalhe_cobertura.tab_val_franq.EXTEND(1);
               l_detalhe_cobertura.tab_val_franq(l_detalhe_cobertura.tab_val_franq.LAST) := l_valor_franquia;
               --
            END LOOP;
            --
         END IF;
         --
         -- BUSCA O MAIOR NUMERO DO ULTIMO ENDOSSO, EM CASO DE COTACAO DE ENDOSSO
         BEGIN
           --
           IF g_tip_mvto_batch = g_k_tip_mvto_batch_endosso THEN
               --
               l_num_max_spto := em_f_max_spto(p_cod_cia => p_cod_cia,
                                               p_num_poliza => p_num_cotizacion,
                                               p_num_spto => trn.nulo);
               --
           END IF;
           --
         EXCEPTION
           WHEN OTHERS THEN
             --
             l_num_max_spto := trn.cero;
         END;
         --
         -- BUSCA VALOR DO PREMIO DA COBERTURA
         l_detalhe_cobertura.val_premio := fp_bus_val_premio_cob(p_cod_cia,
                                                                 p_cod_ramo,
                                                                 p_num_cotizacion,
                                                                 p_num_simulacion,
                                                                 l_num_max_spto,
                                                                 cob.cod_cob);
         --
         l_retorno_cob.EXTEND(1);
         l_retorno_cob(l_retorno_cob.LAST) := l_detalhe_cobertura;
         --
      END LOOP;
      --
      ELSE -- I 2.14
        --
        FOR cob IN (WITH
          -- COD_COB_PARSER TRANSFORMA VARIAVEL VARCHAR COM OS COD_COB EM SUBCONSULTA PARA SER USANDO EM IN
          cod_cob_parser AS (SELECT regexp_substr(l_cod_cobs, '[^,]+', trn.UNO, LEVEL) AS cod_cob
                               FROM dual CONNECT BY LEVEL <= LENGTH(l_cod_cobs) - LENGTH(REPLACE(l_cod_cobs, g_k_separador_vir, trn.NULO)) + trn.UNO),
          -- BUSCA TODAS AS COBERTURAS POR PACOTE G2109040_VCR
          c_cobertura_cotacao AS (select
                                         g40.cod_cob,
                                         '7' as tip_mvto_batch
                                    FROM  g2109040_vcr g40
                                   where
                                           g40.val_clave_formula  = p_val_clave_formula
                                   AND ea_k_definicion_pacote_vcr.f_check_cob_valida( p_num_simulacion -1, g40.cod_Cob,p_tip_lista_cob) >0 --2.21 ea_k_definicion_pacote_vcr.f_check_cob_cotacao_cobertura(p_num_simulacion -1,g40.cod_cob, l_mca_contrata_I,l_mca_contrata_cob_I,l_mca_contrata_II, l_mca_contrata_cob_II ) >0
                                   AND g40.cod_modalidad = p_cod_modalidad -- 2.61
                                     --and ((g40.mca_contrata = l_mca_contrata_I      and g41.mca_contrata_cob = l_mca_contrata_cob_I )
                                     -- or ( g40.mca_contrata = l_mca_contrata_II     and g41.mca_contrata_cob = l_mca_contrata_cob_II))
                                group by
                                         g40.cod_cob,
                                         g40.val_clave_formula,
                                         g40.mca_contrata),
          -- BUSCA COBERTURAS CONTRATADAS PARA APOLICE
          cob_apolices       AS
                                  (SELECT a.cod_cob
                                     FROM a2000040 a
                                    WHERE a.cod_cia       = p_cod_cia
                                      AND a.cod_ramo      = p_cod_ramo
                                      AND a.num_poliza    = p_num_cotizacion
                                      AND a.num_apli      = trn.CERO
                                      AND a.num_spto_apli = trn.CERO
                                      AND a.num_riesgo    = trn.UNO
                                      AND a.mca_baja_cob  = trn.NO
                                      AND a.num_spto  = (SELECT MAX(b.num_spto)
                                                           FROM a2000030 b
                                                          WHERE b.cod_cia           = a.cod_cia
                                                            AND b.cod_ramo          = a.cod_ramo
                                                            AND b.num_poliza        = a.num_poliza
                                                            AND b.num_spto         <= NVL(g_num_spto
                                                                                         ,b.num_spto)
                                                            AND b.num_apli          = trn.CERO
                                                            AND b.mca_spto_tmp      = trn.NO
                                                            AND b.mca_provisional   = trn.NO
                                                            AND b.mca_spto_anulado  = trn.NO)),
          --BUSCA COBERTURAS NAO NO PACOTE E CONTRATADAS NA APOLICE
          cob_bloqueadas as ( select
                                     g40.cod_cob,
                                     'B' as tip_cob
                                FROM g2109040_vcr g40
                               where g40.val_clave_formula = p_val_clave_formula
                                 AND ea_k_definicion_pacote_vcr.f_check_cob_bloqueada( p_num_simulacion -1, g40.cod_Cob) >0
                                 AND g40.cod_modalidad = p_cod_modalidad -- 2.61
                                 and   g40.cod_cob in (select cod_cob from cob_apolices)
                            group by
                                     g40.cod_cob,
                                     g40.val_clave_formula,
                                     g40.mca_contrata),
          --BUSCA COBERTURAS NO PACOTE E CONTRATADAS NA APOLICE
          cob_pacote         AS ( select
                                         g40.cod_cob,
                                         'P' as tip_cob
                                    FROM g2109040_vcr g40

                                   where g40.val_clave_formula =  p_val_clave_formula
                                     and ea_k_definicion_pacote_vcr.f_check_cob_valida( p_num_simulacion -1, g40.cod_Cob,'P') >0  --2.21
                                     AND g40.cod_modalidad = p_cod_modalidad -- 2.61
                                     and g40.cod_cob in (select cod_cob
                                                             from cob_apolices
                                                            WHERE cod_cob <> 1301
                                                               OR (cod_cob = 1301 AND
                                                                   NOT EXISTS (SELECT 1
                                                                                 FROM cob_bloqueadas x
                                                                                WHERE x.cod_cob = 281)))
                                group by
                                         g40.cod_cob,
                                         g40.val_clave_formula,
                                         g40.mca_contrata),
          --BUSCA COBERTURAS NO PACOTE E NAO CONTRATADAS NA APOLICE
          cob_adicionais    AS (select
                                     g40.cod_cob,
                                     'A' as tip_cob
                                FROM g2109040_vcr g40

                               where g40.val_clave_formula = p_val_clave_formula
                                     and ea_k_definicion_pacote_vcr.f_check_cob_valida( p_num_simulacion -1, g40.cod_Cob,'A') >0 -- 2.21
                                 AND g40.cod_modalidad = p_cod_modalidad -- 2.61
                                 and   g40.cod_cob not in (select cod_cob from cob_pacote)
                            group by
                                     g40.cod_cob,
                                     g40.val_clave_formula,
                                     g40.mca_contrata),
          --SELECIONA TIPO DE COBERTURAS EXIBIDAS PARA ENDOSSO
          c_cobertura_endosso AS (select
                                         cobs.cod_cob,
                                         '4' as tip_mvto_batch
                                    from
                                         (     select * from cob_pacote
                                         union select * from cob_adicionais
                                         union select * from cob_bloqueadas) cobs
                                  where
                                         cobs.tip_cob = p_tip_lista_cob),
          -- SELECIONA A ORDEM DE VISUALIZACAO DAS COBERUTRAS ADICIONAIS
          -- I 4.94 Alteracao das descricoes das coberturas
          cob_orden AS (select COD_VALOR AS cod_cob, VAL_COLUMNA AS nom_cob, num_secu from g2009017_vcr where cod_cia = p_cod_cia and cod_ramo = p_cod_ramo and nom_columna = 'NOM_COB' ),
          -- SELECIONA COBERTURAS PARAMETRIZADAS NA TABELA DE CONSTANTES PARA NAO SEREM RETORNADAS
          cob_excep AS (select CNC_VRB_VAL AS cod_cob, ROW_NAM AS nom_cob from df_cmn_nwt_xx_vrb_cnc where cmp_val = p_cod_cia and lob_val = p_cod_ramo and vrb_nam = 'COD_COB_EXCEPTION' and row_val_val = 'N')
          -- BUSCA O NOME DAS COBERTURAS CONTRATADAS
           SELECT b.cod_cob,
                  d.nom_cob,
                  DECODE(g_tip_mvto_batch, 7, --c.suma_aseg
                                               (SELECT c.suma_aseg
                                                  FROM c2009040_vcr c
                                                 WHERE b.cod_cob        = c.cod_cob
                                                   AND c.cod_cia        = p_cod_cia
                                                   AND c.cod_ramo       = p_cod_ramo
                                                   AND c.num_cotizacion = p_num_cotizacion
                                                   AND c.num_simulacion = p_num_simulacion),
                                            4, --a.suma_aseg
                                               (SELECT a560.val_campo
                                                  FROM a2000560 a560
                                                 WHERE a560.cod_cia       = p_cod_cia
                                                   AND a560.num_propuesta = p_num_cotizacion
                                                   AND a560.cod_campo     = 'COSUMA_ASEG' || b.cod_cob)) as suma_aseg
             FROM                            a1002150    b
             LEFT OUTER JOIN cob_orden    d ON
                                               b.cod_cob                   = d.cod_cob
            WHERE b.cod_cia        = p_cod_cia
              AND b.cod_ramo       = p_cod_ramo
              AND b.cod_cob     IN (      SELECT cod_cob FROM c_cobertura_cotacao where tip_mvto_batch = g_tip_mvto_batch
                                    union
                                          SELECT cod_cob FROM c_cobertura_endosso where tip_mvto_batch = g_tip_mvto_batch  )
              AND b.cod_cob NOT IN (SELECT cod_cob FROM cod_cob_parser)
              AND b.cod_cob NOT IN (SELECT cod_cob FROM cob_excep     )
           ORDER BY d.num_secu)
         --F 1.84
      LOOP
         -- I 2.14
         l_valida := ea_k_definicion_pacote_vcr.f_valida_pacotes(p_num_simulacion,cob.cod_cob,l_val_clave_formula_tmp);
         --
         IF NOT l_Valida THEN
                l_valida := ea_k_definicion_pacote_vcr.f_valida_pacotes(p_num_simulacion,cob.cod_cob,l_val_clave_formula_tmp,true);
         END IF;
           --F 2.14
         IF l_valida THEN -- 2.14
           --
           l_detalhe_cobertura.cod_cob       := cob.cod_cob;
           --
           mx('cob.cod_cob', cob.cod_cob);
           --
           l_detalhe_cobertura.nom_cob       := cob.nom_cob;
           --
           mx('cob.nom_cob', cob.nom_cob);
           --
           l_detalhe_cobertura.mca_selec_cob := fp_bus_mca_selec_cob(p_cod_cia,
                                                                     p_cod_ramo,
                                                                     p_num_cotizacion,
                                                                     p_num_simulacion,
                                                                     cob.cod_cob);
           -- DEFINE SE A COBERTURA MODIFICA CAPITAL
           SELECT
              mca_mod_suma_aseg
           INTO
              l_detalhe_cobertura.mca_modif_cap
           FROM
              A1002150
           WHERE
              COD_CIA  = p_cod_cia  AND
              COD_RAMO = p_cod_ramo AND
              COD_COB  = cob.cod_cob;
           --
           l_detalhe_cobertura.tab_val_lim_inde := rec_tab_val_lim_inde();
           --
           l_indice                             :=  0;

           --
           -- BUSCA OS LIMITES DE INDENIZACAO DA COBERTURA CALCULADA
           FOR lj IN (WITH lista_cob AS (
                     SELECT  j.cod_cob,
                             j.suma_aseg,
                             j.mca_defecto,
                             j.cod_modalidad -- 2.61
                        FROM g2109040_vcr j
                       WHERE j.cod_cia            = p_cod_cia
                         AND j.val_clave_formula  = l_val_clave_formula_tmp
                         AND j.cod_cob            = cob.cod_cob
                         AND j.mca_baja           = trn.NO
                         AND j.cod_modalidad = p_cod_modalidad -- 2.61
                         AND j.cod_tarifa         = p_cod_tarifa   -- 2.27
                         AND j.fec_validez        = (SELECT MAX(jj.fec_validez)
                                                       FROM g2109040_vcr jj
                                                      WHERE jj.cod_cia            = j.cod_cia

                                                        AND jj.val_clave_formula  = j.val_clave_formula
                                                        AND jj.cod_modalidad      = j.cod_modalidad -- 2.61
                                                        AND jj.cod_cob            = j.cod_cob))
                      SELECT j2.cod_cob,
                             j2.suma_aseg,
                             CASE WHEN j.suma_aseg = j2.suma_aseg THEN trn.SI ELSE  trn.NO END  mca_default
                        FROM g2109040_vcr j
                        join lista_cob j2 on j2.cod_cob=j.cod_cob
                       WHERE j.cod_cia            = p_cod_cia
                         AND j.val_clave_formula  = p_val_clave_formula
                         AND j.cod_cob            = cob.cod_cob
                         AND j.mca_baja           = trn.NO
                         AND j.cod_modalidad      = j2.cod_modalidad -- 2.61
                         AND j.fec_validez        = (SELECT MAX(jj.fec_validez)
                                                       FROM g2109040_vcr jj
                                                      WHERE jj.cod_cia            = j.cod_cia
                                                        AND jj.val_clave_formula  = j.val_clave_formula
                                                        AND jj.cod_cob            = j.cod_cob
                                                        AND jj.cod_modalidad      = j.cod_modalidad) -- 2.61
                       ORDER BY j2.suma_aseg)
           LOOP
              --
              mx('VALOR DO LIMITE DA COBERTURA  ' || cob.cod_cob || ' CONTRATADA', lj.suma_aseg);
              mx('VALOR DO LIMITE DA COBERTURA  ' || cob.cod_cob || ' CONTRATADA', cob.suma_aseg);
              --
              l_indice                         := l_indice + 1;
              --
              l_valor_lim_indeni.cod_campo     := 'SUMA_ASEG_' || TO_CHAR(lj.cod_cob);
              --
              l_valor_lim_indeni.val_campo     := lj.suma_aseg;
            -- I 3.19
            IF fp_ref_devuelve_n('tip_mvto_batch') = ea_k_231_utils.g_k_spto_batch THEN

                ea_k_definicion_pacote_vcr.p_status_contrata(trn.CERO,
                                                             lj.cod_cob,
                                                             l_mca_contrata_cob_pref,
                                                             l_mca_contrata_cob,
                                                             l_mca_pre_contrata,
                                                             l_mca_pre_contrata_pref,
                                                             l_val_sum_aseg_cob,
                                                             l_val_sum_aseg_pref);

                IF l_mca_pre_contrata = trn.SI AND
                   l_mca_contrata_cob = trn.SI AND
                   l_mca_pre_contrata_pref = trn.NO AND
                   NVL(cob.suma_aseg, -1) = -1 AND
                   lj.suma_aseg = l_val_sum_aseg_cob THEN

                  l_valor_lim_indeni.val_campo     := l_val_sum_aseg_cob;
                  l_valor_lim_indeni.mca_val_defec := trn.SI;

                ELSIF (((l_mca_pre_contrata = trn.SI AND
                      l_mca_contrata_cob = trn.NO) OR
                      (l_mca_pre_contrata = trn.NO AND
                      l_mca_contrata_cob = trn.SI)) AND
                      (l_mca_pre_contrata_pref = trn.SI)) AND
                      NVL(cob.suma_aseg, -1) = -1 AND
                      lj.suma_aseg = l_val_sum_aseg_cob THEN

                  l_valor_lim_indeni.val_campo     := l_val_sum_aseg_cob;
                  l_valor_lim_indeni.mca_val_defec := trn.SI;

                ELSIF lj.suma_aseg = cob.suma_aseg THEN
                  --
                  l_valor_lim_indeni.mca_val_defec := trn.SI;
                  --
                ELSE
                  --
                  l_valor_lim_indeni.mca_val_defec := trn.NO;
                  --
                END IF;
              --
            ELSE
              IF lj.suma_aseg = cob.suma_aseg THEN
                 --
                 l_valor_lim_indeni.mca_val_defec := trn.SI;
                 --
              ELSE
                 --
                 l_valor_lim_indeni.mca_val_defec := trn.NO;
                 --
              END IF;
            END IF;
            -- F 3.19
              l_detalhe_cobertura.tab_val_lim_inde.EXTEND(1);
              l_detalhe_cobertura.tab_val_lim_inde(l_detalhe_cobertura.tab_val_lim_inde.LAST) := l_valor_lim_indeni;
              --
           END LOOP;
           --
           IF l_indice = 1 THEN
              --
              IF g_tip_mvto_batch = ea_k_231_utils.g_k_spto_batch
              THEN
                --
                ea_k_231_utils.p_devuelve_dato_cotizacion(p_nom_tabla   => NULL
                                                         ,p_nom_columna => 'COSUMA_ASEG' || cob.cod_cob
                                                         ,p_val_campo   => l_detalhe_cobertura.tab_val_lim_inde(1).val_campo);
                --
              ELSE
                --
                l_detalhe_cobertura.tab_val_lim_inde(1).val_campo     := cob.suma_aseg;
                --
              END IF;
              --
              l_detalhe_cobertura.tab_val_lim_inde(1).mca_val_defec := trn.SI;
              --
           END IF;
           --
           l_detalhe_cobertura.tab_atri_lista := rec_tab_atri_lista();
           --
           l_existe_atrib    := FALSE   ;
           l_mca_selec_atrib := trn.NULO;
           --
           -- VERIFICA NA g2000020 TODOS OS DADOS VARIAVEIS DA COBERTURA QUE POSSUEM LISTA E NAO SAO RELACIONADOS A FRANQUA (VAL_FRANQ)
           FOR dv IN (
                      SELECT g.cod_campo,
                             g.cod_cob,
                             g.nom_pgm_help,
                             g.nom_tabla_valida,
                             g.cod_version,
                             g.num_secu
                        FROM g2000020 g
                       WHERE g.cod_cia          = p_cod_cia
                         AND g.cod_ramo         = p_cod_ramo
                         AND g.cod_cob          = cob.cod_cob
                         AND (   g.nom_pgm_help = g_k_nom_pgm_help_fixo
                              OR g.nom_pgm_help = g_k_nom_pgm_help_dinamico)
                         AND g.cod_campo        NOT LIKE (g_k_ini_val_franq_dv || '%')
                         UNION
                        SELECT
                               DECODE(g_tip_mvto_batch, g_k_tip_mvto_batch_cotacao, 'ACESSORIO',
                                                        g_k_tip_mvto_batch_endosso, 'ACESSORIO') as cod_campo, --jjesus
                               a.cod_cob,
                               g_k_nom_pgm_help_fixo as nom_pgm_help,
                               null                  as nom_tabla_valida,
                               null                  as cod_version,
                               1                     as num_secu
                          FROM a1002150 a
                         WHERE a.cod_cia        = p_cod_cia
                           AND a.cod_ramo       = p_cod_ramo
                           AND a.cod_cob        = cob.cod_cob
                           AND a.MCA_ACCESORIOS = trn.SI
                      ORDER BY num_secu)
           LOOP
              --
              l_detalhe_cobertura.tab_atri_lista.EXTEND(1);
              l_detalhe_cobertura.tab_atri_lista(l_detalhe_cobertura.tab_atri_lista.LAST) := rec_tab_atri_cob();
              --
              IF dv.nom_pgm_help = g_k_nom_pgm_help_fixo THEN
                 --RETORNA LISTA VARIAVEL RELACIONADA AOS DADOS VARIAVEIS DAS COBERTURAS
                 OPEN  c_dados_variaveis_cob
                    FOR  SELECT l.cod_campo AS cod_campo,
                                l.cod_valor AS val_campo,
                                l.nom_valor AS txt_campo,
                                NULL        AS mca_selec
                           FROM g2990006 l
                          WHERE l.cod_cia   = p_cod_cia
                            AND l.cod_ramo  = p_cod_ramo
                            AND l.cod_campo = dv.cod_campo
                          UNION
                         SELECT NOM_COLUMNA  AS cod_campo,
                                VAL_COLUMNA  AS val_campo,
                                NULL         AS txt_campo,
                                NULL         AS mca_selec
                           FROM C2000000
                          WHERE cod_cia        = p_cod_cia
                            AND cod_ramo       = p_cod_ramo
                            AND nom_columna LIKE '%' || dv.cod_campo || '%'
                            AND nom_tabla      = 'A2100610'
                            AND num_cotizacion = p_num_cotizacion
                          UNION
                         SELECT COD_CAMPO  AS cod_campo,
                                VAL_CAMPO  AS val_campo,
                                ''         AS txt_campo,
                                NULL       AS mca_selec
                           FROM A2000560
                          WHERE cod_cia          = p_cod_cia
                            AND num_propuesta    = p_num_cotizacion
                            AND cod_campo     LIKE dv.cod_campo || '%' --v3.25
                            AND cod_campo NOT LIKE '%' || dv.cod_cob
                       ORDER BY cod_campo;
                 --
              ELSE
                 --RETORNA LISTA FIXA RELACIONADA AOS DADOS VARIAVEIS DAS COBERTURAS
                 trn_k_global.asigna('COD_CIA'          , p_cod_cia                                                    );
                 trn_k_global.asigna('COD_RAMO'         , p_cod_ramo                                                   );
                 trn_k_global.asigna('COD_CAMPO'        , dv.cod_campo                                                 );
                 trn_k_global.asigna('DVCOD_CAMPO'      , dv.cod_campo                                                 );
                 trn_k_global.asigna('NUM_RIESGO'       , trn.UNO                                                      );
                 trn_k_global.asigna('DVCOD_MODALIDAD'  , p_cod_modalidad                                              );
                 trn_k_global.asigna('NUM_POLIZA'       , p_num_cotizacion                                             );
                 trn_k_global.asigna('NUM_COTIZACION'   , p_num_cotizacion                                             );
                 trn_k_global.asigna('COD_MON'          , trn_k_global.cod_mon                                         );
                 trn_k_global.asigna('COD_COB'          , dv.cod_cob                                                   );
                 trn_k_global.asigna('COD_NIVEL1'       , DC.cod_nivel1_gen                                            );
                 trn_k_global.asigna('COD_NIVEL2'       , DC.cod_nivel2_gen                                            );
                 trn_k_global.asigna('COD_NIVEL3'       , DC.cod_nivel3_gen                                            );
                 trn_k_global.asigna('COD_CANAL1'       , dc.COD_CANAL1_GEN                                            );
                 trn_k_global.asigna('COD_CANAL2'       , dc.COD_CANAL2_GEN                                            );
                 trn_k_global.asigna('COD_CANAL3'       , dc.COD_CANAL3_GEN                                            );
                 trn_k_global.asigna('COD_AGT'          , g_k_cod_agt_generico                                         );
                 trn_k_global.asigna('FEC_VALIDEZ'      , to_char(trunc(sysdate),'ddmmrrrr')                           );
                 trn_k_global.asigna('DVTIP_SEGMENTO'   , trn_k_df_cmn_nwt_xx_cnn.f_vrb_nam_val('DVTIP_SEGMENTO_DEFEC'));
                 --
                 --mx('COBERTURAS (' || dv.cod_cob || ') - nom_tabla_valida ', dv.nom_tabla_valida);
                 --mx('COBERTURAS (' || dv.cod_cob || ') - dv.cod_version   ', dv.cod_version     );
                 --mx('COBERTURAS (' || dv.cod_cob || ') - dv.cod_campo     ', dv.cod_campo       );
                 --
                 IF dv.nom_tabla_valida = 'X2990006_VCR' THEN em_p_lista_dinamica_dv; END IF;
                 --
                 trn_k_lv.p_query(dv.nom_tabla_valida, dv.cod_version);
                 --
                 l_fila_dados := TYPTAB_DADOS_COT();
                 l_fila_reg   := TYPREG_DADOS_COT.autocreate;
                 --
                 --mx('COBERTURAS CONTRATADAS - LISTA DE VALORES ---- ', '------------------');
                 --
                 LOOP
                    --
                    l_devuelve_fila := trn_k_lv.f_devuelve_fila(NULL);
                    --
                    EXIT WHEN l_devuelve_fila IS NULL;
                    --
                    --mx('l_devuelve_fila', l_devuelve_fila);
                    --
                    l_fila_reg.cod_campo := substr(l_devuelve_fila, 0, INSTR(l_devuelve_fila, '~') - 1) ;
                    l_fila_reg.val_campo := substr(l_devuelve_fila, INSTR(l_devuelve_fila, '~') + 1, INSTR(l_devuelve_fila, '[') - (LENGTH(l_fila_reg.cod_campo) + 2));
                    --
                    --mx('COBERTURAS (' || dv.cod_cob || ') - l_fila_reg.cod_campo  ', l_fila_reg.cod_campo);
                    --mx('COBERTURAS (' || dv.cod_cob || ') - l_fila_reg.val_campo  ', l_fila_reg.val_campo);
                    --mx('------------------------------------------- ', '------------------');
                    --
                    l_fila_dados.EXTEND(1);
                    l_fila_dados(l_fila_dados.LAST) := l_fila_reg;
                    --
                 END LOOP;
                 --
                 OPEN  c_dados_variaveis_cob
                    FOR SELECT dv.cod_campo        AS cod_campo,
                               x0000000.cod_campo  AS val_campo,
                               x0000000.val_campo  AS txt_campo,
                               NULL                AS mca_selec
                          FROM TABLE(CAST(l_fila_dados AS TYPTAB_DADOS_COT)) x0000000;
                 --
              END IF;
              --
              LOOP FETCH c_dados_variaveis_cob INTO ldv;
                 ---
                 EXIT WHEN c_dados_variaveis_cob%NOTFOUND;
                 --
                 l_existe_atrib := TRUE;
                 --
                 l_atributo_cobertura.cod_campo := ldv.cod_campo;
                 --
                 l_atributo_cobertura.val_campo := ldv.val_campo;
                 --
                 l_atributo_cobertura.txt_campo := ldv.txt_campo;
                 --
                 -- VERIFICA SE O ITEM DA LISTA CONSTA COMO SELECIONADO PARA ESTA COTACAO
                 --
                 l_mca_selec := fp_bus_mca_selec_atrib(p_cod_cia,
                                                       p_cod_ramo,
                                                       p_num_cotizacion,
                                                       ldv.cod_campo,
                                                       ldv.val_campo,
                                                       dv.cod_cob,
                                                       p_cod_modalidad);
                 --
                 l_atributo_cobertura.mca_selec := l_mca_selec;
                 --
                 IF dv.nom_tabla_valida         = 'X2990006_VCR'       AND
                    l_detalhe_cobertura.cod_cob = g_k_cod_cob_ass_veic
                 THEN
                   --
                   l_atributo_cobertura.mca_selec := trn.SI;
                   --
                 END IF;
                 --
                 IF l_atributo_cobertura.mca_selec = trn.SI
                 THEN
                   --
                   l_mca_selec_atrib := l_atributo_cobertura.mca_selec;
                   --
                 END IF;
                 --
                 l_detalhe_cobertura.tab_atri_lista(l_detalhe_cobertura.tab_atri_lista.LAST).EXTEND(1);
                 l_detalhe_cobertura.tab_atri_lista(l_detalhe_cobertura.tab_atri_lista.LAST)(l_detalhe_cobertura.tab_atri_lista(l_detalhe_cobertura.tab_atri_lista.LAST).LAST) := l_atributo_cobertura;
                 --
              END LOOP;
              --
           END LOOP;
           --
           IF l_existe_atrib                          AND
              NVL(l_mca_selec_atrib, trn.NO) = trn.NO
           THEN
             --
             l_detalhe_cobertura.mca_selec_cob := trn.NO;
             --
           END IF;
           --
           l_detalhe_cobertura.tab_val_franq := rec_tab_val_franq();
           --
           -- VERIFICA SE COBERTURA POSSUI FRANQUIA EM DADOS VARIAVEIS (VAL_FRANQ) OU NA c2009040_vcr
           IF fp_bus_fran_dv_cob(p_cod_cia,
                                 p_cod_ramo,
                                 cob.cod_cob) = trn.SI
           THEN
              --
              mx('IF fp_bus_fran_dv_cob','trn.SI');
              --
              FOR fdv IN (SELECT g2.cod_campo,
                                 g1.nom_campo,
                          DECODE(g_tip_mvto_batch, g_k_tip_mvto_batch_cotacao, c.val_columna,
                                                   g_k_tip_mvto_batch_endosso, a.val_campo) as val_columna
                            FROM       g2000020 g2
                            INNER JOIN g2000010 g1    ON (g1.cod_cia       = g2.cod_cia
                                                     AND  g1.cod_campo     = g2.cod_campo)
                            LEFT  JOIN c2000000 c     ON (c.cod_cia        = g2.cod_cia
                                                     AND  c.nom_columna    = g2.cod_campo
                                                     AND  c.num_cotizacion = p_num_cotizacion)
                            LEFT  JOIN A2000560 a     ON (a.cod_cia        = g2.cod_cia
                                                     AND  a.cod_campo  LIKE (g2.cod_campo || '%')
                                                     AND  a.num_propuesta  = p_num_cotizacion)
                           WHERE g2.cod_cia       = p_cod_cia
                             AND g2.cod_ramo      = p_cod_ramo
                             AND g2.cod_cob       = cob.cod_cob
                             AND g2.cod_campo     LIKE (g_k_ini_val_franq_dv || '%')
                          ORDER BY g2.num_secu)
              LOOP
                 --
                 mx('--', 'LOOP fdv - 2');
                 --
                 mx('fdv.cod_campo'  , fdv.cod_campo  );
                 mx('fdv.nom_campo'  , fdv.nom_campo  );
                 mx('fdv.val_columna', fdv.val_columna);
                 --
                 l_valor_franquia.cod_campo := fdv.cod_campo;
                 --
                 l_valor_franquia.txt_campo := fdv.nom_campo;
                 --
                 IF l_detalhe_cobertura.mca_selec_cob = trn.SI
                 THEN
                   --
                   l_valor_franquia.val_campo := fdv.val_columna;
                   --
                 ELSE
                   --
                   l_valor_franquia.val_campo := trn.NULO;
                   --
                 END IF;
                 --
                 l_detalhe_cobertura.tab_val_franq.EXTEND(1);
                 l_detalhe_cobertura.tab_val_franq(l_detalhe_cobertura.tab_val_franq.LAST) := l_valor_franquia;
                 --
              END LOOP;
              --
           ELSE
              --
              mx('ELSE fp_bus_fran_dv_cob','trn.NO');
              --
              -- BUSCA O MAIOR NUMERO DO ULTIMO ENDOSSO, EM CASO DE COTACAO DE ENDOSSO
              BEGIN
                 --
                 IF g_tip_mvto_batch = g_k_tip_mvto_batch_endosso THEN
                     --
                     l_num_max_spto := em_f_max_spto(p_cod_cia => p_cod_cia,
                                                     p_num_poliza => p_num_cotizacion,
                                                     p_num_spto => trn.nulo);
                     --
                 END IF;
                 --
              EXCEPTION
                 WHEN OTHERS THEN
                   --
                   l_num_max_spto := trn.cero;
              END;
              --
              FOR tf IN (SELECT  c.cod_cob,
                                 c.val_franquicia_min
                            FROM c2009040_vcr c
                           WHERE c.cod_cia        = p_cod_cia
                             AND c.cod_ramo       = p_cod_ramo
                             AND c.num_cotizacion = p_num_cotizacion
                             AND c.num_simulacion = p_num_simulacion
                             AND c.cod_cob        = cob.cod_cob
                             AND c.val_franquicia_min IS NOT NULL
                          UNION
                          SELECT a.cod_cob,
                                 a.val_franquicia_min
                            FROM a2000040 a
                           WHERE a.cod_cia    = p_cod_cia
                             AND a.cod_ramo   = p_cod_ramo
                             AND a.num_poliza = p_num_cotizacion
                             AND a.num_riesgo = trn.UNO
                             AND a.num_spto   = l_num_max_spto
                             AND a.cod_cob    = cob.cod_cob
                             AND nvl(a.mca_baja_cob, trn.NO) = trn.NO
                             AND a.mca_vigente               = trn.SI
                             AND a.mca_vigente_apli          = trn.SI
                             AND a.val_franquicia_min IS NOT NULL)
              LOOP
                 --
                 l_valor_franquia.cod_campo := g_k_ini_val_franq_dv || '_' || tf.cod_cob;
                 --
                 l_valor_franquia.txt_campo := trn.NULO;
                 --
                 IF l_detalhe_cobertura.mca_selec_cob = trn.SI
                 THEN
                   --
                   l_valor_franquia.val_campo := tf.val_franquicia_min;
                   --
                 ELSE
                   --
                   l_valor_franquia.val_campo := trn.NULO;
                   --
                 END IF;
                 --
                 l_detalhe_cobertura.tab_val_franq.EXTEND(1);
                 l_detalhe_cobertura.tab_val_franq(l_detalhe_cobertura.tab_val_franq.LAST) := l_valor_franquia;
                 --
              END LOOP;
              --
           END IF;
           --
           -- BUSCA O MAIOR NUMERO DO ULTIMO ENDOSSO, EM CASO DE COTACAO DE ENDOSSO
           BEGIN
             --
             IF g_tip_mvto_batch = g_k_tip_mvto_batch_endosso THEN
                 --
                 l_num_max_spto := em_f_max_spto(p_cod_cia => p_cod_cia,
                                                 p_num_poliza => p_num_cotizacion,
                                                 p_num_spto => trn.nulo);
                 --
             END IF;
             --
           EXCEPTION
             WHEN OTHERS THEN
               --
               l_num_max_spto := trn.cero;
           END;
           --
           -- BUSCA VALOR DO PREMIO DA COBERTURA
           l_detalhe_cobertura.val_premio := fp_bus_val_premio_cob(p_cod_cia,
                                                                   p_cod_ramo,
                                                                   p_num_cotizacion,
                                                                   p_num_simulacion,
                                                                   l_num_max_spto,
                                                                   cob.cod_cob);
           --
          --     IF ea_k_definicion_pacote_vcr.f_valida_pacotes(p_num_simulacion,cob.cod_cob,l_val_clave_formula_tmp) THEN -- 2.14
             --
             l_retorno_cob.EXTEND(1);
             l_retorno_cob(l_retorno_cob.LAST) := l_detalhe_cobertura;
           --
         END IF; -- 2.14
           --
        END LOOP;
        --
      END IF; --F 2.14
      --
      RETURN l_retorno_cob;
      --
      mx('F', 'fp_bus_coberturas');
      --
    END fp_bus_coberturas;
    --
   /* ------------------------------------------------------
   || Busca detalhes da cobertura
   */ ------------------------------------------------------
   --
   FUNCTION fp_bus_det_cob_endosso(p_cod_cia            a2000040.cod_cia%TYPE,
                                   p_cod_ramo           a2000040.cod_ramo%TYPE,
                                   p_num_poliza         a2000040.num_poliza%TYPE,
                                   p_num_riesgo         a2000040.num_riesgo%TYPE,
                                   p_cod_cob            a2000040.cod_cob%TYPE,
                                   p_val_clave_formula  a2000560.val_campo%TYPE,
                                   p_fec_validez_tarifa a2000560.val_campo%TYPE,
                                   p_cod_consulta       NUMBER)
     RETURN rec_det_cob IS
     --
     l_detalhe_cobertura  rec_det_cob;
     l_valor_lim_indeni   rec_val_lim_inde;
     l_atributo_cobertura rec_atri_cob;
     l_valor_franquia     rec_val_franq;
     --
     l_indice    NUMBER;
     l_suma_aseg g2109040_vcr.suma_aseg%TYPE;
     --
     l_fec_validez    a1002150.fec_validez%TYPE;
     l_num_max_spto   a2000030.num_spto%TYPE;
     l_cod_tip_vehi   a2100601.cod_tip_vehi%TYPE;
     l_mca_selec_ac   VARCHAR2(1);
     l_imp_accesorio  a2000560.val_campo %TYPE;
     l_desc_accesorio a2000560.val_campo %TYPE;
     l_cod_modalidad a2000560.val_campo %TYPE; -- 2.85
     l_cod_tarifa    a2000560.val_campo %TYPE; -- 2.85
     l_eh_3_pacotes          BOOLEAN; -- 2.85
     l_val_clave_formula_tmp g2109040_vcr.val_clave_formula%TYPE; -- 2.85
     l_valida                BOOLEAN; ---- 2.85
     --
   BEGIN
     --
     mx('I', 'fp_bus_det_cob_endosso');
     --
     l_cod_tip_vehi   := fp_devuelve_val_coti('COD_TIP_VEHI');
     l_cod_modalidad   := fp_devuelve_val_coti('COD_MODALIDAD'); -- 2.85
     l_cod_tarifa      := fp_devuelve_val_coti('COD_TARIFA'); -- 2.85
     --
     mx('l_cod_tip_vehi' , l_cod_tip_vehi);
     mx('l_cod_modalidad', l_cod_modalidad); -- 2.85
     mx('l_cod_tarifa'   , l_cod_tarifa); -- 2.85
     --
     l_eh_3_pacotes := NVL(fp_devuelve_n('tres_pacotes'), 0) > 0; --2.85
     --
     l_detalhe_cobertura.cod_cob       := p_cod_cob;
     mx('cod_cob', l_detalhe_cobertura.cod_cob);
     --
     mx('p_cod_consulta', p_cod_consulta);
     IF p_cod_consulta = g_k_cod_cons_cob_contrada THEN
       --
       l_detalhe_cobertura.mca_selec_cob := trn.SI;
       --
     ELSIF p_cod_consulta = g_k_cod_cons_cob_adicional OR
           p_cod_consulta = g_k_cod_cons_cob_bloqueada THEN
       --
       l_detalhe_cobertura.mca_selec_cob := trn.NO;
       --
     END IF;
     --
     -- I 2.85
     l_valida := ea_k_definicion_pacote_vcr.f_valida_pacotes(trn.UNO, p_cod_cob, l_val_clave_formula_tmp);
     --
     IF NOT l_Valida THEN
       l_valida := ea_k_definicion_pacote_vcr.f_valida_pacotes(trn.UNO, p_cod_cob, l_val_clave_formula_tmp, true);
     END IF;
     -- F 2.85
     --
     BEGIN
       --
       l_fec_validez := em_k_a1002150.f_max_fec_validez(p_cod_cia     => p_cod_cia,
                                                        p_cod_ramo    => p_cod_ramo,
                                                        p_fec_validez => trunc(sysdate));
       --
       em_k_a1002150.p_lee(p_cod_cia       => p_cod_cia,
                           p_cod_ramo      => p_cod_ramo,
                           p_cod_modalidad => EM.cod_modalidad_gen,
                           p_cod_cob       => p_cod_cob,
                           p_fec_validez   => l_fec_validez);
       --
       l_detalhe_cobertura.mca_modif_cap := em_k_a1002150.f_mca_mod_suma_aseg;
       l_detalhe_cobertura.nom_cob       := em_k_a1002150.f_nom_cob;
       --
     EXCEPTION
       WHEN OTHERS THEN
         --
         l_detalhe_cobertura.mca_modif_cap := trn.no;
         --
     END;
     --
     l_detalhe_cobertura.tab_val_lim_inde := rec_tab_val_lim_inde();
     --
     l_indice := trn.CERO;
     --
     IF p_cod_consulta = g_k_cod_cons_cob_contrada OR p_cod_consulta = g_k_cod_cons_cob_adicional THEN
       --
       mx('-', 'BUSCA LIMITES DE INDENIZACAO DA COBERTURA');
       -- BUSCA OS LIMITES DE INDENIZACAO DA COBERTURA

       IF NOT l_eh_3_pacotes THEN -- 2.85
         FOR lj IN (SELECT j.cod_cob,
                           j.suma_aseg,
                           j.mca_defecto
                      FROM g2109040_vcr j
                     WHERE j.cod_cia = p_cod_cia
                       AND j.val_clave_formula = p_val_clave_formula
                       AND j.cod_cob = p_cod_cob
                       AND j.mca_baja = trn.NO
                       AND j.fec_validez = (SELECT MAX(jj.fec_validez)
                                              FROM g2109040_vcr jj
                                             WHERE jj.cod_cia = j.cod_cia
                                               AND jj.val_clave_formula = j.val_clave_formula
                                               AND jj.cod_cob = j.cod_cob
                                               AND jj.fec_validez <= to_date(p_fec_validez_tarifa, 'ddmmyyyy')))

          LOOP
           --
           mx('VALOR DO LIMITE DA COBERTURA  ' || p_cod_cob, lj.suma_aseg);
           --
           l_indice    := l_indice + trn.UNO;
           l_suma_aseg := lj.suma_aseg;
           --
           l_valor_lim_indeni.cod_campo := 'SUMA_ASEG_' || TO_CHAR(lj.cod_cob);
           --
           IF lj.cod_cob = g_k_cod_cob_blindagem THEN
             --
             l_valor_lim_indeni.val_campo := NVL(fp_devuelve_val_coti('COSUMA_ASEG' || TO_CHAR(lj.cod_cob)), lj.suma_aseg);
             --
             IF l_valor_lim_indeni.val_campo <> trn.CERO THEN
               --
               l_detalhe_cobertura.mca_selec_cob := trn.SI;
               --
             END IF;
             --
           ELSE
             --
             l_valor_lim_indeni.val_campo := lj.suma_aseg;
             --
           END IF;
           --
           IF p_cod_consulta = g_k_cod_cons_cob_contrada THEN
             --
             IF trn_k_df_cmn_nwt_xx_vrb_cnc.f_row_val_exist(p_vrb_nam => 'COD_COB_CASCO',
                                                            p_cnc_vrb_val => lj.cod_cob) THEN
               --
               l_valor_lim_indeni.mca_val_defec := NVL(fp_bus_mca_defecto_end_casco(p_cod_cia,
                                                                                    p_cod_ramo,
                                                                                    p_num_poliza,
                                                                                    p_num_riesgo,
                                                                                    lj.cod_cob),
                        trn.NO);
               --
             ELSE
               --
               l_valor_lim_indeni.mca_val_defec := NVL(fp_bus_mca_defecto_endosso(p_cod_cia,
                                                                                  p_cod_ramo,
                                                                                  p_num_poliza,
                                                                                  p_num_riesgo,
                                                                                  lj.suma_aseg,
                                                                                  lj.cod_cob),
                                                                                  trn.NO);
               --
             END IF;
             --
           ELSE
             --
             l_valor_lim_indeni.mca_val_defec := lj.mca_defecto;
             --
           END IF;
           --
           l_detalhe_cobertura.tab_val_lim_inde.EXTEND(1);
           l_detalhe_cobertura.tab_val_lim_inde(l_detalhe_cobertura.tab_val_lim_inde.LAST) := l_valor_lim_indeni;
           --
         END LOOP;
         --
       ELSE --I 2.85
         --
         FOR lj IN (WITH lista_cob AS
                       (SELECT j.cod_cob,
                              j.suma_aseg,
                              j.mca_defecto,
                              j.cod_modalidad
                         FROM g2109040_vcr j
                        WHERE j.cod_cia           = p_cod_cia
                          AND j.val_clave_formula = l_val_clave_formula_tmp
                          AND j.cod_cob           = p_cod_cob
                          AND j.mca_baja          = trn.NO
                          AND j.cod_modalidad     = l_cod_modalidad
                          AND j.cod_tarifa        = l_cod_tarifa
                          AND j.fec_validez       = (SELECT MAX(jj.fec_validez)
                                                       FROM g2109040_vcr jj
                                                      WHERE jj.cod_cia = j.cod_cia
                                                        AND jj.val_clave_formula =j.val_clave_formula
                                                        AND jj.cod_modalidad = j.cod_modalidad -- 2.61
                                                        AND jj.cod_cob = j.cod_cob
                                                        AND jj.cod_tarifa = j.cod_tarifa
                                                        AND jj.MCA_BAJA = j.MCA_BAJA)) -- 2.85
                      SELECT j2.cod_cob,
                             j2.suma_aseg,
                             CASE WHEN j.suma_aseg = j2.suma_aseg THEN trn.SI ELSE trn.NO END mca_defecto
                        FROM g2109040_vcr j
                        join lista_cob j2 on j2.cod_cob = j.cod_cob
                       WHERE j.cod_cia = p_cod_cia
                         AND j.val_clave_formula = p_val_clave_formula
                         AND j.cod_cob = p_cod_cob
                         AND j.mca_baja = trn.NO
                         AND j.cod_modalidad = j2.cod_modalidad
                         AND j.fec_validez = (SELECT MAX(jj.fec_validez)
                                FROM g2109040_vcr jj
                               WHERE jj.cod_cia = j.cod_cia
                                 AND jj.val_clave_formula = j.val_clave_formula
                                 AND jj.cod_cob = j.cod_cob
                                 AND jj.cod_modalidad = j.cod_modalidad
                                 AND jj.cod_tarifa = j.cod_tarifa
                                 AND jj.MCA_BAJA = j.MCA_BAJA) -- 2.85
                       ORDER BY j2.suma_aseg)

          LOOP
           --
           mx('VALOR DO LIMITE DA COBERTURA  ' || p_cod_cob, lj.suma_aseg);
           --
           l_indice    := l_indice + trn.UNO;
           l_suma_aseg := lj.suma_aseg;
           --
           l_valor_lim_indeni.cod_campo := 'SUMA_ASEG_' || TO_CHAR(lj.cod_cob);
           --
           IF lj.cod_cob = g_k_cod_cob_blindagem THEN
             --
             l_valor_lim_indeni.val_campo := NVL(fp_devuelve_val_coti('COSUMA_ASEG' || TO_CHAR(lj.cod_cob)), lj.suma_aseg);
             --
             IF l_valor_lim_indeni.val_campo <> trn.CERO THEN
               --
               l_detalhe_cobertura.mca_selec_cob := trn.SI;
               --
             END IF;
             --
           ELSE
             --
             l_valor_lim_indeni.val_campo := lj.suma_aseg;
             --
           END IF;
           --
           IF p_cod_consulta = g_k_cod_cons_cob_contrada THEN
             --
             IF trn_k_df_cmn_nwt_xx_vrb_cnc.f_row_val_exist(p_vrb_nam => 'COD_COB_CASCO',
                                                            p_cnc_vrb_val => lj.cod_cob) THEN
               --
               l_valor_lim_indeni.mca_val_defec := NVL(fp_bus_mca_defecto_end_casco(p_cod_cia,
                                                                                    p_cod_ramo,
                                                                                    p_num_poliza,
                                                                                    p_num_riesgo,
                                                                                    lj.cod_cob),
                                                                                    trn.NO);
               --
             ELSE
               --
               l_valor_lim_indeni.mca_val_defec := NVL(fp_bus_mca_defecto_endosso(p_cod_cia,
                                                                                  p_cod_ramo,
                                                                                  p_num_poliza,
                                                                                  p_num_riesgo,
                                                                                  lj.suma_aseg,
                                                                                  lj.cod_cob),
                                                                                  trn.NO);
               --
             END IF;
             --
           ELSE
             --
             l_valor_lim_indeni.mca_val_defec := lj.mca_defecto;
             --
           END IF;
           --
           l_detalhe_cobertura.tab_val_lim_inde.EXTEND(1);
           l_detalhe_cobertura.tab_val_lim_inde(l_detalhe_cobertura.tab_val_lim_inde.LAST) := l_valor_lim_indeni;
           --
         END LOOP;
       END IF; -- F 2.85
       --
       IF l_indice = trn.UNO THEN
          --
          l_detalhe_cobertura.tab_val_lim_inde(1).val_campo := NVL(fp_devuelve_val_coti(g_k_prefixo_cobertura || g_k_prefixo_suma_aseg || p_cod_cob), l_suma_aseg);
          --
          l_detalhe_cobertura.tab_val_lim_inde(1).mca_val_defec := trn.SI;
          --
       END IF;
       --
     ELSIF p_cod_consulta = g_k_cod_cons_cob_bloqueada THEN
       --
       l_detalhe_cobertura.tab_val_lim_inde.EXTEND(1);
       l_detalhe_cobertura.tab_val_lim_inde(1).cod_campo     := 'SUMA_ASEG_' || TO_CHAR(p_cod_cob);
       l_detalhe_cobertura.tab_val_lim_inde(1).val_campo     := trn.CERO;
       l_detalhe_cobertura.tab_val_lim_inde(1).mca_val_defec := trn.SI;
       --
     END IF;
     --
     l_detalhe_cobertura.tab_atri_lista := rec_tab_atri_lista();
     --
     mx('-', 'VERIFICA NA g2000020 OS DV COBERTURA');
     mx('p_cod_cob', p_cod_cob);
     -- VERIFICA NA g2000020 TODOS OS DADOS VARIAVEIS DA COBERTURA QUE POSSUEM LISTA E NAO SAO RELACIONADOS A FRANQUA (VAL_FRANQ)
     FOR dv IN (SELECT g.cod_campo,
                       g.cod_cob
                  FROM g2000020 g
                 WHERE g.cod_cia       = p_cod_cia
                   AND g.cod_ramo      = p_cod_ramo
                   AND g.cod_cob       = p_cod_cob
                   AND (g.nom_pgm_help = g_k_nom_pgm_help_fixo
                    OR  g.nom_tabla_valida IN (g_k_nom_tabla_valida, g_k_tabla_valida))
                   AND g.cod_campo NOT LIKE (g_k_ini_val_franq_dv || '%')
                ORDER BY g.num_secu)
     LOOP
        --
        l_detalhe_cobertura.tab_atri_lista.EXTEND(1);
        l_detalhe_cobertura.tab_atri_lista(l_detalhe_cobertura.tab_atri_lista.LAST) := rec_tab_atri_cob();
        --
        mx('-', 'RETORNA LISTA DOS DV COBERTURA');
        -- RETORNA LISTA FIXA RELACIONADA AO DADO VARIAVEL DA COBERTURA
        mx('dv.cod_campo', dv.cod_campo);
        mx('dv.cod_cob'  , dv.cod_cob  );
        FOR ldv IN (SELECT l.cod_campo,
                           l.cod_valor,
                           l.nom_valor
                      FROM g2990006 l
                     WHERE l.cod_cia   = p_cod_cia
                       AND l.cod_ramo  = p_cod_ramo
                       AND l.cod_campo = dv.cod_campo
                       AND l.cod_campo NOT LIKE (g_k_tip_cob_vidros)
                    UNION
                    SELECT l.cod_campo,
                           l.cod_valor,
                           l.nom_valor
                      FROM g2990006 l
                     WHERE l.cod_cia   = p_cod_cia
                       AND l.cod_ramo  = p_cod_ramo
                       AND l.cod_campo = dv.cod_campo
                       AND l.cod_campo = g_k_tip_cob_vidros
                       AND l.cod_valor IN (SELECT cod_tip_vidro
                                             FROM (SELECT regexp_substr('1,2,3,4', '[^,]+', 1, LEVEL) AS cod_tip_vidro,
                                                          regexp_substr('N,N,S,N', '[^,]+', 1, LEVEL) AS mca_blindado
                                                     FROM dual
                                                  CONNECT BY LEVEL <= 4)
                                            WHERE mca_blindado = NVL((SELECT val_campo
                                                                        FROM a2000560
                                                                       WHERE cod_cia       = p_cod_cia
                                                                         AND num_propuesta = p_num_poliza
                                                                         AND cod_campo     = 'MCA_BLINDAGEM'), trn.NO))
                  ORDER BY cod_valor)
        LOOP
           --
           l_atributo_cobertura.cod_campo := ldv.cod_campo;
           --
           l_atributo_cobertura.val_campo := ldv.cod_valor;
           --
           l_atributo_cobertura.txt_campo := ldv.nom_valor;
           --
           mx('cod_campo', l_atributo_cobertura.cod_campo);
           mx('val_campo', l_atributo_cobertura.val_campo);
           mx('txt_campo', l_atributo_cobertura.txt_campo);
           -- VERIFICA SE O ITEM DA LISTA CONSTA COMO SELECIONADO PARA ESTA COTACAO
           l_atributo_cobertura.mca_selec := fp_bus_mca_selec(p_cod_cia,
                                                              p_cod_ramo,
                                                              p_num_poliza,
                                                              ldv.cod_campo,
                                                              ldv.cod_valor,
                                                              dv.cod_cob,
                                                              null);
           --
           mx('mca_selec', l_atributo_cobertura.mca_selec);
           l_detalhe_cobertura.tab_atri_lista(l_detalhe_cobertura.tab_atri_lista.LAST).EXTEND(1);
           l_detalhe_cobertura.tab_atri_lista(l_detalhe_cobertura.tab_atri_lista.LAST)(l_detalhe_cobertura.tab_atri_lista(l_detalhe_cobertura.tab_atri_lista.LAST).LAST) := l_atributo_cobertura;
           --
        END LOOP;
        --
     END LOOP;
     --
     -- VERIFICA A LISTA REFERENTE A COBERTURA DE ACESSORIOS
     mx('-', 'VERIFICA LISTA REF A COBERTURA ACESSORIOS');
     --
     FOR dv IN (SELECT 'ACESSORIO' cod_campo,
                       a.cod_cob
                  FROM a1002150 a
                 WHERE a.cod_cia        = p_cod_cia
                   AND a.cod_ramo       = p_cod_ramo
                   AND a.cod_cob        = p_cod_cob
                   AND a.mca_accesorios = trn.SI)
     LOOP
       --
       l_detalhe_cobertura.tab_atri_lista.EXTEND(1);
       l_detalhe_cobertura.tab_atri_lista(l_detalhe_cobertura.tab_atri_lista.LAST) := rec_tab_atri_cob();
       --
       -- RETORNA LISTA DE ACESSORIOS PARA O TIPO DE VEICULO
       FOR ac IN (SELECT a.cod_accesorio, b.nom_accesorio
                    FROM a2100601 a,
                         a2100600 b
                   WHERE a.cod_cia             = p_cod_cia
                     AND a.cod_tip_vehi        = l_cod_tip_vehi
                     AND b.cod_accesorio       = a.cod_accesorio
                     AND b.cod_tip_accesorio   = trn.UNO
                     AND b.cod_agrup_accesorio = trn.UNO
                     AND b.cod_cia             = a.cod_cia
                     AND a.fec_validez         = (SELECT MAX(c.fec_validez) FROM a2100601 c
                                                   WHERE c.cod_tip_vehi  = a.cod_tip_vehi
                                                     AND c.cod_accesorio = a.cod_accesorio
                                                     AND c.cod_cia       = a.cod_cia))
       LOOP
         --
         mx('-', 'RETORNA LISTA DE ACESSORIOS TIPO DE VEICULO');
         -- VERIFICA SE O ITEM DA LISTA CONSTA COMO SELECIONADO E COM VALOR PARA ESTA COTACAO
         l_atributo_cobertura.cod_campo := 'ACESSORIO#'||ac.cod_accesorio;
         --
         pp_busca_dados_accesorio(p_num_poliza    ,
                                  ac.cod_accesorio,
                                  l_mca_selec_ac  ,
                                  l_imp_accesorio );
         --
         l_atributo_cobertura.val_campo := NVL(l_imp_accesorio,0);
         --
         l_atributo_cobertura.txt_campo := ac.nom_accesorio;
         --
         l_atributo_cobertura.mca_selec := NVL(l_mca_selec_ac,'N');
         --
         mx('cod_campo', l_atributo_cobertura.cod_campo);
         mx('val_campo', l_atributo_cobertura.val_campo);
         mx('txt_campo', l_atributo_cobertura.txt_campo);
         mx('mca_selec', l_atributo_cobertura.mca_selec);
         --
         l_detalhe_cobertura.tab_atri_lista(l_detalhe_cobertura.tab_atri_lista.LAST).EXTEND(1);
         l_detalhe_cobertura.tab_atri_lista(l_detalhe_cobertura.tab_atri_lista.LAST)(l_detalhe_cobertura.tab_atri_lista(l_detalhe_cobertura.tab_atri_lista.LAST).LAST) := l_atributo_cobertura;
         --
       END LOOP;
       --
       mx('BUSCA LISTA DE VALORES PARA O CAMPO  ' || dv.cod_campo  || ' DA COBERTURA', p_cod_cob);
       --
     END LOOP;
     --
     l_detalhe_cobertura.tab_val_franq := rec_tab_val_franq();
     --
     l_detalhe_cobertura.val_premio    := trn.NULO;
     --
     IF p_cod_consulta = g_k_cod_cons_cob_contrada OR p_cod_consulta = g_k_cod_cons_cob_bloqueada THEN
       --
       -- VERIFICA SE COBERTURA POSSUI FRANQUIA EM DADOS VARIAVEIS (VAL_FRANQ)
       IF fp_bus_fran_dv(p_cod_cia,
                         p_cod_ramo,
                         p_cod_cob) = trn.SI
       THEN
          --
          FOR fdv IN (WITH c_val_franq AS
                       (SELECT g2.cod_campo, g2.nom_campo
                          FROM g2000020 g1, g2000010 g2
                         WHERE g1.cod_cia = p_cod_cia
                           AND g1.cod_ramo = p_cod_ramo
                           AND g1.cod_cob = p_cod_cob
                           AND g1.cod_campo LIKE (g_k_ini_val_franq_dv || '%')
                           AND g2.cod_cia = g1.cod_cia
                           AND g2.cod_campo = g1.cod_campo)
                      SELECT b.cod_campo, b.nom_campo, a.val_campo
                        FROM a2000560 a, c_val_franq b
                       WHERE a.cod_cia = p_cod_cia
                         AND a.num_propuesta = p_num_poliza
                         AND a.cod_campo LIKE (b.cod_campo || '%'))
          LOOP
             --
             l_valor_franquia.cod_campo := fdv.cod_campo;
             --
             l_valor_franquia.txt_campo := fdv.nom_campo;
             --
             l_valor_franquia.val_campo := fdv.val_campo;
             --
             l_detalhe_cobertura.tab_val_franq.EXTEND(1);
             l_detalhe_cobertura.tab_val_franq(l_detalhe_cobertura.tab_val_franq.LAST) := l_valor_franquia;
             --
          END LOOP;
          --
       ELSE
          --
          FOR tf IN (SELECT a.cod_cob,
                            a.val_franquicia_min
                       FROM a2000040 a
                      WHERE a.cod_cia    = p_cod_cia
                        AND a.cod_ramo   = p_cod_ramo
                        AND a.num_poliza = p_num_poliza
                        AND a.num_riesgo = p_num_riesgo
                        AND a.cod_cob    = p_cod_cob
                        AND nvl(a.mca_baja_cob, trn.NO) = trn.NO
                        AND a.mca_vigente               = trn.SI
                        AND a.mca_vigente_apli          = trn.SI
                        AND a.val_franquicia_min IS NOT NULL)
          LOOP
             --
             l_valor_franquia.cod_campo := g_k_ini_val_franq_dv || '_' || tf.cod_cob;
             --
             l_valor_franquia.txt_campo := trn.NULO;
             --
             l_valor_franquia.val_campo := tf.val_franquicia_min;
             --
             l_detalhe_cobertura.tab_val_franq.EXTEND(1);
             l_detalhe_cobertura.tab_val_franq(l_detalhe_cobertura.tab_val_franq.LAST) := l_valor_franquia;
             --
          END LOOP;
          --
       END IF;
       --
       -- BUSCA VALOR DO PREMIO DA COBERTURA
       --
       BEGIN
         --
         l_num_max_spto := em_f_max_spto(p_cod_cia => p_cod_cia,
                                         p_num_poliza => p_num_poliza,
                                         p_num_spto => trn.nulo);
         --
       EXCEPTION
         WHEN OTHERS THEN
           --
           l_num_max_spto := trn.cero;
           --
       END;
       --
       l_detalhe_cobertura.val_premio := fp_bus_val_premio_cob_endosso(p_cod_cia,
                                                                       p_cod_ramo,
                                                                       p_num_poliza,
                                                                       l_num_max_spto,
                                                                       trn.uno,
                                                                       p_cod_cob);
       --
     END IF;
     --
     --
     mx('F', 'fp_bus_det_cob_endosso');
     --
     RETURN l_detalhe_cobertura;
     --
   END fp_bus_det_cob_endosso;
   --
   /* --------------------------------------------------------
   || fp_devuelve_campo_coti :
   */ --------------------------------------------------------
   --
   FUNCTION fp_devuelve_campo_coti(p_cod_campo_coti g9999992.cod_campo_coti%TYPE)
            RETURN VARCHAR2 IS
   --
   CURSOR c_g9999992 IS
     SELECT cod_campo
       FROM g9999992
      WHERE cod_cia        = trn_k_global.cod_cia
        AND cod_ramo      IN (ea_k_231_utils.g_k_ramo_motor, em.COD_RAMO_GEN)
        AND tip_mvto_batch = ea_k_231_utils.g_k_spto_batch
        AND cod_campo_coti = p_cod_campo_coti
      ORDER BY cod_ramo;
   --
   reg_g9999992 c_g9999992%ROWTYPE;
   --
   BEGIN
      --
      OPEN c_g9999992;
      --
      FETCH c_g9999992 INTO reg_g9999992;
      --
      CLOSE c_g9999992;
      --
      RETURN reg_g9999992.cod_campo;
      --
   END fp_devuelve_campo_coti;
   --
   /* ------------------------------------------------------
   || fp_devuelve_mca_prorrata
   */ ------------------------------------------------------
   FUNCTION fp_devuelve_mca_prorrata(p_cod_cia      a2000030.cod_cia%TYPE,
                                     p_cod_spto     a2000030.cod_spto%TYPE,
                                     p_sub_cod_spto a2000030.sub_cod_spto%TYPE)
      RETURN a2991800.mca_prorrata%TYPE
   IS
      --
      l_mca_prorrata a2991800.mca_prorrata%TYPE;
      --
   BEGIN
      --
      mx('I', 'fp_devuelve_mca_prorrata');
      --
      BEGIN
         --
         em_k_a2991800.p_lee_tip_ambito(p_cod_cia,
                                        p_cod_spto,
                                        p_sub_cod_spto,
                                        em.TIP_EMISION_SPTO);
         --
         l_mca_prorrata := em_k_a2991800.f_mca_prorrata;
         --
      EXCEPTION
         WHEN OTHERS THEN
            --
            mx('--', 'fp_devuelve_mca_prorrata - EXCEPTION');
            --
            l_mca_prorrata := trn.NULO;
            --
      END;
      --
      RETURN l_mca_prorrata;
      --
      mx('F', 'fp_devuelve_mca_prorrata');
      --
   END fp_devuelve_mca_prorrata;
   --
   /* ------------------------------------------------------
   || pp_ajusta_parc_pluri
   */ ------------------------------------------------------
   PROCEDURE pp_ajusta_parc_pluri (p_fec_efec_poliza      a2000030.fec_efec_poliza    %TYPE,
                                   p_fec_vcto_poliza      a2000030.fec_vcto_poliza    %TYPE)
   IS
   --
   l_num_simulacion     c2990700.num_simulacion    %TYPE;
   l_fator_prazo_curto  NUMBER                     :=  0;
   --
   l_num_cotizaciontmp  c2000000.num_cotizacion%TYPE      ; --2.14
   l_eh_3_pacotes       BOOLEAN; -- 2.14
   l_tip_produto     g2109142_vcr.tip_produto       %TYPE ; --2.17
   l_cod_agt         g2109142_vcr.cod_agt           %TYPE ; --2.17
   --
   BEGIN
     --
     mx('I','pp_ajusta_parc_pluri');
     --
     IF NVL(trn_k_global.ref_f_global('MCA_POLIZA_GRUPO'),'N') = 'S' or NVL(trn_k_global.ref_f_global('COD_SERVICIO'),-1) = g_k_cod_srv_flotas THEN
       --
       l_eh_3_pacotes := FALSE;
       --
     ELSE
       --
       l_tip_produto := ea_k_231_utils.f_valor_dv('tip_produto'); --2.17
       l_cod_agt     := trn_k_global.devuelve( 'COD_AGT' );-- 2.17
       --
       l_eh_3_pacotes := NVL(fp_devuelve_n('tres_pacotes'), 0) > 0; -- 3.47
      --
     END IF;
     l_num_simulacion    := fp_ref_devuelve_n('NUM_SIMULACION'  );
     --
     l_fator_prazo_curto := p_fec_vcto_poliza - p_fec_efec_poliza;
     --
     IF l_eh_3_pacotes THEN -- 2.14
       --
       ea_k_231_utils.p_devuelve_dato_cotizacion(ea_k_231_coti.g_k_tabla_simulacion,
                                                 'NUM_SIMULACION#'||g_num_simulacion,
                                                 l_num_cotizaciontmp); -- 2.14
       --
     ELSE -- 2.14
       --
       l_num_cotizaciontmp := g_num_cotizacion ; -- 2.14
       --
     END IF; -- 2.14
     --
     UPDATE c2990700
        SET
        imp_recibo = round(imp_recibo /365 * l_fator_prazo_curto,2)
       ,imp_neta   = round(imp_neta   /365 * l_fator_prazo_curto,2)
       ,imp_imptos = round(imp_imptos /365 * l_fator_prazo_curto,2)
     WHERE cod_cia        = g_cod_cia
       AND cod_ramo       = g_cod_ramo
       AND num_cotizacion = l_num_cotizaciontmp --2.14
       AND num_simulacion = l_num_simulacion
       AND cod_fracc_pago = g_k_anual
       AND num_cuota      = trn.UNO;
       --
       mx('F','pp_ajusta_parc_pluri');
       --
   END pp_ajusta_parc_pluri;
   --
   /* ------------------------------------------------------
   || pp_cuotas_cotizacion
   */ ------------------------------------------------------
   PROCEDURE pp_cuotas_cotizacion
   IS
   --
   l_imp_recibo         c2990700.imp_recibo        %TYPE;
   l_imp_neta           c2990700.imp_neta          %TYPE;
   l_imp_recargo        c2990700.imp_recargo       %TYPE;
   l_imp_boni           c2990700.imp_boni          %TYPE;
   l_imp_imptos         c2990700.imp_imptos        %TYPE;
   l_imp_interes        c2990700.imp_interes       %TYPE;
   l_imp_imptos_interes c2990700.imp_imptos_interes%TYPE;
   --
   l_num_simulacion     c2990700.num_simulacion    %TYPE;
   l_fec_efec_poliza    a2000030.fec_efec_poliza   %TYPE;
   l_fec_vcto_poliza    a2000030.fec_efec_poliza   %TYPE;
   --
   l_mca_poliza_grupo   c2000020.val_campo         %TYPE;
   --
   l_eh_3_pacotes       BOOLEAN ; --2.14
   l_num_cotizaciontmp  c2000000.num_cotizacion%TYPE ; --2.14
   l_tip_produto     g2109142_vcr.tip_produto       %TYPE ; --2.17
   l_cod_agt         g2109142_vcr.cod_agt           %TYPE ; --2.17
   --
   BEGIN
      --
      mx('I', 'pp_cuotas_cotizacion');
      --
      l_num_simulacion   := NVL(fp_ref_devuelve_n('NUM_SIMULACION'), trn.UNO);
      l_fec_efec_poliza  := fp_ref_devuelve_f('FEC_EFEC_POLIZA' );
      l_mca_poliza_grupo := fp_ref_devuelve_c('MCA_POLIZA_GRUPO');
      l_fec_vcto_poliza  := fp_ref_devuelve_f('FEC_VCTO_POLIZA' );
      --
      IF NVL(trn_k_global.ref_f_global('MCA_POLIZA_GRUPO'),'N') = 'S' or NVL(trn_k_global.ref_f_global('COD_SERVICIO'),-1) = g_k_cod_srv_flotas THEN
        --
        l_eh_3_pacotes := FALSE;
        --
      ELSE
        --
        l_tip_produto := ea_k_231_utils.f_valor_dv('tip_produto'); --2.17
        l_cod_agt     := trn_k_global.devuelve( 'COD_AGT' );-- 2.17
        l_eh_3_pacotes := NVL(fp_devuelve_n('tres_pacotes'), 0) > 0; -- 3.47
      --
      END IF;
    -- {1.87
      /*pp_ajusta_parc_pluri(p_fec_efec_poliza => l_fec_efec_poliza,
                           p_fec_vcto_poliza => l_fec_vcto_poliza);*/
      -- }1.87
      --
      IF l_eh_3_pacotes THEN -- 2.14
      --
        ea_k_231_utils.p_devuelve_dato_cotizacion(ea_k_231_coti.g_k_tabla_simulacion,
                                                  'NUM_SIMULACION#'||l_num_simulacion,
                                                   l_num_cotizaciontmp);
      --
    ELSE
      -- 2.14
      IF NVL(trn_k_global.ref_f_global('MCA_RENOVACION'), trn.NO ) = trn.SI
      THEN
        --
        g_cod_cia        := fp_ref_devuelve_n('cod_cia');
        g_cod_ramo       := fp_ref_devuelve_n('cod_ramo');
        g_num_cotizacion := fp_ref_devuelve_c('num_cotizacion');
        --
      END IF;
      --
        l_num_cotizaciontmp := g_num_cotizacion ; --2.14
        --
      END IF; -- 2.14
      --
      --
      em_k_c2990700.p_lee(p_cod_cia        => g_cod_cia
                         ,p_cod_ramo       => g_cod_ramo
                         ,p_num_cotizacion => l_num_cotizaciontmp -- 2.14
                         ,p_num_simulacion => l_num_simulacion
                         ,p_cod_fracc_pago => g_k_anual
                         ,p_num_cuota      => trn.UNO);
      --
      l_imp_recibo         := em_k_c2990700.f_imp_recibo        ;
      l_imp_neta           := em_k_c2990700.f_imp_neta          ;
      l_imp_recargo        := em_k_c2990700.f_imp_recargo       ;
      l_imp_imptos         := em_k_c2990700.f_imp_imptos        ;
      l_imp_boni           := em_k_c2990700.f_imp_boni          ;
      l_imp_interes        := em_k_c2990700.f_imp_interes       ;
      l_imp_imptos_interes := em_k_c2990700.f_imp_imptos_interes;
      --
      em_p_cuotas_cotizacion(p_cod_cia            => g_cod_cia
                            ,p_cod_ramo           => g_cod_ramo
                            ,p_num_poliza         => g_num_cotizacion
                            ,p_num_simulacion     => l_num_simulacion
                            ,p_fec_efec_poliza    => l_fec_efec_poliza
                            ,p_fec_vcto_poliza    => l_fec_vcto_poliza
                            ,p_imp_recibo         => l_imp_recibo
                            ,p_imp_neta           => l_imp_neta
                            ,p_imp_recargo        => l_imp_recargo
                            ,p_imp_imptos         => l_imp_imptos
                            ,p_imp_boni           => l_imp_boni
                            ,p_imp_interes        => l_imp_interes
                            ,p_imp_imptos_interes => l_imp_imptos_interes
                            ,p_mca_poliza_grupo   => l_mca_poliza_grupo  );
      --
      mx('F', 'pp_cuotas_cotizacion');
      --
   END pp_cuotas_cotizacion;
   --
  -- efpereira
  /* ------------------------------------------------------
  || p_cuotas_cotizacion
  */ ------------------------------------------------------
  PROCEDURE p_cuotas_cotizacion IS
  --
  BEGIN
    --
    mx('I', 'p_cuotas_cotizacion');
    --
    pp_cuotas_cotizacion;
    --
    mx('F', 'p_cuotas_cotizacion');
    --
  END p_cuotas_cotizacion;
  --
  /* ------------------------------------------------------
   || pp_val_msg_vistoria
   */ ------------------------------------------------------
   --
   PROCEDURE pp_val_msg_vistoria(p_cod_cia       a2000030.cod_cia      %TYPE,
                                 p_cod_ramo      a2000030.cod_ramo     %TYPE,
                                 p_num_propuesta a2000560.num_propuesta%TYPE)
   IS
      --
      l_val_campo             a2000020.val_campo %TYPE;
      l_txt_campo             a2000020.txt_campo %TYPE;
      l_tip_vistoria          a2000560.val_campo %TYPE := trn.NULO; -- 4.03
      l_mca_vistoria_especial a2000560.val_campo %TYPE := trn.NULO; -- 4.03
      --
      l_mca_existe VARCHAR2(1) := NULL;
      l_fetch      VARCHAR2(1) := NULL;
      --
      l_existe_dv BOOLEAN;
      l_entrou_msg_vistoria BOOLEAN := FALSE; -- 4.03
      --
      l_k_error_obligatoria    CONSTANT x2000221.cod_error%TYPE := -80;
      l_k_error_duplicada      CONSTANT x2000221.cod_error%TYPE := -81;
      l_k_error_nao_necessaria CONSTANT x2000221.cod_error%TYPE := -82;
      --
      l_k_tip_situ_pendente CONSTANT NUMBER(1) := 2;
      --
      l_reg_a2000560 a2000560%ROWTYPE; -- 4.03
      -- I v4.67
      l_mca_dispensa        VARCHAR2(1) := NULL;
      l_k_tip_situ_dispensa CONSTANT NUMBER(1) := 5;
      l_obs_insp            CONSTANT a2000850.obs_insp%TYPE := 'DISPENSA VISTORIA';
      -- F v4.67
      CURSOR c_existe_vistoria_a(pc_cod_cia    a2000221.cod_cia   %TYPE,
                                 pc_num_poliza a2000221.num_poliza%TYPE,
                                 pc_cod_ramo   a2000850.cod_ramo  %TYPE)
      IS
         SELECT 'S'
           FROM a2000221 a
          WHERE a.cod_cia     = pc_cod_cia
            AND a.num_poliza  = pc_num_poliza
            AND a.cod_error  IN (l_k_error_obligatoria
                                ,l_k_error_duplicada
                                ,l_k_error_nao_necessaria)
            AND a.num_spto    = (SELECT MAX(b.num_spto)
                                   FROM a2000030 b
                                  WHERE b.cod_cia    = a.cod_cia
                                    AND b.cod_ramo   = pc_cod_ramo
                                    AND b.num_poliza = a.num_poliza);
      --
      CURSOR c_consulta_vistoria(pc_cod_cia  a2000850.cod_cia %TYPE,
                                 pc_num_insp a2000850.num_insp%TYPE,
                                 pc_cod_ramo a2000850.cod_ramo%TYPE)
      IS
         SELECT 'S'
           FROM a2000850 a
          WHERE a.cod_cia       = pc_cod_cia
            AND a.cod_ramo      = pc_cod_ramo
            AND a.num_insp      = pc_num_insp
            AND a.tip_situ_insp = l_k_tip_situ_pendente
            AND a.num_secu = (SELECT MAX(z.num_secu)
                                FROM a2000850 z
                               WHERE z.cod_cia  = a.cod_cia
                                 AND z.cod_ramo = a.cod_ramo
                                 AND z.num_insp = a.num_insp);
      --
      CURSOR c_tipo_vistoria(pc_num_insp a2000850.num_insp%TYPE) IS -- I 4.03
        SELECT a.val_campo
          FROM a2000870 a
         WHERE cod_cia = g_cod_cia
           AND num_insp = pc_num_insp
           AND num_riesgo_insp = trn.UNO
           AND cod_campo = g_k_tip_vistoria
         ORDER BY num_secu DESC;
      --
      CURSOR c_vistoria_especial(pc_num_insp a2000850.num_insp%TYPE) IS
        SELECT a.val_campo
          FROM a2000870 a
         WHERE cod_cia = g_cod_cia
           AND num_insp = pc_num_insp
           AND num_riesgo_insp = trn.UNO
           AND cod_campo = g_k_mca_vistoria_especial
         ORDER BY num_secu DESC;  -- F 4.03
      -- I v4.67
       CURSOR c_existe_dispnesa_vistoria(pc_cod_cia    a2000221.cod_cia   %TYPE,
                                 pc_num_poliza a2000221.num_poliza%TYPE,
                                 pc_cod_ramo   a2000850.cod_ramo  %TYPE)
      IS
         SELECT 'S'
           FROM a2000221 a
          WHERE a.cod_cia     = pc_cod_cia
            AND a.num_poliza  = pc_num_poliza
            AND a.cod_error   = l_k_error_nao_necessaria
            AND a.num_spto    = (SELECT MAX(b.num_spto)
                                   FROM a2000030 b
                                  WHERE b.cod_cia    = a.cod_cia
                                    AND b.cod_ramo   = pc_cod_ramo
                                    AND b.num_poliza = a.num_poliza);

      -- F v4.67
   BEGIN
      --
      mx('I', 'pp_val_msg_vistoria');
      --
      IF c_existe_vistoria_a%ISOPEN
      THEN
         --
         CLOSE c_existe_vistoria_a;
         --
      END IF;
      --
      OPEN c_existe_vistoria_a(pc_cod_cia    => p_cod_cia
                              ,pc_num_poliza => p_num_propuesta
                              ,pc_cod_ramo   => p_cod_ramo     );
      FETCH c_existe_vistoria_a INTO l_mca_existe;
      CLOSE c_existe_vistoria_a;
      --
      mx('l_mca_existe', l_mca_existe);
      IF NVL(l_mca_existe, trn.NO) = trn.SI
      THEN
         --
         l_existe_dv := em_k_a2000020.f_lee_riesgo_vigente(p_cod_cia     => p_cod_cia
                                                          ,p_num_poliza  => p_num_propuesta
                                                          ,p_num_apli    => trn.CERO
                                                          ,p_num_riesgo  => trn.UNO
                                                          ,p_num_periodo => trn.UNO
                                                          ,p_cod_ramo    => p_cod_ramo
                                                          ,p_tip_nivel   => em.TIP_NIVEL_RIESGO);
         --
         IF l_existe_dv
         THEN
            --
            mx('--l_existe_dv', NULL);
            --
            em_k_a2000020.p_devuelve_dv_riesgo(p_cod_campo => g_k_num_vistoria
                                              ,p_val_campo => l_val_campo
                                              ,p_txt_campo => l_txt_campo     );
            --
            mx('l_val_campo', l_val_campo);
            mx('l_txt_campo', l_txt_campo);
            --
        -- I v4.67
         IF c_existe_dispnesa_vistoria%ISOPEN
          THEN
             --
             CLOSE c_existe_dispnesa_vistoria;
             --
          END IF;
          --
          OPEN c_existe_dispnesa_vistoria(pc_cod_cia    => p_cod_cia
                                  ,pc_num_poliza => p_num_propuesta
                                  ,pc_cod_ramo   => p_cod_ramo     );
          FETCH c_existe_dispnesa_vistoria INTO l_mca_dispensa;
          CLOSE c_existe_dispnesa_vistoria;
          --
          IF NVL(l_mca_dispensa, trn.NO) = trn.SI
            --
             THEN
               --
               BEGIN
               UPDATE a2000850 a
                 SET a.tip_situ_insp  = l_k_tip_situ_dispensa,
                     a.obs_insp       = l_obs_insp
              WHERE a.cod_cia       = p_cod_cia
                AND a.cod_ramo      = p_cod_ramo
                AND a.num_insp      = l_val_campo
                AND a.tip_situ_insp = l_k_tip_situ_pendente
                AND a.num_secu = (SELECT MAX(z.num_secu)
                                    FROM a2000850 z
                                   WHERE z.cod_cia  = a.cod_cia
                                     AND z.cod_ramo = a.cod_ramo
                                     AND z.num_insp = a.num_insp);
             COMMIT;
             --
             l_entrou_msg_vistoria := FALSE;
             --
             EXCEPTION
               WHEN OTHERS THEN
                 --
                 l_entrou_msg_vistoria := TRUE;
                 --
             END;
          --
          END IF;
          -- 4.67
            --
            IF c_consulta_vistoria%ISOPEN
            THEN
               --
               CLOSE c_consulta_vistoria;
               --
            END IF;
            --
            OPEN c_consulta_vistoria(pc_cod_cia  => p_cod_cia  ,
                                     pc_num_insp => l_val_campo,
                                     pc_cod_ramo => p_cod_ramo );
            FETCH c_consulta_vistoria INTO l_fetch;
            CLOSE c_consulta_vistoria;
            --
            IF NVL(l_fetch, trn.NO) = trn.SI
            THEN
               --
               l_entrou_msg_vistoria := TRUE; -- 4.03
               --
               g_err_msg := TYPTAB_MSG_WS(); -- 4.99
               --
               g_err_msg.EXTEND(1); -- 4.99
               --
               g_err_msg(g_err_msg.LAST) := fp_trata_msg(trn.NULO   , -- 4.99
                                                                                         20098262   ,
                                                                                         l_val_campo);
               --
               IF c_tipo_vistoria%ISOPEN THEN -- Inicio -- 4.03
                 CLOSE c_tipo_vistoria;
               END IF;
               --
               OPEN c_tipo_vistoria(pc_num_insp => l_val_campo);
               FETCH c_tipo_vistoria
                 INTO l_tip_vistoria;
               CLOSE c_tipo_vistoria;
               --
               IF c_vistoria_especial%ISOPEN THEN
                 CLOSE c_vistoria_especial;
               END IF;
               --
               OPEN c_vistoria_especial(pc_num_insp => l_val_campo);
               FETCH c_vistoria_especial
                 INTO l_mca_vistoria_especial;
               CLOSE c_vistoria_especial;
               --
               l_reg_a2000560.cod_cia       := g_cod_cia;
               l_reg_a2000560.num_propuesta := g_num_poliza;
               l_reg_a2000560.cod_campo     := g_k_num_vistoria;
               l_reg_a2000560.val_campo     := l_val_campo;
               --
               em_k_a2000560.p_inserta_borrando(l_reg_a2000560);
               --
               l_reg_a2000560.cod_campo := g_k_tip_vistoria;
               l_reg_a2000560.val_campo := l_tip_vistoria;
               --
               em_k_a2000560.p_inserta_borrando(l_reg_a2000560);
               --
               l_reg_a2000560.cod_campo := g_k_mca_vistoria_especial;
               l_reg_a2000560.val_campo := l_mca_vistoria_especial;
               --
               em_k_a2000560.p_inserta_borrando(l_reg_a2000560); -- Final 4.03
               --
            END IF;
            --
         END IF;
         --
      END IF;
      --
      IF NOT l_entrou_msg_vistoria THEN -- Ini 4.03
        --
        l_reg_a2000560.cod_cia       := g_cod_cia;
        l_reg_a2000560.num_propuesta := g_num_poliza;
        l_reg_a2000560.cod_campo     := g_k_num_vistoria;
        l_reg_a2000560.val_campo     := NULL;
        --
        em_k_a2000560.p_inserta_borrando(l_reg_a2000560);
        --
      END IF; -- Fim 4.03
      --
      mx('F', 'pp_val_msg_vistoria');
      --
   END pp_val_msg_vistoria;
   --
   /* ------------------------------------------------------
   || pp_valida_pct_agt_npr
   */ ------------------------------------------------------
   --
   PROCEDURE pp_valida_pct_agt_npr(p_num_propuesta a2000560.num_propuesta%TYPE)
   IS
      --
      l_val_campo   a2000560.val_campo%TYPE;
      l_pct_agt_npr a2000560.val_campo%TYPE;
      --
      l_k_mca_msg_pct_agt  CONSTANT VARCHAR(15) := 'MCA_MSG_PCT_AGT';
      l_k_pct_agt_npr      CONSTANT VARCHAR(11) := 'PCT_AGT_NPR'    ;
      --
   BEGIN
      --
      mx('I', 'pp_valida_pct_agt_npr');
      --
      mx('p_num_propuesta', p_num_propuesta);
      --
      BEGIN
         --
         em_k_a2000560.p_lee(p_cod_cia       => g_cod_cia          ,
                             p_num_propuesta => p_num_propuesta    ,
                             p_cod_campo     => l_k_mca_msg_pct_agt);
         --
         l_val_campo := em_k_a2000560.f_val_campo;
         --
         em_k_a2000560.p_lee(p_cod_cia       => g_cod_cia      ,
                             p_num_propuesta => p_num_propuesta,
                             p_cod_campo     => l_k_pct_agt_npr);
         --
         l_pct_agt_npr := em_k_a2000560.f_val_campo;
         --
      EXCEPTION
         --
         WHEN OTHERS
         THEN
            --
            l_val_campo := trn.NO;
            --
         --
      END;
      --
      mx('l_val_campo', l_val_campo);
      --
      IF l_val_campo = trn.SI
      THEN
         --
         g_err_msg.EXTEND(1); -- 4.99
         --
         g_err_msg(g_err_msg.LAST) := fp_trata_msg('PCT_AGT_NPR', -- 4.99
                                                                                   20098246,
                                                                                   l_pct_agt_npr || '%');
         --
      END IF;
      --
      mx('F', 'pp_valida_pct_agt_npr');
      --
   END pp_valida_pct_agt_npr;
   --
   /* ------------------------------------------------------
   || pp_valida_mudancas
   */ ------------------------------------------------------
   --
   PROCEDURE pp_valida_mudancas(p_num_propuesta a2000560.num_propuesta%TYPE,
                                p_cod_ramo      a2000030.cod_ramo     %TYPE)
   IS
      --
      l_fecth VARCHAR2(1);
      --
      CURSOR lc_tipologias(pc_cod_cia    a2000033.cod_cia   %TYPE,
                           pc_num_poliza a2000033.num_poliza%TYPE,
                           pc_cod_ramo   a2000030.cod_ramo  %TYPE)
      IS
         SELECT 'S'
           FROM a2000033 a
          WHERE a.cod_cia    = pc_cod_cia
            AND a.num_poliza = pc_num_poliza
            AND a.num_spto   = (SELECT MAX(z.num_spto)
                                  FROM a2000030 z
                                 WHERE z.cod_cia    = a.cod_cia
                                   AND z.cod_ramo   = pc_cod_ramo
                                   AND z.num_poliza = a.num_poliza);
      --
   BEGIN
      --
      mx('I', 'pp_valida_mudancas');
      --
      mx('p_num_propuesta', p_num_propuesta);
      mx('p_cod_ramo'     , p_cod_ramo     );
      --
      IF lc_tipologias%ISOPEN
      THEN
         --
         CLOSE lc_tipologias;
         --
      END IF;
      --
      OPEN lc_tipologias(pc_cod_cia    => g_cod_cia      ,
                         pc_num_poliza => p_num_propuesta,
                         pc_cod_ramo   => p_cod_ramo     );
      --
      FETCH lc_tipologias INTO l_fecth;
      CLOSE lc_tipologias;
      --
      IF NVL(l_fecth, trn.NO) = trn.NO
      THEN
         --
         g_err_msg.EXTEND(1); -- 4.99
         --
         g_err_msg(g_err_msg.LAST) := fp_trata_msg(trn.NULO, -- 4.99
                                                                                   20098261,
                                                                                   trn.NULO);
         --
      END IF;
      --
      mx('F', 'pp_valida_mudancas');
      --
   END pp_valida_mudancas;
   --
   /* ------------------------------------------------------
   || pp_valida_cod_status_rastreador
   */ ------------------------------------------------------
   --
   FUNCTION fp_valida_recusa_flex(p_num_propuesta a2000560.num_propuesta%TYPE,
                                   p_cod_ramo      a2000030.cod_ramo     %TYPE)
      RETURN BOOLEAN
   IS
      --
      l_fetch VARCHAR2(1);
      --
      CURSOR lc_recusa_flex
      IS
         SELECT trn.SI
           FROM a2992130_vcr a
          WHERE a.cod_cia    = g_cod_cia
            AND a.cod_ramo   = p_cod_ramo
            AND a.num_poliza = p_num_propuesta
            AND a.num_spto   = (SELECT MAX(z.num_spto)
                                  FROM a2000030 z
                                 WHERE z.cod_cia    = a.cod_cia
                                   AND z.cod_ramo   = a.cod_ramo
                                   AND z.num_poliza = a.num_poliza);
      --
   BEGIN
      --
      mx('I', 'fp_valida_recusa_flex');
      --
      IF lc_recusa_flex%ISOPEN
      THEN
         --
         CLOSE lc_recusa_flex;
         --
      END IF;
      --
      OPEN lc_recusa_flex;
      FETCH lc_recusa_flex INTO l_fetch;
      CLOSE lc_recusa_flex;
      --
      IF l_fetch = trn.SI
      THEN
         --
         mx('-', 'TRUE');
         --
         mx('F', 'fp_valida_recusa_flex');
         --
         RETURN TRUE;
         --
      ELSE
         --
         mx('-', 'FALSE');
         --
         mx('F', 'fp_valida_recusa_flex');
         --
         RETURN FALSE;
         --
      END IF;
      --
   END fp_valida_recusa_flex;
   --
   /* ------------------------------------------------------
   || pp_valida_cod_status_rastreador
   */ ------------------------------------------------------
   --
   PROCEDURE pp_valida_cod_sts_rastre(p_num_propuesta a2000560.num_propuesta%TYPE,
                                      p_cod_ramo      a2000030.cod_ramo     %TYPE)
   IS
   --
   l_k_cod_status_obrigatorio CONSTANT NUMBER(1) := trn.UNO;
   --
   l_k_cod_status_rastreador  CONSTANT VARCHAR(21) := 'COD_STATUS_RASTREADOR';
   --
   BEGIN
      --
      mx('I', 'pp_valida_cod_sts_rastre');
      --
      mx('p_num_propuesta', p_num_propuesta);
      mx('p_cod_ramo'     , p_cod_ramo     );
      --
      em_k_a2000020.p_lee_vigente(p_cod_cia     => g_cod_cia                ,
                                  p_num_poliza  => p_num_propuesta          ,
                                  p_num_apli    => trn.CERO                 ,
                                  p_num_riesgo  => trn.UNO                  ,
                                  p_num_periodo => trn.UNO                  ,
                                  p_cod_campo   => l_k_cod_status_rastreador,
                                  p_cod_ramo    => p_cod_ramo               );
      --
      mx('f_val_campo', em_k_a2000020.f_val_campo);
      --
      IF TO_NUMBER(em_k_a2000020.f_val_campo) = l_k_cod_status_obrigatorio
      THEN
         --
         g_err_msg.EXTEND(1); -- 4.99
         --
         g_err_msg(g_err_msg.LAST) := fp_trata_msg('COD_STATUS_RASTREADOR', -- 4.99
                                                                                   20176                  ,
                                                                                   trn.NULO               );
         --
      END IF;
      --
      mx('F', 'pp_valida_cod_sts_rastre');
      --
   END pp_valida_cod_sts_rastre;
   --
   /* ------------------------------------------------------
   || pp_cuotas_cotizacion_spto
   */ ------------------------------------------------------
   PROCEDURE pp_cuotas_cotizacion_spto
   IS
   --
   l_imp_recibo         c2990700.imp_recibo        %TYPE := 0;
   l_imp_neta           c2990700.imp_neta          %TYPE := 0;
   l_imp_recargo        c2990700.imp_recargo       %TYPE := 0;
   l_imp_boni           c2990700.imp_boni          %TYPE := 0;
   l_imp_imptos         c2990700.imp_imptos        %TYPE := 0;
   l_imp_interes        c2990700.imp_interes       %TYPE := 0;
   l_imp_imptos_interes c2990700.imp_imptos_interes%TYPE := 0;
   --
   l_fec_efec_poliza    a2000030.fec_efec_poliza   %TYPE;
   l_fec_vcto_poliza    a2000030.fec_vcto_poliza   %TYPE;
   --
   l_mca_poliza_grupo   c2000020.val_campo         %TYPE;
   l_num_poliza_grupo   a2000030.num_poliza_grupo  %TYPE;
   l_num_spto           a2000030.num_spto          %TYPE;
   l_num_presupuesto    c2990700.num_cotizacion    %TYPE;
   --
   CURSOR c_a2990700 IS
    SELECT nvl(SUM(imp_recibo),0),
           nvl(SUM(imp_neta),0),
           nvl(SUM(imp_recargo),0),
           nvl(SUM(imp_imptos),0),
           nvl(SUM(imp_boni),0),
           nvl(SUM(imp_interes),0),
           nvl(SUM(imp_imptos_interes),0)
      FROM a2990700
     WHERE cod_cia       = g_cod_cia
       AND num_poliza    = g_num_poliza
       AND num_spto      = l_num_spto
       AND num_apli      = g_num_apli
       AND num_spto_apli = g_num_spto_apli;
    --
    /* -------------------------------
    ||  Elimina parcelas de endossos
    */ -------------------------------
    --
    PROCEDURE pi_borra_c2990700(p_num_cotizacion   IN a2000030.num_poliza%TYPE)
    IS
     --
    BEGIN
      --
      mx('I', 'pi_borra_c2990700');
      --
      DELETE c2990700
       WHERE cod_cia        = g_cod_cia
         AND cod_ramo       = g_cod_ramo
         AND num_cotizacion = p_num_cotizacion;
      --
      mx('F', 'pi_borra_c2990700');
      --
    END pi_borra_c2990700;
    --
   BEGIN
     --
     mx('I', 'pp_cuotas_cotizacion_spto');
     --
     pp_asigna('NUM_SPTO'          , fp_devuelve_val_coti('DFNUM_SPTO'));
     pp_asigna('NUM_POLIZA_GRUPO'  , NVL(fp_devuelve_val_coti('DFNUM_POLIZA_GRUPO'),  fp_devuelve_campo_coti('LLNUM_POLIZA_GRUPO')));
     pp_asigna('FEC_EFEC_SPTO'     , fp_devuelve_val_coti('DFFEC_EFEC_SPTO'));
     pp_asigna('FEC_VCTO_SPTO'     , fp_devuelve_val_coti('DFFEC_VCTO_SPTO'));
     --
     pp_asigna('NUM_PRESUPUESTO'   , fp_devuelve_val_coti('DFNUM_PRESUPUESTO'));
     --
     l_num_spto         := fp_ref_devuelve_n('NUM_SPTO');
     l_num_poliza_grupo := fp_ref_devuelve_c('NUM_POLIZA_GRUPO');
     l_fec_efec_poliza  := fp_ref_devuelve_f('FEC_EFEC_SPTO');
     l_fec_vcto_poliza  := fp_ref_devuelve_f('FEC_VCTO_SPTO');
     --
     l_num_presupuesto  := fp_ref_devuelve_c('NUM_PRESUPUESTO');
     --
     IF l_num_poliza_grupo IS NULL THEN
       --
       l_mca_poliza_grupo := trn.NO;
       --
     ELSE
       --
       l_mca_poliza_grupo := trn.SI;
       --
     END IF;
     --
     mx('l_fec_efec_poliza' , l_fec_efec_poliza);
     mx('l_mca_poliza_grupo', l_mca_poliza_grupo);
     mx('g_cod_cia'         , g_cod_cia);
     mx('g_cod_ramo'        , g_cod_ramo);
     mx('g_num_poliza'      , g_num_poliza);
     mx('l_num_spto'        , l_num_spto);
     mx('g_num_apli'        , g_num_apli);
     mx('g_num_spto_apli'   , g_num_spto_apli);
     --
     IF c_a2990700%ISOPEN THEN
       --
       CLOSE c_a2990700;
       --
     END IF;
     --
     OPEN c_a2990700;
     --
     FETCH c_a2990700 INTO l_imp_recibo,
                           l_imp_neta,
                           l_imp_recargo,
                           l_imp_imptos,
                           l_imp_boni,
                           l_imp_interes,
                           l_imp_imptos_interes;
     --
     CLOSE c_a2990700;
     --
     IF NVL(l_imp_recibo, trn.CERO) <> trn.CERO THEN
       --
       pi_borra_c2990700(l_num_presupuesto);
       --
       em_p_cuotas_cotizacion(p_cod_cia            => g_cod_cia
                             ,p_cod_ramo           => g_cod_ramo
                             ,p_num_poliza         => l_num_presupuesto --g_num_poliza
                             ,p_num_simulacion     => trn.UNO
                             ,p_fec_efec_poliza    => l_fec_efec_poliza
                             ,p_fec_vcto_poliza    => l_fec_vcto_poliza
                             ,p_imp_recibo         => l_imp_recibo
                             ,p_imp_neta           => l_imp_neta
                             ,p_imp_recargo        => l_imp_recargo
                             ,p_imp_imptos         => l_imp_imptos
                             ,p_imp_boni           => l_imp_boni
                             ,p_imp_interes        => l_imp_interes
                             ,p_imp_imptos_interes => l_imp_imptos_interes
                             ,p_mca_poliza_grupo   => l_mca_poliza_grupo  );
       --
     ELSIF NVL(l_imp_recibo, trn.CERO) = trn.CERO THEN
       --
       pi_borra_c2990700(l_num_presupuesto);
       --
       INSERT INTO C2990700
         (cod_cia,
          cod_ramo,
          num_cotizacion,
          num_simulacion,
          cod_fracc_pago,
          num_cuota,
          fec_efec_recibo,
          fec_vcto_recibo,
          imp_recibo,
          imp_neta,
          imp_recargo,
          imp_imptos,
          imp_boni,
          imp_interes,
          imp_imptos_interes)
       VALUES
         (g_cod_cia,
          g_cod_ramo,
          l_num_presupuesto,
          trn.UNO,
          g_k_anual,
          trn.UNO,
          l_fec_efec_poliza,
          l_fec_vcto_poliza,
          l_imp_recibo,
          l_imp_neta,
          l_imp_recargo,
          l_imp_imptos,
          l_imp_boni,
          l_imp_interes,
          l_imp_imptos_interes);
       --
     END IF;
     --
     mx('F', 'pp_cuotas_cotizacion_spto');
     --
   END pp_cuotas_cotizacion_spto;
   --
   --
   /* ------------------------------------------------------
   || pp_v_contrat_automais_casa
   */ ------------------------------------------------------
   PROCEDURE pp_v_contrat_automais_casa
   IS
     --
     CURSOR c_recupera_cob IS  -- I 4.46
        SELECT cod_fila, nom_columna
          FROM c2000000
        WHERE num_cotizacion  = g_num_cotizacion
          AND cod_cia         = g_cod_cia
          AND cod_ramo        = g_cod_ramo
          AND nom_columna     = 'SUMA_ASEG'
          AND cod_fila       IN (400,421)
        ;
     --
     l_reg c_recupera_cob%ROWTYPE;  -- F 4.46
     --
     TYPE type_cobs_automais_casa IS TABLE OF VARCHAR(4);
     t_cobs_automais type_cobs_automais_casa;
     --
     l_val_campo a2000020.val_campo%TYPE;
     l_cod_mensaje VARCHAR2(250); -- 3.61
     l_anx_mensaje VARCHAR2(250); -- 3.61
     --
     l_val_campo_421 BOOLEAN := FALSE; -- 3.61
     l_verifica      BOOLEAN := FALSE; -- 3.61
     --
     l_dispara_mensaje EXCEPTION; -- 3.61
     --
     l_k_nom_cob_400 a1002150.nom_cob%TYPE := 'Prote' || CHR(231) || CHR(227) || 'o Casa Inc./Raio/Expl.'; -- 3.61
     l_k_nom_cob_421 a1002150.nom_cob%TYPE := 'Prote' || CHR(231) || CHR(227) || 'o Casa R.C. Familiar'; -- 3.61
    --
     FUNCTION fi_busca_dato_variable RETURN VARCHAR2
     IS
     --
     BEGIN
       --
       mx('I', 'pi_busca_dato_variable');
       --
       FOR z IN 1 .. g_cob_dados.COUNT
       LOOP
         --
         IF g_cob_dados(z).cod_cob                = '400'                   AND
            g_cob_dados(z).cod_campo              = 'TIP_COB_AUTOMAIS_CASA' AND
            g_cob_dados(z).mca_seleccion_cob      = trn.SI                  AND
            g_cob_dados(z).mca_seleccion_atributo = trn.SI
         THEN
           --
           RETURN g_cob_dados(z).val_campo;
           --
         END IF;
         --
       END LOOP;
       --
       RETURN trn.NULO;
       --
       mx('F', 'pi_busca_dato_variable');
       --
     END fi_busca_dato_variable;
     --
     FUNCTION fi_busca_dato_variable_421 RETURN BOOLEAN IS -- I 3.61
       --
     BEGIN
       --
       mx('I', 'pi_busca_dato_variable');
       --
       FOR z IN 1 .. g_cob_dados.COUNT LOOP
         --
         IF g_cob_dados(z)
          .cod_cob = '421' AND g_cob_dados(z).mca_seleccion_cob = trn.SI THEN
           --
           RETURN TRUE;
           --
         END IF;
         --
       END LOOP;
       --
       RETURN FALSE;
       --
       mx('F', 'pi_busca_dato_variable');
       --
     END fi_busca_dato_variable_421; -- F 3.61
     --
   BEGIN
      --
      mx('I', 'pp_v_contrat_automais_casa');
      --
      IF NVL(trn_k_global.ref_f_global('MCA_CALCULO_COBERTURA'), trn.CERO) = trn.UNO -- I 4.46
      THEN
        --
        mx('I', 'c_recupera_cob');
        --
        OPEN c_recupera_cob;
          --
          LOOP FETCH c_recupera_cob INTO l_reg;
            --
            IF l_reg.cod_fila = '421'
            THEN
              --
              l_val_campo_421 := TRUE;
              --
            END IF;
            --
            IF l_reg.cod_fila = '400'
            THEN
              --
              l_val_campo := trn.UNO;
              --
            END IF;
            --
           EXIT WHEN c_recupera_cob%NOTFOUND;
           --
           END LOOP;
          --
        CLOSE c_recupera_cob;
        --
        mx('F', 'c_recupera_cob');
        --
        IF (    l_val_campo IS NOT NULL AND
            NOT l_val_campo_421            ) OR
           (l_val_campo IS NULL AND
            l_val_campo_421        )
        THEN
          --
          l_verifica := TRUE;
          --
          RAISE l_dispara_mensaje;
          --
        END IF;
        --
      END IF; -- F 4.46
      --
      t_cobs_automais := type_cobs_automais_casa('400', '421');
      --
      l_val_campo     := fi_busca_dato_variable;
      l_val_campo_421 := fi_busca_dato_variable_421; -- 3.61
      --
      IF l_val_campo IS NOT NULL AND l_val_campo_421 -- 3.61
      THEN
        --
        FOR x IN 1 .. t_cobs_automais.COUNT
        LOOP
          --
            trn_k_global.asigna('cod_cob', t_cobs_automais(x)); -- 3.11
          --
            FOR y IN 1 .. g_cob_dados.COUNT
            LOOP
              --
              IF g_cob_dados(y).cod_cob           = t_cobs_automais(x)                 AND
                 g_cob_dados(y).cod_campo         = 'SUMA_ASEG_' || t_cobs_automais(x) AND
                 g_cob_dados(y).mca_seleccion_cob = trn.SI
              THEN
                --
                IF g_cob_dados(y).val_campo  = trn_k_df_cmn_nwt_xx_vrb_cnc.f_row_val_val(
                                                                       p_vrb_nam => 'AUTOMAIS_CASA' || g_k_prefixo_simulacion || t_cobs_automais(x)
                                                                      ,p_cnc_vrb_val => l_val_campo)
                THEN
                  --
                  g_cob_dados(y).mca_val_defecto_indenizacao := trn.SI;
                  --
                ELSE
                  --
                  g_cob_dados(y).mca_val_defecto_indenizacao := trn.NO;
                  --
                END IF;
                --
              END IF;
              --
            END LOOP;
          --
        END LOOP;
        --
      ELSIF ((l_val_campo IS NOT NULL AND NOT l_val_campo_421) OR -- I 3.61
            l_val_campo IS NULL AND l_val_campo_421) THEN
        --
        l_verifica := TRUE;
        --
        RAISE l_dispara_mensaje; -- F 3.61
        --
      END IF;
      --
      mx('F', 'pp_v_contrat_automais_casa');
      --
   EXCEPTION
     WHEN OTHERS
     THEN
       --
       mx('F', 'pp_v_contrat_automais_casa - Exception');
       --
       IF l_verifica THEN
         --
         l_cod_mensaje := ss_k_mensaje.f_solo_texto_idioma(20099197,
                                                           g_cod_idioma); -- 3.61
         l_anx_mensaje := trn.BLANCO || '(' || l_k_nom_cob_400 || ' e ' ||
                          l_k_nom_cob_421 || ')' ||
                          ss_k_mensaje.f_solo_texto_idioma(20099198,
                                                           g_cod_idioma); -- 3.61
         g_err_msg.EXTEND(1); -- 3.61 -- 4.99
         g_err_msg(g_err_msg.LAST) := fp_trata_msg('COD_RETORNO', -- 4.99
                                                                                   '20099197',
                                                                                   l_cod_mensaje ||
                                                                                   l_anx_mensaje); -- 3.61
         --
         pp_devuelve_error; -- 4.46
         --
       END IF;
       --
   END pp_v_contrat_automais_casa;
   --
   -- Ini. v 1.41
   --
   /* ------------------------------------------------------
   || pp_v_carta_verde
   */ ------------------------------------------------------
   PROCEDURE pp_v_carta_verde
   IS
   --
   l_cod_cob_92     c2009040_vcr.cod_cob   %TYPE := 92;
   l_tip_mvto_batch a2000500.tip_mvto_batch%TYPE      ;
   --
   CURSOR c_df_cmn_nwt_xx_vrb_cnc IS
     SELECT cnc_vrb_val
       FROM df_cmn_nwt_xx_vrb_cnc a
      WHERE a.cmp_val = trn_k_global.cod_cia
        AND a.lob_val = trn_k_global.ref_f_global('cod_ramo')
        AND a.vrb_nam = g_k_cod_campo_cob_agrupada || g_k_prefixo_simulacion || l_cod_cob_92;
   --
   BEGIN
      --
      mx('I', 'pp_v_carta_verde');
      --
      l_tip_mvto_batch := trn_k_global.ref_f_global('tip_mvto_batch');
      --
      FOR y IN 1 .. g_cob_dados.COUNT
      LOOP
        --
        IF l_tip_mvto_batch = ea_k_231_utils.g_k_cotiza_batch
        THEN
          --
          IF g_cob_dados(y).cod_cob                      = l_cod_cob_92 AND
             g_cob_dados(y).mca_seleccion_cob            = trn.SI
          THEN
            --
            FOR reg IN c_df_cmn_nwt_xx_vrb_cnc
            LOOP
              --
              FOR z IN 1 .. g_cob_dados.COUNT
              LOOP
                --
                IF g_cob_dados(z).cod_cob                    = reg.cnc_vrb_val           AND
                   g_cob_dados(z).cod_campo                  = 'SUMA_ASEG_' || reg.cnc_vrb_val
                THEN
                  --
                  pp_asigna('cod_cob'
                           ,reg.cnc_vrb_val);
                  --
                  ea_k_231_utils.p_devuelve_dato_cotizacion(p_nom_tabla   => 'G2000000'
                                                           ,p_nom_columna => 'VAL_CLAVE_FORMULA' ||
                                                                             g_k_pref_simulacion ||
                                                                             NVL(trn_k_global.ref_f_global('num_simulacion')
                                                                                                          ,trn.UNO)
                                                           ,p_val_campo   => g_val_clave_formula);
                  --
                  pp_lee_config_cob;
                  --
                  g_cob_dados(z).val_campo                   := ea_k_g2109040.f_suma_aseg;
                  --
                  g_cob_dados(z).mca_val_defecto_indenizacao := trn.SI                   ;
                  g_cob_dados(z).mca_seleccion_cob           := trn.SI                   ;
                  --
                  mx('-', 'g_cob_dados(z).val_campo:                   ' || g_cob_dados(z).val_campo);
                  mx('-', 'g_cob_dados(z).mca_val_defecto_indenizacao: ' || g_cob_dados(z).mca_val_defecto_indenizacao);
                  mx('-', 'g_cob_dados(z).mca_seleccion_cob:           ' || g_cob_dados(z).mca_seleccion_cob);
                  --
                END IF;
                --
              END LOOP;
              --
            END LOOP;
            --
            EXIT;
            --
          END IF;
          --
        ELSIF l_tip_mvto_batch = ea_k_231_utils.g_k_spto_batch
        THEN
          --
          mx('-', 'g_cob_dados(y).cod_cob           :          ' || g_cob_dados(y).cod_cob);
          mx('-', 'g_cob_dados(y).mca_seleccion_cob :          ' || g_cob_dados(y).mca_seleccion_cob );
          mx('-', 'g_cob_dados(y).cod_campo         :          ' || g_cob_dados(y).cod_campo);
          --
          IF g_cob_dados(y).cod_cob                      IN (304, 305)                            AND
             g_cob_dados(y).mca_seleccion_cob            = trn.SI                                 AND
             g_cob_dados(y).cod_campo                    = 'SUMA_ASEG_' || g_cob_dados(y).cod_cob
          THEN
            --
            mx('-', 'g_cob_dados(y).cod_cob: ' || g_cob_dados(y).cod_cob);
            --
            pp_asigna('cod_cob'
                     ,g_cob_dados(y).cod_cob);
            --
            g_val_clave_formula := ea_k_231_utils.f_devuelve_val_campo_spto(p_cod_campo => 'VAL_CLAVE_FORMULA');
            --
            mx('-', 'g_val_clave_formula: ' || g_val_clave_formula);
            --
            pp_lee_config_cob;
            --
            g_cob_dados(y).val_campo                   := ea_k_g2109040.f_suma_aseg;
            --
            g_cob_dados(y).mca_val_defecto_indenizacao := trn.SI                   ;
            g_cob_dados(y).mca_seleccion_cob           := trn.SI                   ;
            --
            mx('-', 'g_cob_dados(y).val_campo:                   ' || g_cob_dados(y).val_campo);
            mx('-', 'g_cob_dados(y).mca_val_defecto_indenizacao: ' || g_cob_dados(y).mca_val_defecto_indenizacao);
            mx('-', 'g_cob_dados(y).mca_seleccion_cob:           ' || g_cob_dados(y).mca_seleccion_cob);
            --
          END IF;
          --
        END IF;
        --
      END LOOP;
      --
      mx('F', 'pp_v_carta_verde');
      --
   EXCEPTION
     WHEN OTHERS
     THEN
       --
       mx('F', 'pp_v_carta_verde - Exception');
       --
   END pp_v_carta_verde;
   --
   -- Fim. v 1.41
   --
   -- I 1.80
/* ------------------------------------------------------
   || pp_v_carta_verde
   */ ------------------------------------------------------
   PROCEDURE pp_v_carta_verde_spto
   IS
   --
   l_cod_cob_92 c2009040_vcr.cod_cob%TYPE := 92;
   --
   CURSOR c_df_cmn_nwt_xx_vrb_cnc IS
     SELECT cnc_vrb_val
       FROM df_cmn_nwt_xx_vrb_cnc a
      WHERE a.cmp_val = trn_k_global.cod_cia
        AND a.lob_val = trn_k_global.ref_f_global('cod_ramo')
        AND a.vrb_nam = g_k_cod_campo_cob_agrupada || g_k_prefixo_simulacion || l_cod_cob_92;
   --
   BEGIN
      --
      mx('I', 'pp_v_carta_verde_spto');
      --
      IF  trn_k_global.ref_f_global('tip_mvto_batch') = ea_k_231_utils.g_k_spto_batch -- 1.0
      THEN
        --
        FOR y IN 1 .. g_cob_dados.COUNT
        LOOP
          --
          IF g_cob_dados(y).cod_cob                     = l_cod_cob_92 AND
             g_cob_dados(y).mca_seleccion_cob           = trn.SI
          THEN
            --
            FOR reg IN c_df_cmn_nwt_xx_vrb_cnc
            LOOP
              --
              FOR z IN 1 .. g_cob_dados.COUNT
              LOOP
                --
                IF g_cob_dados(z).cod_cob                    = reg.cnc_vrb_val             AND
                   g_cob_dados(z).cod_campo                  = 'SUMA_ASEG_' || reg.cnc_vrb_val
                THEN
                  --
                  pp_asigna('cod_cob'
                           ,reg.cnc_vrb_val);
                  --
                  --ea_k_231_utils.p_devuelve_dato_cotizacion(p_nom_tabla   => 'G2000000'
                  --                                         ,p_nom_columna => 'VAL_CLAVE_FORMULA' ||
                  --                                                           g_k_pref_simulacion ||
                  --                                                           NVL(trn_k_global.ref_f_global('num_simulacion')
                  --                                                                                        ,trn.UNO)
                  --                                         ,p_val_campo   => g_val_clave_formula);
                  g_val_clave_formula := fp_devuelve_val_coti('VAL_CLAVE_FORMULA');
                  --
                  pp_lee_config_cob;
                  --
                  g_cob_dados(z).val_campo                   := ea_k_g2109040.f_suma_aseg;
                  --
                  g_cob_dados(z).mca_val_defecto_indenizacao := trn.SI                   ;
                  g_cob_dados(z).mca_seleccion_cob           := trn.SI                   ;
                  --
                  mx('-', 'g_cob_dados(z).val_campo:                   ' || g_cob_dados(z).val_campo);
                  mx('-', 'g_cob_dados(z).mca_val_defecto_indenizacao: ' || g_cob_dados(z).mca_val_defecto_indenizacao);
                  mx('-', 'g_cob_dados(z).mca_seleccion_cob:           ' || g_cob_dados(z).mca_seleccion_cob);
                  --
                END IF;
                --
              END LOOP;
              --
            END LOOP;
            --
            EXIT;
            --
          END IF;
          --
        END LOOP;
        --
      END IF;
      --
      mx('F', 'pp_v_carta_verde_spto');
      --
   EXCEPTION
     WHEN OTHERS
     THEN
       --
       mx('F', 'pp_v_carta_verde_spto - Exception');
       --
   END pp_v_carta_verde_spto;
   -- F 1.80
   /* ------------------------------------------------------
   || pp_v_contrat_obj_transp
   */ ------------------------------------------------------
   PROCEDURE pp_v_contrat_obj_transp
   IS
   --
   l_cod_cob_205 c2009040_vcr.cod_cob%TYPE := 205;
   l_cod_cob_206 c2009040_vcr.cod_cob%TYPE := 206;
   --
   BEGIN
      --
      mx('I', 'pp_v_contrat_obj_transp');
      --
      FOR y IN 1 .. g_cob_dados.COUNT
      LOOP
        --
        IF g_cob_dados(y).cod_cob                     = l_cod_cob_205                 AND
           g_cob_dados(y).cod_campo                   = 'SUMA_ASEG_' || l_cod_cob_205 AND
           g_cob_dados(y).mca_seleccion_cob           = trn.SI                        AND
           g_cob_dados(y).mca_val_defecto_indenizacao = trn.SI
        THEN
          --
          FOR z IN 1 .. g_cob_dados.COUNT
          LOOP
            --
            IF g_cob_dados(z).cod_cob                     = l_cod_cob_206                 AND
               g_cob_dados(z).cod_campo                   = 'SUMA_ASEG_' || l_cod_cob_206
            THEN
              --
              IF g_cob_dados(y).val_campo  = g_cob_dados(z).val_campo
              THEN
                --
                g_cob_dados(z).mca_val_defecto_indenizacao := trn.SI;
                g_cob_dados(z).mca_seleccion_cob           := trn.SI;
                --
              ELSE
                --
                g_cob_dados(z).mca_val_defecto_indenizacao := trn.NO;
                --
              END IF;
              --
            END IF;
            --
          END LOOP;
          --
          EXIT;
          --
        END IF;
        --
      END LOOP;
      --
      mx('F', 'pp_v_contrat_obj_transp');
      --
   EXCEPTION
     WHEN OTHERS
     THEN
       --
       mx('F', 'pp_v_contrat_obj_transp - Exception');
       --
   END pp_v_contrat_obj_transp;
   --
   -- I 3.18
   /* ------------------------------------------------------
   || pp_v_receita_garantida
   */ ------------------------------------------------------
   PROCEDURE pp_v_receita_garantida
   IS
   --
   l_cod_cob_255 c2009040_vcr.cod_cob%TYPE := '255';
   --
   BEGIN
    --
    mx('I', 'pp_v_receita_garantida');
    --
    FOR y IN 1 .. g_cob_dados.COUNT
      LOOP
        --
        IF g_cob_dados(y).cod_cob                     = l_cod_cob_255     AND
           g_cob_dados(y).cod_campo                   = 'VAL_DA_RECEITA'  AND
           g_cob_dados(y).mca_seleccion_cob           = trn.SI            AND
           g_cob_dados(y).mca_seleccion_atributo      = trn.SI
        THEN
          --
          FOR z IN 1 .. g_cob_dados.COUNT
          LOOP
            --
            IF g_cob_dados(z).cod_cob                     = l_cod_cob_255                 AND
               g_cob_dados(z).cod_campo                   = 'SUMA_ASEG_' || l_cod_cob_255
            THEN
              --
              IF g_cob_dados(y).val_campo  = g_cob_dados(z).val_campo
              THEN
                --
                g_cob_dados(z).mca_val_defecto_indenizacao := trn.SI;
                --
              ELSE
                --
                g_cob_dados(z).mca_val_defecto_indenizacao := trn.NO;
                --
              END IF;
              --
            END IF;
            --
          END LOOP;
          --
          EXIT;
          --
        END IF;
        --
      END LOOP;
      --
      mx('F', 'pp_v_receita_garantida');
      --
   EXCEPTION
     WHEN OTHERS
     THEN
       --
       mx('F', 'pp_v_receita_garantida - Exception');
       --
   END pp_v_receita_garantida;
   -- F 3.18
   --
   -- {v2.05
   /* ------------------------------------------------------
   || pp_limpa_coberturas
   */ ------------------------------------------------------
   PROCEDURE pp_limpa_coberturas IS
   --
   BEGIN
      --
      mx('I', 'pp_limpa_coberturas');
      --
      DELETE c2009040_vcr
       WHERE cod_cia        = trn_k_global.devuelve('cod_cia')
        AND cod_ramo = trn_k_global.devuelve('cod_ramo')
        AND num_simulacion =
            nvl(trn_k_global.devuelve('num_simulacion'), num_simulacion) -- 3.27
       AND num_cotizacion = trn_k_global.devuelve('num_cotizacion');
      --
      DELETE c2109170_vcr
       WHERE cod_cia = trn_k_global.devuelve('cod_cia')
        AND cod_ramo = trn_k_global.devuelve('cod_ramo')
        AND num_cotizacion = trn_k_global.devuelve('num_cotizacion')
        AND num_simulacion =
            nvl(trn_k_global.devuelve('num_simulacion'), num_simulacion) -- 3.27
        AND num_simulacion NOT IN (999, 998, 997, 996); -- v3.54 Necesario mantener para renovaciones
      --
      -- ini v2.94
     IF nvl(trn_k_global.ref_f_global('MCA_CALCULO_COBERTURA'), trn.cero) =
        trn.uno THEN
       -- v 4.27
         mx('-', 'Calculo por Cobertura nao limpa c2000000');
      ELSE
      --
      DELETE FROM c2000000 c
        WHERE c.cod_cia        = trn_k_global.devuelve('cod_cia')
          AND c.cod_ramo       = trn_k_global.devuelve('cod_ramo')
          AND c.num_cotizacion = trn_k_global.devuelve('num_cotizacion')
          AND c.nom_columna IN
              (SELECT nom_columna
                 FROM tron2000.c2000000 a, tron2000.g2000020 b
                                 WHERE a.cod_cia        = c.cod_cia
                                   AND a.cod_ramo       = c.cod_ramo
                                   AND a.num_cotizacion = c.num_cotizacion
                                   AND a.cod_cia        = b.cod_cia
                                   AND a.cod_ramo       = b.cod_ramo
                                   AND b.tip_nivel      = 3
                                   AND b.cod_cob        NOT IN (281, 201)
                                   AND nom_columna      NOT LIKE ('%#%') -- V 3.65
                                   AND (nom_columna = b.cod_campo OR
                                        nom_columna = b.cod_campo || g_k_pref_simulacion ||
                                        trn_k_global.devuelve('num_simulacion'))); -- v3.31
      END IF;
      -- fim v2.94
      --
      mx('F', 'pp_limpa_coberturas');
      --
   EXCEPTION
     WHEN OTHERS THEN
       --
       mx('F', 'pp_limpa_coberturas - Exception');
       --
   END pp_limpa_coberturas;
   -- }v2.05
   /* ----------------------------------------------------------
   || pp_prepara_globales_calculo:
   || Recupera las globales necesarias para el recalculo de coberturas
   || cuando la cotizacion o poliza ya ya ha sido previamente calculado
   */ ----------------------------------------------------------
   PROCEDURE pp_prepara_globales_calculo
   IS
   --
      l_cod_cia        c2000000.cod_cia       %TYPE;
      l_cod_ramo       c2000000.cod_ramo      %TYPE;
      l_num_cotizacion c2000000.num_cotizacion%TYPE;
      l_tip_act_eco    a2007702_vcr.cod_act_econ_vcr%TYPE;
      l_cod_grupo      a2007702_vcr.cod_grupo %TYPE;
   --
   BEGIN
      --
      mx('I', 'pp_prepara_globales_calculo');
      --
      IF g_tip_mvto_batch = g_k_tip_mvto_batch_cotacao --7
      THEN
         --
         l_cod_cia        := trn_k_global.devuelve('cod_cia');
         l_cod_ramo       := trn_k_global.devuelve('cod_ramo');
         l_num_cotizacion := trn_k_global.devuelve('num_propuesta');
         --
         g_cod_cia        := l_cod_cia;
         g_cod_ramo       := l_cod_ramo;
         g_num_cotizacion := l_num_cotizacion;
         --
         mx('-', 'l_cod_cia='||l_cod_cia);
         mx('-', 'l_cod_ramo='||l_cod_ramo);
         mx('-', 'l_num_cotizacion='||l_num_cotizacion);
         --
         dc_k_a1001800.p_lee(p_cod_cia  => l_cod_cia,
                             p_cod_ramo => l_cod_ramo);
         --
         trn_k_global.asigna('COD_SECTOR', dc_k_a1001800.f_cod_sector);
         --
         trn_k_global.asigna('num_presupuesto', trn.CERO);
         --
         trn_k_global.asigna('num_riesgo', trn.UNO);
         --
         --trn_k_global.devuelve('fec_validez'),'ddmmyyyy');
         --
         trn_k_global.asigna('num_poliza', g_num_cotizacion);

         trn_k_global.asigna('num_spto', trn.CERO);
         trn_k_global.asigna('num_apli', trn.CERO);
         trn_k_global.asigna('num_spto_apli', trn.CERO);
         --
         trn_k_global.asigna('cod_mon', NVL(trn_k_global.ref_f_global('cod_mon'), trn_k_global.cod_mon));
         --
         em_k_c2009030.p_lee(p_cod_cia        => l_cod_cia,
                             p_cod_ramo       => l_cod_ramo,
                             p_num_cotizacion => l_num_cotizacion);
         --
         trn_k_global.asigna('cod_nivel1'        , em_k_c2009030.f_cod_nivel1);
         trn_k_global.asigna('cod_nivel2'        , em_k_c2009030.f_cod_nivel2);
         trn_k_global.asigna('cod_nivel3'        , em_k_c2009030.f_cod_nivel3);
         trn_k_global.asigna('num_poliza_grupo'  , em_k_c2009030.f_num_poliza_grupo);
         trn_k_global.asigna('num_contrato'      , em_k_c2009030.f_num_cotrato);
         trn_k_global.asigna('num_poliza_cliente', NULL);--em_k_c2009030.f_num_poliza_cliente);
         trn_k_global.asigna('num_cotizacion'    , em_k_c2009030.f_num_cotizacion);
         trn_k_global.asigna('fec_efec_poliza'   , TO_CHAR(em_k_c2009030.f_fec_efec_poliza, 'ddmmyyyy'));
         trn_k_global.asigna('fec_vcto_poliza'   , TO_CHAR(em_k_c2009030.f_fec_vcto_poliza, 'ddmmyyyy'));
         trn_k_global.asigna('fec_efec_spto'     , TO_CHAR(em_k_c2009030.f_fec_efec_poliza, 'ddmmyyyy'));
         trn_k_global.asigna('fec_vcto_spto'     , TO_CHAR(em_k_c2009030.f_fec_vcto_poliza, 'ddmmyyyy'));
         trn_k_global.asigna('FEC_VALIDEZ'       , TO_CHAR(SYSDATE,'ddmmyyyy'));
         trn_k_global.asigna('FEC_VALIDEZ_TARIFA', TO_CHAR(SYSDATE,'ddmmyyyy'));
         trn_k_global.asigna('cod_agt'           , em_k_c2009030.f_cod_agt);
         trn_k_global.asigna('fec_emision_spto'   , TO_CHAR(em_k_c2009030.f_fec_efec_poliza, 'ddmmyyyy'));
         --
         trn_k_global.asigna('tip_emision'       , em.TIP_EMISION_POL);
         trn_k_global.asigna('tip_spto'          , em.nueva_produccion);
         trn_k_global.asigna('cod_spto'          , NULL);
         trn_k_global.asigna('sub_cod_spto'      , NULL);
         trn_k_global.asigna('mca_poliza_grupo'  , trn.SI);
         trn_k_global.asigna('mca_riesgo'        , em.TIP_MOD_RIES_ALTA);
         --
         trn_k_global.asigna('cod_idioma'        , NVL(trn_k_global.ref_f_global('cod_idioma'), 'PT'));
         --
         trn_k_global.asigna('DVNUM_QTDE_RISCOS', trn.UNO);
         --
         BEGIN
            --
            l_tip_act_eco := em_k_gen_ws.f_recupera_val_dv (p_cod_cia        => l_cod_cia                       ,
                                                            p_cod_ramo       => l_cod_ramo                      ,
                                                            p_num_cotizacion => em_k_c2009030.f_num_poliza_grupo,
                                                            p_nom_columna    => 'TIP_ACT_ECONOMICA_VCR_TOMA'    );
            --
            IF l_tip_act_eco IS NULL
            THEN
               --
               l_tip_act_eco := em_k_gen_ws.f_recupera_val_dv (p_cod_cia        => l_cod_cia                       ,
                                                               p_cod_ramo       => l_cod_ramo                      ,
                                                               p_num_cotizacion => em_k_c2009030.f_num_poliza_grupo,
                                                               p_nom_columna    => 'TIP_ACT_ECONOMICA_VCR'         );
               --
            END IF;
            --
            em_k_a2007702_vcr.p_lee(p_cod_cia           => l_cod_cia    ,
                                    p_cod_act_econ_vcr  => l_tip_act_eco,
                                    p_cod_grupo         => NULL         ,
                                    p_cod_coletivo      => NULL        );
            --
            l_cod_grupo := em_k_a2007702_vcr.f_cod_grupo;
            --
         EXCEPTION
            WHEN OTHERS
            THEN
               --
               l_cod_grupo := NULL;
               --
         END;
         --
         trn_k_global.asigna('DVCOD_GRUPO_ACT_ECO', NVL(l_cod_grupo, trn_k_df_cmn_nwt_xx_cnn.f_vrb_nam_val('COD_GRUPO_GEN')));
         --
         ea_k_231_coti.p_pre_para_globales_calculo(p_cod_cia        => l_cod_cia       ,
                                                   p_num_cotizacion => l_num_cotizacion);
         --
      ELSE
         --
         NULL;
         --
      END IF;
      --
      mx('F', 'pp_prepara_globales_calculo');
      --
   END pp_prepara_globales_calculo;
   --
   /* ------------------------------------------------------
   || Limpa tabelas para recalculo de dados variaveis de franquia
   */ ------------------------------------------------------
   --
   PROCEDURE pp_limpa_dv_franq
   IS
   BEGIN
      --
      mx('I', 'pp_limpa_dv_franq');
      --
      DELETE FROM c2000020
       WHERE cod_cia        = trn_k_global.cod_cia
         AND cod_ramo       = trn_k_global.ref_f_global('cod_ramo')
         AND num_simulacion = trn_k_global.ref_f_global('num_simulacion')
         AND cod_campo      LIKE (g_k_ini_val_franq_dv || '%');
      --
      DELETE FROM c2000000
       WHERE cod_cia        = trn_k_global.cod_cia
         AND cod_ramo       = trn_k_global.ref_f_global('cod_ramo')
         AND num_cotizacion = trn_k_global.ref_f_global('num_cotizacion')
         AND nom_columna    LIKE (g_k_ini_val_franq_dv || '%');
      --
      DELETE FROM x2990006_vcr
       WHERE cod_cia    = trn_k_global.cod_cia
         AND num_poliza = NVL(trn_k_global.ref_f_global('num_cotizacion'), trn_k_global.ref_f_global('num_poliza'))
         AND num_riesgo = trn.UNO
         AND cod_campo  LIKE (g_k_ini_val_franq_dv || '%');
      --
      mx('F', 'pp_limpa_dv_franq');
      --
   END pp_limpa_dv_franq;
   --
   --
   /* -----------------------------------------
   || pp_inserta_c2000000                     :
   */ -----------------------------------------
   --
   PROCEDURE pp_inserta_c2000000(p_nom_tabla   IN c2000000.nom_tabla  %TYPE,
                                 p_nom_columna IN c2000000.nom_columna%TYPE,
                                 p_val_columna IN c2000000.val_columna%TYPE)
   IS
      --
      l_reg_c2000000  c2000000%ROWTYPE;
      --
   BEGIN
      --
      mx('I', 'pp_inserta_c2000000');
      --
      l_reg_c2000000.cod_cia        := trn_k_global.cod_cia;
      --
      -->l_reg_c2000000.cod_ramo := ea_k_231_utils.g_k_ramo_motor;
      --
      l_reg_c2000000.cod_ramo       := trn_k_global.devuelve('COD_RAMO'); -- 2.52
    IF l_reg_c2000000.cod_ramo IS NULL THEN
    --
    l_reg_c2000000.cod_ramo := ea_k_231_utils.g_k_ramo_motor;
    --
      END IF;
      l_reg_c2000000.num_cotizacion := trn_k_global.devuelve('NUM_COTIZACION');
      --
      l_reg_c2000000.nom_tabla      := p_nom_tabla;
      --
      l_reg_c2000000.nom_columna    := p_nom_columna;
      l_reg_c2000000.cod_fila       := g_k_cod_fila;
      l_reg_c2000000.val_columna    := p_val_columna;
      --
      em_k_c2000000.p_inserta_borrando(p_reg => l_reg_c2000000);
      --
      mx('F', 'pp_inserta_c2000000');
      --
   END pp_inserta_c2000000;
   --
   --
   /* ------------------------------------------------------
   || pp_pre_calculo
   */ ------------------------------------------------------
   PROCEDURE pp_pre_calculo
   IS
   -- ini v2.10
   l_cod_rol_bo        c2000000.val_columna%TYPE := trn.NULO;
   l_mca_analista_bo   VARCHAR2(1)               := trn.NO  ;
   l_num_paso          c2000000.val_columna%TYPE := trn.NULO;
   l_mca_cambio_rf_api c2000000.val_columna%TYPE := trn.NULO; -- 4.48
   -- fim v2.10
   --
   -- v2.33
   FUNCTION fp_mca_cambio_rf RETURN VARCHAR2
   AS
   --
   l_mca_retorno       VARCHAR2(1)        := trn.SI;
   l_existe            BOOLEAN            := FALSE ; --v3.38
   --
   l_cur_ret           SYS_REFCURSOR               ;
   --
   l_mca_renov_outras  a2000020.val_campo     %TYPE;
   l_cod_tip_renov     a2000020.val_campo     %TYPE;
   l_num_cotizacion_rg c2000000.num_cotizacion%TYPE;
   l_nom_columna       c2000000.nom_columna   %TYPE;
   l_val_columna       c2000000.nom_columna   %TYPE; --v3.38
   l_cod_tarifa        c2000000.nom_columna   %TYPE; --v3.38
   --
   l_num_paso_atual    g9999994.num_paso      %TYPE; --v3.54
   l_k_num_paso_recalc g9999994.num_paso      %TYPE; --v3.54
   --
   l_fec_validez_tarifa      c2000000.nom_columna   %TYPE; --v5.28
   l_fec_validez_tarifa_pref c2000000.nom_columna   %TYPE; --v5.28
   --
   BEGIN
      --
      mx('I', 'fp_mca_cambio_rf');
      --
      IF trn_k_global.ref_f_global('mca_cambio_rf') IS NULL
      THEN
        --
        trn_k_global.asigna('mca_cambio_rf', l_mca_retorno);
        --
        mx('l_mca_retorno',l_mca_retorno);
        --
        l_mca_renov_outras := ea_k_231_utils.f_valor_dv('mca_renov_outras');
        --
        mx('l_mca_renov_outras',l_mca_renov_outras);
        --
        IF l_mca_renov_outras IN (ea_k_231_utils.f_recupera_constante(p_cod_cia   => trn_k_global.cod_cia
                                                                     ,p_cod_campo => 'TIP_SEGU_RENOV_MAPFRE')
                                 ,ea_k_231_utils.f_recupera_constante(p_cod_cia   => trn_k_global.cod_cia
                                                                     ,p_cod_campo => 'TIP_SEGU_RENOV_BB'))
        THEN
          --
          ea_k_231_utils.p_devuelve_dato_cotizacion(p_nom_tabla   => ea_k_231_utils.g_k_tabla_dv
                                                   ,p_nom_columna => 'COD_TIP_RENOV'
                                                   ,p_val_campo   => l_cod_tip_renov);
          --
          mx('l_cod_tip_renov',l_cod_tip_renov);
          --
          IF l_cod_tip_renov = ea_k_231_utils.f_recupera_constante(p_cod_cia   => trn_k_global.cod_cia
                                                                  ,p_cod_campo => 'COD_TIP_RENOV_RF')
          THEN
            --
            trn_k_global.asigna('MCA_RENOVACION'     , trn.SI);
            trn_k_global.asigna('MCA_COB_RENOVACION' , trn.SI);
            --
            ea_k_231_utils.p_devuelve_dato_cotizacion(p_nom_tabla   => g_k_tabla_vg
                                                     ,p_nom_columna => 'NUM_COTIZACION_RG'
                                                     ,p_val_campo   => l_num_cotizacion_rg);
            --
            ea_k_231_utils.p_devuelve_dato_cotizacion(p_nom_tabla   => 'G9999994'
                                                     ,p_nom_columna => 'NUM_PASO_ATUAL'
                                                     ,p_val_campo   => l_num_paso_atual); --v3.54
            --
            mx('l_num_cotizacion_rg  :', l_num_cotizacion_rg);
            mx('l_num_paso_atual     :', l_num_paso_atual);
            --
            -- v3.38 ini
            ea_k_231_utils.p_devuelve_dato_cotizacion(p_nom_tabla   => ea_k_231_utils.g_k_tabla_dv
                                                     ,p_nom_columna => 'COD_TARIFA'
                                                     ,p_val_campo   => l_cod_tarifa);
            --
            l_k_num_paso_recalc := ea_k_231_utils.f_recupera_constante(p_cod_cia   => trn_k_global.cod_cia,
                                                                     p_cod_campo => 'NUM_PASO_COT_RECALC');
            --
            mx('l_num_paso_cot_recalc:', l_k_num_paso_recalc);
            --
            IF trn_k_global.ref_f_global('tip_mvto_batch') = ea_k_231_utils.g_k_cotiza_batch
            THEN
              --
              IF trn_k_global.ref_f_global('num_paso')= l_k_num_paso_recalc THEN -- I 4.48
                --
                trn_k_global.p_asigna('MCA_COB_RENOVACION', trn.NO);
                --
                RETURN trn.SI;  --V 4.68 sparra
                --
              ELSIF trn_k_global.ref_f_global('num_paso')= '6' AND      --V 4.47
                    em_k_gen_api.fp_val_convivencia                THEN
                --
                trn_k_global.borra_variable('MCA_CAMBIO_RF');
                trn_k_global.p_asigna('MCA_COB_RENOVACION', trn.NO);--V 4.49
                --
                RETURN trn.SI;  --V 4.68
                --
              END IF; -- I 4.48
              --
            END IF;
            --
            OPEN l_cur_ret FOR WITH c_g92      AS (SELECT NVL(cod_campo_coti
                                                             ,cod_campo) cod_campo
                                                     FROM tron2000.g9999992 g92
                                                    WHERE g92.cod_cia        = trn_k_global.cod_cia
                                                      AND g92.cod_ramo       = NVL(trn_k_global.ref_f_global('cod_ramo')
                                                                                  ,ea_k_231_utils.g_k_ramo_motor)
                                                      AND g92.cod_agt        = g_k_cod_agt_generico
                                                      AND g92.cod_tarifa     = l_cod_tarifa
                                                      AND g92.tip_mvto_batch = ea_k_231_utils.g_k_cotiza_batch
                                                      AND g92.mca_inh        = trn.NO
                                                      AND g92.num_paso       BETWEEN 2 AND 6),
                                    c_dv       AS (SELECT g10.tip_campo tip_campo
                                                        , g10.cod_campo cod_campo
                                                     FROM tron2000.g2000010 g10
                                                        , tron2000.g2000020 g20
                                                    WHERE g10.cod_cia   = trn_k_global.cod_cia
                                                      AND g20.cod_ramo  = NVL(trn_k_global.ref_f_global('cod_ramo')
                                                                             ,ea_k_231_utils.g_k_ramo_motor)
                                                      AND g10.cod_cia   = g20.cod_cia
                                                      AND g10.cod_campo = g20.cod_campo
                                                      AND g10.mca_inh   = g10.mca_inh
                                                      AND g10.mca_inh   = trn.NO
                                                      AND g20.tip_nivel IN (trn.UNO
                                                                           ,em.TIP_NIVEL_RIESGO)),
                                    c_dados_rg AS (SELECT nom_tabla
                                                        , nom_columna
                                                        , DECODE(b.tip_campo
                                                                ,trn.NO
                                                                ,TO_CHAR(TO_NUMBER(a.val_columna,'999999999.00'))
                                                                ,a.val_columna) val_columna
                                                    FROM tron2000.c2000000 a
                                                       , c_dv            b
                                                       , c_g92           c
                                                   WHERE a.cod_cia        = trn_k_global.cod_cia
                                                     AND a.cod_ramo       = NVL(trn_k_global.ref_f_global('cod_ramo')
                                                                               ,ea_k_231_utils.g_k_ramo_motor)
                                                     AND a.num_cotizacion = l_num_cotizacion_rg
                                                     AND a.nom_tabla      IN (ea_k_231_utils.g_k_tabla_dv
                                                                             ,ea_k_231_utils.g_k_tabla_int
                                                                             ,ea_k_231_utils.g_k_tabla_int_vcr
                                                                             ,ea_k_231_utils.g_k_tabla_df)
                                                     AND a.nom_columna    = b.cod_campo (+)
                                                     AND a.nom_columna    = c.cod_campo),
                                    c_dados_rf AS (SELECT nom_tabla
                                                        , nom_columna
                                                        , DECODE(b.tip_campo
                                                                ,trn.NO
                                                                ,TO_CHAR(TO_NUMBER(a.val_columna,'999999999.00'))
                                                                ,a.val_columna) val_columna
                                                    FROM tron2000.c2000000 a
                                                       , c_dv            b
                                                       , c_g92           c
                                                   WHERE a.cod_cia        = trn_k_global.cod_cia
                                                     AND a.cod_ramo       = NVL(trn_k_global.ref_f_global('cod_ramo')
                                                                               ,ea_k_231_utils.g_k_ramo_motor)
                                                     AND a.num_cotizacion = trn_k_global.ref_f_global('num_cotizacion')
                                                     AND a.nom_tabla      IN (ea_k_231_utils.g_k_tabla_dv
                                                                             ,ea_k_231_utils.g_k_tabla_int
                                                                             ,ea_k_231_utils.g_k_tabla_int_vcr
                                                                             ,ea_k_231_utils.g_k_tabla_df)
                                                     AND a.nom_columna    = b.cod_campo (+)
                                                     AND a.nom_columna    = c.cod_campo),
                                    -- v3.54 ini
                                    c_cober_rg AS (SELECT 'A2000040'                                  nom_tabla
                                                        , TO_CHAR(a.cod_cob)                          cod_cob
                                                        , TO_CHAR(a.cod_franquicia)                   cod_franquicia
                                                        , TO_CHAR(a.suma_aseg)                        suma_aseg
                                                        , b.cod_campo                                 cod_campo
                                                        , (SELECT c.val_columna
                                                             FROM c2000000 c
                                                            WHERE a.cod_cia        = c.cod_cia
                                                              AND a.cod_ramo       = c.cod_ramo
                                                              AND a.num_cotizacion = c.num_cotizacion
                                                              AND c.nom_columna    = b.cod_campo)     val_campo
                                                    FROM c2009040_vcr a
                                                       , g2000020     b
                                                   WHERE a.cod_cia        = trn_k_global.cod_cia
                                                     AND a.cod_ramo       = NVL(trn_k_global.ref_f_global('cod_ramo')
                                                                               ,ea_k_231_utils.g_k_ramo_motor)
                                                     AND a.num_cotizacion = l_num_cotizacion_rg
                                                     AND a.num_simulacion = NVL(trn_k_global.ref_f_global('num_simulacion')
                                                                               ,trn.UNO)
                                                     AND a.cod_cia        = b.cod_cia  (+)
                                                     AND a.cod_ramo       = b.cod_ramo (+)
                                                     AND a.cod_cob        = b.cod_cob  (+)
                                                     AND b.cod_campo  (+) NOT LIKE 'VAL_FRANQ%'
                                                     AND l_num_paso_atual = l_k_num_paso_recalc),
                                    c_cober_rf AS (SELECT 'A2000040'                                  nom_tabla
                                                        , TO_CHAR(a.cod_cob)                          cod_cob
                                                        , TO_CHAR(a.cod_franquicia)                   cod_franquicia
                                                        , TO_CHAR(a.suma_aseg)                        suma_aseg
                                                        , b.cod_campo                                 cod_campo
                                                        , (SELECT c.val_columna
                                                             FROM c2000000 c
                                                            WHERE a.cod_cia        = c.cod_cia
                                                              AND a.cod_ramo       = c.cod_ramo
                                                              AND a.num_cotizacion = c.num_cotizacion
                                                              AND c.nom_columna    = b.cod_campo)     val_campo
                                                    FROM c2009040_vcr a
                                                       , g2000020     b
                                                   WHERE a.cod_cia        = trn_k_global.cod_cia
                                                     AND a.cod_ramo       = NVL(trn_k_global.ref_f_global('cod_ramo')
                                                                               ,ea_k_231_utils.g_k_ramo_motor)
                                                     AND a.num_cotizacion = trn_k_global.ref_f_global('num_cotizacion')
                                                     AND a.num_simulacion = NVL(trn_k_global.ref_f_global('num_simulacion')
                                                                               ,trn.UNO)
                                                     AND a.cod_cia        = b.cod_cia  (+)
                                                     AND a.cod_ramo       = b.cod_ramo (+)
                                                     AND a.cod_cob        = b.cod_cob  (+)
                                                     AND b.cod_campo  (+) NOT LIKE 'VAL_FRANQ%'
                                                     AND l_num_paso_atual = l_k_num_paso_recalc)
                                    --v3.54 fim
                               SELECT e.nom_columna
                                     ,e.val_columna
                                 FROM (SELECT *
                                        FROM c_dados_rg d
                                       --
                                       MINUS
                                       --
                                      SELECT x.nom_tabla
                                           , x.nom_columna
                                           , NVL(x.val_columna
                                                ,z.val_columna) val_columna
                                        FROM c_dados_rf x
                                           , c_dados_rg z
                                       WHERE x.nom_tabla   = z.nom_tabla
                                         AND x.nom_columna = z.nom_columna) e
                                WHERE e.nom_columna NOT IN (SELECT row_nam
                                                              FROM tron2000.df_cmn_nwt_xx_vrb_cnc
                                                             WHERE cmp_val = trn_k_global.cod_cia
                                                               AND lob_val = NVL(trn_k_global.ref_f_global('cod_ramo')
                                                                                ,ea_k_231_utils.g_k_ramo_motor)
                                                               AND vrb_nam = 'CAMPOS_RENOV_EXCEP')
                               -- v3.54 ini
                               UNION
                               --
                               SELECT SUBSTR(cod_campo || cod_cob
                                            ,1,30)              nom_columna
                                    , NVL2(val_campo
                                          ,val_campo||'-'
                                          ,NULL) || suma_aseg   val_columna
                                 FROM (SELECT *
                                         FROM c_cober_rg
                                        --
                                        MINUS
                                        --
                                       SELECT *
                                         FROM c_cober_rf) f
                               --
                               UNION
                               --
                               SELECT SUBSTR(cod_campo || cod_cob
                                            ,1,30)              nom_columna
                                    , NVL2(val_campo
                                          ,val_campo||'-'
                                          ,NULL) || suma_aseg   val_columna
                                 FROM (SELECT *
                                         FROM c_cober_rf
                                        --
                                        MINUS
                                        --
                                       SELECT *
                                         FROM c_cober_rg) g;
                               --v3.54 fim;
            --
            LOOP
              --
              FETCH l_cur_ret INTO l_nom_columna
                                  ,l_val_columna;
              --
              IF NOT l_existe
              THEN
                --
                l_existe := l_cur_ret%FOUND;
                --
              END IF;
              --
              EXIT WHEN l_cur_ret%NOTFOUND;
              --
              mx('-',l_nom_columna || ': ' || l_val_columna);
              --
            END LOOP;
            --
            CLOSE l_cur_ret;
            --
            IF NOT l_existe
            THEN
              --
              l_mca_retorno := trn.NO;
              --
            END IF;
            --
            -- 3.29 fim
            --
            trn_k_global.asigna('mca_cambio_rf', l_mca_retorno);
            --
            mx('l_mca_retorno',l_mca_retorno);
            --
            IF l_mca_retorno = trn.NO
            THEN
              --
              p_ws_processa_msg_ct(p_campo_error => 'COD_RETORNO_RF'
                                  ,p_cod_error   => 100
                                  ,p_obs_error   => ss_k_mensaje.f_solo_texto_idioma(p_cod_mensaje => 20099360
                                                                                    ,p_cod_idioma  => trn_k_global.cod_idioma));
              --
            ELSE --v5.28
              --
              --v5.28 ini
              BEGIN
                --
                ea_k_231_utils.p_devuelve_dato_cotizacion(p_nom_tabla   => ea_k_231_coti.g_k_tabla_simulacion
                                                         ,p_nom_columna => 'FEC_VALIDEZ_TARIFA' ||
                                                                            g_k_pref_simulacion ||
                                                                            NVL(trn_k_global.ref_f_global('num_simulacion')
                                                                               ,trn.UNO)
                                                         ,p_val_campo   => l_fec_validez_tarifa_pref);
                --
                ea_k_231_utils.p_devuelve_dato_cotizacion(p_nom_tabla   => ea_k_231_utils.g_k_tabla_dv
                                                         ,p_nom_columna => 'FEC_VALIDEZ_TARIFA'
                                                         ,p_val_campo   => l_fec_validez_tarifa);
                --
                mx('-', 'l_fec_validez_tarifa_pref: ' || l_fec_validez_tarifa_pref);
                mx('-', 'l_fec_validez_tarifa:      ' || l_fec_validez_tarifa     );
                --
                IF  NVL(l_fec_validez_tarifa_pref, l_fec_validez_tarifa) <> l_fec_validez_tarifa
                THEN
                  --
                  l_fec_validez_tarifa := TO_CHAR(TO_DATE(GREATEST(TO_CHAR(TO_DATE(l_fec_validez_tarifa_pref, trn.FORMATO_FECHA),'J')
                                                                  ,TO_CHAR(TO_DATE(l_fec_validez_tarifa     , trn.FORMATO_FECHA),'J'))
                                                         ,'J')
                                                 ,trn.FORMATO_FECHA);
                  --
                  mx('-', 'l_fec_validez_tarifa:      ' || l_fec_validez_tarifa);
                  --
                  pp_inserta_c2000000(p_nom_tabla   => ea_k_231_coti.g_k_tabla_simulacion
                                     ,p_nom_columna => 'FEC_VALIDEZ_TARIFA' ||
                                                        g_k_pref_simulacion ||
                                                        NVL(trn_k_global.ref_f_global('num_simulacion')
                                                           ,trn.UNO)
                                     ,p_val_columna => l_fec_validez_tarifa);
                  --
                  pp_inserta_c2000000(p_nom_tabla   => ea_k_231_utils.g_k_tabla_dv
                                     ,p_nom_columna => 'FEC_VALIDEZ_TARIFA'
                                     ,p_val_columna => l_fec_validez_tarifa);
                  --
                END IF;
                --
              EXCEPTION
                WHEN OTHERS
                THEN
                  --
                  mx('E', 'Erro ao atualizar FEC_VALIDEZ_TARIFA');
                  --
              END;
              --v5.28 fim
              --
            END IF;
            --
          END IF;
          --
        END IF;
        --
      END IF;
      --
      mx('F', 'fp_mca_cambio_rf');
      --
      RETURN l_mca_retorno;
      --
   EXCEPTION
      WHEN OTHERS
      THEN
         --
         mx('F', 'exception - fp_mca_cambio_rf');
         --
         RETURN l_mca_retorno;
         --
   END fp_mca_cambio_rf;
   --
   BEGIN
      --
      mx('I', 'pp_pre_calculo');
      --
      IF (trn_k_global.devuelve('NUM_POLIZA_GRUPO') IS NULL
      OR trn_k_global.devuelve('NUM_POLIZA_GRUPO') = '0'
      OR trn_k_global.devuelve('NUM_POLIZA_GRUPO') = '9999999999999') THEN
        --
        trn_k_global.asigna('mca_poliza_grupo', trn.NO);
        --
      ELSE
         --
         pp_prepara_globales_calculo;--jwolff
         --
      END IF;
      --
      ea_k_231_utils.p_devuelve_dato_cotizacion( p_nom_tabla   => g_k_tabla_vg  -- I 4.48
                                                ,p_nom_columna => 'MCA_CAMBIO_RF'
                                                ,p_val_campo   => l_mca_cambio_rf_api);
      --
      IF NVL(fp_mca_cambio_rf, trn.SI) = trn.SI OR
         NVL(l_mca_cambio_rf_api , trn.NO ) = trn.SI --v2.33 / 4.49
      THEN
        --
        mx('fp_mca_cambio_rf if',fp_mca_cambio_rf); -- F 4.48
        --ini v2.10
        --
        IF trn_k_global.ref_f_global('tip_mvto_batch')               = ea_k_231_utils.g_k_cotiza_batch AND
           NVL(trn_k_global.ref_f_global('mca_poliza_grupo'),trn.NO) = trn.NO
        THEN
          --
          ea_k_231_utils.p_devuelve_dato_cotizacion(p_nom_tabla   => g_k_tabla_vg
                                                   ,p_nom_columna => 'COD_ROL_BO'
                                                   ,p_val_campo   => l_cod_rol_bo);
          --
          l_num_paso := trn_k_global.ref_f_global('NUM_PASO');
          --
          IF l_cod_rol_bo IS NOT NULL AND
             l_num_paso   = ea_k_231_utils.f_recupera_constante(p_cod_cia   => trn_k_global.cod_cia
                                                               ,p_cod_campo => 'NUM_PASO_COTIZACION')
          THEN
            --
            l_mca_analista_bo := NVL(em_k_g2992159.f_analista_bo(p_cod_rol_bo => l_cod_rol_bo), trn.NO);
            --
          END IF;
          --
        END IF;
        --
        IF l_cod_rol_bo      IS NULL  OR
           l_mca_analista_bo = trn.NO
        THEN
          --
          ea_k_231_cob.p_carro_reserva;
          --
          pp_limpa_coberturas; -- v2.05
          --
        END IF;
        --
        IF NVL(l_mca_cambio_rf_api , trn.NO ) <> trn.SI THEN -- I 4.48
          --
          pp_limpa_dv_franq; --v3.23
          --
        END IF;  -- F 4.48
        --
        -- fim v2.10
        --
        ea_k_231_cob.p_num_idade; --1.44
        --
        ea_k_231_cob.p_num_idade_veic;
        --
        ea_k_231_dv.p_v_mca_concessionaria;
        --
        ea_k_231_cob.p_v_tip_cob_assistencia;
        --
        pp_v_contrat_automais_casa;
        --
        pp_v_contrat_obj_transp;
        --
        pp_v_carta_verde; -- 1.53
        --
        pp_v_receita_garantida; -- 3.18
        --
      END IF;
      --
      mx('F', 'pp_pre_calculo');
      --
   END pp_pre_calculo;
   --
   /* -------------------------------
   ||  pp_asigna_globales_defecto :
   */ -------------------------------
   --
   PROCEDURE pp_asigna_globales_defecto IS
      --
      l_cod_cia            a2000030.cod_cia%TYPE;
      l_cod_ramo           a2000030.cod_ramo%TYPE;
      l_cod_nivel3         a2000030.cod_nivel3%TYPE;
      l_num_cotizacion     c2000000.num_cotizacion%TYPE;
      --
      l_cod_agt            a1001332.cod_agt%TYPE := NULL;
      l_fec_validez        a1002150.fec_validez%TYPE := NULL;
      l_fec_efec_poliza_20 a2000020.cod_campo%TYPE:= NULL;
      l_fec_vcto_poliza_20 a2000020.cod_campo%TYPE:= NULL;
      l_fec_efec_poliza    a2000030.fec_efec_poliza%TYPE:= NULL;
      l_fec_vcto_poliza    a2000030.fec_vcto_poliza%TYPE:= NULL;
      --
      l_reg_a1000702       a1000702%ROWTYPE := NULL;
      --
   BEGIN
      --
      mx('I', 'p_asigna_globales_defecto');
      --
      l_cod_cia         := trn_k_global.cod_cia;
      l_cod_ramo        := trn_k_global.devuelve('COD_RAMO');
      l_cod_agt         := trn_k_global.devuelve('COD_AGT');
      l_num_cotizacion  := trn_k_global.ref_f_global('NUM_COTIZACION');
      --
      IF l_num_cotizacion IS NOT NULL THEN
         --
         ea_k_231_utils.p_devuelve_dato_cotizacion(ea_k_231_coti.g_k_tabla_df,
                                                   'FEC_EFEC_POLIZA',
                                                   l_fec_efec_poliza_20);
         --
         l_fec_efec_poliza := TO_DATE(l_fec_efec_poliza_20,trn.FORMATO_FECHA);
         --
         ea_k_231_utils.p_devuelve_dato_cotizacion(ea_k_231_coti.g_k_tabla_df,
                                                   'FEC_VCTO_POLIZA',
                                                   l_fec_vcto_poliza_20);
         --
         l_fec_vcto_poliza := TO_DATE(l_fec_vcto_poliza_20,trn.FORMATO_FECHA);
         --
      END IF;
      --
      l_fec_efec_poliza   := NVL(l_fec_efec_poliza, TRUNC(SYSDATE));
      l_fec_vcto_poliza   := NVL(l_fec_vcto_poliza, ADD_MONTHS(l_fec_efec_poliza,trn.MESES_ANIO));
      --
      dc_k_a1001800.p_lee(p_cod_cia  => l_cod_cia,
                          p_cod_ramo => l_cod_ramo);
      --
      trn_k_global.asigna('COD_SECTOR', dc_k_a1001800.f_cod_sector);
      --
      IF g_mca_valida IS NULL THEN
        --
        l_cod_nivel3    := dc_f_a1001332(p_cod_cia         => l_cod_cia,
                                         p_cod_act_tercero => dc.ACT_AGENTE,
                                         p_cod_agt         => l_cod_agt,
                                         p_fec_validez     => l_fec_efec_poliza).cod_nivel3;
        --
        l_reg_a1000702  := dc_f_a1000702(p_cod_cia     => l_cod_cia,
                                         p_cod_nivel3  => l_cod_nivel3);
        --
      END IF;
      --
      l_fec_validez   := ea_k_231_utils.f_max_fec_validez(p_cod_cia     => l_cod_cia,
                                                          p_cod_ramo    => l_cod_ramo,
                                                          p_fec_validez => l_fec_efec_poliza);
      --
      mx('-', '10');
      trn_k_global.asigna('COD_NIVEL1'                 , l_reg_a1000702.cod_nivel1                      );
      trn_k_global.asigna('COD_NIVEL2'                 , l_reg_a1000702.cod_nivel2                      );
      trn_k_global.asigna('COD_NIVEL3'                 , l_reg_a1000702.cod_nivel3                      );
      trn_k_global.asigna('COD_CANAL1'                 , dc.COD_CANAL1_GEN                             );
      trn_k_global.asigna('COD_CANAL2'                 , dc.COD_CANAL2_GEN                              );
      trn_k_global.asigna('COD_CANAL3'                 , dc.COD_CANAL3_GEN                              );
      trn_k_global.asigna('fec_validez'                , TO_CHAR(l_fec_validez,trn.FORMATO_FECHA)       );
      trn_k_global.asigna('TIP_EMISION'                , em.TIP_EMISION_POL                             );
      trn_k_global.asigna('TIP_MVTO_BATCH'             , ea_k_231_utils.g_k_cotiza_batch                );
      --trn_k_global.asigna('NUM_POLIZA_GRUPO'           , trn.NULO                                      );
      trn_k_global.asigna('NUM_CONTRATO'               , trn.NULO                                      );
      --
      IF trn_k_global.ref_f_global('NUM_POLIZA_GRUPO') <> trn.NULO THEN
        --
        pp_inserta_c2000000('A2000500','NUM_POLIZA_GRUPO',trn_k_global.devuelve('NUM_POLIZA_GRUPO'));
        --
      END IF;
      --
      trn_k_global.asigna('NUM_POLIZA_CLIENTE'         , trn.NULO                                       );
      trn_k_global.asigna('NUM_POLIZA'                 , trn.NULO                                      );
      trn_k_global.asigna('NUM_PRESUPUESTO'            , trn.NULO                                       );
      trn_k_global.asigna('NUM_APLI'                   , trn.NULO                                      );
      trn_k_global.asigna('NUM_RIESGO'                 , trn.UNO                                        );
      trn_k_global.asigna('MCA_RIESGO'                 , em.TIP_MOD_RIES_ALTA                           );
      trn_k_global.asigna('NUM_SPTO'                   , trn.CERO                                       );
      trn_k_global.asigna('NUM_SPTO_APLI'              , trn.CERO                                       );
      trn_k_global.asigna('TIP_SPTO'                   , em.NUEVA_EMISION                               );
      trn_k_global.asigna('COD_SPTO'                   , trn.NULO                                      );
      trn_k_global.asigna('SUB_COD_SPTO'               , trn.NULO                                      );
      trn_k_global.asigna('NUM_SUBCONTRATO'            , trn.NULO                                      );
      trn_k_global.asigna('COD_MON'                    , trn_k_global.cod_mon                          );
      trn_k_global.asigna('COD_COB'                    , em.COD_COB_GEN                                );
      trn_k_global.asigna('FEC_EFEC_POLIZA'            , TO_CHAR(l_fec_efec_poliza,trn.FORMATO_FECHA)  );
      trn_k_global.asigna('FEC_EFEC_SPTO'              , TO_CHAR(l_fec_efec_poliza,trn.FORMATO_FECHA)  );
      trn_k_global.asigna('FEC_EMISION_SPTO'           , TO_CHAR(trunc(SYSDATE),trn.FORMATO_FECHA)     ); -- v2.37 | 2.27M
      trn_k_global.asigna('FEC_VCTO_POLIZA'            , TO_CHAR(l_fec_vcto_poliza,trn.FORMATO_FECHA)  );
      trn_k_global.asigna('FEC_VCTO_SPTO'              , TO_CHAR(l_fec_vcto_poliza,trn.FORMATO_FECHA)  );
      --
      -- variaveis para recuperar da cotacao
      --
      trn_k_global.asigna('DVTIP_SEGMENTO'             , trn_k_df_cmn_nwt_xx_cnn.f_vrb_nam_val('DVTIP_SEGMENTO_DEFEC')          );
      trn_k_global.asigna('TIP_SEGMENTO'               , trn_k_df_cmn_nwt_xx_cnn.f_vrb_nam_val('DVTIP_SEGMENTO_DEFEC')          );
      trn_k_global.asigna('JBTIP_SEGMENTO'             , trn_k_df_cmn_nwt_xx_cnn.f_vrb_nam_val('DVTIP_SEGMENTO_DEFEC')          );
      trn_k_global.asigna('MCA_CAMPANHA_VCR'           , trn_k_df_cmn_nwt_xx_cnn.f_vrb_nam_val('MCA_CAMPANHA_VCR_DEFEC')        );
      trn_k_global.asigna('MCA_FISICO'                 , trn_k_df_cmn_nwt_xx_cnn.f_vrb_nam_val('MCA_FISICO_DEFEC')              );
      trn_k_global.asigna('DVCOD_NIVEL_BONUS_MALUS'    , trn_k_df_cmn_nwt_xx_cnn.f_vrb_nam_val('DVCOD_NIVEL_BONUS_MALUS_DEFEC') );
      --
      -- variaveis para recuperar na base
      --
      trn_k_global.asigna('DVCOD_CANAL3'                 , dc.COD_CANAL3_GEN                                                       );
      --trn_k_global.asigna('NUM_IDADE'                    , trn_k_df_cmn_nwt_xx_cnn.f_vrb_nam_val('NUM_IDADE_DEFEC')                );
      trn_k_global.asigna('DVCOD_ZONA_TARIFA'            , trn_k_df_cmn_nwt_xx_cnn.f_vrb_nam_val('DVCOD_ZONA_TARIFA_DEFEC')        );
      trn_k_global.asigna('DVCOD_CONFIGURACAO'           , trn_k_df_cmn_nwt_xx_cnn.f_vrb_nam_val('DVCOD_CONFIGURACAO_DEFEC')       );
      trn_k_global.asigna('DVCOD_REPARABILIDADE'         , trn_k_df_cmn_nwt_xx_cnn.f_vrb_nam_val('DVCOD_REPARABILIDADE_DEFEC')     );
      trn_k_global.asigna('DVMCA_VIDRO_ELETRICO'         , trn_k_df_cmn_nwt_xx_cnn.f_vrb_nam_val('DVMCA_VIDRO_ELETRICO_DEFEC')     );
      trn_k_global.asigna('DVTIP_CAJA_CAMBIO'            , trn_k_df_cmn_nwt_xx_cnn.f_vrb_nam_val('DVTIP_CAJA_CAMBIO_DEFEC')        );
      trn_k_global.asigna('DVMCA_DIRECAO_HIDRAULICA'     , trn_k_df_cmn_nwt_xx_cnn.f_vrb_nam_val('DVMCA_DIRECAO_HIDRAULICA_DEFEC') );
      trn_k_global.asigna('DVTIP_COMBUSTIVEL'            , trn_k_df_cmn_nwt_xx_cnn.f_vrb_nam_val('DVTIP_COMBUSTIVEL_DEFEC')        );
      trn_k_global.asigna('DVNUM_SCORE_RISCO'            , trn_k_df_cmn_nwt_xx_cnn.f_vrb_nam_val('DVNUM_SCORE_RISCO_DEFEC')        );
      trn_k_global.asigna('DVNUM_PUERTAS'                , trn_k_df_cmn_nwt_xx_cnn.f_vrb_nam_val('DVNUM_PUERTAS_DEFEC')            );
      trn_k_global.asigna('DVTIP_CLASSIFICACAO_CORRECTOR', trn_k_df_cmn_nwt_xx_cnn.f_vrb_nam_val('DVTIP_CLASSIFICACAO_COR_DEFEC')  );
      trn_k_global.asigna('DVNUM_SCORE_TOMADOR'          , trn_k_df_cmn_nwt_xx_cnn.f_vrb_nam_val('DVNUM_SCORE_TOMADOR_DEFEC')      );
      trn_k_global.asigna('DVMCA_GARAGEM_FECHADO'        , trn_k_df_cmn_nwt_xx_cnn.f_vrb_nam_val('DVMCA_GARAGEM_FECHADO_DEFEC')    );
      trn_k_global.asigna('DVMCA_GARAGEM_TRABALHO'       , trn_k_df_cmn_nwt_xx_cnn.f_vrb_nam_val('DVMCA_GARAGEM_TRABALHO_DEFEC')   );
      trn_k_global.asigna('DVTIP_RES_PRINC_COND'         , trn_k_df_cmn_nwt_xx_cnn.f_vrb_nam_val('DVTIP_RES_PRINC_COND_DEFEC')     );
      trn_k_global.asigna('FEC_TRATAMIENTO'              , TO_CHAR(trunc(SYSDATE),trn.FORMATO_FECHA)                               ); -- v2.37|2.27M
      trn_k_global.asigna('COD_ACT_TERCERO'              , trn_k_df_cmn_nwt_xx_cnn.f_vrb_nam_val('COD_ACT_TERCERO_DEFEC')          );
      --I 2.50
      IF nvl(trn_k_global.ref_f_global('num_paso'), 0) <> 16 THEN
        --
        IF trn_k_global.devuelve('COD_TARIFA') IN (23111, 207, 213, 214, 215) THEN --v3.46
           NULL;
           --trn_k_global.asigna('COD_TARIFA'                   , trn_k_df_cmn_nwt_xx_cnn.f_vrb_nam_val('COD_TARIFA_DEFEC')               );
        ELSE
           trn_k_global.asigna('COD_TARIFA'                   , trn_k_df_cmn_nwt_xx_cnn.f_vrb_nam_val('COD_TARIFA_DEFEC')               );

        END IF;
        --
        trn_k_global.asigna('TIP_PRODUTO'                  , trn_k_df_cmn_nwt_xx_cnn.f_vrb_nam_val('TIP_PRODUTO_DEFEC')              );
        trn_k_global.asigna('DVTIP_PRODUTO'                , trn_k_df_cmn_nwt_xx_cnn.f_vrb_nam_val('DVTIP_PRODUTO_DEFEC')            );
      --
    ELSE
      --
        trn_k_global.asigna('COD_TARIFA',
                          case WHEN
                          trn_k_global.devuelve('COD_TARIFA') = 224 THEN 215 WHEN
                          trn_k_global.devuelve('COD_TARIFA') = 226 THEN 207 WHEN
                          trn_k_global.devuelve('COD_TARIFA') = 228 THEN 213 WHEN
                          trn_k_global.devuelve('COD_TARIFA') = 229 THEN 214 END);
      --
      END IF;
      --F 2.50
      trn_k_global.asigna(em.PREFIJO_DATOS_VARIABLES||'fec_validez_tarifa',TO_CHAR(l_fec_efec_poliza,trn.FORMATO_FECHA) );
      --
      --trn_k_global.asigna('MCA_PERFIL'                 , trn_k_df_cmn_nwt_xx_cnn.f_vrb_nam_val('MCA_PERFIL_DEFECTO')             );
      --
      pp_asigna('COD_IDIOMA', g_k_cod_idioma);
      --
      pp_asigna('COD_USR', g_cod_usr_automatico);
      --
      mx('F', 'p_asigna_globales_defecto');
      --
   END pp_asigna_globales_defecto;
   --
   /* -----------------------------------------
   || pp_inicializa_variables_spto             :
   */ -----------------------------------------
   --
   PROCEDURE pp_inicializa_variables_spto
   IS
   --
   BEGIN
      --
      mx('I', 'pp_inicializa_variables_spto');
      --
      g_cod_cia       := fp_ref_devuelve_n('cod_cia')      ;
      g_cod_ramo      := fp_ref_devuelve_n('cod_ramo')     ;
      g_num_poliza    := fp_ref_devuelve_c('num_propuesta');
      g_num_spto      := fp_ref_devuelve_n('num_spto')     ;
      g_num_apli      := fp_ref_devuelve_n('num_apli')     ;
      g_num_spto_apli := fp_ref_devuelve_n('num_spto_apli');
      --
      mx('F', 'pp_inicializa_variables_spto');
      --
   END pp_inicializa_variables_spto;
   --
   /* ------------------------------------------------------
   || pp_asgina_globales_spto
   */ ------------------------------------------------------
   PROCEDURE pp_asgina_globales_spto
   IS
   --
   l_fec_validez        a1002150.fec_validez%TYPE := NULL;
   --
   BEGIN
      --
      mx('I', 'pp_asgina_globales_spto');
      --
     -- pp_asigna('COD_RAMO',           NVL(fp_devuelve_val_coti('LLCOD_RAMO'), EM.cod_ramo_gen));
      pp_asigna('COD_CIA',            trn_k_global.cod_cia);
      pp_asigna('COD_RAMO',           NVL(trn_k_global.devuelve('COD_RAMO'), EM.cod_ramo_gen));
      pp_asigna('COD_MON',            NVL(fp_devuelve_val_coti('DFCOD_MON'), trn_k_global.cod_mon));
      --
      pp_asigna('COD_NIVEL1',         NVL(fp_devuelve_val_coti('DFCOD_NIVEL1'), DC.cod_nivel1_gen));
      pp_asigna('COD_NIVEL2',         NVL(fp_devuelve_val_coti('DFCOD_NIVEL2'), DC.cod_nivel2_gen));
      pp_asigna('COD_NIVEL3',         NVL(fp_devuelve_val_coti('DFCOD_NIVEL3'), DC.cod_nivel3_gen));
      pp_asigna('COD_NIVEL3_CAPTURA', fp_devuelve_val_coti('DFCOD_NIVEL3_CAPTURA')                );
      --
      pp_asigna('TIP_PRODUTO',        fp_devuelve_val_coti('TIP_PRODUTO')       );
      pp_asigna('COD_COB',            em.COD_COB_GEN                            );
      pp_asigna('TIP_EMISION',        em.TIP_EMISION_SPTO                       );
      pp_asigna('FEC_EMISION_SPTO',   fp_devuelve_val_coti('DFFEC_EMISION_SPTO'));
      pp_asigna('FEC_EFEC_POLIZA',    fp_devuelve_val_coti('DFFEC_EFEC_POLIZA') );
      pp_asigna('FEC_VCTO_POLIZA',    fp_devuelve_val_coti('DFFEC_VCTO_POLIZA') );
      pp_asigna('FEC_EFEC_SPTO',      fp_devuelve_val_coti('DFFEC_EFEC_SPTO')   );
      pp_asigna('FEC_VCTO_SPTO',      fp_devuelve_val_coti('DFFEC_VCTO_SPTO')   );
      --
      pp_asigna('FEC_VALIDEZ',        fp_devuelve_val_coti('DFFEC_VALIDEZ'));
      --
      pp_asigna('MCA_CAMPANHA',       fp_devuelve_val_coti('MCA_CAMPANHA'));
      pp_asigna('MCA_CAMPANHA_VCR',   fp_devuelve_val_coti('MCA_CAMPANHA'));
      pp_asigna('COD_CAMPANHA',       fp_devuelve_val_coti('COD_CAMPANHA'));
      pp_asigna('COD_CAMPANHA_VCR',   fp_devuelve_val_coti('COD_CAMPANHA'));
      pp_asigna('TIP_SEGMENTO',       fp_devuelve_val_coti('TIP_SEGMENTO'));
      --
      pp_asigna('COD_CANAL1',         NVL(fp_devuelve_val_coti('COD_CANAL1'), DC.cod_canal1_gen));
      pp_asigna('COD_CANAL2',         NVL(fp_devuelve_val_coti('COD_CANAL2'), DC.cod_canal2_gen));
      pp_asigna('COD_CANAL3',         NVL(fp_devuelve_val_coti('COD_CANAL3'), DC.cod_canal3_gen));
      --
      pp_asigna('COD_SECTOR',         fp_devuelve_val_coti('DFCOD_SECTOR'))                        ;
      --pp_asigna('COD_AGT',            NVL(fp_devuelve_val_coti('DFCOD_AGT'), g_k_cod_agt_generico));
      pp_asigna('NUM_POLIZA'           , fp_ref_devuelve_c('NUM_COTIZACION'));
      pp_asigna('NUM_SPTO'             , fp_devuelve_val_coti('DFNUM_SPTO'));
      --
      pp_asigna('NUM_APLI'             , trn.CERO              );
      pp_asigna('NUM_RIESGO'           , fp_devuelve_val_coti('RINUM_RIESGO'));
      pp_asigna('NUM_RIESGO'           , trn.UNO               );
      pp_asigna('NUM_SPTO_APLI'        , trn.CERO              );
      pp_asigna('TIP_SPTO'             , em.INDETERMINADO      );
      pp_asigna('COD_SPTO'             , g_k_cod_spto          );
      pp_asigna('SUB_COD_SPTO'         , trn.CERO              );
      pp_asigna('NUM_SUBCONTRATO'      , em.NUM_SUBCONTRATO_GEN);
      pp_asigna('COD_RAMO_CONTRACTO'   , em.COD_RAMO_GEN       );
      --
      pp_asigna('FEC_VALIDEZ_CONTRACTO', fp_devuelve_val_coti('FEC_VALIDEZ_TARIFA'));
      pp_asigna('FEC_VALIDEZ_TARIFA'   , fp_devuelve_val_coti('FEC_VALIDEZ_TARIFA'));
      pp_asigna('DVFEC_VALIDEZ_TARIFA' , fp_devuelve_val_coti('FEC_VALIDEZ_TARIFA'));
      --
      pp_asigna('MCA_RIESGO',         NVL(fp_devuelve_val_coti('RIMCA_RIESGO'), em.TIP_MOD_RIES_MODIFICACION));
      --
      pp_asigna('COD_OPERADOR_AGT'  , NVL(fp_devuelve_val_coti('DFCOD_AGT'), g_k_cod_agt_generico)            );
      pp_asigna('NUM_POLIZA_CLIENTE', NVL(fp_devuelve_val_coti('DFNUM_POLIZA_CLIENTE'),fp_devuelve_campo_coti('LLNUM_POLIZA_CLIENTE')));
      pp_asigna('NUM_POLIZA_GRUPO'  , NVL(fp_devuelve_val_coti('DFNUM_POLIZA_GRUPO'),  fp_devuelve_campo_coti('LLNUM_POLIZA_GRUPO')))  ;
      pp_asigna('NUM_CONTRATO'      , NVL(fp_devuelve_val_coti('DFNUM_CONTRATO'),      fp_devuelve_campo_coti('LLNUM_CONTRATO')))      ;
      pp_asigna('NUM_SUBCONTRATO'   , NVL(fp_devuelve_val_coti('DFNUM_SUBCONTRATO'),   fp_devuelve_campo_coti('LLNUM_SUBCONTRATO')))   ;
      --
      pp_asigna('COD_ACT_TERCERO',    fp_devuelve_val_coti('TECOD_ACT_TERCERO21'));
      --
      pp_asigna('DVMCA_BLINDAGEM'   , fp_devuelve_val_coti('MCA_BLINDAGEM'));
      pp_asigna('MCA_BLINDAGEM'     , fp_devuelve_val_coti('MCA_BLINDAGEM'));
      --
      pp_asigna('COD_IDIOMA', g_k_cod_idioma);
      --
      pp_asigna('COD_USR', g_cod_usr_automatico);
      --
      l_fec_validez   := ea_k_231_utils.f_max_fec_validez(p_cod_cia     => trn_k_global.cod_cia,
                                                          p_cod_ramo    => fp_devuelve_n('COD_RAMO'),
                                                          p_fec_validez => TRUNC(SYSDATE));
      --
      pp_asigna('FEC_VALIDEZ',l_fec_validez);
      --
      IF trn_k_df_cmn_nwt_xx_vrb_cnc.f_row_val_exist(p_vrb_nam => 'NUM_PASO_SPTO_EFECTIVAR'         ,
                                                     p_cnc_vrb_val => NVL(fp_ref_devuelve_n('NUM_PASO'),
                                                                      g_k_num_paso_generico        ))
      THEN
        --
        pp_asigna('MCA_COTIZACION_SUPLEMENTO',trn.NO);
        g_mca_coti_spto := trn.NO;
        --
      ELSE
        --
        pp_asigna('MCA_COTIZACION_SUPLEMENTO',trn.SI);
        g_mca_coti_spto := trn.SI;
        --
      END IF;
      --
      mx('F', 'pp_asgina_globales_spto');
      --
   END pp_asgina_globales_spto;
   --
   /* ------------------------------------------------------
   || pp_asigna_globales_clave;
   */ ------------------------------------------------------
   PROCEDURE pp_asigna_globales_clave
   IS
   BEGIN
      --
      mx('I', 'pp_asigna_globales_clave');
      --
      pp_asigna('COD_USR', g_cod_usr_automatico);
      pp_asigna('FEC_TRATAMIENTO',fp_devuelve_val_coti('TEFEC_TRATAMIENTO'));
      pp_asigna(EM.PREFIJO_DATOS_VARIABLES||'TIP_SEGMENTO', fp_devuelve_val_coti('TIP_SEGMENTO'));
      pp_asigna(EM.PREFIJO_DATOS_VARIABLES||'FEC_VALIDEZ_TARIFA',fp_devuelve_val_coti('FEC_VALIDEZ_TARIFA'));
      pp_asigna(EM.PREFIJO_DATOS_VARIABLES||'TIP_MERC_DETER',fp_devuelve_val_coti('TIP_MERC_DETER'));
      pp_asigna(EM.PREFIJO_DATOS_VARIABLES||'VAL_SUB_MODELO',fp_devuelve_val_coti('VAL_SUB_MODELO'));
      pp_asigna('NUM_SPTO',fp_devuelve_val_coti('DFNUM_SPTO'));
      pp_asigna('TIP_DOCUM',fp_devuelve_val_coti('TTTIP_DOCUM21')); --1.44
      pp_asigna(EM.PREFIJO_DATOS_VARIABLES||'COD_ZONA_TARIFA',fp_devuelve_val_coti('COD_ZONA_TARIFA'));
      pp_asigna(EM.PREFIJO_DATOS_VARIABLES||'COD_USO_VEHI',fp_devuelve_val_coti('COD_USO_VEHI'));
      pp_asigna(EM.PREFIJO_DATOS_VARIABLES||'COD_CATEGORIA',fp_devuelve_val_coti('COD_CATEGORIA'));
      pp_asigna(EM.PREFIJO_DATOS_VARIABLES||'MCA_ZERO_KM',fp_devuelve_val_coti('MCA_ZERO_KM'));
      pp_asigna(EM.PREFIJO_DATOS_VARIABLES||'TIP_DURACION',fp_devuelve_val_coti('TIP_DURACION'));
      pp_asigna('MCA_POLIZA_GRUPO', NVL(trn_k_global.ref_f_global('MCA_POLIZA_GRUPO'),'N'));
      pp_asigna(EM.PREFIJO_DATOS_VARIABLES||'TIP_CATALOGACAO',NVL(trn_k_global.ref_f_global(EM.PREFIJO_DATOS_VARIABLES||'TIP_CATALOGACAO'),trn.NULO));
      pp_asigna(EM.PREFIJO_DATOS_VARIABLES||'MCA_BLINDAGEM',fp_devuelve_val_coti('MCA_BLINDAGEM'));
      --
      mx('F', 'pp_asigna_globales_clave');
      --
   END pp_asigna_globales_clave;
   --
   /* ------------------------------------------------------
   || pp_asigna_globales_cmn
   */ ------------------------------------------------------
   PROCEDURE pp_asigna_globales_cmn
   IS
   BEGIN
      --
      mx('I', 'pp_asigna_globales_cmn');
      --
      pp_asigna('cod_cia', nvl(trn_k_global.ref_f_global('cod_cia'), g_cod_cia));
      pp_asigna('cod_ramo', nvl(trn_k_global.ref_f_global('cod_ramo'),'999'));
      pp_asigna('cod_mon', nvl(trn_k_global.ref_f_global('cod_mon'),'99'));
      pp_asigna('cod_cob', nvl(trn_k_global.ref_f_global('cod_cob'),'9999'));
      pp_asigna('cod_nivel1', nvl(trn_k_global.ref_f_global('cod_nivel1'),'99'));
      pp_asigna('cod_nivel2', nvl(trn_k_global.ref_f_global('cod_nivel2'),'999'));
      pp_asigna('cod_nivel3', nvl(trn_k_global.ref_f_global('cod_nivel3'),'9999'));
      pp_asigna('cod_canal1', nvl(trn_k_global.ref_f_global('cod_canal1'),'ZZZZ'));
      pp_asigna('cod_canal2', nvl(trn_k_global.ref_f_global('cod_canal2'),'ZZZZ'));
      pp_asigna('cod_canal3', nvl(trn_k_global.ref_f_global('cod_canal3'),'ZZZZ'));
      pp_asigna('cod_agt', nvl(trn_k_global.ref_f_global('cod_agt'),'99999'));
      pp_asigna('num_poliza_grupo', nvl(trn_k_global.ref_f_global('num_poliza_grupo'),''));
      pp_asigna('num_contrato', nvl(trn_k_global.ref_f_global('num_contrato'),''));
      pp_asigna('num_subcontrato', nvl(trn_k_global.ref_f_global('num_subcontrato'),''));
      pp_asigna('num_poliza', nvl(trn_k_global.ref_f_global('num_poliza'),''));
      pp_asigna('fec_validez', nvl(trn_k_global.ref_f_global('fec_validez'),to_char(trunc(sysdate), 'ddmmyyyy')));
      --
      mx('F', 'pp_asigna_globales_cmn');
      --
   END pp_asigna_globales_cmn;
   --
   /* -----------------------------------------------------
   || pp_asigna_globales :
   ||
   || Asigna as globais com valores da Apolice.
   */ -----------------------------------------------------
   --
   PROCEDURE pp_asigna_globales(reg_a2000030    a2000030%ROWTYPE) IS
      --
      l_tip_emision    g1010031.cod_valor  %TYPE;
      l_fec_validez    g2000020.fec_validez%TYPE;
      --
   BEGIN
     --
     mx('I', 'pp_asigna_globales');
     --
     trn_k_global.asigna('cod_cia'         , reg_a2000030.cod_cia         );
     trn_k_global.asigna('cod_ramo'        , reg_a2000030.cod_ramo        );
     --
     mx('cod_cia' , reg_a2000030.cod_cia);
     mx('cod_ramo', reg_a2000030.cod_ramo);
     --
     IF reg_a2000030.cod_cia IS NOT NULL THEN
        --
        l_fec_validez := em_k_a1002150.f_max_fec_validez(reg_a2000030.cod_cia,
                                                         reg_a2000030.cod_ramo,
                                                         TRUNC(SYSDATE));
        --
     END IF;
     --
     trn_k_global.asigna('fec_validez'     , TO_CHAR(l_fec_validez,'DDMMYYYY'));
     --
     mx('fec_validez', TO_CHAR(l_fec_validez,'DDMMYYYY'));
     --
     trn_k_global.asigna('cod_cob'         , em.COD_COB_GEN               );
     trn_k_global.asigna('num_poliza'      , reg_a2000030.num_poliza      );
     trn_k_global.asigna('num_spto'        , reg_a2000030.num_spto        );
     trn_k_global.asigna('num_apli'        , reg_a2000030.num_apli        );
     trn_k_global.asigna('num_spto_apli'   , reg_a2000030.num_spto_apli   );
     trn_k_global.asigna('cod_canal1'      , DC.cod_canal1_gen            );
     trn_k_global.asigna('cod_canal2'      , DC.cod_canal2_gen            );
     trn_k_global.asigna('cod_canal3'      , DC.cod_canal3_gen            );
     trn_k_global.asigna('cod_nivel1'      , reg_a2000030.cod_nivel1      );
     trn_k_global.asigna('cod_nivel2'      , reg_a2000030.cod_nivel2      );
     trn_k_global.asigna('cod_nivel3'      , reg_a2000030.cod_nivel3      );
     trn_k_global.asigna('num_subcontrato' , em.NUM_SUBCONTRATO_GEN       );
     trn_k_global.asigna('num_contrato'    , reg_a2000030.num_contrato    );
     trn_k_global.asigna('num_poliza_grupo', reg_a2000030.num_poliza_grupo);
     trn_k_global.asigna('cod_sector'      , reg_a2000030.cod_sector      );
     trn_k_global.asigna('cod_mon'         , reg_a2000030.cod_mon         );
     trn_k_global.asigna('cod_agt'         , reg_a2000030.cod_agt         );
     trn_k_global.asigna('tip_spto'        , reg_a2000030.tip_spto        );
     trn_k_global.asigna('fec_emision_spto', TO_CHAR(reg_a2000030.fec_emision_spto, 'DDMMYYYY'));
     trn_k_global.asigna('fec_efec_spto'   , TO_CHAR(reg_a2000030.fec_efec_spto, 'DDMMYYYY')   );
     trn_k_global.asigna('fec_vcto_spto'   , TO_CHAR(reg_a2000030.fec_vcto_spto, 'DDMMYYYY')   );
     trn_k_global.asigna('fec_efec_poliza' , TO_CHAR(reg_a2000030.fec_efec_poliza, 'DDMMYYYY') );
     trn_k_global.asigna('fec_vcto_poliza' , TO_CHAR(reg_a2000030.fec_vcto_poliza, 'DDMMYYYY') );
     trn_k_global.asigna('tip_docum'       , reg_a2000030.tip_docum                            );
     trn_k_global.asigna('cod_docum'       , reg_a2000030.cod_docum                            );
     trn_k_global.asigna('num_presupuesto' , reg_a2000030.num_presupuesto                      );
     trn_k_global.asigna('num_periodo'     , trn.UNO                                           );
     trn_k_global.asigna('num_riesgo'      , trn.UNO                                           );
     trn_k_global.asigna('cod_cuadro_com'  , reg_a2000030.cod_cuadro_com                       );
     trn_k_global.asigna('cod_idioma'      , trn_k_global.cod_idioma                           );
     trn_k_global.asigna('fec_tratamiento' , TO_CHAR(trunc(SYSDATE), 'DDMMYYYY')               );
     --
     mx('cod_cob'         , em.COD_COB_GEN               );
     mx('num_poliza'      , reg_a2000030.num_poliza      );
     mx('num_spto'        , reg_a2000030.num_spto        );
     mx('num_apli'        , reg_a2000030.num_apli        );
     mx('num_spto_apli'   , reg_a2000030.num_spto_apli   );
     mx('cod_canal1'      , DC.cod_canal1_gen            );
     mx('cod_canal2'      , DC.cod_canal2_gen            );
     mx('cod_canal3'      , DC.cod_canal3_gen            );
     mx('cod_nivel1'      , reg_a2000030.cod_nivel1      );
     mx('cod_nivel2'      , reg_a2000030.cod_nivel2      );
     mx('cod_nivel3'      , reg_a2000030.cod_nivel3      );
     mx('num_subcontrato' , em.NUM_SUBCONTRATO_GEN       );
     mx('num_contrato'    , reg_a2000030.num_contrato    );
     mx('num_poliza_grupo', reg_a2000030.num_poliza_grupo);
     mx('cod_sector'      , reg_a2000030.cod_sector      );
     mx('cod_mon'         , reg_a2000030.cod_mon         );
     mx('cod_agt'         , reg_a2000030.cod_agt         );
     mx('tip_spto'        , reg_a2000030.tip_spto        );
     mx('fec_emision_spto', TO_CHAR(reg_a2000030.fec_emision_spto, 'DDMMYYYY'));
     mx('fec_efec_spto'   , TO_CHAR(reg_a2000030.fec_efec_spto, 'DDMMYYYY')   );
     mx('fec_vcto_spto'   , TO_CHAR(reg_a2000030.fec_vcto_spto, 'DDMMYYYY')   );
     mx('fec_efec_poliza' , TO_CHAR(reg_a2000030.fec_efec_poliza, 'DDMMYYYY') );
     mx('fec_vcto_poliza' , TO_CHAR(reg_a2000030.fec_vcto_poliza, 'DDMMYYYY') );
     mx('tip_docum'       , reg_a2000030.tip_docum                            );
     mx('cod_docum'       , reg_a2000030.cod_docum                            );
     mx('num_presupuesto' , reg_a2000030.num_presupuesto                      );
     mx('num_periodo'     , trn.UNO                                           );
     mx('num_riesgo'      , trn.UNO                                           );
     mx('cod_cuadro_com'  , reg_a2000030.cod_cuadro_com                       );
     mx('cod_idioma'      , trn_k_global.cod_idioma                           );
     mx('fec_tratamiento' , TO_CHAR(trunc(SYSDATE), 'DDMMYYYY')               );
     --
     IF reg_a2000030.tip_spto IS NULL THEN
        --
        l_tip_emision := NULL;
        --
     ELSIF reg_a2000030.tip_spto = em.NUEVA_EMISION THEN
        --
        l_tip_emision := em.TIP_EMISION_POL;
        --
     ELSE
        --
        l_tip_emision := em.TIP_EMISION_SPTO;
        --
     END IF;
     --
     trn_k_global.asigna('tip_emision' , l_tip_emision );
     --
     mx('tip_emision', l_tip_emision );
     --
     mx('F', 'pp_asigna_globales');
     --
   END pp_asigna_globales;
   --
   /* -----------------------------------------------------
   || pp_autoriza_ct_masivo :
   ||
   || Verifica se foi gerado recusa fexivel a nivel de apolice.
   */ -----------------------------------------------------
   --
   PROCEDURE pp_autoriza_ct_masivo(p_mca_presupuesto  VARCHAR2                   ,
                                   p_cod_error        a2000221.cod_error    %TYPE,
                                   p_tip_autoriz      g1010030.cod_valor    %TYPE,
                                   p_obs              a2000221.obs_error    %TYPE)
   IS
   --
   l_fec_efec_spto    a2000030.fec_efec_poliza   %TYPE;
   l_fec_vcto_spto    a2000030.fec_vcto_poliza   %TYPE;
   l_num_riesgo       a2000031.num_riesgo        %TYPE;
   --
   BEGIN
     --
     mx('I','pp_autoriza_ct_masivo');
     --
     --p_recupera_var_globales;
     --
     g_cod_cia         := trn_k_global.ref_f_global('cod_cia'      );
     g_num_poliza      := trn_k_global.ref_f_global('num_poliza');
     g_num_spto        := trn_k_global.ref_f_global('num_spto'     );
     g_num_apli        := trn_k_global.ref_f_global('num_apli'     );
     g_num_spto_apli   := trn_k_global.ref_f_global('num_spto_apli');
     --
     l_fec_efec_spto   := TO_DATE(trn_k_global.ref_f_global('FEC_EFEC_SPTO')
                                 ,trn.FORMATO_FECHA);
     l_fec_vcto_spto   := TO_DATE(trn_k_global.ref_f_global('FEC_VCTO_SPTO')
                                 ,trn.FORMATO_FECHA);
     l_num_riesgo      := NVL(trn_k_global.ref_f_global('NUM_RIESGO')
                             ,trn.UNO);
     --
     em_k_gen_ct.p_autoriza_ct_masivo(p_cod_cia          => g_cod_cia
                                     ,p_mca_presupuesto  => p_mca_presupuesto
                                     ,p_num_poliza       => g_num_poliza
                                     ,p_num_spto         => g_num_spto
                                     ,p_num_apli         => g_num_apli
                                     ,p_num_spto_apli    => g_num_spto_apli
                                     ,p_fec_efec_spto    => l_fec_efec_spto
                                     ,p_fec_vcto_spto    => l_fec_vcto_spto
                                     ,p_num_riesgo       => trn.CERO
                                     ,p_cod_usr          => trn_k_global.cod_usr
                                     ,p_cod_error        => p_cod_error
                                     ,p_tip_autoriz      => p_tip_autoriz
                                     ,p_obs              => p_obs);
     --
     mx('F','pp_autoriza_ct_masivo');
     --
   EXCEPTION
     WHEN OTHERS
     THEN
       --
       mx('F','pp_autoriza_ct_masivo - Exception');
       --
   END pp_autoriza_ct_masivo;
   --
   /* -----------------------------------------
   || pp_inserta_a2000500                     :
   */ -----------------------------------------
   --
   PROCEDURE pp_inserta_a2000500 (p_tip_mvto_batch   IN a2000500.tip_mvto_batch  %TYPE,
                                  p_num_poliza       IN a2000500.num_poliza      %TYPE)
   IS
      --
      p_reg_a2000500  a2000500%ROWTYPE;
      --
   BEGIN
      --
      mx('I', 'pp_inserta_a2000500');
      --
      dc_k_a1001800.p_lee(p_cod_cia  => trn_k_global.cod_cia,
                          p_cod_ramo => ea_k_231_utils.g_k_ramo_motor);
      --
      p_reg_a2000500.fec_tratamiento          := trunc(SYSDATE);
      p_reg_a2000500.num_orden                := g_k_num_orden;
      p_reg_a2000500.tip_mvto_batch           := p_tip_mvto_batch;
      p_reg_a2000500.cod_cia                  := trn_k_global.devuelve('COD_CIA');
      p_reg_a2000500.cod_sector               := trn_k_global.devuelve('COD_SECTOR');
      p_reg_a2000500.cod_ramo                 := trn_k_global.devuelve('COD_RAMO');
      p_reg_a2000500.cod_nivel1               := trn_k_global.devuelve('COD_NIVEL1');
      p_reg_a2000500.cod_nivel2               := trn_k_global.devuelve('COD_NIVEL2');
      p_reg_a2000500.cod_nivel3               := trn_k_global.devuelve('COD_NIVEL3');
      p_reg_a2000500.cod_agt                  := trn_k_global.devuelve('COD_AGT');
      p_reg_a2000500.cod_mon                  := trn_k_global.devuelve('COD_MON');
      p_reg_a2000500.num_poliza_grupo         := trn.NULO;
      p_reg_a2000500.num_contrato             := trn.NULO;
      p_reg_a2000500.num_poliza_cliente       := trn.NULO;
      p_reg_a2000500.num_poliza               := p_num_poliza;
      p_reg_a2000500.num_poliza_tronador      := trn.NULO;
      p_reg_a2000500.num_poliza_definitivo    := trn.NULO;
      p_reg_a2000500.num_spto                 := trn.CERO;
      p_reg_a2000500.num_apli                 := trn.CERO;
      p_reg_a2000500.num_spto_apli            := trn.CERO;
      p_reg_a2000500.tip_poliza_tr            := 'F';
      p_reg_a2000500.fec_efec_spto            := TO_DATE(trn_k_global.devuelve('FEC_EFEC_SPTO'),trn.FORMATO_FECHA);
      p_reg_a2000500.fec_vcto_spto            := TO_DATE(trn_k_global.devuelve('FEC_VCTO_SPTO'),trn.FORMATO_FECHA);
      p_reg_a2000500.num_recibo               := trn.CERO;
      p_reg_a2000500.num_riesgos              := trn.UNO;
      p_reg_a2000500.mca_prima_manual         := trn.NO;
      p_reg_a2000500.cod_spto                 := trn_k_global.devuelve('COD_SPTO');
      p_reg_a2000500.sub_cod_spto             := trn_k_global.devuelve('SUB_COD_SPTO');
      p_reg_a2000500.cod_tip_spto             := trn.NULO;
      p_reg_a2000500.txt_motivo_spto          := trn.NULO;
      p_reg_A2000500.mca_renueva              := trn.NULO;
      p_reg_A2000500.mca_renueva_tmp          := trn.NULO;
      p_reg_A2000500.cant_renovaciones        := trn.NULO;
      p_reg_A2000500.mca_prorrata             := trn.SI;
      p_reg_A2000500.mca_devuelve_todo        := trn.NO;
      p_reg_A2000500.tip_spto_accion          := trn.NULO;
      p_reg_A2000500.tip_autoriza_ct          := trn.NULO;
      p_reg_A2000500.tip_situ                 := trn.UNO;
      p_reg_A2000500.cod_excepcion            := trn.NULO;
      p_reg_A2000500.nom_excepcion            := trn.NULO;
      p_reg_A2000500.mca_pre_renovacion       := trn.NO;
      p_reg_A2000500.mca_anulacion_por_deuda  := trn.NO;
      p_reg_A2000500.cod_usr                  := trn_k_global.cod_usr;
      p_reg_A2000500.cod_usr_captura          := trn_k_global.cod_usr;
      p_reg_A2000500.fec_actu                 := trunc(SYSDATE);
      --
      em_k_a2000500_vcr.p_inserta(p_reg_A2000500);
      --
      mx('F', 'pp_inserta_a2000500');
      --
   END pp_inserta_a2000500;
   --
   /* -----------------------------------------
   || pp_borra_a2000520                     :
   */ -----------------------------------------
   --
   PROCEDURE pp_borra_a2000520 (p_tip_mvto_batch   IN a2000500.tip_mvto_batch  %TYPE,
                                p_num_poliza       IN a2000500.num_poliza      %TYPE)
   IS
      --
      p_reg_a2000500  a2000500%ROWTYPE;
      --
   BEGIN
      --
      mx('I', 'pp_borra_a2000520');
      --
      DELETE a2000520
       WHERE tip_mvto_batch  = p_tip_mvto_batch
         AND cod_cia         = trn_k_global.devuelve('COD_CIA')
         AND num_poliza      = p_num_poliza;
      --
      mx('F', 'pp_borra_a2000520');
      --
   END pp_borra_a2000520;
   --
   /* -----------------------------------------
   || pp_borra_a2000500                     :
   */ -----------------------------------------
   --
   PROCEDURE pp_borra_a2000500 (p_tip_mvto_batch   IN a2000500.tip_mvto_batch  %TYPE,
                                p_num_poliza       IN a2000500.num_poliza      %TYPE)
   IS
      --
      p_reg_a2000500  a2000500%ROWTYPE;
      --
   BEGIN
      --
      mx('I', 'pp_borra_a2000500');
      --
      DELETE a2000500
       WHERE tip_mvto_batch  = p_tip_mvto_batch
         AND cod_cia         = trn_k_global.devuelve('COD_CIA')
         AND num_poliza      = p_num_poliza;
      --
      mx('F', 'pp_borra_a2000500');
      --
   END pp_borra_a2000500;
  --
   /* -----------------------------------------
   || pp_inserta_attrib_cob_c2000000                     :
   */ -----------------------------------------
   --
   PROCEDURE pp_inserta_attrib_cob_c2000000(p_nom_tabla   IN c2000000.nom_tabla  %TYPE,
                                            p_nom_columna IN c2000000.nom_columna%TYPE,
                                            p_cod_fila    IN c2000000.cod_fila   %TYPE,
                                            p_val_columna IN c2000000.val_columna%TYPE)
   IS
      --
      l_reg_c2000000  c2000000%ROWTYPE;
      --
   BEGIN
      --
      mx('I', 'pp_inserta_attrib_cob_c2000000');
      --
      l_reg_c2000000.cod_cia        := trn_k_global.devuelve('COD_CIA');
      l_reg_c2000000.cod_ramo       := trn_k_global.devuelve('COD_RAMO');
      l_reg_c2000000.num_cotizacion := trn_k_global.devuelve('NUM_COTIZACION');
      --
      l_reg_c2000000.nom_tabla      := p_nom_tabla;
      l_reg_c2000000.nom_columna    := p_nom_columna;
      l_reg_c2000000.cod_fila       := p_cod_fila;
      l_reg_c2000000.val_columna    := p_val_columna;
      --
      em_k_c2000000.p_inserta_borrando(p_reg => l_reg_c2000000);
      --
      mx('F', 'pp_inserta_attrib_cob_c2000000');
      --
   END pp_inserta_attrib_cob_c2000000;
   --
   /* -----------------------------------------
   || pp_inserta_c2000040                     :
   */ -----------------------------------------
   --
   PROCEDURE pp_inserta_c2000040(p_reg c2000040%ROWTYPE)
   IS
   BEGIN
      --
      mx('I', 'pp_inserta_c2000040');
      --
      DELETE FROM c2000040
       WHERE cod_cia        = p_reg.cod_cia
         AND cod_ramo       = p_reg.cod_ramo
         AND num_simulacion = p_reg.num_simulacion
         AND cod_cob        = p_reg.cod_cob;
      --
     INSERT INTO c2000040
       (cod_cia,
        cod_ramo,
        num_simulacion,
        cod_cob,
        suma_aseg,
        cod_limite,
        cod_franquicia,
        suma_aseg_sup)
     VALUES
       (p_reg.cod_cia,
        p_reg.cod_ramo,
        p_reg.num_simulacion,
        p_reg.cod_cob,
        p_reg.suma_aseg,
        p_reg.cod_limite,
        p_reg.cod_franquicia,
        p_reg.suma_aseg_sup);
      --
      mx('F', 'pp_inserta_c2000040');
      --
   EXCEPTION
     WHEN OTHERS THEN
        mx('dnl_pp_inserta_c2000040 E-', substr(SqlErrm, 1, 100));

   END pp_inserta_c2000040;
   --
   /* -----------------------------------------
   || pp_borra_c2000040                     :
   */ -----------------------------------------
   --
   PROCEDURE pp_borra_c2000040(p_reg c2000040%ROWTYPE)
   IS
   BEGIN
      --
      mx('I', 'pp_borra_c2000040');
      --
      DELETE FROM c2000040
       WHERE cod_cia        = p_reg.cod_cia
         AND cod_ramo       = p_reg.cod_ramo
         AND num_simulacion = p_reg.num_simulacion;
      --
      mx('F', 'pp_borra_c2000040');
      --
   EXCEPTION
     WHEN OTHERS THEN
        mx('pp_borra_c2000040 E-', substr(SqlErrm, 1, 100));

   END pp_borra_c2000040;
   --
   /* -----------------------------------------
   || pp_borra_c2000000_cob                   :
   */ -----------------------------------------
   --
   PROCEDURE pp_borra_c2000000_cob--(p_reg c2000000%ROWTYPE)
   IS
   --
   l_reg_c2000000  c2000000%ROWTYPE;
   --
   BEGIN
      --
      mx('I', 'pp_borra_c2000000_cob');
      --
      l_reg_c2000000.cod_cia        := trn_k_global.devuelve('COD_CIA');
      l_reg_c2000000.cod_ramo       := trn_k_global.devuelve('COD_RAMO');
      l_reg_c2000000.num_cotizacion := trn_k_global.devuelve('NUM_COTIZACION');
      --
      DELETE c2000000
       WHERE c2000000.cod_cia        = l_reg_c2000000.cod_cia
         AND c2000000.cod_ramo       = l_reg_c2000000.cod_ramo
         AND c2000000.num_cotizacion = l_reg_c2000000.num_cotizacion
         AND (c2000000.nom_columna LIKE '%ACESSORIO%'
              OR c2000000.nom_columna IN (SELECT g2000020.cod_campo
                                         FROM g2000020
                                        WHERE g2000020.cod_cia = l_reg_c2000000.cod_cia
                                          AND g2000020.cod_ramo = l_reg_c2000000.cod_ramo
                                          AND g2000020.tip_nivel = g_k_tip_nivel_cob
                                          AND g2000020.cod_campo NOT IN ('TIP_FRANQUIA', 'NUM_NIVEL_BLINDAGEM', 'VAL_BO_FRANQUICIA_MIN_201')));
      --
      mx('F', 'pp_borra_c2000000_cob');
      --
   EXCEPTION
     WHEN OTHERS THEN
        mx('pp_borra_c2000000_cob E-', substr(SqlErrm, 1, 100));

   END pp_borra_c2000000_cob;
   --
   /* -----------------------------------------
   || pp_inserta_c2000020                     :
   */ -----------------------------------------
   --
   PROCEDURE pp_inserta_c2000020(p_reg c2000020%ROWTYPE)
   IS
   BEGIN
      --
      mx('I', 'pp_inserta_c2000020');
      --
      DELETE FROM c2000020
       WHERE cod_cia        = p_reg.cod_cia
         AND cod_ramo       = p_reg.cod_ramo
         AND num_simulacion = p_reg.num_simulacion
         AND cod_campo      = p_reg.cod_campo;
      --
     INSERT INTO c2000020
       (cod_cia,
        cod_ramo,
        num_simulacion,
        cod_campo,
        val_campo)
     VALUES
       (p_reg.cod_cia,
        p_reg.cod_ramo,
        p_reg.num_simulacion,
        p_reg.cod_campo,
        p_reg.val_campo);
      --
      mx('F', 'pp_inserta_c2000020');
      --
   EXCEPTION
     WHEN OTHERS THEN
        mx('dnl_pp_inserta_c2000020 E-', substr(SqlErrm, 1, 100));

   END pp_inserta_c2000020;
   --
   /* -----------------------------------------
   || pp_inserta_a2000560                     :
   */ -----------------------------------------
   --
   PROCEDURE pp_inserta_a2000560(p_reg a2000560%ROWTYPE)
   IS
   BEGIN
      --
      mx('I', 'pp_inserta_a2000560');
      --
      em_k_a2000560.p_inserta_borrando(p_reg);
      --
      mx('F', 'pp_inserta_a2000560');
      --
   END pp_inserta_a2000560;
   --
   /* -------------------------------
   ||  pp_inserta_datos_agt_coti :
   */ -------------------------------
   --
   PROCEDURE pp_inserta_datos_agt_coti
   IS
      --
      l_cod_cia          a2000030.cod_cia%TYPE;
      l_cod_nivel3       a2000030.cod_nivel3%TYPE;
      l_cod_agt          a1001332.cod_agt%TYPE := NULL;
      l_fec_validez      a1002150.fec_validez%TYPE := NULL;
      --
      l_reg_a1000702     a1000702%ROWTYPE := NULL;
      --
   BEGIN
      --
      mx('I', 'pp_inserta_datos_agt_coti');
      --
      l_cod_cia         := trn_k_global.cod_cia;
      l_cod_agt         := trn_k_global.devuelve('COD_AGT');
      l_fec_validez     := trunc(SYSDATE);
      --
      ea_k_231_coti.p_v_inserta_datos_fijos_coti(ea_k_231_coti.g_k_campo_cod_agt,
                                                 l_cod_agt);
      --
      l_cod_nivel3    := dc_f_a1001332(p_cod_cia         => l_cod_cia,
                                       p_cod_act_tercero => dc.ACT_AGENTE,
                                       p_cod_agt         => l_cod_agt,
                                       p_fec_validez     => l_fec_validez).cod_nivel3;
      --
      l_reg_a1000702  := dc_f_a1000702(p_cod_cia     => l_cod_cia,
                                       p_cod_nivel3  => l_cod_nivel3);
      --
      ea_k_231_coti.p_v_inserta_datos_fijos_coti('COD_NIVEL1',
                                                 l_reg_a1000702.cod_nivel1);
      --
      ea_k_231_coti.p_v_inserta_datos_fijos_coti('COD_NIVEL2',
                                                 l_reg_a1000702.cod_nivel2);
      --
      ea_k_231_coti.p_v_inserta_datos_fijos_coti('COD_NIVEL3',
                                                 l_reg_a1000702.cod_nivel3);
      --
      mx('F', 'pp_inserta_datos_agt_coti');
      --
   END pp_inserta_datos_agt_coti;
   --
   -- {v2.46
   /* ------------------------------------------------------
   || Limpa tabela do ssr
   */ ------------------------------------------------------
   --
   PROCEDURE pp_limpa_ssr IS
    --
    l_reg_a2219015  a2219015_vcr%ROWTYPE;
    --
   BEGIN
      --
      mx('I', 'pp_limpa_ssr');
      --
      DELETE a2219015_vcr
       WHERE cod_cia       = trn_k_global.cod_cia
         AND cod_ramo      = trn_k_global.ref_f_global('cod_ramo')
         AND num_poliza    = trn_k_global.ref_f_global('num_poliza')
         AND num_spto      = trn_k_global.ref_f_global('num_spto')
         AND num_apli      = trn_k_global.ref_f_global('num_apli')
         AND num_spto_apli = trn_k_global.ref_f_global('num_spto_apli');
      --
      -- {v3.64
      DELETE a2219016_vcr
       WHERE cod_cia       = trn_k_global.cod_cia
         AND num_poliza    = trn_k_global.ref_f_global('num_poliza')
         AND num_spto      = trn_k_global.ref_f_global('num_spto')
         AND num_apli      = trn_k_global.ref_f_global('num_apli')
         AND num_spto_apli = trn_k_global.ref_f_global('num_spto_apli');
      --
      DELETE a2219018_vcr
       WHERE cod_cia       = trn_k_global.cod_cia
         AND num_poliza    = trn_k_global.ref_f_global('num_poliza')
         AND num_spto      = trn_k_global.ref_f_global('num_spto')
         AND num_apli      = trn_k_global.ref_f_global('num_apli')
         AND num_spto_apli = trn_k_global.ref_f_global('num_spto_apli');
      --
      DELETE a2219021_vcr
       WHERE cod_cia       = trn_k_global.cod_cia
         AND num_poliza    = trn_k_global.ref_f_global('num_poliza')
         AND num_spto      = trn_k_global.ref_f_global('num_spto');
      --
      DELETE a2219028_vcr
       WHERE cod_cia       = trn_k_global.cod_cia
         AND num_poliza    = trn_k_global.ref_f_global('num_poliza')
         AND num_spto      = trn_k_global.ref_f_global('num_spto')
         AND num_apli      = trn_k_global.ref_f_global('num_apli')
         AND num_spto_apli = trn_k_global.ref_f_global('num_spto_apli');
      --
      DELETE a2219043_vcr
       WHERE cod_cia       = trn_k_global.cod_cia
         AND cod_ramo      = trn_k_global.ref_f_global('cod_ramo')
         AND num_poliza    = trn_k_global.ref_f_global('num_poliza')
         AND num_spto      = trn_k_global.ref_f_global('num_spto')
         AND num_apli      = trn_k_global.ref_f_global('num_apli')
         AND num_spto_apli = trn_k_global.ref_f_global('num_spto_apli');
      --
      DELETE a2219048_vcr
       WHERE cod_cia       = trn_k_global.cod_cia
         AND cod_ramo      = trn_k_global.ref_f_global('cod_ramo')
         AND num_apol_vcr  = to_number(trn_k_global.ref_f_global('num_poliza'))
         AND num_spto      = trn_k_global.ref_f_global('num_spto');
      --
      DELETE a2219108_vcr
       WHERE cod_cia       = trn_k_global.cod_cia
         AND cod_ramo      = trn_k_global.ref_f_global('cod_ramo')
         AND num_poliza    = trn_k_global.ref_f_global('num_poliza')
         AND num_spto      = trn_k_global.ref_f_global('num_spto')
         AND num_apli      = trn_k_global.ref_f_global('num_apli')
         AND num_spto_apli = trn_k_global.ref_f_global('num_spto_apli');
      --
      -- v3.64}
      --
      mx('F', 'pp_limpa_ssr');
      --
   END pp_limpa_ssr;
   -- }v2.46
   --
   PROCEDURE pp_trata_multi_fipe
            (p_cod_fipe  IN     a2009018_vcr.cod_fipe%TYPE,
             p_tab_fipe  IN OUT NOCOPY TYPTAB_FIPE,
             p_reg_fipe  IN OUT NOCOPY TYPREG_FIPE)
   IS
      --
      l_fipe        a2009018_vcr.cod_fipe%TYPE;
      l_total       NUMBER;
      l_inicio      NUMBER := 0;
      l_x           NUMBER := 0;
      l_calc_string NUMBER := 0;
      l_qtd_string  NUMBER := 0;
      --
      TYPE rec_fipes IS TABLE OF g2109042_vcr.cod_fipe%TYPE INDEX BY PLS_INTEGER;
      --
      l_rec_fipes rec_fipes;
      --
   BEGIN
      --
      mx('I', 'pp_trata_multi_fipe');
      --
      --SELECT REPLACE (p_cod_fipe,g_k_separador_bar,'') INTO l_fipe FROM dual;
    l_fipe := REPLACE (p_cod_fipe,g_k_separador_bar,''); --performance 22052019
      --
      l_total := LENGTH (l_fipe);
      --
      WHILE l_total >= g_k_num_tam_fipe LOOP
         --
         --SELECT SUBSTR (l_fipe,l_inicio,g_k_num_tam_fipe) INTO l_rec_fipes(l_x) FROM dual;
     --
     l_rec_fipes(l_x) := SUBSTR (l_fipe,l_inicio,g_k_num_tam_fipe); --performance 22052019
         --
         l_qtd_string := (g_k_num_tam_fipe + trn.UNO) - l_calc_string;
         --
         l_inicio := l_inicio + l_qtd_string;
         --
         l_total := l_total - g_k_num_tam_fipe;
         --
         p_reg_fipe.cod_fipe := l_rec_fipes(l_x);
         --
         p_tab_fipe.EXTEND(1);
         p_tab_fipe(p_tab_fipe.LAST) := p_reg_fipe;
         --
         l_x := l_x + trn.UNO;
         --
         l_calc_string := trn.UNO;
         --
      END LOOP;
      --
      mx('F', 'pp_trata_multi_fipe');
      --
   END pp_trata_multi_fipe;
   --
   PROCEDURE pp_trata_multi_molicar
            (p_cod_fipe  IN     a2009018_vcr.cod_fipe%TYPE,
             p_tab_fipe  IN OUT NOCOPY TYPTAB_FIPE,
             p_reg_fipe  IN OUT NOCOPY TYPREG_FIPE)
   IS
      --
      l_fipe        a2009018_vcr.cod_fipe%TYPE;
      l_total       NUMBER (2);
      l_inicio      NUMBER (2):= 0;
      l_x           NUMBER (2) := 0;
      l_calc_string NUMBER (2) := 0;
      l_qtd_string  NUMBER (2) := 0;
      --
      TYPE rec_fipes IS TABLE OF g2109042_vcr.Cod_Molicar%TYPE INDEX BY PLS_INTEGER;
      --
      l_rec_fipes rec_fipes;
      --
   BEGIN
      --
      mx('I', 'pp_trata_multi_molicar');
      --
      l_fipe := REPLACE (p_cod_fipe,g_k_separador_bar,''); --performance 22052019
      --
      l_total := LENGTH (l_fipe);
      --
      WHILE l_total >= g_k_num_tam_molicar LOOP
         --
         l_rec_fipes(l_x) := SUBSTR (l_fipe,l_inicio,g_k_num_tam_molicar); --performance 22052019
         --
         l_qtd_string := (g_k_num_tam_molicar + trn.UNO) - l_calc_string;
         --
         l_inicio := l_inicio + l_qtd_string;
         --
         l_total := l_total - g_k_num_tam_molicar;
         --
         p_reg_fipe.cod_fipe := l_rec_fipes(l_x);
         --
         p_tab_fipe.EXTEND(1);
         p_tab_fipe(p_tab_fipe.LAST) := p_reg_fipe;
         --
         l_x := l_x + trn.UNO;
         --
         l_calc_string := trn.UNO;
         --
      END LOOP;
      --
      mx('F', 'pp_trata_multi_molicar');
      --
   END pp_trata_multi_molicar;
   --
   /* ------------------------------------------------------
   || Recebe um table e retorna um cursor no padrao de retorno requerido
   */ ------------------------------------------------------
   PROCEDURE pp_processa_mensagem (p_tab_msg_ws     IN  TYPTAB_MSG_WS,
                                   p_cursor_message OUT ref_cursor)
   IS
   BEGIN
      --
      mx('I', 'pp_processa_mensagem');
      --
      OPEN p_cursor_message
       FOR SELECT msg2000000.cod_campo                                  AS cod_campo,
                  g_k_pre_msg_erro_tratado || msg2000000.cod_mensagem ||
                  g_k_sep_cod_msg_tratado  || msg2000000.des_mensagem   AS des_mensagem,
                  msg2000000.tip_mensagem                               AS tip_memsagem
           FROM TABLE(CAST(p_tab_msg_ws AS TYPTAB_MSG_WS)) msg2000000;
      --
      mx('F', 'pp_processa_mensagem');
      --
   END pp_processa_mensagem;
   --
   /* ------------------------------------------------------
   || Processa validacao de dados por passo/campos
   */ ------------------------------------------------------
   --
   PROCEDURE pp_valida_dados (p_cod_campo    IN   c2000000.nom_columna%TYPE,
                              p_val_campo    IN   c2000000.val_columna%TYPE,
                              p_nom_pgr      IN   G9999992.nom_prg%TYPE,
                              p_nom_tabla    IN   G9999992.nom_tabla%TYPE,
                              p_msg_erro     OUT  VARCHAR2)
   IS
      --
      l_cod_campo         c2000000.nom_columna   %TYPE;
      l_val_campo         c2000000.val_columna   %TYPE;
      l_tip_mvto_batch    A2000500.tip_mvto_batch%TYPE;
      l_anx_mensaje       VARCHAR2(350);
      l_trn               NUMBER := TRN.CERO;
      --
   BEGIN
      --
      mx('I', 'pp_valida_dados');
      --
      l_cod_campo      := p_cod_campo;
      l_val_campo      := p_val_campo;
      l_tip_mvto_batch := fp_ref_devuelve_c('TIP_MVTO_BATCH');
      --
      IF l_tip_mvto_batch = g_k_tip_mvto_batch_endosso THEN
         --
         l_cod_campo := fp_devuelve_campo_coti(p_cod_campo);
         --
      END IF;
      --
      IF p_nom_tabla = g_k_tabla_dv THEN
         --
         l_cod_campo := em.PREFIJO_DATOS_VARIABLES || l_cod_campo;
         --
      END IF;
      --
      pp_asigna(l_cod_campo,l_val_campo);
      pp_asigna('COD_CAMPO',l_cod_campo);
      pp_asigna('VAL_CAMPO',l_val_campo);
      --
      IF p_nom_pgr IS NOT NULL THEN
         --
         mx('pp_valida_dados EXECUTA', p_nom_pgr);
         --
         trn_k_dinamico.p_ejecuta_procedimiento(p_nom_pgr);
         --
      END IF;
      --
      mx('F', 'pp_valida_dados');
      --
   EXCEPTION
      WHEN OTHERS THEN
         --
         l_trn            := INSTR (SQLERRM, 'TRN');
         --
         IF l_trn <> TRN.cero
         THEN
           --
            g_err_msg.EXTEND(1); -- 4.99
            g_err_msg(g_err_msg.LAST) := fp_trata_msg(l_cod_campo, -- 4.99
                                                                                      SQLCODE,
                                                                                      SQLERRM);
            --
         ELSE
            --
            l_anx_mensaje    := REPLACE (SQLERRM, SUBSTR (SQLERRM, INSTR (SQLERRM, g_k_pre_msg_erro_tratado), (INSTR (SQLERRM, g_k_separador_col) - INSTR (SQLERRM, g_k_pre_msg_erro_tratado) + 1)));
            --
            g_err_msg.EXTEND(1); -- 4.99
            g_err_msg(g_err_msg.LAST) := fp_trata_msg(l_cod_campo, -- 4.99
                                                                                      SQLCODE,
                                                                                      l_anx_mensaje);
            --
         END IF;
         --
         mx('F', 'pp_valida_dados - EXCEPTION');
         --
   END pp_valida_dados;
   --
   /* ------------------------------------------------------
   || pp_log_erro
   */ ------------------------------------------------------
   PROCEDURE pp_log_erro(p_num_poliza       a2219101_vcr.num_poliza%TYPE,
                         p_txt_error        a2000520.txt_error%TYPE,
                         p_txt_ruta_error   a2000520.txt_ruta_error%TYPE)
   IS
      --
      l_reg_a2000520 a2000520%ROWTYPE;
      --
   BEGIN
      --
      mx('I', 'pp_log_erro');
      --
      l_reg_a2000520.fec_tratamiento := trn_k_tiempo.f_fec_actu;
      l_reg_a2000520.cod_cia         := trn_k_global.cod_cia;
      l_reg_a2000520.num_poliza      := p_num_poliza;
      l_reg_a2000520.num_riesgo      := trn.CERO;
      l_reg_a2000520.num_secu        := trn.UNO;
      l_reg_a2000520.num_orden       := trn.UNO;
      l_reg_a2000520.txt_error       := p_txt_error;
      l_reg_a2000520.txt_ruta_error  := p_txt_ruta_error;
      l_reg_a2000520.tip_mvto_batch  := em.CARGA_BATCH;
      --
      em_k_a2000520.p_borra_poliza(l_reg_a2000520.fec_tratamiento,
                                   l_reg_a2000520.num_orden,
                                   l_reg_a2000520.tip_mvto_batch,
                                   l_reg_a2000520.cod_cia,
                                   l_reg_a2000520.num_poliza);
      --
      em_k_a2000520.p_inserta_registro(l_reg_a2000520);
      --
      mx('F', 'pp_log_erro');
      --
   END pp_log_erro;
   --
   /* ------------------------------------------------------
   || PP_CONSULTA_DADOS_VEICULO
   */ ------------------------------------------------------
   --
   PROCEDURE pp_consulta_dados_veiculo(p_cod_cia      g2109042_vcr.cod_cia%TYPE,
                                       p_cod_consulta NUMBER,
                                       p_xml_in       CLOB,
                                       p_xml          OUT CLOB)
   IS
      --
      l_cod_fipe          VARCHAR2(200):= NULL;
      l_cod_marca         g2109042_vcr.cod_marca            %TYPE := NULL;
      l_ano_modelo        a2100430.anio_sub_modelo          %TYPE;
      l_nom_sub_modelo    g2109042_vcr.Nom_Modelo_Submodelo %TYPE := NULL;
      l_cod_sub_modelo    g2109042_vcr.cod_sub_modelo       %TYPE := NULL;
      l_cod_modelo        g2109042_vcr.cod_modelo           %TYPE := NULL;
      l_ano_fabricacao    A2009018_VCR.ANO_FABRICACAO       %TYPE := NULL;
      l_num_serie         a2009018_vcr.num_chassi           %TYPE := NULL;
      l_mca_zero_km       a2000020.val_campo                %TYPE := NULL;
    l_reg_x2109042   x2109042_vcr%ROWTYPE;
    --
    l_cod_marca_exc      g2109042_vcr.cod_marca %TYPE := NULL;
    l_cod_modelo_exc     g2109042_vcr.cod_modelo %TYPE := NULL;
    l_cod_sub_modelo_exc g2109042_vcr.cod_sub_modelo %TYPE := NULL;
    --
      l_cache_existe           BOOLEAN;
      l_cache_xml              CLOB;
    l_cache_xml2           CLOB;
      l_cache_veic_marca_reg   a2009019_vcr%ROWTYPE;
      --
      l_retorno           ref_cursor;
      --
      PROCEDURE pi_valida_zero_km IS
      --
      BEGIN
        --
        IF l_mca_zero_km IS NULL
        THEN
          --
          l_mca_zero_km := NVL(fp_recupera_valor (p_xml_in, 'MCA_ZERO_KM')
                              ,trn.NO) ;
          --
          pp_asigna('MCA_ZERO_KM', l_mca_zero_km);
          --
        END IF;
        --
      END pi_valida_zero_km;
    --
    PROCEDURE pp_inserta_x2109042_vcr IS
      --
   BEGIN
      --
      mx('l_reg_x2109042.nom_campo_cod_fipe',
         l_reg_x2109042.nom_campo_cod_fipe);
      mx('l_reg_x2109042.cod_fipe', l_reg_x2109042.cod_fipe);
      mx('l_reg_x2109042.nom_campo_cod_molicar',
         l_reg_x2109042.nom_campo_cod_molicar);
      mx('l_reg_x2109042.cod_molicar', l_reg_x2109042.cod_molicar);
      mx('l_reg_x2109042.nom_campo_cod_marca',
         l_reg_x2109042.nom_campo_cod_marca);
      mx('l_reg_x2109042.cod_marca', l_reg_x2109042.cod_marca);
      mx('l_reg_x2109042.nom_campo_cod_modelo',
         l_reg_x2109042.nom_campo_cod_modelo);
      mx('l_reg_x2109042.cod_modelo', l_reg_x2109042.cod_modelo);
      mx('l_reg_x2109042.nom_campo_cod_sub_modelo',
         l_reg_x2109042.nom_campo_cod_sub_modelo);
      mx('l_reg_x2109042.cod_sub_modelo', l_reg_x2109042.cod_sub_modelo);
      mx('l_reg_x2109042.nom_campo_anio_sub_modelo',
         l_reg_x2109042.nom_campo_anio_sub_modelo);
      mx('l_reg_x2109042.anio_sub_modelo', l_reg_x2109042.anio_sub_modelo);
      mx('l_reg_x2109042.nom_campo_cod_ano_fabr',
         l_reg_x2109042.nom_campo_cod_ano_fabr);
      mx('l_reg_x2109042.cod_ano_fabr', l_reg_x2109042.cod_ano_fabr);
      mx('l_reg_x2109042.nom_campo_val_sub_modelo',
         l_reg_x2109042.nom_campo_val_sub_modelo);
      mx('l_reg_x2109042.val_sub_modelo', l_reg_x2109042.val_sub_modelo);
      mx('l_reg_x2109042.nom_campo_nom_modelo_submodelo',
         l_reg_x2109042.nom_campo_nom_modelo_submodelo);
      mx('l_reg_x2109042.nom_modelo_submodelo',
         l_reg_x2109042.nom_modelo_submodelo);
      mx('l_reg_x2109042.nom_campo_cod_madre',
         l_reg_x2109042.nom_campo_cod_madre);
      mx('l_reg_x2109042.cod_madre', l_reg_x2109042.cod_madre);
      mx('l_reg_x2109042.nom_campo_cod_categoria',
         l_reg_x2109042.nom_campo_cod_categoria);
      mx('l_reg_x2109042.cod_categoria', l_reg_x2109042.cod_categoria);
      mx('l_reg_x2109042.mca_excep_vot', l_reg_x2109042.mca_excep_vot);
      --
      INSERT INTO x2109042_vcr
      VALUES
        (l_reg_x2109042.nom_campo_cod_fipe,
         l_reg_x2109042.cod_fipe,
         l_reg_x2109042.nom_campo_cod_molicar,
         l_reg_x2109042.cod_molicar,
         l_reg_x2109042.nom_campo_cod_marca,
         l_reg_x2109042.cod_marca,
         l_reg_x2109042.nom_campo_cod_modelo,
         l_reg_x2109042.cod_modelo,
         l_reg_x2109042.nom_campo_cod_sub_modelo,
         l_reg_x2109042.cod_sub_modelo,
         l_reg_x2109042.nom_campo_anio_sub_modelo,
         l_reg_x2109042.anio_sub_modelo,
         l_reg_x2109042.nom_campo_cod_ano_fabr,
         l_reg_x2109042.cod_ano_fabr,
         l_reg_x2109042.nom_campo_val_sub_modelo,
         l_reg_x2109042.val_sub_modelo,
         l_reg_x2109042.nom_campo_nom_modelo_submodelo,
         l_reg_x2109042.nom_modelo_submodelo,
         l_reg_x2109042.nom_campo_cod_madre,
         l_reg_x2109042.cod_madre,
         l_reg_x2109042.nom_campo_cod_categoria,
         l_reg_x2109042.cod_categoria,
         l_reg_x2109042.mca_excep_vot);
      --
    END pp_inserta_x2109042_vcr;
    --
    --
    PROCEDURE pi_x2109042_vcr IS
    BEGIN
      --
      mx('I', 'pi_x2109042_vcr');
      mx('l_reg_x2109042.mca_excep_vot', l_reg_x2109042.mca_excep_vot);
      mx('l_reg_x2109042.cod_marca', l_reg_x2109042.cod_marca);
      mx('l_reg_x2109042.cod_modelo', l_reg_x2109042.cod_modelo);
      mx('l_reg_x2109042.cod_sub_modelo', l_reg_x2109042.cod_sub_modelo);
      --
      IF l_reg_x2109042.mca_excep_vot = 'S' THEN
        --
        IF l_reg_x2109042.cod_marca = l_cod_marca_exc AND
           l_reg_x2109042.cod_modelo = l_cod_modelo_exc AND
           l_reg_x2109042.cod_sub_modelo = l_cod_sub_modelo_exc THEN
          --
          mx('if pi_x2109042_vcr', 'if pi_x2109042_vcr');
          pp_inserta_x2109042_vcr; -->ROWTYPE
          --
        END IF;
        --
      ELSE
        --
        mx('else pi_x2109042_vcr', 'else pi_x2109042_vcr');
        pp_inserta_x2109042_vcr; -->ROWTYPE
        --
      END IF;
      --
      mx('F', 'pi_x2109042_vcr');
      --
    END pi_x2109042_vcr;
    --
  BEGIN
    --
      mx('I', 'pp_consulta_dados_veiculo');
      --
      pi_valida_zero_km;
      --
    l_cod_marca_exc      := ea_k_231_utils.f_valor_dv('COD_MARCA_EXCEP');
    l_cod_modelo_exc     := ea_k_231_utils.f_valor_dv('COD_MODELO_EXCEP');
    l_cod_sub_modelo_exc := ea_k_231_utils.f_valor_dv('COD_SUBMODELO_EXCEP');
    --
    l_cache_existe := FALSE;
    l_cache_xml    := NULL;
    --
    mx('p_cod_consulta', p_cod_consulta);
    mx('l_cod_marca', l_cod_marca);
    mx('l_cod_modelo', l_cod_modelo);
    mx('l_cod_sub_modelo', l_cod_sub_modelo);
    mx('l_cod_marca_exc', l_cod_marca_exc);
    mx('l_cod_modelo_exc', l_cod_modelo_exc);
    mx('l_cod_sub_modelo_exc', l_cod_sub_modelo_exc);
    mx('g_num_cotizacion', trn_k_global.ref_f_global('NUM_COTIZACION'));

  IF g_existe_g2109042_vcr = 'TRUE'  THEN  --3.68
        IF p_cod_consulta = g_k_cod_consulta_num_serie THEN
           --
           mx('SERIE-> ', g_k_cod_consulta_num_serie);
           --
           l_cod_fipe       := trn_k_global.devuelve('COD_MARCA_REF')  ;
           l_ano_modelo     := trn_k_global.devuelve('ANIO_SUB_MODELO');
           l_ano_fabricacao := trn_k_global.devuelve('ANO_FABRICACAO') ;
           l_num_serie      := trn_k_global.devuelve('DVNUM_SERIE')    ;
           --
           OPEN l_retorno
           FOR
           SELECT DISTINCT
             --
             'COD_MARCA_REF'                     AS nom_campo_cod_fipe,
             g2109042_vcr.cod_fipe               AS cod_fipe,
             'COD_MOLICAR'                       AS nom_campo_cod_molicar,
             g2109042_vcr.cod_molicar            AS cod_molicar,
             'COD_MARCA'                         AS nom_campo_cod_marca,
             g2109042_vcr.cod_marca              AS cod_marca,
             'COD_MODELO'                        AS nom_campo_cod_modelo,
             g2109042_vcr.cod_modelo             AS cod_modelo,
             'COD_SUB_MODELO'                    AS nom_campo_cod_sub_modelo,
             g2109042_vcr.cod_sub_modelo         AS cod_sub_modelo,
             'ANIO_SUB_MODELO'                   AS nom_campo_anio_sub_modelo,
             l_ano_modelo                        AS anio_sub_modelo,
             'COD_ANO_FABR'                      AS nom_campo_cod_ano_fabr,
             l_ano_fabricacao                    AS cod_ano_fabr,
             'VAL_REFERENCIA'                    AS nom_campo_val_sub_modelo,
             a2100430.val_sub_modelo             AS val_sub_modelo,
             'TXT_SUB_MODELO'                    AS nom_campo_nom_modelo_submodelo,
             g2109042_vcr.nom_modelo_submodelo   AS nom_modelo_submodelo,
             'COD_MADRE'                         AS nom_campo_cod_madre,
             g2109042_vcr.cod_madre              AS cod_madre,
             'COD_TIP_VEHI'                      AS nom_campo_cod_categoria,
             g2109042_vcr.cod_categoria AS cod_categoria,
             g2109042_vcr.mca_excep_vot AS mca_excep_vot
             /* 'NUM_PORTAS'                        AS nom_campo_num_portas,
              g2109042_vcr.num_portas             AS num_portas,
              'NUM_PASSAGEIROS'                   AS nom_campo_num_passageiros,
              g2109042_vcr.num_passageiros        AS num_passageiros,
              'COD_CLASSE'                        AS nom_campo_cod_classe,
              g2109042_vcr.cod_classe             AS cod_classe,
              'NUM_QTDE_IRREGULAR'                AS nom_campo_qtde_irregular,
              a2009018_vcr.num_qtde_irregular     AS num_qtde_irregular,
              'FEC_CONSULTA'                      AS nom_campo_fec_consulta,
              a2009018_vcr.fec_consulta           AS fec_consulta,
              'RETORNO SERVICO'                   AS nom_campo_retorno_servico,
              a2009018_vcr.txt_mensagem           AS retorno_servico,
              'NOM_MARCA'                         AS nom_campo_nom_marca,
              a2100400.nom_marca                  AS nom_marca */
           --
           FROM g2109042_vcr
           --
           LEFT OUTER JOIN a2100430             ON   g2109042_vcr.cod_cia        = a2100430.cod_cia
                                                AND  g2109042_vcr.cod_marca      = a2100430.cod_marca
                                                AND  g2109042_vcr.cod_modelo     = a2100430.cod_modelo
                                                AND  g2109042_vcr.cod_sub_modelo = a2100430.cod_sub_modelo
                                                AND  DECODE(l_mca_zero_km
                                                           ,trn.SI
                                                           ,trn.CERO
                                                           ,trn.NO
                                                           ,a2100430.anio_sub_modelo) BETWEEN DECODE(l_mca_zero_km
                                                                                                    ,trn.SI
                                                                                                    ,trn.CERO
                                                                                                    ,trn.NO
                                                                                                    ,g2109042_vcr.num_ano_de) AND
                                                                                              DECODE(l_mca_zero_km
                                                                                                    ,trn.SI
                                                                                                    ,trn.CERO
                                                                                                    ,trn.NO
                                                                                                    ,g2109042_vcr.num_ano_ate)
           --
          /* LEFT OUTER JOIN a2009018_vcr         ON  g2109042_vcr.cod_cia          = a2009018_vcr.cod_cia
                                                AND g2109042_vcr.cod_fipe         = a2009018_vcr.cod_fipe
           --
           LEFT OUTER JOIN a2100400             ON  g2109042_vcr.cod_cia          = a2100400.cod_cia
                                                AND g2109042_vcr.cod_marca        = a2100400.cod_marca*/
           --
           WHERE           a2100430.cod_cia     = p_cod_cia
             --
             AND           a2100430.fec_validez = (SELECT MAX(fec_validez)
                                                     FROM a2100430 B
                                                    WHERE B.cod_cia        = a2100430.cod_cia
                                                      AND B.cod_marca      = a2100430.cod_marca
                                                      AND B.cod_modelo     = a2100430.cod_modelo
                                                      AND B.cod_sub_modelo = a2100430.cod_sub_modelo
                                                      AND B.fec_validez   <= g_k_data)  --  I 1.38
             --
             AND (g2109042_vcr.cod_fipe         IN(SELECT a.cod_fipe
                                                     FROM TABLE(CAST(v_tab_fipe    AS TYPTAB_FIPE)) a)
                                                        OR g2109042_vcr.cod_molicar IN (SELECT b.cod_fipe
                                                                                          FROM TABLE(CAST(v_tab_fipe AS TYPTAB_FIPE)) b))
             --
             AND  a2100430.anio_sub_modelo      = NVL(DECODE(l_mca_zero_km
                                                            ,trn.SI
                                                            ,trn.CERO
                                                            ,trn.NO
                                                            ,l_ano_modelo)
                                                  ,a2100430.anio_sub_modelo)
             --
             AND g2109042_vcr.fec_validez       = (SELECT MAX(v.fec_validez)
                                                     FROM g2109042_vcr v
                                                    WHERE v.cod_cia        = g2109042_vcr.cod_cia
                                                      AND v.cod_marca      = g2109042_vcr.cod_marca
                                                      AND v.cod_modelo     = g2109042_vcr.cod_modelo
                                                      AND v.cod_sub_modelo = g2109042_vcr.cod_sub_modelo
                                                      AND v.fec_validez   <= g_k_data);
           --
        --
        FETCH l_retorno
          INTO l_reg_x2109042;
        --
        WHILE l_retorno%FOUND LOOP
          --
          pi_x2109042_vcr;
          --
          FETCH l_retorno
            INTO l_reg_x2109042;
          --
        END LOOP;
        --
        CLOSE l_retorno;
        --
        --p_gerar_xml_dados_veiculo(l_retorno, p_xml);
           --
        ELSIF p_cod_consulta = g_k_cod_consulta_marca_modelo THEN -- cursor quando sera passado o cod_marca e nome do modelo
           --
        mx('MARCA_MODELO-> ', g_k_cod_consulta_marca_modelo);
        --
           l_cod_marca      := fp_recupera_valor (p_xml_in, 'COD_MARCA')     ;
           l_nom_sub_modelo := fp_recupera_valor (p_xml_in, 'TXT_SUB_MODELO');
           --
        l_cod_modelo     := fp_recupera_valor(p_xml_in, 'COD_MODELO');
        l_cod_sub_modelo := fp_recupera_valor(p_xml_in, 'COD_SUB_MODELO');
        l_ano_modelo     := fp_recupera_valor(p_xml_in, 'ANIO_SUB_MODELO');
        --
        mx('MARCA ANO', 'MARCA ANO');
        mx('l_cod_marca', l_cod_marca);
        mx('l_cod_modelo', l_cod_modelo);
        mx('l_cod_sub_modelo', l_cod_sub_modelo);
             --
        OPEN l_retorno FOR
          SELECT DISTINCT --
             'COD_MARCA_REF'                     AS nom_campo_cod_fipe,
             g2109042_vcr.cod_fipe               AS cod_fipe,
             'COD_MOLICAR'                       AS nom_campo_cod_molicar,
             g2109042_vcr.cod_molicar            AS cod_molicar,
             'COD_MARCA'                         AS nom_campo_cod_marca,
             g2109042_vcr.cod_marca              AS cod_marca,
             'COD_MODELO'                        AS nom_campo_cod_modelo,
             g2109042_vcr.cod_modelo             AS cod_modelo,
             'COD_SUB_MODELO'                    AS nom_campo_cod_sub_modelo,
             g2109042_vcr.cod_sub_modelo         AS cod_sub_modelo,
             'ANIO_SUB_MODELO'                   AS nom_campo_anio_sub_modelo,
             g2109042_vcr.num_ano_ate            AS anio_sub_modelo,
             'COD_ANO_FABR'                      AS nom_campo_cod_ano_fabr,
             g2109042_vcr.num_ano_de             AS cod_ano_fabr,
             'VAL_REFERENCIA'                    AS nom_campo_val_sub_modelo,
             ''                                  AS val_sub_modelo,
             'TXT_SUB_MODELO'                    AS nom_campo_nom_modelo_submodelo,
             g2109042_vcr.nom_modelo_submodelo   AS nom_modelo_submodelo,
             'COD_MADRE'                         AS nom_campo_cod_madre,
             g2109042_vcr.cod_madre              AS cod_madre,
             'COD_TIP_VEHI'                      AS nom_campo_cod_categoria,
             g2109042_vcr.cod_categoria AS cod_categoria,
             g2109042_vcr.mca_excep_vot AS mca_excep_vot
            /* 'NUM_PORTAS'                        AS nom_campo_num_portas,
              g2109042_vcr.num_portas             AS num_portas,
              'NUM_PASSAGEIROS'                   AS nom_campo_num_passageiros,
              g2109042_vcr.num_passageiros        AS num_passageiros,
              'COD_CLASSE'                        AS nom_campo_cod_classe,
              g2109042_vcr.cod_classe             AS cod_classe,
              'NUM_QTDE_IRREGULAR'                AS nom_campo_qtde_irregular,
              ''                                  AS num_qtde_irregular,
              'FEC_CONSULTA'                      AS nom_campo_fec_consulta,
              ''                                  AS fec_consulta,
              'RETORNO SERVICO'                   AS nom_campo_retorno_servico,
              ''                                  AS retorno_servico,
              'NOM_MARCA'                         AS nom_campo_nom_marca,
              a2100400.nom_marca                  AS nom_marca*/
             --
           FROM g2109042_vcr
           --
           LEFT OUTER JOIN a2100400          ON  g2109042_vcr.cod_cia          = a2100400.cod_cia
                                             AND g2109042_vcr.cod_marca        = a2100400.cod_marca
           --
           WHERE g2109042_vcr.cod_cia          = p_cod_cia
             AND g2109042_vcr.cod_marca        = l_cod_marca
             AND REGEXP_LIKE                   (UPPER(nom_modelo_submodelo),
                                                       '^' || l_nom_sub_modelo||'')
             --
             AND g2109042_vcr.fec_validez       = (SELECT MAX(v.fec_validez)
                                                     FROM g2109042_vcr v
                                                    WHERE v.cod_cia        = g2109042_vcr.cod_cia
                                                      AND v.cod_marca      = g2109042_vcr.cod_marca
                                                      AND v.cod_modelo     = g2109042_vcr.cod_modelo
                                                      AND v.cod_sub_modelo = g2109042_vcr.cod_sub_modelo
                                                      AND v.fec_validez   <= g_k_data);
           --
        FETCH l_retorno
          INTO l_reg_x2109042;
        --
        WHILE l_retorno%FOUND LOOP
          --
          pi_x2109042_vcr;
          --
          FETCH l_retorno
            INTO l_reg_x2109042;
          --
        END LOOP;
        --
        CLOSE l_retorno;
        --
        -- p_gerar_xml_dados_veiculo(l_retorno, p_xml);
          --
      -- I 1.51
           ELSIF p_cod_consulta = g_k_cod_consulta_modelo THEN -- cursor quando passado nome do modelo
           --
        mx('MODELO-> ', g_k_cod_consulta_modelo);
        --
           l_cod_marca      := fp_recupera_valor (p_xml_in, 'COD_MARCA')     ;
           l_nom_sub_modelo := fp_recupera_valor (p_xml_in, 'TXT_SUB_MODELO');
           --

           --IF Length(l_nom_sub_modelo) >= 3 THEN

            OPEN l_retorno
            FOR
            SELECT DISTINCT
              --
              'COD_MARCA_REF'                     AS nom_campo_cod_fipe,
              g2109042_vcr.cod_fipe               AS cod_fipe,
              'COD_MOLICAR'                       AS nom_campo_cod_molicar,
              g2109042_vcr.cod_molicar            AS cod_molicar,
              'COD_MARCA'                         AS nom_campo_cod_marca,
              g2109042_vcr.cod_marca              AS cod_marca,
              'COD_MODELO'                        AS nom_campo_cod_modelo,
              g2109042_vcr.cod_modelo             AS cod_modelo,
              'COD_SUB_MODELO'                    AS nom_campo_cod_sub_modelo,
              g2109042_vcr.cod_sub_modelo         AS cod_sub_modelo,
              'ANIO_SUB_MODELO'                   AS nom_campo_anio_sub_modelo,
              g2109042_vcr.num_ano_ate            AS anio_sub_modelo,
              'COD_ANO_FABR'                      AS nom_campo_cod_ano_fabr,
              g2109042_vcr.num_ano_de             AS cod_ano_fabr,
              'VAL_REFERENCIA'                    AS nom_campo_val_sub_modelo,
              ''                                  AS val_sub_modelo,
              'TXT_SUB_MODELO'                    AS nom_campo_nom_modelo_submodelo,
              g2109042_vcr.nom_modelo_submodelo   AS nom_modelo_submodelo,
              'COD_MADRE'                         AS nom_campo_cod_madre,
              g2109042_vcr.cod_madre              AS cod_madre,
              'COD_TIP_VEHI'                      AS nom_campo_cod_categoria,
              g2109042_vcr.cod_categoria AS cod_categoria,
              g2109042_vcr.mca_excep_vot AS mca_excep_vot
              /* 'NUM_PORTAS'                        AS nom_campo_num_portas,
                g2109042_vcr.num_portas             AS num_portas,
                'NUM_PASSAGEIROS'                   AS nom_campo_num_passageiros,
                g2109042_vcr.num_passageiros        AS num_passageiros,
                'COD_CLASSE'                        AS nom_campo_cod_classe,
                g2109042_vcr.cod_classe             AS cod_classe,
                'NUM_QTDE_IRREGULAR'                AS nom_campo_qtde_irregular,
                ''                                  AS num_qtde_irregular,
                'FEC_CONSULTA'                      AS nom_campo_fec_consulta,
                ''                                  AS fec_consulta,
                'RETORNO SERVICO'                   AS nom_campo_retorno_servico,
                ''                                  AS retorno_servico,
                'NOM_MARCA'                         AS nom_campo_nom_marca,
                a2100400.nom_marca                  AS nom_marca*/
              --
            FROM  g2109042_vcr
            --
            LEFT OUTER JOIN a2100400          ON  g2109042_vcr.cod_cia          = a2100400.cod_cia
                                              AND g2109042_vcr.cod_marca        = a2100400.cod_marca
            --
            WHERE g2109042_vcr.cod_cia          = p_cod_cia

              --AND g2109042_vcr.cod_marca        = l_cod_marca

              AND Upper(nom_modelo_submodelo) LIKE Upper('%'||l_nom_sub_modelo||'%')

              /*AND REGEXP_LIKE                   (UPPER(nom_modelo_submodelo),
                                                        '.'|| l_nom_sub_modelo||'.')*/
              --
              AND g2109042_vcr.fec_validez       = (SELECT MAX(v.fec_validez)
                                                      FROM g2109042_vcr v
                                                      WHERE v.cod_cia        = g2109042_vcr.cod_cia
                                                        AND v.cod_marca      = g2109042_vcr.cod_marca
                                                        AND v.cod_modelo     = g2109042_vcr.cod_modelo
                                                        AND v.cod_sub_modelo = g2109042_vcr.cod_sub_modelo
                                                        AND v.fec_validez   <= g_k_data);
           --END IF;
        FETCH l_retorno
          INTO l_reg_x2109042;
        --
        WHILE l_retorno%FOUND LOOP
          --
          pi_x2109042_vcr;
          --
          FETCH l_retorno
            INTO l_reg_x2109042;
          --
        END LOOP;
        --
        CLOSE l_retorno;
        --
        --p_gerar_xml_dados_veiculo(l_retorno, p_xml);

           --F 1.51
           --
        ELSIF p_cod_consulta = g_k_cod_consulta_marca THEN
           --
        mx('MARCA-> ', g_k_cod_consulta_marca);
        --
           l_cod_marca      := fp_recupera_valor (p_xml_in, 'COD_MARCA');
           --
           em_k_a2009019_vcr.p_devolve_xml(p_cod_cia      => p_cod_cia
                                          ,p_cod_marca    => l_cod_marca
                                          ,p_fec_consulta => TRUNC(SYSDATE)
                                          ,p_existe_xml   => l_cache_existe
                                          ,p_xml          => l_cache_xml2  );
           --
        IF NOT l_cache_existe
           OR (l_cache_existe AND
               l_cod_marca_exc IS NOT NULL )
        THEN
           --
           OPEN l_retorno
             FOR
             SELECT DISTINCT
               --
               'COD_MARCA_REF'                     AS nom_campo_cod_fipe,
               g2109042_vcr.cod_fipe               AS cod_fipe,
               'COD_MOLICAR'                       AS nom_campo_cod_molicar,
               g2109042_vcr.cod_molicar            AS cod_molicar,
               'COD_MARCA'                         AS nom_campo_cod_marca,
               g2109042_vcr.cod_marca              AS cod_marca,
               'COD_MODELO'                        AS nom_campo_cod_modelo,
               g2109042_vcr.cod_modelo             AS cod_modelo,
               'COD_SUB_MODELO'                    AS nom_campo_cod_sub_modelo,
               g2109042_vcr.cod_sub_modelo         AS cod_sub_modelo,
               'ANIO_SUB_MODELO'                   AS nom_campo_anio_sub_modelo,
               g2109042_vcr.num_ano_ate            AS anio_sub_modelo,
               'COD_ANO_FABR'                      AS nom_campo_cod_ano_fabr,
               g2109042_vcr.num_ano_de             AS cod_ano_fabr,
               'VAL_REFERENCIA'                    AS nom_campo_val_sub_modelo,
               ''                                  AS val_sub_modelo,
               'TXT_SUB_MODELO'                    AS nom_campo_nom_modelo_submodelo,
               g2109042_vcr.nom_modelo_submodelo   AS nom_modelo_submodelo,
               'COD_MADRE'                         AS nom_campo_cod_madre,
               g2109042_vcr.cod_madre              AS cod_madre,
               'COD_TIP_VEHI'                      AS nom_campo_cod_categoria,
               g2109042_vcr.cod_categoria AS cod_categoria,
               g2109042_vcr.mca_excep_vot AS mca_excep_vot
              /* 'NUM_PORTAS'                        AS nom_campo_num_portas,
                g2109042_vcr.num_portas             AS num_portas,
                'NUM_PASSAGEIROS'                   AS nom_campo_num_passageiros,
                g2109042_vcr.num_passageiros        AS num_passageiros,
                'COD_CLASSE'                        AS nom_campo_cod_classe,
                g2109042_vcr.cod_classe             AS cod_classe,
                'NUM_QTDE_IRREGULAR'                AS nom_campo_qtde_irregular,
                a2009018_vcr.num_qtde_irregular     AS num_qtde_irregular,
                'FEC_CONSULTA'                      AS nom_campo_fec_consulta,
                a2009018_vcr.fec_consulta           AS fec_consulta,
                'RETORNO SERVICO'                   AS nom_campo_retorno_servico,
                a2009018_vcr.txt_mensagem           AS retorno_servico,
                'NOM_MARCA'                         AS nom_campo_nom_marca,
                a2100400.nom_marca                  AS nom_marca*/
               --
             FROM g2109042_vcr
             --
             /*LEFT OUTER JOIN a2009018_vcr      ON  g2109042_vcr.cod_cia          = a2009018_vcr.cod_cia
                                               AND g2109042_vcr.cod_fipe         = a2009018_vcr.cod_fipe
                                            --   AND a2009018_vcr.num_chassi       = l_num_serie
             --
             LEFT OUTER JOIN a2100400          ON  g2109042_vcr.cod_cia          = a2100400.cod_cia
                                               AND g2109042_vcr.cod_marca        = a2100400.cod_marca*/
             --
             WHERE g2109042_vcr.cod_cia           = p_cod_cia
                AND g2109042_vcr.cod_marca        = l_cod_marca
  /*               AND g2109042_vcr.fec_validez      = (SELECT MAX(fec_validez)
                                                       FROM g2109042_vcr b
                                                      WHERE b.cod_cia        = g2109042_vcr.cod_cia
                                                        AND b.cod_marca      = g2109042_vcr.cod_marca
                                                        AND b.cod_modelo     = g2109042_vcr.cod_modelo
                                                        AND b.cod_sub_modelo = g2109042_vcr.cod_sub_modelo); */
               --
               AND g2109042_vcr.fec_validez       = (SELECT MAX(v.fec_validez)
                                                       FROM g2109042_vcr v
                                                      WHERE v.cod_cia        = g2109042_vcr.cod_cia
                                                        AND v.cod_marca      = g2109042_vcr.cod_marca
                                                        AND v.cod_modelo     = g2109042_vcr.cod_modelo
                                                        AND v.cod_sub_modelo = g2109042_vcr.cod_sub_modelo
                                                        AND v.fec_validez   <= g_k_data);
             --
           --p_gerar_xml_dados_veiculo(l_retorno, l_cache_xml);
           --
           --
           FETCH l_retorno
             INTO l_reg_x2109042;
           --
           WHILE l_retorno%FOUND LOOP
             --
             pi_x2109042_vcr;
             --
             FETCH l_retorno
               INTO l_reg_x2109042;
             --
           END LOOP;
           --
           CLOSE l_retorno;
        --
           END IF;
           --
        ELSIF p_cod_consulta = g_k_cod_consulta_fipe THEN
           --
        mx('FIPE-> ', g_k_cod_consulta_fipe);
        --
           --l_cod_fipe       := trn_k_global.devuelve('COD_MARCA_REF');
           l_cod_fipe       := fp_recupera_valor (p_xml_in, 'COD_FIPE');
           --
           OPEN l_retorno
           FOR
           SELECT DISTINCT
           --
             'COD_MARCA_REF'                                            AS nom_campo_cod_fipe,
             DECODE(g2109042_vcr.cod_fipe,'0',NULL,g2109042_vcr.cod_fipe) AS cod_fipe,
             'COD_MOLICAR'                                  AS nom_campo_cod_molicar,
             g2109042_vcr.cod_molicar                        AS cod_molicar,
             'COD_MARCA'                                                AS nom_campo_cod_marca,
             g2109042_vcr.cod_marca                                     AS cod_marca,
             'COD_MODELO'                                               AS nom_campo_cod_modelo,
             g2109042_vcr.cod_modelo                                    AS cod_modelo,
             'COD_SUB_MODELO'                                           AS nom_campo_cod_sub_modelo,
             g2109042_vcr.cod_sub_modelo                                AS cod_sub_modelo,
             'ANIO_SUB_MODELO'                                          AS nom_campo_anio_sub_modelo,
             g2109042_vcr.num_ano_ate                                   AS anio_sub_modelo,
             'COD_ANO_FABR'                                             AS nom_campo_cod_ano_fabr,
             g2109042_vcr.num_ano_de                                    AS cod_ano_fabr,
             'VAL_REFERENCIA'                                           AS nom_campo_val_sub_modelo,
             ''                                                         AS val_sub_modelo,
             'TXT_SUB_MODELO'                                           AS nom_campo_nom_modelo_submodelo,
             g2109042_vcr.nom_modelo_submodelo                          AS nom_modelo_submodelo,
             'COD_MADRE'                                                AS nom_campo_cod_madre,
             g2109042_vcr.cod_madre                                     AS cod_madre,
             'COD_TIP_VEHI'                                             AS nom_campo_cod_categoria,
             g2109042_vcr.cod_categoria AS cod_categoria,
             g2109042_vcr.mca_excep_vot AS mca_excep_vot
            /* 'NUM_PORTAS'                                             AS nom_campo_num_portas,
              g2109042_vcr.num_portas                                   AS num_portas,
              'NUM_PASSAGEIROS'                                         AS nom_campo_num_passageiros,
              g2109042_vcr.num_passageiros                              AS num_passageiros,
              'COD_CLASSE'                                              AS nom_campo_cod_classe,
              g2109042_vcr.cod_classe                                   AS cod_classe,
              'QTDE_IRREGULAR'                                          AS nom_campo_qtde_irregular,
              ''                                                        AS num_qtde_irregular,
              'FEC_CONSULTA'                                            AS nom_campo_fec_consulta,
              ''                                                        AS fec_consulta,
              'RETORNO_SERVICO'                                         AS nom_campo_retorno_servico,
              ''                                                        AS retorno_servico,
              'NOM_MARCA'                                               AS nom_campo_nom_marca,
              a2100400.nom_marca                                        AS nom_marca*/
           --
           FROM g2109042_vcr
           --
           LEFT OUTER JOIN a2100400          ON  g2109042_vcr.cod_cia          = a2100400.cod_cia
                                             AND g2109042_vcr.cod_marca        = a2100400.cod_marca
           --
           WHERE g2109042_vcr.cod_cia          = p_cod_cia
             AND(g2109042_vcr.cod_fipe         = l_cod_fipe OR
                 g2109042_vcr.cod_molicar      = l_cod_fipe)
/*              AND g2109042_vcr.fec_validez      = (SELECT MAX(fec_validez)
                                                    FROM g2109042_vcr b
                                                   WHERE b.cod_cia        = g2109042_vcr.cod_cia
                                                     AND b.cod_marca      = g2109042_vcr.cod_marca
                                                     and b.cod_modelo     = g2109042_vcr.cod_modelo
                                                     and b.cod_sub_modelo = g2109042_vcr.cod_sub_modelo); */
             --
             AND g2109042_vcr.fec_validez       = (SELECT MAX(v.fec_validez)
                                                     FROM g2109042_vcr v
                                                    WHERE v.cod_cia        = g2109042_vcr.cod_cia
                                                      AND v.cod_marca      = g2109042_vcr.cod_marca
                                                      AND v.cod_modelo     = g2109042_vcr.cod_modelo
                                                      AND v.cod_sub_modelo = g2109042_vcr.cod_sub_modelo
                                                      AND v.fec_validez   <= g_k_data);
           --
        FETCH l_retorno
          INTO l_reg_x2109042;
        --
        WHILE l_retorno%FOUND LOOP
          --
          pi_x2109042_vcr;
          --
          FETCH l_retorno
            INTO l_reg_x2109042;
          --
        END LOOP;
        --
        --p_gerar_xml_dados_veiculo(l_retorno, p_xml);
           --
           IF l_retorno%ROWCOUNT = trn.CERO THEN
              --
              g_err_msg.EXTEND(1); -- 4.99
              g_err_msg(g_err_msg.LAST) := fp_trata_msg('COD_FIPE', -- 4.99
                                                                                        NULL,
                                                                                        g_k_pre_msg_erro || '20098559' || g_k_sep_cod_msg);
              --
              pp_processa_mensagem(g_err_msg, -- 4.99
                                   l_retorno);
              --
              p_gerar_xml_mensagem(l_retorno, p_xml);
              --
              g_err_msg := NULL; -- 4.99
              --
          END IF;
          --
        CLOSE l_retorno;
        --
        ELSIF p_cod_consulta = g_k_cod_consulta_marca_ano THEN
           --
             mx('MARCA_ANO-> ', g_k_cod_consulta_marca_ano);
             --
             l_cod_marca      := fp_recupera_valor (p_xml_in, 'COD_MARCA');
             l_cod_modelo     := fp_recupera_valor (p_xml_in, 'COD_MODELO');
             l_cod_sub_modelo := fp_recupera_valor (p_xml_in, 'COD_SUB_MODELO');
             l_ano_modelo     := fp_recupera_valor (p_xml_in, 'ANIO_SUB_MODELO');
             --
             mx('MARCA ANO', 'MARCA ANO');
             mx('l_cod_marca', l_cod_marca);
             mx('l_cod_modelo', l_cod_modelo);
             mx('l_cod_sub_modelo', l_cod_sub_modelo);
             --
             OPEN l_retorno
             FOR
             SELECT DISTINCT
                    'COD_MARCA_REF'                     AS nom_campo_cod_fipe,
                    g2109042_vcr.cod_fipe               AS cod_fipe,
                    'COD_MOLICAR'                       AS nom_campo_cod_molicar,
                    g2109042_vcr.cod_molicar            AS cod_molicar,
                    'COD_MARCA'                         AS nom_campo_cod_marca,
                    g2109042_vcr.cod_marca              AS cod_marca,
                    'COD_MODELO'                        AS nom_campo_cod_modelo,
                    g2109042_vcr.cod_modelo             AS cod_modelo,
                    'COD_SUB_MODELO'                    AS nom_campo_cod_sub_modelo,
                    g2109042_vcr.cod_sub_modelo         AS cod_sub_modelo,
                    'ANIO_SUB_MODELO'                   AS nom_campo_anio_sub_modelo,
                    g2109042_vcr.num_ano_ate            AS anio_sub_modelo,
                    'COD_ANO_FABR'                      AS nom_campo_cod_ano_fabr,
                    g2109042_vcr.num_ano_de             AS cod_ano_fabr,
                    'VAL_REFERENCIA'                    AS nom_campo_val_sub_modelo,
                    a2100430.val_sub_modelo             AS val_sub_modelo,
                    'TXT_SUB_MODELO'                    AS nom_campo_nom_modelo_submodelo,
                    g2109042_vcr.nom_modelo_submodelo   AS nom_modelo_submodelo,
                    'COD_MADRE'                         AS nom_campo_cod_madre,
                    g2109042_vcr.cod_madre              AS cod_madre,
                    'COD_TIP_VEHI'                      AS nom_campo_cod_categoria,
                    g2109042_vcr.cod_categoria AS cod_categoria,
                    g2109042_vcr.mca_excep_vot AS mca_excep_vot
               FROM g2109042_vcr
                      LEFT OUTER JOIN a2100430 ON   g2109042_vcr.cod_cia        = a2100430.cod_cia
                                               AND  g2109042_vcr.cod_marca      = a2100430.cod_marca
                                               AND  g2109042_vcr.cod_modelo     = a2100430.cod_modelo
                                               AND  g2109042_vcr.cod_sub_modelo = a2100430.cod_sub_modelo
                                               AND  DECODE(l_mca_zero_km
                                                           ,trn.SI
                                                           ,trn.CERO
                                                           ,trn.NO
                                                           ,a2100430.anio_sub_modelo) BETWEEN DECODE(l_mca_zero_km
                                                                                                    ,trn.SI
                                                                                                    ,trn.CERO
                                                                                                    ,trn.NO
                                                                                                    ,g2109042_vcr.num_ano_de) AND
                                                                                              DECODE(l_mca_zero_km
                                                                                                    ,trn.SI
                                                                                                    ,trn.CERO
                                                                                                    ,trn.NO
                                                                                                    ,g2109042_vcr.num_ano_ate)
              WHERE a2100430.cod_cia          = p_cod_cia
                AND a2100430.fec_validez      = (SELECT MAX(B.fec_validez)
                                                   FROM a2100430 B
                                                  WHERE B.cod_cia         = a2100430.cod_cia
                                                    AND B.cod_marca       = a2100430.cod_marca
                                                    AND B.cod_modelo      = a2100430.cod_modelo
                                                    AND B.cod_sub_modelo  = a2100430.cod_sub_modelo
                                                    AND B.anio_sub_modelo = a2100430.anio_sub_modelo
                                                    AND B.fec_validez    <= g_k_data)  --  I 1.38
                AND g2109042_vcr.cod_marca      = l_cod_marca
                AND g2109042_vcr.cod_modelo     = l_cod_modelo
                AND g2109042_vcr.cod_sub_modelo = l_cod_sub_modelo
                AND a2100430.anio_sub_modelo    = NVL(DECODE(l_mca_zero_km
                                                              ,trn.SI
                                                              ,trn.CERO
                                                              ,trn.NO
                                                              ,l_ano_modelo)
                                                    ,a2100430.anio_sub_modelo)
               --
               AND g2109042_vcr.fec_validez       = (SELECT MAX(v.fec_validez)
                                                       FROM g2109042_vcr v
                                                      WHERE v.cod_cia        = g2109042_vcr.cod_cia
                                                        AND v.cod_marca      = g2109042_vcr.cod_marca
                                                        AND v.cod_modelo     = g2109042_vcr.cod_modelo
                                                        AND v.cod_sub_modelo = g2109042_vcr.cod_sub_modelo
                                                        AND v.fec_validez   <= g_k_data);
             --
          FETCH l_retorno
            INTO l_reg_x2109042;
          --
          WHILE l_retorno%FOUND LOOP
            --
            mx('entra loop', 'entra loop');
            --
            pi_x2109042_vcr;
            --
            FETCH l_retorno
              INTO l_reg_x2109042;
            --
          END LOOP;
          --
          CLOSE l_retorno;
          --
          --p_gerar_xml_dados_veiculo(l_retorno, p_xml);
          --
        ELSIF p_cod_consulta = g_k_cod_consulta_zero_km THEN
           --
        mx('ZERO_KM-> ', g_k_cod_consulta_zero_km);
        --
           l_cod_marca      := fp_recupera_valor (p_xml_in, 'COD_MARCA');
           l_cod_modelo     := fp_recupera_valor (p_xml_in, 'COD_MODELO');
           l_cod_sub_modelo := fp_recupera_valor (p_xml_in, 'COD_SUB_MODELO');
           --
        mx('l_cod_marca', l_cod_marca);
        mx('l_cod_modelo', l_cod_modelo);
        mx('l_cod_sub_modelo', l_cod_sub_modelo);
        mx('ZERO_KM', 'ZERO_KM');
        --
           OPEN l_retorno
           FOR
           SELECT DISTINCT
                  'COD_MARCA_REF'                     AS nom_campo_cod_fipe,
                  g2109042_vcr.cod_fipe               AS cod_fipe,
                  'COD_MOLICAR'                       AS nom_campo_cod_molicar,
                  g2109042_vcr.cod_molicar            AS cod_molicar,
                  'COD_MARCA'                         AS nom_campo_cod_marca,
                  g2109042_vcr.cod_marca              AS cod_marca,
                  'COD_MODELO'                        AS nom_campo_cod_modelo,
                  g2109042_vcr.cod_modelo             AS cod_modelo,
                  'COD_SUB_MODELO'                    AS nom_campo_cod_sub_modelo,
                  g2109042_vcr.cod_sub_modelo         AS cod_sub_modelo,
                  'ANIO_SUB_MODELO'                   AS nom_campo_anio_sub_modelo,
                  g2109042_vcr.num_ano_ate            AS anio_sub_modelo,
                  'COD_ANO_FABR'                      AS nom_campo_cod_ano_fabr,
                  g2109042_vcr.num_ano_de             AS cod_ano_fabr,
                  'VAL_REFERENCIA'                    AS nom_campo_val_sub_modelo,
                  a2100430.val_sub_modelo             AS val_sub_modelo,
                  'TXT_SUB_MODELO'                    AS nom_campo_nom_modelo_submodelo,
                  g2109042_vcr.nom_modelo_submodelo   AS nom_modelo_submodelo,
                  'COD_MADRE'                         AS nom_campo_cod_madre,
                  g2109042_vcr.cod_madre              AS cod_madre,
                  'COD_TIP_VEHI'                      AS nom_campo_cod_categoria,
                  g2109042_vcr.cod_categoria AS cod_categoria,
                  g2109042_vcr.mca_excep_vot AS mca_excep_vot
              FROM g2109042_vcr
                    LEFT OUTER JOIN a2100430 ON   g2109042_vcr.cod_cia        = a2100430.cod_cia
                                             AND  g2109042_vcr.cod_marca      = a2100430.cod_marca
                                             AND  g2109042_vcr.cod_modelo     = a2100430.cod_modelo
                                             AND  g2109042_vcr.cod_sub_modelo = a2100430.cod_sub_modelo
            WHERE a2100430.COD_CIA          = p_cod_cia
              AND a2100430.fec_validez      = (SELECT MAX(B.fec_validez)
                                                 FROM a2100430 B
                                                WHERE B.cod_cia         = a2100430.cod_cia
                                                  AND B.cod_marca       = a2100430.cod_marca
                                                  AND B.cod_modelo      = a2100430.cod_modelo
                                                  AND B.cod_sub_modelo  = a2100430.cod_sub_modelo
                                                  AND B.anio_sub_modelo = a2100430.anio_sub_modelo
                                                  AND B.fec_validez    <= g_k_data)  --  I 1.38
              AND g2109042_vcr.cod_marca      = l_cod_marca
              AND g2109042_vcr.cod_modelo     = l_cod_modelo
              AND g2109042_vcr.cod_sub_modelo = l_cod_sub_modelo
              AND a2100430.anio_sub_modelo    = trn.CERO
             --
             AND g2109042_vcr.fec_validez       = (SELECT MAX(v.fec_validez)
                                                     FROM g2109042_vcr v
                                                    WHERE v.cod_cia        = g2109042_vcr.cod_cia
                                                      AND v.cod_marca      = g2109042_vcr.cod_marca
                                                      AND v.cod_modelo     = g2109042_vcr.cod_modelo
                                                      AND v.cod_sub_modelo = g2109042_vcr.cod_sub_modelo
                                                      AND v.fec_validez   <= g_k_data);
           --
        FETCH l_retorno
          INTO l_reg_x2109042;
        --
        WHILE l_retorno%FOUND LOOP
          --
          pi_x2109042_vcr;
          --
          FETCH l_retorno
            INTO l_reg_x2109042;
          --
        END LOOP;
        --
        CLOSE l_retorno;
        --
        --p_gerar_xml_dados_veiculo(l_retorno, p_xml);
        --
      END IF;
      --
      l_retorno := NULL;
      --
      IF l_cache_existe
        AND l_cod_marca_exc IS NULL
      THEN
          --
          p_xml := l_cache_xml2;
          --
      ELSE
         --
         OPEN l_retorno FOR
           SELECT nom_campo_cod_fipe,
                  cod_fipe,
                  nom_campo_cod_molicar,
                  cod_molicar,
                  nom_campo_cod_marca,
                  cod_marca,
                  nom_campo_cod_modelo,
                  cod_modelo,
                  nom_campo_cod_sub_modelo,
                  cod_sub_modelo,
                  nom_campo_anio_sub_modelo,
                  anio_sub_modelo,
                  nom_campo_cod_ano_fabr,
                  cod_ano_fabr,
                  nom_campo_val_sub_modelo,
                  val_sub_modelo,
                  nom_campo_nom_modelo_submodelo,
                  nom_modelo_submodelo,
                  nom_campo_cod_madre,
                  cod_madre,
                  nom_campo_cod_categoria,
                  cod_categoria /*,
                                        mca_excep_vot*/
             FROM x2109042_vcr; --> Tabla Temporal (Temporal Table)
         --
         mx('fin cursor', 'fin cursor');
         --
         p_gerar_xml_dados_veiculo(l_retorno, l_cache_xml);
         --
         p_xml := l_cache_xml;
         --
         IF p_cod_consulta = g_k_cod_consulta_marca AND l_cod_marca_exc IS NULL
         THEN
           --
           l_cache_veic_marca_reg.cod_cia        := p_cod_cia;
           l_cache_veic_marca_reg.cod_marca      := l_cod_marca;
           l_cache_veic_marca_reg.fec_consulta   := g_k_data;
           l_cache_veic_marca_reg.fec_validez    := g_k_data;
           l_cache_veic_marca_reg.desc_xml_envio := l_cache_xml;
           --
           em_k_a2009019_vcr.p_carrega_xml(p_reg_a2009019 => l_cache_veic_marca_reg);
           --
           p_xml := l_cache_xml;
           --
        END IF;
        --
      END IF;
      --
    END IF;--3.68
    --
    mx('F', 'pp_consulta_dados_veiculo');
    --
   END pp_consulta_dados_veiculo;
   --
   /* ------------------------------------------------------
   || processa retorno para o servico de processarPasso
   */ ------------------------------------------------------
   --
   PROCEDURE pp_processa_retorno (p_xml OUT CLOB)
   IS
      --
      l_retorno          ref_cursor;
      l_cursor_message   ref_cursor;
      l_qtdd_erro        NUMBER;
      l_xml_unico        CLOB;
      l_xml_message      CLOB;
      l_reg_msg_ws       TYPREG_MSG_WS;
      --
   BEGIN
      --
      mx('I', 'pp_processa_retorno');
      --
      l_xml_unico      := NULL;
      l_xml_message    := NULL;
      --
      SELECT COUNT(X2000000.cod_mensagem) INTO l_qtdd_erro
        FROM TABLE(CAST(g_err_msg AS TYPTAB_MSG_WS)) X2000000 -- 4.99
        WHERE X2000000.tip_mensagem = g_k_tip_msg_error;
      --
      g_qtdd_erro := l_qtdd_erro;
      --
      pp_busca_campos_retorno(l_retorno);
      --
      p_gerar_xml_campo_unico(l_retorno, l_xml_unico);
      --
      IF l_qtdd_erro = trn.CERO THEN
         --
         l_reg_msg_ws := fp_trata_msg('COD_RETORNO',
                                      NULL,
                                      g_k_pre_msg_erro || trn.UNO || g_k_sep_cod_msg);
         --
         g_err_msg.EXTEND(1); -- 4.99
         g_err_msg(g_err_msg.LAST) := l_reg_msg_ws; -- 4.99
         --
      END IF;
      --
      pp_processa_mensagem(g_err_msg, -- 4.99
                           l_cursor_message);
      --
      p_gerar_xml_mensagem(l_cursor_message, l_xml_message);
      --
      p_xml := CONCAT(l_xml_unico, l_xml_message);
      --
      mx('F', 'pp_processa_retorno');
      --
   END pp_processa_retorno;
   --
   /* ----------------------
   || pp_retorna_valor_cast
   */ ----------------------
     PROCEDURE pp_retorna_valor_cast (p_cod_campo  IN g_cot_reg.cod_campo%TYPE,
                                    p_val_campo OUT g_cot_reg.val_campo%TYPE)
     IS
     --
     l_val_campo g_cot_reg.val_campo%TYPE;
     --
   BEGIN
     --
     SELECT X2000000.val_campo
       INTO p_val_campo
       FROM TABLE(CAST(g_cot_dados AS TYPTAB_DADOS_COT)) X2000000
      WHERE X2000000.cod_campo = p_cod_campo;
     --
   EXCEPTION
     WHEN OTHERS THEN
       --
       p_val_campo := NULL;
       --
   END;

   /* ----------------------
   ||   p_consulta_veic
   */ ----------------------
   --
   PROCEDURE p_consulta_veic (p_cod_fipe IN     g2109042_vcr.cod_fipe%TYPE,
                              p_tab_veic IN OUT TYPTAB_DADOS_VEIC,
                              p_num_serie IN a2009018_vcr.num_chassi%TYPE,
                              p_reg_nortix A2009018_VCR%ROWTYPE --MOTORSUBS 3.83
                              ) --2.98
      IS
      --
      l_cod_cia           a2100430.cod_cia%TYPE;
      l_ano_modelo        a2100430.anio_sub_modelo%TYPE := NULL;
      l_ano_fabricacao    A2009018_VCR.ano_fabricacao%TYPE := NULL;
    --l_num_serie         a2009018_vcr.num_chassi%TYPE := trn_k_global.devuelve('DVNUM_SERIE'); 2.93
      --
      l_mca_carga         VARCHAR2(1);
      l_mca_zero_km       a2000020.val_campo%TYPE := trn.NO;
    --
      l_cod_marca         g2109042_vcr.cod_marca            %TYPE := NULL;
      l_cod_sub_modelo    g2109042_vcr.cod_sub_modelo       %TYPE := NULL;
      l_cod_modelo        g2109042_vcr.cod_modelo           %TYPE := NULL;
      --
      CURSOR c_cur_serie (p_cod_cia  a2100430.cod_cia%TYPE, -- 2.98
                    p_cod_fipe g2109042_vcr.cod_fipe%TYPE)
      IS
         SELECT DISTINCT
         --
           'COD_MARCA_REF'                     AS NOM_CAMPO_COD_FIPE,
           g2109042_vcr.cod_fipe               AS COD_FIPE,
           'COD_MOLICAR'                       AS NOM_CAMPO_COD_MOLICAR,
           g2109042_vcr.cod_molicar            AS COD_MOLICAR,
           'COD_MARCA'                         AS NOM_CAMPO_COD_MARCA,
           g2109042_vcr.cod_marca              AS COD_MARCA,
           'COD_MODELO'                        AS NOM_CAMPO_COD_MODELO,
           g2109042_vcr.cod_modelo             AS COD_MODELO,
           'COD_SUB_MODELO'                    AS NOM_CAMPO_COD_SUB_MODELO,
           g2109042_vcr.cod_sub_modelo         AS COD_SUB_MODELO,
           'ANIO_SUB_MODELO'                   AS NOM_CAMPO_ANIO_SUB_MODELO,
           l_ano_modelo                        AS ANIO_SUB_MODELO,
           'COD_ANO_FABR'                      AS NOM_CAMPO_COD_ANO_FABR,
           l_ano_fabricacao                    AS COD_ANO_FABR,
           'VAL_REFERENCIA'                    AS NOM_CAMPO_VAL_SUB_MODELO,
           a2100430.val_sub_modelo             AS VAL_SUB_MODELO,
           'TXT_SUB_MODELO'                    AS NOM_CAMPO_NOM_MODELO_SUBMODELO,
           g2109042_vcr.nom_modelo_submodelo   AS NOM_MODELO_SUBMODELO,
           'COD_MADRE'                         AS NOM_CAMPO_COD_MADRE,
           g2109042_vcr.cod_madre              AS COD_MADRE,
           'COD_TIP_VEHI'                      AS NOM_CAMPO_COD_CATEGORIA,
           g2109042_vcr.cod_categoria          AS COD_CATEGORIA,
           'NUM_SERIE'                         AS NOM_CAMPO_NUM_SERIE, --2.98
           a2009018_vcr.num_chassi             AS NUM_SERIE, --2.98
           g2109042_vcr.mca_excep_vot          AS MCA_EXCEP_VOT
          /* 'NUM_PORTAS'                        AS nom_campo_num_portas,
            g2109042_vcr.num_portas             AS num_portas,
            'NUM_PASSAGEIROS'                   AS nom_campo_num_passageiros,
            g2109042_vcr.num_passageiros        AS num_passageiros,
            'COD_CLASSE'                        AS nom_campo_cod_classe,
            g2109042_vcr.cod_classe             AS cod_classe,
            'NUM_QTDE_IRREGULAR'                AS nom_campo_qtde_irregular,
            a2009018_vcr.num_qtde_irregular     AS num_qtde_irregular,
            'FEC_CONSULTA'                      AS nom_campo_fec_consulta,
            a2009018_vcr.fec_consulta           AS fec_consulta,
            'RETORNO SERVICO'                   AS nom_campo_retorno_servico,
            a2009018_vcr.txt_mensagem           AS retorno_servico,
            'NOM_MARCA'                         AS nom_campo_nom_marca,
            a2100400.nom_marca                  AS nom_marca*/
         --
         FROM g2109042_vcr
         --
         LEFT OUTER JOIN a2100430             ON   g2109042_vcr.cod_cia        = a2100430.cod_cia
                                              AND  g2109042_vcr.cod_marca      = a2100430.cod_marca
                                              AND  g2109042_vcr.cod_modelo     = a2100430.cod_modelo
                                              AND  g2109042_vcr.cod_sub_modelo = a2100430.cod_sub_modelo
                                              AND  DECODE(l_mca_zero_km
                                                         ,trn.SI
                                                         ,trn.CERO
                                                         ,trn.NO
                                                         ,a2100430.anio_sub_modelo) BETWEEN DECODE(l_mca_zero_km
                                                                                                  ,trn.SI
                                                                                                  ,trn.CERO
                                                                                                  ,trn.NO
                                                                                                  ,g2109042_vcr.num_ano_de) AND
                                                                                            DECODE(l_mca_zero_km
                                                                                                  ,trn.SI
                                                                                                  ,trn.CERO
                                                                                                  ,trn.NO
                                                                                                  ,g2109042_vcr.num_ano_ate)
         -- I 2.98
         LEFT OUTER JOIN a2009018_vcr
          -- I 3.07
          ON  a2009018_vcr.cod_cia = p_cod_cia
          AND a2009018_vcr.num_chassi = p_num_serie
          -- F 3.07
          AND a2009018_vcr.desc_servico = 'NORTIX_PLACA'
         -- F 2.98
         /*LEFT OUTER JOIN a2009018_vcr         ON  g2109042_vcr.cod_cia          = a2009018_vcr.cod_cia
                                              AND g2109042_vcr.cod_fipe         = a2009018_vcr.cod_fipe
                                              AND a2009018_vcr.num_chassi       = l_num_serie
         --
         LEFT OUTER JOIN a2100400             ON  g2109042_vcr.cod_cia          = a2100400.cod_cia
                                              AND g2109042_vcr.cod_marca        = a2100400.cod_marca*/
         --
         WHERE           a2100430.cod_cia     = p_cod_cia
           --
           AND           a2100430.fec_validez = (SELECT MAX(fec_validez)
                                                   FROM a2100430 B
                                                  WHERE B.cod_cia         = a2100430.cod_cia
                                                    AND B.cod_marca       = a2100430.cod_marca
                                                    AND B.cod_modelo      = a2100430.cod_modelo
                                                    AND B.cod_sub_modelo  = a2100430.cod_sub_modelo
                                                    AND b.anio_sub_modelo  = a2100430.anio_sub_modelo
                                                    AND B.fec_validez    <= g_k_data)  --  I 1.38
           --
           /*
           AND (g2109042_vcr.cod_fipe         IN(SELECT a.cod_fipe
                                                   FROM TABLE(CAST(v_tab_fipe    AS TYPTAB_FIPE)) a)
                                                      OR g2109042_vcr.cod_molicar IN (SELECT b.cod_fipe
                                                                                        FROM TABLE(CAST(v_tab_fipe AS TYPTAB_FIPE)) b))
           --
           */
           AND (g2109042_vcr.cod_fipe      = p_cod_fipe OR
               g2109042_vcr.cod_molicar    = p_cod_fipe )
           AND  a2100430.anio_sub_modelo   = NVL(DECODE(l_mca_zero_km
                                                       ,trn.SI
                                                       ,trn.CERO
                                                       ,trn.NO
                                                       ,l_ano_modelo)
                                                ,a2100430.anio_sub_modelo)
           AND g2109042_vcr.fec_validez    = (SELECT MAX(v.fec_validez)
                                                 FROM g2109042_vcr v
                                                WHERE v.cod_cia        = g2109042_vcr.cod_cia
                                                  AND v.cod_marca      = g2109042_vcr.cod_marca
                                                  AND v.cod_modelo     = g2109042_vcr.cod_modelo
                                                  AND v.cod_sub_modelo = g2109042_vcr.cod_sub_modelo
                                                  AND v.fec_validez   <= g_k_data);
         --
      reg_cur_serie c_cur_serie%rowtype; -- 2.98
      --

      CURSOR c_cur_matricula (p_cod_cia  a2100430.cod_cia%TYPE, -- 2.98
                              p_cod_fipe g2109042_vcr.cod_fipe%TYPE)
      IS
         SELECT DISTINCT
         --
           'COD_MARCA_REF'                     AS NOM_CAMPO_COD_FIPE,
           g2109042_vcr.cod_fipe               AS COD_FIPE,
           'COD_MOLICAR'                       AS NOM_CAMPO_COD_MOLICAR,
           g2109042_vcr.cod_molicar            AS COD_MOLICAR,
           'COD_MARCA'                         AS NOM_CAMPO_COD_MARCA,
           g2109042_vcr.cod_marca              AS COD_MARCA,
           'COD_MODELO'                        AS NOM_CAMPO_COD_MODELO,
           g2109042_vcr.cod_modelo             AS COD_MODELO,
           'COD_SUB_MODELO'                    AS NOM_CAMPO_COD_SUB_MODELO,
           g2109042_vcr.cod_sub_modelo         AS COD_SUB_MODELO,
           'ANIO_SUB_MODELO'                   AS NOM_CAMPO_ANIO_SUB_MODELO,
           l_ano_modelo                        AS ANIO_SUB_MODELO,
           'COD_ANO_FABR'                      AS NOM_CAMPO_COD_ANO_FABR,
           l_ano_fabricacao                    AS COD_ANO_FABR,
           'VAL_REFERENCIA'                    AS NOM_CAMPO_VAL_SUB_MODELO,
           a2100430.val_sub_modelo             AS VAL_SUB_MODELO,
           'TXT_SUB_MODELO'                    AS NOM_CAMPO_NOM_MODELO_SUBMODELO,
           g2109042_vcr.nom_modelo_submodelo   AS NOM_MODELO_SUBMODELO,
           'COD_MADRE'                         AS NOM_CAMPO_COD_MADRE,
           g2109042_vcr.cod_madre              AS COD_MADRE,
           'COD_TIP_VEHI'                      AS NOM_CAMPO_COD_CATEGORIA,
           g2109042_vcr.cod_categoria          AS COD_CATEGORIA,
           'NUM_MATRICULA'                     AS NOM_CAMPO_NUM_MATRICULA, --2.98
           a2009018_vcr.num_placa              AS NUM_MATRICULA, --2.98
           g2109042_vcr.mca_excep_vot          AS MCA_EXCEP_VOT
          /* 'NUM_PORTAS'                        AS nom_campo_num_portas,
            g2109042_vcr.num_portas             AS num_portas,
            'NUM_PASSAGEIROS'                   AS nom_campo_num_passageiros,
            g2109042_vcr.num_passageiros        AS num_passageiros,
            'COD_CLASSE'                        AS nom_campo_cod_classe,
            g2109042_vcr.cod_classe             AS cod_classe,
            'NUM_QTDE_IRREGULAR'                AS nom_campo_qtde_irregular,
            a2009018_vcr.num_qtde_irregular     AS num_qtde_irregular,
            'FEC_CONSULTA'                      AS nom_campo_fec_consulta,
            a2009018_vcr.fec_consulta           AS fec_consulta,
            'RETORNO SERVICO'                   AS nom_campo_retorno_servico,
            a2009018_vcr.txt_mensagem           AS retorno_servico,
            'NOM_MARCA'                         AS nom_campo_nom_marca,
            a2100400.nom_marca                  AS nom_marca*/
         --
         FROM g2109042_vcr
         --
         LEFT OUTER JOIN a2100430             ON   g2109042_vcr.cod_cia        = a2100430.cod_cia
                                              AND  g2109042_vcr.cod_marca      = a2100430.cod_marca
                                              AND  g2109042_vcr.cod_modelo     = a2100430.cod_modelo
                                              AND  g2109042_vcr.cod_sub_modelo = a2100430.cod_sub_modelo
                                              AND  DECODE(l_mca_zero_km
                                                         ,trn.SI
                                                         ,trn.CERO
                                                         ,trn.NO
                                                         ,a2100430.anio_sub_modelo) BETWEEN DECODE(l_mca_zero_km
                                                                                                  ,trn.SI
                                                                                                  ,trn.CERO
                                                                                                  ,trn.NO
                                                                                                  ,g2109042_vcr.num_ano_de) AND
                                                                                            DECODE(l_mca_zero_km
                                                                                                  ,trn.SI
                                                                                                  ,trn.CERO
                                                                                                  ,trn.NO
                                                                                                  ,g2109042_vcr.num_ano_ate)
         -- I 2.96
        LEFT OUTER JOIN a2009018_vcr
          -- I 3.07
          ON  a2009018_vcr.cod_cia = p_cod_cia
          AND a2009018_vcr.num_chassi = p_num_serie
          -- F 3.07
          AND a2009018_vcr.desc_servico = 'NORTIX_PLACA' -- 3.06
         -- F 2.96
         /*LEFT OUTER JOIN a2009018_vcr         ON  g2109042_vcr.cod_cia          = a2009018_vcr.cod_cia
                                              AND g2109042_vcr.cod_fipe         = a2009018_vcr.cod_fipe
                                              AND a2009018_vcr.num_chassi       = l_num_serie
         --
         LEFT OUTER JOIN a2100400             ON  g2109042_vcr.cod_cia          = a2100400.cod_cia
                                              AND g2109042_vcr.cod_marca        = a2100400.cod_marca*/
         --
         WHERE           a2100430.cod_cia     = p_cod_cia
           --
           AND           a2100430.fec_validez = (SELECT MAX(fec_validez)
                                                   FROM a2100430 B
                                                  WHERE B.cod_cia         = a2100430.cod_cia
                                                    AND B.cod_marca       = a2100430.cod_marca
                                                    AND B.cod_modelo      = a2100430.cod_modelo
                                                    AND B.cod_sub_modelo  = a2100430.cod_sub_modelo
                                                    AND b.anio_sub_modelo  = a2100430.anio_sub_modelo
                                                    AND B.fec_validez    <= g_k_data)  --  I 1.38
           --
           /*
           AND (g2109042_vcr.cod_fipe         IN(SELECT a.cod_fipe
                                                   FROM TABLE(CAST(v_tab_fipe    AS TYPTAB_FIPE)) a)
                                                      OR g2109042_vcr.cod_molicar IN (SELECT b.cod_fipe
                                                                                        FROM TABLE(CAST(v_tab_fipe AS TYPTAB_FIPE)) b))
           --
           */
           AND (g2109042_vcr.cod_fipe      = p_cod_fipe OR
               g2109042_vcr.cod_molicar    = p_cod_fipe )
           AND  a2100430.anio_sub_modelo   = NVL(DECODE(l_mca_zero_km
                                                       ,trn.SI
                                                       ,trn.CERO
                                                       ,trn.NO
                                                       ,l_ano_modelo)
                                                ,a2100430.anio_sub_modelo)
           AND g2109042_vcr.fec_validez    = (SELECT MAX(v.fec_validez)
                                                 FROM g2109042_vcr v
                                                WHERE v.cod_cia        = g2109042_vcr.cod_cia
                                                  AND v.cod_marca      = g2109042_vcr.cod_marca
                                                  AND v.cod_modelo     = g2109042_vcr.cod_modelo
                                                  AND v.cod_sub_modelo = g2109042_vcr.cod_sub_modelo
                                                  AND v.fec_validez   <= g_k_data);
         --
      reg_cur_matricula c_cur_matricula%rowtype; -- 2.96
      --
    -- I MOTORSUBS 3.83
    CURSOR c_cur_serie_mot(p_cod_cia  a2100430.cod_cia%TYPE, -- 2.98
                           p_cod_fipe g2109042_vcr.cod_fipe%TYPE) IS
      WITH Dados as
       (SELECT p_reg_nortix.cod_cia, p_reg_nortix.num_chassi FROM DUAL)
      SELECT DISTINCT --
                      'COD_MARCA_REF' AS NOM_CAMPO_COD_FIPE,
                      g2109042_vcr.cod_fipe AS COD_FIPE,
                      'COD_MOLICAR' AS NOM_CAMPO_COD_MOLICAR,
                      g2109042_vcr.cod_molicar AS COD_MOLICAR,
                      'COD_MARCA' AS NOM_CAMPO_COD_MARCA,
                      g2109042_vcr.cod_marca AS COD_MARCA,
                      'COD_MODELO' AS NOM_CAMPO_COD_MODELO,
                      g2109042_vcr.cod_modelo AS COD_MODELO,
                      'COD_SUB_MODELO' AS NOM_CAMPO_COD_SUB_MODELO,
                      g2109042_vcr.cod_sub_modelo AS COD_SUB_MODELO,
                      'ANIO_SUB_MODELO' AS NOM_CAMPO_ANIO_SUB_MODELO,
                      l_ano_modelo AS ANIO_SUB_MODELO,
                      'COD_ANO_FABR' AS NOM_CAMPO_COD_ANO_FABR,
                      l_ano_fabricacao AS COD_ANO_FABR,
                      'VAL_REFERENCIA' AS NOM_CAMPO_VAL_SUB_MODELO,
                      a2100430.val_sub_modelo AS VAL_SUB_MODELO,
                      'TXT_SUB_MODELO' AS NOM_CAMPO_NOM_MODELO_SUBMODELO,
                      g2109042_vcr.nom_modelo_submodelo AS NOM_MODELO_SUBMODELO,
                      'COD_MADRE' AS NOM_CAMPO_COD_MADRE,
                      g2109042_vcr.cod_madre AS COD_MADRE,
                      'COD_TIP_VEHI' AS NOM_CAMPO_COD_CATEGORIA,
                      g2109042_vcr.cod_categoria AS COD_CATEGORIA,
                      'NUM_SERIE' AS NOM_CAMPO_NUM_SERIE, --2.98
                      a2009018_vcr.num_chassi AS NUM_SERIE, --2.98
                      g2109042_vcr.mca_excep_vot AS MCA_EXCEP_VOT
      /* 'NUM_PORTAS'                        AS nom_campo_num_portas,
      g2109042_vcr.num_portas             AS num_portas,
      'NUM_PASSAGEIROS'                   AS nom_campo_num_passageiros,
      g2109042_vcr.num_passageiros        AS num_passageiros,
      'COD_CLASSE'                        AS nom_campo_cod_classe,
      g2109042_vcr.cod_classe             AS cod_classe,
      'NUM_QTDE_IRREGULAR'                AS nom_campo_qtde_irregular,
      a2009018_vcr.num_qtde_irregular     AS num_qtde_irregular,
      'FEC_CONSULTA'                      AS nom_campo_fec_consulta,
      a2009018_vcr.fec_consulta           AS fec_consulta,
      'RETORNO SERVICO'                   AS nom_campo_retorno_servico,
      a2009018_vcr.txt_mensagem           AS retorno_servico,
      'NOM_MARCA'                         AS nom_campo_nom_marca,
      a2100400.nom_marca                  AS nom_marca*/
      --
        FROM g2109042_vcr
      --
        LEFT OUTER JOIN a2100430
          ON g2109042_vcr.cod_cia = a2100430.cod_cia
         AND g2109042_vcr.cod_marca = a2100430.cod_marca
         AND g2109042_vcr.cod_modelo = a2100430.cod_modelo
         AND g2109042_vcr.cod_sub_modelo = a2100430.cod_sub_modelo
         AND DECODE(l_mca_zero_km,
                    trn.SI,
                    trn.CERO,
                    trn.NO,
                    a2100430.anio_sub_modelo) BETWEEN
             DECODE(l_mca_zero_km,
                    trn.SI,
                    trn.CERO,
                    trn.NO,
                    g2109042_vcr.num_ano_de) AND
             DECODE(l_mca_zero_km,
                    trn.SI,
                    trn.CERO,
                    trn.NO,
                    g2109042_vcr.num_ano_ate)
        LEFT OUTER JOIN Dados a2009018_vcr
          ON a2009018_vcr.cod_cia = p_cod_cia
         AND a2009018_vcr.num_chassi = p_num_serie
      /*LEFT OUTER JOIN a2009018_vcr         ON  g2109042_vcr.cod_cia          = a2009018_vcr.cod_cia
                                           AND g2109042_vcr.cod_fipe         = a2009018_vcr.cod_fipe
                                           AND a2009018_vcr.num_chassi       = l_num_serie
      --
      LEFT OUTER JOIN a2100400             ON  g2109042_vcr.cod_cia          = a2100400.cod_cia
                                           AND g2109042_vcr.cod_marca        = a2100400.cod_marca*/
      --
       WHERE a2100430.cod_cia = p_cod_cia
            --
         AND a2100430.fec_validez =
             (SELECT MAX(fec_validez)
                FROM a2100430 B
               WHERE B.cod_cia = a2100430.cod_cia
                 AND B.cod_marca = a2100430.cod_marca
                 AND B.cod_modelo = a2100430.cod_modelo
                 AND B.cod_sub_modelo = a2100430.cod_sub_modelo
                 AND b.anio_sub_modelo = a2100430.anio_sub_modelo
                 AND B.fec_validez <= g_k_data) --  I 1.38
            --
            /*
            AND (g2109042_vcr.cod_fipe         IN(SELECT a.cod_fipe
                                                    FROM TABLE(CAST(v_tab_fipe    AS TYPTAB_FIPE)) a)
                                                       OR g2109042_vcr.cod_molicar IN (SELECT b.cod_fipe
                                                                                         FROM TABLE(CAST(v_tab_fipe AS TYPTAB_FIPE)) b))
            --
            */
         AND (g2109042_vcr.cod_fipe = p_cod_fipe OR
             g2109042_vcr.cod_molicar = p_cod_fipe)
         AND a2100430.anio_sub_modelo =
             NVL(DECODE(l_mca_zero_km,
                        trn.SI,
                        trn.CERO,
                        trn.NO,
                        l_ano_modelo),
                 a2100430.anio_sub_modelo)
         AND g2109042_vcr.fec_validez =
             (SELECT MAX(v.fec_validez)
                FROM g2109042_vcr v
               WHERE v.cod_cia = g2109042_vcr.cod_cia
                 AND v.cod_marca = g2109042_vcr.cod_marca
                 AND v.cod_modelo = g2109042_vcr.cod_modelo
                 AND v.cod_sub_modelo = g2109042_vcr.cod_sub_modelo
                 AND v.fec_validez <= g_k_data);
    --
    CURSOR c_cur_matricula_mot(p_cod_cia  a2100430.cod_cia%TYPE, -- 2.98
                               p_cod_fipe g2109042_vcr.cod_fipe%TYPE) IS
      WITH Dados as
       (SELECT p_reg_nortix.cod_cia,
               p_reg_nortix.num_chassi,
               p_reg_nortix.num_placa
          FROM DUAL)
      SELECT DISTINCT --
                      'COD_MARCA_REF' AS NOM_CAMPO_COD_FIPE,
                      g2109042_vcr.cod_fipe AS COD_FIPE,
                      'COD_MOLICAR' AS NOM_CAMPO_COD_MOLICAR,
                      g2109042_vcr.cod_molicar AS COD_MOLICAR,
                      'COD_MARCA' AS NOM_CAMPO_COD_MARCA,
                      g2109042_vcr.cod_marca AS COD_MARCA,
                      'COD_MODELO' AS NOM_CAMPO_COD_MODELO,
                      g2109042_vcr.cod_modelo AS COD_MODELO,
                      'COD_SUB_MODELO' AS NOM_CAMPO_COD_SUB_MODELO,
                      g2109042_vcr.cod_sub_modelo AS COD_SUB_MODELO,
                      'ANIO_SUB_MODELO' AS NOM_CAMPO_ANIO_SUB_MODELO,
                      l_ano_modelo AS ANIO_SUB_MODELO,
                      'COD_ANO_FABR' AS NOM_CAMPO_COD_ANO_FABR,
                      l_ano_fabricacao AS COD_ANO_FABR,
                      'VAL_REFERENCIA' AS NOM_CAMPO_VAL_SUB_MODELO,
                      a2100430.val_sub_modelo AS VAL_SUB_MODELO,
                      'TXT_SUB_MODELO' AS NOM_CAMPO_NOM_MODELO_SUBMODELO,
                      g2109042_vcr.nom_modelo_submodelo AS NOM_MODELO_SUBMODELO,
                      'COD_MADRE' AS NOM_CAMPO_COD_MADRE,
                      g2109042_vcr.cod_madre AS COD_MADRE,
                      'COD_TIP_VEHI' AS NOM_CAMPO_COD_CATEGORIA,
                      g2109042_vcr.cod_categoria AS COD_CATEGORIA,
                      'NUM_MATRICULA' AS NOM_CAMPO_NUM_MATRICULA, --2.98
                      a2009018_vcr.num_placa AS NUM_MATRICULA, --2.98
                      g2109042_vcr.mca_excep_vot AS MCA_EXCEP_VOT
      /* 'NUM_PORTAS'                        AS nom_campo_num_portas,
      g2109042_vcr.num_portas             AS num_portas,
      'NUM_PASSAGEIROS'                   AS nom_campo_num_passageiros,
      g2109042_vcr.num_passageiros        AS num_passageiros,
      'COD_CLASSE'                        AS nom_campo_cod_classe,
      g2109042_vcr.cod_classe             AS cod_classe,
      'NUM_QTDE_IRREGULAR'                AS nom_campo_qtde_irregular,
      a2009018_vcr.num_qtde_irregular     AS num_qtde_irregular,
      'FEC_CONSULTA'                      AS nom_campo_fec_consulta,
      a2009018_vcr.fec_consulta           AS fec_consulta,
      'RETORNO SERVICO'                   AS nom_campo_retorno_servico,
      a2009018_vcr.txt_mensagem           AS retorno_servico,
      'NOM_MARCA'                         AS nom_campo_nom_marca,
      a2100400.nom_marca                  AS nom_marca*/
      --
        FROM g2109042_vcr
      --
        LEFT OUTER JOIN a2100430
          ON g2109042_vcr.cod_cia = a2100430.cod_cia
         AND g2109042_vcr.cod_marca = a2100430.cod_marca
         AND g2109042_vcr.cod_modelo = a2100430.cod_modelo
         AND g2109042_vcr.cod_sub_modelo = a2100430.cod_sub_modelo
         AND DECODE(l_mca_zero_km,
                    trn.SI,
                    trn.CERO,
                    trn.NO,
                    a2100430.anio_sub_modelo) BETWEEN
             DECODE(l_mca_zero_km,
                    trn.SI,
                    trn.CERO,
                    trn.NO,
                    g2109042_vcr.num_ano_de) AND
             DECODE(l_mca_zero_km,
                    trn.SI,
                    trn.CERO,
                    trn.NO,
                    g2109042_vcr.num_ano_ate)
      -- I 2.96
        LEFT OUTER JOIN Dados a2009018_vcr
      -- I 3.07
          ON a2009018_vcr.cod_cia = p_cod_cia
         AND a2009018_vcr.num_chassi = p_num_serie
      -- F 3.07
      -- F 2.96
      /*LEFT OUTER JOIN a2009018_vcr         ON  g2109042_vcr.cod_cia          = a2009018_vcr.cod_cia
                                           AND g2109042_vcr.cod_fipe         = a2009018_vcr.cod_fipe
                                           AND a2009018_vcr.num_chassi       = l_num_serie
      --
      LEFT OUTER JOIN a2100400             ON  g2109042_vcr.cod_cia          = a2100400.cod_cia
                                           AND g2109042_vcr.cod_marca        = a2100400.cod_marca*/
      --
       WHERE a2100430.cod_cia = p_cod_cia
            --
         AND a2100430.fec_validez =
             (SELECT MAX(fec_validez)
                FROM a2100430 B
               WHERE B.cod_cia = a2100430.cod_cia
                 AND B.cod_marca = a2100430.cod_marca
                 AND B.cod_modelo = a2100430.cod_modelo
                 AND B.cod_sub_modelo = a2100430.cod_sub_modelo
                 AND b.anio_sub_modelo = a2100430.anio_sub_modelo
                 AND B.fec_validez <= g_k_data) --  I 1.38
            --
            /*
            AND (g2109042_vcr.cod_fipe         IN(SELECT a.cod_fipe
                                                    FROM TABLE(CAST(v_tab_fipe    AS TYPTAB_FIPE)) a)
                                                       OR g2109042_vcr.cod_molicar IN (SELECT b.cod_fipe
                                                                                         FROM TABLE(CAST(v_tab_fipe AS TYPTAB_FIPE)) b))
            --
            */
         AND (g2109042_vcr.cod_fipe = p_cod_fipe OR
             g2109042_vcr.cod_molicar = p_cod_fipe)
         AND a2100430.anio_sub_modelo =
             NVL(DECODE(l_mca_zero_km,
                        trn.SI,
                        trn.CERO,
                        trn.NO,
                        l_ano_modelo),
                 a2100430.anio_sub_modelo)
         AND g2109042_vcr.fec_validez =
             (SELECT MAX(v.fec_validez)
                FROM g2109042_vcr v
               WHERE v.cod_cia = g2109042_vcr.cod_cia
                 AND v.cod_marca = g2109042_vcr.cod_marca
                 AND v.cod_modelo = g2109042_vcr.cod_modelo
                 AND v.cod_sub_modelo = g2109042_vcr.cod_sub_modelo
                 AND v.fec_validez <= g_k_data);
    -- F MOTORSUBS 3.83
   BEGIN
      --
      mx('I', 'p_consulta_veic');
      --
      l_cod_cia        := trn_k_global.devuelve('COD_CIA');
      l_ano_modelo     := trn_k_global.devuelve('ANIO_SUB_MODELO');
      l_ano_fabricacao := trn_k_global.devuelve('ANO_FABRICACAO');
      --
      l_mca_zero_km    := NVL(trn_k_global.ref_f_global('MCA_ZERO_KM'), trn.NO);
      --
      l_cod_marca      := ea_k_231_utils.f_valor_dv('COD_MARCA_EXCEP')    ;
      l_cod_modelo     := ea_k_231_utils.f_valor_dv('COD_MODELO_EXCEP')   ;
      l_cod_sub_modelo := ea_k_231_utils.f_valor_dv('COD_SUBMODELO_EXCEP');
      --
      l_mca_carga := trn.NO;
      --
    -- I 2.98
       IF g_existe_num_serie THEN
         --
         IF ea_k_ws_motor_subscr.f_retorna_motor_subscr(l_cod_cia,
                                                         trn_k_global.devuelve('COD_RAMO'),
                                                         nvl(trn_k_global.ref_f_global('HAB_MOTOR_NORTIX'),
                                                             'N')) THEN
           -- I MOTORSUBS 3.83
           FOR i in c_cur_matricula_mot(l_cod_cia, p_cod_fipe) LOOP
             --
             IF i.mca_excep_vot = trn.SI THEN
               --
               IF i.cod_marca = l_cod_marca AND i.cod_modelo = l_cod_modelo AND
                  i.cod_sub_modelo = l_cod_sub_modelo THEN
                 --
                 l_mca_carga := trn.SI;
                 --
               END IF;
               --
             ELSE
               --
               l_mca_carga := trn.SI;
               --
             END IF;
             --
             IF l_mca_carga = trn.SI THEN
               --
               g_reg_veic.NOM_CAMPO_COD_FIPE             := i.NOM_CAMPO_COD_FIPE;
               g_reg_veic.COD_FIPE                       := i.COD_FIPE;
               g_reg_veic.NOM_CAMPO_COD_MOLICAR          := i.NOM_CAMPO_COD_MOLICAR;
               g_reg_veic.COD_MOLICAR                    := i.COD_MOLICAR;
               g_reg_veic.NOM_CAMPO_COD_MARCA            := i.NOM_CAMPO_COD_MARCA;
               g_reg_veic.COD_MARCA                      := i.COD_MARCA;
               g_reg_veic.NOM_CAMPO_COD_MODELO           := i.NOM_CAMPO_COD_MODELO;
               g_reg_veic.COD_MODELO                     := i.COD_MODELO;
               g_reg_veic.NOM_CAMPO_COD_SUB_MODELO       := i.NOM_CAMPO_COD_SUB_MODELO;
               g_reg_veic.COD_SUB_MODELO                 := i.COD_SUB_MODELO;
               g_reg_veic.NOM_CAMPO_ANIO_SUB_MODELO      := i.NOM_CAMPO_ANIO_SUB_MODELO;
               g_reg_veic.ANIO_SUB_MODELO                := i.ANIO_SUB_MODELO;
               g_reg_veic.NOM_CAMPO_COD_ANO_FABR         := i.NOM_CAMPO_COD_ANO_FABR;
               g_reg_veic.COD_ANO_FABR                   := i.COD_ANO_FABR;
               g_reg_veic.NOM_CAMPO_VAL_SUB_MODELO       := i.NOM_CAMPO_VAL_SUB_MODELO;
               g_reg_veic.VAL_SUB_MODELO                 := i.VAL_SUB_MODELO;
               g_reg_veic.NOM_CAMPO_NOM_MODELO_SUBMODELO := i.NOM_CAMPO_NOM_MODELO_SUBMODELO;
               g_reg_veic.NOM_MODELO_SUBMODELO           := i.NOM_MODELO_SUBMODELO;
               g_reg_veic.NOM_CAMPO_COD_MADRE            := i.NOM_CAMPO_COD_MADRE;
               g_reg_veic.COD_MADRE                      := i.COD_MADRE;
               g_reg_veic.NOM_CAMPO_COD_CATEGORIA        := i.NOM_CAMPO_COD_CATEGORIA;
               g_reg_veic.COD_CATEGORIA                  := i.COD_CATEGORIA;
               g_reg_veic.NOM_CAMPO_NUM_SERIE_MATRICULA  := i.NOM_CAMPO_NUM_MATRICULA;
               g_reg_veic.NUM_SERIE_MATRICULA            := i.NUM_MATRICULA;
               /*g_reg_veic.NOM_CAMPO_NUM_PORTAS          :=  i.NOM_CAMPO_NUM_PORTAS;
               g_reg_veic.NUM_PORTAS                    :=  i.NUM_PORTAS;
               g_reg_veic.NOM_CAMPO_NUM_PASSAGEIROS     :=  i.NOM_CAMPO_NUM_PASSAGEIROS;
               g_reg_veic.NUM_PASSAGEIROS               :=  i.NUM_PASSAGEIROS;
               g_reg_veic.NOM_CAMPO_COD_CLASSE          :=  i.NOM_CAMPO_COD_CLASSE;
               g_reg_veic.COD_CLASSE                    :=  i.COD_CLASSE;
               g_reg_veic.NOM_CAMPO_COD_MARCA           :=  i.NOM_CAMPO_COD_MARCA;
               g_reg_veic.COD_MARCA                     :=  i.COD_MARCA;
               g_reg_veic.NOM_CAMPO_QTDE_IRREGULAR      :=  i.NOM_CAMPO_QTDE_IRREGULAR;
               g_reg_veic.NUM_QTDE_IRREGULAR            :=  i.NUM_QTDE_IRREGULAR;
               g_reg_veic.NOM_CAMPO_FEC_CONSULTA        :=  i.NOM_CAMPO_FEC_CONSULTA;
               g_reg_veic.FEC_CONSULTA                  :=  i.FEC_CONSULTA;
               g_reg_veic.NOM_CAMPO_RETORNO_SERVICO     :=  i.NOM_CAMPO_RETORNO_SERVICO;
               g_reg_veic.RETORNO_SERVICO               :=  i.RETORNO_SERVICO;
               g_reg_veic.NOM_CAMPO_NOM_MARCA           :=  i.NOM_CAMPO_NOM_MARCA;
               g_reg_veic.NOM_MARCA                     :=  i.NOM_MARCA;*/
               --
               p_tab_veic.EXTEND(1);
               p_tab_veic(p_tab_veic.LAST) := g_reg_veic;
               --
             END IF;
             --
           END LOOP;
         ELSE
           --
         FOR i in c_cur_matricula(l_cod_cia, p_cod_fipe) LOOP
           --
           IF i.mca_excep_vot = trn.SI THEN
             --
             IF i.cod_marca = l_cod_marca AND i.cod_modelo = l_cod_modelo AND
                i.cod_sub_modelo = l_cod_sub_modelo THEN
               --
               l_mca_carga := trn.SI;
               --
             END IF;
             --
           ELSE
             --
             l_mca_carga := trn.SI;
             --
           END IF;
           --
           IF l_mca_carga = trn.SI THEN
             --
             g_reg_veic.NOM_CAMPO_COD_FIPE             := i.NOM_CAMPO_COD_FIPE;
             g_reg_veic.COD_FIPE                       := i.COD_FIPE;
             g_reg_veic.NOM_CAMPO_COD_MOLICAR          := i.NOM_CAMPO_COD_MOLICAR;
             g_reg_veic.COD_MOLICAR                    := i.COD_MOLICAR;
             g_reg_veic.NOM_CAMPO_COD_MARCA            := i.NOM_CAMPO_COD_MARCA;
             g_reg_veic.COD_MARCA                      := i.COD_MARCA;
             g_reg_veic.NOM_CAMPO_COD_MODELO           := i.NOM_CAMPO_COD_MODELO;
             g_reg_veic.COD_MODELO                     := i.COD_MODELO;
             g_reg_veic.NOM_CAMPO_COD_SUB_MODELO       := i.NOM_CAMPO_COD_SUB_MODELO;
             g_reg_veic.COD_SUB_MODELO                 := i.COD_SUB_MODELO;
             g_reg_veic.NOM_CAMPO_ANIO_SUB_MODELO      := i.NOM_CAMPO_ANIO_SUB_MODELO;
             g_reg_veic.ANIO_SUB_MODELO                := i.ANIO_SUB_MODELO;
             g_reg_veic.NOM_CAMPO_COD_ANO_FABR         := i.NOM_CAMPO_COD_ANO_FABR;
             g_reg_veic.COD_ANO_FABR                   := i.COD_ANO_FABR;
             g_reg_veic.NOM_CAMPO_VAL_SUB_MODELO       := i.NOM_CAMPO_VAL_SUB_MODELO;
             g_reg_veic.VAL_SUB_MODELO                 := i.VAL_SUB_MODELO;
             g_reg_veic.NOM_CAMPO_NOM_MODELO_SUBMODELO := i.NOM_CAMPO_NOM_MODELO_SUBMODELO;
             g_reg_veic.NOM_MODELO_SUBMODELO           := i.NOM_MODELO_SUBMODELO;
             g_reg_veic.NOM_CAMPO_COD_MADRE            := i.NOM_CAMPO_COD_MADRE;
             g_reg_veic.COD_MADRE                      := i.COD_MADRE;
             g_reg_veic.NOM_CAMPO_COD_CATEGORIA        := i.NOM_CAMPO_COD_CATEGORIA;
             g_reg_veic.COD_CATEGORIA                  := i.COD_CATEGORIA;
             g_reg_veic.NOM_CAMPO_NUM_SERIE_MATRICULA  := i.NOM_CAMPO_NUM_MATRICULA;
             g_reg_veic.NUM_SERIE_MATRICULA            := i.NUM_MATRICULA;
             /*g_reg_veic.NOM_CAMPO_NUM_PORTAS          :=  i.NOM_CAMPO_NUM_PORTAS;
             g_reg_veic.NUM_PORTAS                    :=  i.NUM_PORTAS;
             g_reg_veic.NOM_CAMPO_NUM_PASSAGEIROS     :=  i.NOM_CAMPO_NUM_PASSAGEIROS;
             g_reg_veic.NUM_PASSAGEIROS               :=  i.NUM_PASSAGEIROS;
             g_reg_veic.NOM_CAMPO_COD_CLASSE          :=  i.NOM_CAMPO_COD_CLASSE;
             g_reg_veic.COD_CLASSE                    :=  i.COD_CLASSE;
             g_reg_veic.NOM_CAMPO_COD_MARCA           :=  i.NOM_CAMPO_COD_MARCA;
             g_reg_veic.COD_MARCA                     :=  i.COD_MARCA;
             g_reg_veic.NOM_CAMPO_QTDE_IRREGULAR      :=  i.NOM_CAMPO_QTDE_IRREGULAR;
             g_reg_veic.NUM_QTDE_IRREGULAR            :=  i.NUM_QTDE_IRREGULAR;
             g_reg_veic.NOM_CAMPO_FEC_CONSULTA        :=  i.NOM_CAMPO_FEC_CONSULTA;
             g_reg_veic.FEC_CONSULTA                  :=  i.FEC_CONSULTA;
             g_reg_veic.NOM_CAMPO_RETORNO_SERVICO     :=  i.NOM_CAMPO_RETORNO_SERVICO;
             g_reg_veic.RETORNO_SERVICO               :=  i.RETORNO_SERVICO;
             g_reg_veic.NOM_CAMPO_NOM_MARCA           :=  i.NOM_CAMPO_NOM_MARCA;
             g_reg_veic.NOM_MARCA                     :=  i.NOM_MARCA;*/
             --
             p_tab_veic.EXTEND(1);
             p_tab_veic(p_tab_veic.LAST) := g_reg_veic;
             --
           END IF;
           --
         END LOOP;
           --
         END IF; -- MOTORSUBS 3.83
         --
       ELSIF g_existe_num_matricula THEN
         --
         IF ea_k_ws_motor_subscr.f_retorna_motor_subscr(l_cod_cia,
                                                        trn_k_global.devuelve('COD_RAMO'),
                                                        nvl(trn_k_global.ref_f_global('HAB_MOTOR_NORTIX'),
                                                            'N')) THEN
           -- I MOTORSUBS 3.83
           FOR i in c_cur_serie_mot(l_cod_cia, p_cod_fipe) LOOP
             --
             IF i.mca_excep_vot = trn.SI THEN
               --
               IF i.cod_marca = l_cod_marca AND i.cod_modelo = l_cod_modelo AND
                  i.cod_sub_modelo = l_cod_sub_modelo THEN
                 --
                 l_mca_carga := trn.SI;
                 --
               END IF;
               --
             ELSE
               --
               l_mca_carga := trn.SI;
               --
             END IF;
             --
             IF l_mca_carga = trn.SI THEN
               --
               g_reg_veic.NOM_CAMPO_COD_FIPE             := i.NOM_CAMPO_COD_FIPE;
               g_reg_veic.COD_FIPE                       := i.COD_FIPE;
               g_reg_veic.NOM_CAMPO_COD_MOLICAR          := i.NOM_CAMPO_COD_MOLICAR;
               g_reg_veic.COD_MOLICAR                    := i.COD_MOLICAR;
               g_reg_veic.NOM_CAMPO_COD_MARCA            := i.NOM_CAMPO_COD_MARCA;
               g_reg_veic.COD_MARCA                      := i.COD_MARCA;
               g_reg_veic.NOM_CAMPO_COD_MODELO           := i.NOM_CAMPO_COD_MODELO;
               g_reg_veic.COD_MODELO                     := i.COD_MODELO;
               g_reg_veic.NOM_CAMPO_COD_SUB_MODELO       := i.NOM_CAMPO_COD_SUB_MODELO;
               g_reg_veic.COD_SUB_MODELO                 := i.COD_SUB_MODELO;
               g_reg_veic.NOM_CAMPO_ANIO_SUB_MODELO      := i.NOM_CAMPO_ANIO_SUB_MODELO;
               g_reg_veic.ANIO_SUB_MODELO                := i.ANIO_SUB_MODELO;
               g_reg_veic.NOM_CAMPO_COD_ANO_FABR         := i.NOM_CAMPO_COD_ANO_FABR;
               g_reg_veic.COD_ANO_FABR                   := i.COD_ANO_FABR;
               g_reg_veic.NOM_CAMPO_VAL_SUB_MODELO       := i.NOM_CAMPO_VAL_SUB_MODELO;
               g_reg_veic.VAL_SUB_MODELO                 := i.VAL_SUB_MODELO;
               g_reg_veic.NOM_CAMPO_NOM_MODELO_SUBMODELO := i.NOM_CAMPO_NOM_MODELO_SUBMODELO;
               g_reg_veic.NOM_MODELO_SUBMODELO           := i.NOM_MODELO_SUBMODELO;
               g_reg_veic.NOM_CAMPO_COD_MADRE            := i.NOM_CAMPO_COD_MADRE;
               g_reg_veic.COD_MADRE                      := i.COD_MADRE;
               g_reg_veic.NOM_CAMPO_COD_CATEGORIA        := i.NOM_CAMPO_COD_CATEGORIA;
               g_reg_veic.COD_CATEGORIA                  := i.COD_CATEGORIA;
               g_reg_veic.NOM_CAMPO_NUM_SERIE_MATRICULA  := i.NOM_CAMPO_NUM_SERIE;
               g_reg_veic.NUM_SERIE_MATRICULA            := i.NUM_SERIE;
               /*g_reg_veic.NOM_CAMPO_NUM_PORTAS          :=  i.NOM_CAMPO_NUM_PORTAS;
               g_reg_veic.NUM_PORTAS                    :=  i.NUM_PORTAS;
               g_reg_veic.NOM_CAMPO_NUM_PASSAGEIROS     :=  i.NOM_CAMPO_NUM_PASSAGEIROS;
               g_reg_veic.NUM_PASSAGEIROS               :=  i.NUM_PASSAGEIROS;
               g_reg_veic.NOM_CAMPO_COD_CLASSE          :=  i.NOM_CAMPO_COD_CLASSE;
               g_reg_veic.COD_CLASSE                    :=  i.COD_CLASSE;
               g_reg_veic.NOM_CAMPO_COD_MARCA           :=  i.NOM_CAMPO_COD_MARCA;
               g_reg_veic.COD_MARCA                     :=  i.COD_MARCA;
               g_reg_veic.NOM_CAMPO_QTDE_IRREGULAR      :=  i.NOM_CAMPO_QTDE_IRREGULAR;
               g_reg_veic.NUM_QTDE_IRREGULAR            :=  i.NUM_QTDE_IRREGULAR;
               g_reg_veic.NOM_CAMPO_FEC_CONSULTA        :=  i.NOM_CAMPO_FEC_CONSULTA;
               g_reg_veic.FEC_CONSULTA                  :=  i.FEC_CONSULTA;
               g_reg_veic.NOM_CAMPO_RETORNO_SERVICO     :=  i.NOM_CAMPO_RETORNO_SERVICO;
               g_reg_veic.RETORNO_SERVICO               :=  i.RETORNO_SERVICO;
               g_reg_veic.NOM_CAMPO_NOM_MARCA           :=  i.NOM_CAMPO_NOM_MARCA;
               g_reg_veic.NOM_MARCA                     :=  i.NOM_MARCA;*/
               --
               p_tab_veic.EXTEND(1);
               p_tab_veic(p_tab_veic.LAST) := g_reg_veic;
               --
             END IF;
             --
           END LOOP;
           --
         ELSE
           --
         FOR i in c_cur_serie(l_cod_cia, p_cod_fipe) LOOP
           --
           IF i.mca_excep_vot = trn.SI THEN
             --
             IF i.cod_marca = l_cod_marca AND i.cod_modelo = l_cod_modelo AND
                i.cod_sub_modelo = l_cod_sub_modelo THEN
               --
               l_mca_carga := trn.SI;
               --
             END IF;
             --
           ELSE
             --
             l_mca_carga := trn.SI;
             --
           END IF;
           --
           IF l_mca_carga = trn.SI THEN
             --
             g_reg_veic.NOM_CAMPO_COD_FIPE             := i.NOM_CAMPO_COD_FIPE;
             g_reg_veic.COD_FIPE                       := i.COD_FIPE;
             g_reg_veic.NOM_CAMPO_COD_MOLICAR          := i.NOM_CAMPO_COD_MOLICAR;
             g_reg_veic.COD_MOLICAR                    := i.COD_MOLICAR;
             g_reg_veic.NOM_CAMPO_COD_MARCA            := i.NOM_CAMPO_COD_MARCA;
             g_reg_veic.COD_MARCA                      := i.COD_MARCA;
             g_reg_veic.NOM_CAMPO_COD_MODELO           := i.NOM_CAMPO_COD_MODELO;
             g_reg_veic.COD_MODELO                     := i.COD_MODELO;
             g_reg_veic.NOM_CAMPO_COD_SUB_MODELO       := i.NOM_CAMPO_COD_SUB_MODELO;
             g_reg_veic.COD_SUB_MODELO                 := i.COD_SUB_MODELO;
             g_reg_veic.NOM_CAMPO_ANIO_SUB_MODELO      := i.NOM_CAMPO_ANIO_SUB_MODELO;
             g_reg_veic.ANIO_SUB_MODELO                := i.ANIO_SUB_MODELO;
             g_reg_veic.NOM_CAMPO_COD_ANO_FABR         := i.NOM_CAMPO_COD_ANO_FABR;
             g_reg_veic.COD_ANO_FABR                   := i.COD_ANO_FABR;
             g_reg_veic.NOM_CAMPO_VAL_SUB_MODELO       := i.NOM_CAMPO_VAL_SUB_MODELO;
             g_reg_veic.VAL_SUB_MODELO                 := i.VAL_SUB_MODELO;
             g_reg_veic.NOM_CAMPO_NOM_MODELO_SUBMODELO := i.NOM_CAMPO_NOM_MODELO_SUBMODELO;
             g_reg_veic.NOM_MODELO_SUBMODELO           := i.NOM_MODELO_SUBMODELO;
             g_reg_veic.NOM_CAMPO_COD_MADRE            := i.NOM_CAMPO_COD_MADRE;
             g_reg_veic.COD_MADRE                      := i.COD_MADRE;
             g_reg_veic.NOM_CAMPO_COD_CATEGORIA        := i.NOM_CAMPO_COD_CATEGORIA;
             g_reg_veic.COD_CATEGORIA                  := i.COD_CATEGORIA;
             g_reg_veic.NOM_CAMPO_NUM_SERIE_MATRICULA  := i.NOM_CAMPO_NUM_SERIE;
             g_reg_veic.NUM_SERIE_MATRICULA            := i.NUM_SERIE;
             /*g_reg_veic.NOM_CAMPO_NUM_PORTAS          :=  i.NOM_CAMPO_NUM_PORTAS;
             g_reg_veic.NUM_PORTAS                    :=  i.NUM_PORTAS;
             g_reg_veic.NOM_CAMPO_NUM_PASSAGEIROS     :=  i.NOM_CAMPO_NUM_PASSAGEIROS;
             g_reg_veic.NUM_PASSAGEIROS               :=  i.NUM_PASSAGEIROS;
             g_reg_veic.NOM_CAMPO_COD_CLASSE          :=  i.NOM_CAMPO_COD_CLASSE;
             g_reg_veic.COD_CLASSE                    :=  i.COD_CLASSE;
             g_reg_veic.NOM_CAMPO_COD_MARCA           :=  i.NOM_CAMPO_COD_MARCA;
             g_reg_veic.COD_MARCA                     :=  i.COD_MARCA;
             g_reg_veic.NOM_CAMPO_QTDE_IRREGULAR      :=  i.NOM_CAMPO_QTDE_IRREGULAR;
             g_reg_veic.NUM_QTDE_IRREGULAR            :=  i.NUM_QTDE_IRREGULAR;
             g_reg_veic.NOM_CAMPO_FEC_CONSULTA        :=  i.NOM_CAMPO_FEC_CONSULTA;
             g_reg_veic.FEC_CONSULTA                  :=  i.FEC_CONSULTA;
             g_reg_veic.NOM_CAMPO_RETORNO_SERVICO     :=  i.NOM_CAMPO_RETORNO_SERVICO;
             g_reg_veic.RETORNO_SERVICO               :=  i.RETORNO_SERVICO;
             g_reg_veic.NOM_CAMPO_NOM_MARCA           :=  i.NOM_CAMPO_NOM_MARCA;
             g_reg_veic.NOM_MARCA                     :=  i.NOM_MARCA;*/
             --
             p_tab_veic.EXTEND(1);
             p_tab_veic(p_tab_veic.LAST) := g_reg_veic;
             --
           END IF;
           --
         END LOOP;
       --
       END IF;
       --
       END IF; -- MOTORSUBS 3.83
    -- F 2.98
      mx('F', 'p_consulta_veic');
      --
   END p_consulta_veic;
  --
  /* ------------------------------------------------------
  || Carrega coberturas para recalculo
  */ ------------------------------------------------------
  --
  PROCEDURE pp_carga_cob_c2000020 IS
    --
    l_num_simulacion c2000020.num_simulacion %TYPE := trn_k_global.devuelve('NUM_SIMULACION');
    --
    l_reg_c2000020 c2000020 %ROWTYPE;
    l_nom_tabla    c2000000.nom_tabla %TYPE;
    --
    CURSOR c_coberturas IS
      SELECT COBERTURAS_NORMAIS_COMPOSTAS.NUM_SIMULACION AS NUM_SIMULACION,
             COBERTURAS_NORMAIS_COMPOSTAS.COD_PACOTE AS COD_PACOTE,
             TO_CHAR(COBERTURAS_NORMAIS_COMPOSTAS.COD_COB) AS COD_FILA,
             COBERTURAS_NORMAIS_COMPOSTAS.COD_CAMPO AS NOM_COLUMNA,
             COBERTURAS_NORMAIS_COMPOSTAS.VAL_CAMPO AS VAL_COLUMNA
        FROM TABLE(CAST(g_cob_dados AS TYPTAB_DADOS_COB)) COBERTURAS_NORMAIS_COMPOSTAS
       WHERE COBERTURAS_NORMAIS_COMPOSTAS.mca_seleccion_cob = 'S'
         AND COBERTURAS_NORMAIS_COMPOSTAS.tip_cob = 'N'
         AND ((COBERTURAS_NORMAIS_COMPOSTAS.tip_dados_cob = 'A' AND
             COBERTURAS_NORMAIS_COMPOSTAS.mca_seleccion_atributo = 'S') OR
             (COBERTURAS_NORMAIS_COMPOSTAS.tip_dados_cob = 'F' AND EXISTS
              (SELECT *
                  FROM g2000020
                 WHERE cod_cia = trn_k_global.cod_cia
                   AND cod_ramo = trn_k_global.ref_f_global('COD_RAMO')
                   AND cod_cob = COBERTURAS_NORMAIS_COMPOSTAS.cod_cob
                   AND cod_campo LIKE (g_k_ini_val_franq_dv || '%'))))
         AND COBERTURAS_NORMAIS_COMPOSTAS.NUM_SIMULACION =
             trn_k_global.devuelve('NUM_SIMULACION')
      UNION
      SELECT COBERTURAS_CASCO_COMPOSTAS.NUM_SIMULACION AS NUM_SIMULACION,
             COBERTURAS_CASCO_COMPOSTAS.COD_PACOTE AS COD_PACOTE,
             TO_CHAR(g_k_cod_fila_201) AS COD_FILA,
             COBERTURAS_CASCO_COMPOSTAS.COD_CAMPO AS NOM_COLUMNA,
             COBERTURAS_CASCO_COMPOSTAS.VAL_CAMPO AS VAL_COLUMNA
        FROM TABLE(CAST(g_cob_dados AS TYPTAB_DADOS_COB)) COBERTURAS_CASCO_COMPOSTAS
       WHERE COBERTURAS_CASCO_COMPOSTAS.mca_seleccion_cob = 'S'
         AND COBERTURAS_CASCO_COMPOSTAS.tip_cob = 'C'
         AND ((COBERTURAS_CASCO_COMPOSTAS.tip_dados_cob = 'A' AND
             COBERTURAS_CASCO_COMPOSTAS.mca_seleccion_atributo = 'S') OR
             (COBERTURAS_CASCO_COMPOSTAS.tip_dados_cob = 'F' AND EXISTS
              (SELECT *
                  FROM g2000020
                 WHERE cod_cia = trn_k_global.cod_cia
                   AND cod_ramo = trn_k_global.ref_f_global('COD_RAMO')
                   AND cod_cob = COBERTURAS_CASCO_COMPOSTAS.cod_cob
                   AND cod_campo LIKE (g_k_ini_val_franq_dv || '%'))))
         AND COBERTURAS_CASCO_COMPOSTAS.NUM_SIMULACION =
             trn_k_global.devuelve('NUM_SIMULACION')
       ORDER BY COD_FILA, NOM_COLUMNA;
    /* ------------------------------------------------------
    || pi_consulta_procedimento
    */ ------------------------------------------------------
    PROCEDURE pi_consulta_procedimento IS
      --
      li_nom_prg g9999992.nom_prg%TYPE;
      --
      CURSOR lc_g9999992 IS
        SELECT g.nom_prg
          FROM g9999992 g
         WHERE g.cod_cia         = g_cod_cia
           AND g.cod_ramo        = g_cod_ramo
           AND g.tip_mvto_batch  = g_tip_mvto_batch
           AND g.num_paso        = g_num_paso
           AND g.cod_campo       = l_reg_c2000020.cod_campo
           AND g.cod_tarifa     IN (g_cod_tarifa
                                   ,em.cod_tarifa_gen)
           AND g.cod_agt        IN (g_cod_agt
                                   ,em.cod_agt_gen
                                   ,g_k_cod_agt_generico);
      --
    BEGIN
      --
      mx('I', 'pi_consulta_procedimento');
      --
      mx('g_cod_cia       ', g_cod_cia       );
      mx('g_cod_ramo      ', g_cod_ramo      );
      mx('g_tip_mvto_batch', g_tip_mvto_batch);
      mx('g_num_paso      ', g_num_paso      );
      mx('g_cod_tarifa    ', g_cod_tarifa    );
      mx('g_cod_agt       ', g_cod_agt       );
      --
      IF lc_g9999992%ISOPEN THEN
        --
        CLOSE lc_g9999992;
        --
      END IF;
      --
      OPEN lc_g9999992;
      FETCH lc_g9999992 INTO li_nom_prg;
      CLOSE lc_g9999992;
      --
      mx('li_nom_prg', li_nom_prg);
      --
      IF li_nom_prg IS NOT NULL THEN
        --
        trn_k_global.p_asigna(l_reg_c2000020.cod_campo
                             ,l_reg_c2000020.val_campo);
        --
        trn_k_dinamico.p_ejecuta_procedimiento(li_nom_prg);
        --
      END IF;
      --
      mx('F', 'pi_consulta_procedimento');
      --
    END pi_consulta_procedimento;
    --
  BEGIN
    --
    mx('I', 'pp_carga_cob_c2000020');
    --
    pp_borra_c2000000_cob;
    --
    mx('--', 'LOOP c_coberturas');
    --
    FOR reg_coberturas IN c_coberturas LOOP
      --
      mx('GRAVACAO NA TABELA c2000020 DO CAMPO ' ||
         reg_coberturas.NOM_COLUMNA,
         reg_coberturas.VAL_COLUMNA);
      --
      l_reg_c2000020.cod_cia        := trn_k_global.devuelve('COD_CIA');
      l_reg_c2000020.cod_ramo       := trn_k_global.devuelve('COD_RAMO');
      l_reg_c2000020.num_simulacion := trn_k_global.devuelve('NUM_SIMULACION');
      l_reg_c2000020.cod_campo      := reg_coberturas.NOM_COLUMNA;
      l_reg_c2000020.val_campo      := reg_coberturas.VAL_COLUMNA;
      --
      pp_inserta_c2000020(p_reg => l_reg_c2000020);
      --
      mx('GRAVACAO NA TABELA c2000000 DO CAMPO ' ||
         reg_coberturas.NOM_COLUMNA,
         reg_coberturas.VAL_COLUMNA);
      --
      IF INSTR(reg_coberturas.NOM_COLUMNA, 'ACESSORIO') <> 0 THEN
        --
        l_nom_tabla := g_k_nom_tabla_accesorios;
        --
      ELSE
        --
        l_nom_tabla := g_k_nom_tabla_atribb_cob;
        --
      END IF;
      --
      pi_consulta_procedimento;
      --
      pp_inserta_attrib_cob_c2000000(l_nom_tabla,
                                     reg_coberturas.NOM_COLUMNA,
                                     g_k_cod_fila_generica,
                                     reg_coberturas.VAL_COLUMNA);
      --I 2.53
      pp_inserta_attrib_cob_c2000000(l_nom_tabla,
                                     reg_coberturas.NOM_COLUMNA ||
                                     g_k_prefixo_simulacion ||
                                     trn_k_global.devuelve('NUM_SIMULACION'),
                                     g_k_cod_fila_generica,
                                     reg_coberturas.VAL_COLUMNA);
      --F 2.53
    --
    --
    END LOOP;
    --
    mx('F', 'pp_carga_cob_c2000020');
    --
  EXCEPTION
    WHEN OTHERS THEN
      --
      mx('pp_carga_cob_c2000020 - EXCEPTION', SQLERRM);
      --
      g_cod_mensaje := g_k_cod_error_gen;
      g_anx_mensaje := SQLERRM;
      --
      g_err_msg.EXTEND(1); -- 4.99
      g_err_msg(g_err_msg.LAST) := fp_trata_msg('COD_RETORNO', -- 4.99
                                                                                NULL,
                                                                                g_k_pre_msg_erro ||
                                                                                '20098400' ||
                                                                                g_k_sep_cod_msg ||
                                                                                'Erro de processamento de coberturas.');
      --
      mx('F', 'pp_carga_cob_c2000020 - EXCEPTION');
      --
      pp_devuelve_error;
      --
  END pp_carga_cob_c2000020;
   --
   /* ------------------------------------------------------
   || Carrega coberturas para recalculo
   */ ------------------------------------------------------
   --
   PROCEDURE pp_carga_c2000020_franq_dv
   IS
      --
      l_num_simulacion   c2000020.num_simulacion  %TYPE := trn_k_global.devuelve('NUM_SIMULACION');
      --
      l_reg_c2000020     c2000020                 %ROWTYPE;
      l_nom_tabla        c2000000.nom_tabla       %TYPE;
      --
      CURSOR c_coberturas_franq_dv
      IS
                SELECT
                    COBERTURAS_NORMAIS_COMPOSTAS.NUM_SIMULACION   AS NUM_SIMULACION,
                    COBERTURAS_NORMAIS_COMPOSTAS.COD_PACOTE       AS COD_PACOTE,
                    TO_CHAR(COBERTURAS_NORMAIS_COMPOSTAS.COD_COB) AS COD_FILA
                FROM
                    TABLE(CAST(g_cob_dados AS TYPTAB_DADOS_COB)) COBERTURAS_NORMAIS_COMPOSTAS
                WHERE
                    COBERTURAS_NORMAIS_COMPOSTAS.mca_seleccion_cob = 'S'                                     AND
                    COBERTURAS_NORMAIS_COMPOSTAS.tip_cob           = 'N'                                     AND
                    COBERTURAS_NORMAIS_COMPOSTAS.NUM_SIMULACION    = trn_k_global.devuelve('NUM_SIMULACION') AND
                    EXISTS (SELECT *
                              FROM g2000020
                             WHERE cod_cia   = trn_k_global.cod_cia
                               AND cod_ramo  = trn_k_global.ref_f_global('COD_RAMO')
                               AND cod_cob   = COBERTURAS_NORMAIS_COMPOSTAS.cod_cob
                               AND cod_campo LIKE (g_k_ini_val_franq_dv || '%')
                           )
              UNION
                SELECT
                    COBERTURAS_CASCO_COMPOSTAS.NUM_SIMULACION AS NUM_SIMULACION,
                    COBERTURAS_CASCO_COMPOSTAS.COD_PACOTE     AS COD_PACOTE,
                    TO_CHAR(g_k_cod_fila_201)                 AS COD_FILA
                FROM
                    TABLE(CAST(g_cob_dados AS TYPTAB_DADOS_COB)) COBERTURAS_CASCO_COMPOSTAS
                WHERE
                    COBERTURAS_CASCO_COMPOSTAS.mca_seleccion_cob = 'S'                                     AND
                    COBERTURAS_CASCO_COMPOSTAS.tip_cob           = 'C'                                     AND
                    COBERTURAS_CASCO_COMPOSTAS.NUM_SIMULACION    = trn_k_global.devuelve('NUM_SIMULACION') AND
                    EXISTS (SELECT *
                              FROM g2000020
                             WHERE cod_cia   = trn_k_global.cod_cia
                               AND cod_ramo  = trn_k_global.ref_f_global('COD_RAMO')
                               AND cod_cob   = COBERTURAS_CASCO_COMPOSTAS.cod_cob
                               AND cod_campo LIKE (g_k_ini_val_franq_dv || '%')
                           )
            ORDER BY
                COD_FILA;
      --
   BEGIN
      --
      mx('I', 'pp_carga_c2000020_franq_dv');
      --
      pp_limpa_dv_franq;
      --
      mx('--', 'LOOP c_coberturas_franq_dv');
      --
      FOR reg_coberturas IN c_coberturas_franq_dv
      LOOP
            --
            mx('--', 'LOOP fdv');
            --
            FOR fdv IN (SELECT *
                          FROM g2000020 g
                        WHERE g.cod_cia   = trn_k_global.cod_cia
                          AND g.cod_ramo  = trn_k_global.ref_f_global('cod_ramo')
                          AND g.cod_cob   = reg_coberturas.cod_fila
                          AND g.cod_campo LIKE (g_k_ini_val_franq_dv || '%')
                        ORDER BY g.num_secu) LOOP
               --
               mx('fdv.cod_cob'  , fdv.cod_cob  );
               mx('fdv.cod_campo', fdv.cod_campo);
               --
               trn_k_global.asigna('COD_CAMPO'        , fdv.cod_campo                                                );
               trn_k_global.asigna('DVCOD_CAMPO'      , fdv.cod_campo                                                );
               trn_k_global.asigna('NUM_RIESGO'       , trn.UNO                                                      );
               trn_k_global.asigna('COD_COB'          , fdv.cod_cob                                                  );
               --
               em_p_dado_dinamico_dv;
               --
            END LOOP;
            --
            mx('--', 'LOOP fdvx');
            --
            FOR fdvx IN (SELECT g2.cod_campo,
                                g1.nom_campo,
                                x.cod_valor
                           FROM g2000020 g2
                           INNER JOIN g2000010 g1    ON (g1.cod_cia    = g2.cod_cia
                                                    AND  g1.cod_campo  = g2.cod_campo)
                           INNER JOIN x2990006_vcr x ON (x.cod_cia     = g2.cod_cia
                                                    AND  x.cod_campo   = g2.cod_campo)
                          WHERE g2.cod_cia       = trn_k_global.cod_cia
                            AND g2.cod_ramo      = trn_k_global.devuelve('COD_RAMO')
                            AND x.num_poliza     = trn_k_global.devuelve('NUM_COTIZACION')
                            AND x.num_riesgo     = trn.UNO
                            AND g2.cod_cob       = reg_coberturas.COD_FILA
                            AND g2.cod_campo     LIKE (g_k_ini_val_franq_dv || '%')
                         ORDER BY g2.num_secu)
            LOOP
               --
               mx('GRAVACAO NA TABELA c2000020 DO CAMPO ' || fdvx.cod_campo, fdvx.cod_valor);
               --
               l_reg_c2000020.cod_cia        := trn_k_global.devuelve('COD_CIA');
               l_reg_c2000020.cod_ramo       := trn_k_global.devuelve('COD_RAMO');
               l_reg_c2000020.num_simulacion := trn_k_global.devuelve('NUM_SIMULACION');
               l_reg_c2000020.cod_campo      := fdvx.cod_campo;
               l_reg_c2000020.val_campo      := fdvx.cod_valor;
               --
               pp_inserta_c2000020(p_reg => l_reg_c2000020);
               --
               mx('GRAVACAO NA TABELA c2000000 DO CAMPO ' || fdvx.cod_campo, fdvx.cod_valor);
               --
               pp_inserta_attrib_cob_c2000000(g_k_nom_tabla_atribb_cob,
                                              fdvx.cod_campo,
                                              g_k_cod_fila_generica,
                                              fdvx.cod_valor);
            --
            END LOOP;
            --
      END LOOP;
      --
      mx('F', 'pp_carga_c2000020_franq_dv');
      --
      EXCEPTION
      WHEN OTHERS THEN
         --
         mx('pp_carga_c2000020_franq_dv - EXCEPTION', SQLERRM);
         --
         g_cod_mensaje    := g_k_cod_error_gen;
         g_anx_mensaje    := SQLERRM;
         --
         g_err_msg.EXTEND(1); -- 4.99
         g_err_msg(g_err_msg.LAST) := fp_trata_msg('COD_RETORNO', -- 4.99
                                                                                   NULL,
                                                                                   g_k_pre_msg_erro || '20098400' || g_k_sep_cod_msg || 'Erro de processamento de coberturas.');
         --
         mx('F', 'pp_carga_c2000020_franq_dv - EXCEPTION');
         --
         pp_devuelve_error;
         --
   END pp_carga_c2000020_franq_dv;
   --
   /* ------------------------------------------------------
   || Carrega coberturas para recalculo
   */ ------------------------------------------------------
   --
   PROCEDURE pp_valida_cob_casco(p_qtdd_erro OUT NUMBER)
   IS
      --
      l_num_simulacion   c2000020.num_simulacion  %TYPE := trn_k_global.devuelve('NUM_SIMULACION');
      l_cod_modalidad    c2000000.nom_columna     %TYPE := g_k_prefixo_cod_modalidad || trn_k_global.devuelve('NUM_SIMULACION');
      l_cod_pacote       c2000000.nom_columna     %TYPE := g_k_prefixo_cod_pacote    || trn_k_global.devuelve('NUM_SIMULACION');
      l_qtddCobCasco     NUMBER;
      --
   BEGIN
      --
      mx('I', 'pp_valida_cob_casco');
      --
      SELECT
         COUNT(COD_COB) qtddCobCasco
      INTO
         l_qtddCobCasco
      FROM
         TABLE(CAST(g_cob_dados AS TYPTAB_DADOS_COB))
      WHERE
        num_simulacion              = trn_k_global.devuelve('NUM_SIMULACION')  AND
        mca_seleccion_cob           = 'S'                                      AND
        tip_dados_cob               = 'I'                                      AND
        tip_cob                     = 'C'                                      AND
        mca_val_defecto_indenizacao = 'S'                                      AND
        cod_cob                     IN (1, 2, 3);
      --
      IF l_qtddCobCasco > 1 THEN
         --
         g_err_msg.EXTEND(1); -- 4.99
         g_err_msg(g_err_msg.LAST) := fp_trata_msg('COD_RETORNO',null, g_k_pre_msg_erro || '20098236' || g_k_sep_cod_msg); -- 4.99
         --
         p_qtdd_erro := 1;
         --
         mx('EXCEPTION - pp_valida_cob_casco', '20098236 - ERRO DE VALIDACAO DE COBERTURAS DE CASCO');
         --
      ELSE
         --
         p_qtdd_erro := 0;
         --
      END IF;
      --
      mx('F', 'pp_valida_cob_casco');
      --
      EXCEPTION
      WHEN OTHERS THEN
         --
         g_cod_mensaje    := '20098400';
         g_anx_mensaje    := SQLERRM;
         --
         g_err_msg.EXTEND(1); -- 4.99
         g_err_msg(g_err_msg.LAST) := fp_trata_msg('COD_RETORNO','20098400', g_k_pre_msg_erro || '20098400' || g_k_sep_cod_msg || g_anx_mensaje); -- 4.99
         --
         mx('F', 'pp_valida_cob_casco - EXCEPTION');
         --
         pp_devuelve_error;
         --
   END pp_valida_cob_casco;
   --
   /* ------------------------------------------------------
   || Carrega coberturas para recalculo
   */ ------------------------------------------------------
   --
   PROCEDURE pp_carga_cob_c2000040
   IS
     --
     l_reg_c2000040     c2000040                 %ROWTYPE;
     --
     l_tip_cob          A1002050.tip_cob         %TYPE;
     --
     CURSOR c_coberturas
     IS
     SELECT
            COBERTURAS_NORMAIS_SIMPLES.NUM_SIMULACION   AS NUM_SIMULACION,
            COBERTURAS_NORMAIS_SIMPLES.COD_PACOTE       AS COD_PACOTE,
            TO_CHAR(COBERTURAS_NORMAIS_SIMPLES.COD_COB) AS COD_FILA,
            'SUMA_ASEG'                                 AS NOM_COLUMNA,
            CASE
            WHEN TIPO_SUMA_ASEG.MCA_MOD_SUMA_ASEG = 'S' AND COBERTURAS_NORMAIS_SIMPLES.mca_seleccion_cob = 'N'
               THEN '0'
            ELSE COBERTURAS_NORMAIS_SIMPLES.VAL_CAMPO
            END                                         AS VAL_COLUMNA
        FROM
            TABLE(CAST(g_cob_dados AS TYPTAB_DADOS_COB)) COBERTURAS_NORMAIS_SIMPLES
            INNER JOIN (SELECT COD_COB, MCA_MOD_SUMA_ASEG FROM A1002150 WHERE COD_CIA = trn_k_global.devuelve('COD_CIA') AND COD_RAMO = trn_k_global.devuelve('COD_RAMO')) TIPO_SUMA_ASEG ON COBERTURAS_NORMAIS_SIMPLES.COD_COB = TIPO_SUMA_ASEG.COD_COB
        WHERE
            COBERTURAS_NORMAIS_SIMPLES.tip_cob                     = 'N' AND
            COBERTURAS_NORMAIS_SIMPLES.tip_dados_cob               = 'I' AND
            COBERTURAS_NORMAIS_SIMPLES.mca_val_defecto_indenizacao = 'S' AND
            COBERTURAS_NORMAIS_SIMPLES.NUM_SIMULACION              = trn_k_global.devuelve('NUM_SIMULACION') AND
           (COBERTURAS_NORMAIS_SIMPLES.mca_seleccion_cob           = 'S' OR
           (COBERTURAS_NORMAIS_SIMPLES.mca_seleccion_cob           = 'N' AND
            TIPO_SUMA_ASEG.MCA_MOD_SUMA_ASEG                       = 'S'))
        UNION
            SELECT
                COBERTURAS_CASCO.NUM_SIMULACION   AS NUM_SIMULACION,
                COBERTURAS_CASCO.COD_PACOTE       AS COD_PACOTE,
                TO_CHAR(CONSTANTES_CASCO.CNC_VRB_VAL) AS COD_FILA,
                'SUMA_ASEG'                       AS NOM_COLUMNA,
                COBERTURAS_CASCO.VAL_CAMPO        AS VAL_COLUMNA
            FROM
                TABLE(CAST(g_cob_dados AS TYPTAB_DADOS_COB)) COBERTURAS_CASCO
                LEFT OUTER JOIN df_cmn_nwt_xx_vrb_cnc CONSTANTES_CASCO ON CONSTANTES_CASCO.vrb_nam = 'COD_COB_CASCO#' || COBERTURAS_CASCO.cod_cob
            WHERE
                COBERTURAS_CASCO.mca_seleccion_cob           = 'S' AND
                COBERTURAS_CASCO.tip_cob                     = 'C' AND
                COBERTURAS_CASCO.tip_dados_cob               = 'I' AND
                COBERTURAS_CASCO.mca_val_defecto_indenizacao = 'S' AND
                COBERTURAS_CASCO.NUM_SIMULACION              = trn_k_global.devuelve('NUM_SIMULACION')
        ORDER BY
            COD_FILA,
            NOM_COLUMNA;
   --
   BEGIN
      --
      mx('I', 'pp_carga_cob_c2000040');
      --
      l_reg_c2000040.cod_cia        := trn_k_global.devuelve('COD_CIA');
      --
      l_reg_c2000040.cod_ramo       := trn_k_global.devuelve('COD_RAMO');
      --
      l_reg_c2000040.num_simulacion := trn_k_global.devuelve('NUM_SIMULACION');
      --
      pp_borra_c2000040(l_reg_c2000040);
      --
      FOR reg_coberturas IN c_coberturas
      LOOP
            --
            mx('-- GRAVACAO NA TABELA C2000040 DA COBERTURA ' || reg_coberturas.COD_FILA || ' COM VALOR', reg_coberturas.VAL_COLUMNA);
            --
            l_reg_c2000040.cod_cob := TO_NUMBER(reg_coberturas.COD_FILA);
            --
            --DEFINE VALOR DE SUMA_ASEG DEPENDENDO DO CODIGO E TIPO DE COBERTURA
            --
            IF reg_coberturas.COD_FILA = g_k_cod_fila_accesorios THEN
               --
               mx('-- ASSIGNA DA val_accesorios_vcr: ', TO_CHAR(reg_coberturas.VAL_COLUMNA));
               --
               trn_k_global.asigna('val_accesorios_vcr', TO_CHAR(reg_coberturas.VAL_COLUMNA));
               --
            END IF;
            --
            SELECT tip_cob
               INTO l_tip_cob
               FROM a1002050
               WHERE cod_cia = trn_k_global.cod_cia AND
                     cod_cob = l_reg_c2000040.cod_cob;
            --
            IF l_tip_cob = em.TIP_COB_INDEPENDIENTE THEN
               --
               l_reg_c2000040.suma_aseg := TO_NUMBER(reg_coberturas.VAL_COLUMNA);

               --
               pp_inserta_c2000040(l_reg_c2000040);
               --
            ELSIF l_tip_cob = em.TIP_COB_SERVICIO THEN
               --
               l_reg_c2000040.suma_aseg := trn.CERO;
               --
               pp_inserta_c2000040(l_reg_c2000040);
               --
            END IF;
      END LOOP;
      --
      mx('F', 'pp_carga_cob_c2000040');
      --
      EXCEPTION
      WHEN OTHERS THEN
         --
         mx('pp_carga_cob_c2000040 - EXCEPTION', SQLERRM);
         --
         g_cod_mensaje    := g_k_cod_error_gen;
         g_anx_mensaje    := SQLERRM;
         --
         g_err_msg.EXTEND(1); -- 4.99
         g_err_msg(g_err_msg.LAST) := fp_trata_msg('COD_RETORNO', -- 4.99
                                                   NULL,
                                                   g_k_pre_msg_erro || '20098400' || g_k_sep_cod_msg || 'Erro de processamento de coberturas.');
         --
         mx('F', 'pp_carga_cob_c2000040 - EXCEPTION');
         --
         pp_devuelve_error;
         --

   END pp_carga_cob_c2000040;
   --{ v 2.29M
   /* ------------------------------------------------------
   || Selecionar sub_cod_spto qdo interatividade
   */ ------------------------------------------------------
   --
   FUNCTION fp_sub_cod_spto(p_num_paso G9999992.num_paso%TYPE)
     RETURN a2000560.val_campo%TYPE IS
     --
     l_val_campo a2000560.val_campo%TYPE := trn.NULO;
     --
   BEGIN
     --
     mx('I', 'fp_sub_cod_spto');
     --
     IF NVL(p_num_paso,trn.CERO) = g_k_paso_interatividade
     THEN
        l_val_campo := '4';
     ELSE
        l_val_campo := '2';
     END IF;
     --
     mx('F', 'fp_sub_cod_spto');
     --
     RETURN l_val_campo;
     --
   EXCEPTION
     WHEN OTHERS THEN
       --
       mx('l_val_campo', l_val_campo);
       --
       mx('F', 'EXCEPTION - fp_sub_cod_spto');
       --
       RETURN l_val_campo;
       --
   END fp_sub_cod_spto;
   --}
   /* ------------------------------------------------------
   || Processar passo de endosso de cancelamento
   */ ------------------------------------------------------
   --
   PROCEDURE pp_cancelamento_endosso
   IS
     --
     l_num_spto       a2000030.num_spto%TYPE;
     l_num_paso       G9999992.num_paso%TYPE; -- 1.61
     --
     l_reg_a2000560   a2000560%ROWTYPE;
     --
     CURSOR c_a2990700 (pc_cod_cia       a2990700.cod_cia    %TYPE,
                        pc_num_poliza    a2990700.num_poliza %TYPE,
                        pc_num_spto      a2990700.num_spto   %TYPE) IS
     SELECT SUM(imp_neta) imp_recibo
       FROM a2990700
      WHERE cod_cia                   =  pc_cod_cia
        AND num_poliza                =  pc_num_poliza
        AND num_spto                  <= pc_num_spto
        AND tip_situacion             IN (gc.TIP_SITU_PENDIENTE,
                                          gc.TIP_SITU_REMESA);
     --
     l_reg_a2990700 c_a2990700%ROWTYPE;
     --
   BEGIN
     --
     mx('I','pp_cancelamento_endosso');
     --
     l_reg_a2000560.cod_cia       := trn_k_global.devuelve('COD_CIA');
     l_reg_a2000560.num_propuesta := trn_k_global.devuelve('NUM_PROPUESTA');
     l_num_paso                   := NVL(trn_k_global.devuelve('NUM_PASO'),0);--1.72
     --
     IF c_a2990700%ISOPEN THEN
        --
        CLOSE c_a2990700;
        --
     END IF;
     --
     l_num_spto := em_f_max_spto_1(l_reg_a2000560.cod_cia,
                                   l_reg_a2000560.num_propuesta);
     --
     mx('l_num_spto',l_num_spto);
     --
     OPEN  c_a2990700(l_reg_a2000560.cod_cia,
                      l_reg_a2000560.num_propuesta,
                      l_num_spto);
     --
     FETCH c_a2990700 INTO l_reg_a2990700;
     --
     CLOSE c_a2990700;
     --
     mx('l_reg_a2990700.imp_recibo',l_reg_a2990700.imp_recibo);
     --
     IF l_reg_a2990700.imp_recibo > trn.CERO THEN -- 1.73
        --
        mx('--','IF l_reg_a2990700.imp_recibo > trn.CERO THEN');
        --
        l_reg_a2000560.cod_campo     := 'DFCOD_SPTO';
        l_reg_a2000560.val_campo     := '508';
        --
        pp_inserta_a2000560(l_reg_a2000560);
        --
        l_reg_a2000560.cod_campo     := 'LLCOD_SPTO';
        l_reg_a2000560.val_campo     := '508';
        --
        pp_inserta_a2000560(l_reg_a2000560);
        --
        l_reg_a2000560.cod_campo     := 'DFSUB_COD_SPTO';
        --{ v 2.29M
        l_reg_a2000560.val_campo     := fp_sub_cod_spto(l_num_paso);
        --}
        pp_inserta_a2000560(l_reg_a2000560);
        --
        l_reg_a2000560.cod_campo     := 'LLSUB_COD_SPTO';
        --{ v 2.29M
        l_reg_a2000560.val_campo     := fp_sub_cod_spto(l_num_paso);
        --}
        pp_inserta_a2000560(l_reg_a2000560);
        --
        l_reg_a2000560.cod_campo     := 'DFCOD_TIP_SPTO';
        l_reg_a2000560.val_campo     := '1';
        --
        pp_inserta_a2000560(l_reg_a2000560);
        --
        l_reg_a2000560.cod_campo     := 'LLCOD_TIP_SPTO';
        l_reg_a2000560.val_campo     := '1';
        --
        pp_inserta_a2000560(l_reg_a2000560);
        --
        g_mca_cancel_parc_pend := trn.SI;
        -- I - 1.61

     ELSE
        --
        mx('--','ELSE - IF l_reg_a2990700.imp_recibo > trn.CERO THEN');
        --
        l_reg_a2000560.cod_campo     := 'DFCOD_SPTO';
        l_reg_a2000560.val_campo     := '550';
        --
        pp_inserta_a2000560(l_reg_a2000560);
        --
        l_reg_a2000560.cod_campo     := 'LLCOD_SPTO';
        l_reg_a2000560.val_campo     := '550';
        --
        pp_inserta_a2000560(l_reg_a2000560);
        --
        l_reg_a2000560.cod_campo     := 'DFSUB_COD_SPTO';
        l_reg_a2000560.val_campo     := '99';
        --
        pp_inserta_a2000560(l_reg_a2000560);
        --
        l_reg_a2000560.cod_campo     := 'LLSUB_COD_SPTO';
        l_reg_a2000560.val_campo     := '99';
        --
        pp_inserta_a2000560(l_reg_a2000560);
        --
        l_reg_a2000560.cod_campo     := 'DFCOD_TIP_SPTO';
        l_reg_a2000560.val_campo     := '92';
        --
        pp_inserta_a2000560(l_reg_a2000560);
        --
        l_reg_a2000560.cod_campo     := 'LLCOD_TIP_SPTO';
        l_reg_a2000560.val_campo     := '92';
        --
        pp_inserta_a2000560(l_reg_a2000560);
        --
        g_mca_cancel_parc_pend := trn.NO;
        --
     END IF;
     --
     --{ v 2.29M
/*   IF l_num_paso = 91 THEN -- I 1.73
        --
        mx('--','IF l_num_paso = 91 THEN');
        --
        l_reg_a2000560.cod_campo     := 'DFCOD_SPTO';
        l_reg_a2000560.val_campo     := '508';
        --
        pp_inserta_a2000560(l_reg_a2000560);
        --
        l_reg_a2000560.cod_campo     := 'LLCOD_SPTO';
        l_reg_a2000560.val_campo     := '508';
        --
        pp_inserta_a2000560(l_reg_a2000560);
        --
        l_reg_a2000560.cod_campo     := 'DFSUB_COD_SPTO';
        l_reg_a2000560.val_campo     := '4';
        --
        pp_inserta_a2000560(l_reg_a2000560);
        --
        l_reg_a2000560.cod_campo     := 'LLSUB_COD_SPTO';
        l_reg_a2000560.val_campo     := '4';
        --
        pp_inserta_a2000560(l_reg_a2000560);
        --
        l_reg_a2000560.cod_campo     := 'DFCOD_TIP_SPTO';
        l_reg_a2000560.val_campo     := '1';
        --
        pp_inserta_a2000560(l_reg_a2000560);
        --
        l_reg_a2000560.cod_campo     := 'LLCOD_TIP_SPTO';
        l_reg_a2000560.val_campo     := '1';
        --
        pp_inserta_a2000560(l_reg_a2000560);

   END IF; -- F 1.73 */
     --}
     pp_asigna('MCA_BANC_IND_REST'  , trn.NO);
     pp_asigna('dvMCA_BANC_IND_REST', trn.NO);
     --
     mx('g_mca_cancel_parc_pend',g_mca_cancel_parc_pend);
     --
     mx('F','pp_cancelamento_endosso');
     --
   END pp_cancelamento_endosso;
   --
   /* ------------------------------------------------------
   || Processar passo de endosso de restituicao
   */ ------------------------------------------------------
   --
   PROCEDURE pp_restituicao_endosso
   IS
     --
     l_reg_a2000560   a2000560%ROWTYPE;
     --{ v 2.29M
     l_num_paso       g9999992.num_paso%TYPE;
     --}
   BEGIN
     --
     mx('I','pp_restituicao_endosso');
     --{ v 2.29M
     l_num_paso                   := NVL(trn_k_global.devuelve('NUM_PASO'),trn.CERO);
     --}
     l_reg_a2000560.cod_cia       := trn_k_global.devuelve('COD_CIA');
     l_reg_a2000560.num_propuesta := trn_k_global.devuelve('NUM_PROPUESTA');
     --
     l_reg_a2000560.cod_campo     := 'DFCOD_SPTO';
     l_reg_a2000560.val_campo     := '558';
     --
     pp_inserta_a2000560(l_reg_a2000560);
     --
     l_reg_a2000560.cod_campo     := 'LLCOD_SPTO';
     l_reg_a2000560.val_campo     := '558';
     --
     pp_inserta_a2000560(l_reg_a2000560);
     --
     l_reg_a2000560.cod_campo     := 'DFSUB_COD_SPTO';
     --{ v 2.29M
     l_reg_a2000560.val_campo     := fp_sub_cod_spto(l_num_paso);
     --}
     pp_inserta_a2000560(l_reg_a2000560);
     --
     l_reg_a2000560.cod_campo     := 'LLSUB_COD_SPTO';
     --{ v 2.29M
     l_reg_a2000560.val_campo     := fp_sub_cod_spto(l_num_paso);
     --}
     pp_inserta_a2000560(l_reg_a2000560);
     --
     l_reg_a2000560.cod_campo     := 'DFCOD_TIP_SPTO';
     l_reg_a2000560.val_campo     := '1';
     --
     pp_inserta_a2000560(l_reg_a2000560);
     --
     l_reg_a2000560.cod_campo     := 'LLCOD_TIP_SPTO';
     l_reg_a2000560.val_campo     := '1';
     --
     pp_inserta_a2000560(l_reg_a2000560);
     --
     pp_asigna('MCA_BANC_IND_REST'  , trn.SI);
     pp_asigna('dvMCA_BANC_IND_REST', trn.SI);
     --
     mx('F','pp_restituicao_endosso');
     --
   END pp_restituicao_endosso;
   --
   /* ------------------------------------------------------
   || pp_borra_tablas_p
   */ ------------------------------------------------------
   PROCEDURE pp_borra_tablas_p
   IS
   BEGIN
      --
      mx('I', 'pp_borra_tablas_p');
      --
      pp_asigna('cod_cia'       ,g_cod_cia       );
      pp_asigna('cod_ramo'      ,g_cod_ramo      );
      pp_asigna('num_poliza'    ,g_num_poliza    );
      pp_asigna('num_spto'      ,g_num_spto      );
      pp_asigna('num_apli'      ,g_num_apli      );
      pp_asigna('num_spto_apli' ,g_num_spto_apli );
      pp_asigna('tip_mvto_batch',g_tip_mvto_batch);
      --
      em_k_tablas_coti_spto.p_borra_tablas_p;
      --
      trn_k_global.borra_todas;
      --
      mx('F', 'pp_borra_tablas_p');
      --
   END pp_borra_tablas_p;
   --
   /* ------------------------------------------------------
   || pp_calcula_restituicao
   */ ------------------------------------------------------
   PROCEDURE pp_calcula_restituicao(p_cod_cia          IN  a2000030.cod_cia%TYPE,
                                    p_cod_spto         IN  a2000030.cod_spto%TYPE,
                                    p_sub_cod_spto     IN  a2000030.sub_cod_spto%TYPE,
                                    p_imp_premio_pago  OUT a2990700.imp_neta%TYPE,
                                    p_imp_premio_total OUT a2990700.imp_neta%TYPE,
                                    p_imp_restituicao  OUT a2990700.imp_neta%TYPE)
   IS
      --
      l_mca_prorrata a2991800.mca_prorrata%TYPE;
      --
   BEGIN
      --
      mx('I', 'pp_calcula_restituicao');
      --
      l_mca_prorrata := NVL(fp_devuelve_mca_prorrata(p_cod_cia,
                                                     p_cod_spto,
                                                     p_sub_cod_spto),
                            trn.NO);
      --
      mx('l_mca_prorrata', l_mca_prorrata);
      --
      pp_asigna('COD_SPTO'  ,p_cod_spto); -- 5.15
      pp_asigna('SUB_COD_SPTO' ,p_sub_cod_spto); -- 5.15
      --
      em_k_gen_des.p_calculo_restituicao(l_mca_prorrata    ,
                                         p_imp_premio_pago ,
                                         p_imp_premio_total,
                                         p_imp_restituicao);
      --
      mx('p_imp_premio_pago' , p_imp_premio_pago);
      mx('p_imp_premio_total', p_imp_premio_total);
      mx('p_imp_restituicao' , p_imp_restituicao);
      --
      pp_asigna('IMP_PREMIO_SPTO_PAGO'  ,p_imp_premio_pago);
      pp_asigna('IMP_PREMIO_SPTO_TOTAL' ,p_imp_premio_total);
      pp_asigna('IMP_PREMIO_RESTITUICAO',p_imp_restituicao);
      --
      mx('F', 'pp_calcula_restituicao');
      --
   END pp_calcula_restituicao;
   --
   /* ------------------------------------------------------
   || pp_gera_segurado
   */ ------------------------------------------------------
   PROCEDURE pp_gera_segurado(p_cod_cia          IN  a2000030.cod_cia         %TYPE,
                              p_cod_ramo         IN  a2000030.cod_ramo        %TYPE,
                              p_cod_tarifa       IN  g9999992.cod_tarifa      %TYPE,
                              p_cod_agt          IN  g9999992.cod_agt         %TYPE,
                              p_num_poliza       IN  a2000030.num_poliza      %TYPE,
                              p_num_cotizacion   IN  a2000030.num_presupuesto %TYPE,
                              p_tip_mvto_batch   IN  a2000500.tip_mvto_batch  %TYPE,
                              p_xml_in           IN                            CLOB,
                              p_xml             OUT                            CLOB)
   IS
      --
      CURSOR c_seg_cond_p IS
      SELECT VALUE
        FROM (SELECT 'TIP_DOCUM'                   ||','||TO_CHAR(SEG.TIP_DOCUM)                       TIP_DOCUM
                    ,'COD_DOCUM'                   ||','||TO_CHAR(SEG.COD_DOCUM)                       COD_DOCUM
                    ,'MCA_FISICO'                  ||','||TO_CHAR(DECODE(SEG.TIP_DOCUM,'CPF','S','N')) MCA_FISICO
                    ,'NOM_TERCERO'                 ||','||TO_CHAR(SUBSTR(NSEG.NOM_COMPLETO,1,80))      NOM_TERCERO
                    ,'MCA_SEXO'                    ||','||TO_CHAR(DSEG.MCA_SEXO)                       MCA_SEXO
                    ,'FEC_NACIMIENTO'              ||','||TO_CHAR(DSEG.FEC_NACIMIENTO, 'DDMMYYYY')     FEC_NACIMIENTO
                    ,'COD_EST_CIVIL'               ||','||TO_CHAR(DSEG.COD_EST_CIVIL)                  COD_EST_CIVIL
                    ,'COD_NACIONALIDAD'            ||','||TO_CHAR(DSEG.COD_NACIONALIDAD)               COD_NACIONALIDAD
                    ,'COD_PROFESION'               ||','||TO_CHAR(DSEG.COD_PROFESION)                  COD_PROFESION
                    ,'COD_FAIXA_RENDA'             ||','||TO_CHAR(VSEG.COD_FAIXA_RENDA)                COD_FAIXA_RENDA
                    ,'TEL_SEG_CEL'                 ||','||TO_CHAR(VSEG.TEL_SEG_CEL)                    TEL_SEG_CEL
                    ,'TLF_NUMERO'                  ||','||TO_CHAR(DSEG.TLF_ZONA||DSEG.TLF_NUMERO)      TLF_NUMERO
                    ,'TXT_AUX7'                    ||','||TO_CHAR(DSEG.TXT_AUX6||DSEG.TXT_AUX7)        TXT_AUX7
                    ,'EMAIL'                       ||','||TO_CHAR(DSEG.EMAIL)                          EMAIL
                    ,'TIP_DOCUM_SUSEP'             ||','||TO_CHAR(VSEG.TIP_DOCUM_SUSEP)                TIP_DOCUM_SUSEP
                    ,'COD_DOCUM_SUSEP'             ||','||TO_CHAR(VSEG.COD_DOCUM_SUSEP)                COD_DOCUM_SUSEP
                    ,'TIP_ORG_EXPEDICION'          ||','||TO_CHAR(VSEG.TIP_ORG_EXPEDICION)             TIP_ORG_EXPEDICION
                    ,'FEC_EXPEDICION'              ||','||TO_CHAR(VSEG.FEC_EXPEDICION, 'DDMMYYYY')     FEC_EXPEDICION
                    ,'COD_POSTAL'                  ||','||TO_CHAR(DSEG.COD_POSTAL)                     COD_POSTAL
                    ,'NOM_DOMICILIO1'              ||','||TO_CHAR(DSEG.NOM_DOMICILIO1)                 NOM_DOMICILIO1
                    ,'NUM_APARTADO'                ||','||TO_CHAR(DSEG.NUM_APARTADO)                   NUM_APARTADO
                    ,'NOM_DOMICILIO2'              ||','||TO_CHAR(DSEG.NOM_DOMICILIO3)                 NOM_DOMICILIO2 --v1.74
                    ,'NOM_LOCALIDAD'               ||','||TO_CHAR(DSEG.NOM_LOCALIDAD)                  NOM_LOCALIDAD
                    ,'NOM_PROV'                    ||','||TO_CHAR(SPROV.NOM_PROV)                      NOM_PROV
                    ,'COD_ESTADO'                  ||','||TO_CHAR(DSEG.COD_ESTADO)                     COD_ESTADO
                    ,'TIP_ACT_ECONOMICA_VCR'       ||','||TO_CHAR(VSEG.TIP_ACT_ECONOMICA_VCR)          TIP_ACT_ECONOMICA_VCR
                    ,'COD_PAIS_ORIGEN'             ||','||TO_CHAR(VSEG.COD_PAIS_ORIGEN)                COD_PAIS_ORIGEN
                    ,'COD_BANCO'                   ||','||TO_CHAR(DSEG.COD_ENTIDAD)                    COD_BANCO
                    ,'COD_AGENCIA'                 ||','||TO_CHAR(DSEG.COD_OFICINA)                    COD_AGENCIA
                    ,'COD_CONTA_CORRENTE'          ||','||TO_CHAR(DSEG.CTA_CTE)                        COD_CONTA_CORRENTE
                    ,'COD_DIG_CORRENTE'            ||','||TO_CHAR(DSEG.CTA_DC)                         COD_DIG_CORRENTE
                    ,'TXT_AUX4'                    ||','||TO_CHAR(DSEG.TXT_AUX4)                       TXT_AUX4
                    ,'TXT_AUX9'                    ||','||TO_CHAR(DSEG.TXT_AUX9)                       TXT_AUX9
               FROM tron2000.p2000030 cot
               LEFT OUTER JOIN tron2000.p2000060 seg ON (    seg.num_poliza    = cot.num_poliza
                                                         AND seg.num_spto      = cot.num_spto
                                                         AND seg.num_apli      = cot.num_apli
                                                         AND seg.num_spto_apli = cot.num_spto_apli
                                                         AND seg.tip_benef     = em.TIP_BENEF_ASEGURADO
                                                         AND seg.mca_baja      = trn.NO
                                                         AND seg.mca_vigente   = trn.SI
                                                         AND seg.cod_cia       = cot.cod_cia)
               LEFT OUTER JOIN tron2000.a1001331 dseg ON (    dseg.tip_docum    = seg.tip_docum
                                                          AND dseg.cod_docum    = seg.cod_docum
                                                          AND dseg.cod_act_tercero = dc.ACT_ASEGURADO
                                                          AND dseg.cod_cia      = seg.cod_cia)
               LEFT OUTER JOIN tron2000.a1001331_vcr vseg ON (    vseg.tip_docum    = seg.tip_docum
                                                              AND vseg.cod_docum    = seg.cod_docum
                                                              AND vseg.cod_act_tercero = dc.ACT_ASEGURADO
                                                              AND vseg.cod_cia      = seg.cod_cia)
               LEFT OUTER JOIN tron2000.v1001390_vcr nseg ON (    nseg.tip_docum    = seg.tip_docum
                                                              AND nseg.cod_docum    = seg.cod_docum
                                                              AND nseg.cod_act_tercero = dc.ACT_ASEGURADO
                                                              AND nseg.cod_cia      = seg.cod_cia)
               LEFT OUTER JOIN tron2000.a1000100 sprov ON (    sprov.cod_pais    = 'BRA'
                                                           AND TRUNC(sprov.cod_estado) = dseg.cod_estado
                                                           AND TRUNC(sprov.cod_prov)   = dseg.cod_prov)
              WHERE cot.cod_cia         = p_cod_cia
                AND cot.cod_ramo        = p_cod_ramo
                AND cot.num_poliza      = p_num_poliza
                AND cot.num_presupuesto = p_num_cotizacion
                AND cot.num_apli        = trn.CERO)
              UNPIVOT
              (VALUE FOR value_type IN (TIP_DOCUM
                                       ,COD_DOCUM
                                       ,MCA_FISICO
                                       ,NOM_TERCERO
                                       ,MCA_SEXO
                                       ,FEC_NACIMIENTO
                                       ,COD_EST_CIVIL
                                       ,COD_NACIONALIDAD
                                       ,COD_PROFESION
                                       ,COD_FAIXA_RENDA
                                       ,TEL_SEG_CEL
                                       ,TLF_NUMERO
                                       ,TXT_AUX7
                                       ,EMAIL
                                       ,TIP_DOCUM_SUSEP
                                       ,COD_DOCUM_SUSEP
                                       ,TIP_ORG_EXPEDICION
                                       ,FEC_EXPEDICION
                                       ,COD_POSTAL
                                       ,NOM_DOMICILIO1
                                       ,NUM_APARTADO
                                       ,NOM_DOMICILIO2
                                       ,NOM_LOCALIDAD
                                       ,NOM_PROV
                                       ,COD_ESTADO
                                       ,TIP_ACT_ECONOMICA_VCR
                                       ,COD_PAIS_ORIGEN
                                       ,COD_BANCO
                                       ,COD_AGENCIA
                                       ,COD_CONTA_CORRENTE
                                       ,COD_DIG_CORRENTE
                                       ,TXT_AUX4
                                       ,TXT_AUX9));
     --
     CURSOR c_seg_cond_a IS
     SELECT VALUE
       FROM (SELECT 'TIP_DOCUM'                   ||','||TO_CHAR(SEG.TIP_DOCUM)                        TIP_DOCUM
                   ,'COD_DOCUM'                   ||','||TO_CHAR(SEG.COD_DOCUM)                        COD_DOCUM
                   ,'MCA_FISICO'                  ||','||TO_CHAR(DECODE(SEG.TIP_DOCUM,'CPF','S','N'))  MCA_FISICO
                   ,'NOM_TERCERO'                 ||','||TO_CHAR(SUBSTR(NSEG.NOM_COMPLETO,1,80))       NOM_TERCERO
                   ,'MCA_SEXO'                    ||','||TO_CHAR(DSEG.MCA_SEXO)                        MCA_SEXO
                   ,'FEC_NACIMIENTO'              ||','||TO_CHAR(DSEG.FEC_NACIMIENTO, 'DDMMYYYY')      FEC_NACIMIENTO
                   ,'COD_EST_CIVIL'               ||','||TO_CHAR(DSEG.COD_EST_CIVIL)                   COD_EST_CIVIL
                   ,'COD_NACIONALIDAD'            ||','||TO_CHAR(DSEG.COD_NACIONALIDAD)                COD_NACIONALIDAD
                   ,'COD_PROFESION'               ||','||TO_CHAR(DSEG.COD_PROFESION)                   COD_PROFESION
                   ,'COD_FAIXA_RENDA'             ||','||TO_CHAR(VSEG.COD_FAIXA_RENDA)                 COD_FAIXA_RENDA
                   ,'TEL_SEG_CEL'                 ||','||TO_CHAR(VSEG.TEL_SEG_CEL)                     TEL_SEG_CEL
                   ,'TLF_NUMERO'                  ||','||NVL(TO_CHAR(DOCS.TLF_ZONA||DOCS.TLF_NUMERO),
                                                             TO_CHAR(DSEG.TLF_ZONA||DSEG.TLF_NUMERO))  TLF_NUMERO
                   ,'TXT_AUX7'                    ||','||TO_CHAR(DSEG.TXT_AUX6||DSEG.TXT_AUX7)         TXT_AUX7
                   ,'EMAIL'                       ||','||NVL(TO_CHAR(DSEG.EMAIL),TO_CHAR(DOCS.EMAIL))  EMAIL
                   ,'TIP_DOCUM_SUSEP'             ||','||TO_CHAR(VSEG.TIP_DOCUM_SUSEP)                 TIP_DOCUM_SUSEP
                   ,'COD_DOCUM_SUSEP'             ||','||TO_CHAR(VSEG.COD_DOCUM_SUSEP)                 COD_DOCUM_SUSEP
                   ,'TIP_ORG_EXPEDICION'          ||','||TO_CHAR(VSEG.TIP_ORG_EXPEDICION)              TIP_ORG_EXPEDICION
                   ,'FEC_EXPEDICION'              ||','||TO_CHAR(VSEG.FEC_EXPEDICION, 'DDMMYYYY')      FEC_EXPEDICION
                   ,'COD_POSTAL'                  ||','||NVL(TO_CHAR(DOCS.COD_POSTAL),
                                                             TO_CHAR(DSEG.COD_POSTAL))                 COD_POSTAL
                   ,'NOM_DOMICILIO1'              ||','||NVL(TO_CHAR(DOCS.NOM_DOMICILIO1),
                                                             TO_CHAR(DSEG.NOM_DOMICILIO1))             NOM_DOMICILIO1
                   ,'NUM_APARTADO'                ||','||NVL(TO_CHAR(DOCS.NUM_APARTADO),
                                                             TO_CHAR(DSEG.NUM_APARTADO))               NUM_APARTADO
                   ,'NOM_DOMICILIO2'              ||','||NVL(TO_CHAR(DOCS.NOM_DOMICILIO3),                            --v1.74
                                                             TO_CHAR(DSEG.NOM_DOMICILIO3))             NOM_DOMICILIO2 --v1.74
                   ,'NOM_LOCALIDAD'               ||','||NVL(TO_CHAR(DOCS.NOM_LOCALIDAD),
                                                             TO_CHAR(DSEG.NOM_LOCALIDAD))              NOM_LOCALIDAD
                   ,'NOM_PROV'                    ||','||NVL(TO_CHAR(DPROV.NOM_PROV),
                                                             TO_CHAR(SPROV.NOM_PROV))                  NOM_PROV
                   ,'COD_ESTADO'                  ||','||NVL(TO_CHAR(DOCS.COD_ESTADO),
                                                             TO_CHAR(DSEG.COD_ESTADO))                 COD_ESTADO
                   ,'TIP_ACT_ECONOMICA_VCR'       ||','||TO_CHAR(VSEG.TIP_ACT_ECONOMICA_VCR)           TIP_ACT_ECONOMICA_VCR
                   ,'COD_PAIS_ORIGEN'             ||','||TO_CHAR(VSEG.COD_PAIS_ORIGEN)                 COD_PAIS_ORIGEN
                   ,'COD_BANCO'                   ||','||NVL(TO_CHAR(DOCS.COD_ENTIDAD),
                                                             TO_CHAR(DSEG.COD_ENTIDAD))                COD_BANCO
                   ,'COD_AGENCIA'                 ||','||NVL(TO_CHAR(DOCS.COD_OFICINA),
                                                             TO_CHAR(DSEG.COD_OFICINA))                COD_AGENCIA
                   ,'COD_CONTA_CORRENTE'          ||','||NVL(TO_CHAR(DOCS.CTA_CTE),
                                                             TO_CHAR(DSEG.CTA_CTE))                    COD_CONTA_CORRENTE
                   ,'COD_DIG_CORRENTE'            ||','||NVL(TO_CHAR(DOCS.CTA_DC),
                                                             TO_CHAR(DSEG.CTA_DC))                     COD_DIG_CORRENTE
                   ,'TXT_AUX4'                    ||','||TO_CHAR(DSEG.TXT_AUX4)                        TXT_AUX4
                   ,'TXT_AUX9'                    ||','||TO_CHAR(DSEG.TXT_AUX9)                        TXT_AUX9
              FROM tron2000.a2000030 cot
              LEFT OUTER JOIN tron2000.a2000060 seg ON (    seg.num_poliza    = cot.num_poliza
                                                        AND seg.num_apli      = cot.num_apli
                                                        AND seg.num_spto_apli = cot.num_spto_apli
                                                        AND seg.tip_benef     = em.TIP_BENEF_ASEGURADO
                                                        AND seg.mca_baja      = trn.NO
                                                        AND seg.mca_vigente   = trn.SI
                                                        AND seg.cod_cia       = cot.cod_cia)
              LEFT OUTER JOIN tron2000.A1000802 docs ON (    docs.num_poliza    = seg.num_poliza
                                                         AND docs.num_spto      = seg.num_spto
                                                         AND docs.tip_docum     = seg.tip_docum
                                                         AND docs.cod_docum     = seg.cod_docum
                                                         AND docs.cod_cia       = seg.cod_cia)
              LEFT OUTER JOIN tron2000.a1000100 dprov ON (    dprov.cod_pais    = 'BRA'
                                                          AND TRUNC(dprov.cod_estado) = docs.cod_estado
                                                          AND TRUNC(dprov.cod_prov)   = docs.cod_prov)
              LEFT OUTER JOIN tron2000.a1001331 dseg ON (    dseg.tip_docum    = seg.tip_docum
                                                         AND dseg.cod_docum    = seg.cod_docum
                                                         AND dseg.cod_act_tercero = dc.ACT_ASEGURADO
                                                         AND dseg.cod_cia      = seg.cod_cia)
              LEFT OUTER JOIN tron2000.a1000100 sprov ON (    sprov.cod_pais    = 'BRA'
                                                          AND TRUNC(sprov.cod_estado) = dseg.cod_estado
                                                          AND TRUNC(sprov.cod_prov)   = dseg.cod_prov)
              LEFT OUTER JOIN tron2000.a1001331_vcr vseg ON (    vseg.tip_docum    = seg.tip_docum
                                                             AND vseg.cod_docum    = seg.cod_docum
                                                             AND vseg.cod_act_tercero = dc.ACT_ASEGURADO
                                                             AND vseg.cod_cia      = seg.cod_cia)
              LEFT OUTER JOIN tron2000.v1001390_vcr nseg ON (    nseg.tip_docum    = seg.tip_docum
                                                             AND nseg.cod_docum    = seg.cod_docum
                                                             AND nseg.cod_act_tercero = dc.ACT_ASEGURADO
                                                             AND nseg.cod_cia      = seg.cod_cia)
             WHERE cot.cod_cia         = p_cod_cia
               AND cot.cod_ramo        = p_cod_ramo
               AND cot.num_poliza      = p_num_poliza
               AND cot.num_presupuesto = p_num_cotizacion
               AND cot.num_apli        = trn.CERO)
             UNPIVOT
             (VALUE FOR value_type IN (TIP_DOCUM
                                      ,COD_DOCUM
                                      ,MCA_FISICO
                                      ,NOM_TERCERO
                                      ,MCA_SEXO
                                      ,FEC_NACIMIENTO
                                      ,COD_EST_CIVIL
                                      ,COD_NACIONALIDAD
                                      ,COD_PROFESION
                                      ,COD_FAIXA_RENDA
                                      ,TEL_SEG_CEL
                                      ,TLF_NUMERO
                                      ,TXT_AUX7
                                      ,EMAIL
                                      ,TIP_DOCUM_SUSEP
                                      ,COD_DOCUM_SUSEP
                                      ,TIP_ORG_EXPEDICION
                                      ,FEC_EXPEDICION
                                      ,COD_POSTAL
                                      ,NOM_DOMICILIO1
                                      ,NUM_APARTADO
                                      ,NOM_DOMICILIO2
                                      ,NOM_LOCALIDAD
                                      ,NOM_PROV
                                      ,COD_ESTADO
                                      ,TIP_ACT_ECONOMICA_VCR
                                      ,COD_PAIS_ORIGEN
                                      ,COD_BANCO
                                      ,COD_AGENCIA
                                      ,COD_CONTA_CORRENTE
                                      ,COD_DIG_CORRENTE
                                      ,TXT_AUX4
                                      ,TXT_AUX9));
     --
     l_seg_cond_p       c_seg_cond_p%ROWTYPE;
     l_seg_cond_a       c_seg_cond_a%ROWTYPE;
     --
   BEGIN
      --
      mx('I', 'pp_gera_segurado');
      --
      IF  c_seg_cond_a%ISOPEN THEN
        --
        CLOSE c_seg_cond_a;
        --
      END IF;
      --
      OPEN  c_seg_cond_a;
      --
      LOOP
        --
        FETCH c_seg_cond_a INTO l_seg_cond_a;
        EXIT WHEN c_seg_cond_a%NOTFOUND;
        --
        g_cot_reg.cod_campo := SUBSTR(l_seg_cond_a.value, trn.UNO, INSTR(l_seg_cond_a.value,',') - trn.UNO);
        g_cot_reg.val_campo := SUBSTR(l_seg_cond_a.value, (INSTR(l_seg_cond_a.value,',') + trn.UNO));
        --
        g_cot_dados.EXTEND(1);
        g_cot_dados(g_cot_dados.LAST) := g_cot_reg;
        --
      END LOOP;
      --
      CLOSE c_seg_cond_a;
      --
      IF  c_seg_cond_p%ISOPEN THEN
        --
        CLOSE c_seg_cond_p;
        --
      END IF;
      --
      OPEN  c_seg_cond_p;
      --
      LOOP
        --
        FETCH c_seg_cond_p INTO l_seg_cond_p;
        EXIT WHEN c_seg_cond_p%NOTFOUND;
        --
        g_cot_reg.cod_campo := SUBSTR(l_seg_cond_p.value, trn.UNO, INSTR(l_seg_cond_p.value,',') - trn.UNO);
        g_cot_reg.val_campo := SUBSTR(l_seg_cond_p.value, (INSTR(l_seg_cond_p.value,',') + trn.UNO));
        --
        g_cot_dados.EXTEND(1);
        g_cot_dados(g_cot_dados.LAST) := g_cot_reg;
        --
      END LOOP;
      --
      CLOSE c_seg_cond_p;
      --
      mx('F', 'pp_gera_segurado');
      --
      EXCEPTION
       WHEN OTHERS THEN
         --
         g_cod_mensaje    := g_k_cod_error_gen;
         g_anx_mensaje    := SQLERRM;
         --
         mx('F', 'pp_gera_segurado - EXCEPTION');
         --
         pp_devuelve_error;
         --
   END pp_gera_segurado;
   --
   /* ------------------------------------------------------
   || pp_gera_condutor
   */ ------------------------------------------------------
   PROCEDURE pp_gera_condutor(p_cod_cia          IN  a2000030.cod_cia         %TYPE,
                              p_cod_ramo         IN  a2000030.cod_ramo        %TYPE,
                              p_cod_tarifa       IN  g9999992.cod_tarifa      %TYPE,
                              p_cod_agt          IN  g9999992.cod_agt         %TYPE,
                              p_num_poliza       IN  a2000030.num_poliza      %TYPE,
                              p_num_cotizacion   IN  a2000030.num_presupuesto %TYPE,
                              p_tip_mvto_batch   IN  a2000500.tip_mvto_batch  %TYPE,
                              p_xml_in           IN                            CLOB,
                              p_xml             OUT                            CLOB)
   IS
      --
      CURSOR c_seg_cond_p IS
      SELECT VALUE
        FROM (SELECT 'TIP_DOCUM_CONDUCTOR'         ||','||TO_CHAR(COND.TIP_DOCUM)                      TIP_DOCUM_CONDUCTOR
                    ,'COD_DOCUM_CONDUCTOR'         ||','||TO_CHAR(COND.COD_DOCUM)                      COD_DOCUM_CONDUCTOR
                    ,'NOM_TERCERO_CONDUCTOR'       ||','||TO_CHAR(SUBSTR(NCOND.NOM_COMPLETO,1,80))     NOM_TERCERO_CONDUCTOR
                    ,'FEC_NACIMIENTO_CONDUCTOR'    ||','||TO_CHAR(DCON.FEC_NACIMIENTO, 'DDMMYYYY')     FEC_NACIMIENTO_CONDUCTOR
                    ,'MCA_SEXO_CONDUCTOR'          ||','||TO_CHAR(DCON.MCA_SEXO)                       MCA_SEXO_CONDUCTOR
                    ,'COD_EST_CIVIL_CONDUCTOR'     ||','||TO_CHAR(DCON.COD_EST_CIVIL)                  COD_EST_CIVIL_CONDUCTOR
                    ,'COD_PROFESION_CONDUCTOR'     ||','||TO_CHAR(DCON.COD_PROFESION)                  COD_PROFESION_CONDUCTOR
                    ,'NOM_DOMICILIO1_CONDUCTOR'    ||','||TO_CHAR(DCON.NOM_DOMICILIO1)                 NOM_DOMICILIO1_CONDUCTOR
                    ,'COD_BANCO_CONDUCTOR'         ||','||TO_CHAR(DCON.COD_ENTIDAD)                    COD_BANCO_CONDUCTOR
                    ,'COD_AGENCIA_CONDUCTOR'       ||','||TO_CHAR(DCON.COD_OFICINA)                    COD_AGENCIA_CONDUCTOR
                    ,'COD_CONTA_CORRENTE_CONDUCTOR'||','||TO_CHAR(DCON.CTA_CTE)                        COD_CONTA_CORRENTE_CONDUCTOR
                    ,'COD_DIG_CORRENTE_CONDUCTOR'  ||','||TO_CHAR(DCON.CTA_DC)                         COD_DIG_CORRENTE_CONDUCTOR
                    ,'TXT_AUX4_CONDUCTOR'          ||','||TO_CHAR(DCON.TXT_AUX4)                       TXT_AUX4_CONDUCTOR
                    ,'TXT_AUX9_CONDUCTOR'          ||','||TO_CHAR(DCON.TXT_AUX9)                       TXT_AUX9_CONDUCTOR
               FROM tron2000.p2000030 cot
               LEFT OUTER JOIN tron2000.p2000060 cond ON (    cond.num_poliza    = cot.num_poliza
                                                          AND cond.num_spto      = cot.num_spto
                                                          AND cond.num_apli      = cot.num_apli
                                                          AND cond.num_spto_apli = cot.num_spto_apli
                                                          AND cond.tip_benef     = em.TIP_BENEF_CONDUCTOR
                                                          AND cond.mca_baja      = trn.NO
                                                          AND cond.mca_vigente   = trn.SI
                                                          AND cond.cod_cia       = cot.cod_cia)
               LEFT OUTER JOIN tron2000.a1001331 dcon ON (    dcon.tip_docum    = cond.tip_docum
                                                          AND dcon.cod_docum    = cond.cod_docum
                                                          AND dcon.cod_act_tercero = 1
                                                          AND dcon.cod_cia      = cond.cod_cia)
               LEFT OUTER JOIN tron2000.a1001331_vcr vcon ON (    vcon.tip_docum    = cond.tip_docum
                                                              AND vcon.cod_docum    = cond.cod_docum
                                                              AND vcon.cod_act_tercero = dc.ACT_ASEGURADO
                                                              AND vcon.cod_cia      = cond.cod_cia)
               LEFT OUTER JOIN tron2000.v1001390_vcr ncond ON (    ncond.tip_docum    = cond.tip_docum
                                                               AND ncond.cod_docum    = cond.cod_docum
                                                               AND ncond.cod_act_tercero = dc.ACT_ASEGURADO
                                                               AND ncond.cod_cia      = cond.cod_cia)
              WHERE cot.cod_cia         = p_cod_cia
                AND cot.cod_ramo        = p_cod_ramo
                AND cot.num_poliza      = p_num_poliza
                AND cot.num_presupuesto = p_num_cotizacion
                AND cot.num_apli        = trn.CERO)
              UNPIVOT
              (VALUE FOR value_type IN (TIP_DOCUM_CONDUCTOR
                                       ,COD_DOCUM_CONDUCTOR
                                       ,NOM_TERCERO_CONDUCTOR
                                       ,FEC_NACIMIENTO_CONDUCTOR
                                       ,MCA_SEXO_CONDUCTOR
                                       ,COD_EST_CIVIL_CONDUCTOR
                                       ,COD_PROFESION_CONDUCTOR
                                       ,NOM_DOMICILIO1_CONDUCTOR
                                       ,COD_BANCO_CONDUCTOR
                                       ,COD_AGENCIA_CONDUCTOR
                                       ,COD_CONTA_CORRENTE_CONDUCTOR
                                       ,COD_DIG_CORRENTE_CONDUCTOR
                                       ,TXT_AUX4_CONDUCTOR
                                       ,TXT_AUX9_CONDUCTOR));
     --
     CURSOR c_seg_cond_a IS
     SELECT VALUE
       FROM (SELECT 'TIP_DOCUM_CONDUCTOR'         ||','||TO_CHAR(COND.TIP_DOCUM)                       TIP_DOCUM_CONDUCTOR
                   ,'COD_DOCUM_CONDUCTOR'         ||','||TO_CHAR(COND.COD_DOCUM)                       COD_DOCUM_CONDUCTOR
                   ,'NOM_TERCERO_CONDUCTOR'       ||','||TO_CHAR(SUBSTR(NCOND.NOM_COMPLETO,1,80))      NOM_TERCERO_CONDUCTOR
                   ,'FEC_NACIMIENTO_CONDUCTOR'    ||','||TO_CHAR(DCON.FEC_NACIMIENTO, 'DDMMYYYY')      FEC_NACIMIENTO_CONDUCTOR
                   ,'MCA_SEXO_CONDUCTOR'          ||','||TO_CHAR(DCON.MCA_SEXO)                        MCA_SEXO_CONDUCTOR
                   ,'COD_EST_CIVIL_CONDUCTOR'     ||','||TO_CHAR(DCON.COD_EST_CIVIL)                   COD_EST_CIVIL_CONDUCTOR
                   ,'COD_PROFESION_CONDUCTOR'     ||','||TO_CHAR(DCON.COD_PROFESION)                   COD_PROFESION_CONDUCTOR
                   ,'NOM_DOMICILIO1_CONDUCTOR'    ||','||TO_CHAR(DCON.NOM_DOMICILIO1)                  NOM_DOMICILIO1_CONDUCTOR
                   ,'COD_BANCO_CONDUCTOR'         ||','||NVL(TO_CHAR(DOCC.COD_ENTIDAD),
                                                             TO_CHAR(DCON.COD_ENTIDAD))                COD_BANCO_CONDUCTOR
                   ,'COD_AGENCIA_CONDUCTOR'       ||','||NVL(TO_CHAR(DOCC.COD_OFICINA),
                                                             TO_CHAR(DCON.COD_OFICINA))                COD_AGENCIA_CONDUCTOR
                   ,'COD_CONTA_CORRENTE_CONDUCTOR'||','||NVL(TO_CHAR(DOCC.CTA_CTE),
                                                             TO_CHAR(DCON.CTA_CTE))                    COD_CONTA_CORRENTE_CONDUCTOR
                   ,'COD_DIG_CORRENTE_CONDUCTOR'  ||','||NVL(TO_CHAR(DOCC.CTA_DC),
                                                             TO_CHAR(DCON.CTA_DC))                     COD_DIG_CORRENTE_CONDUCTOR
                   ,'TXT_AUX4_CONDUCTOR'          ||','||TO_CHAR(DCON.TXT_AUX4)                        TXT_AUX4_CONDUCTOR
                   ,'TXT_AUX9_CONDUCTOR'          ||','||TO_CHAR(DCON.TXT_AUX9)                        TXT_AUX9_CONDUCTOR
              FROM tron2000.a2000030 cot
              LEFT OUTER JOIN tron2000.a2000060 cond ON (    cond.num_poliza    = cot.num_poliza
                                                         AND cond.num_apli      = cot.num_apli
                                                         AND cond.num_spto_apli = cot.num_spto_apli
                                                         AND cond.tip_benef     = em.TIP_BENEF_CONDUCTOR
                                                         AND cond.mca_baja      = trn.NO
                                                         AND cond.mca_vigente   = trn.SI
                                                         AND cond.cod_cia       = cot.cod_cia)
              LEFT OUTER JOIN tron2000.A1000802 docc ON (    docc.num_poliza    = cond.num_poliza
                                                         AND docc.num_spto      = cond.num_spto
                                                         AND docc.tip_docum     = cond.tip_docum
                                                         AND docc.cod_docum     = cond.cod_docum
                                                         AND docc.cod_cia       = cond.cod_cia)
              LEFT OUTER JOIN tron2000.a1001331 dcon ON (    dcon.tip_docum    = cond.tip_docum
                                                         AND dcon.cod_docum    = cond.cod_docum
                                                         AND dcon.cod_act_tercero = dc.ACT_ASEGURADO
                                                         AND dcon.cod_cia      = cond.cod_cia)
              LEFT OUTER JOIN tron2000.a1001331_vcr vcon ON (    vcon.tip_docum    = cond.tip_docum
                                                             AND vcon.cod_docum    = cond.cod_docum
                                                             AND vcon.cod_act_tercero = dc.ACT_ASEGURADO
                                                             AND vcon.cod_cia      = cond.cod_cia)
              LEFT OUTER JOIN tron2000.v1001390_vcr ncond ON (    ncond.tip_docum    = cond.tip_docum
                                                              AND ncond.cod_docum    = cond.cod_docum
                                                              AND ncond.cod_act_tercero = dc.ACT_ASEGURADO
                                                              AND ncond.cod_cia      = cond.cod_cia)
             WHERE cot.cod_cia         = p_cod_cia
               AND cot.cod_ramo        = p_cod_ramo
               AND cot.num_poliza      = p_num_poliza
               AND cot.num_presupuesto = p_num_cotizacion
               AND cot.num_apli        = trn.CERO)
             UNPIVOT
             (VALUE FOR value_type IN (TIP_DOCUM_CONDUCTOR
                                      ,COD_DOCUM_CONDUCTOR
                                      ,NOM_TERCERO_CONDUCTOR
                                      ,FEC_NACIMIENTO_CONDUCTOR
                                      ,MCA_SEXO_CONDUCTOR
                                      ,COD_EST_CIVIL_CONDUCTOR
                                      ,COD_PROFESION_CONDUCTOR
                                      ,NOM_DOMICILIO1_CONDUCTOR
                                      ,COD_BANCO_CONDUCTOR
                                      ,COD_AGENCIA_CONDUCTOR
                                      ,COD_CONTA_CORRENTE_CONDUCTOR
                                      ,COD_DIG_CORRENTE_CONDUCTOR
                                      ,TXT_AUX4_CONDUCTOR
                                      ,TXT_AUX9_CONDUCTOR));
     --
     l_seg_cond_p       c_seg_cond_p%ROWTYPE;
     l_seg_cond_a       c_seg_cond_a%ROWTYPE;
     --
   BEGIN
      --
      mx('I', 'pp_gera_condutor');
      --
      IF  c_seg_cond_a%ISOPEN THEN
        --
        CLOSE c_seg_cond_a;
        --
      END IF;
      --
      OPEN  c_seg_cond_a;
      --
      LOOP
        --
        FETCH c_seg_cond_a INTO l_seg_cond_a;
        EXIT WHEN c_seg_cond_a%NOTFOUND;
        --
        g_cot_reg.cod_campo := SUBSTR(l_seg_cond_a.value, trn.UNO, INSTR(l_seg_cond_a.value,',') - trn.UNO);
        g_cot_reg.val_campo := SUBSTR(l_seg_cond_a.value, (INSTR(l_seg_cond_a.value,',') + trn.UNO));
        --
        g_cot_dados.EXTEND(1);
        g_cot_dados(g_cot_dados.LAST) := g_cot_reg;
        --
      END LOOP;
      --
      CLOSE c_seg_cond_a;
      --
      IF  c_seg_cond_p%ISOPEN THEN
        --
        CLOSE c_seg_cond_p;
        --
      END IF;
      --
      OPEN  c_seg_cond_p;
      --
      LOOP
        --
        FETCH c_seg_cond_p INTO l_seg_cond_p;
        EXIT WHEN c_seg_cond_p%NOTFOUND;
        --
        g_cot_reg.cod_campo := SUBSTR(l_seg_cond_p.value, trn.UNO, INSTR(l_seg_cond_p.value,',') - trn.UNO);
        g_cot_reg.val_campo := SUBSTR(l_seg_cond_p.value, (INSTR(l_seg_cond_p.value,',') + trn.UNO));
        --
        g_cot_dados.EXTEND(1);
        g_cot_dados(g_cot_dados.LAST) := g_cot_reg;
        --
      END LOOP;
      --
      CLOSE c_seg_cond_p;
      --
      mx('F', 'pp_gera_condutor');
      --
      EXCEPTION
       WHEN OTHERS THEN
         --
         g_cod_mensaje    := g_k_cod_error_gen;
         g_anx_mensaje    := SQLERRM;
         --
         mx('F', 'pp_gera_condutor - EXCEPTION');
         --
         pp_devuelve_error;
         --
   END pp_gera_condutor;
   --
   /* ------------------------------------------------------
   || pp_gera_resp_pagamento
   */ ------------------------------------------------------
   PROCEDURE pp_gera_resp_pagamento(p_cod_cia          IN  a2000030.cod_cia         %TYPE,
                                    p_cod_ramo         IN  a2000030.cod_ramo        %TYPE,
                                    p_cod_tarifa       IN  g9999992.cod_tarifa      %TYPE,
                                    p_cod_agt          IN  g9999992.cod_agt         %TYPE,
                                    p_num_poliza       IN  a2000030.num_poliza      %TYPE,
                                    p_num_cotizacion   IN  a2000030.num_presupuesto %TYPE,
                                    p_tip_mvto_batch   IN  a2000500.tip_mvto_batch  %TYPE,
                                    p_xml_in           IN                            CLOB,
                                    p_xml             OUT                            CLOB)
   IS
     --
     CURSOR c_resp_pagto_p IS
     SELECT VALUE
       FROM (SELECT 'NUM_POLIZA'                ||','||TO_CHAR(COT.NUM_POLIZA)                    NUM_POLIZA
                   ,'NUM_SPTO'                  ||','||TO_CHAR(COT.NUM_SPTO)                      NUM_SPTO
                   ,'TIP_DURACION'              ||','||TO_CHAR(COT.TIP_DURACION)                  TIP_DURACION
                   ,'FEC_EFEC_POLIZA'           ||','||TO_CHAR(COT.FEC_EFEC_POLIZA, 'DDMMYYYY')   FEC_EFEC_POLIZA
                   ,'FEC_VCTO_POLIZA'           ||','||TO_CHAR(COT.FEC_VCTO_POLIZA, 'DDMMYYYY')   FEC_VCTO_POLIZA
                   ,'FEC_EFEC_SPTO'             ||','||TO_CHAR(COT.FEC_EFEC_SPTO, 'DDMMYYYY')     FEC_EFEC_SPTO
                   ,'FEC_VCTO_SPTO'             ||','||TO_CHAR(COT.FEC_VCTO_SPTO, 'DDMMYYYY')     FEC_VCTO_SPTO
                   ,'FEC_EMISION'               ||','||TO_CHAR(COT.FEC_EMISION_SPTO, 'DDMMYYYY')  FEC_EMISION
                   ,'TIP_DOCUM_RESP'            ||','||TO_CHAR(COT.TIP_DOCUM)                     TIP_DOCUM_RESP
                   ,'COD_DOCUM_RESP'            ||','||TO_CHAR(COT.COD_DOCUM)                     COD_DOCUM_RESP
                   ,'NOM_TERCERO_RESP'          ||','||TO_CHAR(SUBSTR(NRESP.NOM_COMPLETO,1,80))   NOM_TERCERO_RESP
                   ,'FEC_NACIMIENTO_RESP'       ||','||TO_CHAR(RESP.FEC_NACIMIENTO, 'DDMMYYYY')   FEC_NACIMIENTO_RESP
                   ,'MCA_SEXO_RESP'             ||','||TO_CHAR(RESP.MCA_SEXO)                     MCA_SEXO_RESP
                   ,'COD_EST_CIVIL_RESP'        ||','||TO_CHAR(RESP.COD_EST_CIVIL)                COD_EST_CIVIL_RESP
                   ,'COD_PROFESION_RESP'        ||','||TO_CHAR(RESP.COD_PROFESION)                COD_PROFESION_RESP
                   ,'COD_NACIONALIDAD_RESP'     ||','||TO_CHAR(RESP.COD_NACIONALIDAD)             COD_NACIONALIDAD_RESP
                   ,'TEL_SEG_CEL_RESP'          ||','||TO_CHAR(VRESP.TEL_SEG_CEL)                 TEL_SEG_CEL_RESP
                   ,'TLF_NUMERO_RESP'           ||','||TO_CHAR(RESP.TLF_ZONA||RESP.TLF_NUMERO)    TLF_NUMERO_RESP
                   ,'TXT_AUX7_RESP'             ||','||TO_CHAR(RESP.TXT_AUX6||RESP.TXT_AUX7)      TXT_AUX7_RESP
                   ,'EMAIL_RESP'                ||','||TO_CHAR(RESP.EMAIL)                        EMAIL_RESP
                   ,'TIP_DOCUM_SUSEP_RESP'      ||','||TO_CHAR(VRESP.TIP_DOCUM_SUSEP)             TIP_DOCUM_SUSEP_RESP
                   ,'COD_DOCUM_SUSEP_RESP'      ||','||TO_CHAR(VRESP.COD_DOCUM_SUSEP)             COD_DOCUM_SUSEP_RESP
                   ,'TIP_ORG_EXPEDICION_RESP'   ||','||TO_CHAR(VRESP.TIP_ORG_EXPEDICION)          TIP_ORG_EXPEDICION_RESP
                   ,'FEC_EXPEDICION_RESP'       ||','||TO_CHAR(VRESP.FEC_EXPEDICION, 'DDMMYYYY')  FEC_EXPEDICION_RESP
                   ,'COD_POSTAL_RESP'           ||','||TO_CHAR(RESP.COD_POSTAL)                   COD_POSTAL_RESP
                   ,'NOM_DOMICILIO1_RESP'       ||','||TO_CHAR(RESP.NOM_DOMICILIO1)               NOM_DOMICILIO1_RESP
                   ,'NUM_APARTADO_RESP'         ||','||TO_CHAR(RESP.NUM_APARTADO)                 NUM_APARTADO_RESP
                   ,'NOM_DOMICILIO2_RESP'       ||','||TO_CHAR(RESP.NOM_DOMICILIO3)               NOM_DOMICILIO2_RESP --v1.74
                   ,'NOM_LOCALIDAD_RESP'        ||','||TO_CHAR(RESP.NOM_LOCALIDAD)                NOM_LOCALIDAD_RESP
                   ,'COD_PROV_RESP'             ||','||TO_CHAR(RESP.COD_PROV)                     COD_PROV_RESP
                   ,'COD_ESTADO_RESP'           ||','||TO_CHAR(RESP.COD_ESTADO)                   COD_ESTADO_RESP
                   ,'TIP_ACT_ECONOMICA_VCR_RESP'||','||TO_CHAR(VRESP.TIP_ACT_ECONOMICA_VCR)       TIP_ACT_ECONOMICA_VCR_RESP
                   ,'COD_PAIS_ORIGEN_RESP'      ||','||TO_CHAR(VRESP.COD_PAIS_ORIGEN)             COD_PAIS_ORIGEN_RESP
                   ,'COD_BANCO_RESP'            ||','||TO_CHAR(RESP.COD_ENTIDAD)                  COD_BANCO_RESP
                   ,'COD_AGENCIA_RESP'          ||','||TO_CHAR(RESP.COD_OFICINA)                  COD_AGENCIA_RESP
                   ,'TXT_AUX9_RESP'             ||','||TO_CHAR(RESP.TXT_AUX9)                     TXT_AUX9_RESP
                   ,'COD_CONTA_CORRENTE_RESP'   ||','||TO_CHAR(RESP.CTA_CTE)                      COD_CONTA_CORRENTE_RESP
                   ,'COD_DIG_CORRENTE_RESP'     ||','||TO_CHAR(RESP.CTA_DC)                       COD_DIG_CORRENTE_RESP
                   ,'TXT_AUX4_RESP'             ||','||TO_CHAR(RESP.TXT_AUX4)                     TXT_AUX4_RESP
                   ,'TXT_MOTIVO_SPTO'           ||','||TO_CHAR(COT.TXT_MOTIVO_SPTO)               TXT_MOTIVO_SPTO
                   ,'NUM_COTIZACION'            ||','||TO_CHAR(COT.NUM_PRESUPUESTO)               NUM_COTIZACION
              FROM tron2000.p2000030 cot
              -- Resp. Pagto
              LEFT OUTER JOIN tron2000.a1001331 resp ON (    resp.tip_docum    = cot.tip_docum
                                                         AND resp.cod_docum    = cot.cod_docum
                                                         AND resp.cod_act_tercero = dc.ACT_ASEGURADO
                                                         AND resp.cod_cia      = cot.cod_cia)
              LEFT OUTER JOIN tron2000.a1001331_vcr vresp ON (    vresp.tip_docum    = cot.tip_docum
                                                              AND vresp.cod_docum    = cot.cod_docum
                                                              AND vresp.cod_act_tercero = dc.ACT_ASEGURADO
                                                             AND vresp.cod_cia      = cot.cod_cia)
              LEFT OUTER JOIN tron2000.v1001390_vcr nresp ON (    nresp.tip_docum    = cot.tip_docum
                                                              AND nresp.cod_docum    = cot.cod_docum
                                                              AND nresp.cod_act_tercero = dc.ACT_ASEGURADO
                                                              AND nresp.cod_cia      = cot.cod_cia)
             WHERE cot.cod_cia         = p_cod_cia
               AND cot.cod_ramo        = p_cod_ramo
               AND cot.num_poliza      = p_num_poliza
               AND cot.num_presupuesto = p_num_cotizacion
               AND cot.num_apli        = trn.CERO)
             UNPIVOT
             (VALUE FOR value_type IN (NUM_POLIZA
                                      ,NUM_SPTO
                                      ,TIP_DURACION
                                      ,FEC_EFEC_POLIZA
                                      ,FEC_VCTO_POLIZA
                                      ,FEC_EFEC_SPTO
                                      ,FEC_VCTO_SPTO
                                      ,FEC_EMISION
                                      ,TIP_DOCUM_RESP
                                      ,COD_DOCUM_RESP
                                      ,NOM_TERCERO_RESP
                                      ,FEC_NACIMIENTO_RESP
                                      ,MCA_SEXO_RESP
                                      ,COD_EST_CIVIL_RESP
                                      ,COD_PROFESION_RESP
                                      ,COD_NACIONALIDAD_RESP
                                      ,TEL_SEG_CEL_RESP
                                      ,TLF_NUMERO_RESP
                                      ,TXT_AUX7_RESP
                                      ,EMAIL_RESP
                                      ,TIP_DOCUM_SUSEP_RESP
                                      ,COD_DOCUM_SUSEP_RESP
                                      ,TIP_ORG_EXPEDICION_RESP
                                      ,FEC_EXPEDICION_RESP
                                      ,COD_POSTAL_RESP
                                      ,NOM_DOMICILIO1_RESP
                                      ,NUM_APARTADO_RESP
                                      ,NOM_DOMICILIO2_RESP
                                      ,NOM_LOCALIDAD_RESP
                                      ,COD_PROV_RESP
                                      ,COD_ESTADO_RESP
                                      ,TIP_ACT_ECONOMICA_VCR_RESP
                                      ,COD_PAIS_ORIGEN_RESP
                                      ,FEC_EMISION
                                      ,COD_BANCO_RESP
                                      ,COD_AGENCIA_RESP
                                      ,TXT_AUX9_RESP
                                      ,COD_CONTA_CORRENTE_RESP
                                      ,COD_DIG_CORRENTE_RESP
                                      ,TXT_AUX4_RESP
                                      ,TXT_MOTIVO_SPTO
                                      ,NUM_COTIZACION));
     --
     CURSOR c_resp_pagto_a IS
     SELECT VALUE
       FROM (SELECT 'NUM_POLIZA'                ||','||TO_CHAR(COT.NUM_POLIZA)                      NUM_POLIZA
                   ,'NUM_SPTO'                  ||','||TO_CHAR(COT.NUM_SPTO)                        NUM_SPTO
                   ,'TIP_DURACION'              ||','||TO_CHAR(COT.TIP_DURACION)                    TIP_DURACION
                   ,'FEC_EFEC_POLIZA'           ||','||TO_CHAR(COT.FEC_EFEC_POLIZA, 'DDMMYYYY')     FEC_EFEC_POLIZA
                   ,'FEC_VCTO_POLIZA'           ||','||TO_CHAR(COT.FEC_VCTO_POLIZA, 'DDMMYYYY')     FEC_VCTO_POLIZA
                   ,'FEC_EFEC_SPTO'             ||','||TO_CHAR(COT.FEC_EFEC_SPTO, 'DDMMYYYY')       FEC_EFEC_SPTO
                   ,'FEC_VCTO_SPTO'             ||','||TO_CHAR(COT.FEC_VCTO_SPTO, 'DDMMYYYY')       FEC_VCTO_SPTO
                   ,'FEC_EMISION'               ||','||TO_CHAR(COT.FEC_EMISION_SPTO, 'DDMMYYYY')    FEC_EMISION
                   ,'TIP_DOCUM_RESP'            ||','||TO_CHAR(COT.TIP_DOCUM)                       TIP_DOCUM_RESP
                   ,'COD_DOCUM_RESP'            ||','||TO_CHAR(COT.COD_DOCUM)                       COD_DOCUM_RESP
                   ,'NOM_TERCERO_RESP'          ||','||TO_CHAR(SUBSTR(NRESP.NOM_COMPLETO,1,80))     NOM_TERCERO_RESP
                   ,'FEC_NACIMIENTO_RESP'       ||','||TO_CHAR(RESP.FEC_NACIMIENTO, 'DDMMYYYY')     FEC_NACIMIENTO_RESP
                   ,'MCA_SEXO_RESP'             ||','||TO_CHAR(RESP.MCA_SEXO)                       MCA_SEXO_RESP
                   ,'COD_EST_CIVIL_RESP'        ||','||TO_CHAR(RESP.COD_EST_CIVIL)                  COD_EST_CIVIL_RESP
                   ,'COD_PROFESION_RESP'        ||','||TO_CHAR(RESP.COD_PROFESION)                  COD_PROFESION_RESP
                   ,'COD_NACIONALIDAD_RESP'     ||','||TO_CHAR(RESP.COD_NACIONALIDAD)               COD_NACIONALIDAD_RESP
                   ,'TEL_SEG_CEL_RESP'          ||','||TO_CHAR(VRESP.TEL_SEG_CEL)                   TEL_SEG_CEL_RESP
                   ,'TLF_NUMERO_RESP'           ||','||NVL(TO_CHAR(DOC.TLF_ZONA||DOC.TLF_NUMERO),
                                                           TO_CHAR(RESP.TLF_ZONA||RESP.TLF_NUMERO)) TLF_NUMERO_RESP
                   ,'TXT_AUX7_RESP'             ||','||TO_CHAR(RESP.TXT_AUX6||RESP.TXT_AUX7)        TXT_AUX7_RESP
                   ,'EMAIL_RESP'                ||','||NVL(TO_CHAR(DOC.EMAIL),TO_CHAR(RESP.EMAIL))  EMAIL_RESP
                   ,'TIP_DOCUM_SUSEP_RESP'      ||','||TO_CHAR(VRESP.TIP_DOCUM_SUSEP)               TIP_DOCUM_SUSEP_RESP
                   ,'COD_DOCUM_SUSEP_RESP'      ||','||TO_CHAR(VRESP.COD_DOCUM_SUSEP)               COD_DOCUM_SUSEP_RESP
                   ,'TIP_ORG_EXPEDICION_RESP'   ||','||TO_CHAR(VRESP.TIP_ORG_EXPEDICION)            TIP_ORG_EXPEDICION_RESP
                   ,'FEC_EXPEDICION_RESP'       ||','||TO_CHAR(VRESP.FEC_EXPEDICION, 'DDMMYYYY')    FEC_EXPEDICION_RESP
                   ,'COD_POSTAL_RESP'           ||','||NVL(TO_CHAR(DOC.COD_POSTAL),
                                                           TO_CHAR(RESP.COD_POSTAL))                COD_POSTAL_RESP
                   ,'NOM_DOMICILIO1_RESP'       ||','||NVL(TO_CHAR(DOC.NOM_DOMICILIO1),
                                                           TO_CHAR(RESP.NOM_DOMICILIO1))            NOM_DOMICILIO1_RESP
                   ,'NUM_APARTADO_RESP'         ||','||NVL(TO_CHAR(DOC.NUM_APARTADO),
                                                           TO_CHAR(RESP.NUM_APARTADO))              NUM_APARTADO_RESP
                   ,'NOM_DOMICILIO2_RESP'       ||','||NVL(TO_CHAR(DOC.NOM_DOMICILIO3),                                 --v1.74
                                                           TO_CHAR(RESP.NOM_DOMICILIO3))            NOM_DOMICILIO2_RESP --v1.74
                   ,'NOM_LOCALIDAD_RESP'        ||','||NVL(TO_CHAR(DOC.NOM_LOCALIDAD),
                                                           TO_CHAR(RESP.NOM_LOCALIDAD))             NOM_LOCALIDAD_RESP
                   ,'COD_PROV_RESP'             ||','||NVL(TO_CHAR(DOC.COD_PROV),
                                                           TO_CHAR(RESP.COD_PROV))                  COD_PROV_RESP
                   ,'COD_ESTADO_RESP'           ||','||NVL(TO_CHAR(DOC.COD_ESTADO),
                                                           TO_CHAR(RESP.COD_ESTADO))                COD_ESTADO_RESP
                   ,'TIP_ACT_ECONOMICA_VCR_RESP'||','||TO_CHAR(VRESP.TIP_ACT_ECONOMICA_VCR)         TIP_ACT_ECONOMICA_VCR_RESP
                   ,'COD_PAIS_ORIGEN_RESP'      ||','||TO_CHAR(VRESP.COD_PAIS_ORIGEN)               COD_PAIS_ORIGEN_RESP
                   ,'COD_BANCO_RESP'            ||','||NVL(TO_CHAR(DOC.COD_ENTIDAD),
                                                           TO_CHAR(RESP.COD_ENTIDAD))               COD_BANCO_RESP
                   ,'COD_AGENCIA_RESP'          ||','||NVL(TO_CHAR(DOC.COD_OFICINA),
                                                           TO_CHAR(RESP.COD_OFICINA))               COD_AGENCIA_RESP
                   ,'TXT_AUX9_RESP'             ||','||TO_CHAR(RESP.TXT_AUX9)                       TXT_AUX9_RESP
                   ,'COD_CONTA_CORRENTE_RESP'   ||','||NVL(TO_CHAR(DOC.CTA_CTE),
                                                           TO_CHAR(RESP.CTA_CTE))                   COD_CONTA_CORRENTE_RESP
                   ,'COD_DIG_CORRENTE_RESP'     ||','||NVL(TO_CHAR(DOC.CTA_DC),
                                                           TO_CHAR(RESP.CTA_DC))                    COD_DIG_CORRENTE_RESP
                   ,'TXT_AUX4_RESP'             ||','||TO_CHAR(RESP.TXT_AUX4)                       TXT_AUX4_RESP
                   ,'TXT_MOTIVO_SPTO'           ||','||TO_CHAR(COT.TXT_MOTIVO_SPTO)                 TXT_MOTIVO_SPTO
                   ,'NUM_COTIZACION'            ||','||TO_CHAR(COT.NUM_PRESUPUESTO)                 NUM_COTIZACION
              FROM a2000030 cot
              -- Resp. Pagto
              LEFT OUTER JOIN tron2000.a1000802 doc ON (    doc.num_poliza    = cot.num_poliza
                                                        AND doc.num_spto      = cot.num_spto
                                                        AND doc.tip_docum     = cot.tip_docum
                                                        AND doc.cod_docum     = cot.cod_docum
                                                        AND doc.cod_cia       = cot.cod_cia)
              LEFT OUTER JOIN tron2000.a1001331 resp ON (    resp.tip_docum    = cot.tip_docum
                                                         AND resp.cod_docum    = cot.cod_docum
                                                         AND resp.cod_act_tercero = dc.ACT_ASEGURADO
                                                         AND resp.cod_cia      = cot.cod_cia)
              LEFT OUTER JOIN tron2000.a1001331_vcr vresp ON (    vresp.tip_docum    = cot.tip_docum
                                                              AND vresp.cod_docum    = cot.cod_docum
                                                              AND vresp.cod_act_tercero = dc.ACT_ASEGURADO
                                                              AND vresp.cod_cia      = cot.cod_cia)
              LEFT OUTER JOIN tron2000.v1001390_vcr nresp ON (    nresp.tip_docum    = cot.tip_docum
                                                              AND nresp.cod_docum    = cot.cod_docum
                                                              AND nresp.cod_act_tercero = dc.ACT_ASEGURADO
                                                              AND nresp.cod_cia      = cot.cod_cia)
             WHERE cot.cod_cia         = p_cod_cia
               AND cot.cod_ramo        = p_cod_ramo
               AND cot.num_poliza      = p_num_poliza
               AND cot.num_presupuesto = p_num_cotizacion
               AND cot.num_apli        = trn.CERO)
             UNPIVOT
             (VALUE FOR value_type IN (NUM_POLIZA
                                      ,NUM_SPTO
                                      ,TIP_DURACION
                                      ,FEC_EFEC_POLIZA
                                      ,FEC_VCTO_POLIZA
                                      ,FEC_EFEC_SPTO
                                      ,FEC_VCTO_SPTO
                                      ,FEC_EMISION
                                      ,TIP_DOCUM_RESP
                                      ,COD_DOCUM_RESP
                                      ,NOM_TERCERO_RESP
                                      ,FEC_NACIMIENTO_RESP
                                      ,MCA_SEXO_RESP
                                      ,COD_EST_CIVIL_RESP
                                      ,COD_PROFESION_RESP
                                      ,COD_NACIONALIDAD_RESP
                                      ,TEL_SEG_CEL_RESP
                                      ,TLF_NUMERO_RESP
                                      ,TXT_AUX7_RESP
                                      ,EMAIL_RESP
                                      ,TIP_DOCUM_SUSEP_RESP
                                      ,COD_DOCUM_SUSEP_RESP
                                      ,TIP_ORG_EXPEDICION_RESP
                                      ,FEC_EXPEDICION_RESP
                                      ,COD_POSTAL_RESP
                                      ,NOM_DOMICILIO1_RESP
                                      ,NUM_APARTADO_RESP
                                      ,NOM_DOMICILIO2_RESP
                                      ,NOM_LOCALIDAD_RESP
                                      ,COD_PROV_RESP
                                      ,COD_ESTADO_RESP
                                      ,TIP_ACT_ECONOMICA_VCR_RESP
                                      ,COD_PAIS_ORIGEN_RESP
                                      ,FEC_EMISION
                                      ,COD_BANCO_RESP
                                      ,COD_AGENCIA_RESP
                                      ,TXT_AUX9_RESP
                                      ,COD_CONTA_CORRENTE_RESP
                                      ,COD_DIG_CORRENTE_RESP
                                      ,TXT_AUX4_RESP
                                      ,TXT_MOTIVO_SPTO
                                      ,NUM_COTIZACION));
     --
     l_resp_pago_p      c_resp_pagto_p%ROWTYPE;
     l_resp_pago_a      c_resp_pagto_a%ROWTYPE;
     --
   BEGIN
      --
      mx('I', 'pp_gera_resp_pagamento');
      --
      IF  c_resp_pagto_a%ISOPEN THEN
        --
        CLOSE c_resp_pagto_a;
        --
      END IF;
      --
      OPEN  c_resp_pagto_a;
      --
      LOOP
        --
        FETCH c_resp_pagto_a INTO l_resp_pago_a;
        EXIT WHEN c_resp_pagto_a%NOTFOUND;
        --
        g_cot_reg.cod_campo := SUBSTR(l_resp_pago_a.value, trn.UNO, INSTR(l_resp_pago_a.value,',') - trn.UNO);
        g_cot_reg.val_campo := SUBSTR(l_resp_pago_a.value, (INSTR(l_resp_pago_a.value,',') + trn.UNO));
        --
        g_cot_dados.EXTEND(1);
        g_cot_dados(g_cot_dados.LAST) := g_cot_reg;
        --
      END LOOP;
      --
      CLOSE c_resp_pagto_a;
      --
      IF  c_resp_pagto_p%ISOPEN THEN
        --
        CLOSE c_resp_pagto_p;
        --
      END IF;
      --
      OPEN  c_resp_pagto_p;
      --
      LOOP
        --
        FETCH c_resp_pagto_p INTO l_resp_pago_p;
        EXIT WHEN c_resp_pagto_p%NOTFOUND;
        --
        g_cot_reg.cod_campo := SUBSTR(l_resp_pago_p.value, trn.UNO, INSTR(l_resp_pago_p.value,',') - trn.UNO);
        g_cot_reg.val_campo := SUBSTR(l_resp_pago_p.value, (INSTR(l_resp_pago_p.value,',') + trn.UNO));
        --
        g_cot_dados.EXTEND(1);
        g_cot_dados(g_cot_dados.LAST) := g_cot_reg;
        --
      END LOOP;
      --
      CLOSE c_resp_pagto_p;
      --
      mx('F', 'pp_gera_resp_pagamento');
      --
      EXCEPTION
       WHEN OTHERS THEN
         --
         g_cod_mensaje    := g_k_cod_error_gen;
         g_anx_mensaje    := SQLERRM;
         --
         mx('F', 'pp_gera_resp_pagamento - EXCEPTION');
         --
         pp_devuelve_error;
         --
   END pp_gera_resp_pagamento;
   --
   /* ------------------------------------------------------
   || pp_gera_demais_terceiros
   */ ------------------------------------------------------
   PROCEDURE pp_gera_demais_terceiros(p_cod_cia          IN  a2000030.cod_cia         %TYPE,
                                      p_cod_ramo         IN  a2000030.cod_ramo        %TYPE,
                                      p_cod_tarifa       IN  g9999992.cod_tarifa      %TYPE,
                                      p_cod_agt          IN  g9999992.cod_agt         %TYPE,
                                      p_num_poliza       IN  a2000030.num_poliza      %TYPE,
                                      p_num_cotizacion   IN  a2000030.num_presupuesto %TYPE,
                                      p_tip_mvto_batch   IN  a2000500.tip_mvto_batch  %TYPE,
                                      p_xml_in           IN                            CLOB,
                                      p_xml             OUT                            CLOB)
   IS
      --
      CURSOR c_dem_ter_p IS
      SELECT VALUE
        FROM (SELECT 'NOM_TERCERO_PROPRI'      ||','||TO_CHAR(SUBSTR(NPROP.NOM_COMPLETO,1,80))  NOM_TERCERO_PROPRI
                    ,'NOM_TERCERO_FINAN'       ||','||TO_CHAR(SUBSTR(NFIN.NOM_COMPLETO,1,80))   NOM_TERCERO_FINAN
                    ,'COD_BANCO_BENEF'         ||','||TO_CHAR(DBENF.COD_ENTIDAD)                COD_BANCO_BENEF
                    ,'COD_AGENCIA_BENEF'       ||','||TO_CHAR(DBENF.COD_OFICINA)                COD_AGENCIA_BENEF
                    ,'TXT_AUX9_BENEF'          ||','||TO_CHAR(DBENF.TXT_AUX9)                   TXT_AUX9_BENEF
                    ,'COD_CONTA_CORRENTE_BENEF'||','||TO_CHAR(DBENF.CTA_CTE)                    COD_CONTA_CORRENTE_BENEF
                    ,'COD_DIG_CORRENTE_BENEF'  ||','||TO_CHAR(DBENF.CTA_DC)                     COD_DIG_CORRENTE_BENEF
                    ,'TXT_AUX4_BENEF'          ||','||TO_CHAR(DBENF.TXT_AUX4)                   TXT_AUX4_BENEF
                    ,'TIP_DOCUM_BENEF'         ||','||TO_CHAR(BENEF.TIP_DOCUM)                  TIP_DOCUM_BENEF
                    ,'COD_DOCUM_BENEF'         ||','||TO_CHAR(BENEF.COD_DOCUM)                  COD_DOCUM_BENEF
               FROM tron2000.p2000030 cot
               -- Proprietario
               LEFT OUTER JOIN tron2000.p2000060 prop ON (    prop.num_poliza    = cot.num_poliza
                                                          AND prop.num_spto      = cot.num_spto
                                                          AND prop.num_apli      = cot.num_apli
                                                          AND prop.num_spto_apli = cot.num_spto_apli
                                                          AND prop.tip_benef     = '4'
                                                          AND prop.mca_baja      = trn.NO
                                                          AND prop.mca_vigente   = trn.SI
                                                          AND prop.cod_cia       = cot.cod_cia)
               LEFT OUTER JOIN tron2000.v1001390_vcr nprop ON (    nprop.tip_docum    = prop.tip_docum
                                                               AND nprop.cod_docum    = prop.cod_docum
                                                               AND nprop.cod_act_tercero = dc.ACT_ASEGURADO
                                                               AND nprop.cod_cia      = prop.cod_cia)
               -- Financeira
               LEFT OUTER JOIN tron2000.p2000060 fin ON (    fin.num_poliza    = cot.num_poliza
                                                         AND fin.num_spto      = cot.num_spto
                                                         AND fin.num_apli      = cot.num_apli
                                                         AND fin.num_spto_apli = cot.num_spto_apli
                                                         AND fin.tip_benef     = '8'
                                                         AND fin.mca_baja      = trn.NO
                                                         AND fin.mca_vigente   = trn.SI
                                                         AND fin.cod_cia       = cot.cod_cia)
               LEFT OUTER JOIN tron2000.v1001390_vcr nfin ON (    nfin.tip_docum    = fin.tip_docum
                                                              AND nfin.cod_docum    = fin.cod_docum
                                                              AND nfin.cod_act_tercero = dc.ACT_ASEGURADO
                                                              AND nfin.cod_cia      = fin.cod_cia)
               -- Terceiro Credito
               LEFT OUTER JOIN tron2000.p2000060 benef ON (    benef.num_poliza    = cot.num_poliza
                                                           AND benef.num_spto      = cot.num_spto
                                                           AND benef.num_apli      = cot.num_apli
                                                           AND benef.num_spto_apli = cot.num_spto_apli
                                                           AND benef.tip_benef     = '10'
                                                           AND benef.mca_baja      = trn.NO
                                                           AND benef.mca_vigente   = trn.SI
                                                           AND benef.cod_cia       = cot.cod_cia)
               LEFT OUTER JOIN tron2000.a1001331 dbenf ON (    dbenf.tip_docum    = benef.tip_docum
                                                           AND dbenf.cod_docum    = benef.cod_docum
                                                           AND dbenf.cod_act_tercero = dc.ACT_ASEGURADO
                                                           AND dbenf.cod_cia      = benef.cod_cia)
              WHERE cot.cod_cia         = p_cod_cia
                AND cot.cod_ramo        = p_cod_ramo
                AND cot.num_poliza      = p_num_poliza
                AND cot.num_presupuesto = p_num_cotizacion
                AND cot.num_apli        = trn.CERO)
              UNPIVOT
              (VALUE FOR value_type IN (NOM_TERCERO_PROPRI
                                       ,NOM_TERCERO_FINAN
                                       ,COD_BANCO_BENEF
                                       ,COD_AGENCIA_BENEF
                                       ,TXT_AUX9_BENEF
                                       ,COD_CONTA_CORRENTE_BENEF
                                       ,COD_DIG_CORRENTE_BENEF
                                       ,TXT_AUX4_BENEF
                                       ,TIP_DOCUM_BENEF
                                       ,COD_DOCUM_BENEF));
     --
     CURSOR c_dem_ter_a IS
     SELECT VALUE
       FROM (SELECT 'NOM_TERCERO_PROPRI'      ||','||TO_CHAR(SUBSTR(NPROP.NOM_COMPLETO,1,80))  NOM_TERCERO_PROPRI
                   ,'NOM_TERCERO_FINAN'       ||','||TO_CHAR(SUBSTR(NFIN.NOM_COMPLETO,1,80))   NOM_TERCERO_FINAN
                   ,'COD_BANCO_BENEF'         ||','||TO_CHAR(DBENF.COD_ENTIDAD)                COD_BANCO_BENEF
                   ,'COD_AGENCIA_BENEF'       ||','||TO_CHAR(DBENF.COD_OFICINA)                COD_AGENCIA_BENEF
                   ,'TXT_AUX9_BENEF'          ||','||TO_CHAR(DBENF.TXT_AUX9)                   TXT_AUX9_BENEF
                   ,'COD_CONTA_CORRENTE_BENEF'||','||TO_CHAR(DBENF.CTA_CTE)                    COD_CONTA_CORRENTE_BENEF
                   ,'COD_DIG_CORRENTE_BENEF'  ||','||TO_CHAR(DBENF.CTA_DC)                     COD_DIG_CORRENTE_BENEF
                   ,'TXT_AUX4_BENEF'          ||','||TO_CHAR(DBENF.TXT_AUX4)                   TXT_AUX4_BENEF
                   ,'TIP_DOCUM_BENEF'         ||','||TO_CHAR(BENEF.TIP_DOCUM)                  TIP_DOCUM_BENEF
                   ,'COD_DOCUM_BENEF'         ||','||TO_CHAR(BENEF.COD_DOCUM)                  COD_DOCUM_BENEF
              FROM tron2000.a2000030 cot
              -- Proprietario
              LEFT OUTER JOIN tron2000.a2000060 prop ON (    prop.num_poliza    = cot.num_poliza
                                                         AND prop.num_spto      = cot.num_spto
                                                         AND prop.num_apli      = cot.num_apli
                                                         AND prop.num_spto_apli = cot.num_spto_apli
                                                         AND prop.tip_benef     = '4'
                                                         AND prop.mca_baja      = trn.NO
                                                         AND prop.mca_vigente   = trn.SI
                                                         AND prop.cod_cia       = cot.cod_cia)
              LEFT OUTER JOIN tron2000.v1001390_vcr nprop ON (    nprop.tip_docum    = prop.tip_docum
                                                              AND nprop.cod_docum    = prop.cod_docum
                                                              AND nprop.cod_act_tercero = dc.ACT_ASEGURADO
                                                              AND nprop.cod_cia      = prop.cod_cia)
              -- Financeira
              LEFT OUTER JOIN tron2000.a2000060 fin ON (    fin.num_poliza    = cot.num_poliza
                                                        AND fin.num_spto      = cot.num_spto
                                                        AND fin.num_apli      = cot.num_apli
                                                        AND fin.num_spto_apli = cot.num_spto_apli
                                                        AND fin.tip_benef     = '8'
                                                        AND fin.mca_baja      = trn.NO
                                                        AND fin.mca_vigente   = trn.SI
                                                        AND fin.cod_cia       = cot.cod_cia)
              LEFT OUTER JOIN tron2000.v1001390_vcr nfin ON (    nfin.tip_docum    = fin.tip_docum
                                                             AND nfin.cod_docum    = fin.cod_docum
                                                             AND nfin.cod_act_tercero = dc.ACT_ASEGURADO
                                                             AND nfin.cod_cia      = fin.cod_cia)
              -- Terceiro Credito
              LEFT OUTER JOIN tron2000.a2000060 benef ON (    benef.num_poliza    = cot.num_poliza
                                                          AND benef.num_spto      = cot.num_spto
                                                          AND benef.num_apli      = cot.num_apli
                                                          AND benef.num_spto_apli = cot.num_spto_apli
                                                          AND benef.tip_benef     = '10'
                                                          AND benef.mca_baja      = trn.NO
                                                          AND benef.mca_vigente   = trn.SI
                                                          AND benef.cod_cia       = cot.cod_cia)
              LEFT OUTER JOIN tron2000.a1001331 dbenf ON (    dbenf.tip_docum    = benef.tip_docum
                                                          AND dbenf.cod_docum    = benef.cod_docum
                                                          AND dbenf.cod_act_tercero = dc.ACT_ASEGURADO
                                                          AND dbenf.cod_cia      = benef.cod_cia)
             WHERE cot.cod_cia         = p_cod_cia
               AND cot.cod_ramo        = p_cod_ramo
               AND cot.num_poliza      = p_num_poliza
               AND cot.num_presupuesto = p_num_cotizacion
               AND cot.num_apli        = trn.CERO)
             UNPIVOT
             (VALUE FOR value_type IN (NOM_TERCERO_PROPRI
                                      ,NOM_TERCERO_FINAN
                                      ,COD_BANCO_BENEF
                                      ,COD_AGENCIA_BENEF
                                      ,TXT_AUX9_BENEF
                                      ,COD_CONTA_CORRENTE_BENEF
                                      ,COD_DIG_CORRENTE_BENEF
                                      ,TXT_AUX4_BENEF
                                      ,TIP_DOCUM_BENEF
                                      ,COD_DOCUM_BENEF));
     --
     l_dem_ter_p        c_dem_ter_p%ROWTYPE;
     l_dem_ter_a        c_dem_ter_a%ROWTYPE;
     --
   BEGIN
      --
      mx('I', 'pp_gera_demais_terceiros');
      --
      IF  c_dem_ter_a%ISOPEN THEN
        --
        CLOSE c_dem_ter_a;
        --
      END IF;
      --
      OPEN  c_dem_ter_a;
      --
      LOOP
        --
        FETCH c_dem_ter_a INTO l_dem_ter_a;
        EXIT WHEN c_dem_ter_a%NOTFOUND;
        --
        g_cot_reg.cod_campo := SUBSTR(l_dem_ter_a.value, trn.UNO, INSTR(l_dem_ter_a.value,',') - trn.UNO);
        g_cot_reg.val_campo := SUBSTR(l_dem_ter_a.value, (INSTR(l_dem_ter_a.value,',') + trn.UNO));
        --
        g_cot_dados.EXTEND(1);
        g_cot_dados(g_cot_dados.LAST) := g_cot_reg;
        --
      END LOOP;
      --
      CLOSE c_dem_ter_a;
      --
      IF  c_dem_ter_p%ISOPEN THEN
        --
        CLOSE c_dem_ter_p;
        --
      END IF;
      --
      OPEN  c_dem_ter_p;
      --
      LOOP
        --
        FETCH c_dem_ter_p INTO l_dem_ter_p;
        EXIT WHEN c_dem_ter_p%NOTFOUND;
        --
        g_cot_reg.cod_campo := SUBSTR(l_dem_ter_p.value, trn.UNO, INSTR(l_dem_ter_p.value,',') - trn.UNO);
        g_cot_reg.val_campo := SUBSTR(l_dem_ter_p.value, (INSTR(l_dem_ter_p.value,',') + trn.UNO));
        --
        g_cot_dados.EXTEND(1);
        g_cot_dados(g_cot_dados.LAST) := g_cot_reg;
        --
      END LOOP;
      --
      CLOSE c_dem_ter_p;
      --
      mx('F', 'pp_gera_demais_terceiros');
      --
      EXCEPTION
       WHEN OTHERS THEN
         --
         g_cod_mensaje    := g_k_cod_error_gen;
         g_anx_mensaje    := SQLERRM;
         --
         mx('F', 'pp_gera_demais_terceiros - EXCEPTION');
         --
         pp_devuelve_error;
         --
   END pp_gera_demais_terceiros;
   --
   /* ------------------------------------------------------
   || pp_gera_dados_variaveis
   */ ------------------------------------------------------
   PROCEDURE pp_gera_dados_variaveis(p_cod_cia          IN  a2000030.cod_cia       %TYPE,
                                     p_cod_ramo         IN  a2000030.cod_ramo      %TYPE,
                                     p_cod_tarifa       IN  g9999992.cod_tarifa    %TYPE,
                                     p_cod_agt          IN  g9999992.cod_agt       %TYPE,
                                     p_num_poliza       IN  a2000030.num_poliza    %TYPE,
                                     p_num_simulacion   IN  a2000030.num_spto_apli %TYPE,
                                     p_tip_mvto_batch   IN  a2000500.tip_mvto_batch%TYPE,
                                     p_xml_in           IN                          CLOB,
                                     p_xml             OUT                          CLOB)
   IS
     --
     CURSOR c_dados_var IS
       WITH cotizacion AS (SELECT p.cod_cia
                                , p.cod_ramo
                                , p.num_poliza
                                , p.num_spto
                                , p.num_apli
                                , p.num_spto_apli
                                , p.cod_campo
                                , p.val_campo
                                , p.txt_campo
                             FROM tron2000.p2000020 p
                            WHERE p.cod_cia       = p_cod_cia
                              AND p.num_poliza    = p_num_poliza
                              AND p.cod_ramo      = p_cod_ramo
                              AND p.num_apli      = trn.CERO
                              AND p.num_spto_apli = p_num_simulacion)
             SELECT NVL(b.cod_campo, a.cod_campo) cod_campo,
                    NVL(b.val_campo, a.val_campo) val_campo,
                    NVL(b.txt_campo, a.txt_campo) txt_campo
               FROM tron2000.a2000020 a
               LEFT OUTER JOIN cotizacion b
                    ON (    b.cod_cia       = p_cod_cia
                        AND b.num_poliza    = p_num_poliza
                        AND b.num_apli      = trn.CERO
                        AND b.num_spto_apli = p_num_simulacion
                        AND b.cod_ramo      = p_cod_ramo
                        AND b.cod_campo     = a.cod_campo)
               --
              WHERE a.cod_cia       = p_cod_cia
                AND a.num_poliza    = p_num_poliza
                AND a.cod_ramo      = p_cod_ramo
                AND a.num_apli      = trn.CERO
                AND a.num_spto_apli = trn.CERO
                AND a.mca_vigente   = trn.SI
              ORDER BY a.tip_nivel,a.num_secu;
     --
     l_dados_var        c_dados_var%ROWTYPE;
     --
   BEGIN
      --
      mx('I', 'pp_gera_dados_variaveis');
      --
        OPEN  c_dados_var;
        --
        LOOP
          --
          FETCH c_dados_var INTO l_dados_var;
          EXIT WHEN c_dados_var%NOTFOUND;
          --
          g_cot_reg.cod_campo := l_dados_var.cod_campo;
          g_cot_reg.val_campo := l_dados_var.val_campo;
          --
          g_cot_dados.EXTEND(1);
          g_cot_dados(g_cot_dados.LAST) := g_cot_reg;
          --
        END LOOP;
        --
        CLOSE c_dados_var;
        --
      mx('F', 'pp_gera_dados_variaveis');
      --
      EXCEPTION
       WHEN OTHERS THEN
         --
         g_cod_mensaje    := g_k_cod_error_gen;
         g_anx_mensaje    := SQLERRM;
         --
         mx('F', 'pp_gera_dados_variaveis - EXCEPTION');
         --
         pp_devuelve_error;
         --
   END pp_gera_dados_variaveis;
   --
   /* ------------------------------------------------------
   || Devolve para o webmethods parametro CLOB: p_xml
   */ ------------------------------------------------------
   --
   PROCEDURE pp_ws_processar_passo (p_cod_cia              IN  G9999992.cod_cia           %TYPE,
                                    p_cod_ramo             IN  G9999992.cod_ramo          %TYPE,
                                    p_cod_tarifa           IN  G9999992.cod_tarifa        %TYPE,
                                    p_cod_agt              IN  G9999992.cod_agt           %TYPE,
                                    p_num_cotizacion       IN  C2009030_vcr.num_cotizacion%TYPE,
                                    p_num_cotizacion_grupo IN     c2009030_vcr.num_poliza_grupo %TYPE,-- 20200723 jwolff
                                    p_num_poliza_grupo     IN  A2000500.num_poliza_grupo  %TYPE,
                                    p_num_contrato         IN  A2000500.num_contrato      %TYPE,
                                    p_num_subcontrato      IN  A2000500.num_contrato      %TYPE,
                                    p_num_paso             IN  G9999992.num_paso          %TYPE,
                                    p_tip_mvto_batch       IN  A2000500.tip_mvto_batch    %TYPE,
                                    p_xml_in               IN  CLOB                            ,
                                    p_xml                     OUT CLOB                               )
   IS
      --
      l_calculo           NUMBER := trn.CERO;
      --
      l_tip_mvto_batch    A2000500.tip_mvto_batch%TYPE;
      --
      -- 20200723 jwolff
      l_cod_servicio      g9999991.cod_servicio  %TYPE;--jwolff
      l_mca_poliza_grupo  VARCHAR2(1); -- jwolff
      --
      l_reg_msg_erro      TYPREG_MSG_WS;
      l_retorno           ref_cursor;
      --
      l_reg_a2009700      a2009700_vcr%ROWTYPE;
      --
      p_cursor_C2000000 SYS_REFCURSOR; -- 3.94
      l_habilita_fallsafe VARCHAR2(1); -- 3.94
      l_habilita_Cache_C2M VARCHAR2(1); -- 3.96
      l_habilita_cache_compuesta VARCHAR2(1); --v4.04
      l_habilita_cache_definicion VARCHAR2(1); --v4.05
      l_habilita_cache_multivariable VARCHAR2(1); --v4.25
      l_habilita_tron_otimizacao VARCHAR2(1); --v4.26
      --
      l_hab_motor_serasa VARCHAR2(1); -- MOTORSUBS 3.86
      l_hab_motor_nortix VARCHAR2(1); -- MOTORSUBS 3.86
      l_hab_motor_rastre VARCHAR2(1); -- MOTORSUBS 3.86
      l_hab_motor_visto  VARCHAR2(1); -- MOTORSUBS 3.86
      l_hab_motor_subs   VARCHAR2(1); -- MOTORSUBS 3.86
      type t_C2000000 is table of VARCHAR(13); -- 3.81
      l_C2000000 t_C2000000; -- 3.81
      l_rastreador VARCHAR2(1);
      --
      l_cod_docum c2000000.val_columna %TYPE; -- 4.63
      l_tip_docum c2000000.val_columna %TYPE; -- 4.63
      l_habilita_fallsafe_1331 VARCHAR2(1); --v4.63
      l_habilita_fallsafe_x030 VARCHAR2(1); --v4.63
      type t_A1001331 is table of VARCHAR2(20); -- v4.63
      l_A1001331 t_A1001331; -- v4.63
      type t_X2000030 is table of VARCHAR(13); -- v4.63
      l_X2000030 t_X2000030; -- v4.63
      l_cod_retorno    A2009700_VCR.COD_RETORNO    %TYPE; -- 4.70
      l_num_poliza_renov c2000000.val_columna %TYPE; -- v 4.86
      l_num_cotizacion    C2009030_vcr.num_cotizacion%TYPE; -- v 4.86
      l_cod_tarifa       G9999992.cod_tarifa        %TYPE; -- 5.70
	  l_mca_jornada_otimizada VARCHAR2(1); -- 5.70
      --
   BEGIN
      --
      mx('I', 'pp_ws_processar_passo');
      --
    l_num_cotizacion := p_num_cotizacion; -- v 4.86
      g_fic_traza := NVL(NVL(p_num_cotizacion, p_num_cotizacion_grupo), g_fic_traza);--jwolff
      --
      l_tip_mvto_batch := NVL(p_tip_mvto_batch, g_k_tip_mvto_batch_cotacao);
      --
      g_err_msg :=  TYPTAB_MSG_WS(); -- 4.99
      --
      g_qtdd_erro := trn.CERO;
      --
      g_xml_in := p_xml_in;
      --
      mx('g_fic_traza'     , g_fic_traza);
      mx('l_tip_mvto_batch', l_tip_mvto_batch);
      mx('g_qtdd_erro'     , g_qtdd_erro);
      mx('g_xml_in'        , substr(g_xml_in, 1,100));
      --
      IF g_xml_in IS NOT NULL THEN
        --
        mx('g_xml_in', substr(g_xml_in, 1,100));
        --
      ELSE
        --
        mx('g_xml_in', 'NUL0');
        --
      END IF;
      --
      --I MOTORSUBS 3.83
        BEGIN
            l_hab_motor_serasa := f_recupera_constante('MOTOR_SUBSCR_HABILITA_SERASA');
          EXCEPTION
            WHEN OTHERS THEN
              l_hab_motor_serasa := trn.NO;
        END;
        --
        BEGIN
            l_hab_motor_nortix := f_recupera_constante('MOTOR_SUBSCR_HABILITA_NORTIX');
          EXCEPTION
            WHEN OTHERS THEN
              l_hab_motor_nortix := trn.NO;
        END;
        --
        BEGIN
            l_hab_motor_rastre := f_recupera_constante('MOTOR_SUBSCR_HABILITA_RAST');
          EXCEPTION
            WHEN OTHERS THEN
              l_hab_motor_rastre := trn.NO;
        END;
        --
        BEGIN
            l_hab_motor_visto  := f_recupera_constante('MOTOR_SUBSCR_HABILITA_VIST');
          EXCEPTION
            WHEN OTHERS THEN
              l_hab_motor_visto := trn.NO;
        END;
        --
        BEGIN
            l_hab_motor_subs   := f_recupera_constante('MOTOR_SUBSCR_HABILITA_MOTOR');
          EXCEPTION
            WHEN OTHERS THEN
              l_hab_motor_subs := trn.NO;
        END;
        --
      --F MOTORSUBS 3.83
          -- I v 4.86
      l_num_poliza_renov :=fp_recupera_valor (p_xml_in, 'NUM_POLIZA_RENOV'); -- v 4.86
      IF l_tip_mvto_batch = g_k_tip_mvto_batch_cotacao and  p_num_paso = 2  AND l_num_poliza_renov IS NOT NULL
         AND l_num_poliza_renov = l_num_cotizacion THEN
            l_num_cotizacion := null;
      END if;
      -- F v 4.86
      trn_k_global.asigna('COD_CIA'          ,     p_cod_cia);
      trn_k_global.asigna('COD_RAMO'         , NVL(p_cod_ramo             ,g_k_cod_ramo_generico));
      trn_k_global.asigna('COD_TARIFA'       , NVL(p_cod_tarifa           ,g_k_cod_modalidade   ));
      trn_k_global.asigna('COD_AGT'          , NVL(p_cod_agt              ,g_k_cod_agt_generico ));
      trn_k_global.asigna('COD_AGT_RENOV'    , NVL(p_cod_agt              ,g_k_cod_agt_generico )); --santi
      trn_k_global.asigna('NUM_COTIZACION'   ,     l_num_cotizacion                              ); -- v 4.86  (p_num_cotizacion)
      trn_k_global.asigna('NUM_COTIZACION_GRUPO',  p_num_cotizacion_grupo                        ); -- jwolff
      trn_k_global.asigna('NUM_PROPUESTA'    ,     l_num_cotizacion                              ); -- v 4.86 (p_num_cotizacion)
      trn_k_global.asigna('NUM_POLIZA_GRUPO' , NVL(NVL(p_num_poliza_grupo, p_num_cotizacion_grupo), em.NUM_POLIZA_GRUPO_GEN)); -- jwolff
      trn_k_global.asigna('NUM_CONTRATO'     , NVL(p_num_contrato         ,trn.NULO             ));
      trn_k_global.asigna('NUM_PASO'         ,     p_num_paso                                    );
      trn_k_global.asigna('TIP_MVTO_BATCH'   ,     l_tip_mvto_batch                              );
      trn_k_global.asigna('COD_USR'          ,     g_cod_usr_automatico                          );
      trn_k_global.asigna('COD_CANAL1'       ,     dc.COD_CANAL1_GEN                             );
      trn_k_global.asigna('COD_CANAL2'       ,     dc.COD_CANAL2_GEN                             );
      trn_k_global.asigna('COD_CANAL3'       ,     dc.COD_CANAL3_GEN                             );
      trn_k_global.asigna('NUM_SIMULACION'   ,     fp_recupera_valor (p_xml_in, 'NUM_SIMULACION'));
      trn_k_global.asigna('TIP_EMISSION'     ,     'C'                                           );
      --
      --ABC - INI
      mx('p_cod_cia'           , p_cod_cia);
      mx('p_cod_ramo'          , p_cod_ramo);
      mx('p_cod_tarifa'        , p_cod_tarifa);
      mx('p_cod_agt'           , p_cod_agt);
      mx('p_num_cotizacion'    , l_num_cotizacion); -- v 4.86
      mx('p_num_cotizacion_grupo' , p_num_cotizacion_grupo); --jwolff
      mx('p_num_poliza_grupo'  , p_num_poliza_grupo);
      mx('p_num_paso'          , p_num_paso);
      mx('l_tip_mvto_batch'    , l_tip_mvto_batch);
      mx('g_cod_usr_automatico', g_cod_usr_automatico);
      mx('dc.COD_CANAL1_GEN'   , dc.COD_CANAL1_GEN);
      mx('dc.COD_CANAL2_GEN'   , dc.COD_CANAL2_GEN);
      mx('dc.COD_CANAL3_GEN'   , dc.COD_CANAL3_GEN);
      mx('NUM_SIMULACION'      , fp_recupera_valor (p_xml_in, 'NUM_SIMULACION'));
      trn_k_global.asigna('MCA_CONVIVENCIA', 'N'); -- V 3.80 RMOGOMES
      --ABC - FIM
      --cartao
      trn_k_global.asigna('CC_NUMERO'            , fp_recupera_valor (p_xml_in, 'NUM_CARTAO_CREDITO'));
      trn_k_global.asigna('CC_DATA_VALIDADE'     , fp_recupera_valor (p_xml_in, 'NUM_VALIDADE_CARTAO'));
      trn_k_global.asigna('CC_NOMEIMPRESSO'      , TRANSLATE(fp_recupera_valor (p_xml_in, 'NOM_CARTAO'),
                                                             '????YYCEYOUAEIOUAEIOU??EUYO?Y?aceiouaeiouaeiou??euio?yy',
                                                             'SZszYACEIOUAEIOUAEIOUAOEUIONYaaceiouaeiouaeiouaoeuionyy')); -- 4.84
      trn_k_global.asigna('CC_NOMEBANDEIRA'      , fp_recupera_valor (p_xml_in, 'NOM_BANDEIRA_CARTAO'));
      trn_k_global.asigna('CC_FORMA_PAGO'        , fp_recupera_valor (p_xml_in, 'COD_FORMA_PAGO'));  -- 3.12
      --
      --
      -- Globales para VI corretor V 4.77
      --
      trn_k_global.asigna('COD_MODALIDAD'        , fp_recupera_valor (p_xml_in, 'COD_MODALIDAD' ));
      trn_k_global.asigna('PCT_AGT'              , fp_recupera_valor (p_xml_in, 'PCT_AGT'      ));
      trn_k_global.asigna('PCT_ASE'              , fp_recupera_valor (p_xml_in, 'PCT_ASE'       ));
      trn_k_global.asigna('COD_FORMA_PAGO'       , fp_recupera_valor (p_xml_in, 'COD_FORMA_PAGO'));
      --
      -- v. 4.77
      -- { jwolff
      l_mca_poliza_grupo := NVL(fp_recupera_valor (p_xml_in, 'MCA_POLIZA_GRUPO'), trn.NO);
      --I MOTORSUBS 3.83
      trn_k_global.asigna('HAB_MOTOR_SERASA', l_hab_motor_serasa);
      trn_k_global.asigna('HAB_MOTOR_NORTIX', l_hab_motor_nortix);
      trn_k_global.asigna('HAB_MOTOR_RASTREADOR', l_hab_motor_rastre);
      trn_k_global.asigna('HAB_MOTOR_VISTORIA', l_hab_motor_visto);
      trn_k_global.asigna('HAB_MOTOR_SUBS', l_hab_motor_subs);
    --F MOTORSUBS 3.83
      --
      trn_k_global.asigna('MCA_POLIZA_GRUPO', l_mca_poliza_grupo);
      --
      mx('grupo', l_mca_poliza_grupo);
      --
      IF    p_num_cotizacion_grupo IS NOT NULL
         OR l_mca_poliza_grupo      = trn.SI
      THEN
         --
         l_cod_servicio := fp_devuelve_cod_servicio(p_tip_servicio         => 'P'                   , -- Processar Passo
                                                    p_tip_mvto_batch       => l_tip_mvto_batch      ,
                                                    p_num_cotizacion_grupo => p_num_cotizacion_grupo,
                                                    p_mca_poliza_grupo     => l_mca_poliza_grupo    );
         --
         IF l_cod_servicio IS NOT NULL
         THEN
            --
            trn_k_global.asigna('COD_SERVICIO', l_cod_servicio);
            --
         END IF;
         --
      END IF;
    --I 2.50
    IF p_num_paso = 16 THEN
      --
      trn_k_global.asigna('COD_TARIFA',
                          NVL(p_cod_tarifa, g_k_cod_modalidade));
      --
    END if;
    --F 2.50
    -- I 3.96
    l_habilita_Cache_C2M := trn_k_df_cmn_nwt_xx_cnn.f_vrb_nam_val(p_vrb_nam => 'HABILITA_CACHE_C2M');
    l_habilita_cache_compuesta := trn_k_df_cmn_nwt_xx_cnn.f_vrb_nam_val(p_vrb_nam => 'HABILITA_CACHE_COMPUESTA'); --v4.04
    l_habilita_cache_definicion := trn_k_df_cmn_nwt_xx_cnn.f_vrb_nam_val(p_vrb_nam => 'HABILITA_CACHE_DEFINICION'); --v4.05
    l_habilita_cache_multivariable := trn_k_df_cmn_nwt_xx_cnn.f_vrb_nam_val(p_vrb_nam => 'HABILITA_CACHE_MULTIVARIABLE'); --v4.25
    l_habilita_tron_otimizacao := trn_k_df_cmn_nwt_xx_cnn.f_vrb_nam_val(p_vrb_nam => 'HABILITA_TRON_OTIMIZACAO'); --v4.26
    --
    IF l_habilita_Cache_C2M = trn.SI AND l_tip_mvto_batch = g_k_tip_mvto_batch_cotacao THEN -- 3.99
       --
       em_k_c2000000.p_enable_cache(true); -- V 3.97
       --
    END IF;
    -- F 3.96
    -- I. v4.04
    IF l_habilita_cache_compuesta = trn.SI AND l_tip_mvto_batch = g_k_tip_mvto_batch_cotacao THEN
       --
       mx('-','habilita cache compuesta');
       --
       em_k_tarifa_compuesta_vcr.p_enable_cache;
       --
    END IF;
    -- F. v4.04
    -- I. v4.05
    IF l_habilita_cache_definicion = trn.SI AND l_tip_mvto_batch = g_k_tip_mvto_batch_cotacao THEN
       mx('-','habilita cache definicion');
       ea_k_definicion_pacote_vcr.p_enable_cache;
    END IF;
    -- F. v4.05
    -- I. v4.25
    IF l_habilita_cache_multivariable = trn.SI AND l_tip_mvto_batch = g_k_tip_mvto_batch_cotacao THEN
       mx('-','habilita cache multivariable');
       em_k_tarifa_multivariable_vcr.p_enable_cache;
    END IF;
    -- F. v4.25
    -- I. v4.26
    IF l_habilita_tron_otimizacao = trn.SI AND l_tip_mvto_batch = g_k_tip_mvto_batch_cotacao THEN
       mx('-','habilita tron otimizacao');
       trn_k_df_cmn_nwt_xx_cnn.p_optimized(TRUE);
       trn_k_df_cmn_nwt_xx_vrb_cnc.p_optimized(TRUE); --v4.28
    END IF;
    -- F. v4.26
      IF l_tip_mvto_batch = g_k_tip_mvto_batch_cotacao THEN
         --
         IF    p_num_cotizacion_grupo IS NULL
            OR (NVL(l_cod_servicio, -1) = g_k_cod_srv_flotas AND p_num_paso = 6) -- jwolff
         THEN
            --
            --5.70 I
        l_mca_jornada_otimizada := trn_k_df_cmn_nwt_xx_cnn.f_vrb_nam_val(p_vrb_nam => 'JORNADA_OTIMIZADA_HABILITA');
        --
         IF  p_num_paso = 3
               AND p_cod_ramo = ea_k_231_utils.g_k_ramo_motor
               AND l_mca_jornada_otimizada = TRN.SI
                THEN --
         --
         l_cod_tarifa := CASE
                      WHEN p_cod_tarifa = 224 OR p_cod_tarifa = 215 THEN
                       224
                      WHEN p_cod_tarifa = 226 OR p_cod_tarifa = 207 THEN
                       226
                      WHEN p_cod_tarifa = 228 OR p_cod_tarifa = 213 THEN
                       228
                      WHEN p_cod_tarifa = 229 OR p_cod_tarifa = 214 THEN
                       229
                    END;
--
                     pp_inserta_c2000000(p_nom_tabla   => ea_k_231_utils.g_k_tabla_dv,
                                         p_nom_columna => 'TIP_PRODUTO',
                                         p_val_columna => l_cod_tarifa);

                     pp_inserta_c2000000(p_nom_tabla   => ea_k_231_utils.g_k_tabla_df,
                                         p_nom_columna => 'TIP_PRODUTO',
                                         p_val_columna => l_cod_tarifa);

            END IF;
			      --5.70  F
            --
            p_inicializar_cotacao(p_cod_cia, p_cod_ramo, p_cod_tarifa, p_cod_agt, l_num_cotizacion, p_num_paso);  -- v 4.86
            --
            IF     NVL(l_cod_servicio, -1) = g_k_cod_srv_flotas -- jwolff
               AND p_num_cotizacion_grupo IS NULL
            THEN
               --
               trn_k_global.asigna('NUM_COTIZACION_GRUPO', trn_k_global.ref_f_global('NUM_COTIZACION'));
               --
            END IF;
            --
         -- <3.35>
         -- AJUSTE DO PASSO 13 DE FROTA FULL PARA NAO MODIFICAR OS DEMAIS PASSOS -
         -- ESSA ALTERACAO EVITAR DUPLICAR COTACAO DE GRUPO --
         ELSIF p_num_paso = 13 AND NVL(l_cod_servicio, -1) = g_k_cod_srv_flotas THEN
            --
            trn_k_global.asigna('NUM_COTIZACION_GRUPO', p_num_cotizacion_grupo);
            trn_k_global.asigna('NUM_COTIZACION', l_num_cotizacion); -- v 4.86
            --
         ELSE
            --
            trn_k_global.asigna('NUM_COTIZACION', p_num_cotizacion_grupo);
            --
         END IF;
         --
      ELSIF l_tip_mvto_batch = g_k_tip_mvto_batch_endosso THEN
         --
         pp_asgina_globales_spto;
         --
         pp_asigna('NUM_PROPUESTA',l_num_cotizacion); -- v 4.86
         --
         pp_inicializa_variables_spto;
         --
      END IF;
      --
      IF l_mca_poliza_grupo = trn.SI
      THEN
         --
         IF p_num_poliza_grupo IS NOT NULL
         THEN
            --
      pp_asigna('NUM_COTIZACION', NVL(l_num_cotizacion, p_num_poliza_grupo)); -- v 4.86
            pp_asigna('NUM_PROPUESTA', NVL(l_num_cotizacion, p_num_poliza_grupo)); -- v 4.86
            trn_k_global.asigna('NUM_POLIZA_GRUPO' , p_num_poliza_grupo);
            --
         END IF;
         --
         IF p_num_contrato IS NOT NULL
         THEN
            --
            trn_k_global.asigna('NUM_CONTRATO'     , p_num_contrato);
            --
         END IF;
         --
      END IF;
      -- } jwolff
      g_num_cotizacion := trn_k_global.ref_f_global('NUM_COTIZACION');
      g_num_cotizacion_grupo := trn_k_global.ref_f_global('NUM_COTIZACION_GRUPO'); --JWOLFF
      g_num_propuesta  := trn_k_global.ref_f_global('NUM_PROPUESTA');
      g_tip_mvto_batch := trn_k_global.ref_f_global('TIP_MVTO_BATCH');
      g_cod_cia        := trn_k_global.ref_f_global('COD_CIA');
      g_cod_ramo       := trn_k_global.ref_f_global('COD_RAMO');
      g_cod_agt        := trn_k_global.ref_f_global('COD_AGT');
      g_num_paso       := trn_k_global.ref_f_global('NUM_PASO');
      g_cod_tarifa     := trn_k_global.ref_f_global('COD_TARIFA');
      g_tip_mvto_batch := l_tip_mvto_batch;
      --
      l_reg_a2009700.cod_cia        := g_cod_cia           ;
      l_reg_a2009700.cod_ramo       := g_cod_ramo          ;
      l_reg_a2009700.cod_agt        := g_cod_agt           ;
      l_reg_a2009700.num_cotizacion := g_num_cotizacion    ;
      l_reg_a2009700.tip_mvto_batch := g_tip_mvto_batch    ;
      l_reg_a2009700.num_paso       := g_num_paso          ;
      l_reg_a2009700.fec_ini        := SYSDATE             ;
      l_reg_a2009700.fec_fim        := NULL                ;
      l_reg_a2009700.cod_retorno    := NULL                ;
      l_reg_a2009700.desc_xml_in    := p_xml_in            ;
      l_reg_a2009700.desc_xml_out   := NULL                ;
      --
      -- I 3.94
      l_habilita_fallsafe := trn_k_df_cmn_nwt_xx_cnn.f_vrb_nam_val(p_vrb_nam => 'HABILITA_FAILSAFE_C2M');
      -- PREVENTING LOCK - BEGIN
       IF l_habilita_fallsafe = trn.SI AND g_tip_mvto_batch = g_k_tip_mvto_batch_cotacao THEN -- 3.81
        BEGIN
          --
          SELECT NUM_COTIZACION BULK COLLECT -- 3.81
            INTO l_C2000000 -- 3.99
              FROM C2000000
             WHERE COD_CIA = p_cod_cia
               AND COD_RAMO = p_cod_ramo
               AND NUM_COTIZACION = l_num_cotizacion  -- v 4.86
               FOR UPDATE NOWAIT;
         EXCEPTION
           WHEN OTHERS THEN
            -- NO_DATA_FOUND (SQLCODE=100) eh ignorado pois as linhas serao criadas
            IF SQLCODE != 100 THEN
              RAISE;
            END IF;
            --
        END;
        --
        END IF;
      -- PREVENTING LOCK - END
      -- F 3.94
      --
      --I 4.63
      l_habilita_fallsafe_1331 := trn_k_df_cmn_nwt_xx_cnn.f_vrb_nam_val(p_vrb_nam => 'HABILITA_FAILSAFE_A1331');
      l_habilita_fallsafe_x030 := trn_k_df_cmn_nwt_xx_cnn.f_vrb_nam_val(p_vrb_nam => 'HABILITA_FAILSAFE_X2000030');

      -- PREVENTING LOCK - BEGIN
      IF l_habilita_fallsafe_1331 = trn.SI AND g_tip_mvto_batch = g_k_tip_mvto_batch_cotacao
         AND p_num_paso IN (14,15) THEN -- 4.63
        --
        ea_k_231_utils.p_devuelve_dato_cotizacion(ea_k_231_coti.g_k_tabla_int,
                                                  'COD_DOCUM',
                                                  l_cod_docum);

        ea_k_231_utils.p_devuelve_dato_cotizacion(ea_k_231_coti.g_k_tabla_int,
                                                  'TIP_DOCUM',
                                                  l_tip_docum);
        l_cod_docum := TO_CHAR(TO_NUMBER(l_cod_docum));
        BEGIN
          --
          SELECT cod_DOCUM BULK COLLECT
            INTO l_A1001331
              FROM A1001331
             WHERE COD_CIA = p_cod_cia
               AND tip_docum = l_tip_docum
               AND COD_DOCUM = l_cod_docum
               FOR UPDATE NOWAIT;
        EXCEPTION
          WHEN OTHERS THEN
            -- NO_DATA_FOUND (SQLCODE=100) eh ignorado pois as linhas serao criadas
            IF SQLCODE != 100 THEN
              RAISE;
            END IF;
            --
        END;
        --
      END IF;
      -- PREVENTING LOCK - END
      IF l_habilita_fallsafe_x030 = trn.SI AND g_tip_mvto_batch = g_k_tip_mvto_batch_cotacao
         AND p_num_paso IN (14 ) THEN -- 4.63
        --
        BEGIN
          --
          SELECT NUM_POLIZA BULK COLLECT
            INTO l_X2000030
              FROM X2000030
             WHERE COD_CIA = p_cod_cia
               AND NUM_POLIZA = p_num_cotizacion
               FOR UPDATE NOWAIT;
        EXCEPTION
          WHEN OTHERS THEN
            -- NO_DATA_FOUND (SQLCODE=100) eh ignorado pois as linhas serao criadas
            IF SQLCODE != 100 THEN
              RAISE;
            END IF;
            --
        END;
        --
       END IF;
      -- PREVENTING LOCK - END
      --F 4.63

      pp_trata_log_processo (l_reg_a2009700);
      --
      p_busca_procedimento;
      --
      trn_k_global.asigna('COD_CIA'          ,     p_cod_cia                                    );
      trn_k_global.asigna('COD_RAMO'         , NVL(p_cod_ramo            ,g_k_cod_ramo_generico));
      trn_k_global.asigna('COD_TARIFA'       , NVL(p_cod_tarifa          ,g_k_cod_modalidade   ));
      trn_k_global.asigna('COD_AGT'          , NVL(p_cod_agt             ,g_k_cod_agt_generico ));
      trn_k_global.asigna('NUM_PROPUESTA'    ,     l_num_cotizacion                             ); -- v 4.86
      trn_k_global.asigna('NUM_POLIZA_GRUPO' ,     p_num_poliza_grupo                           );
      trn_k_global.asigna('NUM_PASO'         ,     p_num_paso                                   );
      trn_k_global.asigna('TIP_MVTO_BATCH'   ,     l_tip_mvto_batch                             );
      trn_k_global.asigna('COD_USR'          ,     g_cod_usr_automatico                         );
      trn_k_global.asigna('COD_CANAL1'       ,     dc.COD_CANAL1_GEN                            );
      trn_k_global.asigna('COD_CANAL2'       ,     dc.COD_CANAL2_GEN                            );
      trn_k_global.asigna('COD_CANAL3'       ,     dc.COD_CANAL3_GEN                            );
      trn_k_global.asigna('NUM_SIMULACION'   ,     fp_recupera_valor (p_xml_in, 'NUM_SIMULACION'));
      --
      -- v 4.08 - Substituicao da Obrigatoriedade do Rastreador do Passo 6 para o Passo 4;
      IF g_tip_mvto_batch = g_k_tip_mvto_batch_cotacao AND p_num_paso = 6 THEN
        --
        ea_k_231_utils.p_devuelve_dato_cotizacion(ea_k_231_coti.g_k_tabla_simulacion,
                                                  'MCA_RASTREADOR#1',
                                                  l_rastreador);
        --
        IF l_rastreador = trn.SI THEN
          --
            g_err_msg.EXTEND(1); -- 4.99
            g_err_msg(g_err_msg.LAST) := fp_trata_msg('MCA_RASTREADOR', -- 4.99
                                                                                      g_k_cod_error_gen,
                                                                                      g_k_pre_msg_erro || '20176' || g_k_sep_cod_msg);
          --
        END IF;
        --
      END IF;
      --
      pp_processa_retorno (p_xml);
      --
      l_reg_a2009700.fec_fim        := SYSDATE                                                                               ;
      l_reg_a2009700.cod_retorno    := CASE g_qtdd_erro WHEN trn.CERO THEN g_k_cod_retorno_suce ELSE g_k_cod_retorno_erro END;
      l_reg_a2009700.desc_xml_out   := p_xml                                                                                 ;
      --
      pp_trata_log_processo (l_reg_a2009700);
      --
      g_err_msg:= NULL; -- 4.99
      --
      -- I 3.96
      --IF l_habilita_Cache_C2M = trn.SI AND g_tip_mvto_batch = g_k_tip_mvto_batch_cotacao AND g_num_paso = g_k_paso_calculo THEN
      IF l_habilita_Cache_C2M = trn.SI AND g_tip_mvto_batch = g_k_tip_mvto_batch_cotacao THEN
        em_k_c2000000.p_disable_cache; -- V 3.97
      END IF;
      -- F 3.96
      -- I. v4.04
      IF l_habilita_Cache_compuesta = trn.SI AND l_tip_mvto_batch = g_k_tip_mvto_batch_cotacao THEN
        --
        mx('-','desabilita cache compuesta');
        --
        em_k_tarifa_compuesta_vcr.p_disable_cache;
        --
      END IF;
      -- F. v4.04
      -- I. v4.05
      IF l_habilita_cache_definicion = trn.SI AND l_tip_mvto_batch = g_k_tip_mvto_batch_cotacao THEN
         mx('-','desabilita cache definicion');
         ea_k_definicion_pacote_vcr.p_disable_cache;
      END IF;
      -- F. v4.05
      -- I. v4.25
      IF l_habilita_cache_multivariable = trn.SI AND l_tip_mvto_batch = g_k_tip_mvto_batch_cotacao THEN
        mx('-','desabilita cache multivariable');
        em_k_tarifa_multivariable_vcr.p_disable_cache;
      END IF;
      -- F. v4.25
      -- I. v4.26
      IF l_habilita_tron_otimizacao = trn.SI AND l_tip_mvto_batch = g_k_tip_mvto_batch_cotacao THEN
         mx('-','desabilita tron otimizacao');
         trn_k_df_cmn_nwt_xx_cnn.p_optimized(FALSE);
         trn_k_df_cmn_nwt_xx_vrb_cnc.p_optimized(FALSE); --v4.28
      END IF;
      -- F. v4.26
      mx('F', 'pp_ws_processar_passo');
      --
      -- v. 4.97 inicio
      BEGIN
        --
        ea_k_ws_mailing_vcr.p_envia_mailing(p_cod_cia,
                                           p_cod_ramo,
                                           p_num_cotizacion,
                                           p_cod_agt,
                                           p_num_paso,
                                           p_cod_tarifa);
      EXCEPTION
        WHEN OTHERS THEN
          NULL;
      END;
      -- v. 4.97 fim
     /* -- v 4.93 inicio
      ea_k_ws_duplo_sim_vcr.p_valida_data_duplo_sim(p_cod_cia,
                                                    p_cod_ramo,
                                                    p_cod_agt,
                                                    p_num_cotizacion,
                                                    p_num_paso,
                                                    p_cod_tarifa,
                                                    p_xml_in); -- v 4.93 fim*/
      -- v. 4.95 inicio
      /*ea_k_ws_duplo_sim_vcr.p_valida_debito_em_conta_terceiro(p_cod_cia,
                                                              p_cod_ramo,
                                                              p_cod_agt,
                                                              p_num_cotizacion,
                                                              p_num_paso,
                                                              p_cod_tarifa); -- V. 4.95 fim*/
      -- v.4.70 inicio
     BEGIN
       --
       IF p_num_paso = 2 THEN
          --
          EM_K_A2109005_VCR_VCR.p_inserta_historico(p_cod_cia       => p_cod_cia,
                                                    p_num_controle  => g_num_cotizacion,
                                                    p_tip_controle  => 'C',
                                                    p_num_spto      => 0,
                                                    p_txt_acao      => 'Cota' || chr(231) || chr(227) || 'o',
                                                    p_cod_usr       => 'E999001');
       ELSIF p_num_paso = 6 THEN
          --
          EM_K_A2109005_VCR_VCR.p_inserta_historico(p_cod_cia       => p_cod_cia,
                                                    p_num_controle  => p_num_cotizacion,
                                                    p_tip_controle  => 'C',
                                                    p_num_spto      => 0,
                                                    p_txt_acao      => 'Cota' || chr(231) || chr(227) || 'o' || ' Calculada',
                                                    p_cod_usr       => 'E999001');
          --
       END IF;
     EXCEPTION
       WHEN OTHERS THEN
         NULL;
     END;
     --
     BEGIN
       --
       SELECT COD_RETORNO
         INTO l_cod_retorno
         FROM A2009700_VCR
        WHERE COD_CIA = p_cod_cia
          AND COD_RAMO = p_cod_ramo
          AND NUM_COTIZACION = g_num_cotizacion;
       --
       IF l_cod_retorno = 2 AND p_num_paso = 3 OR p_num_paso = 6 THEN
         --
         EM_K_A2109005_VCR_VCR.p_inserta_historico(p_cod_cia       => p_cod_cia,
                                                   p_num_controle  => p_num_cotizacion,
                                                   p_tip_controle  => 'C',
                                                   p_num_spto      => 0,
                                                   p_txt_acao      => 'Cota' || chr(231) || chr(227) || 'o com Critica',
                                                   p_cod_usr       => 'E999001');
         --
       END IF;
     EXCEPTION
       WHEN OTHERS THEN
         NULL;
     END;
     -- v.4.70 fim
   END pp_ws_processar_passo;
   --
   /* ------------------------------------------------------
   || Devolve para o webmethods parametro CLOB: p_xml
   */ ------------------------------------------------------
   --
   PROCEDURE pp_ws_consulta_dados_segurado (p_cod_cia   IN a2000030.cod_cia%TYPE ,
                                            p_cod_ramo  IN a2000030.cod_ramo%TYPE,
                                            p_cod_agt   IN a2000030.cod_agt%TYPE ,
                                            p_xml_in    IN CLOB                  ,
                                            p_xml       OUT CLOB                 )
   IS
      --
      l_retorno                ref_cursor;
      l_count_aseg             NUMBER;
      l_count_aseg_restricao   NUMBER;
      l_tip_docum              a2000030.tip_docum%TYPE;
      l_cod_docum              a2000030.cod_docum%TYPE;
      l_val_cod_docum          a1001331.cod_docum%TYPE;
      l_cod_error              g1010020.cod_mensaje%TYPE;
      l_cod_severidade         g2019021_vcr.cod_severidade_serasa%TYPE;
      --
      l_val_tamanho_cod_docum       NUMBER;
      l_val_caracteres_cod_docum    NUMBER;
      l_valida_tip_docum            NUMBER;
      --
      l_possui_erro            BOOLEAN := FALSE;
      --
      l_reg_a2009016           a2009016_vcr%ROWTYPE;
      l_reg_a2009017           a2009017_vcr%ROWTYPE;
      --
      l_exception              EXCEPTION;
      --
      --INI AMARCO
      l_tip_act_economica a1001331_vcr.tip_act_economica_vcr%TYPE;
      l_desc_act_econ_vcr a2007702_vcr.desc_act_econ_vcr    %TYPE;
      --FIN AMARCO AMARCO
      l_hab_motor_serasa df_cmn_nwt_xx_cnn.vrb_nam_val%TYPE; -- MOTORSUBS 3.83
      l_hab_motor_nortix df_cmn_nwt_xx_cnn.vrb_nam_val%TYPE; -- MOTORSUBS 3.83
      l_rec_Dados_Motor  ea_k_ws_motor_subscr.rec_Dados_Motor; -- MOTORSUBS 3.83
      --
      l_num_cotizacion c2000000.num_cotizacion%TYPE; -- 4.82
   BEGIN
      --
      g_fic_traza := 'ws_cons';
      --
      mx('I', 'pp_ws_consulta_dados_segurado');
      --
      l_num_cotizacion       := trn_k_global.ref_f_global('NUM_COTIZACION'); -- 4.82
      --
      trn_k_global.borra_todas;
      --
      g_err_msg :=  TYPTAB_MSG_WS(); -- 4.99
      -- I 3.83 MOTORSUBS
      BEGIN
          l_hab_motor_serasa := f_recupera_constante('MOTOR_SUBSCR_HABILITA_SERASA');
        EXCEPTION
          WHEN OTHERS THEN
            l_hab_motor_serasa := trn.NO;
      END;
      --
      BEGIN
          l_hab_motor_nortix := f_recupera_constante('MOTOR_SUBSCR_HABILITA_NORTIX');
        EXCEPTION
          WHEN OTHERS THEN
            l_hab_motor_nortix := trn.NO;
      END;
      --
      trn_k_global.asigna('HAB_MOTOR_SERASA', l_hab_motor_serasa);
      trn_k_global.asigna('HAB_MOTOR_NORTIX', l_hab_motor_nortix);
      --
      -- I 3.83 MOTORSUBS
      --
      trn_k_global.asigna('COD_CIA'   ,p_cod_cia               );
      trn_k_global.asigna('COD_RAMO'  ,p_cod_ramo              );
      trn_k_global.asigna('COD_AGT'   ,NVL(p_cod_agt, '999999'));
      trn_k_global.asigna('COD_TARIFA',g_k_cod_modalidade      );
      --
      l_tip_docum := fp_recupera_valor (p_xml_in, 'TIP_DOCUM');
      l_cod_docum := fp_recupera_valor (p_xml_in, 'COD_DOCUM');
      l_val_cod_docum := LENGTH(TRIM(TRANSLATE(l_cod_docum, ' 0123456789', ' ')));
      --
      l_val_caracteres_cod_docum := NVL(LENGTH(REGEXP_REPLACE(l_cod_docum,'[[:digit:]]', '')),trn.CERO);
      --
      mx('l_cod_docum: ', l_cod_docum);
      --
      -- TRATAMENTO PARA VALORES COM ZERO A ESQUERDA
      IF LENGTH(l_cod_docum) < 11 THEN
         --
         l_cod_docum := LPAD(l_cod_docum, 11, '0');
         --
      ELSIF LENGTH(l_cod_docum) > 11 AND LENGTH(l_cod_docum) < 14 THEN
         --
         l_cod_docum := LPAD(l_cod_docum, 14, '0');
         --
      END IF;
      --
      mx('l_cod_docum: ', l_cod_docum);
      --
      l_val_tamanho_cod_docum    := LENGTH(TRIM(l_cod_docum));
      --
      -- Validacao do tipo de documento
      --
      IF l_tip_docum IS NOT NULL THEN
        --
        l_valida_tip_docum := NVL(REGEXP_INSTR(l_tip_docum,g_k_tip_docum_cpf||'|'||g_k_tip_docum_cgc),trn.CERO);
        --
        IF l_valida_tip_docum = trn.CERO THEN
          --
          l_cod_error := '20098159';
          --
          RAISE l_exception;
          --
        END IF;
        --
        mx('l_valida_tip_docum', l_valida_tip_docum);
        --
      END IF;
      --
      mx('l_tip_docum: ', l_tip_docum);
      --
      -- Validacao de numero do documento
      --
      IF l_val_caracteres_cod_docum > trn.CERO THEN  -- possui caracteres
        --
        l_cod_error := '20098003';
        --
        mx('l_val_caracteres_cod_docum: ', l_val_caracteres_cod_docum);
        --
        RAISE l_exception;
        --
      ELSE
        --
        CASE l_val_tamanho_cod_docum
          --
          WHEN trn.CERO THEN
            --
            l_cod_error := '20098000';
            --
            mx('l_val_tamanho_cod_docum: ', l_val_tamanho_cod_docum);
            --
            RAISE l_exception;
            --
          WHEN g_k_cod_docum_tam_cpf THEN
            --
            IF l_tip_docum IS NULL THEN
              --
              l_tip_docum := g_k_tip_docum_cpf;
              --
            END IF;
            --
            mx('l_tip_docum: ', l_tip_docum);
            --
          WHEN g_k_cod_docum_tam_cgc THEN
            --
            IF l_tip_docum IS NULL THEN
              --
              l_tip_docum := g_k_tip_docum_cgc;
              --
            END IF;
            --
            mx('l_tip_docum: ', l_tip_docum);
            --
          ELSE
            --
            l_cod_error := '20098229';
            --
            RAISE l_exception;
            --
        END CASE;
        --
      END IF;
      --
      BEGIN
        --
        dc_p_valida_docum_vcr(l_tip_docum, l_cod_docum);
        --
      EXCEPTION
        --
        WHEN OTHERS THEN
          --
          l_cod_error := '20098229';
          --
          RAISE l_exception;
          --
      END;
      --
      g_mca_valida := 'N';
      --
      pp_asigna_globales_defecto;
      --
      g_mca_valida := NULL;
      --
      --I 4.82
      IF NVL(l_num_cotizacion,'9999999999999') <> '9999999999999' then
         trn_k_global.asigna('NUM_COTIZACION', l_num_cotizacion);
      END if;
    --F 4.82
      --
      CASE l_tip_docum
      --
        WHEN g_k_tip_docum_cpf THEN
          --
          ea_k_serasa.p_valida_documento_pf(p_cod_cia        => p_cod_cia              ,
                                            p_cod_ramo       => p_cod_ramo             ,
                                            p_tip_docum      => l_tip_docum            ,
                                            p_cod_docum      => l_cod_docum            ,
                                            p_tip_benef      => em.TIP_BENEF_ASEGURADO ,
                                            p_cod_error      => l_cod_error            ,
                                            p_reg            => l_reg_a2009016         ,
                                            p_cod_severidade => l_cod_severidade       ,
                                            p_tip_produto    => '999'                  );
          --
          IF l_cod_error IS NULL THEN
             --
             BEGIN
             --INI AMARCO
               BEGIN
                 --
                 dc_k_a1001331_vcr_1.p_lee(p_cod_cia        => p_cod_cia              ,
                                           p_tip_docum      => l_tip_docum            ,
                                           p_cod_docum      => l_cod_docum            );
                 --
                 l_tip_act_economica := dc_k_a1001331_vcr_1.f_tip_act_economica_vcr;
                 --
                 em_k_a2007702_vcr.p_lee(p_cod_cia           => p_cod_cia          ,
                                         p_cod_act_econ_vcr  => l_tip_act_economica,
                                         p_cod_grupo         => NULL               ,
                                         p_cod_coletivo      => NULL               );
                 --
                 l_desc_act_econ_vcr := em_k_a2007702_vcr.f_desc_act_econ_vcr;
                 --
              EXCEPTION
                 WHEN OTHERS
                 THEN
                    --
                    l_tip_act_economica := NULL;
                    l_desc_act_econ_vcr := NULL;
                    --
              END;
               --
              IF ea_k_ws_motor_subscr.f_retorna_motor_subscr(p_cod_cia,
                                                             p_cod_ramo,
                                                             l_hab_motor_serasa) -- I MOTORSUBS 3.83
               THEN
                l_rec_Dados_Motor := ea_k_ws_motor_subscr.f_retorna_motor_subscricao;
                --
                BEGIN
                  --
                  SELECT nvl(to_number(regexp_replace(l_rec_Dados_Motor.rec_registros('CALC_SERASA_B49C_RETORNO')
                                                      .valor,
                                                      '[^0-9]',
                                                      '')),
                             0)
                    INTO l_cod_error
                    from dual;
                  --
                EXCEPTION
                  WHEN OTHERS THEN
                    --l_cod_error := trn.nulo;
                      l_cod_error := 30090008; --5.65
                END;
                IF l_cod_error = 30090008 OR l_cod_error = 30090007 THEN
                  --    IF l_rec_Dados_Motor.retPolitica =
                  --    ea_k_ws_motor_subscr.g_k_msg_risco_serasa THEN
                  --
                  --    l_cod_error := '30090008';
                  --
                  RAISE l_exception;
                  --
                  --   ELSIF l_rec_Dados_Motor.retPolitica =  'CPF Irregular na Receita Federal' THEN
                  --
                  --    l_cod_error := '30090007';
                  --
                  --   RAISE l_exception;
                  --
                ELSE
                  --
                  OPEN l_retorno FOR
                    WITH dados AS
                     (SELECT l_reg_a2009016.nom_tercero AS NOM_TERCERO,
                             l_reg_a2009016.fec_nacimiento AS FEC_NASCIMENTO,
                             '' AS TLF_MOVIL,
                             l_reg_a2009016.tlf_zona ||
                             l_reg_a2009016.tlf_numero AS TLF_NUMERO,
                             '' AS TLF_NUMERO_COM,
                             trim(a1001331.email) AS EMAIL,
                             l_reg_a2009016.sexo AS SEXO,
                             l_reg_a2009016.estado_civil AS ESTADO_CIVIL,
                             1 AS LINHA --RANK() OVER(ORDER BY l_reg_a2009016.FEC_CONSULTA DESC) AS LINHA
                        FROM DUAL
                        LEFT OUTER JOIN A1001331
                          ON l_reg_a2009016.cod_cia = A1001331.cod_cia
                         AND l_reg_a2009016.tip_docum = A1001331.tip_docum
                         AND l_reg_a2009016.cod_docum = A1001331.cod_docum
                            /*WHERE*/
                         AND l_reg_a2009016.cod_cia = p_cod_cia
                         AND l_reg_a2009016.tip_docum = l_tip_docum
                         AND l_reg_a2009016.cod_docum = l_cod_docum
                         AND l_reg_a2009016.cod_situacao NOT IN
                             (0, 3, 4, 6, 7, 9)) -- 2.83
                    SELECT 'NOM_TERCERO' AS NOM_CAMPO_NOM_TERCERO,
                           dados.nom_tercero AS NOM_TERCERO,
                           'FEC_NASCIMENTO' AS NOM_CAMPO_FEC_NASCIMENTO,
                           dados.fec_nascimento AS FEC_NASCIMENTO,
                           'TLF_MOVIL' AS NOM_CAMPO_TLF_MOVIL,
                           dados.tlf_movil AS TLF_MOVIL,
                           'TLF_NUMERO' AS NOM_CAMPO_TLF_NUMERO,
                           dados.tlf_numero AS TLF_NUMERO,
                           'TLF_NUMERO_COM' AS NOM_CAMPO_TLF_NUMERO_COM,
                           dados.tlf_numero_com AS TLF_NUMERO_COM,
                           'EMAIL' AS NOM_CAMPO_EMAIL,
                           dados.email AS EMAIL,
                           'MCA_AUTORIZA_SMS' AS NOM_CAMPO_MCA_AUTORIZA_SMS,
                           '' AS MCA_AUTORIZA_SMS,
                           'SEXO' AS NOM_CAMPO_SEXO,
                           dados.sexo AS SEXO,
                           'ESTADO_CIVIL' AS NOM_CAMPO_ESTADO_CIVIL,
                           dados.estado_civil AS ESTADO_CIVIL,
                           'TIP_ACT_ECONOMICA' AS NOM_CAMPO_TIP_ACT_ECONOMICA,
                           l_tip_act_economica AS TIP_ACT_ECONOMICA,
                           'DESC_ACT_ECONOMICA' AS NOM_CAMPO_DESC_ACT_ECONOMICA,
                           l_desc_act_econ_vcr AS DESC_ACT_ECONOMICA
                      FROM dados;
                  --FIN AMARCO
                  --
                END IF;
              ELSE
               OPEN l_retorno
                   FOR
                     WITH dados AS (
                      SELECT
                         a2009016_vcr.nom_tercero                           AS NOM_TERCERO,
                         a2009016_vcr.fec_nacimiento                        AS FEC_NASCIMENTO,
                         ''                                                 AS TLF_MOVIL,
                         a2009016_vcr.tlf_zona || a2009016_vcr.tlf_numero   AS TLF_NUMERO,
                         ''                                                 AS TLF_NUMERO_COM,
                         trim(a1001331.email)                               AS EMAIL,
                         a2009016_vcr.sexo                                  AS SEXO,
                         a2009016_vcr.estado_civil                          AS ESTADO_CIVIL,
                         RANK() OVER ( ORDER BY FEC_CONSULTA DESC )         AS LINHA
                      FROM
                         A2009016_VCR
                         LEFT OUTER JOIN A1001331 ON  A2009016_VCR.cod_cia   = A1001331.cod_cia
                                                  AND A2009016_VCR.tip_docum = A1001331.tip_docum
                                                  AND A2009016_VCR.cod_docum = A1001331.cod_docum
                      WHERE
                             A2009016_VCR.cod_cia   = p_cod_cia
                         AND A2009016_VCR.tip_docum = l_tip_docum
                         AND A2009016_VCR.cod_docum = l_cod_docum
                         AND A2009016_VCR.cod_situacao NOT IN (0, 3, 4, 6, 7, 9)) -- 2.83
                     SELECT
                        'NOM_TERCERO'                                                                          AS NOM_CAMPO_NOM_TERCERO,
                         dados.nom_tercero                                                                     AS NOM_TERCERO,
                         'FEC_NASCIMENTO'                                                                      AS NOM_CAMPO_FEC_NASCIMENTO,
                         dados.fec_nascimento                                                                  AS FEC_NASCIMENTO,
                         'TLF_MOVIL'                                                                           AS NOM_CAMPO_TLF_MOVIL,
                         dados.tlf_movil                                                                       AS TLF_MOVIL,
                         'TLF_NUMERO'                                                                          AS NOM_CAMPO_TLF_NUMERO,
                         dados.tlf_numero                                                                      AS TLF_NUMERO,
                         'TLF_NUMERO_COM'                                                                      AS NOM_CAMPO_TLF_NUMERO_COM,
                         dados.tlf_numero_com                                                                  AS TLF_NUMERO_COM,
                         'EMAIL'                                                                               AS NOM_CAMPO_EMAIL,
                         dados.email                                                                           AS EMAIL,
                         'MCA_AUTORIZA_SMS'                                                                    AS NOM_CAMPO_MCA_AUTORIZA_SMS,
                         ''                                                                                    AS MCA_AUTORIZA_SMS,
                         'SEXO'                                                                                AS NOM_CAMPO_SEXO,
                         dados.sexo                                                                            AS SEXO,
                         'ESTADO_CIVIL'                                                                        AS NOM_CAMPO_ESTADO_CIVIL,
                         dados.estado_civil                                                                    AS ESTADO_CIVIL,
                         'TIP_ACT_ECONOMICA'                                                                   AS NOM_CAMPO_TIP_ACT_ECONOMICA,
                         l_tip_act_economica                                                                   AS TIP_ACT_ECONOMICA,
                         'DESC_ACT_ECONOMICA'                                                                  AS NOM_CAMPO_DESC_ACT_ECONOMICA,
                         l_desc_act_econ_vcr                                                                   AS DESC_ACT_ECONOMICA
                       FROM dados;
               --FIN AMARCO
               END IF; -- MOTORSUBS 3.83
               --
             END;
             --
          ELSE
            --
            RAISE l_exception;
            --
          END IF;
          --
        WHEN g_k_tip_docum_cgc THEN
          --
          ea_k_serasa.p_valida_documento_pj(p_cod_cia        => p_cod_cia              ,
                                            p_tip_docum      => l_tip_docum            ,
                                            p_cod_docum      => l_cod_docum            ,
                                            p_tip_benef      => em.TIP_BENEF_ASEGURADO ,
                                            p_cod_error      => l_cod_error            ,
                                            p_reg            => l_reg_a2009017         ,
                                            p_tip_produto    => '999'                  );
          --
          IF l_cod_error IS NULL THEN
            --
            BEGIN
              --
              --INI AMARCO
              BEGIN
                 --
                 dc_k_a1001331_vcr_1.p_lee(p_cod_cia        => p_cod_cia              ,
                                           p_tip_docum      => l_tip_docum            ,
                                           p_cod_docum      => l_cod_docum            );
                 --
                 l_tip_act_economica := dc_k_a1001331_vcr_1.f_tip_act_economica_vcr;
                 --
                 em_k_a2007702_vcr.p_lee(p_cod_cia           => p_cod_cia          ,
                                         p_cod_act_econ_vcr  => l_tip_act_economica,
                                         p_cod_grupo         => NULL               ,
                                         p_cod_coletivo      => NULL               );
                 --
                 l_desc_act_econ_vcr := em_k_a2007702_vcr.f_desc_act_econ_vcr;
                 --
              EXCEPTION
                 WHEN OTHERS
                 THEN
                    --
                    l_tip_act_economica := NULL;
                    l_desc_act_econ_vcr := NULL;
                    --
              END;
              --
              IF ea_k_ws_motor_subscr.f_retorna_motor_subscr(p_cod_cia,
                                                             p_cod_ramo,
                                                             l_hab_motor_serasa) -- I MOTORSUBS 3.83
               THEN
                l_rec_Dados_Motor := ea_k_ws_motor_subscr.f_retorna_motor_subscricao;
                --
                BEGIN
                  --
                  SELECT nvl(to_number(regexp_replace(l_rec_Dados_Motor.rec_registros('CALC_RFPJ_RETORNO')
                                                      .valor,
                                                      '[^0-9]',
                                                      '')),
                             0)
                    INTO l_cod_error
                    from dual;
                  --
                EXCEPTION
                  WHEN OTHERS THEN
                    l_cod_error := trn.nulo;
                END;
                --
                IF l_cod_error = 30090011 THEN
                  --OR l_cod_error = 30090007 THEN
                  --    IF l_rec_Dados_Motor.retPolitica =
                  --    ea_k_ws_motor_subscr.g_k_msg_risco_serasa THEN
                  --
                  --    l_cod_error := '30090008';
                  --
                  RAISE l_exception;
                  --
                  --   ELSIF l_rec_Dados_Motor.retPolitica =  'CPF Irregular na Receita Federal' THEN
                  --
                  --    l_cod_error := '30090007';
                  --
                  --   RAISE l_exception;
                  --
                ELSE
                  OPEN l_retorno FOR
                    SELECT 'NOM_TERCERO' AS NOM_CAMPO_NOM_TERCERO,
                           '' AS NOM_TERCERO,
                           'FEC_NASCIMENTO' AS NOM_CAMPO_FEC_NASCIMENTO,
                           '' AS FEC_NASCIMENTO,
                           'TLF_MOVIL' AS NOM_CAMPO_TLF_MOVIL,
                           '' AS TLF_MOVIL,
                           'TLF_NUMERO' AS NOM_CAMPO_TLF_NUMERO,
                           '' AS TLF_NUMERO,
                           'TLF_NUMERO_COM' AS NOM_CAMPO_TLF_NUMERO_COM,
                           '' AS TLF_NUMERO_COM,
                           'EMAIL' AS NOM_CAMPO_EMAIL,
                           '' AS EMAIL,
                           'MCA_AUTORIZA_SMS' AS NOM_CAMPO_MCA_AUTORIZA_SMS,
                           '' AS MCA_AUTORIZA_SMS,
                           'SEXO' AS NOM_CAMPO_SEXO,
                           '' AS SEXO,
                           'ESTADO_CIVIL' AS NOM_CAMPO_ESTADO_CIVIL,
                           '' AS ESTADO_CIVIL,
                           'TIP_ACT_ECONOMICA' AS NOM_CAMPO_TIP_ACT_ECONOMICA,
                           l_tip_act_economica AS TIP_ACT_ECONOMICA,
                           'DESC_ACT_ECONOMICA' AS NOM_CAMPO_DESC_ACT_ECONOMICA,
                           l_desc_act_econ_vcr AS DESC_ACT_ECONOMICA
                      FROM DUAL;
                END IF; -- MOTORSUBS 3.83
                --
              ELSE
                --
              OPEN l_retorno
                  FOR
                    WITH dados AS (
                     SELECT
                        a2009017_vcr.nom_tercero                                                              AS NOM_TERCERO,
                        a1001331.tlf_movil                                                                    AS TLF_MOVIL,
                        a1001331.tlf_zona||a1001331.TLF_NUMERO                                                AS TLF_NUMERO,
                        a1001331.tlf_zona_com||a1001331.tlf_numero_com                                        AS TLF_NUMERO_COM,
                        trim(a1001331.email)                                                                  AS EMAIL,
                        RANK() OVER ( ORDER BY FEC_CONSULTA DESC )                                            AS LINHA
                     FROM
                        (A2009017_VCR
                        LEFT OUTER JOIN A1001331 ON  A2009017_VCR.cod_cia   = A1001331.cod_cia
                                                 AND A2009017_VCR.tip_docum = A1001331.tip_docum
                                                 AND A2009017_VCR.cod_docum = A1001331.cod_docum)
                     WHERE
                            A2009017_VCR.cod_cia   = p_cod_cia
                        AND A2009017_VCR.tip_docum = l_tip_docum
                        AND A2009017_VCR.cod_docum = l_cod_docum
                        AND A2009017_VCR.cod_situacao NOT IN (0, 3, 4, 6, 7, 9)) -- 2.83
                    SELECT
                       'NOM_TERCERO'                                                                         AS NOM_CAMPO_NOM_TERCERO,
                        dados.nom_tercero                                                                    AS NOM_TERCERO,
                        'FEC_NASCIMENTO'                                                                     AS NOM_CAMPO_FEC_NASCIMENTO,
                        ''                                                                                   AS FEC_NASCIMENTO,
                        'TLF_MOVIL'                                                                          AS NOM_CAMPO_TLF_MOVIL,
                        dados.tlf_movil                                                                      AS TLF_MOVIL,
                        'TLF_NUMERO'                                                                         AS NOM_CAMPO_TLF_NUMERO,
                        dados.tlf_numero                                                                     AS TLF_NUMERO,
                        'TLF_NUMERO_COM'                                                                     AS NOM_CAMPO_TLF_NUMERO_COM,
                        dados.tlf_numero_com                                                                 AS TLF_NUMERO_COM,
                        'EMAIL'                                                                              AS NOM_CAMPO_EMAIL,
                        dados.email                                                                          AS EMAIL,
                        'MCA_AUTORIZA_SMS'                                                                   AS NOM_CAMPO_MCA_AUTORIZA_SMS,
                        ''                                                                                   AS MCA_AUTORIZA_SMS,
                        'SEXO'                                                                               AS NOM_CAMPO_SEXO,
                        ''                                                                                   AS SEXO,
                        'ESTADO_CIVIL'                                                                       AS NOM_CAMPO_ESTADO_CIVIL,
                        ''                                                                                   AS ESTADO_CIVIL,
                        'TIP_ACT_ECONOMICA'                                                                  AS NOM_CAMPO_TIP_ACT_ECONOMICA,
                        l_tip_act_economica                                                                  AS TIP_ACT_ECONOMICA,
                        'DESC_ACT_ECONOMICA'                                                                 AS NOM_CAMPO_DESC_ACT_ECONOMICA,
                        l_desc_act_econ_vcr                                                                  AS DESC_ACT_ECONOMICA
                      FROM dados
                     WHERE linha = trn.UNO;
              --
              END IF; --MOTORSUBS 3.83
              --
            END;
            --
          ELSE
            --
            RAISE l_exception;
            --
          END IF;
        --
      END CASE;
      --
      p_gerar_xml_segurado(l_retorno, p_xml);
      --
      IF LENGTH(p_xml) = trn.CERO THEN
        --
        l_cod_error := '20099390'; -- 3.14
        --
        RAISE l_exception;
        --
      END IF;
      --
      IF l_retorno%ISOPEN THEN CLOSE l_retorno; END IF;
      --
      trn_k_global.borra_todas;
      --
      mx('F', 'pp_ws_consulta_dados_segurado');
      --
   EXCEPTION
     --
     WHEN l_exception THEN
       --
       IF l_retorno%ISOPEN THEN CLOSE l_retorno; END IF;
       --
       g_err_msg.EXTEND(1); -- 4.99
       g_err_msg(g_err_msg.LAST) := fp_trata_msg('COD_DOCUM', -- 4.99
                                                                                 NULL,
                                                                                 g_k_pre_msg_erro || l_cod_error || g_k_sep_cod_msg);
       --
       pp_processa_mensagem(g_err_msg, -- 4.99
                            l_retorno);
       --
       p_gerar_xml_mensagem(l_retorno, p_xml);
       --
       g_err_msg := NULL; -- 4.99
       --
       trn_k_global.borra_todas;
       --
     WHEN OTHERS THEN
       --
       mx('F', 'pp_ws_consulta_dados_segurado - EXCEPTION: ' || SQLERRM);
       --
       IF l_retorno%ISOPEN THEN CLOSE l_retorno; END IF;
       --
       trn_k_global.borra_todas;
       --
   END pp_ws_consulta_dados_segurado;
   --
   -- JWOLFF v5.36: Incluir regla serasa para conductor
   /* ------------------------------------------------------
   || Devolve para o webmethods parametro CLOB: p_xml
   */ ------------------------------------------------------
   --
   PROCEDURE pp_ws_consulta_dados_conductor(p_cod_cia   IN a2000030.cod_cia%TYPE ,
                                            p_cod_ramo  IN a2000030.cod_ramo%TYPE,
                                            p_cod_agt   IN a2000030.cod_agt%TYPE ,
                                            p_xml_in    IN CLOB                  ,
                                            p_xml       OUT CLOB                 )
   IS
      --
      l_retorno                ref_cursor;
      l_count_cond             NUMBER;
      l_count_cond_restricao   NUMBER;
      l_tip_docum              a2000030.tip_docum%TYPE;
      l_cod_docum              a2000030.cod_docum%TYPE;
      l_val_cod_docum          a1001331.cod_docum%TYPE;
      l_cod_error              g1010020.cod_mensaje%TYPE;
      l_cod_severidade         g2019021_vcr.cod_severidade_serasa%TYPE;
      --
      l_val_tamanho_cod_docum       NUMBER;
      l_val_caracteres_cod_docum    NUMBER;
      l_valida_tip_docum            NUMBER;
      --
      l_possui_erro            BOOLEAN := FALSE;
      --
      l_reg_a2009016           a2009016_vcr%ROWTYPE;
      l_reg_a2009017           a2009017_vcr%ROWTYPE;
      --
      l_exception              EXCEPTION;
      --
      l_tip_act_economica a1001331_vcr.tip_act_economica_vcr%TYPE;
      l_desc_act_econ_vcr a2007702_vcr.desc_act_econ_vcr    %TYPE;
      l_hab_motor_serasa df_cmn_nwt_xx_cnn.vrb_nam_val%TYPE;
      l_hab_motor_nortix df_cmn_nwt_xx_cnn.vrb_nam_val%TYPE;
      l_rec_Dados_Motor  ea_k_ws_motor_subscr.rec_Dados_Motor;
      --
      l_num_cotizacion c2000000.num_cotizacion%TYPE;
   BEGIN
      --
      g_fic_traza := 'ws_cons';
      --
      mx('I', 'pp_ws_consulta_dados_segurado');
      --
      l_num_cotizacion       := trn_k_global.ref_f_global('NUM_COTIZACION');
      --
      trn_k_global.borra_todas;
      --
      g_err_msg :=  TYPTAB_MSG_WS();
      --
      BEGIN
          l_hab_motor_serasa := f_recupera_constante('MOTOR_SUBSCR_HABILITA_SERASA');
        EXCEPTION
          WHEN OTHERS THEN
            l_hab_motor_serasa := trn.NO;
      END;
      --
      BEGIN
          l_hab_motor_nortix := f_recupera_constante('MOTOR_SUBSCR_HABILITA_NORTIX');
        EXCEPTION
          WHEN OTHERS THEN
            l_hab_motor_nortix := trn.NO;
      END;
      --
      trn_k_global.asigna('HAB_MOTOR_SERASA', l_hab_motor_serasa);
      trn_k_global.asigna('HAB_MOTOR_NORTIX', l_hab_motor_nortix);
      --
      --
      --
      trn_k_global.asigna('COD_CIA'   ,p_cod_cia               );
      trn_k_global.asigna('COD_RAMO'  ,p_cod_ramo              );
      trn_k_global.asigna('COD_AGT'   ,NVL(p_cod_agt, '999999'));
      trn_k_global.asigna('COD_TARIFA',g_k_cod_modalidade      );
      --
      l_tip_docum := fp_recupera_valor (p_xml_in, 'TIP_DOCUM');
      l_cod_docum := fp_recupera_valor (p_xml_in, 'COD_DOCUM');
      l_val_cod_docum := LENGTH(TRIM(TRANSLATE(l_cod_docum, ' 0123456789', ' ')));
      --
      l_val_caracteres_cod_docum := NVL(LENGTH(REGEXP_REPLACE(l_cod_docum,'[[:digit:]]', '')),trn.CERO);
      --
      mx('l_cod_docum: ', l_cod_docum);
      --
      -- TRATAMENTO PARA VALORES COM ZERO A ESQUERDA
      IF LENGTH(l_cod_docum) < 11 THEN
         --
         l_cod_docum := LPAD(l_cod_docum, 11, '0');
         --
      ELSIF LENGTH(l_cod_docum) > 11 AND LENGTH(l_cod_docum) < 14 THEN
         --
         l_cod_docum := LPAD(l_cod_docum, 14, '0');
         --
      END IF;
      --
      mx('l_cod_docum: ', l_cod_docum);
      --
      l_val_tamanho_cod_docum    := LENGTH(TRIM(l_cod_docum));
      --
      -- Validacao do tipo de documento
      --
      IF l_tip_docum IS NOT NULL THEN
        --
        l_valida_tip_docum := NVL(REGEXP_INSTR(l_tip_docum,g_k_tip_docum_cpf||'|'||g_k_tip_docum_cgc),trn.CERO);
        --
        IF l_valida_tip_docum = trn.CERO THEN
          --
          l_cod_error := '20098159';
          --
          RAISE l_exception;
          --
        END IF;
        --
        mx('l_valida_tip_docum', l_valida_tip_docum);
        --
      END IF;
      --
      mx('l_tip_docum: ', l_tip_docum);
      --
      -- Validacao de numero do documento
      --
      IF l_val_caracteres_cod_docum > trn.CERO THEN  -- possui caracteres
        --
        l_cod_error := '20098003';
        --
        mx('l_val_caracteres_cod_docum: ', l_val_caracteres_cod_docum);
        --
        RAISE l_exception;
        --
      ELSE
        --
        CASE l_val_tamanho_cod_docum
          --
          WHEN trn.CERO THEN
            --
            l_cod_error := '20098000';
            --
            mx('l_val_tamanho_cod_docum: ', l_val_tamanho_cod_docum);
            --
            RAISE l_exception;
            --
          WHEN g_k_cod_docum_tam_cpf THEN
            --
            IF l_tip_docum IS NULL THEN
              --
              l_tip_docum := g_k_tip_docum_cpf;
              --
            END IF;
            --
            mx('l_tip_docum: ', l_tip_docum);
            --
          /*solo aplica en persona fisica
            WHEN g_k_cod_docum_tam_cgc THEN
            --
            IF l_tip_docum IS NULL THEN
              --
              l_tip_docum := g_k_tip_docum_cgc;
              --
            END IF;
            --
            mx('l_tip_docum: ', l_tip_docum);
            --*/
          ELSE
            --
            l_cod_error := '20098229';
            --
            RAISE l_exception;
            --
        END CASE;
        --
      END IF;
      --
      BEGIN
        --
        dc_p_valida_docum(l_tip_docum, l_cod_docum);
        --
      EXCEPTION
        --
        WHEN OTHERS THEN
          --
          l_cod_error := '20098229';
          --
          RAISE l_exception;
          --
      END;
      --
      g_mca_valida := 'N';
      --
      pp_asigna_globales_defecto;
      --
      g_mca_valida := NULL;
      --
      --
      IF NVL(l_num_cotizacion,'9999999999999') <> '9999999999999' then
         trn_k_global.asigna('NUM_COTIZACION', l_num_cotizacion);
      END if;
      --
      --
      CASE l_tip_docum
      --
        WHEN g_k_tip_docum_cpf THEN
          --
          ea_k_serasa.p_valida_documento_pf(p_cod_cia        => p_cod_cia              ,
                                            p_cod_ramo       => p_cod_ramo             ,
                                            p_tip_docum      => l_tip_docum            ,
                                            p_cod_docum      => l_cod_docum            ,
                                            p_tip_benef      => em.TIP_BENEF_CONDUCTOR ,
                                            p_cod_error      => l_cod_error            ,
                                            p_reg            => l_reg_a2009016         ,
                                            p_cod_severidade => l_cod_severidade       ,
                                            p_tip_produto    => '999'                  );
          --
          IF l_cod_error IS NULL THEN
             --
             BEGIN
             --
               BEGIN
                 --
                 dc_k_a1001331_vcr_1.p_lee(p_cod_cia        => p_cod_cia              ,
                                           p_tip_docum      => l_tip_docum            ,
                                           p_cod_docum      => l_cod_docum            );
                 --
                 l_tip_act_economica := dc_k_a1001331_vcr_1.f_tip_act_economica_vcr;
                 --
                 em_k_a2007702_vcr.p_lee(p_cod_cia           => p_cod_cia          ,
                                         p_cod_act_econ_vcr  => l_tip_act_economica,
                                         p_cod_grupo         => NULL               ,
                                         p_cod_coletivo      => NULL               );
                 --
                 l_desc_act_econ_vcr := em_k_a2007702_vcr.f_desc_act_econ_vcr;
                 --
              EXCEPTION
                 WHEN OTHERS
                 THEN
                    --
                    l_tip_act_economica := NULL;
                    l_desc_act_econ_vcr := NULL;
                    --
              END;
               --
              IF ea_k_ws_motor_subscr.f_retorna_motor_subscr(p_cod_cia,
                                                             p_cod_ramo,
                                                             l_hab_motor_serasa) -- I MOTORSUBS 3.83
               THEN
                l_rec_Dados_Motor := ea_k_ws_motor_subscr.f_retorna_motor_subscricao;
                --
                BEGIN
                  --
                  SELECT nvl(to_number(regexp_replace(l_rec_Dados_Motor.rec_registros('CALC_SERASA_B49C_RETORNO')
                                                      .valor,
                                                      '[^0-9]',
                                                      '')),
                             0)
                    INTO l_cod_error
                    from dual;
                  --
                EXCEPTION
                  WHEN OTHERS THEN
                    l_cod_error := trn.nulo;
                END;
                IF l_cod_error = 30090008 OR l_cod_error = 30090007 THEN
                  --    IF l_rec_Dados_Motor.retPolitica =
                  --    ea_k_ws_motor_subscr.g_k_msg_risco_serasa THEN
                  --
                  --    l_cod_error := '30090008';
                  --
                  RAISE l_exception;
                  --
                  --   ELSIF l_rec_Dados_Motor.retPolitica =  'CPF Irregular na Receita Federal' THEN
                  --
                  --    l_cod_error := '30090007';
                  --
                  --   RAISE l_exception;
                  --
                END IF;
                --
               END IF; --
               --
             END;
             --
          ELSE
            --
            RAISE l_exception;
            --
          END IF;
          --
        /*solo aplica persona fisica
          WHEN g_k_tip_docum_cgc THEN
          --
          ea_k_serasa.p_valida_documento_pj(p_cod_cia        => p_cod_cia              ,
                                            p_tip_docum      => l_tip_docum            ,
                                            p_cod_docum      => l_cod_docum            ,
                                            p_tip_benef      => em.TIP_BENEF_ASEGURADO ,
                                            p_cod_error      => l_cod_error            ,
                                            p_reg            => l_reg_a2009017         ,
                                            p_tip_produto    => '999'                  );
          --
          IF l_cod_error IS NULL THEN
            --
            BEGIN
              --
              --INI AMARCO
              BEGIN
                 --
                 dc_k_a1001331_vcr_1.p_lee(p_cod_cia        => p_cod_cia              ,
                                           p_tip_docum      => l_tip_docum            ,
                                           p_cod_docum      => l_cod_docum            );
                 --
                 l_tip_act_economica := dc_k_a1001331_vcr_1.f_tip_act_economica_vcr;
                 --
                 em_k_a2007702_vcr.p_lee(p_cod_cia           => p_cod_cia          ,
                                         p_cod_act_econ_vcr  => l_tip_act_economica,
                                         p_cod_grupo         => NULL               ,
                                         p_cod_coletivo      => NULL               );
                 --
                 l_desc_act_econ_vcr := em_k_a2007702_vcr.f_desc_act_econ_vcr;
                 --
              EXCEPTION
                 WHEN OTHERS
                 THEN
                    --
                    l_tip_act_economica := NULL;
                    l_desc_act_econ_vcr := NULL;
                    --
              END;
              --
              IF ea_k_ws_motor_subscr.f_retorna_motor_subscr(p_cod_cia,
                                                             p_cod_ramo,
                                                             l_hab_motor_serasa) -- I MOTORSUBS 3.83
               THEN
                l_rec_Dados_Motor := ea_k_ws_motor_subscr.f_retorna_motor_subscricao;
                --
                BEGIN
                  --
                  SELECT nvl(to_number(regexp_replace(l_rec_Dados_Motor.rec_registros('CALC_RFPJ_RETORNO')
                                                      .valor,
                                                      '[^0-9]',
                                                      '')),
                             0)
                    INTO l_cod_error
                    from dual;
                  --
                EXCEPTION
                  WHEN OTHERS THEN
                    l_cod_error := trn.nulo;
                END;
                --
                IF l_cod_error = 30090011 THEN
                  --OR l_cod_error = 30090007 THEN
                  --    IF l_rec_Dados_Motor.retPolitica =
                  --    ea_k_ws_motor_subscr.g_k_msg_risco_serasa THEN
                  --
                  --    l_cod_error := '30090008';
                  --
                  RAISE l_exception;
                  --
                  --   ELSIF l_rec_Dados_Motor.retPolitica =  'CPF Irregular na Receita Federal' THEN
                  --
                  --    l_cod_error := '30090007';
                  --
                  --   RAISE l_exception;
                  --
                ELSE
                  OPEN l_retorno FOR
                    SELECT 'NOM_TERCERO' AS NOM_CAMPO_NOM_TERCERO,
                           '' AS NOM_TERCERO,
                           'FEC_NASCIMENTO' AS NOM_CAMPO_FEC_NASCIMENTO,
                           '' AS FEC_NASCIMENTO,
                           'TLF_MOVIL' AS NOM_CAMPO_TLF_MOVIL,
                           '' AS TLF_MOVIL,
                           'TLF_NUMERO' AS NOM_CAMPO_TLF_NUMERO,
                           '' AS TLF_NUMERO,
                           'TLF_NUMERO_COM' AS NOM_CAMPO_TLF_NUMERO_COM,
                           '' AS TLF_NUMERO_COM,
                           'EMAIL' AS NOM_CAMPO_EMAIL,
                           '' AS EMAIL,
                           'MCA_AUTORIZA_SMS' AS NOM_CAMPO_MCA_AUTORIZA_SMS,
                           '' AS MCA_AUTORIZA_SMS,
                           'SEXO' AS NOM_CAMPO_SEXO,
                           '' AS SEXO,
                           'ESTADO_CIVIL' AS NOM_CAMPO_ESTADO_CIVIL,
                           '' AS ESTADO_CIVIL,
                           'TIP_ACT_ECONOMICA' AS NOM_CAMPO_TIP_ACT_ECONOMICA,
                           l_tip_act_economica AS TIP_ACT_ECONOMICA,
                           'DESC_ACT_ECONOMICA' AS NOM_CAMPO_DESC_ACT_ECONOMICA,
                           l_desc_act_econ_vcr AS DESC_ACT_ECONOMICA
                      FROM DUAL;
                END IF; -- MOTORSUBS 3.83
                --
              ELSE
                --
              OPEN l_retorno
                  FOR
                    WITH dados AS (
                     SELECT
                        a2009017_vcr.nom_tercero                                                              AS NOM_TERCERO,
                        a1001331.tlf_movil                                                                    AS TLF_MOVIL,
                        a1001331.tlf_zona||a1001331.TLF_NUMERO                                                AS TLF_NUMERO,
                        a1001331.tlf_zona_com||a1001331.tlf_numero_com                                        AS TLF_NUMERO_COM,
                        trim(a1001331.email)                                                                  AS EMAIL,
                        RANK() OVER ( ORDER BY FEC_CONSULTA DESC )                                            AS LINHA
                     FROM
                        (A2009017_VCR
                        LEFT OUTER JOIN A1001331 ON  A2009017_VCR.cod_cia   = A1001331.cod_cia
                                                 AND A2009017_VCR.tip_docum = A1001331.tip_docum
                                                 AND A2009017_VCR.cod_docum = A1001331.cod_docum)
                     WHERE
                            A2009017_VCR.cod_cia   = p_cod_cia
                        AND A2009017_VCR.tip_docum = l_tip_docum
                        AND A2009017_VCR.cod_docum = l_cod_docum
                        AND A2009017_VCR.cod_situacao NOT IN (0, 3, 4, 6, 7, 9)) -- 2.83
                    SELECT
                       'NOM_TERCERO'                                                                         AS NOM_CAMPO_NOM_TERCERO,
                        dados.nom_tercero                                                                    AS NOM_TERCERO,
                        'FEC_NASCIMENTO'                                                                     AS NOM_CAMPO_FEC_NASCIMENTO,
                        ''                                                                                   AS FEC_NASCIMENTO,
                        'TLF_MOVIL'                                                                          AS NOM_CAMPO_TLF_MOVIL,
                        dados.tlf_movil                                                                      AS TLF_MOVIL,
                        'TLF_NUMERO'                                                                         AS NOM_CAMPO_TLF_NUMERO,
                        dados.tlf_numero                                                                     AS TLF_NUMERO,
                        'TLF_NUMERO_COM'                                                                     AS NOM_CAMPO_TLF_NUMERO_COM,
                        dados.tlf_numero_com                                                                 AS TLF_NUMERO_COM,
                        'EMAIL'                                                                              AS NOM_CAMPO_EMAIL,
                        dados.email                                                                          AS EMAIL,
                        'MCA_AUTORIZA_SMS'                                                                   AS NOM_CAMPO_MCA_AUTORIZA_SMS,
                        ''                                                                                   AS MCA_AUTORIZA_SMS,
                        'SEXO'                                                                               AS NOM_CAMPO_SEXO,
                        ''                                                                                   AS SEXO,
                        'ESTADO_CIVIL'                                                                       AS NOM_CAMPO_ESTADO_CIVIL,
                        ''                                                                                   AS ESTADO_CIVIL,
                        'TIP_ACT_ECONOMICA'                                                                  AS NOM_CAMPO_TIP_ACT_ECONOMICA,
                        l_tip_act_economica                                                                  AS TIP_ACT_ECONOMICA,
                        'DESC_ACT_ECONOMICA'                                                                 AS NOM_CAMPO_DESC_ACT_ECONOMICA,
                        l_desc_act_econ_vcr                                                                  AS DESC_ACT_ECONOMICA
                      FROM dados
                     WHERE linha = trn.UNO;
              --
              END IF; --MOTORSUBS 3.83
              --
            END;
            --
          ELSE
            --
            RAISE l_exception;
            --
          END IF;
        --*/
      END CASE;
      --
      p_gerar_xml_conductor(l_retorno, p_xml);
      --
      IF LENGTH(p_xml) = trn.CERO THEN
        --
        l_cod_error := '20099390'; -- 3.14
        --
        RAISE l_exception;
        --
      END IF;
      --
      IF l_retorno%ISOPEN THEN CLOSE l_retorno; END IF;
      --
      trn_k_global.borra_todas;
      --
      mx('F', 'pp_ws_consulta_dados_conductor');
      --
   EXCEPTION
     --
     WHEN l_exception THEN
       --
       IF l_retorno%ISOPEN THEN CLOSE l_retorno; END IF;
       --
       g_err_msg.EXTEND(1);
       g_err_msg(g_err_msg.LAST) := fp_trata_msg('COD_DOCUM',
                                                  NULL,
                                                  g_k_pre_msg_erro || l_cod_error || g_k_sep_cod_msg);
       --
       pp_processa_mensagem(g_err_msg,
                            l_retorno);
       --
       p_gerar_xml_mensagem(l_retorno, p_xml);
       --
       g_err_msg := NULL;
       --
       trn_k_global.borra_todas;
       --
     WHEN OTHERS THEN
       --
       mx('F', 'pp_ws_consulta_dados_conductor - EXCEPTION: ' || SQLERRM);
       --
       IF l_retorno%ISOPEN THEN CLOSE l_retorno; END IF;
       --
       trn_k_global.borra_todas;
       --
   END pp_ws_consulta_dados_conductor;
   --
   -- {v2.82
   /*------------------------------
   || pp_actualiza_fec_efec_recibo
   */------------------------------
   --
   PROCEDURE pp_actualiza_fec_efec_recibo IS
    --
    l_reg_p2000030    p2000030 %ROWTYPE;
    l_reg_p2000020    p2000020 %ROWTYPE;
    l_reg_a2000030    a2000030 %ROWTYPE;
    l_reg_a2000020    a2000020 %ROWTYPE;
    l_reg_a5029107    a5029107_vcr %ROWTYPE;
    l_reg_a1001600    a1001600 %ROWTYPE;
    l_fec_efec_recibo p2990700.fec_efec_recibo %TYPE;
    l_num_fca         p2000020.val_campo       %TYPE;
    l_bco_fca         p2000020.val_campo       %TYPE;
    --
    l_fec_proc_tes_aux a1001600.fec_proc_tes   %TYPE; -- { v 5.28 }
    --
    l_reg_msg_erro TYPREG_MSG_WS;
    --
    CURSOR c_a5029107_vcr(p_cod_entidad a5029107_vcr.cod_entidad %TYPE,
                          p_cod_oficina a5029107_vcr.cod_oficina %TYPE) IS
      SELECT a.*
        FROM a5029107_vcr a
       WHERE a.cod_cia     = trn_k_global.devuelve('cod_cia')
         AND a.cod_entidad = p_cod_entidad
         AND a.cod_oficina = p_cod_oficina
         AND a.cod_cobro_vcr in ('DB','DC')                   -- { 3.12
         AND a.fec_geracao_vcr =
             (SELECT MAX(b.fec_geracao_vcr)
                FROM a5029107_vcr b
               WHERE b.cod_cia       = a.cod_cia
                 AND b.cod_entidad   = a.cod_entidad
                 AND b.cod_oficina   = a.cod_oficina
                 AND b.cod_cobro_vcr = a.cod_cobro_vcr)
                 ORDER BY a.cod_cobro_vcr DESC;                -- } 3.12
    --
    CURSOR c_p2000030 IS
      SELECT a.*
        FROM p2000030 a
       WHERE a.cod_cia = trn_k_global.devuelve('cod_cia')
         AND a.cod_ramo = trn_k_global.devuelve('cod_ramo')
         AND a.num_poliza <> trn_k_global.devuelve('num_cotizacion')
         AND a.num_presupuesto = trn_k_global.devuelve('num_cotizacion')
         AND a.num_spto = trn.CERO
         AND a.num_apli = trn.CERO
         AND a.num_spto_apli = trn.CERO
         AND a.fec_actu = (SELECT MAX(b.fec_actu)
                             FROM p2000030 b
                            WHERE b.num_presupuesto = a.num_presupuesto
                              AND b.num_spto = a.num_spto
                              AND b.num_apli = a.num_apli
                              AND b.num_spto_apli = a.num_spto_apli
                              AND b.cod_ramo = a.cod_ramo
                              AND b.cod_cia = a.cod_cia);
    --
    CURSOR c_a2000030 IS
      SELECT *
        FROM a2000030
       WHERE cod_cia = trn_k_global.devuelve('cod_cia')
         AND cod_ramo = trn_k_global.devuelve('cod_ramo')
         AND num_poliza = trn_k_global.devuelve('num_poliza')
         AND num_spto = trn_k_global.devuelve('num_spto')
         AND num_apli = trn.CERO
         AND num_spto_apli = trn.CERO;
    --
    /* --------------------------------------------------------
    || pi_actualiza_p2990700 :
    ||
    || Actualiza el registro en la tabla p2990700
    */ --------------------------------------------------------
    --
    PROCEDURE pi_actualiza_p2990700(p_num_poliza      p2990700.num_poliza%TYPE,
                                    p_fec_efec_recibo p2990700.fec_efec_recibo%TYPE) IS
    BEGIN
      --
      mx('I', 'pi_actualiza_p2990700');
      --
      UPDATE P2990700
         SET fec_efec_recibo = p_fec_efec_recibo
       WHERE cod_cia = trn_k_global.devuelve('cod_cia')
         AND num_poliza = p_num_poliza
         AND num_spto = trn.CERO
         AND num_apli = trn.CERO
         AND num_spto_apli = trn.CERO
         AND num_cuota = trn.UNO;
      --
      mx('F', 'pi_actualiza_p2990700');
      --
    END pi_actualiza_p2990700;
    --
    /* --------------------------------------------------------
    || pi_actualiza_parcela :
    ||
    || Actualiza el registro en las tablas a2990700 y A5020301
    */ --------------------------------------------------------
    --
    PROCEDURE pi_actualiza_parcela(p_num_poliza      p2990700.num_poliza%TYPE,
                                   p_fec_efec_recibo p2990700.fec_efec_recibo%TYPE) IS
    BEGIN
      --
      mx('I', 'pi_actualiza_parcela');
      --
      UPDATE a2990700
         SET fec_efec_recibo = p_fec_efec_recibo
       WHERE cod_cia = trn_k_global.devuelve('cod_cia')
         AND num_poliza = p_num_poliza
         AND num_spto = trn_k_global.devuelve('num_spto')
         AND num_apli = trn.CERO
         AND num_spto_apli = trn.CERO
         AND num_cuota = trn.UNO;
      --
      UPDATE a5020301
         SET fec_efec_recibo = p_fec_efec_recibo
       WHERE cod_cia = trn_k_global.devuelve('cod_cia')
         AND num_poliza = p_num_poliza
         AND num_spto = trn_k_global.devuelve('num_spto')
         AND num_apli = trn.CERO
         AND num_spto_apli = trn.CERO
         AND num_cuota = trn.UNO;
      --
      mx('F', 'pi_actualiza_parcela');
      --
    END pi_actualiza_parcela;
    --
    PROCEDURE pi_gera_dv_a2000020(p_num_poliza      a2000020.num_poliza%TYPE
                                 ,p_cod_ramo        a2000020.cod_ramo  %TYPE
                                 ,p_cod_campo       a2000020.cod_campo %TYPE
                                 ,p_val_campo       a2000020.val_campo %TYPE)
    IS
      --
      l_reg_a20     a2000020%ROWTYPE;
      l_reg_g20     g2000020%ROWTYPE;
      --
    BEGIN
      --
      mx('I','pi_gera_dv_a2000020');
      --
      em_k_g2000020.p_lee_1(p_cod_cia       => trn_k_global.devuelve('cod_cia')
                           ,p_cod_ramo      => p_cod_ramo
                           ,p_cod_modalidad => em.COD_MODALIDAD_GEN
                           ,p_cod_campo     => p_cod_campo
                           ,p_fec_validez   => TRUNC(SYSDATE));
      --
      l_reg_g20.num_secu := em_k_g2000020.f_num_secu;
      --
      BEGIN
        --
        l_reg_a20.cod_cia          := trn_k_global.devuelve('cod_cia');
        l_reg_a20.num_poliza       := p_num_poliza;
        l_reg_a20.num_spto         := trn_k_global.devuelve('num_spto');
        l_reg_a20.num_apli         := trn_k_global.devuelve('num_apli');
        l_reg_a20.num_spto_apli    := trn_k_global.devuelve('num_spto_apli');
        l_reg_a20.num_riesgo       := em.RIESGO_POLIZA;
        l_reg_a20.num_periodo      := trn.UNO;
        l_reg_a20.tip_nivel        := trn.UNO;
        l_reg_a20.cod_campo        := p_cod_campo;
        l_reg_a20.val_campo        := p_val_campo;
        l_reg_a20.val_cor_campo    := SUBSTR(p_val_campo,1,10);
        l_reg_a20.num_secu         := l_reg_g20.num_secu;
        l_reg_a20.txt_campo        := trn.NULO;
        l_reg_a20.mca_baja_riesgo  := trn.NO;
        l_reg_a20.mca_vigente      := trn.SI;
        l_reg_a20.mca_vigente_apli := trn.SI;
        l_reg_a20.cod_ramo         := g_cod_ramo;
        --
        em_k_a2000020.p_inserta(l_reg_a20);
        --
        mx('-','INSERT A2000020');
        --
      EXCEPTION
        WHEN dup_val_on_index THEN
          --
          mx('E','EXCEPTION - dup_val_on_index');
          --
          UPDATE A2000020
             SET val_campo        = p_val_campo,
                 val_cor_campo    = SUBSTR(p_val_campo,1,10)
           WHERE cod_cia          = l_reg_a20.cod_cia
             AND num_poliza       = l_reg_a20.num_poliza
             AND num_spto         = l_reg_a20.num_spto
             AND num_apli         = l_reg_a20.num_apli
             AND num_spto_apli    = l_reg_a20.num_spto_apli
             AND num_periodo      = trn.UNO
             AND cod_ramo         = l_reg_a20.cod_ramo
             AND num_riesgo       = l_reg_a20.num_riesgo
             AND cod_campo        = l_reg_a20.cod_campo
             AND mca_vigente      = trn.SI;
          --
          mx('-','UPDATE A2000020');
          --
      END;
      --
      mx('-','UPDATE A2000020 VIG');
      --
      UPDATE A2000020
         SET mca_vigente   = trn.NO
       WHERE cod_cia       = l_reg_a20.cod_cia
         AND num_poliza    = l_reg_a20.num_poliza
         AND num_spto      < l_reg_a20.num_spto
         AND num_apli      = l_reg_a20.num_apli
         AND num_spto_apli = l_reg_a20.num_spto_apli
         AND num_periodo   = trn.UNO
         AND cod_ramo      = l_reg_a20.cod_ramo
         AND num_riesgo    = l_reg_a20.num_riesgo
         AND cod_campo     = l_reg_a20.cod_campo
         AND mca_vigente   = trn.SI;
      --
      mx('F','pi_gera_dv_a2000020');
      --
    EXCEPTION
      WHEN OTHERS THEN
        --
        g_cod_mensaje    := g_k_cod_error_gen;
        g_anx_mensaje    := SQLERRM;
        --
        mx('E','EXCEPTION - pi_gera_dv_a2000020 '||g_anx_mensaje);
        --
        pp_devuelve_error;
        --
    END pi_gera_dv_a2000020;
    --
  BEGIN
    --
    mx('I', 'pp_actualiza_fec_efec_recibo');
    --
    l_reg_a1001600.fec_proc_tes := ss_f_fec_proc_tes(trn_k_global.devuelve('cod_cia'));
    --
    IF trn_k_global.devuelve('tip_emision') IN
       (em.TIP_EMISION_PPTO, em.TIP_EMISION_POL) THEN
      --
      IF c_p2000030%ISOPEN THEN
        --
        CLOSE c_p2000030;
        --
      END IF;
      --
      OPEN c_p2000030;
      --
      FETCH c_p2000030
        INTO l_reg_p2000030;
      --
      CLOSE c_p2000030;
      --
      BEGIN
        --
        em_k_p2000020.p_lee(l_reg_p2000030.cod_cia,
                            l_reg_p2000030.num_poliza,
                            l_reg_p2000030.num_spto,
                            l_reg_p2000030.num_apli,
                            l_reg_p2000030.num_spto_apli,
                            em.RIESGO_POLIZA,
                            trn.UNO,
                            'TIP_GESTOR_PARCELA1_VCR',
                            l_reg_p2000030.cod_ramo);
        --
        l_reg_p2000020.val_campo := em_k_p2000020.f_val_campo;
        --
      EXCEPTION
        WHEN OTHERS THEN
          --
          l_reg_p2000020.val_campo := gc.TIP_PAGO_BA;
          --
      END;
      --
      IF l_reg_p2000020.val_campo = 'DC' THEN
        --
        IF c_a5029107_vcr%ISOPEN THEN
          --
          CLOSE c_a5029107_vcr;
          --
        END IF;
        --
        OPEN c_a5029107_vcr(SUBSTR(l_reg_p2000030.cod_gestor, 1, 4),
                            SUBSTR(l_reg_p2000030.cod_gestor, 5, 8));
        --
        FETCH c_a5029107_vcr
          INTO l_reg_a5029107;
        --
        CLOSE c_a5029107_vcr;
        -- { 3.12
        If nvl(l_reg_a5029107.num_dias_envio_vcr,0) = trn.cero
        Then
          --
          l_reg_a5029107.num_dias_envio_vcr := trn_k_df_cmn_nwt_xx_cnn.f_vrb_nam_val(p_vrb_nam => 'DIAS_VENCIMENTO_DC'); -- 3.10
          --
        End if;
        --  } 3.12
        --
        -- { v 5.28
        BEGIN
           --
           l_fec_proc_tes_aux := l_reg_a1001600.fec_proc_tes;
           --
           l_fec_proc_tes_aux := TO_DATE ( GREATEST ( TO_CHAR ( l_reg_a1001600.fec_proc_tes , 'J' )
                                                    , TO_CHAR ( l_reg_p2000030.fec_efec_spto, 'J' )), 'J' );
           --
        EXCEPTION WHEN OTHERS THEN NULL;
        END;
        -- } v 5.28
        --
        gc_k_debito_data_vcr.p_carga(trn_k_global.devuelve('cod_cia'),
                                     l_fec_proc_tes_aux, -- { v 5.28 }
                                     l_reg_a5029107.num_dias_envio_vcr,
                                     l_fec_efec_recibo);
        --
        pi_actualiza_p2990700(l_reg_p2000030.num_poliza, l_fec_efec_recibo);
        --
        IF l_reg_p2000030.cod_fracc_pago = g_k_anual THEN
          --
          ea_k_231_utils.p_insert_p_dv(trn_k_global.devuelve('cod_cia')
                                      ,l_reg_p2000030.cod_ramo
                                      ,l_reg_p2000030.num_poliza
                                      ,l_reg_p2000030.num_spto
                                      ,l_reg_p2000030.num_apli
                                      ,l_reg_p2000030.num_spto_apli
                                      ,trn.UNO
                                      ,trn.UNO
                                      ,em.RIESGO_POLIZA
                                      ,'NUM_DIA_VENCIMENTO'
                                      ,TO_CHAR(l_fec_efec_recibo,'DD'));
          --
        END IF;
        --
      ELSIF l_reg_p2000020.val_campo = 'BA' AND
            l_reg_p2000030.cod_fracc_pago = g_k_anual THEN
        --
        BEGIN
          --
          em_k_p2000020.p_lee(l_reg_p2000030.cod_cia,
                              l_reg_p2000030.num_poliza,
                              l_reg_p2000030.num_spto,
                              l_reg_p2000030.num_apli,
                              l_reg_p2000030.num_spto_apli,
                              em.RIESGO_POLIZA,
                              trn.UNO,
                              'NUM_BLOQUETE_FCA',
                              l_reg_p2000030.cod_ramo);
          --
          l_num_fca := em_k_p2000020.f_val_campo;
          --
          EXCEPTION WHEN OTHERS THEN
            --
            NULL;
            --
        END;
        --
        BEGIN
          --
          em_k_p2000020.p_lee(l_reg_p2000030.cod_cia,
                              l_reg_p2000030.num_poliza,
                              l_reg_p2000030.num_spto,
                              l_reg_p2000030.num_apli,
                              l_reg_p2000030.num_spto_apli,
                              em.RIESGO_POLIZA,
                              trn.UNO,
                              'COD_BNC_FCA',
                              l_reg_p2000030.cod_ramo);
          --
          l_bco_fca := em_k_p2000020.f_val_campo;
          --
          EXCEPTION WHEN OTHERS THEN
            --
            NULL;
            --
        END;
        --
        BEGIN
          --
          gc_k_a5029088_vcr.p_lee2(trn_k_global.devuelve('cod_cia')
                                  ,l_num_fca
                                  ,substr(l_bco_fca,1,4)
                                  ,substr(l_bco_fca,5,4));
          --
          l_fec_efec_recibo    := gc_k_a5029088_vcr.f_fec_vcto;
          --
          ea_k_231_utils.p_insert_p_dv(trn_k_global.devuelve('cod_cia')
                                      ,l_reg_p2000030.cod_ramo
                                      ,l_reg_p2000030.num_poliza
                                      ,l_reg_p2000030.num_spto
                                      ,l_reg_p2000030.num_apli
                                      ,l_reg_p2000030.num_spto_apli
                                      ,trn.UNO
                                      ,trn.UNO
                                      ,em.RIESGO_POLIZA
                                      ,'NUM_DIA_VENCIMENTO'
                                      ,TO_CHAR(l_fec_efec_recibo,'DD'));
          --
          EXCEPTION WHEN OTHERS THEN
            --
            NULL;
            --
        END;
        --
      END IF;
      --
    ELSIF trn_k_global.devuelve('tip_emision') = em.TIP_EMISION_SPTO THEN
      --
      em_k_a2000030.p_lee(trn_k_global.devuelve('cod_cia'),
                          trn_k_global.devuelve('num_poliza'),
                          trn_k_global.devuelve('num_spto'),
                          trn.CERO,
                          trn.CERO);
      --
      l_reg_a2000030 := em_k_a2000030.f_devuelve_reg;
      --
      BEGIN
        --
        em_k_a2000020.p_lee_vigente(l_reg_a2000030.cod_cia,
                                    l_reg_a2000030.num_poliza,
                                    l_reg_a2000030.num_apli,
                                    em.RIESGO_POLIZA,
                                    trn.UNO,
                                    'TIP_GESTOR_PARCELA1_VCR',
                                    l_reg_a2000030.cod_ramo);
        --
        l_reg_a2000020.val_campo := em_k_a2000020.f_val_campo;
        --
      EXCEPTION
        WHEN OTHERS THEN
          --
          l_reg_a2000020.val_campo := gc.TIP_PAGO_BA;
          --
      END;
      --
      IF l_reg_a2000020.val_campo = 'DC' THEN
        --
        IF c_a5029107_vcr%ISOPEN THEN
          --
          CLOSE c_a5029107_vcr;
          --
        END IF;
        --
        OPEN c_a5029107_vcr(SUBSTR(l_reg_a2000030.cod_gestor, 1, 4),
                            SUBSTR(l_reg_a2000030.cod_gestor, 5, 8));
        --
        FETCH c_a5029107_vcr
          INTO l_reg_a5029107;
        --
        CLOSE c_a5029107_vcr;
        --
        gc_k_debito_data_vcr.p_carga(trn_k_global.devuelve('cod_cia'),
                                     l_reg_a1001600.fec_proc_tes,
                                     l_reg_a5029107.num_dias_envio_vcr,
                                     l_fec_efec_recibo);
        --
        pi_actualiza_parcela(l_reg_a2000030.num_poliza, l_fec_efec_recibo);
        --
        IF l_reg_a2000030.cod_fracc_pago = g_k_anual THEN
          --
          pi_gera_dv_a2000020(l_reg_a2000030.num_poliza
                             ,l_reg_a2000030.cod_ramo
                             ,'NUM_DIA_VENCIMENTO'
                             ,TO_CHAR(l_fec_efec_recibo,'DD'));
          --
        END IF;
        --
      ELSIF l_reg_a2000020.val_campo = 'BA' AND
            l_reg_a2000030.cod_fracc_pago = g_k_anual THEN
        --
        BEGIN
          --
          em_k_a2000020.p_lee_vigente(l_reg_a2000030.cod_cia,
                                      l_reg_a2000030.num_poliza,
                                      l_reg_a2000030.num_apli,
                                      em.RIESGO_POLIZA,
                                      trn.UNO,
                                      'NUM_BLOQUETE_FCA',
                                      l_reg_a2000030.cod_ramo);
          --
          l_num_fca := em_k_a2000020.f_val_campo;
          --
        EXCEPTION
          WHEN OTHERS THEN
            --
            NULL;
            --
        END;
        --
        BEGIN
          --
          em_k_a2000020.p_lee_vigente(l_reg_a2000030.cod_cia,
                                      l_reg_a2000030.num_poliza,
                                      l_reg_a2000030.num_apli,
                                      em.RIESGO_POLIZA,
                                      trn.UNO,
                                      'COD_BNC_FCA',
                                      l_reg_a2000030.cod_ramo);
          --
          l_bco_fca := em_k_a2000020.f_val_campo;
          --
        EXCEPTION
          WHEN OTHERS THEN
            --
            NULL;
            --
        END;
        --
        BEGIN
          --
          gc_k_a5029088_vcr.p_lee2(trn_k_global.devuelve('cod_cia')
                                  ,l_num_fca
                                  ,substr(l_bco_fca,1,4)
                                  ,substr(l_bco_fca,5,4));
          --
          l_fec_efec_recibo    := gc_k_a5029088_vcr.f_fec_vcto;
          --
          pi_gera_dv_a2000020(l_reg_a2000030.num_poliza
                             ,l_reg_a2000030.cod_ramo
                             ,'NUM_DIA_VENCIMENTO'
                             ,TO_CHAR(l_fec_efec_recibo,'DD'));
          --
          EXCEPTION WHEN OTHERS THEN
            --
            NULL;
            --
        END;
        --
      END IF;
      --
    END IF;
    --
    mx('F', 'pp_actualiza_fec_efec_recibo');
    --
    EXCEPTION
     WHEN OTHERS THEN
       --
       g_cod_mensaje    := g_k_cod_error_gen;
       g_anx_mensaje    := SQLERRM;
       --
       mx('E','EXCEPTION - pp_actualiza_fec_efec_recibo '||g_anx_mensaje);
       --
       pp_devuelve_error;
       --
   END pp_actualiza_fec_efec_recibo;
   -- }v2.82
   --
   /* -----------------------------------------
   ||  pp_inicia_xml_campos
   || Inicia XML en formato codcampo
   */ -----------------------------------------
   --
   PROCEDURE pp_inicia_xml_campos
   IS
   --
   BEGIN
      --
      g_document    := DBMS_XMLDOM.newdomdocument;
      --
      g_node_lista  := DBMS_XMLDOM.makenode(g_document);
      --
   END pp_inicia_xml_campos;
   --
    /* -----------------------------------------
   ||  pp_cerrar_xml_campos
   || Cierra XML en formato codcampo
   */ -----------------------------------------
   --
   PROCEDURE pp_cerrar_xml_campos(p_xml OUT CLOB)
   IS
   --
   BEGIN
      --
      g_xml_lista := DBMS_XMLDOM.getxmltype(g_document);
      --
      DBMS_XMLDOM.freedocument(g_document);
      --
      p_xml  := g_xml_lista.getclobval;
      --
   END pp_cerrar_xml_campos;
   --
   /* -----------------------------------------
   || pp_col_lista_observacion
   || Inserta etiqueta cotacao en XML en formato codcampo
   */ -----------------------------------------
   --
   PROCEDURE pp_col_lista_observacion
   IS
   --
   BEGIN
      --
      g_node_lista_observ := DBMS_XMLDOM.appendchild(g_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(g_document, 'lista_observacion')));
      --
   END pp_col_lista_observacion;
   --
   /* -----------------------------------------
   || pp_col_observacion
   || Inserta etiqueta cotacao en XML en formato codcampo
   */ -----------------------------------------
   --
   PROCEDURE pp_col_observacion
   IS
   --
   BEGIN
      --
      g_node_observ := DBMS_XMLDOM.appendchild(g_node_lista_observ, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(g_document, 'observacion')));
      --
   END pp_col_observacion;
   --
   /* -----------------------------------------
   || pp_insertar_xml_campo_observacion
   || Inserta pareja en XML en formato codcampo
   */ -----------------------------------------
   --
   PROCEDURE pp_insertar_xml_campo_observacion(p_cod_campo IN VARCHAR2,
                                               p_val_campo IN VARCHAR2)
   IS
   --
   BEGIN
      --
      IF p_cod_campo IS NOT NULL
      THEN
         --
         g_node_codigo := DBMS_XMLDOM.appendchild(g_node_observ, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(g_document, p_cod_campo)));--crear la etiqueta XML
         g_text_cdata  := DBMS_XMLDOM.createtextnode(g_document,p_val_campo);
         g_node_codigo := DBMS_XMLDOM.appendchild(g_node_codigo, DBMS_XMLDOM.makenode(g_text_cdata)); --Introducir el valor del campo en la etiqueta
         --
      END IF;
      --
   END pp_insertar_xml_campo_observacion;
   --
   /* --------------------
   ||  fp_cambio_dv :
   */ --------------------
    FUNCTION fp_cambio_dv (p_cod_campo g2000010.cod_campo%TYPE)
     RETURN VARCHAR2 IS
     --
     l_mca_cambio VARCHAR2(1) := NULL;
     --
     l_tip_emision    g1010031.cod_valor%TYPE := NULL;
     l_tip_mvto_batch g1010031.cod_valor%TYPE := NULL;
     --
     CURSOR c_dv
           (pc_cod_campo  a2000020.cod_campo%TYPE
           ,pc_val_campo  a2000020.val_campo%TYPE) IS
         SELECT 'S'
           FROM a2000020
          WHERE cod_cia     = g_cod_cia
            AND num_poliza  = g_num_poliza
            AND num_riesgo  = g_num_riesgo
            AND cod_ramo    = g_cod_ramo
            AND mca_vigente = 'S'
            AND cod_campo   = pc_cod_campo
            AND val_campo  != pc_val_campo;
     --
   BEGIN
     --
     mx('I', 'fp_cambio_dv');
     --
     mx('p_cod_campo', p_cod_campo);
     --
     l_tip_emision    := trn_k_global.ref_f_global('tip_emision'   );
     l_tip_mvto_batch := trn_k_global.ref_f_global('tip_mvto_batch');
     --
     mx('l_tip_emision'   , l_tip_emision   );
     mx('l_tip_mvto_batch', l_tip_mvto_batch);
     --
     IF l_tip_emision    = EM.tip_emision_spto OR
        l_tip_mvto_batch = 4
     THEN
        --
        mx('g_cod_ramo', g_cod_ramo);
        --
        IF g_cod_ramo = ea_k_231_utils.g_k_ramo_motor THEN
           --
           IF c_dv%ISOPEN THEN
              --
              CLOSE c_dv;
              --
           END IF;
           --
           mx('g_cod_cia'   , g_cod_cia                                   );
           mx('g_num_poliza', g_num_poliza                                );
           mx('g_num_riesgo', g_num_riesgo                                );
           mx('g_cod_ramo'  , g_cod_ramo                                  );
           mx('val_campo'   , trn_k_global.ref_f_global('DV'||p_cod_campo));

           OPEN  c_dv(p_cod_campo
                     ,trn_k_global.ref_f_global('DV'||p_cod_campo));
           --
           FETCH c_dv INTO l_mca_cambio;
           --
           CLOSE c_dv;
           --
        END IF;
        --
     ELSE
        --
        l_mca_cambio := trn.SI;
        --
     END IF;
     --
     mx('l_mca_cambio', NVL(l_mca_cambio, trn.NO));
     --
     mx('F', 'fp_cambio_dv');
     --
     RETURN NVL(l_mca_cambio, trn.NO);
     --
   END fp_cambio_dv;
   --
   /* ------------------------------------------------------
   || Carrega tabela A2000560 (ENDOSSO) com dados da apolice
   */ ------------------------------------------------------
   --
   PROCEDURE p_carga_dados_endosso
   IS
      l_cod_cia           a2000030.cod_cia%TYPE;
      l_cod_ramo          a2000030.cod_ramo%TYPE;
      l_num_propuesta     a2000560.num_propuesta%TYPE;
      l_cod_agt           a2000030.cod_agt%TYPE;
      l_cod_retorno       NUMBER;
      l_msg_erro          a2000520.txt_error%TYPE;
   BEGIN
      --
      mx('I', 'p_carga_dados_endosso');
      --
      l_cod_cia       := trn_k_global.devuelve('COD_CIA');
      l_cod_ramo      := trn_k_global.devuelve('COD_RAMO');
      l_num_propuesta := trn_k_global.devuelve('NUM_PROPUESTA');
      l_cod_agt       := trn_k_global.devuelve('COD_AGT');
      --
      em_k_gen_spto_batch_vcr.p_carregar_dados_apol(p_tip_mvto_batch => g_k_tip_mvto_batch_endosso,
                                                    p_cod_cia        => l_cod_cia,
                                                    p_cod_ramo       => l_cod_ramo,
                                                    p_cod_agt        => l_cod_agt,
                                                    p_num_poliza     => l_num_propuesta,
                                                    p_cod_retorno    => l_cod_retorno,
                                                    p_msg_erro       => l_msg_erro);
      --
      trn_k_global.asigna('COD_BATCH_ENDOSSO',l_cod_retorno);
      trn_k_global.asigna('MSG_BATCH_ENDOSSO',l_msg_erro);
      --
      mx('F', 'p_carga_dados_endosso');
      --
      IF l_cod_retorno IS NOT NULL AND
         l_cod_retorno <> trn.CERO THEN
      --
          g_cod_mensaje    := l_cod_retorno;
          g_anx_mensaje    := l_msg_erro;
          --
          g_err_msg.EXTEND(1); -- 4.99
          g_err_msg(g_err_msg.LAST) := fp_trata_msg(l_cod_retorno,-- 4.99
                                                                                    g_cod_mensaje,
                                                                                    g_anx_mensaje);
       --
       END IF;
      --
   END p_carga_dados_endosso;
   --
   /* ------------------------------------------------------
   || Carrega tabela A2000560 (ENDOSSO) com dados da cotacao
   */ ------------------------------------------------------
   --
   PROCEDURE p_carga_dados_coti_endosso
   IS
      l_cod_cia           a2000030.cod_cia      %TYPE;
      l_cod_ramo          a2000030.cod_ramo     %TYPE;
      l_num_cotizacion    a2000560.num_propuesta%TYPE;
      l_cod_agt           a2000030.cod_agt      %TYPE;
      l_cod_retorno       NUMBER;
      l_msg_erro          a2000520.txt_error    %TYPE;
      l_num_poliza        a2000030.num_poliza   %TYPE; -- 2.25
      l_num_spto          a2000030.num_spto     %TYPE; -- 2.25
      l_num_spto_apli     a2000030.num_spto_apli%TYPE; -- 2.25
      --
      CURSOR c_cotizacion(pc_cod_cia         a2000030.cod_cia        %TYPE,
                          pc_cod_ramo        a2000030.cod_ramo       %TYPE,
                          pc_num_presupuesto a2000030.num_presupuesto%TYPE) IS
           SELECT b.num_poliza, b.num_spto, b.num_spto_apli -- 2.25
             FROM p2000030 b
            WHERE b.cod_cia  = pc_cod_cia
              AND b.cod_ramo = pc_cod_ramo
              AND b.num_presupuesto = pc_num_presupuesto
              AND b.num_spto_apli   = (SELECT MAX(d.num_spto_apli)
                                         FROM p2000030 d
                                        WHERE d.num_poliza      = b.num_poliza
                                          AND d.num_spto        = b.num_spto
                                          AND d.num_presupuesto = b.num_presupuesto
                                          AND d.cod_ramo        = b.cod_ramo
                                          AND d.cod_cia         = b.cod_cia);
    --
    CURSOR c_poliza(      pc_cod_cia         a2000030.cod_cia        %TYPE, -- 2.25
                          pc_cod_ramo        a2000030.cod_ramo       %TYPE,
                          pc_num_poliza      a2000030.num_poliza     %TYPE,
                          pc_num_spto        a2000030.num_spto       %TYPE) IS
           SELECT b.num_poliza, b.num_spto, b.num_spto_apli, b.num_presupuesto
             FROM p2000030 b, a2000030 a
            WHERE b.cod_cia            = pc_cod_cia
              AND b.cod_ramo           = pc_cod_ramo
              AND b.num_poliza         = pc_num_poliza
              AND b.num_spto           = pc_num_spto
              AND a.cod_cia = b.cod_cia
              AND a.cod_ramo = b.cod_ramo
              AND a.num_poliza = b.num_poliza
              AND b.num_presupuesto = a.num_presupuesto
              AND b.num_spto_apli   = (SELECT MAX(d.num_spto_apli)
                                         FROM p2000030 d
                                        WHERE d.num_poliza      = b.num_poliza
                                          AND d.num_spto        = b.num_spto
                                          AND d.num_presupuesto = b.num_presupuesto
                                          AND d.cod_ramo        = b.cod_ramo
                                          AND d.cod_cia         = b.cod_cia);
    --
    l_reg_poli      c_poliza%ROWTYPE; -- 2.25
    --
    l_reg_coti      c_cotizacion%ROWTYPE;
    --
   BEGIN
      --
      mx('I', 'p_carga_dados_coti_endosso');
      --
      l_cod_cia          := trn_k_global.devuelve('COD_CIA');
      l_cod_ramo         := trn_k_global.devuelve('COD_RAMO');
      l_num_cotizacion   := trn_k_global.devuelve('NUM_COTIZACION');
      l_cod_agt          := trn_k_global.devuelve('COD_AGT');
      l_num_poliza       := trn_k_global.devuelve('NUM_POLIZA'); -- 2.25
      l_num_spto         := trn_k_global.devuelve('NUM_SPTO'); -- 2.25
      --
      mx('l_cod_cia'       , l_cod_cia);
      mx('l_cod_ramo'      , l_cod_ramo);
      mx('l_num_cotizacion', l_num_cotizacion);
      mx('l_cod_agt'       , l_cod_agt);
      mx('l_num_poliza'    , l_num_poliza); -- 2.25
      mx('l_num_spto'      , l_num_spto); -- 2.25
      --
      IF l_num_poliza > trn.CERO THEN -- I 2.25
        --
        IF  c_poliza%ISOPEN THEN
          --
          CLOSE c_poliza;
          --
        END IF;
        --
        OPEN c_poliza(l_cod_cia, l_cod_ramo, l_num_poliza, l_num_spto);
        --
        FETCH c_poliza INTO l_reg_poli;
        --
        CLOSE c_poliza;
        --
        mx('l_reg_poli.num_poliza'     , l_reg_poli.num_poliza);
         mx('l_reg_poli.num_spto'       , l_reg_poli.num_spto);
        mx('l_reg_poli.num_spto_apli'  , l_reg_poli.num_spto_apli);
        mx('l_reg_poli.num_presupuesto', l_reg_poli.num_presupuesto);
        --
        l_num_poliza     := l_reg_poli.num_poliza;
        l_num_spto       := l_reg_poli.num_spto;
        l_num_spto_apli  := l_reg_poli.num_spto_apli;
        --
        mx('l_num_poliza'   , l_num_poliza);
        mx('l_num_spto'     , l_num_spto);
        mx('l_num_spto_apli', l_num_spto_apli);
        --
     ELSE
        --
        IF  c_cotizacion%ISOPEN THEN
          --
          CLOSE c_cotizacion;
          --
        END IF;
        --
        OPEN c_cotizacion(l_cod_cia, l_cod_ramo, l_num_cotizacion);
        --
        FETCH c_cotizacion INTO l_reg_coti;
        --
        CLOSE c_cotizacion;
        --
        mx('l_reg_coti.num_poliza'   , l_reg_coti.num_poliza);
        mx('l_reg_coti.num_spto'     , l_reg_coti.num_spto);
        mx('l_reg_coti.num_spto_apli', l_reg_coti.num_spto_apli);
        --
        l_num_poliza     := l_reg_coti.num_poliza;
        l_num_spto       := l_reg_coti.num_spto;
        l_num_spto_apli  := l_reg_coti.num_spto_apli;
        --
        mx('l_num_poliza'   , l_num_poliza);
        mx('l_num_spto'     , l_num_spto);
        mx('l_num_spto_apli', l_num_spto_apli);
        --
      END IF; -- F 2.25
      --
      em_k_gen_spto_batch.p_carregar_dados_coti(p_tip_mvto_batch => g_k_tip_mvto_batch_endosso,
                                                p_cod_cia        => l_cod_cia,
                                                p_cod_ramo       => l_cod_ramo,
                                                p_cod_agt        => l_cod_agt,
                                                p_num_poliza     => l_num_poliza, -- 2.25
                                                p_num_spto       => l_num_spto, -- 2.25
                                                p_num_spto_apli  => l_num_spto_apli, -- 2.25
                                                p_cod_retorno    => l_cod_retorno,
                                                p_msg_erro       => l_msg_erro);
      --
      trn_k_global.asigna('COD_BATCH_ENDOSSO',l_cod_retorno);
      trn_k_global.asigna('MSG_BATCH_ENDOSSO',l_msg_erro);
      --
      mx('l_cod_retorno', l_cod_retorno);
      mx('l_msg_erro'   , l_msg_erro);
      --
      mx('F', 'p_carga_dados_coti_endosso');
      --
      IF l_cod_retorno IS NOT NULL AND
         l_cod_retorno <> trn.CERO THEN
      --
          g_cod_mensaje    := l_cod_retorno;
          g_anx_mensaje    := l_msg_erro;
          --
          g_err_msg.EXTEND(1); -- 4.99
          g_err_msg(g_err_msg.LAST) := fp_trata_msg(l_cod_retorno, -- 4.99
                                                                                    g_cod_mensaje,
                                                                                    g_anx_mensaje);
       --
       END IF;
      --
   END p_carga_dados_coti_endosso;
   --
   /* ------------------------------------------------------
   || Executa processo de emissao do endosso
   */ ------------------------------------------------------
   --
   PROCEDURE p_processa_emissao_endosso
   IS
      l_cod_cia           a2000030.cod_cia%TYPE;
      l_cod_ramo          a2000030.cod_ramo%TYPE;
      l_num_spto          a2000030.num_spto%TYPE;
      l_num_propuesta     a2000560.num_propuesta%TYPE;
      l_cod_retorno       NUMBER;
      l_msg_erro          a2000520.txt_error%TYPE;
      l_txt_motivo_spto   a2000500.txt_motivo_spto%TYPE;
      --
      l_imp_restituicao   a2990700.imp_neta%TYPE := trn.CERO;
      --
      l_cod_tip_spto      df_cmn_nwt_xx_cnn.vrb_nam_val%TYPE;
      l_sub_cod_spto      df_cmn_nwt_xx_cnn.vrb_nam_val%TYPE;
      l_tip_cod_spto      df_cmn_nwt_xx_cnn.vrb_nam_val%TYPE;
      --
      l_retorno           SYS_REFCURSOR;
      reg_a2000040        a2000040%ROWTYPE;
      cod_cob_info        df_cmn_nwt_xx_vrb_cnc.row_val_val%TYPE;
      --
      l_reg_a2000560      a2000560%ROWTYPE;
      --
      l_num_paso          G9999992.num_paso%TYPE; -- 1.72
      l_eh_3_pacotes      BOOLEAN ; --2.14
      l_tip_produto       g2109142_vcr.tip_produto       %TYPE ; --2.17
      l_cod_agt           g2109142_vcr.cod_agt           %TYPE ; --2.17
      --
      l_num_apli          a2000030.num_apli%TYPE; -- v2.26
      -- { 3.78
      l_cod_retorno_coti  NUMBER;
      l_msg_erro_coti     a2000520.txt_error%TYPE;
      -- } 3.78
      --
      g_fec_efec_poliza        a2000030.fec_efec_poliza%TYPE; -- 5.37
   BEGIN
      --
      mx('I', 'p_processa_emissao_endosso');
      --
      l_cod_cia       := trn_k_global.devuelve('COD_CIA');
      l_cod_ramo      := trn_k_global.devuelve('COD_RAMO');
      l_num_propuesta := trn_k_global.devuelve('NUM_PROPUESTA');
      l_num_paso      := NVL(trn_k_global.devuelve('NUM_PASO'),0); -- 1.72
      l_tip_produto   := ea_k_231_utils.f_valor_dv('tip_produto'); --2.17
      l_cod_agt       := trn_k_global.devuelve( 'COD_AGT' );-- 2.17
      l_eh_3_pacotes  := ea_k_g2109142_vcr.f_eh_3_pacotes(l_cod_cia, -- 2.70
                                                          l_cod_ramo,
                                                          l_cod_agt,
                                                          l_tip_produto); -- 2.17
      -- I 3.47
      IF l_eh_3_pacotes THEN
      --
      pp_asigna('tres_pacotes',1);
      --
      ELSE
      --
      pp_asigna('tres_pacotes',0);
      --
      END IF;
      -- F 3.47
      --
      IF l_eh_3_pacotes THEN --I 2.14
      --
        trn_k_global.asigna('num_simulacion',1);--2.14
        ea_k_definicion_pacote_vcr.p_carga_coberturas(1,TRUE);--2.14
        --
      END IF;
      -- Carrega buzon
      em_k_gen_spto_batch.p_recalcular(p_tip_mvto_batch => g_k_tip_mvto_batch_endosso,
                                       p_cod_cia        => l_cod_cia,
                                       p_cod_ramo       => l_cod_ramo,
                                       p_num_poliza     => l_num_propuesta,
                                       p_cod_retorno    => l_cod_retorno,
                                       p_msg_erro       => l_msg_erro);
      --
      IF NVL(l_cod_retorno,0) = 0 THEN
        --
        -- Executa buzon
        IF NVL(g_mca_cancelamento, trn.NO) = trn.NO THEN
           --
           mx('--', 'IF NVL(g_mca_cancelamento, trn.NO) = trn.NO THEN');
           --
           trn_k_global.asigna('mca_cotizacion_suplemento', trn.SI); -- V2.31
           --
           em_k_gen_spto_batch.p_executa_batch(p_tip_mvto_batch => g_k_tip_mvto_batch_endosso,
                                               p_cod_cia        => l_cod_cia,
                                               p_cod_ramo       => l_cod_ramo,
                                               p_num_poliza     => l_num_propuesta,
                                               p_cod_retorno    => l_cod_retorno,
                                               p_msg_erro       => l_msg_erro);
           --
           mx('l_cod_retorno',l_cod_retorno);
           mx('l_msg_erro',l_msg_erro);
           --
           trn_k_global.asigna('mca_cotizacion_suplemento', trn.SI); -- V3.59
           --
           IF NVL(l_cod_retorno, trn.CERO) = trn.CERO THEN
             --
             pp_cuotas_cotizacion_spto;
             --
             l_num_spto    := em_f_max_spto_1(l_cod_cia,l_num_propuesta); --v2.26
             l_num_apli    := em_f_max_apli_2(l_cod_cia,l_num_propuesta,l_num_spto);   --v2.26
             --
             pp_asigna('cod_cia'       , l_cod_cia                 ); --v1.2.26
             pp_asigna('cod_ramo'      , l_cod_ramo                ); --v1.2.26
             pp_asigna('num_poliza'    , l_num_propuesta           );
             pp_asigna('tip_mvto_batch', g_k_tip_mvto_batch_endosso); --v1.88
             pp_asigna('num_spto'      , l_num_spto                ); --v2.26
             pp_asigna('num_apli'      , l_num_apli                ); --v2.26
             pp_asigna('num_spto_apli' , trn.CERO                  ); --v2.26
             --
             pp_limpa_ssr; -- v2.46
             --
--             IF NOT fp_valida_recusa_flex(p_num_propuesta => l_num_propuesta,
--                                          p_cod_ramo      => l_cod_ramo     )
--             THEN
                --
                pp_asigna('tip_emision',em.TIP_EMISION_SPTO); --v1.64
                --
                IF fp_cambio_riesgo                           OR
                   fp_cambio_dv('TXT_CODIGO_POSTAL') = trn.SI
                THEN --v1.64
                  --
                  pp_valida_cod_sts_rastre(p_num_propuesta => l_num_propuesta,
                                           p_cod_ramo      => l_cod_ramo     );
                  --
                END IF;
                --
                pp_valida_pct_agt_npr(p_num_propuesta => l_num_propuesta);
                --
                pp_valida_mudancas(p_num_propuesta => l_num_propuesta,
                                   p_cod_ramo      => l_cod_ramo     );
                --
                -- {v2.26
                l_reg_a2000560.cod_cia       := l_cod_cia;
                l_reg_a2000560.num_propuesta := l_num_propuesta;
                l_reg_a2000560.cod_campo     := 'MCA_CALCULO_OK';
                l_reg_a2000560.Val_Campo     := trn.SI;
                --
                pp_inserta_a2000560(l_reg_a2000560);
                --
                em_k_gen_spto_batch.p_grava_dados_cotacao(l_cod_cia
                                                         ,l_cod_ramo
                                                         ,l_num_propuesta
                                                         ,trn.CERO
                                                         ,trn.SI
                                                         ,trn.SI
                                                         ,l_cod_retorno_coti -- 3.78
                                                         ,l_msg_erro_coti); -- 3.78
                --
                em_k_gen_spto_batch.p_traspasa_tablas;
                -- }v2.26
                --
--             END IF;
             --
           --INI. V 3.53
           ELSE
             --{ v2.26
             em_k_gen_spto_batch.p_grava_dados_cotacao(l_cod_cia
                                                       ,l_cod_ramo
                                                       ,l_num_propuesta
                                                       ,trn.CERO
                                                       ,trn.SI
                                                       ,trn.NO
                                                       ,l_cod_retorno_coti -- 3.78
                                                       ,l_msg_erro_coti); -- 3.78
             --} v2.26
             --{ 3.78
             trn_k_global.asigna('COD_BATCH_ENDOSSO', l_cod_retorno_coti);
             trn_k_global.asigna('MSG_BATCH_ENDOSSO', l_msg_erro_coti);
             --} 3.78
             -- FIM. V 3.53
           END IF;
           --
        ELSE
           --
           mx('--', 'ELSE - IF NVL(g_mca_cancelamento, trn.NO) = trn.NO THEN');
           --
           trn_k_global.asigna('mca_cotizacion_suplemento', trn.NO); -- V2.31
           --
           l_imp_restituicao := fp_ref_devuelve_n('IMP_PREMIO_RESTITUICAO');
           --{ v 2.29M
           l_txt_motivo_spto := NVL(ea_k_231_utils.f_devuelve_val_campo_spto('DFTXT_MOTIVO_SPTO'),
                                    g_k_txt_motivo_interatividade);
           --}
           IF l_imp_restituicao <> trn.CERO THEN -- 1.72 --1.73
              --
              mx('--', 'IF l_imp_restituicao <> trn.CERO THEN'); --1.73
              --
              l_cod_tip_spto := trn_k_df_cmn_nwt_xx_cnn.f_vrb_nam_val('COD_SPTO_AP');
              l_sub_cod_spto := trn_k_df_cmn_nwt_xx_cnn.f_vrb_nam_val('SUB_COD_SPTO_SEGURADO');
              l_tip_cod_spto := trn.UNO;
              --
           ELSE
              --
              mx('--', 'ELSE - IF l_imp_restituicao <> trn.CERO THEN');
              --
              IF (NVL(g_mca_cancel_parc_pend,trn.SI)) = trn.SI THEN -- 1.72 -- 1.73
                 --
                 mx('--', 'IF (NVL(g_mca_cancel_parc_pend,trn.SI)) = trn.SI'); -- 1.73
                 --
                 l_cod_tip_spto := trn_k_df_cmn_nwt_xx_cnn.f_vrb_nam_val('COD_SPTO_AT');
                 l_sub_cod_spto := trn_k_df_cmn_nwt_xx_cnn.f_vrb_nam_val('SUB_COD_SPTO_SEGURADO');
                 l_tip_cod_spto := trn.UNO;
                 --
              ELSE
                 --
                 mx('--', 'ELSE - IF (NVL(g_mca_cancel_parc_pend,trn.SI)) = trn.SI THEN');
                 --
                 l_cod_tip_spto := trn_k_df_cmn_nwt_xx_cnn.f_vrb_nam_val('COD_SPTO_ER');
                 l_sub_cod_spto := trn_k_df_cmn_nwt_xx_cnn.f_vrb_nam_val('SUB_COD_SPTO_GEN');
                 l_tip_cod_spto := trn_k_df_cmn_nwt_xx_cnn.f_vrb_nam_val('COD_TIP_SPTO_SEGURADO');
                 --
              END IF;
              --
           END IF;
           --
       IF l_num_paso = 91 THEN --I 1.73
        --
        mx('--', 'l_num_paso = 91');
        --
        --{ v 2.29M
        IF l_imp_restituicao <> trn.CERO
        THEN
           --
           l_cod_tip_spto := trn_k_df_cmn_nwt_xx_cnn.f_vrb_nam_val('COD_SPTO_AP');
           --
        ELSE
           --
           l_cod_tip_spto := trn_k_df_cmn_nwt_xx_cnn.f_vrb_nam_val('COD_SPTO_AT');
           --
        END IF;
        --}
        l_sub_cod_spto := trn_k_df_cmn_nwt_xx_cnn.f_vrb_nam_val('SUB_COD_SPTO_INTERATIVIDADE');
        l_tip_cod_spto := trn.UNO;
           END IF;--F 1.73
           --
           -- I 5.37
           g_fec_efec_poliza := fp_devuelve_f('fec_efec_poliza'); -- Recupera o fec_efec_poliza
           --
           mx('g_fec_efec_poliza', g_fec_efec_poliza);
           mx('g_cod_ramo', g_cod_ramo);
           mx('l_sub_cod_spto', l_sub_cod_spto);
           mx('l_cod_tip_spto', l_cod_tip_spto);
           mx('g_fec_efec_spto', g_fec_efec_spto);
           --
           -- IF para validar se e Edosso de cancelamento e se a data do Endosso ? menor que a data de inicio de vig?ncia
           -- Para cancelar com a data de inicio, quando ainda nao estiver vigente.
           IF  (l_num_paso = 90 AND g_cod_ramo = 231 AND l_sub_cod_spto = 2 AND l_cod_tip_spto IN(508,558) AND g_fec_efec_spto < g_fec_efec_poliza) THEN
           --
             mx('--','Asigna FEC_EFEC_SPTO com a data de FEC_EFEC_POLIZA');
             --
             trn_k_global.asigna('FEC_EFEC_SPTO',TO_CHAR(g_fec_efec_poliza,TRN.FORMATO_FECHA));
             --
           --
           END IF;
           -- F 5.37
           --
           em_k_gen_spto_batch.p_executa_batch (p_tip_mvto_batch  => g_k_tip_mvto_batch_endosso,
                                                p_cod_cia         => l_cod_cia,
                                                p_cod_ramo        => l_cod_ramo,
                                                p_num_poliza      => l_num_propuesta,
                                                p_cod_spto        => l_cod_tip_spto,
                                                p_sub_cod_spto    => l_sub_cod_spto,
                                                p_cod_tip_spto    => l_tip_cod_spto,
                                                p_txt_motivo_spto => l_txt_motivo_spto,
                                                p_cod_retorno     => l_cod_retorno,
                                                p_msg_erro        => l_msg_erro);
           --
           -- 4.33
           em_k_gen_spto_batch.p_grava_dados_cotacao(l_cod_cia
                                                     ,l_cod_ramo
                                                     ,l_num_propuesta
                                                     ,trn.CERO
                                                     ,trn.SI
                                                     ,trn.SI
                                                     ,l_cod_retorno_coti
                                                     ,l_msg_erro_coti);
          --
        END IF;
        --
        trn_k_global.asigna('COD_BATCH_ENDOSSO',l_cod_retorno);
        trn_k_global.asigna('MSG_BATCH_ENDOSSO',l_msg_erro);
        --
        trn_k_global.asigna('mca_cotizacion_suplemento', trn.NO); -- V3.59
        --
        -- Borra las tablas P's
        IF NVL(l_cod_retorno
              ,trn.CERO) = trn.CERO AND
           g_mca_coti_spto = trn.NO
        THEN
          --
          pp_borra_tablas_p;
          --
        END IF;
        --
      ELSE
        --
        --INI. 3.53
        g_err_msg :=  TYPTAB_MSG_WS(); -- 4.99
        --
        g_err_msg.EXTEND(1); -- 4.99
        g_err_msg(g_err_msg.LAST) := fp_trata_msg('COD_ERROR', -- 4.99
                                                                                  l_cod_retorno,
                                                                                  l_msg_erro);
        --
        mx('l_cod_retorno',l_cod_retorno);
        mx('l_msg_erro',l_msg_erro);
        --FIM. 3.53
        --
      END IF;
      --
      IF NVL(l_cod_retorno,0) <> 0 THEN
         --
         g_err_msg :=  TYPTAB_MSG_WS(); -- 4.99
         --
         g_err_msg.EXTEND(1); -- 4.99
         g_err_msg(g_err_msg.LAST) := fp_trata_msg('COD_ERROR', -- 4.99
                                                                                   l_cod_retorno,
                                                                                   l_msg_erro);
         --
         mx('l_cod_retorno',l_cod_retorno);
         mx('l_msg_erro',l_msg_erro);
         --
      ELSE
         --
         pp_asigna_globales_cmn;
         --
         IF l_retorno%ISOPEN
            THEN
            --
            CLOSE l_retorno;
            --
         END IF;
         --
         OPEN l_retorno
         FOR
         SELECT a.*
           FROM a2000040 a
          WHERE a.cod_cia = l_cod_cia
            AND a.cod_ramo = l_cod_ramo
            AND a.num_poliza = l_num_propuesta
            AND a.mca_baja_cob = trn.No
            AND a.mca_vigente = trn.SI
            AND a.mca_vigente_apli = trn.SI
            AND NOT EXISTS
                    (SELECT 1
                       FROM a2000040 b
                      WHERE b.cod_cia = a.cod_cia
                        AND b.cod_ramo = a.cod_ramo
                        AND b.num_poliza = a.num_poliza
                        AND b.cod_ramo = a.cod_ramo
                        AND b.num_riesgo = a.num_riesgo
                        AND b.cod_cob = a.cod_cob
                        AND b.num_spto < a.num_spto
                        AND b.mca_baja_cob = a.mca_baja_cob)
            ORDER BY a.cod_cob;
         --
         LOOP
          --
          FETCH l_retorno INTO reg_a2000040;
            EXIT WHEN l_retorno%NOTFOUND;
            --
            IF trn_k_df_cmn_nwt_xx_vrb_cnc.f_row_val_exist(p_vrb_nam => 'COD_COB_INFO'
                                                          ,p_cnc_vrb_val => reg_a2000040.cod_cob)
            THEN
              --
              cod_cob_info := trn_k_df_cmn_nwt_xx_vrb_cnc.f_row_val_val(p_vrb_nam => 'COD_COB_INFO'
                                                                       ,p_cnc_vrb_val => reg_a2000040.cod_cob);
              --
              mx('cod_cob_info', cod_cob_info);
              --
              g_err_msg.EXTEND(1); -- 4.99
              g_err_msg(g_err_msg.LAST) := fp_trata_msg('COD_COB#'||reg_a2000040.cod_cob -- 4.99
                                                                                       ,NULL
                                                                                       ,g_k_pre_msg_erro || cod_cob_info || g_k_sep_cod_msg);
              --
            END IF;
            --
         END LOOP;
           --
         CLOSE l_retorno;
         --
         trn_k_global.borra_todas;
         --
      END IF;
      --
      mx('F', 'p_processa_emissao_endosso');
      --
   EXCEPTION
      WHEN OTHERS THEN
         --
         g_err_msg :=  TYPTAB_MSG_WS(); -- 4.99
         --
         g_err_msg.EXTEND(1); -- 4.99
         g_err_msg(g_err_msg.LAST) := fp_trata_msg('COD_ERROR', -- 4.99
                                                                                   SQLCODE,
                                                                                   SQLERRM);
         --
         trn_k_global.borra_todas;
         --
         mx('SQLCODE',SQLCODE);
         mx('SQLERRM',SQLERRM);
         --
         mx('F', 'EXCEPTION - p_processa_emissao_endosso');
         --
   END p_processa_emissao_endosso;
   --
   /* ------------------------------------------------------
   || Executa efetivacao da emissao do endosso
   */ ------------------------------------------------------
   --
   PROCEDURE pp_efetiva_emissao_endosso
   IS
      l_cod_cia           a2000030.cod_cia       %TYPE;
      l_cod_ramo          a2000030.cod_ramo      %TYPE;
      l_num_propuesta     a2000560.num_propuesta %TYPE;
      l_num_spto_apli     a2000030.num_spto_apli %TYPE;
      l_num_simulacion    c2990700.num_simulacion%TYPE;
      l_cod_retorno       NUMBER;
      l_msg_erro          a2000520.txt_error      %TYPE;
      -- {v2.26
      l_reg_a2000560      a2000560%ROWTYPE;
      l_num_spto          a2000030.num_spto%TYPE;
      l_num_apli          a2000030.num_apli%TYPE;
      --} v2.26
      --
      l_cod_agt           g2109142_vcr.cod_agt     %TYPE ; -- 2.92
      l_tip_produto       g2109142_vcr.tip_produto %TYPE ; -- 2.92
      l_eh_3_pacotes      BOOLEAN ; -- 2.92
      --
   BEGIN
      --
      mx('I', 'pp_efetiva_emissao_endosso');
      --
      l_cod_cia         := trn_k_global.devuelve('COD_CIA'      );
      l_cod_ramo        := trn_k_global.devuelve('COD_RAMO'     );
      l_num_propuesta   := trn_k_global.devuelve('NUM_PROPUESTA');
      l_cod_agt         := trn_k_global.devuelve('COD_AGT' ); -- 2.92
      l_tip_produto     := ea_k_231_utils.f_valor_dv('tip_produto');  -- 2.92
      --
      l_num_spto_apli   := trn_k_global.ref_f_global('NUM_SIMULACION');
      --
      mx('l_cod_cia'      , l_cod_cia      );
      mx('l_cod_ramo'     , l_cod_ramo     );
      mx('l_num_propuesta', l_num_propuesta);
      mx('l_num_spto_apli', l_num_spto_apli);
      mx('l_tip_produto'  , l_tip_produto); -- 2.92
      mx('l_cod_agt'      , l_cod_agt); -- 2.92
      --
      -- {v2.26
      l_num_spto    := em_f_max_spto_1(l_cod_cia,l_num_propuesta);
      l_num_apli    := em_f_max_apli_2(l_cod_cia,l_num_propuesta,l_num_spto);
      --
      pp_asigna('cod_cia'       , l_cod_cia                 );
      pp_asigna('cod_ramo'      , l_cod_ramo                );
      pp_asigna('num_poliza'    , l_num_propuesta           );
      pp_asigna('tip_mvto_batch', g_k_tip_mvto_batch_endosso);
      pp_asigna('num_spto'      , l_num_spto                );
      pp_asigna('num_apli'      , l_num_apli                );
      pp_asigna('num_spto_apli' , trn.CERO                  );
      -- } v2.26
      -- I 2.92
      l_eh_3_pacotes := ea_k_g2109142_vcr.f_eh_3_pacotes(l_cod_cia,
                                                         l_cod_ramo,
                                                         l_cod_agt,
                                                         l_tip_produto);
      -- I 3.47
      IF l_eh_3_pacotes THEN
       --
       pp_asigna('tres_pacotes',1);
       --
      ELSE
       --
       pp_asigna('tres_pacotes',0);
       --
      END IF;
  -- F 3.47
      IF l_eh_3_pacotes THEN
      --
        trn_k_global.asigna('num_simulacion',1);
        ea_k_definicion_pacote_vcr.p_carga_coberturas(1,TRUE);
        --
      END IF;
      -- F 2.92
      --
      pp_limpa_ssr; --v3.64
      --
      -- Processa efetivacao do endosso
      em_k_gen_spto_batch.p_efetivar(p_tip_mvto_batch => g_k_tip_mvto_batch_endosso,
                                     p_cod_cia        => l_cod_cia      ,
                                     p_cod_ramo       => l_cod_ramo     ,
                                     p_num_poliza     => l_num_propuesta,
                                     p_num_spto_apli  => l_num_spto_apli,
                                     p_cod_retorno    => l_cod_retorno  ,
                                     p_msg_erro       => l_msg_erro     );
      --
      trn_k_global.asigna('COD_BATCH_ENDOSSO',l_cod_retorno);
      trn_k_global.asigna('MSG_BATCH_ENDOSSO',l_msg_erro);
      --
      mx('l_cod_retorno',l_cod_retorno);
      mx('l_msg_erro'   ,l_msg_erro   );
      --
      IF NVL(l_cod_retorno,0) <> 0 THEN
         --
         --g_err_msg :=  TYPTAB_MSG_WS(); --5.32 -- 4.99
         --
         g_err_msg.EXTEND(1); -- 4.99
         g_err_msg(g_err_msg.LAST) := fp_trata_msg('COD_ERROR', -- 4.99
                                                                                   l_cod_retorno,
                                                                                   l_msg_erro);
         --
         --{ v2.26
         l_reg_a2000560.cod_cia       := l_cod_cia;
         l_reg_a2000560.num_propuesta := l_num_propuesta;
         l_reg_a2000560.cod_campo     := 'MCA_CALCULO_OK';
         l_reg_a2000560.Val_Campo     := trn.NO;
         --
         pp_inserta_a2000560(l_reg_a2000560);
         --
         em_k_gen_spto_batch.p_grava_dados_cotacao(l_cod_cia
                                                  ,l_cod_ramo
                                                  ,l_num_propuesta
                                                  ,l_num_spto_apli
                                                  ,trn.NO
                                                  ,trn.NO
                                                  ,l_cod_retorno
                                                  ,l_msg_erro);
         --} v2.26
         --
         mx('l_cod_retorno-2',l_cod_retorno);
         mx('l_msg_erro-2'   ,l_msg_erro   );
         --
         mx('F', 'ERRO - p_efetiva_emissao_endosso');
         --
      ELSE
         --
         pp_val_msg_vistoria(p_cod_cia       => l_cod_cia      ,
                             p_cod_ramo      => l_cod_ramo     ,
                             p_num_propuesta => l_num_propuesta);
         --
         -- {v1.94
         em_k_gen_spto_batch.p_grava_dados_cotacao(l_cod_cia
                                                  ,l_cod_ramo
                                                  ,l_num_propuesta
                                                  ,l_num_spto_apli
                                                  ,trn.NO
                                                  ,trn.SI -- v2.26
                                                  ,l_cod_retorno
                                                  ,l_msg_erro);
         -- }v1.94
         --
       trn_k_global.asigna('cod_cia'       , NVL(trn_k_global.ref_f_global('cod_cia')       , l_cod_cia                    )); -- 2.26
         trn_k_global.asigna('cod_ramo'      , NVL(trn_k_global.ref_f_global('cod_ramo')      , l_cod_ramo                   )); -- 2.26
         trn_k_global.asigna('num_poliza'    , NVL(trn_k_global.ref_f_global('num_poliza')    , l_num_propuesta              )); -- 2.26
         trn_k_global.asigna('num_spto'      , NVL(trn_k_global.ref_f_global('num_spto')      , l_num_spto                   )); -- 2.26
         trn_k_global.asigna('num_apli'      , NVL(trn_k_global.ref_f_global('num_apli')      , l_num_apli                   )); -- 2.26
         trn_k_global.asigna('num_spto_apli' , NVL(trn_k_global.ref_f_global('num_spto_apli') , l_num_spto_apli              )); -- 2.26
         trn_k_global.asigna('tip_mvto_batch', NVL(trn_k_global.ref_f_global('tip_mvto_batch'), ea_k_231_utils.g_k_spto_batch)); -- 2.26
         trn_k_global.asigna('tip_emision'   , NVL(trn_k_global.ref_f_global('tip_emision')   , em.TIP_EMISION_SPTO          )); -- V2.821
         --
         em_k_gen_spto_batch.p_traspasa_tablas; -- v2.26
         --
         pp_actualiza_fec_efec_recibo;  -- v2.821
         --
      END IF;
      --
      mx('F', 'pp_efetiva_emissao_endosso');
      --
   END pp_efetiva_emissao_endosso;
   --
   /* ------------------------------------------------------
   || Executa efetivacao da emissao do endosso
   */ ------------------------------------------------------
   --
   PROCEDURE p_efetiva_emissao_endosso
   IS
      --
   BEGIN
      --
      mx('I', 'p_efetiva_emissao_endosso');
      --
      trn_k_global.asigna('NUM_SIMULACION', fp_recupera_valor (g_xml_in, 'NUM_SIMULACION'));
      trn_k_global.asigna('NUM_SERIE'     , fp_recupera_valor (g_xml_in, 'NUM_SERIE')     );
      trn_k_global.asigna('NUM_MATRICULA' , fp_recupera_valor (g_xml_in, 'NUM_MATRICULA') );
      --
      pp_efetiva_emissao_endosso;
      --
      mx('F', 'p_efetiva_emissao_endosso');
      --
   END p_efetiva_emissao_endosso;
   --
   /* ------------------------------------------------------
   || Executa efetivacao da emissao do endosso - Simulador
   */ ------------------------------------------------------
   --
   PROCEDURE p_tron_efetiva_emissao_endosso
   IS
      --
   BEGIN
      --
      mx('I', 'p_tron_efetiva_emissao_endosso');
      --
      pp_efetiva_emissao_endosso;
      --
      mx('F', 'p_tron_efetiva_emissao_endosso');
      --
   END p_tron_efetiva_emissao_endosso;
   --
   /* ------------------------------------------------------
   || Executa a emissao do endosso
   */ ------------------------------------------------------
   --
   PROCEDURE pp_emitir_endosso
   IS
      l_cod_cia           a2000030.cod_cia       %TYPE;
      l_cod_ramo          a2000030.cod_ramo      %TYPE;
      l_num_propuesta     a2000560.num_propuesta %TYPE;
      l_num_spto_apli     a2000030.num_spto_apli %TYPE;
      l_num_simulacion    c2990700.num_simulacion%TYPE;
      l_cod_retorno       NUMBER;
      l_msg_erro          a2000520.txt_error      %TYPE;
      --
   BEGIN
      --
      mx('I', 'pp_emitir_endosso');
      --
      l_cod_cia         := trn_k_global.devuelve('COD_CIA'      );
      l_cod_ramo        := trn_k_global.devuelve('COD_RAMO'     );
      l_num_propuesta   := trn_k_global.devuelve('NUM_PROPUESTA');
      --
      l_num_spto_apli := nvl(trn_k_global.ref_f_global('NUM_SIMULACION'),trn.CERO); -- 3.39
      --
      mx('l_cod_cia'      , l_cod_cia      );
      mx('l_cod_ramo'     , l_cod_ramo     );
      mx('l_num_propuesta', l_num_propuesta);
      mx('l_num_spto_apli', l_num_spto_apli);
      --
      -- Processa efetivacao do endosso
      em_k_gen_spto_batch.p_emitir(p_tip_mvto_batch => g_k_tip_mvto_batch_endosso,
                                   p_cod_cia        => l_cod_cia      ,
                                   p_cod_ramo       => l_cod_ramo     ,
                                   p_num_poliza     => l_num_propuesta,
                                   p_num_spto_apli  => l_num_spto_apli,
                                   p_cod_retorno    => l_cod_retorno  ,
                                   p_msg_erro       => l_msg_erro     );
      --
      trn_k_global.asigna('COD_BATCH_ENDOSSO',l_cod_retorno);
      trn_k_global.asigna('MSG_BATCH_ENDOSSO',l_msg_erro);
      --
      mx('l_cod_retorno',l_cod_retorno);
      mx('l_msg_erro'   ,l_msg_erro   );
      --
      IF NVL(l_cod_retorno,0) <> 0 THEN
         --
         g_err_msg :=  TYPTAB_MSG_WS(); -- 4.99
         --
         g_err_msg.EXTEND(1); -- 4.99
         g_err_msg(g_err_msg.LAST) := fp_trata_msg('COD_ERROR', -- 4.99
                                                                                   l_cod_retorno,
                                                                                   l_msg_erro);
         --
         mx('l_cod_retorno-2',l_cod_retorno);
         mx('l_msg_erro-2'   ,l_msg_erro   );
         --
         mx('F', 'ERRO - p_efetiva_emissao_endosso');
         --
      END IF;
      --
      mx('F', 'pp_emitir_endosso');
      --
   END pp_emitir_endosso;
   --
   /* ------------------------------------------------------
   || Executa a emissao do endosso - CR
   */ ------------------------------------------------------
   --
   PROCEDURE p_emitir_endosso
   IS
      --
   BEGIN
      --
      mx('I', 'p_emitir_endosso');
      --
      trn_k_global.asigna('NUM_SIMULACION'    , fp_recupera_valor (g_xml_in, 'NUM_SIMULACION')  );
      trn_k_global.asigna('NUM_SERIE'         , fp_recupera_valor (g_xml_in, 'NUM_SERIE')       );
      trn_k_global.asigna('NUM_MATRICULA'     , fp_recupera_valor (g_xml_in, 'NUM_MATRICULA')   );
      trn_k_global.asigna('COD_FORMA_PAGO'    , fp_recupera_valor (g_xml_in, 'COD_FORMA_PAGO')    );
      trn_k_global.asigna('COD_FRACC_PAGO'    , fp_recupera_valor (g_xml_in, 'COD_FRACC_PAGO')    );
      trn_k_global.asigna('NUM_DIA_VENCIMENTO', fp_recupera_valor (g_xml_in, 'NUM_DIA_VENCIMENTO'));
      trn_k_global.asigna('COD_BANCO_RESP'    , fp_recupera_valor (g_xml_in, 'COD_BANCO_RESP')  );
      trn_k_global.asigna('COD_AGENCIA_RESP'  , fp_recupera_valor (g_xml_in, 'COD_AGENCIA_RESP'));
      trn_k_global.asigna('TXT_AUX9_RESP'     , fp_recupera_valor (g_xml_in, 'TXT_AUX9_RESP')   );
      trn_k_global.asigna('COD_CONTA_CORRENTE_RESP', fp_recupera_valor (g_xml_in, 'COD_CONTA_CORRENTE_RESP'));
      trn_k_global.asigna('COD_DIG_CORRENTE_RESP'  , fp_recupera_valor (g_xml_in, 'COD_DIG_CORRENTE_RESP')  );
      trn_k_global.asigna('NUM_CARTAO_CREDITO'     , fp_recupera_valor (g_xml_in, 'NUM_CARTAO_CREDITO')     );
      trn_k_global.asigna('NUM_VALIDADE_CARTAO'    , fp_recupera_valor (g_xml_in, 'NUM_VALIDADE_CARTAO')    );
      --
      pp_emitir_endosso;
      --
      mx('F', 'p_emitir_endosso');
      --
   END p_emitir_endosso;
   --
   /* ------------------------------------------------------
   || Executa a emissao do endosso - Simulador
   */ ------------------------------------------------------
   --
   PROCEDURE p_tron_emitir_endosso
   IS
      --
   BEGIN
      --
      mx('I', 'p_tron_emitir_endosso');
      --
      pp_emitir_endosso;
      --
      mx('F', 'p_tron_emitir_endosso');
      --
   END p_tron_emitir_endosso;
   --
   /* ------------------------------------------------------
   || Processa busca de procedimentos por passo/cia/ramo
   */ ------------------------------------------------------
   --
 PROCEDURE p_busca_procedimento
   IS
      --
      l_cursor_proced    ref_cursor;
      l_rec_dados_proced rec_procedimentos;
      l_mca_inh          G9999991.mca_inh           %TYPE;
      l_cod_cia          G9999992.cod_cia           %TYPE;
      l_cod_ramo         G9999992.cod_ramo          %TYPE;
      l_cod_tarifa       G9999992.cod_tarifa        %TYPE;
      l_cod_agt          G9999992.cod_agt           %TYPE := trn.NULO;
      l_num_cotizacion   C2009030_vcr.num_cotizacion%TYPE;
      l_num_paso         G9999992.num_paso          %TYPE;
      l_tip_mvto_batch   G9999991.tip_mvto_batch    %TYPE;
      l_cod_servico      G9999991.cod_servicio      %TYPE;
      --
      l_qtdd_erro        NUMBER := trn.CERO;
      --
      -- { jjesus - 2.08
      l_qtde_agt         NUMBER := trn.CERO;
      --
      --I. 5.17 Correcao ORA 2000

      --
      l_nom_prg          g9999991.nom_prg%TYPE;
      --
      l_anx_mensaje       VARCHAR2(350);
      --F. 5.17 Correcao ORA 2000
      CURSOR c_g9999991 (pc_cod_cia        g9999992.cod_cia        %TYPE,
                         pc_cod_ramo       g9999992.cod_ramo       %TYPE,
                         pc_cod_tarifa     g9999992.cod_tarifa     %TYPE,
                         pc_cod_agt        g9999992.cod_agt        %TYPE,
                         pc_tip_mvto_batch g9999992.tip_mvto_batch %TYPE)
       IS
       SELECT COUNT(1)
         FROM g9999991
        WHERE cod_cia        = pc_cod_cia
          AND cod_ramo       = pc_cod_ramo
          AND cod_tarifa     = pc_cod_tarifa
          AND cod_agt        = pc_cod_agt
          AND tip_mvto_batch = pc_tip_mvto_batch
          AND mca_inh        = trn.NO;
      --
      -- } jjesus 2.08
      --
   BEGIN
      --
      mx('I', 'p_busca_procedimento');
      --
      l_cod_cia         := trn_k_global.devuelve('COD_CIA');
      l_cod_ramo        := trn_k_global.devuelve('COD_RAMO');
      l_cod_tarifa      := trn_k_global.devuelve('COD_TARIFA');
      l_cod_agt         := trn_k_global.devuelve('COD_AGT');
      l_num_paso        := trn_k_global.ref_f_global('NUM_PASO');
      l_tip_mvto_batch  := NVL(trn_k_global.devuelve('TIP_MVTO_BATCH'), g_k_tip_mvto_batch_cotacao);
      l_cod_servico     := trn_k_global.ref_f_global('COD_SERVICIO');
      --
      --ABC - INI
      mx('l_cod_cia', trn_k_global.devuelve('COD_CIA'));
      mx('l_cod_ramo', trn_k_global.devuelve('COD_RAMO'));
      mx('l_cod_tarifa', trn_k_global.devuelve('COD_TARIFA'));
      mx('l_cod_agt', trn_k_global.devuelve('COD_AGT'));
      mx('l_num_paso', trn_k_global.ref_f_global('NUM_PASO'));
      mx('l_tip_mvto_batch', trn_k_global.devuelve('TIP_MVTO_BATCH'));
      mx('l_cod_servico', trn_k_global.ref_f_global('COD_SERVICIO'));
      --ABC - FIM
      IF l_cod_servico IS NULL AND l_num_paso IS NOT NULL THEN
         --
         mx('--','IF l_cod_servico IS NULL AND l_num_paso IS NOT NULL THEN');
         --
         -- { jjesus - 2.08
         IF c_g9999991%ISOPEN
         THEN
           --
           CLOSE c_g9999991;
           --
         END IF;
         --
         OPEN c_g9999991 (l_cod_cia, l_cod_ramo, l_cod_tarifa, l_cod_agt, l_tip_mvto_batch);
         --
         FETCH c_g9999991 INTO l_qtde_agt;
         --
         CLOSE c_g9999991;
         --
         IF l_qtde_agt = trn.CERO THEN
           --
           l_cod_agt  := g_k_cod_agt_generico;
           --
         END IF;
         -- } jjesus - 2.08
         --
         -- CURSOR DE PASSOS
      --I 2.54
       IF l_num_paso = 16 THEN
        --
        l_cod_agt := g_k_cod_agt_generico;
        --
      END IF;
      --F2.54
         OPEN l_cursor_proced
         FOR
            SELECT g9999991.nom_prg
              FROM g9999991
             WHERE g9999991.cod_cia        = l_cod_cia
               AND g9999991.cod_ramo       = l_cod_ramo
               AND G9999991.cod_tarifa     = l_cod_tarifa
               AND G9999991.cod_agt        = l_cod_agt
               AND G9999991.num_paso       = l_num_paso
               AND G9999991.tip_mvto_batch = l_tip_mvto_batch
               AND G9999991.mca_inh        = trn.NO
            ORDER BY
               G9999991.num_orden;
      ELSE
         --
         mx('--','ELSE - IF l_cod_servico IS NULL AND l_num_paso IS NOT NULL THEN');
         -- CURSOR DE SERVICOS
         OPEN l_cursor_proced
         FOR
            SELECT g9999991.nom_prg
              FROM g9999991
             WHERE g9999991.cod_cia      = l_cod_cia
               AND g9999991.cod_ramo     = g_k_cod_ramo_generico
               AND G9999991.cod_tarifa   = g_k_cod_tarifa_generico
               AND G9999991.cod_agt      = g_k_cod_agt_generico
               AND G9999991.num_paso     = NVL(l_num_paso, g_k_num_paso_generico) -- jwolff
               AND G9999991.cod_servicio = l_cod_servico
               AND G9999991.tip_mvto_batch = NVL(l_tip_mvto_batch, G9999991.tip_mvto_batch) -- JWOLFF
               AND G9999991.mca_inh      = trn.NO;
      END IF;
      --
      LOOP
       FETCH l_cursor_proced
       INTO  l_rec_dados_proced;
          --
          SELECT COUNT(X2000000.cod_mensagem) INTO l_qtdd_erro
            FROM TABLE(CAST(g_err_msg AS TYPTAB_MSG_WS)) X2000000 -- 4.99
           WHERE X2000000.tip_mensagem = g_k_tip_msg_error;
          --
          EXIT WHEN l_cursor_proced%NOTFOUND OR l_qtdd_erro > trn.CERO;
          --
          mx('EXECUTA DO PROCESSAMENTO: ', l_rec_dados_proced.nom_prg);
          --I. 5.17 Correcao ORA 2000
          l_nom_prg := l_rec_dados_proced.nom_prg;
          --F. 5.17 Correcao ORA 2000
          trn_p_dinamico(l_rec_dados_proced.nom_prg);
          --
      END LOOP;
      --
      IF l_cursor_proced%ISOPEN THEN
         CLOSE l_cursor_proced;
      END IF;
      --
      mx('F', 'p_busca_procedimento');
      --
   EXCEPTION
      WHEN OTHERS THEN
         -- I. 5.17 Correcao ORA 2000
         g_txt_error      := substr(SQLERRM,1,2000);
         l_anx_mensaje := trn.BLANCO || ss_k_mensaje.f_solo_texto_idioma(99999028, g_cod_idioma);
         --g_cod_mensaje    := '99999028';
         --g_anx_mensaje    := SQLERRM;
         --
         g_err_msg.EXTEND(1);
         g_err_msg(g_err_msg.LAST) := fp_trata_msg('COD_RETORNO',
                                                     '99999028',
                                                     l_anx_mensaje || trn.BLANCO || l_nom_prg);
         -- I 5.39
         g_err_msg.EXTEND(1);
         g_err_msg(g_err_msg.LAST) := fp_trata_msg('',
                                                     g_k_cod_error_gen,
                                                     SQLERRM);

         -- F 5.39

         --
         mx('F', 'p_busca_procedimento - EXCEPTION');
         --
         pp_devuelve_error;
         -- F. 5.17 Correcao ORA 2000

   END p_busca_procedimento;
   --
   /* ------------------------------------------------------
   || Processa parametro CLOB e transforma em TableType
   */ ------------------------------------------------------
   --
   PROCEDURE p_processa_dados_cotacao
   IS
      --
      l_xmldoc          DBMS_XMLDOM.DOMDOCUMENT;
      l_node_list       DBMS_XMLDOM.DOMNODELIST;
      l_node            DBMS_XMLDOM.DOMNODE;
      --
      l_val_cod_campo   c2000000.nom_columna%TYPE;
      l_cod_campo       c2000000.nom_columna%TYPE;
      l_val_campo       varchar2(30000); -- v.4.71
      --l_val_campo       c2000000.val_columna%TYPE; -- v.4.71
      l_node_name       VARCHAR(4000);
      l_len             NUMBER;
      --
      l_cod_cia         G9999992.cod_cia%TYPE;
      l_cod_ramo        G9999992.cod_ramo%TYPE;
      l_cod_tarifa      G9999992.cod_tarifa%TYPE;
      l_cod_agt         G9999992.cod_agt%TYPE;
      l_num_cotizacion  C2009030_vcr.num_cotizacion%TYPE;
      l_num_paso        G9999992.num_paso%TYPE;
      --

   BEGIN
      --
      mx('I', 'p_processa_dados_cotacao');
      --
      l_cod_cia         := trn_k_global.devuelve('COD_CIA');
      l_cod_ramo        := trn_k_global.devuelve('COD_RAMO');
      l_cod_tarifa      := trn_k_global.devuelve('COD_TARIFA');
      l_cod_agt         := trn_k_global.devuelve('COD_AGT');
      l_num_cotizacion  := trn_k_global.ref_f_global('NUM_COTIZACION');
      l_num_paso        := trn_k_global.devuelve('NUM_PASO');
      --
      g_cot_dados := TYPTAB_DADOS_COT();
      g_cot_reg   := TYPREG_DADOS_COT.autocreate;
      --
      IF g_xml_in IS NOT NULL THEN
         --
         l_xmldoc        := fp_transforma_xml (g_xml_in);
         --
         l_node_list     := DBMS_XMLDOM.getElementsByTagName(l_xmldoc, trn.ASTERISCO);
         l_len           := DBMS_XMLDOM.getLength(l_node_list);
         l_cod_campo     := NULL;
         l_val_campo     := NULL;
         --
         FOR i IN trn.CERO .. l_len - trn.UNO LOOP
            --
            l_node := DBMS_XMLDOM.item(l_node_list, i);
            l_val_cod_campo := DBMS_XMLDOM.getNodeName(l_node);
            --
            IF l_val_cod_campo = g_k_val_campo_codCampo THEN
               --
               l_cod_campo := DBMS_XMLDOM.getNodeValue(DBMS_XMLDOM.getFirstChild(l_node));
               --
            ELSIF l_val_cod_campo = g_k_val_campo_valCampo THEN

               -- I 4.02
              /* l_val_campo := SUBSTR(DBMS_XMLDOM.getNodeValue(DBMS_XMLDOM.getFirstChild(l_node)),1,80); -- v. 3.60*/

               -- Inicio - Andreza - Limitar caracteres dos campode nom_domicilio a 40 para nao dar erro de em_f_crear_presupuesto_vcr --v 4.01
               IF l_cod_campo like 'NOM_DOMICILIO%' THEN
                 l_val_campo := SUBSTR(DBMS_XMLDOM.getNodeValue(DBMS_XMLDOM.getFirstChild(l_node)),1,40); -- v. 4.01
               ELSIF l_cod_campo like 'TOKEN' AND l_cod_agt = 114500 THEN
                 l_val_campo := SUBSTR(DBMS_XMLDOM.getNodeValue(DBMS_XMLDOM.getFirstChild(l_node)),1,30000); -- v. 4.96
               ELSIF l_cod_campo like 'NUM_SERIE' THEN --v. 5.18
                 l_val_campo := UPPER(SUBSTR(DBMS_XMLDOM.getNodeValue(DBMS_XMLDOM.getFirstChild(l_node)),1,80)); --v. 5.18
               ELSE
                 l_val_campo := SUBSTR(DBMS_XMLDOM.getNodeValue(DBMS_XMLDOM.getFirstChild(l_node)),1,80); -- v. 4.01
               END IF;

               --FIM -Andreza - Limitar caracteres dos campode nom_domicilio a 40 para nao dar erro de em_f_crear_presupuesto_vcr -- v 4.01
               -- F 4.02

            ELSIF l_val_cod_campo = g_k_val_campo_codAccesorio THEN
               --
               l_cod_campo := g_k_prefixo_cod_acessorio || DBMS_XMLDOM.getNodeValue(DBMS_XMLDOM.getFirstChild(l_node));
               --

            ELSIF l_val_cod_campo = g_k_val_campo_nomAccesorio THEN
               --
               l_cod_campo := l_cod_campo || '_' ||DBMS_XMLDOM.getNodeValue(DBMS_XMLDOM.getFirstChild(l_node));
               --

            ELSIF l_val_cod_campo = g_k_val_campo_impAccesorio THEN
               --
               l_val_campo := SUBSTR(DBMS_XMLDOM.getNodeValue(DBMS_XMLDOM.getFirstChild(l_node)),1,80); -- v. 3.60
               --

            END IF;

            --
--          IF l_val_campo IS NOT NULL AND l_cod_campo IS NOT NULL THEN
            IF l_cod_campo IS NOT NULL AND l_val_cod_campo IN (g_k_val_campo_valCampo,g_k_val_campo_impAccesorio) THEN
               -- v. 4.71 inicio
               IF l_cod_campo like 'TOKEN' AND l_cod_agt = 114500 THEN
                 --
                 em_k_c2009050_vcr_vcr.p_inserta_mailing(p_cod_cia => l_cod_cia,
                                          p_cod_ramo => l_cod_ramo,
                                          p_num_cotacao => l_num_cotizacion,
                                          p_acess_token => l_val_campo,
                                          p_cod_agenda => NULL,
                                          p_fec_contratacao => NULL);
               --
               ELSE
               --
               g_cot_reg.cod_campo := l_cod_campo;
               g_cot_reg.val_campo := l_val_campo;
               --
               g_cot_dados.EXTEND(1);
               g_cot_dados(g_cot_dados.LAST) := g_cot_reg;
               --
               l_cod_campo   := NULL;
               l_val_campo   := NULL;
               --
               END IF;
               -- . 4.71 fim
            END IF;

            --
         END LOOP;

         --
      END IF;

      --
      mx('F', 'p_processa_dados_cotacao');
      --
   EXCEPTION
      WHEN OTHERS THEN
         --
         g_cod_mensaje    := g_k_cod_error_gen;
         g_anx_mensaje    := SQLERRM;
         --
         mx('F', 'p_processa_dados_cotacao - EXCEPTION');
         --
         pp_devuelve_error;
         --

   END p_processa_dados_cotacao;
   --
   /* ------------------------------------------------------
   || Processa parametro CLOB de entrada
   */ ------------------------------------------------------
   --
   PROCEDURE p_processa_dados_cob_endosso
   IS
      --
      l_xmldoc                 DBMS_XMLDOM.DOMDOCUMENT;
      l_node_list              DBMS_XMLDOM.DOMNODELIST;
      l_node                   DBMS_XMLDOM.DOMNODE;
      --
      l_len                    NUMBER  := 0;
      l_registro               NUMBER  := 0;
      l_inserir_registro       BOOLEAN := FALSE;
      l_nom_tag                c2000000.nom_columna%TYPE;
      l_cod_pacote             varchar2(80) := NULL;
      l_cod_cob                varchar2(80) := NULL;
      l_tag_nivel_cob          varchar2(80) := NULL;
      l_num_simulacion         varchar2(80) := NULL;
      l_mca_seleccion_cob      varchar2(80) := NULL;
      l_mca_val_defecto        varchar2(80) := NULL;
      l_mca_sele_atributo      varchar2(80) := NULL;
      l_cod_campo              varchar2(80) := NULL;
      l_val_campo              varchar2(80) := NULL;
      l_txt_campo              varchar2(80) := NULL;
      l_tip_dados_cob          varchar2(80) := NULL;
      l_tip_cob                varchar2(80) := NULL;
      l_col_atributos_list     varchar2(80) := NULL;
      --
      l_rec_cob_endosso_retorno     rec_cob_endosso_retorno;
      l_rec_tab_cob_endosso_retorno rec_tab_cob_endosso_retorno;
      l_reg_a2000560           A2000560%ROWTYPE;
      --
      l_cod_cia                G9999992.cod_cia            %TYPE;
      l_cod_ramo               G9999992.cod_ramo           %TYPE;
      l_cod_tarifa             G9999992.cod_tarifa         %TYPE;
      l_cod_agt                G9999992.cod_agt            %TYPE;
      l_num_cotizacion         C2009030_vcr.num_cotizacion %TYPE;
      l_num_paso               G9999992.num_paso           %TYPE;
      --
      l_tip_merc_deter_ends    g2990006.nom_valor          %TYPE; -- < v 3.30 > -- se importacao por planilha passa por aqui, pode ser informada a descricao e nao o valor (R,D,M)
      --
      CURSOR c_coberturas_atualizar
      IS
          SELECT
              COBERTURAS.id_seq,
              COBERTURAS.num_cotizacion,
              COBERTURAS.num_simulacion,
              COBERTURAS.cod_pacote,
              COBERTURAS.cod_cob,
              COBERTURAS.tip_cob,
              COBERTURAS.mca_seleccion_cob,
              COBERTURAS.mca_val_defecto_indenizacao,
              COBERTURAS.mca_seleccion_atributo,
              COBERTURAS.tip_dados_cob,
              COBERTURAS.cod_campo,
              COBERTURAS.val_campo,
              COBERTURAS.txt_campo,
              COBERTURAS.val_premio_casco
          FROM
             TABLE(CAST(g_cob_dados AS TYPTAB_DADOS_COB)) COBERTURAS
          WHERE COBERTURAS.mca_seleccion_cob IN ('N', 'S')
          GROUP BY
             COBERTURAS.id_seq,
              COBERTURAS.num_cotizacion,
              COBERTURAS.num_simulacion,
              COBERTURAS.cod_pacote,
              COBERTURAS.cod_cob,
              COBERTURAS.tip_cob,
              COBERTURAS.mca_seleccion_cob,
              COBERTURAS.mca_val_defecto_indenizacao,
              COBERTURAS.mca_seleccion_atributo,
              COBERTURAS.tip_dados_cob,
              COBERTURAS.cod_campo,
              COBERTURAS.val_campo,
              COBERTURAS.txt_campo,
              COBERTURAS.val_premio_casco;
      --
      CURSOR c_coberturas_limpar
            IS
                SELECT
                    COBERTURAS.cod_cob,
                    COBERTURAS.tip_dados_cob,
                    COBERTURAS.tip_cob,
                    COBERTURAS.cod_campo,
                    COBERTURAS.mca_seleccion_cob,
                    COBERTURAS.cod_pacote
                FROM
                    TABLE(CAST(g_cob_dados AS TYPTAB_DADOS_COB)) COBERTURAS
                GROUP BY
                COBERTURAS.cod_cob,
                    COBERTURAS.tip_dados_cob,
                    COBERTURAS.tip_cob,
                    COBERTURAS.cod_campo,
                    COBERTURAS.mca_seleccion_cob,
                    COBERTURAS.cod_pacote
                order by  COBERTURAS.cod_cob, COBERTURAS.cod_campo;
      --
      CURSOR c_coberturas_pacote(p_cmp_val      df_cmn_nwt_xx_vrb_cnc.cmp_val%TYPE,
                                 p_lob_val      df_cmn_nwt_xx_vrb_cnc.lob_val%TYPE,
                                 p_cmp_pac      df_cmn_nwt_xx_vrb_cnc.cmp_val%TYPE)
             IS
               SELECT distinct cnc_vrb_val
                 FROM df_cmn_nwt_xx_vrb_cnc a
                WHERE a.cmp_val         = p_cmp_val
                  AND a.lob_val         = p_lob_val
                  AND a.vrb_nam         LIKE  (g_k_cod_campo_cob_casco || '#%' || p_cmp_pac)
                  AND a.vld_dat         = (SELECT MAX(vld_dat)
                                             FROM df_cmn_nwt_xx_vrb_cnc b
                                            WHERE b.cmp_val         = a.cmp_val
                                              AND b.lob_val         = a.lob_val
                                              AND b.mdt_val         = a.mdt_val
                                              AND b.crn_val         = a.crn_val
                                              AND b.cvr_val         = a.cvr_val
                                              AND b.frs_lvl_val     = a.frs_lvl_val
                                              AND b.scn_lvl_val     = a.scn_lvl_val
                                              AND b.thr_lvl_val     = a.thr_lvl_val
                                              AND b.frs_dst_hnl_val = a.frs_dst_hnl_val
                                              AND b.scn_dst_hnl_val = a.scn_dst_hnl_val
                                              AND b.thr_dst_hnl_val = a.thr_dst_hnl_val
                                              AND b.gpp_val         = a.gpp_val
                                              AND b.del_val         = a.del_val
                                              AND b.sbl_val         = a.sbl_val
                                              AND b.ply_val         = a.ply_val
                                              AND b.agn_val         = a.agn_val
                                              AND b.vrb_nam         = a.vrb_nam
                                              AND b.cnc_vrb_val     = a.cnc_vrb_val);
      --
      CURSOR c_coberturas_g2000020(p_cod_cia      g2000020.cod_cia%TYPE,
                                   p_cod_ramo     g2000020.cod_ramo%TYPE,
                                   p_cod_campo     g2000020.cod_campo%TYPE)
             IS
             SELECT cod_cob
               FROM g2000020
              WHERE g2000020.cod_cia   = p_cod_cia
                AND g2000020.cod_ramo  = p_cod_ramo
                AND g2000020.cod_campo = p_cod_campo;
      --
      FUNCTION fp_excluye(p_cod_cob IN a2000040.cod_cob%TYPE)
      RETURN BOOLEAN AS
        --
        CURSOR c_excluidas IS
          SELECT a.cod_cob
            FROM a2000040 A
                ,a2000560 b
                ,a2000560 c -- v3.09
           WHERE a.cod_cia                   = l_cod_cia
             AND a.cod_ramo                  = l_cod_ramo
             AND a.num_poliza                = l_num_cotizacion
             AND a.num_riesgo                = trn.UNO
             AND NVL(a.mca_baja_cob, trn.NO) = trn.NO
             AND a.mca_vigente               = trn.SI
             AND a.mca_vigente_apli          = trn.SI
             AND b.cod_cia                   = a.cod_cia
             AND b.num_propuesta             = a.num_poliza
             AND b.cod_campo                 = 'VAL_CLAVE_FORMULA'
             -- {v3.09
             AND c.cod_cia                   = a.cod_cia
             AND c.num_propuesta             = a.num_poliza
             AND c.cod_campo                 = 'COD_TARIFA'
             -- }v3.09
             AND EXISTS (SELECT 1
                           FROM g2109040_vcr g40
                               ,g2109041_vcr g41
                         WHERE g40.cod_cia           = a.cod_cia
                           AND g40.cod_ramo          = a.cod_ramo
                           AND g40.cod_tarifa        = c.val_campo -- v3.09
                           AND g40.val_clave_formula = b.val_campo
                           AND g40.cod_cob           = a.cod_cob
                           AND g40.cod_cia           = g41.cod_cia
                           AND g40.cod_ramo          = g41.cod_ramo
                           AND g40.cod_tarifa        = g41.cod_tarifa -- v3.09
                           AND g40.cod_modalidad     = g41.cod_modalidad
                           AND g40.cod_cob           = g41.cod_cob
                           AND g40.val_clave_formula = g41.val_clave_formula
                           AND g40.mca_contrata      = trn.NO
                           AND g41.mca_contrata_cob  = trn.NO);
        --
        reg_excluidas c_excluidas%ROWTYPE;
        --
   BEGIN
        --
        mx('I', 'fp_excluye');
        --
        IF NVL(trn_k_global.ref_f_global('mca_consulta_excluidas'), trn.SI) = trn.SI
        THEN
          --
          t_cobs_excluidas := type_cobs_excluidas();
          --
          IF c_excluidas%ISOPEN
          THEN
            --
            CLOSE c_excluidas;
            --
          END IF;
          --
          OPEN c_excluidas;
          --
          LOOP
            --
            FETCH c_excluidas INTO reg_excluidas;
            EXIT WHEN c_excluidas%NOTFOUND;
            --
            t_cobs_excluidas.EXTEND(1);
            t_cobs_excluidas(t_cobs_excluidas.LAST) := reg_excluidas.cod_cob;
            --
            mx('-', 'reg_excluidas.cod_cob: ' || reg_excluidas.cod_cob);
            --
          END LOOP;
          --
          CLOSE c_excluidas;
          --
          trn_k_global.asigna('mca_consulta_excluidas', trn.NO);
          --
        END IF;
        --
        FOR i IN t_cobs_excluidas.FIRST .. t_cobs_excluidas.LAST
        LOOP
          --
          --mx('-', 't_cobs_excluidas(i): ' || t_cobs_excluidas(i));
          --mx('-', 'p_cod_cob' || p_cod_cob);
          --
          IF t_cobs_excluidas(i) = p_cod_cob
          THEN
            --
            mx('F', 'fp_excluye');
            --
            RETURN TRUE;
            --
          END IF;
          --
        END LOOP;
        --
        mx('F', 'fp_excluye');
        --
        RETURN FALSE;
        --
      EXCEPTION
        WHEN OTHERS
        THEN
          --
          mx('F', 'fp_excluye - Exception');
          --
          RETURN FALSE;
          --
      END fp_excluye;
      --
      PRAGMA AUTONOMOUS_TRANSACTION;
      --
   BEGIN
      --
      mx('I', 'p_processa_dados_cob_endosso');
      --
      l_cod_cia         := trn_k_global.devuelve('COD_CIA');
      l_cod_ramo        := trn_k_global.devuelve('COD_RAMO');
      l_cod_tarifa      := trn_k_global.devuelve('COD_TARIFA');
      l_cod_agt         := trn_k_global.devuelve('COD_AGT');
      l_num_cotizacion  := trn_k_global.devuelve('NUM_COTIZACION');
      l_num_paso        := trn_k_global.devuelve('NUM_PASO');
      --
      g_cob_dados := TYPTAB_DADOS_COB();
      g_cob_reg   := TYPREG_DADOS_COB.autocreate;
      -- < v 3.30 > --
      l_tip_merc_deter_ends := NVL(f_recupera_val_dv (p_cod_cia        => trn_k_global.ref_f_global('COD_CIA'),
                                                      p_cod_ramo       => ea_k_231_utils.g_k_ramo_motor       ,
                                                      p_num_cotizacion => l_num_cotizacion                    ,
                                                      p_nom_columna    => 'TIP_MERC_DETER'                    ),'ZZ');
      -- < v 3.30 > --
      mx('l_tip_merc_deter_ends',l_tip_merc_deter_ends);
      --
      IF g_xml_in IS NOT NULL AND
        (trn_k_global.ref_f_global('MCA_COTI_SIMULADOR') = trn.NO  AND
         trn_k_global.ref_f_global('MCA_COTI_COMROUND')  = trn.SI) THEN
            --
            l_xmldoc        := fp_transforma_xml (g_xml_in);
            --
            l_node_list     := DBMS_XMLDOM.getElementsByTagName(l_xmldoc, trn.ASTERISCO);
            l_len           := DBMS_XMLDOM.getLength(l_node_list);
            --
            mx('-', 'ini - ');
            --
            FOR i IN trn.CERO .. l_len - trn.UNO LOOP
              --
              l_node    := DBMS_XMLDOM.item(l_node_list, i);
              l_nom_tag := DBMS_XMLDOM.getNodeName(l_node);
              --
              mx('p_processa_dados_cob_endosso: XML-TAG(' || l_nom_tag || ')',     DBMS_XMLDOM.getNodeValue(DBMS_XMLDOM.getFirstChild(l_node)));
              --dbms_output.put_line('p_processa_dados_cobertura: XML-TAG(' || l_nom_tag || '): ' || DBMS_XMLDOM.getNodeValue(DBMS_XMLDOM.getFirstChild(l_node)));
              --
              -- DADOS FXOS
              IF l_nom_tag = g_k_val_campo_codPacote            THEN l_cod_pacote        := DBMS_XMLDOM.getNodeValue(DBMS_XMLDOM.getFirstChild(l_node)); END IF;
              IF l_nom_tag = g_k_val_campo_numSimulacion        THEN l_num_simulacion    := DBMS_XMLDOM.getNodeValue(DBMS_XMLDOM.getFirstChild(l_node)); END IF;
              --
              IF l_tip_cob = 'C' AND l_mca_seleccion_cob = 'S' THEN
                 --
                 NULL;
                 --
              ELSE
                 --
                 -- DADOS DE COBERTURA
                 IF l_nom_tag = g_k_val_campo_codCobertura         THEN l_cod_cob           :=  DBMS_XMLDOM.getNodeValue(DBMS_XMLDOM.getFirstChild(l_node))     ; END IF;
                 IF l_nom_tag = g_k_val_campo_mcaSeleccionCob      THEN l_mca_seleccion_cob :=  DBMS_XMLDOM.getNodeValue(DBMS_XMLDOM.getFirstChild(l_node))     ; END IF;
                 --
              END IF;
              -- DADOS DE COLECOES DE COBERTURAS
              IF l_nom_tag = g_k_val_campo_codCampo             THEN l_cod_campo         :=     DBMS_XMLDOM.getNodeValue(DBMS_XMLDOM.getFirstChild(l_node))     ; END IF;
              IF l_nom_tag = g_k_val_campo_valCampo             THEN l_val_campo         := NVL(DBMS_XMLDOM.getNodeValue(DBMS_XMLDOM.getFirstChild(l_node)),'0'); END IF;
              IF l_nom_tag = g_k_val_campo_mcaValDefecto        THEN l_mca_val_defecto   :=     DBMS_XMLDOM.getNodeValue(DBMS_XMLDOM.getFirstChild(l_node))     ; END IF;
              IF l_nom_tag = g_k_val_campo_txtCampo             THEN l_txt_campo         :=     DBMS_XMLDOM.getNodeValue(DBMS_XMLDOM.getFirstChild(l_node))     ; END IF;
              IF l_nom_tag = g_k_val_campo_mcaSeleAtributo      THEN l_mca_sele_atributo :=     DBMS_XMLDOM.getNodeValue(DBMS_XMLDOM.getFirstChild(l_node))     ; END IF;
              -- TIPOS DE COBERTURAS
              IF l_nom_tag = g_k_val_tag_colCoberturas          THEN l_tip_cob           :=     'N'                                                             ; END IF;
              IF l_nom_tag = g_k_val_tag_colCoberturasCasco     THEN l_tip_cob           :=     'C'                                                             ; END IF;
              IF l_nom_tag = g_k_val_tag_colCoberturasAgrup     THEN l_tip_cob           :=     'AG'                                                            ; END IF;
              --
              -- TIPOS DE COLECOES DE DADOS DE COBERTURAS
              IF l_nom_tag = g_k_val_tag_valLimiteMaxInden      THEN l_tip_dados_cob     :=     'I'                                                             ; END IF;
              IF l_nom_tag = g_k_val_tag_tipAtributoCob         THEN l_tip_dados_cob     :=     'A'                                                             ; END IF;
              IF l_nom_tag = g_k_val_tag_valFranquia            THEN l_tip_dados_cob     :=     'F'                                                             ; END IF;
              --
              -- DEFINICOES PARA COBERTURAS AGRUPADAS
              IF DBMS_XMLDOM.getNodeValue(DBMS_XMLDOM.getFirstChild(l_node)) LIKE 'SUMA_ASEG%' THEN l_tip_dados_cob     := 'I'                                  ; END IF;
              --
              IF  l_cod_cob            IS NOT NULL   AND
                  l_mca_seleccion_cob  IS NOT NULL   AND
                  (
                   (
                    (
                     l_tip_cob            = 'N'       OR
                     l_tip_cob            = 'AG'      OR
                     l_tip_cob            = 'C'
                    )                                 AND
                    l_tip_dados_cob     IS NOT NULL   AND
                    l_cod_campo         IS NOT NULL   AND
                    (
                     l_mca_val_defecto   IS NOT NULL  OR
                     l_mca_sele_atributo IS NOT NULL
                    )
                   )
                  )                              THEN
                --
                g_cob_reg.num_cotizacion              := l_num_cotizacion;
                g_cob_reg.num_simulacion              := l_cod_pacote; --DEFINE COD_PACOTE NO NUM_SIMULACION
                g_cob_reg.cod_pacote                  := l_cod_pacote;
                --
                IF l_tip_cob = 'C'           AND
                   l_mca_seleccion_cob = 'N'
                THEN
                  --
                  l_cod_cob := trn.UNO;
                  --
                END IF;
                --
                g_cob_reg.cod_cob                     := l_cod_cob;
                g_cob_reg.tip_cob                     := l_tip_cob;
                g_cob_reg.mca_seleccion_cob           := l_mca_seleccion_cob;
                g_cob_reg.mca_val_defecto_indenizacao := l_mca_val_defecto;
                g_cob_reg.mca_seleccion_atributo      := l_mca_sele_atributo;
                g_cob_reg.tip_dados_cob               := l_tip_dados_cob;
                g_cob_reg.cod_campo                   := l_cod_campo;
                g_cob_reg.val_campo                   := l_val_campo;
                g_cob_reg.txt_campo                   := l_txt_campo;
                g_cob_reg.val_premio_casco            := NULL;
                --
                -- Si mercado es RCF - R no contrata casco -- < v 3.30 > --
                IF NOT(l_tip_merc_deter_ends = 'R'  AND
                       NVL(l_tip_cob, 'Z')        = 'C')
                THEN
                  --
                  mx('-','OK se contrata');
                  --
                  g_cob_dados.EXTEND(1);
                  g_cob_dados(g_cob_dados.LAST) := g_cob_reg;
                  --
                END IF;
                -- < v 3.30 > --
                --
                                  mx('p_processa_dados_cob_endosso: ', '-----REGISTRO DE PROCESSAMENTO XML EM TABLETYPE--------------');
                                  mx('                             g_cob_reg.num_cotizacion              : ',   l_num_cotizacion    );
                                  mx('                             g_cob_reg.num_simulacion(cod_pacote)  : ',   l_num_simulacion    );
                                  mx('                             g_cob_reg.num_simulacion              : ',   l_cod_pacote        );
                                  mx('                             g_cob_reg.cod_pacote                  : ',   l_cod_pacote        );
                                  mx('                             g_cob_reg.cod_cob                     : ',   l_cod_cob           );
                                  mx('                             g_cob_reg.tip_cob                     : ',   l_tip_cob           );
                                  mx('                             g_cob_reg.mca_seleccion_cob           : ',   l_mca_seleccion_cob );
                                  mx('                             g_cob_reg.mca_val_defecto_indenizacao : ',   l_mca_val_defecto   );
                                  mx('                             g_cob_reg.mca_seleccion_atributo      : ',   l_mca_sele_atributo );
                                  mx('                             g_cob_reg.tip_dados_cob               : ',   l_tip_dados_cob     );
                                  mx('                             g_cob_reg.cod_campo                   : ',   l_cod_campo         );
                                  mx('                             g_cob_reg.val_campo                   : ',   l_val_campo         );
                                  mx('                             g_cob_reg.txt_campo                   : ',   l_txt_campo         );
                                  mx('                             g_cob_reg.val_premio_casco            : ',   ' '                 );
                                  mx('p_processa_dados_cob_endosso: ', '-------------------------------------------------------------');
--                dbms_output.put_line('p_processa_dados_cob_endosso:  -----REGISTRO DE PROCESSAMENTO XML EM TABLETYPE-----------------');
--                dbms_output.put_line('                             g_cob_reg.num_cotizacion              : ' || l_num_cotizacion    );
--                dbms_output.put_line('                             g_cob_reg.num_simulacion(cod_pacote)  : ' || l_num_simulacion    );
--                dbms_output.put_line('                             g_cob_reg.num_simulacion              : ' || l_cod_pacote        );
--                dbms_output.put_line('                             g_cob_reg.cod_pacote                  : ' || l_cod_pacote        );
--                dbms_output.put_line('                             g_cob_reg.cod_cob                     : ' || l_cod_cob           );
--                dbms_output.put_line('                             g_cob_reg.tip_cob                     : ' || l_tip_cob           );
--                dbms_output.put_line('                             g_cob_reg.mca_seleccion_cob           : ' || l_mca_seleccion_cob );
--                dbms_output.put_line('                             g_cob_reg.mca_val_defecto_indenizacao : ' || l_mca_val_defecto   );
--                dbms_output.put_line('                             g_cob_reg.mca_seleccion_atributo      : ' || l_mca_sele_atributo );
--                dbms_output.put_line('                             g_cob_reg.tip_dados_cob               : ' || l_tip_dados_cob     );
--                dbms_output.put_line('                             g_cob_reg.cod_campo                   : ' || l_cod_campo         );
--                dbms_output.put_line('                             g_cob_reg.val_campo                   : ' || l_val_campo         );
--                dbms_output.put_line('                             g_cob_reg.txt_campo                   : ' || l_txt_campo         );
--                dbms_output.put_line('                             g_cob_reg.val_premio_casco            : ' || ' '                 );
--                dbms_output.put_line('p_processa_dados_cob_endosso: -----------------------------------------------------------------');
                --
                l_cod_campo             := NULL;
                l_val_campo             := NULL;
                l_txt_campo             := NULL;
                l_mca_val_defecto       := NULL;
                l_mca_sele_atributo     := NULL;
                l_tip_dados_cob         := NULL;
                --
              END IF;
              --
              IF l_nom_tag = 'valPremio' or l_nom_tag = 'valPremioCasco' THEN -- OBRIGATORIO O ENVIO DESTA TAG PARA ENCERRAMENTO DO PROCESSAMENTO DE CADA COBERTURA
                --
                mx('p_processa_dados_cob_endosso: ', '-----LIMPEZA DE REGISTRO PARA REINICIO DA COBERTURA-----');
                --dbms_output.put_line('p_processa_dados_cobertura: ---------LIMPEZA DE REGISTRO PARA REINICIO DA COBERTURA-----');
                --
                l_cod_cob               := NULL;
                l_tip_cob               := NULL;
                l_mca_seleccion_cob     := NULL;
                l_tip_dados_cob         := NULL;
                --
                l_cod_campo             := NULL;
                l_val_campo             := NULL;
                l_txt_campo             := NULL;
                l_mca_val_defecto       := NULL;
                l_mca_sele_atributo     := NULL;
                --
              END IF;
              --
            END LOOP;
            --
            mx('-', 'fini');
            --
      END IF;
      --
      IF g_xml_in IS NOT NULL AND
        (trn_k_global.ref_f_global('MCA_COTI_SIMULADOR') = trn.SI  AND
         trn_k_global.ref_f_global('MCA_COTI_COMROUND')  = trn.NO) THEN
         --
         l_xmldoc        := fp_transforma_xml (g_xml_in);
         --
         l_node_list     := DBMS_XMLDOM.getElementsByTagName(l_xmldoc, trn.ASTERISCO);
         l_len           := DBMS_XMLDOM.getLength(l_node_list);
         --
         FOR i IN trn.CERO .. l_len - trn.UNO LOOP
           --
           l_node    := DBMS_XMLDOM.item(l_node_list, i);
           l_nom_tag := DBMS_XMLDOM.getNodeName(l_node);
           --
           mx('p_processa_dados_cob_endosso: XML-TAG(' || l_nom_tag || ')', DBMS_XMLDOM.getNodeValue(DBMS_XMLDOM.getFirstChild(l_node)));
           --
           -- DADOS FXOS
           IF l_nom_tag = g_k_val_campo_codPacote        THEN l_cod_pacote        := DBMS_XMLDOM.getNodeValue(DBMS_XMLDOM.getFirstChild(l_node)); END IF;
           IF l_nom_tag = g_k_val_campo_numSimulacion    THEN l_num_simulacion    := DBMS_XMLDOM.getNodeValue(DBMS_XMLDOM.getFirstChild(l_node)); END IF;
           -- DADOS DE COBERTURA
           IF l_nom_tag = g_k_val_campo_codCobertura     THEN l_cod_cob           := DBMS_XMLDOM.getNodeValue(DBMS_XMLDOM.getFirstChild(l_node)); END IF;
           IF l_nom_tag = g_k_val_campo_mcaSeleccionCob  THEN l_mca_seleccion_cob := DBMS_XMLDOM.getNodeValue(DBMS_XMLDOM.getFirstChild(l_node)); END IF;
           -- DADOS DE COLECOES DE COBERTURAS
           IF l_nom_tag = g_k_val_campo_codCampo         THEN l_cod_campo         := DBMS_XMLDOM.getNodeValue(DBMS_XMLDOM.getFirstChild(l_node)); END IF;
           IF l_nom_tag = g_k_val_campo_valCampo         THEN l_val_campo         := DBMS_XMLDOM.getNodeValue(DBMS_XMLDOM.getFirstChild(l_node)); END IF;
           IF l_nom_tag = g_k_val_campo_mcaValDefecto    THEN l_mca_val_defecto   := DBMS_XMLDOM.getNodeValue(DBMS_XMLDOM.getFirstChild(l_node)); END IF;
           IF l_nom_tag = g_k_val_campo_txtCampo         THEN l_txt_campo         := DBMS_XMLDOM.getNodeValue(DBMS_XMLDOM.getFirstChild(l_node)); END IF;
           IF l_nom_tag = g_k_val_campo_mcaSeleAtributo  THEN l_mca_sele_atributo := DBMS_XMLDOM.getNodeValue(DBMS_XMLDOM.getFirstChild(l_node)); END IF;
           -- TIPOS DE COBERTURAS
           IF l_nom_tag = g_k_val_tag_colCoberturas      THEN l_tip_cob           := 'N';                                                         END IF;
           IF l_nom_tag = g_k_val_tag_colCoberturasCasco THEN l_tip_cob           := 'C';                                                         END IF;
           -- TIPOS DE COLECOES DE DADOS DE COBERTURAS
           IF l_nom_tag = g_k_val_tag_valLimiteMaxInden  THEN l_tip_dados_cob     := 'I';                                                         END IF;
           IF l_nom_tag = g_k_val_tag_tipAtributoCob     THEN l_tip_dados_cob     := 'A';                                                         END IF;
           IF l_nom_tag = g_k_val_tag_valFranquia        THEN l_tip_dados_cob     := 'F';                                                         END IF;
           IF l_nom_tag = g_k_val_tag_colCoberturasAdi   THEN l_cod_pacote        := '';                                                          END IF;
           --
           mx('l_cod_cob', l_cod_cob);
           mx('l_mca_seleccion_cob', l_mca_seleccion_cob);
           mx('l_tip_dados_cob', l_tip_dados_cob);
           mx('l_cod_campo', l_cod_campo);
           mx('l_val_campo', l_val_campo);
           mx('l_mca_sele_atributo', l_mca_sele_atributo);
           mx('l_mca_val_defecto', l_mca_val_defecto);
           mx('l_mca_sele_atributo', l_mca_sele_atributo);
           --
           IF  l_cod_cob            IS NOT NULL   AND
               l_mca_seleccion_cob  IS NOT NULL   AND
               (
                l_tip_dados_cob     IS NOT NULL   AND
                l_cod_campo         IS NOT NULL   AND
                 (
                 l_val_campo         IS NOT NULL  OR
                 (l_val_campo        IS NULL      AND
                 l_mca_sele_atributo IS NOT NULL)
                 )
                AND
                (
                  l_mca_val_defecto   IS NOT NULL OR
                  l_mca_sele_atributo IS NOT NULL
                )
                )                              THEN
             --
             g_cob_reg.num_cotizacion              := l_num_cotizacion;
             g_cob_reg.num_simulacion              := l_cod_pacote; --DEFINE COD_PACOTE NO NUM_SIMULACION
             g_cob_reg.cod_pacote                  := l_cod_pacote;
             --
             IF l_tip_cob = 'C'           AND
                l_mca_seleccion_cob = 'N'
             THEN
               --
               l_cod_cob := trn.UNO;
               --
             END IF;
             --
             g_cob_reg.cod_cob                     := l_cod_cob;
             g_cob_reg.tip_cob                     := l_tip_cob;
             g_cob_reg.mca_seleccion_cob           := l_mca_seleccion_cob;
             g_cob_reg.mca_val_defecto_indenizacao := l_mca_val_defecto;
             g_cob_reg.mca_seleccion_atributo      := l_mca_sele_atributo;
             g_cob_reg.tip_dados_cob               := l_tip_dados_cob;
             g_cob_reg.cod_campo                   := l_cod_campo;
             g_cob_reg.val_campo                   := l_val_campo;
             g_cob_reg.txt_campo                   := l_txt_campo;
             g_cob_reg.val_premio_casco            := NULL;
             --
             -- Si mercado es RCF - R no contrata casco -- < v 3.30 > --
             IF NOT(l_tip_merc_deter_ends = 'R'  AND
                    NVL(l_tip_cob, 'Z')        = 'C')
             THEN
               --
               mx('-','OK se contrata');
               --
               g_cob_dados.EXTEND(1);
               g_cob_dados(g_cob_dados.LAST) := g_cob_reg;
               --
             END IF;
             -- < v 3.30 > --
             --
             mx('p_processa_dados_cob_endosso: ', '-----REGISTRO DE PROCESSAMENTO XML EM TABLETYPE-----');
             mx('                             g_cob_reg.num_cotizacion              : ', l_num_cotizacion );
             mx('                             g_cob_reg.num_simulacion(cod_pacote)  : ', l_num_simulacion );
             mx('                             g_cob_reg.num_simulacion              : ', l_cod_pacote );
             mx('                             g_cob_reg.cod_pacote                  : ', l_cod_pacote );
             mx('                             g_cob_reg.cod_cob                     : ', l_cod_cob );
             mx('                             g_cob_reg.tip_cob                     : ', l_tip_cob );
             mx('                             g_cob_reg.mca_seleccion_cob           : ', l_mca_seleccion_cob );
             mx('                             g_cob_reg.mca_val_defecto_indenizacao : ', l_mca_val_defecto );
             mx('                             g_cob_reg.mca_seleccion_atributo      : ', l_mca_sele_atributo );
             mx('                             g_cob_reg.tip_dados_cob               : ', l_tip_dados_cob );
             mx('                             g_cob_reg.cod_campo                   : ', l_cod_campo );
             mx('                             g_cob_reg.val_campo                   : ', l_val_campo );
             mx('                             g_cob_reg.txt_campo                   : ', l_txt_campo );
             mx('                             g_cob_reg.val_premio_casco            : ', ' ');
             mx('p_processa_dados_cob_endosso: ', '----------------------------------------------------');
             --
             l_cod_campo             := NULL;
             l_val_campo             := NULL;
             l_txt_campo             := NULL;
             l_mca_val_defecto       := NULL;
             l_mca_sele_atributo     := NULL;
             l_tip_dados_cob         := NULL;
             --
           END IF;
           --
           IF l_nom_tag = 'valPremio' THEN -- OBRIGATORIO O ENVIO DESTA TAG PARA ENCERRAMENTO DO PROCESSAMENTO DE CADA COBERTURA
             --
             mx('p_processa_dados_cob_endosso: ', '-----LIMPEZA DE REGISTRO PARA REINICIO DA COBERTURA-----');
             --
             l_cod_cob               := NULL;
             l_tip_cob               := NULL;
             l_mca_seleccion_cob     := NULL;
             l_tip_dados_cob         := NULL;
             --
             l_cod_campo             := NULL;
             l_val_campo             := NULL;
             l_txt_campo             := NULL;
             l_mca_val_defecto       := NULL;
             l_mca_sele_atributo     := NULL;
             l_col_atributos_list    := NULL;
             --
           END IF;
           --
         END LOOP;
         --
         mx('-', 'fini');
         --
      END IF;
      --
      pp_v_contrat_obj_transp;
      --
      pp_v_receita_garantida; -- 3.18
      --
      pp_v_contrat_automais_casa;
      --
      pp_v_carta_verde; --v1.90
      --
      mx('limpar l_reg_a2000560.cod_campo', '');
      FOR reg_coberturas IN c_coberturas_limpar
      LOOP
         --
         mx('reg_coberturas', 'reg_coberturas');
         mx('reg_coberturas.tip_cob', reg_coberturas.tip_cob);
         mx('reg_coberturas.tip_dados_cob', reg_coberturas.tip_dados_cob);
         --
         if reg_coberturas.tip_cob                = 'C' and
            reg_coberturas.tip_dados_cob          = 'I'
            then
            --
            FOR reg_coberturas_pacote IN c_coberturas_pacote(reg_coberturas.cod_pacote,l_cod_ramo,null)
            LOOP
            --
                l_reg_a2000560.cod_cia       := l_cod_cia;
                l_reg_a2000560.num_propuesta := l_num_cotizacion;
                l_reg_a2000560.cod_campo     := 'COMCA_SELECCION' || reg_coberturas_pacote.cnc_vrb_val;
                l_reg_a2000560.val_campo     := trn.NO;
                em_k_a2000560_vcr.p_inserta_borrando(l_reg_a2000560);
                mx('l_reg_a2000560.cod_campo2', l_reg_a2000560.cod_campo);
                mx('l_reg_a2000560.val_campo2', l_reg_a2000560.val_campo);
                --
                l_reg_a2000560 := NULL;
                l_reg_a2000560.cod_cia       := l_cod_cia;
                l_reg_a2000560.num_propuesta := l_num_cotizacion;
                l_reg_a2000560.cod_campo     := 'COSUMA_ASEG' || reg_coberturas_pacote.cnc_vrb_val;
                l_reg_a2000560.val_campo     := trn.CERO;
                em_k_a2000560_vcr.p_actualiza(l_reg_a2000560);
                mx('l_reg_a2000560.cod_campo2', l_reg_a2000560.cod_campo);
                mx('l_reg_a2000560.val_campo2', l_reg_a2000560.val_campo);
            --
            END LOOP;
            --
         elsif reg_coberturas.tip_cob             = 'C' and
            reg_coberturas.tip_dados_cob          = 'A'
            then
                mx('l_reg_a2000560.cod_campo3_pacote', reg_coberturas.cod_pacote);
                mx('l_reg_a2000560.cod_campo3_pacote', l_cod_ramo);
                FOR reg_coberturas_g2000020 IN c_coberturas_g2000020(l_cod_cia,l_cod_ramo,reg_coberturas.cod_campo)
                LOOP
                --
                   l_reg_a2000560 := NULL;
                   l_reg_a2000560.cod_cia       := l_cod_cia;
                   l_reg_a2000560.num_propuesta := l_num_cotizacion;
                   l_reg_a2000560.cod_campo     := reg_coberturas.cod_campo || reg_coberturas_g2000020.cod_cob;
                   l_reg_a2000560.val_campo     := l_reg_a2000560.val_campo;
                   em_k_a2000560_vcr.p_inserta_borrando(l_reg_a2000560);
                   mx('l_reg_a2000560.cod_campo3', l_reg_a2000560.cod_campo);
                   mx('l_reg_a2000560.val_campo3', l_reg_a2000560.val_campo);
                --
                END LOOP;
         else
           if reg_coberturas.tip_cob                    = 'N' and
              reg_coberturas.tip_dados_cob              = 'I' then
              --
              l_reg_a2000560 := NULL;
              l_reg_a2000560.cod_cia       := l_cod_cia;
              l_reg_a2000560.num_propuesta := l_num_cotizacion;
              l_reg_a2000560.cod_campo     := 'COMCA_SELECCION' || reg_coberturas.cod_cob;
              l_reg_a2000560.val_campo     := trn.NO; --l_reg_a2000560.val_campo;
              em_k_a2000560_vcr.p_inserta_borrando(l_reg_a2000560);
              mx('l_reg_a2000560.cod_campo1', l_reg_a2000560.cod_campo);
              --
              l_reg_a2000560 := NULL;
              l_reg_a2000560.cod_cia       := l_cod_cia;
              l_reg_a2000560.num_propuesta := l_num_cotizacion;
              l_reg_a2000560.val_campo     := trn.CERO;
              l_reg_a2000560.cod_campo     := 'COSUMA_ASEG' || reg_coberturas.cod_cob;
              em_k_a2000560_vcr.p_inserta_borrando(l_reg_a2000560);
              mx('l_reg_a2000560.cod_campo1', l_reg_a2000560.cod_campo);
              --
           elsif reg_coberturas.tip_cob                    = 'N' and
                 reg_coberturas.tip_dados_cob              = 'A' then
              --
              l_reg_a2000560 := NULL;
              l_reg_a2000560.cod_cia       := l_cod_cia;
              l_reg_a2000560.num_propuesta := l_num_cotizacion;
              IF INSTR(reg_coberturas.cod_campo, g_k_prefixo_cod_acessorio) > 0 THEN
                -- Atributos de acessorios
                l_reg_a2000560.cod_campo := reg_coberturas.cod_campo;
                --
              ELSE
                -- Demais atributos
                l_reg_a2000560.cod_campo := reg_coberturas.cod_campo || reg_coberturas.cod_cob;
                --
              END IF;
              l_reg_a2000560.val_campo     := '';
              mx('l_reg_a2000560.cod_campo2', l_reg_a2000560.cod_campo);
              em_k_a2000560_vcr.p_inserta_borrando(l_reg_a2000560);
              --
           end if;
         end if;
      end loop;
      --
      mx('atualizar l_reg_a2000560.cod_campo', '');
      FOR reg_coberturas IN c_coberturas_atualizar
      LOOP
         --
        mx('-', 'reg_coberturas.id_seq: ' || reg_coberturas.id_seq);
        mx('-', 'reg_coberturas.num_cotizacion: ' || reg_coberturas.num_cotizacion);
        mx('-', 'reg_coberturas.num_simulacion: ' || reg_coberturas.num_simulacion);
        mx('-', 'reg_coberturas.cod_pacote: ' || reg_coberturas.cod_pacote);
        mx('-', 'reg_coberturas.cod_cob: ' || reg_coberturas.cod_cob);
        mx('-', 'reg_coberturas.tip_cob: ' || reg_coberturas.tip_cob);
        mx('-', 'reg_coberturas.mca_seleccion_cob: ' || reg_coberturas.mca_seleccion_cob);
        mx('-', 'reg_coberturas.mca_val_defecto_indenizacao: ' || reg_coberturas.mca_val_defecto_indenizacao);
        mx('-', 'reg_coberturas.mca_seleccion_atributo: ' || reg_coberturas.mca_seleccion_atributo);
        mx('-', 'reg_coberturas.tip_dados_cob: ' || reg_coberturas.tip_dados_cob);
        mx('-', 'reg_coberturas.cod_campo: ' || reg_coberturas.cod_campo);
        mx('-', 'reg_coberturas.val_campo: ' || reg_coberturas.val_campo);
        mx('-', 'reg_coberturas.txt_campo: ' || reg_coberturas.txt_campo);
        mx('-', 'reg_coberturas.val_premio_casco: ' || reg_coberturas.val_premio_casco);
            --
        IF reg_coberturas.tip_cob                = 'C' AND
           reg_coberturas.tip_dados_cob          = 'I'

        THEN
          --
            mx('l_reg_a2000560.cod_campo2_pacote', reg_coberturas.cod_pacote);
            mx('l_reg_a2000560.cod_campo2_pacote', l_cod_ramo);
          --
          FOR reg_coberturas_pacote IN c_coberturas_pacote(reg_coberturas.cod_pacote
                                                          ,l_cod_ramo
                                                          ,reg_coberturas.cod_cob)
            LOOP
            --
            mx('-', 'reg_coberturas_pacote.cnc_vrb_val: ' || reg_coberturas_pacote.cnc_vrb_val);
            --
            IF reg_coberturas.mca_seleccion_cob      = 'S'
            THEN
              --
                l_reg_a2000560.cod_cia       := l_cod_cia;
                l_reg_a2000560.num_propuesta := l_num_cotizacion;
                l_reg_a2000560.cod_campo     := 'COMCA_SELECCION' || reg_coberturas_pacote.cnc_vrb_val;
                l_reg_a2000560.val_campo     := reg_coberturas.mca_seleccion_cob;
              --
                em_k_a2000560_vcr.p_inserta_borrando(l_reg_a2000560);
              --
                mx('l_reg_a2000560.cod_campo2_atu', l_reg_a2000560.cod_campo);
                mx('l_reg_a2000560.val_campo2_atu', l_reg_a2000560.val_campo);
                --
                l_reg_a2000560 := NULL;
                l_reg_a2000560.cod_cia       := l_cod_cia;
                l_reg_a2000560.num_propuesta := l_num_cotizacion;
                l_reg_a2000560.cod_campo     := 'COSUMA_ASEG' || reg_coberturas_pacote.cnc_vrb_val;
                l_reg_a2000560.val_campo     := reg_coberturas.val_campo;
              --
                em_k_a2000560_vcr.p_inserta_borrando(l_reg_a2000560);
              --
                mx('l_reg_a2000560.cod_campo2', l_reg_a2000560.cod_campo);
                mx('l_reg_a2000560.val_campo2', l_reg_a2000560.val_campo);
            --
            ELSIF fp_excluye(reg_coberturas_pacote.cnc_vrb_val)
            THEN
              --
              --
              l_reg_a2000560.cod_cia       := l_cod_cia;
              l_reg_a2000560.num_propuesta := l_num_cotizacion;
              l_reg_a2000560.cod_campo     := 'COMCA_SELECCION' || reg_coberturas_pacote.cnc_vrb_val;
              l_reg_a2000560.val_campo     := 'X';
              --
              em_k_a2000560_vcr.p_inserta_borrando(l_reg_a2000560);
              --
              mx('l_reg_a2000560.cod_campo2_atu', l_reg_a2000560.cod_campo);
              mx('l_reg_a2000560.val_campo2_atu', l_reg_a2000560.val_campo);
              --
              l_reg_a2000560 := NULL;
              l_reg_a2000560.cod_cia       := l_cod_cia;
              l_reg_a2000560.num_propuesta := l_num_cotizacion;
              l_reg_a2000560.cod_campo     := 'COSUMA_ASEG' || reg_coberturas_pacote.cnc_vrb_val;
              l_reg_a2000560.val_campo     := trn.CERO;
              --
              em_k_a2000560_vcr.p_inserta_borrando(l_reg_a2000560);
              --
              mx('l_reg_a2000560.cod_campo2', l_reg_a2000560.cod_campo);
              mx('l_reg_a2000560.val_campo2', l_reg_a2000560.val_campo);
              --
              --
            END IF;
            --
            END LOOP;
            --
        ELSIF reg_coberturas.tip_cob                = 'C' AND
              reg_coberturas.tip_dados_cob          = 'A' AND
              reg_coberturas.mca_seleccion_atributo = 'S' AND
              reg_coberturas.mca_seleccion_cob      = 'S'

        THEN
          --
                mx('l_reg_a2000560.cod_campo3_pacote', reg_coberturas.cod_pacote);
                mx('l_reg_a2000560.cod_campo3_pacote', l_cod_ramo);
          --
                FOR reg_coberturas_g2000020 IN c_coberturas_g2000020(l_cod_cia,l_cod_ramo,reg_coberturas.cod_campo)
                LOOP
                --
                   l_reg_a2000560 := NULL;
                   l_reg_a2000560.cod_cia       := l_cod_cia;
                   l_reg_a2000560.num_propuesta := l_num_cotizacion;
                   l_reg_a2000560.cod_campo     := reg_coberturas.cod_campo || reg_coberturas_g2000020.cod_cob;
                   l_reg_a2000560.val_campo     := reg_coberturas.val_campo;
             --
                   em_k_a2000560_vcr.p_inserta_borrando(l_reg_a2000560);
             --
                   mx('l_reg_a2000560.cod_campo3', l_reg_a2000560.cod_campo);
                   mx('l_reg_a2000560.val_campo3', l_reg_a2000560.val_campo);
                --
                END LOOP;
              --
        ELSE
          --
          IF reg_coberturas.tip_cob                    = 'N' AND
             reg_coberturas.tip_dados_cob              = 'I'
          THEN
            --
            IF reg_coberturas.mca_val_defecto_indenizacao = 'S' AND
               reg_coberturas.mca_seleccion_cob           = 'S'
            THEN
              --
              l_reg_a2000560 := NULL;
              l_reg_a2000560.cod_cia       := l_cod_cia;
              l_reg_a2000560.num_propuesta := l_num_cotizacion;
              l_reg_a2000560.cod_campo     := 'COMCA_SELECCION' || reg_coberturas.cod_cob;
              l_reg_a2000560.val_campo     := reg_coberturas.mca_seleccion_cob;
              --
              em_k_a2000560_vcr.p_inserta_borrando(l_reg_a2000560);
              --
              mx('l_reg_a2000560.cod_campo', l_reg_a2000560.cod_campo);
              mx('l_reg_a2000560.val_campo', l_reg_a2000560.val_campo);
              --
              l_reg_a2000560 := NULL;
              l_reg_a2000560.cod_cia       := l_cod_cia;
              l_reg_a2000560.num_propuesta := l_num_cotizacion;
              l_reg_a2000560.cod_campo     := 'COSUMA_ASEG' || reg_coberturas.cod_cob;
              l_reg_a2000560.val_campo     := reg_coberturas.val_campo;
              --
              em_k_a2000560_vcr.p_inserta_borrando(l_reg_a2000560);
              --
              mx('l_reg_a2000560.cod_campo', l_reg_a2000560.cod_campo);
              mx('l_reg_a2000560.val_campo', l_reg_a2000560.val_campo);
              --
            ELSIF fp_excluye(reg_coberturas.cod_cob)
            THEN
              --
              l_reg_a2000560 := NULL;
              --
              l_reg_a2000560.cod_cia       := l_cod_cia;
              l_reg_a2000560.num_propuesta := l_num_cotizacion;
              l_reg_a2000560.cod_campo     := 'COMCA_SELECCION' || reg_coberturas.cod_cob;
              --l_reg_a2000560.val_campo     := reg_coberturas.mca_seleccion_cob;
              l_reg_a2000560.val_campo     := 'X';
              --
              em_k_a2000560_vcr.p_inserta_borrando(l_reg_a2000560);
              --
              mx('l_reg_a2000560.cod_campo', l_reg_a2000560.cod_campo);
              mx('l_reg_a2000560.val_campo', l_reg_a2000560.val_campo);
              --
              l_reg_a2000560 := NULL;
              l_reg_a2000560.cod_cia       := l_cod_cia;
              l_reg_a2000560.num_propuesta := l_num_cotizacion;
              l_reg_a2000560.cod_campo     := 'COSUMA_ASEG' || reg_coberturas.cod_cob;
              l_reg_a2000560.val_campo     := trn.CERO;
              --
              em_k_a2000560_vcr.p_inserta_borrando(l_reg_a2000560);
              --
              mx('l_reg_a2000560.cod_campo', l_reg_a2000560.cod_campo);
              mx('l_reg_a2000560.val_campo', l_reg_a2000560.val_campo);
              --
            END IF;
            --
          ELSIF reg_coberturas.tip_cob                    = 'N' AND
                reg_coberturas.tip_dados_cob              = 'A' AND
                reg_coberturas.mca_seleccion_atributo     = 'S' AND
                reg_coberturas.mca_seleccion_cob          = 'S'
          THEN
            --
            l_reg_a2000560 := NULL;
            l_reg_a2000560.cod_cia       := l_cod_cia;
            l_reg_a2000560.num_propuesta := l_num_cotizacion;
            --
              IF INSTR(reg_coberturas.cod_campo, g_k_prefixo_cod_acessorio) > 0 THEN
                -- Atributos de acessorios
                l_reg_a2000560.cod_campo := reg_coberturas.cod_campo;
                l_reg_a2000560.val_campo := reg_coberturas.val_campo;
                --
              ELSE
                -- Demais atributos
                l_reg_a2000560.cod_campo := reg_coberturas.cod_campo || reg_coberturas.cod_cob;
                l_reg_a2000560.val_campo := reg_coberturas.val_campo;
                --
              END IF;
            --
              mx('l_reg_a2000560.cod_campo', l_reg_a2000560.cod_campo);
              mx('l_reg_a2000560.val_campo', l_reg_a2000560.val_campo);
            --
              em_k_a2000560_vcr.p_inserta_borrando(l_reg_a2000560);
              --
          END IF;
      --
        END IF;
        --
      END LOOP;
      --
      COMMIT;
      --
      mx('F', 'p_processa_dados_cob_endosso');
      --
   END p_processa_dados_cob_endosso;
   --
   -- v3.33
  /* ------------------------------------------------------
  || Processa parametro CLOB e transforma em TableType / recalculo
  */ ------------------------------------------------------
  --
  PROCEDURE p_processa_dados_variaveis IS
    --
    l_xmldoc    DBMS_XMLDOM.DOMDOCUMENT;
    l_node_list DBMS_XMLDOM.DOMNODELIST;
    l_node      DBMS_XMLDOM.DOMNODE;
    --
    l_nom_tag c2000000.nom_columna%TYPE;
    l_len     NUMBER;
    l_cvv     VARCHAR(1); -- V 3.80.1
    --
    l_cod_pacote     VARCHAR2(80) := NULL;
    l_num_simulacion VARCHAR2(80) := NULL;
    --
    l_cod_cia        G9999992.cod_cia %TYPE;
    l_cod_ramo       G9999992.cod_ramo %TYPE;
    l_cod_tarifa     G9999992.cod_tarifa %TYPE;
    l_cod_agt        G9999992.cod_agt %TYPE;
    l_num_cotizacion C2009030_vcr.num_cotizacion %TYPE;
    l_num_poliza     a2000560.num_propuesta%TYPE;
    l_num_paso       G9999992.num_paso %TYPE;
    l_pct_agt_npr    c2000000.nom_columna %TYPE;
    l_tip_mvto_batch g9999992.tip_mvto_batch %TYPE;
    --
    l_cod_campo_msg VARCHAR2(80) := 'COD_RETORNO';
    --
    l_reg_a2000560 a2000560%ROWTYPE;
    --
    l_reg_msg_ws TYPREG_MSG_WS;
    --
    l_cod_rol_bo       c2000000.val_columna%TYPE;
    l_val_campo        c2000000.val_columna%TYPE;
    --
    --
    PROCEDURE pi_valida_dv_cotizacion(pc_cod_cia        g9999992.cod_cia %TYPE,
                                      pc_cod_ramo       g9999992.cod_ramo %TYPE,
                                      pc_num_cotizacion c2000000.num_cotizacion %TYPE,
                                      pc_cod_tarifa     g9999992.cod_tarifa %TYPE,
                                      pc_cod_agt        g9999992.cod_agt %TYPE,
                                      pc_tip_mvto_batch g9999992.tip_mvto_batch %TYPE) IS
      --
      CURSOR c_g9999992 IS
        SELECT *
          FROM g9999992
         WHERE cod_cia = pc_cod_cia
           AND cod_ramo = pc_cod_ramo
           AND cod_tarifa = pc_cod_tarifa
           AND cod_agt = pc_cod_agt
           AND tip_mvto_batch = pc_tip_mvto_batch
           AND nom_tabla = ea_k_231_utils.g_k_tabla_dv
           AND mca_inh = trn.NO
           AND cod_servicio = g_k_cod_srv_processa_dv_coti;
      --
      l_reg_g9999992 c_g9999992%ROWTYPE;
      --
    BEGIN
      --
      mx('I', 'pi_valida_dv_cotizacion');
      --
      mx('-', 'pc_cod_cia:        ' || pc_cod_cia);
      mx('-', 'pc_cod_ramo:       ' || pc_cod_ramo);
      mx('-', 'pc_num_cotizacion: ' || pc_num_cotizacion);
      mx('-', 'pc_cod_tarifa:     ' || pc_cod_tarifa);
      mx('-', 'pc_cod_agt:        ' || pc_cod_agt);
      mx('-', 'pc_tip_mvto_batch: ' || pc_tip_mvto_batch);
      --
      em_k_c2000000.p_pasa_a_global(p_cod_cia        => pc_cod_cia,
                                    p_cod_ramo       => pc_cod_ramo,
                                    p_num_cotizacion => pc_num_cotizacion,
                                    p_nom_tabla      => ea_k_231_utils.g_k_tabla_dv);
      --
      em_k_c2000000.p_pasa_a_global(p_cod_cia        => pc_cod_cia,
                                    p_cod_ramo       => pc_cod_ramo,
                                    p_num_cotizacion => pc_num_cotizacion,
                                    p_nom_tabla      => ea_k_231_utils.g_k_tabla_df);
      --
      em_k_c2000000.p_pasa_a_global(p_cod_cia        => pc_cod_cia,
                                    p_cod_ramo       => pc_cod_ramo,
                                    p_num_cotizacion => pc_num_cotizacion,
                                    p_nom_tabla      => ea_k_231_utils.g_k_tabla_int);
      --
      em_k_c2000000.p_pasa_a_global(p_cod_cia        => pc_cod_cia,
                                    p_cod_ramo       => pc_cod_ramo,
                                    p_num_cotizacion => pc_num_cotizacion,
                                    p_nom_tabla      => ea_k_231_utils.g_k_tabla_int_vcr);
      --
      IF c_g9999992%ISOPEN THEN
        --
        CLOSE c_g9999992;
        --
      END IF;
      --
      OPEN c_g9999992;
      --
      LOOP
        --
        FETCH c_g9999992
          INTO l_reg_g9999992;
        --
        EXIT WHEN c_g9999992%NOTFOUND;
        --
        IF l_reg_g9999992.nom_prg IS NOT NULL THEN
          --
          l_cod_campo_msg := l_reg_g9999992.cod_campo;
          --
          trn_k_dinamico.p_ejecuta_procedimiento(p_procedimiento => l_reg_g9999992.nom_prg);
          --
        END IF;
        --
      END LOOP;
      --
      CLOSE c_g9999992;
      --
      mx('F', 'pi_valida_dv_cotizacion');
      --
    END pi_valida_dv_cotizacion;
    --
  BEGIN
    --
    mx('I', 'p_processa_dados_variaveis');
    --
    l_cod_cia        := trn_k_global.devuelve('COD_CIA');
    l_cod_ramo       := trn_k_global.devuelve('COD_RAMO');
    l_cod_tarifa     := trn_k_global.devuelve('COD_TARIFA');
    l_cod_agt        := trn_k_global.devuelve('COD_AGT');
    l_num_cotizacion := trn_k_global.devuelve('NUM_COTIZACION');
    l_num_poliza     := trn_k_global.devuelve('NUM_POLIZA');
    l_num_paso       := trn_k_global.devuelve('NUM_PASO');
    l_tip_mvto_batch := NVL(trn_k_global.ref_f_global('tip_mvto_batch'),
                            ea_k_231_utils.g_k_cotiza_batch);
    l_cvv            := NVL(trn_k_global.ref_f_global('MCA_CONVIVENCIA'), 'N'); -- V 3.80.1
    --
    IF g_xml_in IS NULL AND l_cvv in ('1', 'S') THEN -- V 3.80.1 --v 4.51
      g_xml_in := g_xml_in_cvv;
    END IF;
    --
    --
    g_cob_dados := TYPTAB_DADOS_COB();
    g_cob_reg   := TYPREG_DADOS_COB.autocreate;
    --
    mx('-', 'l_tip_mvto_batch :' || l_tip_mvto_batch);
    --
    IF g_xml_in IS NOT NULL THEN
      --
      l_xmldoc := fp_transforma_xml(g_xml_in);
      --
      l_node_list := DBMS_XMLDOM.getElementsByTagName(l_xmldoc,
                                                      trn.ASTERISCO);
      l_len       := DBMS_XMLDOM.getLength(l_node_list);
      --
      IF l_tip_mvto_batch = ea_k_231_utils.g_k_cotiza_batch THEN
      --
        FOR i IN trn.CERO .. l_len - trn.UNO LOOP
          --
          l_node    := DBMS_XMLDOM.item(l_node_list, i);
          l_nom_tag := DBMS_XMLDOM.getNodeName(l_node);
          --
          mx('-',
             'p_processa_dados_variaveis: XML-TAG(' || l_nom_tag || '): ' ||
             DBMS_XMLDOM.getNodeValue(DBMS_XMLDOM.getFirstChild(l_node)));
          --
          -- DADOS FXOS
          IF l_nom_tag = g_k_val_campo_codPacote THEN
            l_cod_pacote := DBMS_XMLDOM.getNodeValue(DBMS_XMLDOM.getFirstChild(l_node));
          END IF;
          IF l_nom_tag = g_k_val_campo_numSimulacion THEN
            l_num_simulacion := DBMS_XMLDOM.getNodeValue(DBMS_XMLDOM.getFirstChild(l_node));
          END IF;
          --
          -- DADOS VARIAVEIS
          IF l_nom_tag = g_k_val_campo_pctAgtNpr THEN
            --
            l_pct_agt_npr := DBMS_XMLDOM.getNodeValue(DBMS_XMLDOM.getFirstChild(l_node));
            --
            mx('-', 'l_pct_agt_npr :' || l_pct_agt_npr);
            --
            pp_inserta_c2000000(p_nom_tabla   => ea_k_231_utils.g_k_tabla_dv,
                                p_nom_columna => 'PCT_AGT_NPR',
                                p_val_columna => l_pct_agt_npr);
            --
            pp_inserta_c2000000(p_nom_tabla   => ea_k_231_utils.g_k_tabla_dv,
                                p_nom_columna => 'PCT_AGT_NPR' ||
                                                 g_k_pref_simulacion ||
                                                 l_cod_pacote,
                                p_val_columna => l_pct_agt_npr);
            --
          ELSIF l_nom_tag = 'valFranquiciaMinBo201' THEN
            --
            mx('-', 'valFranquiciaMinBo201 :' || DBMS_XMLDOM.getNodeValue(DBMS_XMLDOM.getFirstChild(l_node)));
            --
            trn_k_global.asigna(p_variable => 'VAL_FRANQ_ANTERIOR'                            ,
                                p_valor    => fp_recupera_valor(g_xml_in,('VAL_FRANQ_'||l_cod_pacote)));
            --
            pp_inserta_c2000000(p_nom_tabla   => ea_k_231_utils.g_k_tabla_dv,
                                p_nom_columna => 'VAL_BO_FRANQUICIA_MIN_201',
                                p_val_columna => DBMS_XMLDOM.getNodeValue(DBMS_XMLDOM.getFirstChild(l_node)));
            --
            pp_inserta_c2000000(p_nom_tabla   => ea_k_231_utils.g_k_tabla_dv,
                                p_nom_columna => 'VAL_BO_FRANQUICIA_MIN_201'||
                                                 g_k_pref_simulacion ||
                                                 l_cod_pacote,
                                p_val_columna => DBMS_XMLDOM.getNodeValue(DBMS_XMLDOM.getFirstChild(l_node)));
            --
          END IF;
          --
        END LOOP;
        --
        pi_valida_dv_cotizacion(l_cod_cia,
                                l_cod_ramo,
                                l_num_cotizacion,
                                l_cod_tarifa,
                                g_k_cod_agt_generico,
                                l_tip_mvto_batch);
        --
      ELSE
        --
        l_xmldoc := fp_transforma_xml(g_xml_in);
        --
        l_node_list := DBMS_XMLDOM.getElementsByTagName(l_xmldoc,
                                                        trn.ASTERISCO);
        l_len       := DBMS_XMLDOM.getLength(l_node_list);
        --
        FOR i IN trn.CERO .. l_len - trn.UNO LOOP
          --
          l_node    := DBMS_XMLDOM.item(l_node_list, i);
          l_nom_tag := DBMS_XMLDOM.getNodeName(l_node);
          --
          mx('-',
             'p_processa_dados_variaveis: XML-TAG(' || l_nom_tag || '): ' ||
             DBMS_XMLDOM.getNodeValue(DBMS_XMLDOM.getFirstChild(l_node)));
          --
          -- DADOS FXOS
          IF l_nom_tag = g_k_val_campo_codPacote THEN
            l_cod_pacote := DBMS_XMLDOM.getNodeValue(DBMS_XMLDOM.getFirstChild(l_node));
          END IF;
          IF l_nom_tag = g_k_val_campo_numSimulacion THEN
            l_num_simulacion := DBMS_XMLDOM.getNodeValue(DBMS_XMLDOM.getFirstChild(l_node));
          END IF;
          ---
          -- DADOS VARIAVEIS
          IF l_nom_tag = 'valFranquiciaMinBo201' THEN
            --
            mx('-', 'valFranquiciaMinBo201 :' || DBMS_XMLDOM.getNodeValue(DBMS_XMLDOM.getFirstChild(l_node)));
            --
            trn_k_global.asigna(p_variable => 'VAL_FRANQ_ANTERIOR'                            ,
                                p_valor    => fp_recupera_valor(g_xml_in,('VAL_FRANQ_'||l_cod_pacote)));
            --
            l_reg_a2000560.cod_cia       := l_cod_cia                                                  ;
            l_reg_a2000560.num_propuesta := l_num_poliza                                               ;
            l_reg_a2000560.cod_campo     := 'VAL_BO_FRANQUICIA_MIN_201'                                ;
            l_reg_a2000560.val_campo     := DBMS_XMLDOM.getNodeValue(DBMS_XMLDOM.getFirstChild(l_node));
            --
            pp_inserta_a2000560(l_reg_a2000560);
            --
            trn_k_global.asigna('dvVAL_BO_FRANQUICIA_MIN_201',DBMS_XMLDOM.getNodeValue(DBMS_XMLDOM.getFirstChild(l_node)));
            --
            ea_k_231_dv.p_ws_v_franquicia_min_bo_201;
            --
          END IF;
          --
        END LOOP;
        --
        l_cod_rol_bo := ea_k_231_utils.f_devuelve_val_campo_spto(p_cod_campo => 'COD_ROL_BO');
        --
        mx('l_cod_rol_bo', l_cod_rol_bo);
        --
        IF l_cod_rol_bo IS NOT NULL
        THEN
           --
           l_val_campo := fp_recupera_valor(g_xml_in,'IMP_MESA_DES_PCT');
           --
           mx('imp_mesa_des_pct', l_val_campo);
           --
           l_reg_a2000560.cod_cia := l_cod_cia ;
           l_reg_a2000560.num_propuesta := l_num_poliza ;
           l_reg_a2000560.cod_campo := 'IMP_MESA_DES_PCT';
           l_reg_a2000560.val_campo := l_val_campo ;
           --
           pp_inserta_a2000560(l_reg_a2000560);
           --
           l_val_campo := fp_recupera_valor(g_xml_in,'IMP_MESA_DES_IMP');
           --
           mx('imp_mesa_des_imp', l_val_campo);
           --
           l_reg_a2000560.cod_cia := l_cod_cia ;
           l_reg_a2000560.num_propuesta := l_num_poliza ;
           l_reg_a2000560.cod_campo := 'IMP_MESA_DES_IMP';
           l_reg_a2000560.val_campo := l_val_campo ;
           --
           pp_inserta_a2000560(l_reg_a2000560);
           --
           l_val_campo := fp_recupera_valor(g_xml_in,'IMP_MESA_AGR_PCT');
           --
           mx('imp_mesa_agr_pct', l_val_campo);
           --
           l_reg_a2000560.cod_cia := l_cod_cia ;
           l_reg_a2000560.num_propuesta := l_num_poliza ;
           l_reg_a2000560.cod_campo := 'IMP_MESA_AGR_PCT';
           l_reg_a2000560.val_campo := l_val_campo ;
           --
           pp_inserta_a2000560(l_reg_a2000560);
           --
           l_val_campo := fp_recupera_valor(g_xml_in,'IMP_MESA_AGR_IMP');
           --
           mx('imp_mesa_agr_imp', l_val_campo);
           --
           l_reg_a2000560.cod_cia := l_cod_cia ;
           l_reg_a2000560.num_propuesta := l_num_poliza ;
           l_reg_a2000560.cod_campo := 'IMP_MESA_AGR_IMP';
           l_reg_a2000560.val_campo := l_val_campo ;
           --
           pp_inserta_a2000560(l_reg_a2000560);
           --
           ea_k_231_dv.p_ws_v_imp_mesa;
           --
        END IF;
        --
      END IF;
      --
    END IF;
    --
    mx('F', 'p_processa_dados_variaveis');
    --
  EXCEPTION
    WHEN OTHERS THEN
      --
      l_reg_msg_ws := TYPREG_MSG_WS.autocreate;
      --
      l_reg_msg_ws := fp_trata_msg(l_cod_campo_msg, NULL, SQLERRM);
      --
      g_cod_mensaje := trn.NULO;
      g_anx_mensaje := l_reg_msg_ws.des_mensagem;
      --
      mx('F', 'p_processa_dados_variaveis - EXCEPTION');
      --
      pp_devuelve_error;
      --
  END p_processa_dados_variaveis;
   --
      -- RECALCULO
      /* ------------------------------------------------------
      || Processa parametro CLOB e transforma em TableType / recalculo
      */ ------------------------------------------------------
      --
      PROCEDURE p_processa_dados_cobertura
      IS
         --
         l_xmldoc                 DBMS_XMLDOM.DOMDOCUMENT;
         l_node_list              DBMS_XMLDOM.DOMNODELIST;
         l_node                   DBMS_XMLDOM.DOMNODE;
         --
         l_nom_tag                c2000000.nom_columna%TYPE;
         l_node_name              VARCHAR(4000);
         l_len                    NUMBER;
         l_cvv                    VARCHAR(1); -- V 3.80 RMOGOMES
         --
         l_cod_cob                varchar2(80) := NULL;
         l_tag_nivel_cob          varchar2(80) := NULL;
         l_cod_pacote             varchar2(80) := NULL;
         l_num_simulacion         varchar2(80) := NULL;
         l_mca_seleccion_cob      varchar2(80) := NULL;
         l_mca_val_defecto        varchar2(80) := NULL;
         l_mca_sele_atributo      varchar2(80) := NULL;
         l_cod_campo              varchar2(80) := NULL;
         l_val_campo              varchar2(80) := NULL;
         l_txt_campo              varchar2(80) := NULL;
         l_tip_dados_cob          varchar2(80) := NULL;
         l_tip_cob                varchar2(80) := NULL;
         --
         l_cod_cia                G9999992.cod_cia            %TYPE;
         l_cod_ramo               G9999992.cod_ramo           %TYPE;
         l_cod_tarifa             G9999992.cod_tarifa         %TYPE;
         l_cod_agt                G9999992.cod_agt            %TYPE;
         l_num_cotizacion         C2009030_vcr.num_cotizacion %TYPE;
         l_num_paso               G9999992.num_paso           %TYPE;
         --
         l_tip_merc_deter         g2990006.nom_valor          %TYPE; -- se importacao por planilha passa por aqui, pode ser informada a descricao e nao o valor (R,D,M)
         --
      BEGIN
         --
         mx('I', 'p_processa_dados_cobertura');
         --
         l_cod_cia         := trn_k_global.devuelve('COD_CIA');
         l_cod_ramo        := trn_k_global.devuelve('COD_RAMO');
         l_cod_tarifa      := trn_k_global.devuelve('COD_TARIFA');
         l_cod_agt         := trn_k_global.devuelve('COD_AGT');
         l_num_cotizacion  := trn_k_global.devuelve('NUM_COTIZACION');
         l_num_paso        := trn_k_global.devuelve('NUM_PASO');
         l_cvv             := NVL(trn_k_global.ref_f_global('MCA_CONVIVENCIA'), 'N'); -- V 3.80 RMOGOMES
         --
         IF g_xml_in IS NULL AND l_cvv IN ('1', 'S') THEN -- V 3.80 RMOGOMES --v 4.51
            g_xml_in := g_xml_in_cvv;
         END IF;
         --
         l_tip_merc_deter := NVL(f_recupera_val_dv (p_cod_cia        => trn_k_global.ref_f_global('COD_CIA'),
                                                    p_cod_ramo       => ea_k_231_utils.g_k_ramo_motor       ,
                                                    p_num_cotizacion => l_num_cotizacion                    ,
                                                    p_nom_columna    => 'TIP_MERC_DETER'                    ),'ZZ');
         --
         mx('l_tip_merc_deter', l_tip_merc_deter);
         --
         g_cob_dados := TYPTAB_DADOS_COB();
         g_cob_reg   := TYPREG_DADOS_COB.autocreate;
         --
         IF g_xml_in IS NOT NULL THEN
            --
            l_xmldoc        := fp_transforma_xml (g_xml_in);
            --
            l_node_list     := DBMS_XMLDOM.getElementsByTagName(l_xmldoc, trn.ASTERISCO);
            l_len           := DBMS_XMLDOM.getLength(l_node_list);
            --
            mx('-', 'ini');

            FOR i IN trn.CERO .. l_len - trn.UNO LOOP
              --
              mx('-','i='||i);
              l_node    := DBMS_XMLDOM.item(l_node_list, i);
              l_nom_tag := DBMS_XMLDOM.getNodeName(l_node);
              --
                                mx('p_processa_dados_cobertura: XML-TAG(' || l_nom_tag || ')',     DBMS_XMLDOM.getNodeValue(DBMS_XMLDOM.getFirstChild(l_node)));
--              dbms_output.put_line('p_processa_dados_cobertura: XML-TAG(' || l_nom_tag || '): ' || DBMS_XMLDOM.getNodeValue(DBMS_XMLDOM.getFirstChild(l_node)));
              --
              -- DADOS FXOS
              IF l_nom_tag = g_k_val_campo_codPacote            THEN l_cod_pacote        := DBMS_XMLDOM.getNodeValue(DBMS_XMLDOM.getFirstChild(l_node)); END IF;
              IF l_nom_tag = g_k_val_campo_numSimulacion        THEN l_num_simulacion    := DBMS_XMLDOM.getNodeValue(DBMS_XMLDOM.getFirstChild(l_node)); END IF;
              --
              mx('-','l_tip_cob='||l_tip_cob);
              mx('-','l_mca_seleccion_cob='||l_mca_seleccion_cob);
              --
              IF l_tip_cob = 'C' AND l_mca_seleccion_cob = 'S' THEN
                 --
                 NULL;
                 --
              ELSE
                 --
                 -- DADOS DE COBERTURA
                 IF l_nom_tag = g_k_val_campo_codCobertura         THEN l_cod_cob           :=  DBMS_XMLDOM.getNodeValue(DBMS_XMLDOM.getFirstChild(l_node))     ; END IF;
                 IF l_nom_tag = g_k_val_campo_mcaSeleccionCob      THEN l_mca_seleccion_cob :=  DBMS_XMLDOM.getNodeValue(DBMS_XMLDOM.getFirstChild(l_node))     ; END IF;
                 --
              END IF;
              -- DADOS DE COLECOES DE COBERTURAS
              IF l_nom_tag = g_k_val_campo_codCampo             THEN l_cod_campo         :=     DBMS_XMLDOM.getNodeValue(DBMS_XMLDOM.getFirstChild(l_node))     ; END IF;
              IF l_nom_tag = g_k_val_campo_valCampo             THEN l_val_campo         := NVL(DBMS_XMLDOM.getNodeValue(DBMS_XMLDOM.getFirstChild(l_node)),'0'); END IF;
              IF l_nom_tag = g_k_val_campo_mcaValDefecto        THEN l_mca_val_defecto   :=     DBMS_XMLDOM.getNodeValue(DBMS_XMLDOM.getFirstChild(l_node))     ; END IF;
              IF l_nom_tag = g_k_val_campo_txtCampo             THEN l_txt_campo         :=     DBMS_XMLDOM.getNodeValue(DBMS_XMLDOM.getFirstChild(l_node))     ; END IF;
              IF l_nom_tag = g_k_val_campo_mcaSeleAtributo      THEN l_mca_sele_atributo :=     DBMS_XMLDOM.getNodeValue(DBMS_XMLDOM.getFirstChild(l_node))     ; END IF;
              -- TIPOS DE COBERTURAS
              IF l_nom_tag = g_k_val_tag_colCoberturas          THEN l_tip_cob           :=     'N'                                                             ; END IF;
              IF l_nom_tag = g_k_val_tag_colCoberturasCasco     THEN l_tip_cob           :=     'C'                                                             ; END IF;
              IF l_nom_tag = g_k_val_tag_colCoberturasAgrup     THEN l_tip_cob           :=     'AG'                                                            ; END IF;
              --
              -- TIPOS DE COLECOES DE DADOS DE COBERTURAS
              IF l_nom_tag = g_k_val_tag_valLimiteMaxInden      THEN l_tip_dados_cob     :=     'I'                                                             ; END IF;
              IF l_nom_tag = g_k_val_tag_tipAtributoCob         THEN l_tip_dados_cob     :=     'A'                                                             ; END IF;
              IF l_nom_tag = g_k_val_tag_valFranquia            THEN l_tip_dados_cob     :=     'F'                                                             ; END IF;
              --
              -- DEFINICOES PARA COBERTURAS AGRUPADAS
              IF DBMS_XMLDOM.getNodeValue(DBMS_XMLDOM.getFirstChild(l_node)) LIKE 'SUMA_ASEG%' THEN l_tip_dados_cob     := 'I'                                  ; END IF;
              --
              IF  l_cod_cob            IS NOT NULL   AND
                  l_mca_seleccion_cob  IS NOT NULL   AND
                  (
                   (
                    (
                     l_tip_cob            = 'N'       OR
                     l_tip_cob            = 'AG'      OR
                     l_tip_cob            = 'C'
                    )                                 AND
                    l_tip_dados_cob     IS NOT NULL   AND
                    l_cod_campo         IS NOT NULL   AND
                    (
                     l_mca_val_defecto   IS NOT NULL  OR
                     l_mca_sele_atributo IS NOT NULL
                    )
                   )
                  )                              THEN
                --
                g_cob_reg.num_cotizacion              := l_num_cotizacion;
                g_cob_reg.num_simulacion              := l_cod_pacote; --DEFINE COD_PACOTE NO NUM_SIMULACION
                g_cob_reg.cod_pacote                  := l_cod_pacote;
                g_cob_reg.cod_cob                     := l_cod_cob;
                g_cob_reg.tip_cob                     := l_tip_cob;
                g_cob_reg.mca_seleccion_cob           := l_mca_seleccion_cob;
                g_cob_reg.mca_val_defecto_indenizacao := l_mca_val_defecto;
                g_cob_reg.mca_seleccion_atributo      := l_mca_sele_atributo;
                g_cob_reg.tip_dados_cob               := l_tip_dados_cob;
                g_cob_reg.cod_campo                   := l_cod_campo;
                g_cob_reg.val_campo                   := l_val_campo;
                g_cob_reg.txt_campo                   := l_txt_campo;
                g_cob_reg.val_premio_casco            := NULL;
                --
                -- Si mercado es RCF - R no contrata casco
                IF NOT(l_tip_merc_deter    = 'R'  AND
                       NVL(l_tip_cob, 'Z') = 'C')
                THEN
                  --
                  mx('-','OK se contrata');
                  --
                  g_cob_dados.EXTEND(1);
                  g_cob_dados(g_cob_dados.LAST) := g_cob_reg;
                  --
                END IF;
                --
                /*IF l_tip_merc_deter = 'D' OR
                   l_tip_merc_deter = 'M'
                THEN
                  --
                  mx('-','1 - TIP_MERC_DETER = D ou M');
                  --
                  g_cob_dados.EXTEND(1);
                  g_cob_dados(g_cob_dados.LAST) := g_cob_reg;
                  --
                ELSIF l_tip_merc_deter = 'R' AND
                      l_tip_cob        <> 'C'
                THEN
                  --
                  mx('-','2 - TIP_MERC_DETER = R TIP_COB <> CASCO');
                  --
                  g_cob_dados.EXTEND(1);
                  g_cob_dados(g_cob_dados.LAST) := g_cob_reg;
                  --
                ELSE
                  --
                  mx('-','3 - TIP_MERC_DETER = R TIP_COB = CASCO');
                  --
                  NULL;
                END IF;*/
                --
                                  mx('p_processa_dados_cobertura: ', '-----REGISTRO DE PROCESSAMENTO XML EM TABLETYPE--------------');
                                  mx('                             g_cob_reg.num_cotizacion              : ',   l_num_cotizacion    );
                                  mx('                             g_cob_reg.num_simulacion(cod_pacote)  : ',   l_num_simulacion    );
                                  mx('                             g_cob_reg.num_simulacion              : ',   l_cod_pacote        );
                                  mx('                             g_cob_reg.cod_pacote                  : ',   l_cod_pacote        );
                                  mx('                             g_cob_reg.cod_cob                     : ',   l_cod_cob           );
                                  mx('                             g_cob_reg.tip_cob                     : ',   l_tip_cob           );
                                  mx('                             g_cob_reg.mca_seleccion_cob           : ',   l_mca_seleccion_cob );
                                  mx('                             g_cob_reg.mca_val_defecto_indenizacao : ',   l_mca_val_defecto   );
                                  mx('                             g_cob_reg.mca_seleccion_atributo      : ',   l_mca_sele_atributo );
                                  mx('                             g_cob_reg.tip_dados_cob               : ',   l_tip_dados_cob     );
                                  mx('                             g_cob_reg.cod_campo                   : ',   l_cod_campo         );
                                  mx('                             g_cob_reg.val_campo                   : ',   l_val_campo         );
                                  mx('                             g_cob_reg.txt_campo                   : ',   l_txt_campo         );
                                  mx('                             g_cob_reg.val_premio_casco            : ',   ' '                 );
                                  mx('p_processa_dados_cobertura: ', '-------------------------------------------------------------');
--                dbms_output.put_line('p_processa_dados_cobertura:  -----REGISTRO DE PROCESSAMENTO XML EM TABLETYPE-----------------');
--                dbms_output.put_line('                             g_cob_reg.num_cotizacion              : ' || l_num_cotizacion    );
--                dbms_output.put_line('                             g_cob_reg.num_simulacion(cod_pacote)  : ' || l_num_simulacion    );
--                dbms_output.put_line('                             g_cob_reg.num_simulacion              : ' || l_cod_pacote        );
--                dbms_output.put_line('                             g_cob_reg.cod_pacote                  : ' || l_cod_pacote        );
--                dbms_output.put_line('                             g_cob_reg.cod_cob                     : ' || l_cod_cob           );
--                dbms_output.put_line('                             g_cob_reg.tip_cob                     : ' || l_tip_cob           );
--                dbms_output.put_line('                             g_cob_reg.mca_seleccion_cob           : ' || l_mca_seleccion_cob );
--                dbms_output.put_line('                             g_cob_reg.mca_val_defecto_indenizacao : ' || l_mca_val_defecto   );
--                dbms_output.put_line('                             g_cob_reg.mca_seleccion_atributo      : ' || l_mca_sele_atributo );
--                dbms_output.put_line('                             g_cob_reg.tip_dados_cob               : ' || l_tip_dados_cob     );
--                dbms_output.put_line('                             g_cob_reg.cod_campo                   : ' || l_cod_campo         );
--                dbms_output.put_line('                             g_cob_reg.val_campo                   : ' || l_val_campo         );
--                dbms_output.put_line('                             g_cob_reg.txt_campo                   : ' || l_txt_campo         );
--                dbms_output.put_line('                             g_cob_reg.val_premio_casco            : ' || ' '                 );
--                dbms_output.put_line('p_processa_dados_cobertura: -----------------------------------------------------------------');
                --
                l_cod_campo             := NULL;
                l_val_campo             := NULL;
                l_txt_campo             := NULL;
                l_mca_val_defecto       := NULL;
                l_mca_sele_atributo     := NULL;
                l_tip_dados_cob         := NULL;
                --
              END IF;
              --
              --IF l_nom_tag = 'valPremio' or l_nom_tag = 'valPremioCasco' THEN -- OBRIGATORIO O ENVIO DESTA TAG PARA ENCERRAMENTO DO PROCESSAMENTO DE CADA COBERTURA --1.55
              IF ((l_nom_tag = 'valPremio' OR l_nom_tag = 'valPremioCasco') AND l_tip_cob IN ('N','C')) OR --1.55
                 (l_nom_tag = 'colCoberturas' AND l_tip_cob = 'AG') --1.55
              THEN -- OBRIGATORIO O ENVIO DESTA TAG PARA ENCERRAMENTO DO PROCESSAMENTO DE CADA COBERTURA --1.55

                --
                                  mx('p_processa_dados_cobertura: ', '-----LIMPEZA DE REGISTRO PARA REINICIO DA COBERTURA-----');
--                dbms_output.put_line('p_processa_dados_cobertura: ---------LIMPEZA DE REGISTRO PARA REINICIO DA COBERTURA-----');
                --
                l_cod_cob               := NULL;
                l_tip_cob               := NULL;
                l_mca_seleccion_cob     := NULL;
                l_tip_dados_cob         := NULL;
                --
                l_cod_campo             := NULL;
                l_val_campo             := NULL;
                l_txt_campo             := NULL;
                l_mca_val_defecto       := NULL;
                l_mca_sele_atributo     := NULL;
                --
              END IF;
              --
            END LOOP;
            --
            mx('-', 'fini');
            --
         END IF;
         --
         mx('F', 'p_processa_dados_cobertura');
         --
         EXCEPTION
         WHEN OTHERS THEN
           --
           mx('p_processa_dados_cobertura - EXCEPTION', SQLERRM);
           --
           g_cod_mensaje    := g_k_cod_error_gen;
           g_anx_mensaje    := SQLERRM;
           --
           g_err_msg.EXTEND(1); -- 4.99
           g_err_msg(g_err_msg.LAST) := fp_trata_msg('COD_RETORNO', -- 4.99
                                                                                     NULL,
                                                                                     g_k_pre_msg_erro || '20098400' || g_k_sep_cod_msg || 'Erro de processamento de dados de coberturas enviadas.');
           --
           mx('F', 'p_processa_dados_cobertura - EXCEPTION');
                    --
                    pp_devuelve_error;
                    --
      END p_processa_dados_cobertura;
      --
  -- RECALCULO
  /* ------------------------------------------------------
  || mbaruch p_marca_cobs_contratadas teste rf 11 e 12
  */ ------------------------------------------------------
  --
  PROCEDURE p_marca_cobs_contratadas
  IS
    --
    --
    /* ---------------------------------------------------------------------
    || pi_graba_datos_cob_c2000000
    */ ---------------------------------------------------------------------
    --
    --PROCEDURE pi_contrata_casco_1
    --IS
    --  --
    --  --
    --BEGIN
    --  --
    --  IF g_cob_dados(i).tip_dados_cob = 'A' AND
    --     g_cob_dados(i).tip_cob       = 'C' -- casco
    --  THEN
    --    --
    --    g_cob_dados(i).mca_seleccion_cob := 'S';
    --    g_cob_dados(i).cod_cob := 1;
    --    --
    --  ELSIF g_cob_dados(i).tip_dados_cob = 'I' AND
    --        g_cob_dados(i).tip_cob       = 'C'
    --  THEN
    --    --
    --    g_cob_dados(i).mca_seleccion_cob := 'S';
    --    g_cob_dados(i).cod_cob := 1;
    --    --
    --  END IF;
    --  --
    --END pi_contrata_casco_1;
    --
    /* ---------------------------------------------------------------------
    || pi_graba_datos_cob_c2000000
    */ ---------------------------------------------------------------------
    --
    FUNCTION fi_valida_cob_casco (p_cod_cia        c2000000.cod_cia       %TYPE,
                                  p_cod_ramo       c2000000.cod_ramo      %TYPE,
                                  p_num_cotizacion c2000000.num_cotizacion%TYPE)
    RETURN VARCHAR2
    IS
      --
      l_k_cob_201 c2009040_vcr.cod_cob%TYPE := 201; -- DANOS PROPRIOS PARCIAIS
      l_k_cob_202 c2009040_vcr.cod_cob%TYPE := 202; -- INCENDIO
      l_k_cob_203 c2009040_vcr.cod_cob%TYPE := 203; -- ROUBO/FURTO
      l_k_cob_218 c2009040_vcr.cod_cob%TYPE := 218; -- DANOS PROPRIOS TOTAIS
      --
      l_count_201 NUMBER (2) := 0;
      l_count_202 NUMBER (2) := 0;
      l_count_203 NUMBER (2) := 0;
      l_count_218 NUMBER (2) := 0;
      --
      --3 - 202 203
      --2 - 201 202 218
      --1 - 201 202 203 218
      CURSOR c_count_cob (pc_cod_cia        c2000000.cod_cia       %TYPE,
                          pc_cod_ramo       c2000000.cod_ramo      %TYPE,
                          pc_num_cotizacion c2000000.num_cotizacion%TYPE,
                          pc_cod_cob        c2009040_vcr.cod_cob   %TYPE)
      IS
        --
        SELECT COUNT(1)
          FROM c2009040_vcr a
         WHERE a.cod_cia        = pc_cod_cia
           AND a.cod_ramo       = pc_cod_ramo
           AND a.num_cotizacion = pc_num_cotizacion
           AND a.cod_cob        = pc_cod_cob;
        --
      --
    BEGIN
      --
      mx('I', 'fi_valida_cob_casco');
      --
      IF c_count_cob%ISOPEN THEN
        CLOSE c_count_cob;
      END IF;
      --
      OPEN c_count_cob (pc_cod_cia        => p_cod_cia,
                        pc_cod_ramo       => p_cod_ramo,
                        pc_num_cotizacion => p_num_cotizacion,
                        pc_cod_cob        => l_k_cob_201);
      FETCH c_count_cob INTO l_count_201;
      CLOSE c_count_cob;
      --
      OPEN c_count_cob (pc_cod_cia        => p_cod_cia,
                        pc_cod_ramo       => p_cod_ramo,
                        pc_num_cotizacion => p_num_cotizacion,
                        pc_cod_cob        => l_k_cob_202);
      FETCH c_count_cob INTO l_count_202;
      CLOSE c_count_cob;
      --
      OPEN c_count_cob (pc_cod_cia        => p_cod_cia,
                        pc_cod_ramo       => p_cod_ramo,
                        pc_num_cotizacion => p_num_cotizacion,
                        pc_cod_cob        => l_k_cob_203);
      FETCH c_count_cob INTO l_count_203;
      CLOSE c_count_cob;
      --
      OPEN c_count_cob (pc_cod_cia        => p_cod_cia,
                        pc_cod_ramo       => p_cod_ramo,
                        pc_num_cotizacion => p_num_cotizacion,
                        pc_cod_cob        => l_k_cob_218);
      FETCH c_count_cob INTO l_count_218;
      CLOSE c_count_cob;
      --
      mx('-', l_count_201);
      mx('-', l_count_202);
      mx('-', l_count_203);
      mx('-', l_count_218);
      mx('F', 'fi_valida_cob_casco');
      --
      IF l_count_202 > 0 AND l_count_203 > 0 THEN
        --
        mx('1', '1');
        RETURN '1';
        --
      ELSIF l_count_201 > 0 AND l_count_202 > 0 AND l_count_218 > 0 THEN
        --
        mx('2', '2');
        RETURN '2';
        --
      ELSIF l_count_201 > 0 AND l_count_202 > 0 AND l_count_203 > 0 AND l_count_218 > 0 THEN
        --
        mx('3', '3');
        RETURN '3';
        --
      ELSE
        --
        RETURN '3';
        --
      END IF;
      --
      --RETURN TRUE;
      --
    END fi_valida_cob_casco;
    --
    /* ---------------------------------------------------------------------
    || fi_lee_cobs_c2009040_vcr
    */ ---------------------------------------------------------------------
    --
    FUNCTION fi_lee_cobs_c2009040_vcr (p_cod_cia        c2000000.cod_cia       %TYPE,
                                       p_cod_ramo       c2000000.cod_ramo      %TYPE,
                                       p_num_cotizacion c2000000.num_cotizacion%TYPE,
                                       p_cod_cob        c2009040_vcr.cod_cob   %TYPE,
                                       p_tip_dados_cob  VARCHAR2                    ,
                                       p_tip_cob        VARCHAR2)
    RETURN VARCHAR2
    IS
      --
      v_cod_cob c2009040_vcr.cod_cob%TYPE := NULL;
      --
      CURSOR c_lee_cobs_c2009040_vcr (pc_cod_cia        c2000000.cod_cia       %TYPE,
                                      pc_cod_ramo       c2000000.cod_ramo      %TYPE,
                                      pc_num_cotizacion c2000000.num_cotizacion%TYPE,
                                      pc_cod_cob        c2009040_vcr.cod_cob   %TYPE)
        IS
        --
        SELECT cod_cob
          FROM c2009040_vcr a
         WHERE a.cod_cia        = pc_cod_cia
           AND a.cod_ramo       = pc_cod_ramo
           AND a.num_cotizacion = pc_num_cotizacion
           AND a.cod_cob        = pc_cod_cob;
        --
    BEGIN
      --
      mx('I', 'fi_lee_cobs_c2009040_vcr');
      --
      mx('p_cod_cia'       , p_cod_cia);
      mx('p_cod_ramo'      , p_cod_ramo);
      mx('p_num_cotizacion', p_num_cotizacion);
      mx('p_cod_cob'       , p_cod_cob);
      --
      IF c_lee_cobs_c2009040_vcr%ISOPEN
      THEN
        --
        CLOSE c_lee_cobs_c2009040_vcr;
        --
      END IF;
      --
      IF (p_tip_dados_cob = 'A' AND
          p_tip_cob       = 'C')
         OR
         (p_tip_dados_cob = 'I' AND
          p_tip_cob       = 'C') -- casco
      THEN
        --
        v_cod_cob := p_cod_cob;-- para funcionar, precisa terminar isso
        --
      ELSE
        --
        OPEN c_lee_cobs_c2009040_vcr(p_cod_cia       ,
                                     p_cod_ramo      ,
                                     p_num_cotizacion,
                                     p_cod_cob       );
        --
        FETCH c_lee_cobs_c2009040_vcr INTO v_cod_cob;
        --
      END IF;
      --
      mx('v_cod_cob', v_cod_cob);
      --
      mx('F', 'fi_lee_cobs_c2009040_vcr');
      --
      RETURN v_cod_cob;
      --
    END fi_lee_cobs_c2009040_vcr;
    --
    /* ---------------------------------------------------------------------
    || fi_marca_sub_contratacion_s
    */ ---------------------------------------------------------------------
    --
    FUNCTION fi_marca_sub_contratacion_s (p_cod_cia        c2000000.cod_cia       %TYPE,
                                          p_cod_ramo       c2000000.cod_ramo      %TYPE,
                                          p_num_cotizacion c2000000.num_cotizacion%TYPE,
                                          p_cod_cob        c2009040_vcr.cod_cob   %TYPE,
                                          p_tip_dados_cob  VARCHAR2                    ,
                                          p_tip_cob        VARCHAR2)
    RETURN VARCHAR2
    IS
      --
      l_val_columna     c2000000.val_columna  %TYPE := NULL;
      l_suma_aseg       c2009040_vcr.suma_aseg%TYPE := NULL;
      l_nom_columna_cob c2000000.nom_columna  %TYPE := NULL;
      l_retorno     VARCHAR2(30);
      --
      --v_cod_cob c2009040_vcr.cod_cob%TYPE := NULL;
      ---------------------------------------------------------------------
      CURSOR c_marca_sub_contratacion_s_c (pc_cod_cia        c2000000.cod_cia       %TYPE,
                                           pc_cod_ramo       c2000000.cod_ramo      %TYPE,
                                           pc_num_cotizacion c2000000.num_cotizacion%TYPE)
      IS
        --
        SELECT val_columna
          FROM c2000000 a
         WHERE a.cod_cia        = pc_cod_cia
           AND a.cod_ramo       = pc_cod_ramo
           AND a.num_cotizacion = pc_num_cotizacion
           AND a.nom_columna    = 'TIP_FRANQUIA'; -- cambiar por constante
      ---------------------------------------------------------------------
      CURSOR c_marca_sub_contratacion_s_i (pc_cod_cia        c2000000.cod_cia       %TYPE,
                                           pc_cod_ramo       c2000000.cod_ramo      %TYPE,
                                           pc_num_cotizacion c2000000.num_cotizacion%TYPE,
                                           pc_cod_cob        c2009040_vcr.cod_cob   %TYPE)
      IS
        --
        SELECT suma_aseg
          FROM c2009040_vcr a
         WHERE a.cod_cia        = pc_cod_cia
           AND a.cod_ramo       = pc_cod_ramo
           AND a.num_cotizacion = pc_num_cotizacion
           AND a.cod_cob        = pc_cod_cob;
      ---------------------------------------------------------------------
      CURSOR c_marca_sub_contratacion_s_a (pc_cod_cia        c2000000.cod_cia       %TYPE,
                                           pc_cod_ramo       c2000000.cod_ramo      %TYPE,
                                           pc_num_cotizacion c2000000.num_cotizacion%TYPE,
                                           pc_cod_cob        c2009040_vcr.cod_cob   %TYPE,
                                           pc_nom_columna    c2000000.nom_columna   %TYPE)
      IS
        --
        SELECT val_columna
          FROM c2000000 a
         WHERE a.cod_cia        = pc_cod_cia
           AND a.cod_ramo       = pc_cod_ramo
           AND a.num_cotizacion = pc_num_cotizacion
           AND a.nom_columna    = pc_nom_columna;
        --
    BEGIN
      --
      mx('I', 'fi_marca_sub_contratacion_s');
      -- CURSOR 1
      IF c_marca_sub_contratacion_s_c%ISOPEN
      THEN
        --
        CLOSE c_marca_sub_contratacion_s_c;
        --
      END IF;
      -- CURSOR 2
      IF c_marca_sub_contratacion_s_i%ISOPEN
      THEN
        --
        CLOSE c_marca_sub_contratacion_s_i;
        --
      END IF;
      -- CURSOR 3
      IF c_marca_sub_contratacion_s_a%ISOPEN
      THEN
        --
        CLOSE c_marca_sub_contratacion_s_a;
        --
      END IF;
      --
      IF (p_tip_dados_cob = 'A' AND
          p_tip_cob       = 'C')
         OR
         (p_tip_dados_cob = 'I' AND
          p_tip_cob       = 'C') -- casco
      THEN
        --
        mx('-','CASCO');
        --
        OPEN c_marca_sub_contratacion_s_c (pc_cod_cia        => p_cod_cia       ,
                                           pc_cod_ramo       => p_cod_ramo      ,
                                           pc_num_cotizacion => p_num_cotizacion);
        --
        FETCH c_marca_sub_contratacion_s_c INTO l_val_columna;
        l_retorno := l_val_columna;
        CLOSE c_marca_sub_contratacion_s_c;
        --
        mx('l_val_columna',l_val_columna);
        mx('l_retorno'    ,l_retorno);
        --
        --
      ELSIF p_tip_dados_cob = 'I' THEN
        --
        mx('-','OTRAS');
        --
        OPEN c_marca_sub_contratacion_s_i (pc_cod_cia        => p_cod_cia       ,
                                           pc_cod_ramo       => p_cod_ramo      ,
                                           pc_num_cotizacion => p_num_cotizacion,
                                           pc_cod_cob        => p_cod_cob       );
        --
        FETCH c_marca_sub_contratacion_s_i INTO l_suma_aseg;
        l_retorno := l_suma_aseg;
        CLOSE c_marca_sub_contratacion_s_i;
        --
        mx('l_suma_aseg',l_suma_aseg);
        mx('l_retorno',l_retorno);
        --
        --
      ELSIF p_tip_dados_cob = 'A' THEN
        --
        mx('-','ADICIONALES');
        --
        -- buscar todos los tipos distintos de datos variables para coberturas tipo 'A' ejemplo:
        -- TIP_COB_VIDROS (1301)
        -- TIP_COB_ASSISTENCIA ()
        -- TIP_CARRO_RESERVA (1302)
        IF p_cod_cob = 1301 THEN
          --
          l_nom_columna_cob := 'TIP_COB_VIDROS';
          --
        ELSIF p_cod_cob = 1302 THEN
          --
          l_nom_columna_cob := 'TIP_CARRO_RESERVA';
          --
        ELSIF p_cod_cob = 1304 THEN
          --
          l_nom_columna_cob := 'TIP_COB_ASSISTENCIA';
          --
        END IF;
        --
        OPEN c_marca_sub_contratacion_s_a (pc_cod_cia        => p_cod_cia        ,
                                           pc_cod_ramo       => p_cod_ramo       ,
                                           pc_num_cotizacion => p_num_cotizacion ,
                                           pc_cod_cob        => p_cod_cob        ,
                                           pc_nom_columna    => 'TIP_COB_VIDROS');--p_nom_columna    );
        --
        FETCH c_marca_sub_contratacion_s_a INTO l_val_columna;
        l_retorno := l_val_columna;
        --
        --
        mx('l_val_columna',l_val_columna);
        mx('l_retorno'    ,l_retorno);
        --
      END IF;
      --
      mx('F', 'fi_marca_sub_contratacion_s');
      --
      RETURN l_retorno; -- NECESITA DEVUELVER UN VALOR
      --
    END fi_marca_sub_contratacion_s;
    --
  BEGIN
    --
    --
    mx('I', 'p_marca_cobs_contratadas');
    --
    FOR i IN g_cob_dados.FIRST .. g_cob_dados.LAST LOOP
      --
      IF g_cob_dados(i).mca_seleccion_cob = trn.NO
      THEN
        --
        --mx('-','------------------------------------'); --
        --
        --mx('id_seq'                      ,g_cob_dados(i).id_seq                     );
        --mx('num_cotizacion'              ,g_cob_dados(i).num_cotizacion             );
        --mx('num_simulacion'              ,g_cob_dados(i).num_simulacion             );
        --mx('cod_pacote'                  ,g_cob_dados(i).cod_pacote                 );
        --mx('cod_cob'                     ,g_cob_dados(i).cod_cob                    );
        --mx('tip_cob'                     ,g_cob_dados(i).tip_cob                    );
        --mx('mca_seleccion_cob'           ,g_cob_dados(i).mca_seleccion_cob          );
        --mx('mca_val_defecto_indenizacao' ,g_cob_dados(i).mca_val_defecto_indenizacao);
        --mx('mca_seleccion_atributo'      ,g_cob_dados(i).mca_seleccion_atributo     );
        --mx('tip_dados_cob'               ,g_cob_dados(i).tip_dados_cob              );
        --mx('cod_campo'                   ,g_cob_dados(i).cod_campo                  );
        --mx('val_campo'                   ,g_cob_dados(i).val_campo                  );
        --mx('txt_campo'                   ,g_cob_dados(i).txt_campo                  );
        --mx('val_premio_casco'            ,g_cob_dados(i).val_premio_casco           );
        --
        --mx('-','------------------------------------');
        --
        mx('-','I------------------------------------I');
        mx('fi_lee_cobs_c2009040_vcr', fi_lee_cobs_c2009040_vcr (p_cod_cia        => trn_k_global.ref_f_global('COD_CIA')       ,
                                                                 p_cod_ramo       => trn_k_global.ref_f_global('COD_RAMO')      ,
                                                                 p_num_cotizacion => trn_k_global.ref_f_global('NUM_COTIZACION'),
                                                                 p_cod_cob        => g_cob_dados(i).cod_cob                     ,
                                                                 p_tip_dados_cob  => g_cob_dados(i).tip_dados_cob               ,
                                                                 p_tip_cob        => g_cob_dados(i).tip_cob                     ));
        mx('g_cob_dados(i).cod_cob', g_cob_dados(i).cod_cob);
        mx('fi_marca_sub_contratacion_s', fi_marca_sub_contratacion_s (p_cod_cia        => trn_k_global.ref_f_global('COD_CIA')       ,
                                                                       p_cod_ramo       => trn_k_global.ref_f_global('COD_RAMO')      ,
                                                                       p_num_cotizacion => trn_k_global.ref_f_global('NUM_COTIZACION'),
                                                                       p_cod_cob        => g_cob_dados(i).cod_cob                     ,
                                                                       p_tip_dados_cob  => g_cob_dados(i).tip_dados_cob               ,
                                                                       p_tip_cob        => g_cob_dados(i).tip_cob                     ));
        mx('g_cob_dados(i).val_campo', g_cob_dados(i).val_campo);
        mx('g_cob_dados(i).tip_cob', g_cob_dados(i).tip_cob);
        mx('g_cob_dados(i).tip_dados_cob', g_cob_dados(i).tip_dados_cob);
        mx('g_cob_dados(i).tip_dados_cob', g_cob_dados(i).tip_dados_cob);
        mx('-','F------------------------------------F');
        --
        IF fi_lee_cobs_c2009040_vcr (p_cod_cia        => trn_k_global.ref_f_global('COD_CIA')       ,
                                     p_cod_ramo       => trn_k_global.ref_f_global('COD_RAMO')      ,
                                     p_num_cotizacion => trn_k_global.ref_f_global('NUM_COTIZACION'),
                                     p_cod_cob        => g_cob_dados(i).cod_cob                     ,
                                     p_tip_dados_cob  => g_cob_dados(i).tip_dados_cob               ,
                                     p_tip_cob        => g_cob_dados(i).tip_cob                     )  = g_cob_dados(i).cod_cob -- condicion
        THEN
          --
          g_cob_dados(i).mca_seleccion_cob := trn.SI;
          --
          IF fi_marca_sub_contratacion_s (p_cod_cia        => trn_k_global.ref_f_global('COD_CIA')       ,
                                          p_cod_ramo       => trn_k_global.ref_f_global('COD_RAMO')      ,
                                          p_num_cotizacion => trn_k_global.ref_f_global('NUM_COTIZACION'),
                                          p_cod_cob        => g_cob_dados(i).cod_cob                     ,
                                          p_tip_dados_cob  => g_cob_dados(i).tip_dados_cob               ,
                                          p_tip_cob        => g_cob_dados(i).tip_cob                     ) = g_cob_dados(i).val_campo
          THEN
            --
            IF (g_cob_dados(i).tip_cob       = 'C' AND
                g_cob_dados(i).tip_dados_cob = 'A')
               OR
               (g_cob_dados(i).tip_dados_cob = 'I' AND
                g_cob_dados(i).tip_cob       = 'C')
            THEN
              --
              mx('-','tip_cob       = C');
              IF g_cob_dados(i).tip_dados_cob = 'A' AND
                 g_cob_dados(i).tip_cob       = 'C' -- casco
              THEN
                --
                mx('-','MARCA S 1');
                g_cob_dados(i).mca_seleccion_cob := 'S';
                g_cob_dados(i).cod_cob := fi_valida_cob_casco (p_cod_cia        => trn_k_global.ref_f_global('COD_CIA')       ,
                                                               p_cod_ramo       => trn_k_global.ref_f_global('COD_RAMO')      ,
                                                               p_num_cotizacion => trn_k_global.ref_f_global('NUM_COTIZACION'));
                --
              ELSIF g_cob_dados(i).tip_dados_cob = 'I' AND
                    g_cob_dados(i).tip_cob       = 'C'
              THEN
                --
                mx('-','MARCA S 2');
                g_cob_dados(i).mca_seleccion_cob := 'S';
                g_cob_dados(i).cod_cob := fi_valida_cob_casco (p_cod_cia        => trn_k_global.ref_f_global('COD_CIA')       ,
                                                               p_cod_ramo       => trn_k_global.ref_f_global('COD_RAMO')      ,
                                                               p_num_cotizacion => trn_k_global.ref_f_global('NUM_COTIZACION'));
                --
              END IF;
              --
              --em_k_gen_ws.g_err_msg.EXTEND(1);
              /*em_k_gen_ws.g_err_msg(em_k_gen_ws.g_err_msg.LAST) := em_k_gen_ws.f_trata_msg (p_cod_campo   => 'COB_FORCADA1',
                                                                                            p_cod_erro    => 12109040,
                                                                                            p_txt_msg     => g_cob_dados(i).cod_cob);*/
              --
              mx('-', 'g_cob_dados(i).cod_cob ' || g_cob_dados(i).cod_cob);
              --
              --
            ELSIF g_cob_dados(i).tip_dados_cob = 'I' THEN
              --
              mx('-','g_cob_dados(i).tip_dados_cob = I');
              g_cob_dados(i).mca_val_defecto_indenizacao := trn.SI;
              --
              --em_k_gen_ws.g_err_msg.EXTEND(1);
              /*em_k_gen_ws.g_err_msg(em_k_gen_ws.g_err_msg.LAST) := em_k_gen_ws.f_trata_msg (p_cod_campo   => 'COB_FORCADA2',
                                                                                            p_cod_erro    => 12109040,
                                                                                            p_txt_msg     => g_cob_dados(i).cod_cob);*/
              --
              mx('-', 'g_cob_dados(i).cod_cob ' || g_cob_dados(i).cod_cob);
              --
              --
            ELSIF g_cob_dados(i).tip_dados_cob = 'A' THEN
              --
              mx('-','g_cob_dados(i).tip_dados_cob = A');
              g_cob_dados(i).mca_seleccion_atributo := trn.SI;
              --
              --
              --em_k_gen_ws.g_err_msg.EXTEND(1);
              /*em_k_gen_ws.g_err_msg(em_k_gen_ws.g_err_msg.LAST) := em_k_gen_ws.f_trata_msg (p_cod_campo   => 'COB_FORCADA3',
                                                                                            p_cod_erro    => 12109040,
                                                                                            p_txt_msg     => g_cob_dados(i).cod_cob);*/
              --
              mx('-', 'g_cob_dados(i).cod_cob ' || g_cob_dados(i).cod_cob);
              --
            END IF;
            --
          END IF;
          --
        END IF;
        --
      END IF;
      --
    END LOOP;
    --
    mx('F', 'p_marca_cobs_contratadas');
    --
    --
  END p_marca_cobs_contratadas;
    -- RECALCULO
  /* ------------------------------------------------------
  || mbaruch teste rf 11 e 12
  */ ------------------------------------------------------
  --
  PROCEDURE p_graba_datos_cob_pacote
  IS
    --
    l_reg_c2000000 c2000000              %ROWTYPE;
    l_cod_tip_vehi c2000000.val_columna  %TYPE;
    l_k_tabla_cobs c2000000.nom_tabla    %TYPE := 'A2000040';
    --
    l_k_cod_tip_vehi c2000000.val_columna%TYPE := 'COD_TIP_VEHI';
    --
    --
    /* ---------------------------------------------------------------------
    || pi_actualiza_mca_cobs_pkts_n
    */ ---------------------------------------------------------------------
    --
    FUNCTION fi_coge_categoria_vehi (p_cod_cia        c2000000.cod_cia       %TYPE
                                   , p_cod_ramo       c2000000.cod_ramo      %TYPE
                                   , p_num_cotizacion c2000000.num_cotizacion%TYPE)
    RETURN VARCHAR2
    IS
      --
      li_cod_tip_vehi c2000000.val_columna%TYPE;
      --
      CURSOR c_coge_categoria_vehi (pc_cod_cia        c2000000.cod_cia       %TYPE
                                  , pc_cod_ramo       c2000000.cod_ramo      %TYPE
                                  , pc_num_cotizacion c2000000.num_cotizacion%TYPE)
      IS
        --
        SELECT val_columna
          FROM c2000000 a
         WHERE a.cod_cia        = p_cod_cia
           AND a.cod_ramo       = p_cod_ramo
           AND a.num_cotizacion = p_num_cotizacion
           AND a.nom_columna    = l_k_cod_tip_vehi;
        --
      --
    BEGIN
      --
      mx('I', 'fi_coge_categoria_vehi');
      --
      IF c_coge_categoria_vehi%ISOPEN
      THEN
        CLOSE c_coge_categoria_vehi;
      END IF;
      --
      OPEN c_coge_categoria_vehi (p_cod_cia       ,
                                  p_cod_ramo      ,
                                  p_num_cotizacion);
      --
      FETCH c_coge_categoria_vehi INTO li_cod_tip_vehi;
      --
      CLOSE c_coge_categoria_vehi;
      --
      --
      mx('F', 'fi_coge_categoria_vehi');
      --
      RETURN li_cod_tip_vehi;
      --
    END fi_coge_categoria_vehi;
    --
    /* ---------------------------------------------------------------------
    || pi_actualiza_mca_cobs_pkts_n
    */ ---------------------------------------------------------------------
    --
    PROCEDURE pi_actualiza_mca_cobs_pkts_n (p_cod_cia        c2000000.cod_cia       %TYPE
                                          , p_cod_ramo       c2000000.cod_ramo      %TYPE
                                          , p_num_cotizacion c2000000.num_cotizacion%TYPE
                                          --, p_cod_cob        g2109040_vcr.cod_cob   %TYPE
                                          , p_cod_tip_vehi   a2100100.cod_tip_vehi  %TYPE)
    IS
      --
      PRAGMA AUTONOMOUS_TRANSACTION;
      --
      li_reg_c2000000 C2000000%ROWTYPE;
      --
      CURSOR c_selecciona_mca_cobs_pkts_n (pc_cod_cia        c2000000.cod_cia       %TYPE
                                         , pc_cod_ramo       c2000000.cod_ramo      %TYPE
                                         , pc_num_cotizacion c2000000.num_cotizacion%TYPE
                                         , pc_nom_columna    c2000000.nom_columna   %TYPE)
      IS
        --
        SELECT *
          FROM c2000000
         WHERE cod_cia        = pc_cod_cia
           AND cod_ramo       = pc_cod_ramo
           AND num_cotizacion = pc_num_cotizacion
           AND nom_columna    = pc_nom_columna;
        --
      --
    BEGIN
      --
      --
      mx('I', 'pi_actualiza_mca_cobs_pkts_n');
      --
      IF c_selecciona_mca_cobs_pkts_n%ISOPEN
      THEN
        CLOSE c_selecciona_mca_cobs_pkts_n;
      END IF;
      --
      OPEN c_selecciona_mca_cobs_pkts_n (pc_cod_cia        => p_cod_cia
                                       , pc_cod_ramo       => p_cod_ramo
                                       , pc_num_cotizacion => p_num_cotizacion
                                       , pc_nom_columna    => p_cod_tip_vehi || '_MCA_SELECCION_' /*|| p_cod_cob*/); -- preciso agregar CAT_N# numero da categoria
      --
      LOOP
        --
        EXIT WHEN c_selecciona_mca_cobs_pkts_n%NOTFOUND;
        --
        FETCH c_selecciona_mca_cobs_pkts_n INTO li_reg_c2000000;
        /*--
        mx('li_reg_c2000000.cod_cia       ', li_reg_c2000000.cod_cia        );
        mx('li_reg_c2000000.cod_ramo      ', li_reg_c2000000.cod_ramo       );
        mx('li_reg_c2000000.num_cotizacion', li_reg_c2000000.num_cotizacion );
        mx('li_reg_c2000000.nom_tabla     ', li_reg_c2000000.nom_tabla      );
        mx('li_reg_c2000000.nom_columna   ', li_reg_c2000000.nom_columna    );
        mx('li_reg_c2000000.cod_fila      ', li_reg_c2000000.cod_fila       );
        mx('li_reg_c2000000.val_columna   ', li_reg_c2000000.val_columna    );
        --*/
        UPDATE c2000000
           SET val_columna = TRN.NO -- 'N'
         WHERE cod_cia        = li_reg_c2000000.cod_cia
           AND cod_ramo       = li_reg_c2000000.cod_ramo
           AND num_cotizacion = li_reg_c2000000.num_cotizacion
           AND nom_tabla      = li_reg_c2000000.nom_tabla
           AND nom_columna    = li_reg_c2000000.nom_columna;
           --
           COMMIT;
           --
        --
      END LOOP;
      --
      mx('F', 'pi_actualiza_mca_cobs_pkts_n');
      --
    END pi_actualiza_mca_cobs_pkts_n;
    --
    /* ---------------------------------------------------------------------
    || fi_monta_reg_cob geral
    */ ---------------------------------------------------------------------
    --
    FUNCTION fi_monta_reg_cob (p_cod_cia        c2000000.cod_cia       %TYPE
                             , p_cod_ramo       c2000000.cod_ramo      %TYPE
                             , p_num_cotizacion c2000000.num_cotizacion%TYPE
                             , p_nom_tabla      c2000000.nom_tabla     %TYPE
                             , p_nom_columna    c2000000.nom_columna   %TYPE
                             , p_cod_fila       c2000000.cod_fila      %TYPE
                             , p_val_columna    c2000000.val_columna   %TYPE)
    RETURN c2000000%ROWTYPE
    IS
      --
      --
    BEGIN
      --
      --
      mx('I', 'fi_monta_reg_cob');
      --
      l_reg_c2000000.cod_cia        := p_cod_cia;--trn_k_global.ref_f_global('COD_CIA');
      l_reg_c2000000.cod_ramo       := p_cod_ramo;--trn_k_global.ref_f_global('COD_RAMO');
      l_reg_c2000000.num_cotizacion := p_num_cotizacion;--trn_k_global.ref_f_global('NUM_COTIZACION');
      l_reg_c2000000.nom_tabla      := p_nom_tabla;--l_k_tabla_cobs;
      l_reg_c2000000.nom_columna    := p_nom_columna;--'MCA_SELECCION';
      l_reg_c2000000.cod_fila       := p_cod_fila;--9999;
      l_reg_c2000000.val_columna    := p_val_columna;--;
      --
      --
      mx('F', 'fi_monta_reg_cob');
      --
      RETURN l_reg_c2000000;
      --
    END fi_monta_reg_cob;
    --
    /* ---------------------------------------------------------------------
    || pi_graba_datos_cob_c2000000
    */ ---------------------------------------------------------------------
    --
    PROCEDURE pi_graba_datos_cob_c2000000 (p_reg c2000000%ROWTYPE)
    IS
      --
      PRAGMA AUTONOMOUS_TRANSACTION;
      --
    BEGIN
      --
      mx('p_reg.cod_cia       ', p_reg.cod_cia        );
      mx('p_reg.cod_ramo      ', p_reg.cod_ramo       );
      mx('p_reg.num_cotizacion', p_reg.num_cotizacion );
      mx('p_reg.nom_tabla     ', p_reg.nom_tabla      );
      mx('p_reg.nom_columna   ', p_reg.nom_columna    );
      mx('p_reg.cod_fila      ', p_reg.cod_fila       );
      mx('p_reg.val_columna   ', p_reg.val_columna    );
      --
      em_k_c2000000.p_inserta_borrando(p_reg);
      --
      COMMIT;
      --
    END pi_graba_datos_cob_c2000000;
    --
  BEGIN
    --
    --
    mx('I', 'p_graba_datos_cob_pacote');
    --
    l_cod_tip_vehi := fi_coge_categoria_vehi (p_cod_cia        => trn_k_global.ref_f_global('COD_CIA')
                                            , p_cod_ramo       => trn_k_global.ref_f_global('COD_RAMO')
                                            , p_num_cotizacion => trn_k_global.ref_f_global('NUM_COTIZACION'));
    --
    --FOR i IN g_cob_dados.FIRST .. g_cob_dados.LAST LOOP
      --
      pi_actualiza_mca_cobs_pkts_n (p_cod_cia        => trn_k_global.ref_f_global('COD_CIA')
                                  , p_cod_ramo       => trn_k_global.ref_f_global('COD_RAMO')
                                  , p_num_cotizacion => trn_k_global.ref_f_global('NUM_COTIZACION_GRUPO')
                                  --, p_cod_cob        => g_cob_dados(i).cod_cob
                                  , p_cod_tip_vehi   => l_cod_tip_vehi);
      --
    --END LOOP;
    --
    FOR i IN g_cob_dados.FIRST .. g_cob_dados.LAST LOOP
      --
      mx('-','------------------------------------');
      --
      mx('id_seq'                      ,g_cob_dados(i).id_seq                     );
      mx('num_cotizacion'              ,g_cob_dados(i).num_cotizacion             );
      mx('num_simulacion'              ,g_cob_dados(i).num_simulacion             );
      mx('cod_pacote'                  ,g_cob_dados(i).cod_pacote                 );
      mx('cod_cob'                     ,g_cob_dados(i).cod_cob                    );
      mx('tip_cob'                     ,g_cob_dados(i).tip_cob                    );
      mx('mca_seleccion_cob'           ,g_cob_dados(i).mca_seleccion_cob          );
      mx('mca_val_defecto_indenizacao' ,g_cob_dados(i).mca_val_defecto_indenizacao);
      mx('mca_seleccion_atributo'      ,g_cob_dados(i).mca_seleccion_atributo     );
      mx('tip_dados_cob'               ,g_cob_dados(i).tip_dados_cob              );
      mx('cod_campo'                   ,g_cob_dados(i).cod_campo                  );
      mx('val_campo'                   ,g_cob_dados(i).val_campo                  );
      mx('txt_campo'                   ,g_cob_dados(i).txt_campo                  );
      mx('val_premio_casco'            ,g_cob_dados(i).val_premio_casco           );
      --
      mx('-','------------------------------------');
      --
      /*IF g_cob_dados(i).cod_cob = 1 OR
         g_cob_dados(i).cod_cob = 2 OR
         g_cob_dados(i).cod_cob = 3
      THEN
        --
        l_cod_cob_de_para := 201;
        --
      ELSE
        --
        l_cod_cob_de_para := g_cob_dados(i).cod_cob;
        --
      END IF;*/
      --
      -- llama funcion 1 y 2 g2109040_vcr y g2109041_vcr
      --
      IF g_cob_dados(i).mca_seleccion_cob = 'S' THEN -- cob marcada para contratar
          --
          IF ((g_cob_dados(i).tip_dados_cob          = 'A' AND
               g_cob_dados(i).mca_seleccion_atributo = TRN.SI)
               OR
              (g_cob_dados(i).tip_dados_cob               = 'I' AND
               g_cob_dados(i).mca_val_defecto_indenizacao = TRN.SI)
               OR
              (g_cob_dados(i).tip_dados_cob          = 'C' AND
               g_cob_dados(i).mca_seleccion_atributo = TRN.SI))
          THEN
            --
            --IF g_cob_dados(i).mca_seleccion_atributo = 'S' THEN
              l_reg_c2000000 := fi_monta_reg_cob (p_cod_cia        => trn_k_global.ref_f_global('COD_CIA')
                                                  , p_cod_ramo       => trn_k_global.ref_f_global('COD_RAMO')
                                                  , p_num_cotizacion => trn_k_global.ref_f_global('NUM_COTIZACION_GRUPO')
                                                  , p_nom_tabla      => l_k_tabla_cobs
                                                  , p_nom_columna    => l_cod_tip_vehi || '_MCA_SELECCION_' || g_cob_dados(i).cod_cob
                                                  , p_cod_fila       => 99999
                                                  , p_val_columna    => TRN.SI);
              --
              pi_graba_datos_cob_c2000000 (l_reg_c2000000);
              --
              l_reg_c2000000 := fi_monta_reg_cob (p_cod_cia        => trn_k_global.ref_f_global('COD_CIA')
                                                  , p_cod_ramo       => trn_k_global.ref_f_global('COD_RAMO')
                                                  , p_num_cotizacion => trn_k_global.ref_f_global('NUM_COTIZACION_GRUPO')
                                                  , p_nom_tabla      => l_k_tabla_cobs
                                                  , p_nom_columna    => l_cod_tip_vehi || '_VAL_CAMPO_' || g_cob_dados(i).cod_cob
                                                  , p_cod_fila       => 99999
                                                  , p_val_columna    => g_cob_dados(i).val_campo);
              --
              pi_graba_datos_cob_c2000000 (l_reg_c2000000);
              --
            --END IF;
          ELSE
            NULL;
          END IF;
          --
          --pi_graba_datos_cob_c2000000
          --
      END IF;
      --
    END LOOP;
    --
    mx('F', 'p_graba_datos_cob_pacote');
    --
    --
  END p_graba_datos_cob_pacote;
  -- RECALCULO
  /* ------------------------------------------------------
  || mbaruch teste rf 11 e 12
  */ ------------------------------------------------------
  --
  PROCEDURE p_valida_clave_gen_clave
  IS
    --
    l_cod_cob_de_para       g2109040_vcr.cod_cob   %TYPE;
    --
    l_num_coti_riesgo       c2000000.num_cotizacion%TYPE;
    l_num_serie             c2000000.val_columna   %TYPE;
    l_txt_sub_modelo        c2000000.val_columna   %TYPE;
    l_num_item_cotacao      c2000000.val_columna   %TYPE;
    l_nom_cob               a1002050.nom_cob       %TYPE;
    --
    /* ------------------------------------------------------
    || fi_valida_cob_g2109040_vcr
    */ ------------------------------------------------------
    --
    PROCEDURE pi_descontrata_cob (p_cod_cob g2109040_vcr.cod_cob%TYPE)
    IS
      --
      --
    BEGIN
      --
      mx('I','pi_descontrata_cob');
      --
      FOR j IN g_cob_dados.FIRST .. g_cob_dados.LAST LOOP
        --
        IF g_cob_dados(j).cod_cob = TO_CHAR(p_cod_cob)
        THEN
          --
          g_cob_dados(j).mca_seleccion_cob := 'N'; -- DESCONTRATA cob
          --
          --
          mx('-','j------------------------------------');
          --
          mx('id_seq'                      ,g_cob_dados(J).id_seq                     );
          mx('num_cotizacion'              ,g_cob_dados(j).num_cotizacion             );
          mx('num_simulacion'              ,g_cob_dados(j).num_simulacion             );
          mx('cod_pacote'                  ,g_cob_dados(j).cod_pacote                 );
          mx('cod_cob'                     ,g_cob_dados(j).cod_cob                    );
          mx('tip_cob'                     ,g_cob_dados(j).tip_cob                    );
          mx('mca_seleccion_cob'           ,g_cob_dados(j).mca_seleccion_cob          );
          mx('mca_val_defecto_indenizacao' ,g_cob_dados(j).mca_val_defecto_indenizacao);
          mx('mca_seleccion_atributo'      ,g_cob_dados(j).mca_seleccion_atributo     );
          mx('tip_dados_cob'               ,g_cob_dados(j).tip_dados_cob              );
          mx('cod_campo'                   ,g_cob_dados(j).cod_campo                  );
          mx('val_campo'                   ,g_cob_dados(j).val_campo                  );
          mx('txt_campo'                   ,g_cob_dados(j).txt_campo                  );
          mx('val_premio_casco'            ,g_cob_dados(j).val_premio_casco           );
          --
          mx('-','j------------------------------------');
          --
          --
        END IF;
        --
      END LOOP;
      --
      mx('F','pi_descontrata_cob');
      --
    EXCEPTION
      WHEN OTHERS THEN
        MX('SQLMSG : ', SQLERRM);
        MX('SQLCODE: ', SQLCODE);

    END pi_descontrata_cob;
    --
    /* ------------------------------------------------------
    || fi_valida_cob_g2109040_vcr
    */ ------------------------------------------------------
    --
    FUNCTION fi_valida_cob_g2109040_vcr (pi_cod_cia           g2109040_vcr.cod_cia           %TYPE,
                                         pi_cod_ramo          g2109040_vcr.cod_ramo          %TYPE,
                                         pi_cod_modalidad     g2109040_vcr.cod_modalidad     %TYPE,
                                         pi_val_clave_formula g2109040_vcr.val_clave_formula %TYPE,
                                         pi_cod_cob           g2109040_vcr.cod_cob           %TYPE)
    RETURN BOOLEAN IS
      --
      l_mca_contrata g2109040_vcr.mca_contrata%TYPE;
      --
      CURSOR ci_mca_contrata_g2109040_vcr (pc_cod_cia           g2109040_vcr.cod_cia           %TYPE,
                                           pc_cod_ramo          g2109040_vcr.cod_ramo          %TYPE,
                                           pc_cod_modalidad     g2109040_vcr.cod_modalidad     %TYPE,
                                           pc_val_clave_formula g2109040_vcr.val_clave_formula %TYPE,
                                           pc_cod_cob           g2109040_vcr.cod_cob           %TYPE)
      IS
        --
        SELECT mca_contrata
          FROM g2109040_vcr a
         WHERE a.cod_cia            = pc_cod_cia
           AND a.cod_ramo           = pc_cod_ramo
           AND a.cod_modalidad      = pc_cod_modalidad--23111
           AND a.val_clave_formula  = pc_val_clave_formula
           AND a.cod_cob            = pc_cod_cob
           AND a.mca_baja           = 'N'
           AND a.fec_validez = (SELECT MAX (fec_validez)
                                  FROM g2109040_vcr b
                                 WHERE b.cod_cia            = a.cod_cia
                                   AND b.cod_ramo           = a.cod_ramo
                                   AND b.cod_agt            = a.cod_agt
                                   AND b.cod_nivel1         = a.cod_nivel1
                                   AND b.cod_nivel2         = a.cod_nivel2
                                   AND b.cod_nivel3         = a.cod_nivel3
                                   AND b.cod_canal1         = a.cod_canal1
                                   AND b.cod_canal2         = a.cod_canal2
                                   AND b.cod_canal3         = a.cod_canal3
                                   AND b.num_poliza_grupo   = a.num_poliza_grupo
                                   AND b.num_contrato       = a.num_contrato
                                   AND b.num_subcontrato    = a.num_subcontrato
                                   AND b.num_poliza_cliente = a.num_poliza_cliente
                                   AND b.num_poliza         = a.num_poliza
                                   AND b.tip_segmento       = a.tip_segmento
                                   AND b.cod_modalidad      = a.cod_modalidad
                                   AND b.val_clave_formula  = a.val_clave_formula
                                   AND b.cod_tarifa         = a.cod_tarifa
                                   AND b.cod_cob            = a.cod_cob
                                   AND b.suma_aseg          = a.suma_aseg
                                   AND b.mca_contrata       = a.mca_contrata
                                   AND b.mca_baja           = a.mca_baja
                                   AND b.fec_validez        = a.fec_validez
                                   AND b.tip_pacote         = a.tip_pacote)
           AND a.tip_pacote = 99; -- fijo
        --
      --
    BEGIN
      --
      IF ci_mca_contrata_g2109040_vcr%ISOPEN
      THEN
        CLOSE ci_mca_contrata_g2109040_vcr;
      END IF;
      --
      OPEN ci_mca_contrata_g2109040_vcr (pc_cod_cia           => pi_cod_cia          ,
                                         pc_cod_ramo          => pi_cod_ramo         ,
                                         pc_cod_modalidad     => pi_cod_modalidad    ,
                                         pc_val_clave_formula => pi_val_clave_formula,
                                         pc_cod_cob           => pi_cod_cob          );
      --
      LOOP
        --
        FETCH ci_mca_contrata_g2109040_vcr INTO l_mca_contrata;
        --
        EXIT WHEN ci_mca_contrata_g2109040_vcr%NOTFOUND;
        --
        IF l_mca_contrata = 'S'
        THEN
          EXIT;
        END IF;
        --
      END LOOP;
      --
      CLOSE ci_mca_contrata_g2109040_vcr;
      --
      IF l_mca_contrata = 'S'
      THEN
        RETURN TRUE;
      ELSE
        RETURN FALSE;
      END IF;
      --
    END fi_valida_cob_g2109040_vcr;
    --
    /* ------------------------------------------------------
    || fi_valida_cob_g2109041_vcr
    */ ------------------------------------------------------
    --
    FUNCTION fi_valida_cob_g2109041_vcr (pi_cod_cia           g2109040_vcr.cod_cia           %TYPE,
                                         pi_cod_ramo          g2109040_vcr.cod_ramo          %TYPE,
                                         pi_cod_modalidad     g2109040_vcr.cod_modalidad     %TYPE,
                                         pi_val_clave_formula g2109040_vcr.val_clave_formula %TYPE,
                                         pi_cod_cob           g2109040_vcr.cod_cob           %TYPE)
    RETURN BOOLEAN IS
      --
      l_mca_contrata g2109041_vcr.mca_contrata_cob%TYPE;
      --
      CURSOR ci_mca_contrata_g2109041_vcr (pc_cod_cia           g2109040_vcr.cod_cia           %TYPE,
                                           pc_cod_ramo          g2109040_vcr.cod_ramo          %TYPE,
                                           pc_cod_modalidad     g2109040_vcr.cod_modalidad     %TYPE,
                                           pc_val_clave_formula g2109040_vcr.val_clave_formula %TYPE,
                                           pc_cod_cob           g2109040_vcr.cod_cob           %TYPE)
      IS
        --
        SELECT mca_contrata_cob
          FROM g2109041_vcr a
         WHERE a.cod_cia            = pc_cod_cia
           AND a.cod_ramo           = pc_cod_ramo
           AND a.cod_modalidad      = pc_cod_modalidad--23111
           AND a.val_clave_formula  = pc_val_clave_formula
           AND a.cod_cob            = pc_cod_cob
           AND a.fec_validez = (SELECT MAX(fec_validez)
                                  FROM g2109040_vcr b
                                 WHERE b.cod_cia            = a.cod_cia
                                   AND b.cod_ramo           = a.cod_ramo
                                   AND b.cod_agt            = a.cod_agt
                                   AND b.cod_nivel1         = a.cod_nivel1
                                   AND b.cod_nivel2         = a.cod_nivel2
                                   AND b.cod_nivel3         = a.cod_nivel3
                                   AND b.cod_canal1         = a.cod_canal1
                                   AND b.cod_canal2         = a.cod_canal2
                                   AND b.cod_canal3         = a.cod_canal3
                                   AND b.num_poliza_grupo   = a.num_poliza_grupo
                                   AND b.num_contrato       = a.num_contrato
                                   AND b.num_subcontrato    = a.num_subcontrato
                                   AND b.num_poliza_cliente = a.num_poliza_cliente
                                   AND b.num_poliza         = a.num_poliza
                                   AND b.cod_modalidad      = a.cod_modalidad
                                   AND b.val_clave_formula  = a.val_clave_formula
                                   AND b.cod_tarifa         = a.cod_tarifa
                                   AND b.tip_segmento       = a.tip_segmento
                                   AND b.cod_cob            = a.cod_cob
                                   AND b.fec_validez        = a.fec_validez
                                   AND b.tip_pacote         = a.tip_pacote)
           AND a.tip_pacote = 99; -- fijo
        --
      --
    BEGIN
      --
      IF ci_mca_contrata_g2109041_vcr%ISOPEN
      THEN
        CLOSE ci_mca_contrata_g2109041_vcr;
      END IF;
      --
      OPEN ci_mca_contrata_g2109041_vcr (pc_cod_cia           => pi_cod_cia          ,
                                         pc_cod_ramo          => pi_cod_ramo         ,
                                         pc_cod_modalidad     => pi_cod_modalidad    ,
                                         pc_val_clave_formula => pi_val_clave_formula,
                                         pc_cod_cob           => pi_cod_cob          );
      --
      LOOP
        --
        FETCH ci_mca_contrata_g2109041_vcr INTO l_mca_contrata;
        --
        EXIT WHEN ci_mca_contrata_g2109041_vcr%NOTFOUND;
        --
        IF l_mca_contrata = 'S'
        THEN
          EXIT;
        END IF;
        --
      END LOOP;
      --
      CLOSE ci_mca_contrata_g2109041_vcr;
      --
      IF l_mca_contrata = 'S'
      THEN
        RETURN TRUE;
      ELSE
        RETURN FALSE;
      END IF;
      --
    END fi_valida_cob_g2109041_vcr;
    --
    /* ------------------------------------------------------
    || pi_cobs_excluidas
    */ ------------------------------------------------------
    --
    FUNCTION fi_val_clave_formula_coti (pi_cod_cia        c2000000.cod_cia       %TYPE,
                                        pi_cod_ramo       c2000000.cod_ramo      %TYPE,
                                        pi_num_cotizacion c2000000.num_cotizacion%TYPE)
    RETURN VARCHAR2 IS
      --
      l_val_clave_formula g2109040_vcr.val_clave_formula%TYPE := NULL;
      --
      CURSOR ci_val_clave_formula_coti (pc_cod_cia        c2000000.cod_cia       %TYPE,
                                        pc_cod_ramo       c2000000.cod_ramo      %TYPE,
                                        pc_num_cotizacion c2000000.num_cotizacion%TYPE)
      IS
        --
        SELECT val_columna
          FROM c2000000 a
         WHERE a.cod_cia        = pc_cod_cia
           AND a.cod_ramo       = pc_cod_ramo
           AND a.num_cotizacion = pc_num_cotizacion
           AND a.nom_columna    = 'VAL_CLAVE_FORMULA';
        --
      --
    BEGIN
      --
      IF ci_val_clave_formula_coti%ISOPEN THEN
        CLOSE ci_val_clave_formula_coti;
      END IF;
      --
      OPEN ci_val_clave_formula_coti (pi_cod_cia ,
                                      pi_cod_ramo,
                                      pi_num_cotizacion);
      --
      FETCH ci_val_clave_formula_coti INTO l_val_clave_formula;
      CLOSE ci_val_clave_formula_coti;
      RETURN l_val_clave_formula;
      --
    END fi_val_clave_formula_coti;
    --
    /* ------------------------------------------------------
    || pi_cobs_excluidas
    */ ------------------------------------------------------
    --
    --
    PROCEDURE pi_cobs_excluidas (p_num_coti_riesgo c2000000.num_cotizacion%TYPE,
                                 p_cod_cob         g2109040_vcr.cod_cob   %TYPE)
    IS
      --
      CURSOR ci_datos_riesgo (pc_num_coti_riesgo c2000000.num_cotizacion%TYPE,
                              pc_val_columna     c2000000.val_columna   %TYPE) IS
        --
        SELECT val_columna
          FROM c2000000 a
         WHERE a.cod_cia        = 1
           AND a.cod_ramo       = 231
           AND a.num_cotizacion = pc_num_coti_riesgo
           AND a.nom_columna IN (pc_val_columna);
                                /*'NUM_SERIE',
                                 'TXT_SUB_MODELO',
                                 'NUM_ITEM_COTACAO'*/
        --
      CURSOR ci_nom_cob (pc_cod_cob a1002050.cod_Cob%TYPE) IS
        --
        SELECT nom_cob
          FROM a1002050 a
         WHERE a.cod_cia = 1
           AND a.cod_cob = pc_cod_cob
           AND a.mca_inh = 'N';
        --
      --
    BEGIN
      --
      l_num_coti_riesgo := p_num_coti_riesgo;--TRN_K_GLOBAL.ref_f_global('NUM_COTIZACION');
      --
      IF(ci_datos_riesgo%ISOPEN)
      THEN
        CLOSE ci_datos_riesgo;
      END IF;
      --
      OPEN ci_datos_riesgo (l_num_coti_riesgo,
                            'NUM_SERIE');
      --
      FETCH ci_datos_riesgo INTO l_num_serie;
      CLOSE ci_datos_riesgo;
      --
      OPEN ci_datos_riesgo (l_num_coti_riesgo,
                            'TXT_SUB_MODELO');
      --
      FETCH ci_datos_riesgo INTO l_txt_sub_modelo;
      CLOSE ci_datos_riesgo;
      --
      OPEN ci_datos_riesgo (l_num_coti_riesgo,
                            'NUM_ITEM_COTACAO');
      --
      FETCH ci_datos_riesgo INTO l_num_item_cotacao;
      CLOSE ci_datos_riesgo;
      --
      IF(ci_nom_cob%ISOPEN)
      THEN
        CLOSE ci_nom_cob;
      END IF;
      --
      OPEN ci_nom_cob (p_cod_cob);
      FETCH ci_nom_cob INTO l_nom_cob;
      CLOSE ci_nom_cob;
      --
      g_err_msg.EXTEND(1); -- 4.99
      g_err_msg(g_err_msg.LAST) := em_k_gen_ws.f_trata_msg (p_cod_campo   => 'COBS_RESTRITIVAS', -- 4.99
                                                                                            p_cod_erro    => 12109040,
                                                                                            p_txt_msg     =>    ';' || l_num_item_cotacao
                                                                                                             || ';' || l_num_serie
                                                                                                             || ';' || l_txt_sub_modelo
                                                                                                             || ';' || l_nom_cob);
      --
    END pi_cobs_excluidas;
    --
  BEGIN
    --
    mx('I', 'p_valida_clave_gen_clave');
    --
    FOR i IN g_cob_dados.FIRST .. g_cob_dados.LAST LOOP
      --
      mx('-','------------------------------------'); -- 2.98 l_num_serie
      --
      mx('id_seq'                      ,g_cob_dados(i).id_seq                     );
      mx('num_cotizacion'              ,g_cob_dados(i).num_cotizacion             );
      mx('num_simulacion'              ,g_cob_dados(i).num_simulacion             );
      mx('cod_pacote'                  ,g_cob_dados(i).cod_pacote                 );
      mx('cod_cob'                     ,g_cob_dados(i).cod_cob                    );
      mx('tip_cob'                     ,g_cob_dados(i).tip_cob                    );
      mx('mca_seleccion_cob'           ,g_cob_dados(i).mca_seleccion_cob          );
      mx('mca_val_defecto_indenizacao' ,g_cob_dados(i).mca_val_defecto_indenizacao);
      mx('mca_seleccion_atributo'      ,g_cob_dados(i).mca_seleccion_atributo     );
      mx('tip_dados_cob'               ,g_cob_dados(i).tip_dados_cob              );
      mx('cod_campo'                   ,g_cob_dados(i).cod_campo                  );
      mx('val_campo'                   ,g_cob_dados(i).val_campo                  );
      mx('txt_campo'                   ,g_cob_dados(i).txt_campo                  );
      mx('val_premio_casco'            ,g_cob_dados(i).val_premio_casco           );
      --
      mx('-','------------------------------------'); -- 2.98 l_num_serie
      --
      IF g_cob_dados(i).cod_cob = 1 OR
         g_cob_dados(i).cod_cob = 2 OR
         g_cob_dados(i).cod_cob = 3
      THEN
        --
        l_cod_cob_de_para := 201;
        --
      ELSE
        --
        l_cod_cob_de_para := g_cob_dados(i).cod_cob;
        --
      END IF;
      --
      -- llama funcion 1 y 2 g2109040_vcr y g2109041_vcr
      IF (g_cob_dados(i).mca_seleccion_cob = 'S' -- cob marcada para contratar
          --
          AND
          -- valida se val_clave_formula especifico permite contratacao (MCA_CONTRATA)
          fi_valida_cob_g2109040_vcr (pi_cod_cia           => TRN_K_GLOBAL.ref_f_global('COD_CIA' ),
                                      pi_cod_ramo          => TRN_K_GLOBAL.ref_f_global('COD_RAMO'),
                                      pi_cod_modalidad     => 23111,
                                      pi_val_clave_formula => fi_val_clave_formula_coti (pi_cod_cia        => TRN_K_GLOBAL.ref_f_global('COD_CIA' ) ,
                                                                                         pi_cod_ramo       => TRN_K_GLOBAL.ref_f_global('COD_RAMO'),
                                                                                         pi_num_cotizacion => g_cob_dados(i).num_cotizacion ),
                                      pi_cod_cob           => l_cod_cob_de_para) = FALSE
          --
          AND
          -- valida se val_clave_formula especifico permite contratacao (MCA_CONTRATA_COB)
          fi_valida_cob_g2109041_vcr (pi_cod_cia           => TRN_K_GLOBAL.ref_f_global('COD_CIA' ),
                                      pi_cod_ramo          => TRN_K_GLOBAL.ref_f_global('COD_RAMO'),
                                      pi_cod_modalidad     => 23111,
                                      pi_val_clave_formula => fi_val_clave_formula_coti (pi_cod_cia        => TRN_K_GLOBAL.ref_f_global('COD_CIA' ) ,
                                                                                         pi_cod_ramo       => TRN_K_GLOBAL.ref_f_global('COD_RAMO'),
                                                                                         pi_num_cotizacion => g_cob_dados(i).num_cotizacion ),
                                      pi_cod_cob           => l_cod_cob_de_para) = FALSE)
      THEN
        -- descontratar y crear mensaje
        pi_cobs_excluidas (p_num_coti_riesgo => g_cob_dados(i).num_cotizacion,
                           p_cod_cob         => l_cod_cob_de_para);--g_cob_dados(i).cod_cob);
        --
        /*em_k_gen_ws.g_err_msg.EXTEND(1);
        em_k_gen_ws.g_err_msg(em_k_gen_ws.g_err_msg.LAST) := em_k_gen_ws.f_trata_msg (p_cod_campo   => 'COBS_RESTRITIVAS',
                                                                                      p_cod_erro    => 12109040,
                                                                                      p_txt_msg     =>    ';' || l_num_item_cotacao
                                                                                                       || ';' || l_num_serie
                                                                                                       || ';' || l_txt_sub_modelo
                                                                                                       || ';' || g_cob_dados(i).cod_cob); -- tem que tirar
                                                                                                       */
        --
        pi_descontrata_cob (p_cod_cob => g_cob_dados(i).cod_cob);
        --
      END IF;
      --
    END LOOP;
    --
    mx('F', 'p_valida_clave_gen_clave');
    --
  END p_valida_clave_gen_clave;
  --
  /* ------------------------------------------------------
  || mbaruch teste rf 11 e 12
  */ ------------------------------------------------------
  --
  PROCEDURE p_lista_type_cobs
  IS
    --
    l_cod_cob_de_para       g2109040_vcr.cod_cob   %TYPE;
    --
    l_num_coti_riesgo       c2000000.num_cotizacion%TYPE;
    l_num_serie             c2000000.val_columna   %TYPE;
    l_txt_sub_modelo        c2000000.val_columna   %TYPE;
    l_num_item_cotacao      c2000000.val_columna   %TYPE;
    l_nom_cob               a1002050.nom_cob       %TYPE;
    --
  BEGIN
    --
    mx('I', 'p_lista_type_cobs');
    --
    FOR i IN g_cob_dados.FIRST .. g_cob_dados.LAST LOOP
      --
      IF g_cob_dados(i).mca_seleccion_cob = 'S' THEN
      mx('-','------------------------------------'); -- 2.98 l_num_serie
      --
      mx('id_seq'                      ,g_cob_dados(i).id_seq                     );
      mx('num_cotizacion'              ,g_cob_dados(i).num_cotizacion             );
      mx('num_simulacion'              ,g_cob_dados(i).num_simulacion             );
      mx('cod_pacote'                  ,g_cob_dados(i).cod_pacote                 );
      mx('cod_cob'                     ,g_cob_dados(i).cod_cob                    );
      mx('tip_cob'                     ,g_cob_dados(i).tip_cob                    );
      mx('mca_seleccion_cob'           ,g_cob_dados(i).mca_seleccion_cob          );
      mx('mca_val_defecto_indenizacao' ,g_cob_dados(i).mca_val_defecto_indenizacao);
      mx('mca_seleccion_atributo'      ,g_cob_dados(i).mca_seleccion_atributo     );
      mx('tip_dados_cob'               ,g_cob_dados(i).tip_dados_cob              );
      mx('cod_campo'                   ,g_cob_dados(i).cod_campo                  );
      mx('val_campo'                   ,g_cob_dados(i).val_campo                  );
      mx('txt_campo'                   ,g_cob_dados(i).txt_campo                  );
      mx('val_premio_casco'            ,g_cob_dados(i).val_premio_casco           );
      --
      mx('-','------------------------------------'); -- 2.98 l_num_serie
      END IF;
      END LOOP;
    --
    mx('F', 'p_lista_type_cobs');
    --
  END p_lista_type_cobs;
  -- RECALCULO
   /* ------------------------------------------------------
   || Processa geracao de numero de cotacao
   */ ------------------------------------------------------
   --
   PROCEDURE p_inicializar_cotacao(p_cod_cia        IN  G9999992.cod_cia%TYPE,
                                   p_cod_ramo       IN  G9999992.cod_ramo%TYPE,
                                   p_cod_tarifa     IN  G9999992.cod_tarifa%TYPE,
                                   p_cod_agt        IN  G9999992.cod_agt%TYPE,
                                   p_num_cotizacion IN  C2009030_vcr.num_cotizacion%TYPE,
                                   p_num_paso       IN  G9999992.num_paso%TYPE)
   IS
      --
      l_cod_usr         a2000030.cod_usr%TYPE;
      l_num_cotizacion  C2009030_vcr.num_cotizacion %TYPE;
      --
   BEGIN
      --
      mx('I', 'p_inicializar_cotacao');
      --
      --trn_k_global.borra_todas;
      --
      trn_k_global.asigna('COD_CIA', p_cod_cia);
      trn_k_global.asigna('COD_RAMO', p_cod_ramo);
      trn_k_global.asigna('COD_TARIFA', p_cod_tarifa);
      trn_k_global.asigna('COD_AGT', p_cod_agt);
      trn_k_global.asigna('NUM_PASO', p_num_paso);
      trn_k_global.asigna('COD_IDIOMA', g_k_cod_idioma);
      --
      IF p_num_cotizacion IS NOT NULL THEN
         --
         l_num_cotizacion := p_num_cotizacion;
         --
         trn_k_global.asigna('NUM_COTIZACION', l_num_cotizacion);
         --
         pp_asigna_globales_defecto;
         --I 2.50
         IF p_num_paso <> 16 THEN
            --
            pp_resgata_modalidad;
            --
         END if;
         --F 2.50
      --
      ELSE
         --
         pp_asigna_globales_defecto;
         --
         l_cod_usr        := trn_k_global.cod_usr;
         --
         l_num_cotizacion := ea_k_231_coti.f_num_cotizacion(p_cod_cia, p_cod_ramo, l_cod_usr);
         --
         trn_k_global.asigna('NUM_COTIZACION', l_num_cotizacion);
         --
         pp_inserta_datos_agt_coti;
         --
         pp_inserta_c2000000_defecto(trn_k_global.ref_f_global('NUM_COTIZACION'), 'A1001331', 'COD_PAIS'                   , 'COD_PAIS_BRA', NULL   );
         pp_inserta_c2000000_defecto(trn_k_global.ref_f_global('NUM_COTIZACION'), 'A1001331', 'COD_PAIS_RESP'              , 'COD_PAIS_BRA', NULL   );
         pp_inserta_c2000000_defecto(trn_k_global.ref_f_global('NUM_COTIZACION'), 'A1001331', 'COD_PAIS_TOMADOR'           , 'COD_PAIS_BRA', NULL   );
         pp_inserta_c2000000_defecto(trn_k_global.ref_f_global('NUM_COTIZACION'), 'A1001331', 'COD_PAIS_CONDUCTOR'         , 'COD_PAIS_BRA', NULL   );
         pp_inserta_c2000000_defecto(trn_k_global.ref_f_global('NUM_COTIZACION'), 'A1001331', 'COD_PAIS_BENEF'             , 'COD_PAIS_BRA', NULL   );
         pp_inserta_c2000000_defecto(trn_k_global.ref_f_global('NUM_COTIZACION'), 'A1001331', 'TIP_NACIONALIDAD'           , NULL          , trn.UNO);
         pp_inserta_c2000000_defecto(trn_k_global.ref_f_global('NUM_COTIZACION'), 'A1001331', 'TIP_NACIONALIDAD_RESP'      , NULL          , trn.UNO);
         pp_inserta_c2000000_defecto(trn_k_global.ref_f_global('NUM_COTIZACION'), 'A1001331', 'TIP_NACIONALIDAD_CONDUCTOR' , NULL          , trn.UNO);
         pp_inserta_c2000000_defecto(trn_k_global.ref_f_global('NUM_COTIZACION'), 'A1001331', 'TIP_NACIONALIDAD_BENEF'     , NULL          , trn.UNO);
         pp_inserta_c2000000_defecto(trn_k_global.ref_f_global('NUM_COTIZACION'), 'A1001331', 'COD_NACIONALIDAD'           , 'COD_PAIS_BRA', NULL   );
         pp_inserta_c2000000_defecto(trn_k_global.ref_f_global('NUM_COTIZACION'), 'A1001331', 'COD_NACIONALIDAD_RESP'      , 'COD_PAIS_BRA', NULL   );
         pp_inserta_c2000000_defecto(trn_k_global.ref_f_global('NUM_COTIZACION'), 'A1001331', 'COD_NACIONALIDAD_CONDUCTOR' , 'COD_PAIS_BRA', NULL   );
         pp_inserta_c2000000_defecto(trn_k_global.ref_f_global('NUM_COTIZACION'), 'A1001331', 'COD_NACIONALIDAD_BENEF'     , 'COD_PAIS_BRA', NULL   );
         --
      END IF;
      --
      mx('F', 'p_inicializar_cotacao');
      --
   EXCEPTION
      WHEN OTHERS THEN
         --
         g_cod_mensaje    := g_k_cod_error_gen;
         g_anx_mensaje    := SQLERRM;
         --
         mx('F', 'p_inicializar_cotacao - EXCEPTION');
         --
         pp_devuelve_error;
         --

   END p_inicializar_cotacao;
   --
  /* ----------------------------------------------------------
   || Processa dados de cartao de credito
   */ ----------------------------------------------------------
   --
  PROCEDURE p_processa_cartao_credito IS
    --
    l_nom_cartao          c2000000.val_columna%TYPE;
    l_num_cartao_credito  c2000000.val_columna%TYPE;
    l_cod_bandeira_cartao c2000000.val_columna%TYPE;
    l_nom_bandeira_cartao c2000000.val_columna%TYPE;
    l_num_validade_cartao c2000000.val_columna%TYPE;
    l_msg_cartao             TYPREG_MSG_WS;
    --
  BEGIN
    --
    mx('I', 'p_processa_cartao_credito');
    --
    pp_retorna_valor_cast(p_cod_campo => 'NOM_CARTAO',
                          p_val_campo => l_nom_cartao);
    --
    mx('NOM_CARTAO', l_nom_cartao);
    --
    pp_retorna_valor_cast(p_cod_campo => 'NUM_CARTAO_CREDITO',
                          p_val_campo => l_num_cartao_credito);
    --
    mx('NUM_CARTAO_CREDITO', l_num_cartao_credito);
    --
    pp_retorna_valor_cast(p_cod_campo => 'COD_BANDEIRA_CARTAO',
                          p_val_campo => l_cod_bandeira_cartao);
    --
    mx('COD_BANDEIRA_CARTAO', l_cod_bandeira_cartao);
    --
    pp_retorna_valor_cast(p_cod_campo => 'NOM_BANDEIRA_CARTAO',
                          p_val_campo => l_nom_bandeira_cartao);
    --
    mx('NOM_BANDEIRA_CARTAO', l_nom_bandeira_cartao);
    --
    pp_retorna_valor_cast(p_cod_campo => 'NUM_VALIDADE_CARTAO',
                          p_val_campo => l_num_validade_cartao);

    --
    mx('NUM_VALIDADE_CARTAO', l_num_validade_cartao);
    --
    trn_k_global.asigna(p_variable => em_k_cielo.g_k_campo_namNomeImpresso
                       ,p_valor    => TRANSLATE (l_nom_cartao,
                                                 '????YYCEYOUAEIOUAEIOU??EUYO?Y?aceiouaeiouaeiou??euio?yy',
                                                'SZszYACEIOUAEIOUAEIOUAOEUIONYaaceiouaeiouaeiouaoeuionyy')); -- 4.84
      --
    trn_k_global.asigna(p_variable => em_k_cielo.g_k_campo_codCartao
                       ,p_valor    => l_num_cartao_credito);
      --
    trn_k_global.asigna(p_variable => em_k_cielo.g_k_campo_namBandeira
                       ,p_valor    => l_nom_bandeira_cartao);
      --
    trn_k_global.asigna(p_variable => em_k_cielo.g_k_campo_codBandeira
                       ,p_valor    => l_cod_bandeira_cartao);
       --
    trn_k_global.asigna(p_variable => em_k_cielo.g_k_campo_datValidade
                       ,p_valor    => l_num_validade_cartao);
       --
    --
    mx('F', 'p_processa_cartao_credito');
    --
  EXCEPTION
    WHEN OTHERS THEN
      --
      mx('E', 'p_processa_cartao_credito');
      --
       l_msg_cartao := fp_trata_msg('CARTAO_CREDITO'
                            ,NULL
                            ,g_k_pre_msg_erro || '22019' || g_k_sep_cod_msg);
                          --  ,l_codStatus                ||
                         --   l_num_msg_cartao);-- em_k_a2992130.f_cod_recusa_flex ||
                           --  g_k_sep_cod_msg                 ||
                           --  em_k_a2992130.f_desc_recusa);
       --
       l_msg_cartao.tip_mensagem := 'ERRO';
       --
       g_err_msg.EXTEND(1); -- 4.99
       --
       g_err_msg(g_err_msg.LAST) := l_msg_cartao; -- 4.99
      --
  END p_processa_cartao_credito;

  -- v. 4.94 inicio
  /* ----------------------------------------------------------
   || Processa dados de cartao de credito bb
   */ ----------------------------------------------------------
   --
  PROCEDURE p_processa_cartao_credito_bb IS
    --
    l_nom_cartao          c2000000.val_columna%TYPE;
    l_num_cartao_credito  c2000000.val_columna%TYPE;
    l_nom_bandeira_cartao c2000000.val_columna%TYPE;
    l_num_validade_cartao c2000000.val_columna%TYPE;
    l_msg_cartao             TYPREG_MSG_WS;
    --
  BEGIN
    --
    mx('I', 'p_processa_cartao_credito_bb');
    --
    pp_retorna_valor_cast(p_cod_campo => 'NOM_CARTAO',
                          p_val_campo => l_nom_cartao);
    --
    mx('NOM_CARTAO', l_nom_cartao);
    --
    pp_retorna_valor_cast(p_cod_campo => 'NUM_CARTAO_CREDITO',
                          p_val_campo => l_num_cartao_credito);
    --
    mx('NUM_CARTAO_CREDITO', l_num_cartao_credito);
    --
    pp_retorna_valor_cast(p_cod_campo => 'NOM_BANDEIRA_CARTAO',
                          p_val_campo => l_nom_bandeira_cartao);
    --
    mx('NOM_BANDEIRA_CARTAO', l_nom_bandeira_cartao);
    --
    pp_retorna_valor_cast(p_cod_campo => 'NUM_VALIDADE_CARTAO',
                          p_val_campo => l_num_validade_cartao);

    --
    mx('NUM_VALIDADE_CARTAO', l_num_validade_cartao);
    --
    trn_k_global.asigna(p_variable => ea_k_ws_duplo_sim_vcr.g_k_campo_namNomeImpresso
                       ,p_valor    => TRANSLATE (l_nom_cartao,
                                                 '????YYCEYOUAEIOUAEIOU??EUYO?Y?aceiouaeiouaeiou??euio?yy',
                                                 'SZszYACEIOUAEIOUAEIOUAOEUIONYaaceiouaeiouaeiouaoeuionyy')); -- 4.84
    --
    trn_k_global.asigna(p_variable => ea_k_ws_duplo_sim_vcr.g_k_campo_codCartao
                       ,p_valor    => l_num_cartao_credito);
    --
    trn_k_global.asigna(p_variable => ea_k_ws_duplo_sim_vcr.g_k_campo_namBandeira
                       ,p_valor    => l_nom_bandeira_cartao);
    --
    trn_k_global.asigna(p_variable => ea_k_ws_duplo_sim_vcr.g_k_campo_datValidade
                       ,p_valor    => l_num_validade_cartao);
    --
    mx('F', 'p_processa_cartao_credito');
    --
  EXCEPTION
    WHEN OTHERS THEN
      --
      mx('E', 'p_processa_cartao_credito_bb');
      --
      raise_application_error(-20001, 'Erro ao recuperar dados do cart' || chr(227) || 'o.');
      --
  END p_processa_cartao_credito_bb;
  -- v. 4.94 fim
   --
   /* ------------------------------------------------------
   || Processa dados de pagamento
   */ ------------------------------------------------------
   --
   PROCEDURE p_processa_dados_pagto
   IS
      --
      l_cursor_dados_grav ref_cursor;
      l_rec_dados_grav    rec_dados_grav;
      --
      l_mca_coti_simulador  VARCHAR2(1);
      l_mca_coti_comround   VARCHAR2(1);
      --
      l_tip_mvto_batch    G9999992.tip_mvto_batch     %TYPE;
      l_num_propuesta     A2000560.num_propuesta      %TYPE;
      l_num_paso          G9999992.num_paso           %TYPE;
      l_msg_erro          VARCHAR2(2000);
      --
      l_cod_cia             G9999992.cod_cia%TYPE;
      l_cod_ramo            G9999992.cod_ramo%TYPE;
      l_cod_tarifa          G9999992.cod_tarifa%TYPE;
      l_cod_agt             G9999992.cod_agt%TYPE;
      l_num_cotizacion      C2009030_vcr.num_cotizacion%TYPE;
      --

   BEGIN
      --
      mx('I', 'p_processa_dados_pagto');
      --
      l_mca_coti_simulador  := trn_k_global.devuelve('MCA_COTI_SIMULADOR');
      l_mca_coti_comround   := trn_k_global.devuelve('MCA_COTI_COMROUND');
      --
      IF l_mca_coti_simulador = trn.NO AND
         l_mca_coti_comround = trn.SI THEN
         --
         l_cod_cia             := trn_k_global.devuelve('COD_CIA');
         l_cod_ramo            := trn_k_global.devuelve('COD_RAMO');
         l_cod_tarifa          := trn_k_global.devuelve('COD_TARIFA');
         l_cod_agt             := trn_k_global.devuelve('COD_AGT');
         l_num_cotizacion      := trn_k_global.ref_f_global('NUM_COTIZACION');
         l_num_paso            := trn_k_global.devuelve('NUM_PASO');
         l_tip_mvto_batch      := trn_k_global.devuelve('TIP_MVTO_BATCH');
         l_num_propuesta       := trn_k_global.ref_f_global('NUM_PROPUESTA');
         l_mca_coti_simulador  := trn_k_global.devuelve('MCA_COTI_SIMULADOR');
         --
         g_cot_dados := TYPTAB_DADOS_COT();
         g_cot_reg   := TYPREG_DADOS_COT.autocreate;
         --
         OPEN l_cursor_dados_grav
          FOR
           SELECT NVL(G9999992.cod_campo_coti, G9999992.cod_campo) cod_campo,
                  a2000560.val_campo
             FROM G9999992
             LEFT OUTER JOIN a2000560 ON (G9999992.cod_cia = a2000560.cod_cia AND G9999992.cod_campo_coti = a2000560.cod_campo AND a2000560.num_propuesta = l_num_propuesta)
            WHERE G9999992.cod_cia        = l_cod_cia
              AND G9999992.cod_ramo       = l_cod_ramo
              AND G9999992.cod_tarifa     = l_cod_tarifa
              AND G9999992.cod_agt        = l_cod_agt
              AND G9999992.Num_Paso       = l_num_paso
              AND G9999992.tip_mvto_batch = l_tip_mvto_batch
              AND G9999992.mca_inh        = trn.NO
              --AND G9999992.nom_prg        IS NOT NULL
              AND G9999992.cod_tar        <> g_k_cod_tar_campo_saida
            ORDER BY G9999992.num_orden;
           --
           LOOP
              FETCH l_cursor_dados_grav
              INTO  l_rec_dados_grav;
              --
              EXIT WHEN l_cursor_dados_grav%NOTFOUND;
              --
            IF l_rec_dados_grav.val_campo IS NOT NULL THEN
               --
               g_cot_reg.cod_campo := l_rec_dados_grav.cod_campo;
               g_cot_reg.val_campo := l_rec_dados_grav.val_campo;
               --
               g_cot_dados.EXTEND(1);
               g_cot_dados(g_cot_dados.LAST) := g_cot_reg;
               --
               l_rec_dados_grav.cod_campo   := NULL;
               l_rec_dados_grav.val_campo   := NULL;
               --
            END IF;
            --
          END LOOP;
          --
      END IF;
      --
      mx('F', 'p_processa_dados_pagto');
      --
   EXCEPTION
      WHEN OTHERS THEN
         --
         g_cod_mensaje    := g_k_cod_error_gen;
         g_anx_mensaje    := SQLERRM;
         --
         mx('F', 'p_processa_dados_pagto - EXCEPTION');
         --
         pp_devuelve_error;
         --
   END p_processa_dados_pagto;
   --
   /* ----------------------------------------------------------
   || p_ws_processa_msg
   */ ----------------------------------------------------------
   --
   PROCEDURE p_ws_processa_msg(p_campo_error IN c2000020.cod_campo%TYPE,
                               p_cod_error   IN x2000221.cod_error%TYPE,
                               p_obs_error   IN x2000221.obs_error%TYPE)
   IS
     --
     l_msg                     TYPREG_MSG_WS;
     --
   BEGIN
     --
     mx('I', 'p_ws_processa_msg');
     --
     mx('p_cod_error  ', p_cod_error  );
     mx('p_obs_error  ', p_obs_error  );
     mx('p_campo_error', p_campo_error);
     mx('g_cod_cia    ', g_cod_cia    );
     --
     l_msg := fp_trata_msg(p_campo_error
                          ,NULL
                          ,g_k_pre_msg_erro                ||
                           p_cod_error                     ||
                           g_k_sep_cod_msg                 ||
                           p_obs_error);
     --
     g_err_msg.EXTEND(1); -- 4.99
     --
     g_err_msg(g_err_msg.LAST) := l_msg; -- 4.99
     --
     mx('F', 'p_ws_processa_msg');
     --
   END p_ws_processa_msg;
   --
   /* ----------------------------------------------------------
   || VALIDAR RETORNO DA CENTRAL DE BONUS
   */ ----------------------------------------------------------
   --
   PROCEDURE p_ws_processa_msg_ct (p_campo_error IN c2000020.cod_campo%TYPE,
                                   p_cod_error   IN x2000221.cod_error%TYPE,
                                   p_obs_error   IN x2000221.obs_error%TYPE)
   IS
     --
     l_msg                     TYPREG_MSG_WS;
     --
     --
   BEGIN
     --
     mx('I', 'p_ws_processa_msg_ct');
     --
     mx('p_cod_error  ', p_cod_error  );
     mx('p_obs_error  ', p_obs_error  );
     mx('p_campo_error', p_campo_error);
     mx('g_cod_cia    ', g_cod_cia    );
     --
     IF g_cod_cia IS NULL AND trn_k_global.ref_f_global('MCA_CONVIVENCIA') = trn.SI THEN -- v 3.98 RMOGOMES -- v3.48
        g_cod_cia := trn_k_global.devuelve('COD_CIA');
     END IF;
     --
     l_msg := fp_trata_msg(p_campo_error
                          ,NULL
                          ,g_k_pre_msg_erro                ||
                           p_cod_error                     ||
                           g_k_sep_cod_msg                 ||
                           p_obs_error);
     --
     BEGIN
       --
       dc_k_g2000210.p_lee(g_cod_cia, p_cod_error);
       --
       IF trn_k_df_cmn_nwt_xx_vrb_cnc.f_row_val_exist(p_vrb_nam => 'TIP_RECHAZO_INFO'
                                                     ,p_cnc_vrb_val => dc_k_g2000210.f_tip_rechazo)
       THEN
         --
         l_msg.tip_mensagem := 'INFO';
         --
       ELSE
         --
         l_msg.tip_mensagem := 'ERRO';
         --
       END IF;
       --
     EXCEPTION
       WHEN OTHERS THEN
         --
         l_msg.tip_mensagem := 'ERRO';
         --
     END;
     --
     g_err_msg.EXTEND(1); -- 4.99
     --
     g_err_msg(g_err_msg.LAST) := l_msg; -- 4.99
     --
     --
     mx('F', 'p_ws_processa_msg_ct');
     --
   END p_ws_processa_msg_ct;
   --
   /* ----------------------------------------------------------
   || VALIDAR RETORNO DA CENTRAL DE BONUS
   */ ----------------------------------------------------------
   --
   PROCEDURE p_ws_valida_scb_msg (p_cod_error IN x2000221.cod_error%TYPE,
                                  p_obs_error IN x2000221.obs_error%TYPE)
   IS
     --
     l_msg                     TYPREG_MSG_WS;
     --
     --
   BEGIN
     --
     mx('I', 'p_ws_valida_scb_msg');
     --
     mx('p_cod_error', p_cod_error);
     mx('p_obs_error', p_obs_error);
     mx('g_cod_cia  ', g_cod_cia);
     --
     p_ws_processa_msg_ct(p_campo_error => 'NUM_CI'
                         ,p_cod_error   => p_cod_error
                         ,p_obs_error   => p_obs_error);
     --
     mx('F', 'p_ws_valida_scb_msg');
     --
   EXCEPTION
     WHEN OTHERS THEN
       --
       mx('E', 'p_ws_valida_scb_msg');
       --
       mx('SQLERRM', SQLERRM);
       --
   END p_ws_valida_scb_msg;
   --
   /* ----------------------------------------------------------
   || REGISTRAR RETORNO DA CIELO
   */ ----------------------------------------------------------
   --
   PROCEDURE p_ws_registra_msg (p_cod_error IN  x2000221.cod_error%TYPE,
                                p_tip_error IN  VARCHAR2,
                                p_obs_error OUT x2000221.obs_error%TYPE)
   IS
     --
     l_msg                     TYPREG_MSG_WS;
     --
     --
   BEGIN
     --
     mx('I', 'p_ws_registra_msg');
     --
     mx('p_cod_error', p_cod_error);
     mx('p_tip_error', p_tip_error);
     --
     l_msg := fp_trata_msg('COD_TID_CARTAO'
                          ,NULL
                          ,g_k_pre_msg_erro                ||
                           p_cod_error                     ||
                           g_k_sep_cod_msg                 ||
                           p_obs_error);
     --

     l_msg.tip_mensagem := p_tip_error;
     --
     g_err_msg.EXTEND(1); -- 4.99
     --
     g_err_msg(g_err_msg.LAST) := l_msg; -- 4.99
     --
     p_obs_error := l_msg.des_mensagem;
     --
     mx('p_obs_error', p_obs_error);
     --
     mx('F', 'p_ws_registra_msg');
     --
   EXCEPTION
     WHEN OTHERS THEN
       --
       mx('E', 'p_ws_registra_msg');
       --
       mx('SQLERRM', SQLERRM);
       --
   END p_ws_registra_msg;
   --
   /* ----------------------------------------------------------
   || Gravar tid_cartao_credito
   */ ----------------------------------------------------------
   --
   PROCEDURE p_grava_tid_cartao
   IS
     --
     l_cod_cia                 c2000000.val_columna%TYPE;
     l_num_cotizacion          c2000000.val_columna%TYPE;
     l_cod_ramo                c2000000.val_columna%TYPE;
     --
   BEGIN
     --
     mx('I', 'p_grava_tid_cartao');
     --

      l_cod_cia         := trn_k_global.devuelve('COD_CIA');
      l_cod_ramo        := trn_k_global.devuelve('COD_RAMO');
      l_num_cotizacion  := trn_k_global.ref_f_global('NUM_COTIZACION');


         em_k_cielo.p_insere_cod_docum_pago(p_codCia     => l_cod_cia,
                                            p_codRamo    => l_cod_ramo,
                                            p_numCotacao => l_num_cotizacion);

     mx('F', 'p_grava_tid_cartao');
     --
   EXCEPTION
     WHEN OTHERS THEN
       --
       mx('E', 'p_grava_tid_cartao');
       --
       NULL;
       --
   END p_grava_tid_cartao;
   --
   /* ----------------------------------------------------------
   || Gravar tid_cartao_credito_a
   */ ----------------------------------------------------------
   --
   PROCEDURE p_grava_tid_cartao_a
   IS
     --
     l_cod_cia                 c2000000.val_columna%TYPE;
     l_num_cotizacion          c2000000.val_columna%TYPE;
     l_cod_ramo                c2000000.val_columna%TYPE;
     --
   BEGIN
     --
     mx('I', 'p_grava_tid_cartao_a');
     --

      l_cod_cia         := trn_k_global.devuelve('COD_CIA');
      l_cod_ramo        := trn_k_global.devuelve('COD_RAMO');
      l_num_cotizacion  := trn_k_global.ref_f_global('NUM_COTIZACION');


         em_k_cielo.p_insere_cod_docum_pago_a(p_codCia     => l_cod_cia,
                                              p_codRamo    => l_cod_ramo,
                                              p_numCotacao => l_num_cotizacion);

     mx('F', 'p_grava_tid_cartao_a');
     --
   EXCEPTION
     WHEN OTHERS THEN
       --
       mx('E', 'p_grava_tid_cartao_a');
       --
       NULL;
       --
   END p_grava_tid_cartao_a;
   --
  /* ------------------------------------------------------
  || BLL - Tratamento de caracteres especiais
  || Trata os caracteres especiais do endereco
  */ ------------------------------------------------------
  --
  FUNCTION fp_trata_caractere_especial(p_cod_campo  g9999992.cod_campo %TYPE,
                                       p_val_campo a2000020.val_campo%TYPE)
    RETURN a2000020.val_campo%TYPE IS
    --
    l_val_campo VARCHAR2(2000) := trn.NULO;
    --
  BEGIN
    --
    mx('I', 'fp_trata_caractere_especial');
    --
    l_val_campo := UPPER(p_val_campo);
    --
    IF p_cod_campo LIKE 'NOM_DOMICILIO1%' OR p_cod_campo LIKE 'NOM_LOCALIDAD%'
    THEN
        --
        l_val_campo := REGEXP_REPLACE(l_val_campo,'[^0-9A-Za-z ]');
        --
    END IF;
  --
    -- I v 2.97
    IF p_cod_campo LIKE 'NUM_POLIZA_RENOV%' THEN
      --
      l_val_campo := REGEXP_REPLACE(l_val_campo, '[^0-9]');
      --
    END IF;
    -- F v 2.97
  --
    mx('F', 'fp_trata_caractere_especial');
    --
    RETURN l_val_campo;
    --
  EXCEPTION
    WHEN OTHERS THEN
      --
      l_val_campo := p_val_campo;
      --
      mx('l_val_campo', l_val_campo);
      --
      mx('F', 'EXCEPTION - fp_trata_caractere_especial');
      --
      RETURN l_val_campo;
      --
  END fp_trata_caractere_especial;
  --
   /* ------------------------------------------------------
   || Processa gravacao/validacao de dados de cotacao
   */ ------------------------------------------------------
   --
   PROCEDURE p_grava_dados
   IS
      --
      l_cursor_dados_grav ref_cursor;
      l_rec_dados_grav    rec_dados_grav;
      --
      l_cod_cia           G9999992.cod_cia            %TYPE;
      l_cod_ramo          G9999992.cod_ramo           %TYPE;
      l_cod_tarifa        G9999992.cod_tarifa         %TYPE;
      l_cod_agt           G9999992.cod_agt            %TYPE := trn.NULO;
      l_num_cotizacion    C2009030_vcr.num_cotizacion %TYPE;
      l_num_paso          G9999992.num_paso           %TYPE;
      l_tip_mvto_batch    G9999992.tip_mvto_batch     %TYPE;
      l_num_propuesta     A2000560.num_propuesta      %TYPE;
      l_reg_a2000560      A2000560                 %ROWTYPE;
      l_cod_cartao        VARCHAR2(16);
      l_msg_erro          VARCHAR2(2000);
      -- { jwolff
      l_cod_servicio         g9999991.cod_servicio        %TYPE;
      l_num_coti_grupo       c2009030_vcr.num_poliza_grupo%TYPE;
      -- } jwolff
      --
      -- { jjesus
      l_cod_docum_ant        a2000560.val_campo           %TYPE;
      l_cod_docum            a2000560.val_campo           %TYPE;
      l_val_campo            a2000560.val_campo           %TYPE;
      l_cod_campo            a2000560.cod_campo           %TYPE; -- 4.16
      l_cod_campo_coti       g9999992.cod_campo_coti      %TYPE := NULL;
      l_val_sufijo           g2000550.nom_tabla_tarea     %TYPE;
      l_tip_benef                                     NUMBER(3) := 0;
      l_nom_segurado         v1001390.nom_completo        %TYPE;
      -- } jjesus
      l_eh_3_pacotes       BOOLEAN ; --2.14
      l_tip_produto     g2109142_vcr.tip_produto       %TYPE ; --2.17
      --
      -- { jjesus - 2.08
      l_qtde_agt         NUMBER := trn.CERO;
      --
      l_cod_marca_ref a2009018_vcr.cod_fipe %TYPE; -- v4.42 - IM03338890
      --
      --inicio v 4.44
      l_val_columna c2000000.val_columna%TYPE;-- v 4.44
      l_val_poliza_renov c2000000.val_columna%TYPE;-- v 4.44
      l_cod_ramo_origen c2000000.val_columna%TYPE;-- v 4.44
      l_tempo_de_casa number;
      --fim v 4.44
      --
      l_num_idade_veic a2000560.val_campo%TYPE; -- 4.53
      --
      l_val_canal_bb   c2000000.val_columna%type; -- 4.72
      --
      --I. 5.17 Correcao ORA 2000
      l_anx_mensaje       VARCHAR2(350);
      --F. 5.17 Correcao ORA 2000
      CURSOR c_g9999992 (pc_cod_cia        g9999992.cod_cia        %TYPE,
                         pc_cod_ramo       g9999992.cod_ramo       %TYPE,
                         pc_cod_tarifa     g9999992.cod_tarifa     %TYPE,
                         pc_cod_agt        g9999992.cod_agt        %TYPE,
                         pc_tip_mvto_batch g9999992.tip_mvto_batch %TYPE)
       IS
       SELECT COUNT(1)
         FROM g9999992
        WHERE cod_cia        = pc_cod_cia
          AND cod_ramo       = pc_cod_ramo
          AND cod_tarifa     = pc_cod_tarifa
          AND cod_agt        = pc_cod_agt
          AND tip_mvto_batch = pc_tip_mvto_batch
          AND mca_inh        = trn.NO;
      --
      -- } jjesus - 2.08
      --
      -- 2.90 Inicio: atualizacao de valores de veiculo se estiver recalculando
      PROCEDURE pi_ajusta_valor_vehiculo
      IS
        l_fec_validez_tarifa   c2000000.val_columna        %TYPE;
        l_anio_sub_modelo      c2000000.val_columna        %TYPE;
        l_pct_ajuste_tab_ref   c2000000.val_columna        %TYPE;
        l_val_sub_modelo       c2000000.val_columna        %TYPE;
        l_val_referencia       c2000000.val_columna        %TYPE;
        li_tip_mvto_batch      c2000000.val_columna        %TYPE;
        --
      BEGIN
        mx('I', 'pi_ajusta_valor_vehiculo');
        --
        li_tip_mvto_batch  := trn_k_global.devuelve('TIP_MVTO_BATCH');
        --
        IF li_tip_mvto_batch = g_k_tip_mvto_batch_cotacao
        THEN
           --
        ea_k_231_utils.p_devuelve_dato_cotizacion(p_nom_tabla   => ea_k_231_utils.g_k_tabla_dv,
                                                  p_nom_columna => 'PCT_AJUSTE_TAB_REF'              ,
                                                  p_val_campo   => l_pct_ajuste_tab_ref);
        --
        ELSE
           --
            ea_k_231_utils.p_devuelve_dato_spto(p_cod_campo => 'PCT_AJUSTE_TAB_REF',
                                                p_val_campo => l_pct_ajuste_tab_ref);
           --
        END IF;
        --
        -- neste momento, fec_validez_tarifa ja foi atualizada
        ea_k_231_utils.p_devuelve_dato_cotizacion(p_nom_tabla   => ea_k_231_utils.g_k_tabla_dv,
                                                  p_nom_columna => 'FEC_VALIDEZ_TARIFA'              ,
                                                  p_val_campo   => l_fec_validez_tarifa);
        --
        mx('l_fec_validez_tarifa', l_fec_validez_tarifa);
        --
        IF NVL(ea_k_231_utils.f_valor_dv('MCA_ZERO_KM'), trn.NO) = trn.SI
        THEN
           l_anio_sub_modelo := TO_CHAR(trn.CERO);
        ELSE
           l_anio_sub_modelo := ea_k_231_utils.f_valor_dv('ANIO_SUB_MODELO');
        END IF;
        --
        l_val_referencia := ea_k_a2100430.val_sub_modelo(l_cod_cia                                  ,
                                                         ea_k_231_utils.f_valor_dv('COD_MARCA')     ,
                                                         ea_k_231_utils.f_valor_dv('COD_MODELO')    ,
                                                         ea_k_231_utils.f_valor_dv('COD_SUB_MODELO'),
                                                         l_anio_sub_modelo                          ,
                                                         to_date(l_fec_validez_tarifa, trn.FORMATO_FECHA));
        --
        ea_k_231_dv.p_calcular_valor_ajustado (p_val_sub_modelo     => l_val_referencia,
                                               p_pct_ajuste_tab_ref => l_pct_ajuste_tab_ref,
                                               p_out_val_sub_modelo => l_val_sub_modelo);
        --
        -- atualizar os valores de veiculos
        --
        IF li_tip_mvto_batch = g_k_tip_mvto_batch_cotacao
        THEN
           --
        pp_inserta_c2000000(p_nom_tabla   => 'A1000000',
                            p_nom_columna => 'VAL_REFERENCIA',
                            p_val_columna =>  l_val_referencia);
        --I 5.48
        pp_inserta_c2000000(p_nom_tabla   => 'A2000020',
                            p_nom_columna => 'VAL_REFERENCIA',
                            p_val_columna =>  l_val_referencia);

        --F 5.48
        pp_inserta_c2000000(p_nom_tabla   => 'A2000020',
                            p_nom_columna => 'VAL_SUB_MODELO',
                            p_val_columna =>  l_val_sub_modelo);

        --
        pp_inserta_c2000000(p_nom_tabla   => 'A2000020',
                            p_nom_columna => 'VAL_SUB_MODELO_REFERENCIA',
                            p_val_columna =>  l_val_referencia);
        --
        ELSE
           --
           l_reg_a2000560.cod_cia       := g_cod_cia;
           l_reg_a2000560.num_propuesta := g_num_poliza;
           l_reg_a2000560.cod_campo     := 'VAL_SUB_MODELO';
           l_reg_a2000560.val_campo     := l_val_sub_modelo;
           --
           pp_inserta_a2000560(l_reg_a2000560);
           --
        END IF;
        mx('F', 'pi_ajusta_valor_vehiculo');
        --
      END pi_ajusta_valor_vehiculo;
      -- 2.90 Final
      --
      -- {  4.40
      PROCEDURE pi_ajusta_pref_corretor IS
        --
        l_rec_a1009215 a1009215_vcr%ROWTYPE;
        --
      BEGIN
        --
        mx('I', 'pi_ajusta_pref_corretor');
        --
        BEGIN
        --
        ea_k_A1009215_VCR.p_lee_vigente(l_cod_cia,
                                        l_cod_ramo,
                                        trn_k_global.devuelve('COD_AGT'),
                                        l_cod_tarifa,
                                        dc.COD_NIVEL1_GEN,
                                        dc.COD_NIVEL2_GEN,
                                        dc.COD_NIVEL3_GEN,
                                        dc.COD_CANAL1_GEN,
                                        dc.COD_CANAL2_GEN,
                                        dc.COD_CANAL3_GEN,
                                        em.NUM_POLIZA_GRUPO_GEN,
                                        em.NUM_CONTRATO_GEN,
                                        em.NUM_SUBCONTRATO_GEN,
                                        em.NUM_POLIZA_GEN,
                                        em.NUM_POLIZA_GEN,
                                        em.COD_MODALIDAD_GEN,
                                        99,
                                        99999,
                                        TRUNC(SYSDATE)
                                        );
        --
        l_rec_a1009215 := ea_k_A1009215_VCR.f_devuelve_reg;
        --
        pp_inserta_c2000000(p_nom_tabla   => 'A2000020',
                            p_nom_columna => 'PCT_AGT_NPR',
                            p_val_columna => l_rec_a1009215.pct_agt_npr);
        --
        pp_inserta_c2000000(p_nom_tabla   => 'A2000020',
                            p_nom_columna => 'COD_FRACC_PAGO',
                            p_val_columna => l_rec_a1009215.cod_plan_pago);
        --
        pp_inserta_c2000000(p_nom_tabla   => 'A2000020',
                            p_nom_columna => 'COD_FORMA_PAGO',
                            p_val_columna => l_rec_a1009215.cod_forma_pago);
        --
      EXCEPTION
        WHEN others THEN
        NULL;
      END ;
      --
      mx('F', 'pi_ajusta_pref_corretor');
      --
    END pi_ajusta_pref_corretor;
    -- }  4.40
   BEGIN
      --
      mx('I', 'p_grava_dados');
      --
      l_cod_cia         := trn_k_global.devuelve('COD_CIA');
      l_cod_ramo        := trn_k_global.devuelve('COD_RAMO');
      l_cod_tarifa      := trn_k_global.devuelve('COD_TARIFA');
      l_cod_agt         := trn_k_global.devuelve('COD_AGT');
      l_num_paso        := trn_k_global.devuelve('NUM_PASO');
      l_tip_mvto_batch  := trn_k_global.devuelve('TIP_MVTO_BATCH');
      l_num_cotizacion  := trn_k_global.ref_f_global('NUM_COTIZACION');
      l_num_propuesta   := trn_k_global.ref_f_global('NUM_PROPUESTA');
      -- { jwolff
      l_cod_servicio          := trn_k_global.ref_f_global('COD_SERVICIO');
      l_num_coti_grupo        := trn_k_global.ref_f_global('NUM_COTIZACION_GRUPO');
      -- } jwolff
      --
      -- { jjesus - 2.08
      IF c_g9999992%ISOPEN
      THEN
        --
        CLOSE c_g9999992;
        --
      END IF;
      --
      OPEN c_g9999992 (l_cod_cia, l_cod_ramo, l_cod_tarifa, l_cod_agt, l_tip_mvto_batch);
      --
      FETCH c_g9999992 INTO l_qtde_agt;
      --
      CLOSE c_g9999992;
      --
      IF l_qtde_agt = trn.CERO THEN
        --
        l_cod_agt  := g_k_cod_agt_generico;
        --
      END IF;
      -- } jjesus - 2.08
      --
      -- COTACAO
      IF NVL(trn_k_global.ref_f_global('MCA_POLIZA_GRUPO'),'N') = 'S' or
         NVL(trn_k_global.ref_f_global('COD_SERVICIO'),-1) = g_k_cod_srv_flotas THEN

        --
        l_eh_3_pacotes := FALSE;
        --
      ELSE
        --
        IF l_tip_mvto_batch = g_k_tip_mvto_batch_cotacao THEN -- 2.20
          --
          ea_k_231_utils.p_devuelve_dato_cotizacion(p_nom_tabla   => ea_k_231_utils.g_k_tabla_dv,
                                                    p_nom_columna => 'TIP_PRODUTO'              ,
                                                    p_val_campo   => l_tip_produto);      -- 2.20
          --
        ELSE
          --
          l_tip_produto := ea_k_231_utils.f_valor_dv('tip_produto'); --2.17
          --
        END IF;   -- 2.20
        --
        l_eh_3_pacotes := ea_k_g2109142_vcr.f_eh_3_pacotes(l_cod_cia, --2.70
                                                           l_cod_ramo,
                                                           l_cod_agt,
                                                           l_tip_produto); -- 2.17
        -- I 3.47
        IF l_eh_3_pacotes THEN
         --
         pp_asigna('tres_pacotes',1);
         --
        ELSE
         --
         pp_asigna('tres_pacotes',0);
         --
        END IF;
       -- F 3.47
      --
      END IF;
      --
      IF l_tip_mvto_batch = g_k_tip_mvto_batch_cotacao THEN
        --
        OPEN l_cursor_dados_grav
         FOR
            SELECT
               NVL(G9999992.cod_campo_coti, G9999992.cod_campo),
               X2000000.val_campo,
               G9999992.nom_tabla,
               G9999992.nom_prg
            FROM
               G9999992
               LEFT OUTER JOIN TABLE(CAST(g_cot_dados AS TYPTAB_DADOS_COT)) X2000000 ON G9999992.cod_campo = X2000000.cod_campo
            WHERE (   (    l_cod_servicio IS NULL -- jwolff
                       AND g9999992.cod_cia        = l_cod_cia
                       AND g9999992.cod_ramo       = l_cod_ramo
                       AND g9999992.cod_tarifa     = l_cod_tarifa
                       AND g9999992.cod_agt        = l_cod_agt
                       AND g9999992.num_paso       = l_num_paso
                       )
                    OR (    l_cod_servicio IS NOT NULL
                       AND g9999992.cod_cia        = l_cod_cia
                       AND g9999992.cod_ramo       = g_k_cod_ramo_generico
                       AND g9999992.cod_tarifa     = g_k_cod_tarifa_generico
                       AND g9999992.cod_agt        = g_k_cod_agt_generico
                       AND g9999992.num_paso       = NVL(l_num_paso, g_k_num_paso_generico)
                       AND g9999992.cod_servicio   = l_cod_servicio
                       )
                   )
                   AND G9999992.tip_mvto_batch = l_tip_mvto_batch
                   AND G9999992.mca_inh        = trn.NO
                   AND G9999992.cod_tar       <> g_k_cod_tar_campo_saida
            ORDER BY
               G9999992.num_orden;
         --
         LOOP
            FETCH l_cursor_dados_grav
            INTO  l_rec_dados_grav;
            --
            EXIT WHEN l_cursor_dados_grav%NOTFOUND;
            --
            BEGIN
             --
             l_rec_dados_grav.val_campo := fp_trata_caractere_especial(l_rec_dados_grav.cod_campo,
                                                                        l_rec_dados_grav.val_campo);
             --
             -- v 4.72 inicio
             IF l_rec_dados_grav.cod_campo = 'COD_CANAL_BB' THEN
               --
                l_val_canal_bb := l_rec_dados_grav.val_campo;
               --
             END IF; -- v 4.72 fim

             -- v 4.93 inicio
             IF l_rec_dados_grav.cod_campo = 'TIP_SITU_DUPLO_SIM' THEN
               --
                g_tip_situ_duplo_sim := l_rec_dados_grav.val_campo;
               --
             END IF; -- v 4.93 fim

             -- v. 4.71 inicio
             IF l_cod_agt = 114500 THEN
               --
               IF l_rec_dados_grav.cod_campo = 'TOKEN' THEN
                 --
                 NULL;
               -- v 4.72 inicio
               ELSIF l_num_paso IN (2 ,6 ,8 ,13) THEN
                     --
                     IF l_rec_dados_grav.cod_campo = 'COD_CANAL_COMERC_ENTRADA' THEN
                       --
                       pp_inserta_c2000000(p_nom_tabla   => l_rec_dados_grav.nom_tabla,
                                           p_nom_columna => l_rec_dados_grav.cod_campo,
                                           p_val_columna => l_val_canal_bb);
                                           --
                     ELSIF l_rec_dados_grav.cod_campo IN ('COD_CANAL_COMERC_CALCULO','COD_CANAL_COMERCIALIZACAO','COD_CANAL_COMERC_EFETIVACAO') THEN
                       --
                       em_k_c2000000.p_lee(p_cod_cia   => l_cod_cia       ,
                                p_cod_ramo             => l_cod_ramo      ,
                                p_num_cotizacion       => l_num_cotizacion,
                                p_nom_tabla            => 'A1000000'      ,
                                p_nom_columna          => 'COD_CANAL_BB'  ,
                                p_cod_fila             => '99999'        );

                       l_val_canal_bb := em_k_c2000000.f_val_columna;

                       --
                       pp_inserta_c2000000(p_nom_tabla   => l_rec_dados_grav.nom_tabla,
                                  p_nom_columna => l_rec_dados_grav.cod_campo,
                                  p_val_columna => l_val_canal_bb);

                     ELSE
                       --
                       pp_inserta_c2000000(p_nom_tabla   => l_rec_dados_grav.nom_tabla,
                                  p_nom_columna => l_rec_dados_grav.cod_campo,
                                  p_val_columna => l_rec_dados_grav.val_campo);
                     END IF; -- v 4.72 fim
                  --
               ELSE
                 --
                 pp_inserta_c2000000(p_nom_tabla   => l_rec_dados_grav.nom_tabla,
                                      p_nom_columna => l_rec_dados_grav.cod_campo,
                                      p_val_columna => l_rec_dados_grav.val_campo);
               END IF;
               --
            ELSE
              --
              pp_inserta_c2000000(p_nom_tabla   => l_rec_dados_grav.nom_tabla,
                                  p_nom_columna => l_rec_dados_grav.cod_campo,
                                  p_val_columna => l_rec_dados_grav.val_campo);

            END IF; -- v. 4.71 fim
                   --
    /*                ea_k_231_coti.p_inserta_c2000000(l_num_cotizacion,
                                                    l_rec_dados_grav.nom_tabla,
                                                    l_rec_dados_grav.cod_campo,
                                                    l_rec_dados_grav.val_campo); */
                   --
             IF l_cod_ramo  = ea_k_231_utils.g_k_ramo_motor THEN
               --
               ea_k_231_coti.p_v_inserta_datos_fijos_coti(l_rec_dados_grav.cod_campo,
                                                         l_rec_dados_grav.val_campo);
               --
             END IF;
             -- 2.90 Ini
             IF l_num_paso =  '3'                                      AND -- passo atual -- Eisouza 18052021
                nvl(ea_k_231_utils.f_valor_dv('VAL_SUB_MODELO'),'0') <> '0'  AND -- tem valor do passo anterior
                NVL(ea_k_231_utils.f_valor_dv('TIP_MERC_DETER'),'x') =  'M'  AND
                l_rec_dados_grav.cod_campo = 'VAL_REFERENCIA'
             THEN
               --
               pi_ajusta_valor_vehiculo;
               --
             END IF;
             -- 2.90 final
             -- I 4.16
             IF l_num_paso =  '3' AND l_rec_dados_grav.nom_prg IS NULL
               AND l_rec_dados_grav.val_campo IS NOT NULL
               AND l_rec_dados_grav.cod_campo = 'NUM_SERIE_MATRICULA' THEN
               --
               IF l_rec_dados_grav.nom_tabla = g_k_tabla_dv THEN
                  --
                  l_cod_campo := em.PREFIJO_DATOS_VARIABLES || 'NUM_SERIE';
                  --
               END IF;
               --
               l_val_campo := l_rec_dados_grav.val_campo; -- 4.17
               --
               pp_asigna(l_cod_campo,l_val_campo); -- 4.17
               pp_asigna('NUM_SERIE',l_val_campo); -- 4.17
               pp_asigna('COD_CAMPO',l_cod_campo);
               pp_asigna('VAL_CAMPO',l_val_campo); -- 4.17
               --
               pp_inserta_c2000000(p_nom_tabla => ea_k_231_utils.g_k_tabla_dv,
                                   p_nom_columna => 'NUM_SERIE',
                                   p_val_columna => l_rec_dados_grav.val_campo); -- I 4.19
               --
               ELSIF l_num_paso = '3' AND l_rec_dados_grav.nom_prg IS NULL
                     AND l_rec_dados_grav.val_campo IS NULL
                     AND l_rec_dados_grav.cod_campo = 'NUM_SERIE_MATRICULA' THEN
               --
               pp_asigna('NUM_SERIE_MATRICULA', l_rec_dados_grav.val_campo);
               --
               pp_inserta_c2000000(p_nom_tabla => ea_k_231_utils.g_k_tabla_dv,
                        p_nom_columna => 'NUM_SERIE',
                        p_val_columna => l_rec_dados_grav.val_campo); -- F 4.19
               --
             END IF;
          -- I v4.42 - IM03338890
          IF l_num_paso = '3' AND l_rec_dados_grav.cod_campo = 'NUM_SERIE' AND
             trn_k_global.ref_f_global('COD_MARCA_REF') IS NULL THEN
            --
            l_cod_marca_ref := fp_recupera_valor(g_xml_in, 'COD_MARCA_REF');
            --
            pp_asigna('COD_MARCA_REF', l_cod_marca_ref);
            --
            pp_inserta_c2000000(p_nom_tabla   => ea_k_231_utils.g_k_tabla_dv,
                                p_nom_columna => 'COD_MARCA_REF',
                                p_val_columna => l_cod_marca_ref);
             --
          END IF;
          -- F v4.42 - IM03338890
             l_val_campo := trn_k_global.ref_f_global('NUM_SERIE');   -- 4.17
             --
             pp_asigna('DVNUM_SERIE', l_val_campo); -- 4.17
             --
             -- F 4.16
             pp_valida_dados(l_rec_dados_grav.cod_campo,
                             l_rec_dados_grav.val_campo,
                             l_rec_dados_grav.nom_prg,
                             l_rec_dados_grav.nom_tabla,
                             l_msg_erro);
             --
             -- TRATAMENTO PARA O DV NUM_CARTAO_CREDITO
             IF l_rec_dados_grav.cod_campo = 'NUM_CARTAO_CREDITO' THEN
               --
               BEGIN
                 --
                 -- TRATAMENTO PARA MASCARAR OS DIGITOS DO CARTAO ENTRE A POSICAO 5 E 12
                 SELECT substr(l_rec_dados_grav.val_campo,1,4) ||
                        replace(substr(l_rec_dados_grav.val_campo,5,8),substr(l_rec_dados_grav.val_campo,5,8),'********') ||
                        substr(l_rec_dados_grav.val_campo,-4)
                   INTO l_cod_cartao
                   FROM dual;
                 --
               EXCEPTION
                 WHEN OTHERS THEN
                   l_cod_cartao := NULL;
               END;
               --
               mx('-', l_rec_dados_grav.cod_campo);
               mx('-', l_cod_cartao);
               mx('-', 'ATUALIZAR VALOR NA C2000000');
               --
               -- ATUALIZA NA TABELA DE COTACAO O NUMERO DO CARTAO COM OS DIGITOS MASCARADOS
               pp_inserta_c2000000(p_nom_tabla   => l_rec_dados_grav.nom_tabla,
                                   p_nom_columna => l_rec_dados_grav.cod_campo,
                                   p_val_columna => l_cod_cartao);
               --
             END IF;
             --
            END;
            --
         END LOOP;
         --
         IF  l_cod_ramo  = ea_k_231_utils.g_k_ramo_motor THEN
           --
           -- { jwolff
           -- La cotizacion de grupo no se debe grabar en c2009030_vcr
           IF NVL(l_num_coti_grupo, em.NUM_POLIZA_GEN) <> l_num_cotizacion
           THEN
              --
              ea_k_231_coti.p_inserta_actualizando_df;
              --
           END IF;
           -- } jwolff
           -- I 2.14
           -- se for passo 11 chama a atualizacao da c2990700
           IF l_eh_3_pacotes AND l_num_paso = 11
           THEN
              --
              ea_k_231_coti.p_atualiza_cotacao(l_cod_cia,
                                                   l_cod_ramo,
                                                   l_num_cotizacion);
              --
           END IF;
           -- F 2.14
           -- I 2.30
           -- se for passo 7 chama a atualizacao da c2000000
           IF l_eh_3_pacotes AND l_num_paso = 7
           THEN
              --
              ea_k_231_coti.p_atualiza_dados_cotacao(l_cod_cia,
                                                     l_cod_ramo,
                                                     l_num_cotizacion);
              --
           END IF;
           -- F 2.30
           --
           -- 2.90 Inicio: atualizacao de valores de veiculo se estiver recalculando
           mx('p_grava_dados: l_num_paso',      l_num_paso);
           mx('p_grava_dados: num_paso atual',  nvl(ea_k_231_utils.f_valor_dv('NUM_PASO_ATUAL'), 0));
           mx('p_grava_dados: tip_merc_deter:', NVL(ea_k_231_utils.f_valor_dv('TIP_MERC_DETER'),'x'));
           mx('p_grava_dados: val_sub_modelo:', nvl(ea_k_231_utils.f_valor_dv('VAL_SUB_MODELO'), 0));
           --
           IF l_num_paso IN ('2','3')                                      AND -- passo atual -- Eisouza 18052021
              nvl(ea_k_231_utils.f_valor_dv('VAL_SUB_MODELO'),'0') <> '0'  AND -- tem valor do passo anterior
              NVL(ea_k_231_utils.f_valor_dv('TIP_MERC_DETER'),'x') =  'M'
           THEN
              --
              pi_ajusta_valor_vehiculo;
              --
           END IF;
           -- 2.90 Final
           --
           --{ 4.40
           IF l_eh_3_pacotes AND l_num_paso = 4 AND
             NVL(ea_k_231_utils.f_valor_dv('MCA_RENOV_OUTRAS'),TRN.CERO) = TRN.UNO THEN
             --
             pi_ajusta_pref_corretor;
             --
           END IF;
          --  } 4.40
          --Inicio v 4.44
          IF l_num_paso = '3' THEN
            --
            em_k_c2000000.p_lee(p_cod_cia        => l_cod_cia       ,
                                p_cod_ramo       => l_cod_ramo      ,
                                p_num_cotizacion => l_num_cotizacion,
                                p_nom_tabla      => 'A2000020'      ,
                                p_nom_columna    => 'MCA_RENOV_OUTRAS' ,
                                p_cod_fila       => '99999'        );
            --
            l_val_columna := em_k_c2000000.f_val_columna;
            --
            IF l_val_columna = 2 THEN
              --
              em_k_c2000000.p_lee(p_cod_cia        => l_cod_cia       ,
                                  p_cod_ramo       => l_cod_ramo      ,
                                  p_num_cotizacion => l_num_cotizacion,
                                  p_nom_tabla      => 'A2000020'      ,
                                  p_nom_columna    => 'TEMPO_DE_CASA' ,
                                  p_cod_fila       => '99999'         );
              --
              l_val_columna := em_k_c2000000.f_val_columna;
              --
              IF l_val_columna IS NULL THEN
                --
                em_k_c2000000.p_lee(p_cod_cia        => l_cod_cia          ,
                                    p_cod_ramo       => l_cod_ramo         ,
                                    p_num_cotizacion => l_num_cotizacion   ,
                                    p_nom_tabla      => 'A2000020'         ,
                                    p_nom_columna    => 'NUM_POLIZA_RENOV' ,
                                    p_cod_fila       => '99999'            );
                --
                l_val_poliza_renov := em_k_c2000000.f_val_columna;
                --
                em_k_c2000000.p_lee(p_cod_cia        => l_cod_cia          ,
                                    p_cod_ramo       => l_cod_ramo         ,
                                    p_num_cotizacion => l_num_cotizacion   ,
                                    p_nom_tabla      => 'A2000020'         ,
                                    p_nom_columna    => 'COD_RAMO_ORIGEN'  ,
                                    p_cod_fila       => '99999'            );
                --
                l_cod_ramo_origen := em_k_c2000000.f_val_columna;
                --
                em_k_a2000020.p_lee_vigente(p_cod_cia     => l_cod_cia                ,
                                            p_num_poliza  => l_val_poliza_renov            ,
                                            p_num_apli    => trn.CERO                 ,
                                            p_num_riesgo  => trn.UNO                  ,
                                            p_num_periodo => trn.UNO                  ,
                                            p_cod_campo   => 'TEMPO_DE_CASA'          ,
                                            p_cod_ramo    => l_cod_ramo_origen        );
                --
                IF TO_NUMBER(em_k_a2000020.f_val_campo) is null THEN
                  --
                  l_tempo_de_casa := 0;
                  --
                  pp_trata_tempo_de_casa(p_num_poliza_renov => l_val_poliza_renov,
                                         p_cod_ramo         => l_cod_ramo_origen ,
                                         p_cod_cia          => l_cod_cia         ,
                                         p_num_spto         => trn.CERO          ,
                                         p_tempo_de_casa    => l_tempo_de_casa   );
                  --
                  p_insere_tempo_de_casa (p_cod_cia        => l_cod_cia          ,
                                          p_cod_ramo       => l_cod_ramo         ,
                                          p_num_cotizacion => l_num_cotizacion   ,
                                          p_tempo_de_casa  => l_tempo_de_casa    );
                  --
                ELSE
                  --
                  l_tempo_de_casa := em_k_a2000020.f_val_campo;
                  --
                  pp_trata_tempo_de_casa(p_num_poliza_renov => l_val_poliza_renov,
                                         p_cod_ramo         => l_cod_ramo_origen ,
                                         p_cod_cia          => l_cod_cia         ,
                                         p_num_spto         => trn.CERO          ,
                                         p_tempo_de_casa    => l_tempo_de_casa   );
                  --
                  p_insere_tempo_de_casa (p_cod_cia        => l_cod_cia          ,
                                          p_cod_ramo       => l_cod_ramo         ,
                                          p_num_cotizacion => l_num_cotizacion   ,
                                          p_tempo_de_casa  => l_tempo_de_casa    );
                  --
                END IF;
                --
              END IF;
            END IF;

          END IF;
          --Fim v 4.44
         END IF;
         --
      END IF;
      --
      -- ENDOSSO
      IF l_tip_mvto_batch = g_k_tip_mvto_batch_endosso THEN
        OPEN l_cursor_dados_grav
         FOR
            SELECT
               NVL(G9999992.cod_campo_coti, G9999992.cod_campo),
               X2000000.val_campo,
               G9999992.nom_tabla,
               G9999992.nom_prg
            FROM
               G9999992
               LEFT OUTER JOIN TABLE(CAST(g_cot_dados AS TYPTAB_DADOS_COT)) X2000000 ON G9999992.cod_campo = X2000000.cod_campo
            WHERE
              ((    l_cod_servicio IS NULL -- jwolff
               AND G9999992.cod_cia        = l_cod_cia
               AND G9999992.cod_ramo       = l_cod_ramo
               AND G9999992.cod_tarifa     = l_cod_tarifa
               AND G9999992.cod_agt        = l_cod_agt
               AND G9999992.num_paso       = l_num_paso
               AND G9999992.tip_mvto_batch = l_tip_mvto_batch
               AND G9999992.mca_inh        = trn.NO
               AND G9999992.cod_tar       <> g_k_cod_tar_campo_saida)
             OR
             (    l_cod_servicio IS NOT NULL
               AND G9999992.cod_cia        = l_cod_cia
               AND G9999992.cod_ramo       = g_k_cod_ramo_generico
               AND G9999992.cod_tarifa     = g_k_cod_tarifa_generico
               AND G9999992.cod_agt        = g_k_cod_agt_generico
               AND G9999992.num_paso       = NVL(l_num_paso, g_k_num_paso_generico)
               AND G9999992.tip_mvto_batch = l_tip_mvto_batch
               AND G9999992.mca_inh        = trn.NO
               AND G9999992.cod_tar       <> g_k_cod_tar_campo_saida
               AND g9999992.cod_servicio   = l_cod_servicio))
             ORDER BY G9999992.num_orden;
         --
         LOOP
            FETCH l_cursor_dados_grav
            INTO  l_rec_dados_grav;
            --
            EXIT WHEN l_cursor_dados_grav%NOTFOUND;
            --
            BEGIN
               --
               mx('l_rec_dados_grav.cod_campo', l_rec_dados_grav.cod_campo);
               mx('l_rec_dados_grav.val_campo', l_rec_dados_grav.val_campo);
               --
               IF l_rec_dados_grav.nom_tabla = g_k_tabla_te OR
                  l_rec_dados_grav.nom_tabla = g_k_tabla_te_vcr THEN
                  --
                  IF l_rec_dados_grav.cod_campo LIKE 'TENOM_COMPLETO%' THEN
                    --
                    l_tip_benef     := to_number(substr(lpad(substr(l_rec_dados_grav.cod_campo,15),3,0),1,2));
                    --
                    em_k_gen_spto_batch.p_grava_nome_terceiro(l_num_propuesta
                                                             ,l_tip_benef
                                                             ,l_rec_dados_grav.cod_campo
                                                             ,l_rec_dados_grav.val_campo);
                    --
                  ELSE
                    --
                    l_reg_a2000560.cod_cia       := l_cod_cia;
                    l_reg_a2000560.num_propuesta := l_num_propuesta;
                    l_reg_a2000560.cod_campo     := l_rec_dados_grav.cod_campo;
                    l_reg_a2000560.val_campo     := l_rec_dados_grav.val_campo;
                    --
                    IF  l_reg_a2000560.cod_campo = 'NUM_MATRICULA' OR --3.83
                        l_reg_a2000560.cod_campo = 'NUM_SERIE' THEN   --v. 5.18
                        l_reg_a2000560.val_campo := UPPER(l_rec_dados_grav.val_campo);
                    END IF;
                    --
                    pp_inserta_a2000560(l_reg_a2000560);
                    --
                    pp_asigna(l_reg_a2000560.cod_campo, l_reg_a2000560.val_campo);
                    --
                    -- {v4.30
                    IF l_rec_dados_grav.cod_campo = 'TTTIP_DOCUM21' THEN
                      --
                      pp_asigna('TIP_DOCUM', l_reg_a2000560.val_campo);
                      --
                    END IF;
                    -- v4.30}
                    --
                  END IF;
                  ---
               ELSE
                 --
                 l_reg_a2000560.cod_cia       := l_cod_cia;
                 l_reg_a2000560.num_propuesta := l_num_propuesta;
                 l_reg_a2000560.cod_campo     := l_rec_dados_grav.cod_campo;
                 l_reg_a2000560.val_campo     := l_rec_dados_grav.val_campo;
                 --
                 IF  l_reg_a2000560.cod_campo = 'NUM_MATRICULA' OR --3.83
                     l_reg_a2000560.cod_campo = 'NUM_SERIE' THEN --v. 5.18
                     l_reg_a2000560.val_campo := UPPER(l_rec_dados_grav.val_campo);
                 END IF;
                 --
                 pp_inserta_a2000560(l_reg_a2000560);
                 --
                 pp_asigna(l_reg_a2000560.cod_campo, l_reg_a2000560.val_campo);
                 --
                 -- {v2.91
                 IF l_rec_dados_grav.nom_tabla = ea_k_231_utils.g_k_tabla_dv THEN
                   --
                   pp_asigna('DV'||l_reg_a2000560.cod_campo, l_reg_a2000560.val_campo);
                   --
                 END IF;
                 -- }v2.91
                 --
               END IF;
               --
               IF  l_reg_a2000560.cod_campo = 'NUM_MATRICULA' OR
                    l_reg_a2000560.cod_campo = 'NUM_SERIE' THEN --v. 5.18
                    pp_valida_dados(l_rec_dados_grav.cod_campo,
                               UPPER ( l_reg_a2000560.val_campo ),
                               l_rec_dados_grav.nom_prg,
                               l_rec_dados_grav.nom_tabla,
                              l_msg_erro);
               --
               ELSE
               --
               pp_valida_dados(l_rec_dados_grav.cod_campo,
                               l_rec_dados_grav.val_campo,
                               l_rec_dados_grav.nom_prg,
                               l_rec_dados_grav.nom_tabla,
                               l_msg_erro);
               --
               END IF;
               --
               mx('l_reg_a2000560.cod_campo', l_reg_a2000560.cod_campo);
               mx('l_reg_a2000560.val_campo', l_reg_a2000560.val_campo);
               --
            END;
            --
         END LOOP;
      -- I 3.34
       IF fp_cambio_riesgo AND l_num_paso = 2 THEN
          --
          IF fp_valida_nacionalidade AND NVL(fp_devuelve_val_coti('COMCA_SELECCION1301'), trn.NO )= TRN.SI
             THEN
              --
              l_reg_a2000560.cod_cia       := g_cod_cia;
              l_reg_a2000560.num_propuesta := g_num_poliza;
              l_reg_a2000560.cod_campo     := 'COMCA_SELECCION1301';
              l_reg_a2000560.val_campo     := trn.NO;
              --
              em_k_a2000560.p_inserta_borrando(l_reg_a2000560);
              --
              l_reg_a2000560.cod_cia       := g_cod_cia;
              l_reg_a2000560.num_propuesta := g_num_poliza;
              l_reg_a2000560.cod_campo     := 'TIP_COB_VIDROS1301';
              l_reg_a2000560.val_campo     := trn.NULO;
             --
             em_k_a2000560.p_inserta_borrando(l_reg_a2000560);
             --
          ELSE IF  fp_valida_nacionalidade AND NVL(fp_devuelve_val_coti('COMCA_SELECCION1295'), trn.NO )= TRN.SI
             THEN
              --
              l_reg_a2000560.cod_cia       := g_cod_cia;
              l_reg_a2000560.num_propuesta := g_num_poliza;
              l_reg_a2000560.cod_campo     := 'COMCA_SELECCION1295';
              l_reg_a2000560.val_campo     := trn.NO;
              --
              em_k_a2000560.p_inserta_borrando(l_reg_a2000560);
              --
              l_reg_a2000560.cod_cia       := g_cod_cia;
              l_reg_a2000560.num_propuesta := g_num_poliza;
              l_reg_a2000560.cod_campo     := 'TIP_COB_VIDROS1295';
              l_reg_a2000560.val_campo     := trn.NULO;
             --
             em_k_a2000560.p_inserta_borrando(l_reg_a2000560);
             --
             END IF;
           --
        END IF;
        --
        l_num_idade_veic := trn_k_global.ref_f_global(ea_k_231_utils.g_k_pref_multivar || 'num_idade_veic'); -- 4.53
        --
        mx('-','PCT_AJUSTE_TAB_REF ' || fp_devuelve_val_coti('PCT_AJUSTE_TAB_REF')); -- 4.53
        mx('-','TIP_MERC_DETER ' || fp_devuelve_val_coti('TIP_MERC_DETER'));         -- 4.53
        mx('-','MCA_BLINDAGEM ' || fp_devuelve_val_coti('MCA_BLINDAGEM'));           -- 4.53
        mx('-','COMCA_SELECCION392 ' || fp_devuelve_val_coti('COMCA_SELECCION392')); -- 4.53
        mx('-','l_num_idade_veic ' || l_num_idade_veic);                                -- 4.53
        --
        IF ((fp_devuelve_val_coti('PCT_AJUSTE_TAB_REF') > 100 OR trn_k_global.ref_f_global(ea_k_231_utils.g_k_pref_multivar || 'num_idade_veic') > 5
          OR fp_devuelve_val_coti('TIP_MERC_DETER') <> ea_k_231_utils.f_recupera_constante(g_cod_cia ,'TIP_MERC_DETER_VAL_MERCA')
          OR fp_devuelve_val_coti('MCA_BLINDAGEM') = TRN.SI) AND NVL(fp_devuelve_val_coti('COMCA_SELECCION392'), trn.NO) = TRN.SI)
           THEN -- 4.53 I
               --
               l_reg_a2000560.cod_cia       := g_cod_cia;
               l_reg_a2000560.num_propuesta := g_num_poliza;
               l_reg_a2000560.cod_campo     := 'COMCA_SELECCION392';
               l_reg_a2000560.val_campo     := trn.NO;
               --
               em_k_a2000560.p_inserta_borrando(l_reg_a2000560);
               --
        END IF; -- 4.53 F
        --
      END IF;
      -- F 3.34
      --
      IF em_f_cambio_chassi AND l_num_paso = 2 THEN -- I v4.36. -- 4.76
          --
          IF NVL(fp_devuelve_val_coti('COMCA_SELECCION108'), trn.NO) = trn.SI AND (fp_devuelve_val_coti('MCA_ZERO_KM') = trn.NO
            OR fp_devuelve_val_coti('TIP_MERC_DETER') <> ea_k_231_utils.f_recupera_constante(g_cod_cia ,'TIP_MERC_DETER_VAL_MERCA')) THEN -- 4.76
            --
            l_reg_a2000560.cod_cia       := g_cod_cia;
            l_reg_a2000560.num_propuesta := g_num_poliza;
            l_reg_a2000560.cod_campo     := 'COMCA_SELECCION108';
            l_reg_a2000560.val_campo     := trn.NO;
            --
            em_k_a2000560.p_inserta_borrando(l_reg_a2000560);
            --
          ELSIF NVL(fp_devuelve_val_coti('COMCA_SELECCION254'), trn.NO) = trn.SI AND (fp_devuelve_val_coti('MCA_ZERO_KM') = trn.NO
            OR fp_devuelve_val_coti('TIP_MERC_DETER') <> ea_k_231_utils.f_recupera_constante(g_cod_cia ,'TIP_MERC_DETER_VAL_MERCA')) THEN
            --
            l_reg_a2000560.cod_cia       := g_cod_cia;
            l_reg_a2000560.num_propuesta := g_num_poliza;
            l_reg_a2000560.cod_campo     := 'COMCA_SELECCION254';
            l_reg_a2000560.val_campo     := trn.NO;
            --
            em_k_a2000560.p_inserta_borrando(l_reg_a2000560);
            --
          END IF;
          --
          IF l_cod_tarifa = 214 THEN -- 4.76 I
            --
            IF TO_NUMBER(NVL(ea_k_231_utils.f_valor_dv('VAL_POTENCIA'), '0')) < 500
              AND NVL(fp_devuelve_val_coti('COMCA_SELECCION1303'), trn.NO )= TRN.SI THEN
                --
                l_reg_a2000560.cod_cia       := g_cod_cia;
                l_reg_a2000560.num_propuesta := g_num_poliza;
                l_reg_a2000560.cod_campo     := 'COMCA_SELECCION1303';
                l_reg_a2000560.val_campo     := trn.NO;
                --
                em_k_a2000560.p_inserta_borrando(l_reg_a2000560);
                --
                l_reg_a2000560.cod_campo     := 'TIP_COB_EXT_REBOQ1303';
                l_reg_a2000560.val_campo     := trn.NULO;
               --
               em_k_a2000560.p_inserta_borrando(l_reg_a2000560);
               --
            END IF;
            --
        END IF; -- 4.76 F
        --
      END IF;  -- F v4.36.
      --
      IF NVL(fp_devuelve_val_coti('COMCA_SELECCION1302'), trn.NO ) = TRN.SI AND l_num_paso = 3 THEN -- 4.57
        --
        ea_k_231_cob.p_num_idade;
        --
        IF trn_k_global.ref_f_global(ea_k_231_utils.g_k_pref_multivar || 'num_idade') < 21 THEN
          --
          l_reg_a2000560.cod_cia       := g_cod_cia;
          l_reg_a2000560.num_propuesta := g_num_poliza;
          l_reg_a2000560.cod_campo     := 'COMCA_SELECCION1302';
          l_reg_a2000560.val_campo     := trn.NO;
          --
          em_k_a2000560.p_inserta_borrando(l_reg_a2000560);
          --
          l_reg_a2000560.cod_campo     := 'NUM_QTD_DIARIAS1302';
          l_reg_a2000560.val_campo     := trn.NULO;
          --
          em_k_a2000560.p_inserta_borrando(l_reg_a2000560);
          --
          l_reg_a2000560.cod_campo     := 'TIP_CARRO_RESERVA1302';
          l_reg_a2000560.val_campo     := trn.NULO;
          --
          em_k_a2000560.p_inserta_borrando(l_reg_a2000560);
          --
        END IF;
        --
      END IF;  -- F 4.57
      --
    END IF;
    --
      mx('F','p_grava_dados');
      --
   EXCEPTION
      WHEN OTHERS THEN
         --I. 5.17 Correcao ORA 2000
         g_txt_error      := substr(SQLERRM,1,2000);
         l_anx_mensaje := trn.BLANCO || ss_k_mensaje.f_solo_texto_idioma(99999029, g_cod_idioma);
         g_cod_mensaje    := '99999029';
         g_anx_mensaje    := SQLERRM;
         --
         g_err_msg.EXTEND(1);
         g_err_msg(g_err_msg.LAST) := fp_trata_msg('COD_RETORNO',
                                                     '99999029',
                                                     l_anx_mensaje);

         --
         -- I 5.39
         g_err_msg.EXTEND(1);
         g_err_msg(g_err_msg.LAST) := fp_trata_msg('',
                                                     null,
                                                     g_k_pre_msg_erro || '20098400' || g_k_sep_cod_msg || g_txt_error);


         -- F 5.39
         mx('F', 'p_grava_dados - EXCEPTION');
         --
         pp_devuelve_error;
         --F. 5.17 Correcao ORA 2000
   END p_grava_dados;
   --
   /* ------------------------------------------------------
   || Processa atualizacao de dados
   */ ------------------------------------------------------
   --
   PROCEDURE p_atualiza_dados
   IS
      --
      l_cod_cia           G9999992.cod_cia            %TYPE;
      l_cod_ramo          G9999992.cod_ramo           %TYPE;
      l_cod_tarifa        G9999992.cod_tarifa         %TYPE;
      l_cod_agt           G9999992.cod_agt            %TYPE;
      l_num_cotizacion    C2009030_vcr.num_cotizacion %TYPE;
      l_num_paso          G9999992.num_paso           %TYPE;
      l_tip_mvto_batch    G9999992.tip_mvto_batch     %TYPE;
      l_num_propuesta     A2000560.num_propuesta      %TYPE;
      l_reg_a2000560      A2000560                 %ROWTYPE;
      l_cod_fracc_pago    A2000560.val_campo          %TYPE;
      l_cod_forma_pago    A2000560.val_campo          %TYPE;
      l_tip_gestor        A2000560.val_campo          %TYPE;
      l_cod_gestor        A2000560.val_campo          %TYPE;
      --
   BEGIN
      --
      mx('I', 'p_atualiza_dados');
      --
      l_cod_cia         := trn_k_global.devuelve('COD_CIA');
      l_cod_ramo        := trn_k_global.devuelve('COD_RAMO');
      l_cod_tarifa      := trn_k_global.devuelve('COD_TARIFA');
      l_cod_agt         := trn_k_global.devuelve('COD_AGT');
      l_num_paso        := trn_k_global.devuelve('NUM_PASO');
      l_tip_mvto_batch  := trn_k_global.devuelve('TIP_MVTO_BATCH');
      l_num_cotizacion  := trn_k_global.ref_f_global('NUM_COTIZACION');
      l_num_propuesta   := trn_k_global.ref_f_global('NUM_PROPUESTA');
      --
      IF l_tip_mvto_batch = g_k_tip_mvto_batch_endosso THEN
        --
        BEGIN
           --
           l_cod_fracc_pago  := ea_k_231_utils.f_devuelve_val_campo_spto('COD_FRACC_PAGO');
           l_cod_forma_pago  := ea_k_231_utils.f_devuelve_val_campo_spto('COD_FORMA_PAGO');
           --
           mx('l_cod_fracc_pago', l_cod_fracc_pago);
           mx('l_cod_forma_pago', l_cod_forma_pago);
           --
           IF l_cod_fracc_pago IS NOT NULL AND l_cod_forma_pago IS NOT NULL THEN
             --
             l_reg_a2000560.cod_cia       := l_cod_cia;
             l_reg_a2000560.num_propuesta := l_num_propuesta;
             l_reg_a2000560.cod_campo     := 'DFCOD_FRACC_PAGO';
             l_reg_a2000560.val_campo     := l_cod_fracc_pago;
             --
             trn_k_global.asigna('COD_FRACC_PAGO', l_cod_fracc_pago);
             --
             pp_inserta_a2000560(l_reg_a2000560);
             --
             IF l_cod_forma_pago IN (1, 5, 10) THEN --5.27
               --
               l_reg_a2000560.cod_cia       := l_cod_cia;
               l_reg_a2000560.num_propuesta := l_num_propuesta;
               l_reg_a2000560.cod_campo     := 'DFTIP_GESTOR';
               l_reg_a2000560.val_campo     := g_k_tip_gestor_ba;
               --
               pp_inserta_a2000560(l_reg_a2000560);
               --
               l_reg_a2000560.cod_cia       := l_cod_cia;
               l_reg_a2000560.num_propuesta := l_num_propuesta;
               l_reg_a2000560.cod_campo     := 'DFCOD_GESTOR';
               l_reg_a2000560.val_campo     := g_k_cod_gestor_ba;
               --
               pp_inserta_a2000560(l_reg_a2000560);
               --
               trn_k_global.asigna('TIP_GESTOR', g_k_tip_gestor_ba);
               trn_k_global.asigna('COD_GESTOR', g_k_cod_gestor_ba);
               --
             ELSIF l_cod_forma_pago = 2 THEN
               --
               l_reg_a2000560.cod_cia       := l_cod_cia;
               l_reg_a2000560.num_propuesta := l_num_propuesta;
               l_reg_a2000560.cod_campo     := 'DFTIP_GESTOR';
               l_reg_a2000560.val_campo     := g_k_tip_gestor_ta;
               --
               pp_inserta_a2000560(l_reg_a2000560);
               --
               l_reg_a2000560.cod_cia       := l_cod_cia;
               l_reg_a2000560.num_propuesta := l_num_propuesta;
               l_reg_a2000560.cod_campo     := 'DFCOD_GESTOR';
               l_reg_a2000560.val_campo     := g_k_cod_gestor_ta;
               --
               pp_inserta_a2000560(l_reg_a2000560);
               --
               trn_k_global.asigna('TIP_GESTOR', g_k_tip_gestor_ta);
               trn_k_global.asigna('COD_GESTOR', g_k_cod_gestor_ta);
               --
             ELSIF l_cod_forma_pago = 3 THEN
               --
               l_reg_a2000560.cod_cia       := l_cod_cia;
               l_reg_a2000560.num_propuesta := l_num_propuesta;
               l_reg_a2000560.cod_campo     := 'DFTIP_GESTOR';
               l_reg_a2000560.val_campo     := g_k_tip_gestor_dc;
               --
               pp_inserta_a2000560(l_reg_a2000560);
               --
               trn_k_global.asigna('TIP_GESTOR', g_k_tip_gestor_dc);
               --
             ELSIF l_cod_forma_pago in (4, 9) THEN --5.27
               --
               l_reg_a2000560.cod_cia       := l_cod_cia;
               l_reg_a2000560.num_propuesta := l_num_propuesta;
               l_reg_a2000560.cod_campo     := 'DFTIP_GESTOR';
               l_reg_a2000560.val_campo     := g_k_tip_gestor_db;
               --
               pp_inserta_a2000560(l_reg_a2000560);
               --
               trn_k_global.asigna('TIP_GESTOR', g_k_tip_gestor_db);
               --
             ELSIF l_cod_forma_pago = 8 THEN --5.27
               --
               l_reg_a2000560.cod_cia       := l_cod_cia;
               l_reg_a2000560.num_propuesta := l_num_propuesta;
               l_reg_a2000560.cod_campo     := 'DFTIP_GESTOR';
               l_reg_a2000560.val_campo     := g_k_tip_gestor_px;
               --
               pp_inserta_a2000560(l_reg_a2000560);
               --
               trn_k_global.asigna('TIP_GESTOR', g_k_tip_gestor_px);
               --
             END IF;
             --
           ELSE
             --
             l_cod_fracc_pago  := ea_k_231_utils.f_devuelve_val_campo_spto('DFCOD_FRACC_PAGO');
             l_tip_gestor      := ea_k_231_utils.f_devuelve_val_campo_spto('DFTIP_GESTOR');
             l_cod_gestor      := ea_k_231_utils.f_devuelve_val_campo_spto('DFCOD_GESTOR');
             --
             trn_k_global.asigna('COD_FRACC_PAGO', l_cod_fracc_pago);
             trn_k_global.asigna('TIP_GESTOR'    , l_tip_gestor);
             trn_k_global.asigna('COD_GESTOR'    , l_cod_gestor);
             --
           END IF;
           --
        END;
        --
      END IF;
      --
      mx('F','p_atualiza_dados');
      --
   EXCEPTION
      WHEN OTHERS THEN
         --
         g_cod_mensaje    := g_k_cod_error_gen;
         g_anx_mensaje    := SQLERRM;
         --
         mx('F', 'p_atualiza_dados - EXCEPTION');
         --
         pp_devuelve_error;
         --

   END p_atualiza_dados;
   --
   /* ----------------------------------------------------
   || Atualiza o passo da cotacao
   */ ----------------------------------------------------
   --
   PROCEDURE p_actualiza_paso IS

     l_mca_inh G9999992.mca_inh %TYPE;
     --
     l_cod_cia        G9999992.cod_cia            %TYPE;
     l_cod_ramo       G9999992.cod_ramo           %TYPE;
     l_cod_tarifa     G9999992.cod_tarifa         %TYPE;
     l_cod_agt        G9999992.cod_agt            %TYPE := trn.NULO;
     l_num_cotizacion C2009030_vcr.num_cotizacion %TYPE;
     l_num_paso       G9999992.num_paso           %TYPE;
     l_num_status     G9999991.NUM_STATUS         %TYPE;
     --
     l_reg_msg_erro      TYPREG_MSG_WS;
     --
     l_tip_mvto_batch   G9999991.tip_mvto_batch%TYPE; -- v2.08
     --
    l_num_poliza_grupo C2009030_vcr.num_poliza_grupo %TYPE;  -- v 2.15

     -- { jjesus - 2.08
     l_qtde_agt         NUMBER := trn.CERO;
     --
     CURSOR c_g9999991 (pc_cod_cia        g9999991.cod_cia        %TYPE,
                        pc_cod_ramo       g9999991.cod_ramo       %TYPE,
                        pc_cod_tarifa     g9999991.cod_tarifa     %TYPE,
                        pc_cod_agt        g9999991.cod_agt        %TYPE,
                        pc_tip_mvto_batch g9999991.tip_mvto_batch %TYPE)
      IS
      SELECT COUNT(1)
        FROM g9999991
       WHERE cod_cia        = pc_cod_cia
         AND cod_ramo       = pc_cod_ramo
         AND cod_tarifa     = pc_cod_tarifa
         AND cod_agt        = pc_cod_agt
         AND tip_mvto_batch = pc_tip_mvto_batch
         AND mca_inh        = trn.NO;
     --
     -- } jjesus 2.08
     --
   BEGIN
     --
     mx('I', 'p_actualiza_paso');
     --
     l_cod_cia        := trn_k_global.devuelve('cod_cia');
     l_cod_ramo       := trn_k_global.devuelve('cod_ramo');
     l_cod_tarifa     := trn_k_global.devuelve('cod_tarifa');
     l_cod_agt        := trn_k_global.devuelve('cod_agt');
     l_num_paso       := trn_k_global.devuelve('num_paso');
     l_tip_mvto_batch := NVL(trn_k_global.devuelve('TIP_MVTO_BATCH'), g_k_tip_mvto_batch_cotacao); -- v2.08
     --
     l_mca_inh := 'N';
     --
     -- { jjesus - 2.08
     IF c_g9999991%ISOPEN
     THEN
       --
       CLOSE c_g9999991;
       --
     END IF;
     --
     OPEN c_g9999991 (l_cod_cia, l_cod_ramo, l_cod_tarifa, l_cod_agt, l_tip_mvto_batch);
     --
     FETCH c_g9999991 INTO l_qtde_agt;
     --
     CLOSE c_g9999991;
     --
     mx('l_qtde_agt', l_qtde_agt);
     IF l_qtde_agt = trn.CERO THEN
       --
       l_cod_agt  := g_k_cod_agt_generico;
       --
     END IF;
     -- } jjesus - 2.08
     --
     mx('p_actualiza_paso', 'pp_inserta_c2000000 NUM_PASO (' || l_num_paso || ')');
     --
     -- I 5.40
     IF l_num_paso = 50 THEN
       --
       mx('Entrou','IF');
       --
       l_num_paso := 14;
       --
       mx('l_num_paso',l_num_paso);
       --
       pp_inserta_c2000000(p_nom_tabla   => 'G9999994',
                           p_nom_columna => 'NUM_PASO_ATUAL',
                           p_val_columna => l_num_paso);
       --
     ELSE
       --
       mx('Entrou','ELSE');
       --
       mx('l_num_paso',l_num_paso);
       --
       pp_inserta_c2000000(p_nom_tabla   => 'G9999994',
                           p_nom_columna => 'NUM_PASO_ATUAL',
                           p_val_columna => l_num_paso);
     --
     END IF;
     -- F 5.40
     --
     -- I v 2.15
     -- para o passo 14 deve incluir novamente na global o num_poliza_grupo
     --
    IF(l_num_paso = 14) OR (l_num_paso = 50)  THEN -- 5.40
      --
      BEGIN
        --
        SELECT NUM_POLIZA_GRUPO
          INTO l_num_poliza_grupo
          FROM C2009030_VCR
         WHERE COD_CIA        = l_cod_cia
           AND COD_RAMO       = l_cod_ramo
           AND NUM_COTIZACION = l_num_cotizacion;
        --
        trn_k_global.asigna('NUM_POLIZA_GRUPO', NVL(l_num_poliza_grupo, em.NUM_POLIZA_GRUPO_GEN));
        --
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            trn_k_global.asigna('NUM_POLIZA_GRUPO', em.NUM_POLIZA_GRUPO_GEN);
        --
       END;
       --
    END IF;
    --
    mx('l_tip_mvto_batch',l_tip_mvto_batch);
    --
    IF     l_tip_mvto_batch = g_k_tip_mvto_batch_cotacao
       AND NVL(trn_k_global.ref_f_global('MCA_POLIZA_GRUPO'),'N') <> 'S' -- V 3.59 En flotas la insercion a c2009030_vcr se hace en p_grava_dados
    THEN
       --
       ea_k_231_coti.p_inserta_actualizando_df;
       --
    END IF;
    -- F v 2.15
    --
    BEGIN
       --
       SELECT G9999991.Num_Status
         INTO l_num_status
         FROM G9999991
        WHERE G9999991.cod_cia    = l_cod_cia
          AND G9999991.cod_ramo   = l_cod_ramo
          AND G9999991.cod_tarifa = l_cod_tarifa
          AND G9999991.cod_agt    = l_cod_agt
          AND G9999991.num_paso   = l_num_paso
          AND G9999991.mca_inh    = l_mca_inh
          AND G9999991.nom_prg LIKE '%p_actualiza_paso';
       --
       IF l_num_status IS NOT NULL THEN
         --
         pp_inserta_c2000000(p_nom_tabla   => 'G9999991',
                             p_nom_columna => 'COD_STATUS_COTI',
                             p_val_columna => l_num_status);
       END IF;
       --
     EXCEPTION
       WHEN NO_DATA_FOUND THEN
         NULL; -- Nao alterar o status caso nao esteja cadastrado.
     --
     END;
     --
     mx('F', 'p_actualiza_paso');
     --
   EXCEPTION
     WHEN OTHERS THEN
       --
       mx('F', 'p_actualiza_paso - EXCEPTION');
       --
       l_reg_msg_erro := fp_trata_msg('NUM_PASO',
                                      NULL,
                                      g_k_pre_msg_erro || '20098400' || g_k_sep_cod_msg || 'Erro ao Atualizar Status da Cota' || CHR(231) || CHR(227) || 'o.');
       --
       g_err_msg.EXTEND(1); -- 4.99
       g_err_msg(g_err_msg.LAST) := l_reg_msg_erro; -- 4.99
       --
   END p_actualiza_paso;
   --
   /* ----------------------------------------------------
   || Valida o passo da cotacao
   */ ----------------------------------------------------
   --
   PROCEDURE p_valida_paso IS

     l_mca_inh G9999992.mca_inh %TYPE;
     --
     l_cod_cia        G9999992.cod_cia            %TYPE;
     l_cod_ramo       G9999992.cod_ramo           %TYPE;
     l_cod_tarifa     G9999992.cod_tarifa         %TYPE;
     l_cod_agt        G9999992.cod_agt            %TYPE := trn.NULO;
     l_num_cotizacion C2009030_vcr.num_cotizacion %TYPE;
     l_num_paso       G9999992.num_paso           %TYPE;
     l_val_columna    c2000000.val_columna        %TYPE;
     --
     l_reg_msg_erro TYPREG_MSG_WS;
     --
     -- { jjesus - 2.08
     l_qtde_agt         NUMBER := trn.CERO;
     --
     CURSOR c_g9999994 (pc_cod_cia        g9999992.cod_cia        %TYPE,
                        pc_cod_ramo       g9999992.cod_ramo       %TYPE,
                        pc_cod_tarifa     g9999992.cod_tarifa     %TYPE,
                        pc_cod_agt        g9999992.cod_agt        %TYPE)
      IS
      SELECT COUNT(1)
        FROM g9999994
       WHERE cod_cia        = pc_cod_cia
         AND cod_ramo       = pc_cod_ramo
         AND cod_tarifa     = pc_cod_tarifa
         AND cod_agt        = pc_cod_agt
         AND mca_inh        = trn.NO;
     --
     -- } jjesus 2.08
     --
   BEGIN
     --
     mx('I', 'p_valida_paso');
     --
     l_cod_cia        := trn_k_global.devuelve('cod_cia');
     l_cod_ramo       := trn_k_global.devuelve('cod_ramo');
     l_cod_tarifa     := trn_k_global.devuelve('cod_tarifa');
     l_cod_agt        := trn_k_global.devuelve('cod_agt');
     l_num_paso       := trn_k_global.devuelve('num_paso');
     l_num_cotizacion := trn_k_global.devuelve('num_cotizacion');
     --
     -- { jjesus - 2.08
     IF c_g9999994%ISOPEN
     THEN
       --
       CLOSE c_g9999994;
       --
     END IF;
     --
     OPEN c_g9999994 (l_cod_cia, l_cod_ramo, l_cod_tarifa, l_cod_agt);
     --
     FETCH c_g9999994 INTO l_qtde_agt;
     --
     CLOSE c_g9999994;
     --
     IF l_qtde_agt = trn.CERO THEN
       --
       l_cod_agt  := g_k_cod_agt_generico;
       --
     END IF;
     -- } jjesus - 2.08
     --
     em_k_c2000000_vcr.p_lee(p_cod_cia        => l_cod_cia,
                             p_cod_ramo       => l_cod_ramo,
                             p_num_cotizacion => l_num_cotizacion,
                             p_nom_tabla      => 'G9999994',
                             p_nom_columna    => 'NUM_PASO_ATUAL',
                             p_cod_fila       => 99999);
     --
     l_val_columna := NVL(em_k_c2000000_vcr.f_val_columna, g_num_paso_controle_inicial);
     --
     mx('p_valida_paso - NUM_PASO_ATUAL', l_val_columna);
     --
     em_k_g9999994_vcr.p_lee(p_cod_cia           => l_cod_cia,
                             p_cod_ramo          => l_cod_ramo,
                             p_cod_tarifa        => l_cod_tarifa,
                             p_cod_agt           => l_cod_agt,
                             p_num_paso          => l_val_columna,
                             p_num_paso_possivel => l_num_paso);
     --
     mx('p_valida_paso - p_num_paso_possivel', l_num_paso);
     --
     IF l_val_columna <> l_num_paso THEN
       --
       mx('p_valida_paso (l_val_columna <> l_num_paso)', 'SE O PASSO GRAVADO EH DIFERENTE DO PROXIMO PASSO');
       --
       IF NOT em_k_g9999994_vcr.f_existe THEN
         --Valida se o passo esta cadastrado na tabela
         --
         mx('p_valida_paso (NOT em_k_g9999994_vcr.f_existe)', 'Valida se o passo esta cadastrado na tabela');
         --
         IF em_k_g9999994_vcr.f_valida_cadastro_paso(p_cod_cia    => l_cod_cia,
                                                     p_cod_ramo   => l_cod_ramo,
                                                     p_cod_tarifa => l_cod_tarifa,
                                                     p_cod_agt    => l_cod_agt,
                                                     p_num_paso   => l_num_paso) THEN
           --Se encontrou passo destino cadastrado, significa que o passo precisa ser validado
           --
           mx('p_valida_paso (em_k_g9999994_vcr.f_valida_cadastro_paso)', 'Se encontrou passo destino cadastrado, significa que o passo precisa ser validado');
           --
           l_reg_msg_erro := fp_trata_msg('NUM_PASO',
                                          NULL,
                                          g_k_pre_msg_erro || '2' || g_k_sep_cod_msg);
           --
           g_err_msg.EXTEND(1); -- 4.99
           g_err_msg(g_err_msg.LAST) := l_reg_msg_erro; -- 4.99
           --
         ELSE
           --
           mx('p_valida_paso (em_k_g9999994_vcr.f_valida_cadastro_paso)', 'Se NAO encontrou passo destino cadastrado');
           --
           l_reg_msg_erro := fp_trata_msg('NUM_PASO',
                                          NULL,
                                          g_k_pre_msg_erro || '3' || g_k_sep_cod_msg);
           --
           g_err_msg.EXTEND(1); -- 4.99
           g_err_msg(g_err_msg.LAST) := l_reg_msg_erro; -- 4.99
           --
         END IF;
         --
       END IF;
       --
     END IF;
     --
     mx('F', 'p_valida_paso');
     --
   EXCEPTION
     WHEN OTHERS THEN
       --
       mx('p_valida_paso - EXCEPTION', 'Erro ao Validar Passo da Cotacao.');
       --
       l_reg_msg_erro := fp_trata_msg('NUM_PASO',
                                      NULL,
                                      g_k_pre_msg_erro || '20098400' ||  g_k_sep_cod_msg || 'Erro ao Validar Passo da Cotacao.');
       --
       g_err_msg.EXTEND(1); -- 4.99
       g_err_msg(g_err_msg.LAST) := l_reg_msg_erro; -- 4.99
       --
   END p_valida_paso;

   --
   /* ----------------------------------------------------
   || Processa o calculo de pacotes de cotacao
   */ ----------------------------------------------------
   --
   PROCEDURE p_calcula  IS
      --
      l_cod_cia              G9999992.cod_cia%TYPE;
      l_cod_ramo             G9999992.cod_ramo%TYPE;
      l_cod_tarifa           G9999992.cod_tarifa%TYPE;
      l_cod_agt              G9999992.cod_agt%TYPE;
      l_num_cotizacion       C2009030_vcr.num_cotizacion%TYPE;
      l_num_paso             G9999992.num_paso%TYPE;
      l_obs_proceso          a2000520.txt_error%TYPE;
      l_num_cotizaciontmp    c2000000.num_cotizacion%TYPE      ; --2.14
      --
      l_val_qtd_pacotes    NUMBER; --2.14
      l_eh_3_pacotes         BOOLEAN; --2.14
      l_tip_produto     g2109142_vcr.tip_produto       %TYPE ; --2.17
      --
   BEGIN
      --
      mx('I', 'p_calcula');
      --
      l_cod_cia         := trn_k_global.devuelve('cod_cia');
      l_cod_ramo        := trn_k_global.devuelve('cod_ramo');
      l_cod_tarifa      := trn_k_global.devuelve('cod_tarifa');
      l_cod_agt         := trn_k_global.devuelve('cod_agt');
      l_num_paso        := trn_k_global.devuelve('num_paso');
      l_num_cotizacion  := trn_k_global.devuelve('num_cotizacion');
      --
      mx('l_cod_cia'       , l_cod_cia);
      mx('l_cod_ramo'      , l_cod_ramo);
      mx('l_cod_tarifa'    , l_cod_tarifa);
      mx('l_cod_agt'       , l_cod_agt);
      mx('l_num_paso'      , l_num_paso);
      mx('l_num_cotizacion', l_num_cotizacion);
      mx('l_num_simulacion', trn_k_global.devuelve('num_simulacion'));
      --
      trn_k_global.asigna('cod_usr', g_cod_usr_automatico);
      --
      mx('VAL_CLAVE_FORMULA', trn_k_global.ref_f_global('VAL_CLAVE_FORMULA'));
      --
      g_err_msg := TYPTAB_MSG_WS(); -- 4.99
      --
      -- 4.99I
      --IF trn_k_global.ref_f_global('MCA_CONVIVENCIA') = trn.SI -- 3.80.1   -- v3.45
      --THEN
         pp_inicializa_variables;
      --END IF;
      -- 4.993F
      IF NVL(trn_k_global.ref_f_global('MCA_POLIZA_GRUPO'),'N') = 'S' or
         NVL(trn_k_global.ref_f_global('COD_SERVICIO'),-1) = g_k_cod_srv_flotas
      THEN
         --
         l_eh_3_pacotes := FALSE;
         --
      ELSE
         --

         ea_k_231_utils.p_devuelve_dato_cotizacion(p_nom_tabla   => ea_k_231_utils.g_k_tabla_dv,
                                                   p_nom_columna => 'TIP_PRODUTO'              ,
                                                   p_val_campo   => l_tip_produto);      -- 2.20
         --


         l_eh_3_pacotes := NVL(trn_k_global.ref_f_global('tres_pacotes'), 0) > 0; -- 3.47 -- 4.99I
         --
         IF NOT l_eh_3_pacotes THEN
            --
            l_eh_3_pacotes := ea_k_g2109142_vcr.f_eh_3_pacotes(l_cod_cia,
                                                               l_cod_ramo,
                                                               l_cod_agt,
                                                               l_tip_produto);
           --
          IF l_eh_3_pacotes THEN
            --
            pp_asigna('tres_pacotes', trn.UNO);
            --
          ELSE
            --
            pp_asigna('tres_pacotes', trn.CERO);
            --
          END IF;
          --
         END IF;
         -- 4.99F

     --
     --
      /*      IF l_eh_3_pacotes THEN -- 2.89
       --
       DELETE c2009040_vcr
        WHERE cod_cia = l_cod_cia
        AND cod_ramo = l_cod_ramo
        AND num_cotizacion = l_num_cotizacion;
       --
       DELETE c2109170_vcr
        WHERE cod_cia = l_cod_cia
        AND cod_ramo = l_cod_ramo
        AND num_cotizacion = l_num_cotizacion;
       --
      END IF; -- 2.89*/
      -- v3.31 *Comentado, pois as tabelas de cotacoes estao sendo limpas na rotina pp_limpa_coberturas*
      --
      END IF;
      --
      BEGIN
         --
         pp_pre_calculo;
         --
         IF NVL(trn_k_global.ref_f_global('mca_cambio_rf'), trn.SI) = trn.SI --v2.33
         THEN
           --
           ea_k_231_coti.p_proceso(l_num_cotizacion, l_obs_proceso);
           --
         ELSE --v2.33
           --
           l_obs_proceso := g_k_tip_obs_ok;
           --
         END IF;
         --
         IF l_obs_proceso <> g_k_tip_obs_ok and NVL(trn_k_global.ref_f_global('ERRO_DV_COB'), trn.NO) = trn.NO THEN -- v5.13
            --
            g_cod_mensaje    := g_k_cod_error_gen;
            g_anx_mensaje    := l_obs_proceso;
            --
            g_err_msg.EXTEND(1); -- 4.99
            g_err_msg(g_err_msg.LAST) := fp_trata_msg('COD_RETORNO', NULL, g_k_pre_msg_erro || '20098402' || g_k_sep_cod_msg || g_anx_mensaje); -- 4.99
            --
            g_err_msg.EXTEND(1);  -- v5.14
            g_err_msg(g_err_msg.LAST) := fp_trata_msg('COD_RETORNO', NULL, g_k_pre_msg_erro || '20098402' || g_k_sep_cod_msg || g_anx_mensaje); -- v5.14
            --
            mx('p_calcula - erro: ', l_obs_proceso);
            --
         END IF;
         --
      EXCEPTION
         WHEN OTHERS THEN
            --
            g_cod_mensaje    := g_k_cod_error_gen;
            g_anx_mensaje    := SQLERRM;
            --
            mx('p_calcula - erro: ' || g_k_cod_error_gen, SQLERRM);
            --
            g_err_msg.EXTEND(1); -- 4.99
            g_err_msg(g_err_msg.LAST) := fp_trata_msg('COD_RETORNO', NULL, g_k_pre_msg_erro || '20098400' || g_k_sep_cod_msg || g_anx_mensaje); -- 4.99
            --
            mx('p_calcula - erro: ', l_obs_proceso);
            --
      END;
      --
      IF l_obs_proceso = g_k_tip_obs_ok THEN
         --
         mx('--','IF l_obs_proceso = g_k_tip_obs_ok THEN');
         --
         IF l_eh_3_pacotes THEN --I 2.14
            --
            l_val_qtd_pacotes := TO_NUMBER( trn_k_global.devuelve('VAL_QTD_PACOTES')); -- 2.14
            --
            FOR  l_simu IN REVERSE  1 .. l_val_qtd_pacotes LOOP -- 2.14
               --
               trn_k_global.asigna('NUM_SIMULACION'  , l_simu );
               pp_cuotas_cotizacion;
               --
            END LOOP ;
            --
         ELSE
            --
            IF NVL(trn_k_global.ref_f_global('mca_cambio_rf'), trn.SI) = trn.SI
            THEN --v2.33
               --
               pp_cuotas_cotizacion;
               --
            END IF;
            --
         END IF; -- 2.14
         --
         g_cod_mensaje    := g_k_cod_error_gen;
         g_anx_mensaje    := NULL;
         --
         g_err_msg.EXTEND(1); -- 4.99
         g_err_msg(g_err_msg.LAST) := fp_trata_msg('COD_RETORNO_COTACAO', NULL, g_k_pre_msg_erro || '6' || g_k_sep_cod_msg || g_anx_mensaje); -- 4.99
         --
      END IF;
      --
      mx('F', 'p_calcula');
      --
   EXCEPTION
      WHEN OTHERS THEN
         --
         mx('p_calcula - EXCEPTION', SQLERRM);
         --
         g_cod_mensaje    := g_k_cod_error_gen;
         g_anx_mensaje    := SQLERRM;
         --
         g_err_msg.EXTEND(1); -- 4.99
         g_err_msg(g_err_msg.LAST) := fp_trata_msg('COD_RETORNO', -- 4.99
                                                                                   NULL,
                                                                                   g_k_pre_msg_erro || '20098402' || g_k_sep_cod_msg || SQLERRM || ' - EXCEPTION');
         --
         mx('F', 'p_calcula - EXCEPTION');
         --
   END p_calcula;
   --
   /* -----------------------------------------
   || p_inserta_c2000020                     :
   */ -----------------------------------------
   --
   PROCEDURE p_inserta_c2000020(p_cod_cia        IN c2000020.cod_cia       %TYPE,
                                p_cod_ramo       IN c2000020.cod_ramo      %TYPE,
                                p_num_simulacion IN c2000020.num_simulacion%TYPE,
                                p_cod_campo      IN c2000020.cod_campo     %TYPE,
                                p_val_campo      IN c2000020.val_campo     %TYPE)
   IS
   --
   BEGIN
      --
      mx('I', 'pp_inserta_c2000002');
      --
      BEGIN
         --
         INSERT INTO c2000020 (cod_cia       ,
                               cod_ramo      ,
                               num_simulacion,
                               cod_campo     ,
                               val_campo     )
                    VALUES (p_cod_cia        ,
                            p_cod_ramo       ,
                            p_num_simulacion ,
                            p_cod_campo      ,
                            p_val_campo      );
         --
      EXCEPTION
         WHEN DUP_VAL_ON_INDEX
         THEN
            --
            UPDATE c2000020
               SET val_campo      = p_val_campo
             WHERE cod_cia        = p_cod_cia
               AND cod_ramo       = p_cod_ramo
               AND num_simulacion = p_num_simulacion
               AND cod_campo      = p_cod_campo;
            --
      END;
      --
      mx('F', 'pp_inserta_c2000020');
      --
   END p_inserta_c2000020;
   --
   /* ----------------------------------------------------
   || Processa o calculo de pacotes de cotacao 2.13
   */ ----------------------------------------------------
   --

   PROCEDURE p_calcula_pacote IS
   --
   l_val_qtd_pacotes      c2000000.nom_columna%TYPE;
   --
   l_tip_merc_deter       c2000000.nom_columna%TYPE;
   l_tip_merc_deter_1     c2000000.nom_columna%TYPE;
   l_tip_merc_deter_2     c2000000.nom_columna%TYPE;
   l_tip_merc_deter_3     c2000000.nom_columna%TYPE;
   --
   l_pct_ajuste_tab_ref   c2000000.nom_columna%TYPE;
   l_pct_ajuste_tab_ref_1 c2000000.nom_columna%TYPE;
   l_pct_ajuste_tab_ref_2 c2000000.nom_columna%TYPE;
   l_pct_ajuste_tab_ref_3 c2000000.nom_columna%TYPE;
   --
   l_val_sub_modelo       c2000000.nom_columna%TYPE;
   l_val_sub_modelo_1     c2000000.nom_columna%TYPE;
   l_val_sub_modelo_2     c2000000.nom_columna%TYPE;
   l_val_sub_modelo_3     c2000000.nom_columna%TYPE;
   --
   l_tip_franquia         c2000000.nom_columna%TYPE;
   l_tip_franquia_1       c2000000.nom_columna%TYPE;
   l_tip_franquia_2       c2000000.nom_columna%TYPE;
   l_tip_franquia_3       c2000000.nom_columna%TYPE;
   --
   l_reg_c2000000         c2000000         %ROWTYPE;
   l_val_clave_formula g2109040_vcr.val_clave_formula%TYPE;
   l_cod_tarifa g2109140_vcr.cod_tarifa %TYPE;
   l_tip_pacote g2109040_vcr.tip_pacote %TYPE;
   --
   BEGIN
     --
     mx('I', 'p_calcula_pacote');
     --
     l_tip_merc_deter   := ea_k_231_utils.f_valor_dv('TIP_MERC_DETER');
     l_tip_merc_deter_1 := ea_k_231_utils.f_valor_dv('TIP_MERC_DETER#1');
     l_tip_merc_deter_2 := ea_k_231_utils.f_valor_dv('TIP_MERC_DETER#2');
     l_tip_merc_deter_3 := ea_k_231_utils.f_valor_dv('TIP_MERC_DETER#3');
     --
     l_pct_ajuste_tab_ref   := ea_k_231_utils.f_valor_dv('PCT_AJUSTE_TAB_REF');
     l_pct_ajuste_tab_ref_1 := ea_k_231_utils.f_valor_dv('PCT_AJUSTE_TAB_REF#1');
     l_pct_ajuste_tab_ref_2 := ea_k_231_utils.f_valor_dv('PCT_AJUSTE_TAB_REF#2');
     l_pct_ajuste_tab_ref_3 := ea_k_231_utils.f_valor_dv('PCT_AJUSTE_TAB_REF#3');
     --
     l_val_sub_modelo   := ea_k_231_utils.f_valor_dv('VAL_SUB_MODELO');
     l_val_sub_modelo_1 := ea_k_231_utils.f_valor_dv('VAL_SUB_MODELO#1');
     l_val_sub_modelo_2 := ea_k_231_utils.f_valor_dv('VAL_SUB_MODELO#2');
     l_val_sub_modelo_3 := ea_k_231_utils.f_valor_dv('VAL_SUB_MODELO#3');
     --
     l_tip_franquia   := ea_k_231_utils.f_valor_dv('TIP_FRANQUIA');
     l_tip_franquia_1 := ea_k_231_utils.f_valor_dv('TIP_FRANQUIA#1');
     l_tip_franquia_2 := ea_k_231_utils.f_valor_dv('TIP_FRANQUIA#2');
     l_tip_franquia_3 := ea_k_231_utils.f_valor_dv('TIP_FRANQUIA#3');
     --
     l_reg_c2000000.cod_cia := trn_k_global.devuelve('COD_CIA');
     l_reg_c2000000.cod_ramo := trn_k_global.devuelve('COD_RAMO');
     l_reg_c2000000.num_cotizacion := trn_k_global.devuelve('NUM_COTIZACION');
     l_reg_c2000000.nom_tabla := g_k_tabla_dv;
     l_reg_c2000000.cod_fila := 99999;
     --
     IF (l_tip_merc_deter != l_tip_merc_deter_1) OR (l_pct_ajuste_tab_ref != l_pct_ajuste_tab_ref_1) OR
       (l_val_sub_modelo != l_val_sub_modelo_1) OR (l_tip_franquia != l_tip_franquia_1)
     THEN
       --
       l_reg_c2000000.nom_columna := 'TIP_MERC_DETER#1';
       l_reg_c2000000.val_columna := l_tip_merc_deter_1;
       em_k_c2000000.p_inserta_borrando(p_reg => l_reg_c2000000);
       --
       l_reg_c2000000.nom_columna := 'PCT_AJUSTE_TAB_REF#1';
       l_reg_c2000000.val_columna := l_pct_ajuste_tab_ref_1;
       em_k_c2000000.p_inserta_borrando(p_reg => l_reg_c2000000);
       --
       l_reg_c2000000.nom_columna := 'VAL_SUB_MODELO#1';
       l_reg_c2000000.val_columna := l_val_sub_modelo_1;
       em_k_c2000000.p_inserta_borrando(p_reg => l_reg_c2000000);
       --
       l_reg_c2000000.nom_columna := 'TIP_FRANQUIA#1';
       l_reg_c2000000.val_columna := l_tip_franquia_1;
       em_k_c2000000.p_inserta_borrando(p_reg => l_reg_c2000000);
       --

     END IF;
     --
     IF (l_tip_merc_deter != l_tip_merc_deter_2) OR (l_pct_ajuste_tab_ref != l_pct_ajuste_tab_ref_2) OR
       (l_val_sub_modelo != l_val_sub_modelo_2) OR (l_tip_franquia != l_tip_franquia_2)
     THEN
       --
       l_reg_c2000000.nom_columna := 'TIP_MERC_DETER#2';
       l_reg_c2000000.val_columna := l_tip_merc_deter_2;
       em_k_c2000000.p_inserta_borrando(p_reg => l_reg_c2000000);
       --
       l_reg_c2000000.nom_columna := 'PCT_AJUSTE_TAB_REF#2';
       l_reg_c2000000.val_columna := l_pct_ajuste_tab_ref_2;
       em_k_c2000000.p_inserta_borrando(p_reg => l_reg_c2000000);
       --
       l_reg_c2000000.nom_columna := 'VAL_SUB_MODELO#2';
       l_reg_c2000000.val_columna := l_val_sub_modelo_2;
       em_k_c2000000.p_inserta_borrando(p_reg => l_reg_c2000000);
       --
       l_reg_c2000000.nom_columna := 'TIP_FRANQUIA#2';
       l_reg_c2000000.val_columna := l_tip_franquia_2;
       em_k_c2000000.p_inserta_borrando(p_reg => l_reg_c2000000);
     --
     END IF;
     --
     IF (l_tip_merc_deter != l_tip_merc_deter_3) OR (l_pct_ajuste_tab_ref != l_pct_ajuste_tab_ref_3) OR
       (l_val_sub_modelo != l_val_sub_modelo_3) OR (l_tip_franquia != l_tip_franquia_3)
     THEN
       --
       l_reg_c2000000.nom_columna := 'TIP_MERC_DETER#3';
       l_reg_c2000000.val_columna := l_tip_merc_deter_3;
       em_k_c2000000.p_inserta_borrando(p_reg => l_reg_c2000000);
       --
       l_reg_c2000000.nom_columna := 'PCT_AJUSTE_TAB_REF#3';
       l_reg_c2000000.val_columna := l_pct_ajuste_tab_ref_3;
       em_k_c2000000.p_inserta_borrando(p_reg => l_reg_c2000000);
       --
       l_reg_c2000000.nom_columna := 'VAL_SUB_MODELO#3';
       l_reg_c2000000.val_columna := l_val_sub_modelo_3;
       em_k_c2000000.p_inserta_borrando(p_reg => l_reg_c2000000);
       --
       l_reg_c2000000.nom_columna := 'TIP_FRANQUIA#3';
       l_reg_c2000000.val_columna := l_tip_franquia_3;
       em_k_c2000000.p_inserta_borrando(p_reg => l_reg_c2000000);
       --

     END IF;
     --
     FOR simulacion IN 1..3 loop

      ea_k_231_utils.p_devuelve_dato_cotizacion(ea_k_231_coti.g_k_tabla_simulacion,
      'VAL_CLAVE_FORMULA#'||simulacion,
      l_val_clave_formula);
      ea_k_231_utils.p_devuelve_dato_cotizacion(ea_k_231_coti.g_k_tabla_simulacion,
      'TIP_PACOTE#'||simulacion,
      l_tip_pacote);

      p_inserta_c2000020(p_cod_cia => trn_k_global.devuelve('COD_CIA'),
                                  p_cod_ramo       => trn_k_global.devuelve('COD_RAMO'),
                                  p_num_simulacion => simulacion,
                                  p_cod_campo      => 'TIP_MERC_DETER',
                                  p_val_campo      => ea_k_231_utils.f_valor_dv('TIP_MERC_DETER#'||simulacion));

       p_inserta_c2000020(p_cod_cia => trn_k_global.devuelve('COD_CIA'),
                                  p_cod_ramo       => trn_k_global.devuelve('COD_RAMO'),
                                  p_num_simulacion => simulacion,
                                  p_cod_campo      => 'VAL_SUB_MODELO',
                                  p_val_campo      => ea_k_231_utils.f_valor_dv('VAL_SUB_MODELO#'||simulacion));

       p_inserta_c2000020(p_cod_cia => trn_k_global.devuelve('COD_CIA'),
                                  p_cod_ramo       => trn_k_global.devuelve('COD_RAMO'),
                                  p_num_simulacion => simulacion,
                                  p_cod_campo      => 'PCT_AJUSTE_TAB_REF',
                                  p_val_campo      => ea_k_231_utils.f_valor_dv('PCT_AJUSTE_TAB_REF#'||simulacion));
       p_inserta_c2000020(p_cod_cia => trn_k_global.devuelve('COD_CIA'),
                                  p_cod_ramo       => trn_k_global.devuelve('COD_RAMO'),
                                  p_num_simulacion => simulacion,
                                  p_cod_campo      => 'TIP_FRANQUIA',
                                  p_val_campo      => ea_k_231_utils.f_valor_dv('TIP_FRANQUIA#'||simulacion));

     ea_k_definicion_pacote.p_carga_coberturas(simulacion,FALSE);
     ea_k_231_coti.p_carga_cobertura
            (l_val_clave_formula
            ,simulacion
            ,ea_k_231_utils.f_valor_dv('COD_TARIFA')
            ,l_tip_pacote);

    trn_k_global.asigna('num_simulacion' ,simulacion);

    ea_k_231_coti.p_recalculo;
    --
    pp_cuotas_cotizacion; -- recalcula as cotas
    --
    pp_carga_c2000020_franq_dv;
    --

    END loop;
     --
     EXCEPTION
     WHEN OTHERS THEN
        --
        mx('p_calcula_pacote - EXCEPTION', SQLERRM);
        --
        g_cod_mensaje    := g_k_cod_error_gen;
        g_anx_mensaje    := SQLERRM;
        --
     --
     mx('F', 'p_calcula_pacote');
     --
   END p_calcula_pacote;
   --
   --
   /* ----------------------------------------------------
   || Processo de cancelamento
   */ ----------------------------------------------------
   --
   PROCEDURE p_processa_cancelamento
   IS
      --
      l_tip_mvto_batch    A2000500.tip_mvto_batch%TYPE;
      --
      l_imp_premio_pago   a2990700.imp_neta%TYPE := trn.CERO;
      l_imp_premio_total  a2990700.imp_neta%TYPE := trn.CERO;
      l_imp_restituicao   a2990700.imp_neta%TYPE := trn.CERO;
      --
      l_cod_tip_spto      df_cmn_nwt_xx_cnn.vrb_nam_val%TYPE;
      l_sub_cod_spto      df_cmn_nwt_xx_cnn.vrb_nam_val%TYPE;
      --
   BEGIN
     --
     mx('I','p_processa_cancelamento');
     --
     l_tip_mvto_batch := trn_k_global.devuelve('TIP_MVTO_BATCH');
     --
     IF l_tip_mvto_batch = g_k_tip_mvto_batch_endosso THEN
       --
       pp_asigna('fec_efec_spto'  ,g_k_data);
       --
       l_cod_tip_spto := trn_k_df_cmn_nwt_xx_cnn.f_vrb_nam_val('COD_SPTO_AP');
       l_sub_cod_spto := trn_k_df_cmn_nwt_xx_cnn.f_vrb_nam_val('SUB_COD_SPTO_SEGURADO');
       --
       pp_calcula_restituicao(trn_k_global.cod_cia,
                              l_cod_tip_spto      ,
                              l_sub_cod_spto      ,
                              l_imp_premio_pago   ,
                              l_imp_premio_total  ,
                              l_imp_restituicao   );
       --
       IF l_imp_restituicao <> trn.CERO THEN
          --
          pp_restituicao_endosso;
          --
       ELSE
          --
          pp_cancelamento_endosso;
          --
       END IF;
       --
       g_mca_cancelamento := trn.SI;
       --
       trn_k_global.asigna('mca_cancelamento',g_mca_cancelamento); --v 3.53
       --
     END IF;
     --
     mx('F','p_processa_cancelamento');
     --
   END p_processa_cancelamento;
   --
   /* ----------------------------------------------------
   || Processa o recalculo de pacotes de cotacao
   */ ----------------------------------------------------
   --
   PROCEDURE p_recalcula
   IS
      --
      l_num_simulacion           c2000040.num_simulacion%TYPE;
      l_anx_mensaje              VARCHAR2(250);
      l_cod_error_mensaje        VARCHAR2(8);
      l_error_mensaje            VARCHAR2(250);
      --
      l_trn                      NUMBER := TRN.CERO;
      --
      num_qtdd_simulacoes        NUMBER;
      --
      l_qtdd_erro                NUMBER := 0;
      --
      l_retorno                  SYS_REFCURSOR;
      --
      reg_c2009040_vcr           c2009040_vcr%ROWTYPE;
      --
      cod_cob_info               df_cmn_nwt_xx_vrb_cnc.row_val_val%TYPE;
      --
      l_eh_3_pacotes       BOOLEAN ; --2.14
      l_tip_produto     g2109142_vcr.tip_produto       %TYPE ; --2.17
      l_cod_agt         g2109142_vcr.cod_agt           %TYPE ; --2.17
      --
      CURSOR c_coberturas
      IS
          SELECT
             COBERTURAS.NUM_SIMULACION
          FROM
             TABLE(CAST(g_cob_dados AS TYPTAB_DADOS_COB)) COBERTURAS
          GROUP BY
             COBERTURAS.NUM_SIMULACION;
   BEGIN
      --
      mx('I', 'p_recalcula');
      --
      IF NVL(trn_k_global.ref_f_global('MCA_POLIZA_GRUPO'),'N') = 'S' or
         NVL(trn_k_global.ref_f_global('COD_SERVICIO'),-1) = g_k_cod_srv_flotas THEN
        --
        l_eh_3_pacotes := FALSE;
        --
      ELSE
        --
        ea_k_231_utils.p_devuelve_dato_cotizacion(p_nom_tabla   => ea_k_231_utils.g_k_tabla_dv,
                                                  p_nom_columna => 'TIP_PRODUTO'              ,
                                                  p_val_campo   => l_tip_produto);      -- 2.20
        --
        l_cod_agt     := trn_k_global.devuelve( 'COD_AGT' );-- 2.17
        --
        l_eh_3_pacotes := ea_k_g2109142_vcr.f_eh_3_pacotes(g_cod_cia, --2.70
                                                           g_cod_ramo,
                                                           l_cod_agt,
                                                           l_tip_produto); -- 2.17
       --
       -- I 3.47
       IF l_eh_3_pacotes THEN
        --
        pp_asigna('tres_pacotes',1);
        --
       ELSE
        --
        pp_asigna('tres_pacotes',0);
        --
       END IF;
       -- F 3.47
      --
      END IF;
      --I 2.38
      IF l_eh_3_pacotes THEN
        --
        ea_k_231_utils.p_devuelve_dato_cotizacion(p_nom_tabla   => ea_k_231_coti.g_k_tabla_simulacion,
                                                  p_nom_columna => 'NUM_SIMULACION'              ,
                                                  p_val_campo   => l_num_simulacion);
        --
        IF l_num_simulacion IS NOT NULL THEN
          --
           trn_k_global.asigna('num_simulacion', l_num_simulacion);
          --
        END IF;
        --
      END IF;
      --F 2.38
      pp_pre_calculo;
      --
      FOR reg_coberturas IN c_coberturas
      LOOP
         --
         mx('p_recalcula: num_simulacion: ', reg_coberturas.NUM_SIMULACION );
         --
         trn_k_global.asigna('num_simulacion', reg_coberturas.NUM_SIMULACION);
         --
         IF l_eh_3_pacotes THEN --I 2.14
           --
           ea_k_definicion_pacote.p_carga_coberturas(reg_coberturas.NUM_SIMULACION,TRUE); -- 2.14
           --
         END IF; -- 2.14
         --
         pp_valida_cob_casco(l_qtdd_erro);
         --
         IF l_qtdd_erro = trn.CERO THEN
             --
             pp_carga_cob_c2000040;
             --
             pp_carga_cob_c2000020;
             --
             BEGIN
                --
                ea_k_231_coti.p_recalculo;
                --
                pp_cuotas_cotizacion;
                --
                pp_carga_c2000020_franq_dv;
                --
             EXCEPTION
             WHEN OTHERS THEN
                --
                g_cod_mensaje    := g_k_cod_error_gen;
                l_anx_mensaje    := NVL(SUBSTR(SQLERRM,INSTR(SQLERRM,g_k_separador_col) + trn.UNO),SQLERRM);
                l_trn            := INSTR (l_anx_mensaje, 'TRN');
                --
                mx('-', 'l_anx_mensaje: ' || l_anx_mensaje);
                mx('-', 'l_trn        : ' || l_trn);
                --
                IF l_trn <> TRN.cero
                THEN
                   --
                   g_anx_mensaje := SUBSTR(l_anx_mensaje,INSTR(l_anx_mensaje,'-') + 1,((INSTR(l_anx_mensaje,':') -1) - INSTR(l_anx_mensaje,'-')));
                   --
                   mx('-', 'g_anx_mensaje[1]: ' || g_anx_mensaje);
                   --
                   IF LENGTH(g_anx_mensaje) = 8 THEN
                      --
                      l_cod_error_mensaje := g_anx_mensaje;
                      --
                      g_anx_mensaje := SUBSTR(l_anx_mensaje, INSTR(l_anx_mensaje,'-') + LENGTH(g_anx_mensaje) + 2,LENGTH(l_anx_mensaje));
                      --
                      l_error_mensaje := g_anx_mensaje;
                      --
                      mx('-', 'g_anx_mensaje[2]: ' || g_anx_mensaje);
                      --
                   END IF;
                   --
                ELSE
                   --
                   g_anx_mensaje := NVL(SUBSTR(SQLERRM,INSTR(SQLERRM,g_k_separador_col) + trn.UNO),SQLERRM);
                   --
                   mx('-', 'g_anx_mensaje[3]: ' || g_anx_mensaje);
                   --
                END IF;
                --
                mx('-', 'l_cod_error_mensaje: ' || l_cod_error_mensaje);
                --
                IF l_cod_error_mensaje IS NULL
                THEN
                  --
                  mx('-', 'Opcion 1 20098403');
                  --
                  l_error_mensaje := g_k_pre_msg_erro ||
                                     '20098403' ||
                                     g_k_sep_cod_msg ||
                                     g_anx_mensaje;
                  --
                END IF;
                --
                mx('-', 'l_error_mensaje: ' || l_error_mensaje);
                --
                g_err_msg.EXTEND(1); -- 4.99
                g_err_msg(g_err_msg.LAST) := fp_trata_msg('COD_RETORNO', -- 4.99
                                                                                          l_cod_error_mensaje,
                                                                                          l_error_mensaje);
                --
             END;
             --
             IF l_retorno%ISOPEN
             THEN
               --
               CLOSE l_retorno;
               --
             END IF;
             --
             OPEN l_retorno
              FOR
                SELECT *
                  FROM c2009040_vcr c
                 WHERE c.cod_cia          = g_cod_cia
                   AND c.cod_ramo         = g_cod_ramo
                   AND c.num_cotizacion   = trn_k_global.ref_f_global('num_cotizacion')
                   AND c.num_simulacion   = trn_k_global.ref_f_global('num_simulacion')
                   AND c.num_riesgo       = trn.UNO
              ORDER BY c.cod_cob;
             --
             LOOP
               --
               FETCH l_retorno INTO reg_c2009040_vcr;
               EXIT WHEN l_retorno%NOTFOUND;
               --
               IF trn_k_df_cmn_nwt_xx_vrb_cnc.f_row_val_exist(p_vrb_nam => 'COD_COB_INFO'
                                                             ,p_cnc_vrb_val => reg_c2009040_vcr.cod_cob)
               THEN
                 --
                 cod_cob_info := trn_k_df_cmn_nwt_xx_vrb_cnc.f_row_val_val(p_vrb_nam => 'COD_COB_INFO'
                                                                          ,p_cnc_vrb_val => reg_c2009040_vcr.cod_cob);
                 --
                 g_err_msg.EXTEND(1); -- 4.99
                 g_err_msg(g_err_msg.LAST) := fp_trata_msg('COD_COB#'||reg_c2009040_vcr.cod_cob -- 4.99
                                                                                           ,NULL
                                                                                           ,g_k_pre_msg_erro || cod_cob_info || g_k_sep_cod_msg);
                   --
               END IF;
               --
             END LOOP;
             --
             CLOSE l_retorno;
             --
         END IF;
      END LOOP;
      --
      mx('F','p_recalcula');
      --
      EXCEPTION
     WHEN OTHERS THEN
        --
        mx('p_recalcula - EXCEPTION',SQLERRM);
        --
        g_cod_mensaje    := g_k_cod_error_gen;
        g_anx_mensaje    := SQLERRM;
        --
        mx('-', 'Opcion 2 20098403');
        --
        g_err_msg.EXTEND(1); -- 4.99
        g_err_msg(g_err_msg.LAST) := fp_trata_msg('COD_RETORNO', -- 4.99
                                                                                  NULL,
                                                                                   g_k_pre_msg_erro || '20098403' || g_k_sep_cod_msg || 'Simulacao: ' || l_num_simulacion || SQLERRM || ' - EXCEPTION');
        --
        mx('F', 'p_recalcula - EXCEPTION');
        --
   END p_recalcula;
   --
   /* ----------------------------------------------------
   || Processar p_carga_presupuesto
   */ ----------------------------------------------------
   --
   PROCEDURE p_carga_presupuesto IS
      --
      l_cod_cia          G9999992.cod_cia%TYPE;
      l_cod_ramo         G9999992.cod_ramo%TYPE;
      l_cod_tarifa       G9999992.cod_tarifa%TYPE;
      l_cod_agt          G9999992.cod_agt%TYPE;
      l_num_cotizacion   C2009030_vcr.num_cotizacion%TYPE;
      l_num_simulacion   c2000020.num_simulacion%TYPE;
      l_num_paso         G9999992.num_paso%TYPE;
      l_num_presupuesto  p2000030.num_presupuesto%TYPE;
      --
      l_trava_efetivacao VARCHAR2(1);
      --
      l_eh_3_pacotes       BOOLEAN ; --2.14
      l_tip_produto     g2109142_vcr.tip_produto       %TYPE ; --2.17
      --
      FUNCTION fp_habilita_trava RETURN BOOLEAN AS
      BEGIN
        --
        ss_k_g1010107.p_lee(p_cod_usr             => trn_k_global.cod_usr
                           ,p_cod_grupo           => 'DEFECTO'
                           ,p_txt_nombre_variable => 'HABILITA.TRAVA');
        --
        RETURN (NVL(ss_k_g1010107.f_txt_valor_variable, trn.SI) = trn.SI);
        --
      EXCEPTION
        WHEN OTHERS
        THEN
          --
          RETURN TRUE;
          --
      END fp_habilita_trava;
      --
   BEGIN
      --
      mx('I', 'p_carga_presupuesto');
      --
      l_cod_cia         := trn_k_global.devuelve('COD_CIA');
      l_cod_ramo        := trn_k_global.devuelve('COD_RAMO');
      l_cod_tarifa      := trn_k_global.devuelve('COD_TARIFA');
      l_cod_agt         := trn_k_global.devuelve('COD_AGT');
      l_num_paso        := trn_k_global.devuelve('NUM_PASO');
      l_num_cotizacion  := trn_k_global.devuelve('NUM_COTIZACION');
      IF NVL(trn_k_global.ref_f_global('MCA_POLIZA_GRUPO'),'N') = 'S' or
         NVL(trn_k_global.ref_f_global('COD_SERVICIO'),-1) = g_k_cod_srv_flotas THEN
        --
        l_eh_3_pacotes := FALSE;
        --
      ELSE
        --
        ea_k_231_utils.p_devuelve_dato_cotizacion(p_nom_tabla   => ea_k_231_utils.g_k_tabla_dv,
                                                  p_nom_columna => 'TIP_PRODUTO'              ,
                                                  p_val_campo   => l_tip_produto);      -- 2.20
        --
        l_eh_3_pacotes := NVL(trn_k_global.ref_f_global('tres_pacotes'), 0) > 0; -- 3.47 -- 4.99I
        --
        IF NOT l_eh_3_pacotes THEN
           --
           l_eh_3_pacotes := ea_k_g2109142_vcr.f_eh_3_pacotes(l_cod_cia,
                                                              l_cod_ramo,
                                                              l_cod_agt,
                                                              l_tip_produto);
           --
           IF l_eh_3_pacotes THEN
       --
             pp_asigna('tres_pacotes', trn.UNO);
       --
           ELSE
       --
             pp_asigna('tres_pacotes',trn.CERO);
       --
           END IF;
           --
        END IF;
         -- 4.99F
      --
      END IF ;
      ea_k_231_utils.p_devuelve_dato_cotizacion(ea_k_231_coti.g_k_tabla_simulacion,
                                                'NUM_SIMULACION',
                                                l_num_simulacion);
      --
      IF l_eh_3_pacotes THEN --I 2.14
        --
        ea_k_definicion_pacote.p_carga_coberturas(l_num_simulacion,TRUE);--2.14
        --
      END IF; --F2.14
      --
     IF l_cod_agt <> g_k_AC  THEN --5.33
      --
      -- I v4.89
       IF fp_habilita_trava THEN
        --
        pp_valida_efetivacao(l_cod_cia
                            ,l_cod_ramo
                            ,l_num_cotizacion);
        --
       END IF;
      -- F v4.89
      END IF; --5.33
      --
      l_num_presupuesto := em_f_crear_presupuesto(l_cod_cia,
                                                  l_cod_ramo,
                                                  l_num_cotizacion,
                                                  l_num_simulacion);
      --
      mx('F', 'p_carga_presupuesto');
      --
   EXCEPTION
      WHEN OTHERS THEN
         --
         ROLLBACK;
         --
         l_trava_efetivacao  := trn_k_global.ref_f_global('erro_trava');-- I V4.92
         --
         IF NVL(l_trava_efetivacao,trn.NO) = trn.NO THEN
           --
           g_txt_error      := SUBSTR(SQLERRM,1,2000);
           g_txt_ruta_error := SUBSTR('EM_K_GEN_WS.P_CARGA_PRESUPUESTO' || dbms_utility.format_error_backtrace,1,2000);
           --
           pp_log_erro(l_num_cotizacion ,
                       g_txt_error      ,
                       g_txt_ruta_error );
           --
           COMMIT;
           --
         END IF;
         --
         /*g_txt_error      := SUBSTR(SQLERRM,1,2000);
         g_txt_ruta_error := SUBSTR('EM_K_GEN_WS.P_CARGA_PRESUPUESTO' || dbms_utility.format_error_backtrace,1,2000);
         --
         pp_log_erro(l_num_cotizacion ,
                     g_txt_error      ,
                     g_txt_ruta_error );
         --
         COMMIT;*/
         --
         g_cod_mensaje    := g_k_cod_error_gen;
         g_anx_mensaje    := SUBSTR('Erro na carga da proposta: '|| dbms_utility.format_error_backtrace,
                             trn.CERO,
                             g_k_num_max_char);
         --
         mx('F', 'p_carga_presupuesto - EXCEPTION');
         --
         pp_devuelve_error;
         --

   END p_carga_presupuesto;
   --
   -- v1.98
   /* ----------------------------------------------------
   || Processar pp_trata_msg_ws
   */ ----------------------------------------------------
   --
   PROCEDURE pp_trata_msg_ws IS
     --
     li_anx_mensaje VARCHAR(350) := g_anx_mensaje;
     --
     PROCEDURE pi_valida_msg(p_cod_mensage g1010020.cod_mensaje%TYPE)
     IS
     --
     l_anx_mensaje VARCHAR2(350)            := trn.NULO                ;
     l_aux         NUMBER                   := trn.CERO                ;
     l_pos_ini     NUMBER                   := trn.CERO                ;
     l_cod_idioma  g1010020.cod_idioma%TYPE := trn_k_global.cod_idioma ;
     --
     BEGIN
       --
       l_pos_ini := INSTR(g_anx_mensaje, 'TRN-' || p_cod_mensage || ':' , trn.UNO);
       --
       IF l_pos_ini > trn.CERO
       THEN
         --
         l_anx_mensaje := SUBSTR(g_anx_mensaje
                                ,INSTR(g_anx_mensaje
                                      ,':'
                                      ,l_pos_ini + 13) + trn.UNO
                                ,LENGTH(g_anx_mensaje));
         --
         mx('l_anx_mensaje', l_anx_mensaje);
         --
         l_aux := INSTR(l_anx_mensaje, '<', trn.UNO);
         --
         IF l_aux > trn.CERO
         THEN
           --
           l_anx_mensaje := SUBSTR(l_anx_mensaje, trn.UNO, l_aux - 2);
           --
         END IF;
         --
         mx('l_anx_mensaje', l_anx_mensaje);
         --
         l_anx_mensaje := ss_k_mensaje.f_solo_texto_idioma(20098577
                                                          ,l_cod_idioma) ||
                          trn.BLANCO                                     ||
                          ss_k_mensaje.f_solo_texto_idioma(20098578
                                                          ,l_cod_idioma) ||
                          trn.BLANCO                                     ||
                          ss_k_mensaje.f_solo_texto_idioma(20098579
                                                          ,l_cod_idioma) ||
                          l_anx_mensaje                                  ||
                          ss_k_mensaje.f_solo_texto_idioma(20098580
                                                          ,l_cod_idioma) ||
                          trn.BLANCO                                     ||
                          ss_k_mensaje.f_solo_texto_idioma(20098583
                                                          ,l_cod_idioma);
         --
         mx('l_anx_mensaje', l_anx_mensaje);
         --
         g_anx_mensaje := SUBSTR(REPLACE(g_anx_mensaje
                                        ,SUBSTR(g_anx_mensaje
                                               ,l_pos_ini + 13
                                               ,LENGTH(g_anx_mensaje))
                                        ,l_anx_mensaje)
                                ,l_pos_ini);
         --
         mx('g_anx_mensaje', g_anx_mensaje);
         --
       END IF;
       --
     END pi_valida_msg;
     --
   BEGIN
     --
     mx('I', 'pp_trata_msg_ws');
     --
     pi_valida_msg(20099331);
     pi_valida_msg(20099333);
     pi_valida_msg(20099334);
     --
     mx('F', 'pp_trata_msg_ws');
     --
   EXCEPTION
     WHEN OTHERS
     THEN
       --
       mx('F', 'pp_trata_msg_ws - Exception');
       --
       g_anx_mensaje := li_anx_mensaje;
       --
   END pp_trata_msg_ws;
   --
   /* ----------------------------------------------------
   || Processar p_emite
   */ ----------------------------------------------------
   --
   PROCEDURE p_emite IS
       --
       l_val_defecto      g0200002.val_defecto        %TYPE := NULL;
       l_nom_prg          g0200001.nom_prg            %TYPE;
       l_num_poliza       p2000030.num_poliza         %TYPE;
       l_num_cotizacion   c2000000.num_cotizacion     %TYPE := trn_k_global.devuelve('NUM_COTIZACION');
       l_num_paso         c2000000.val_columna        %TYPE := trn_k_global.devuelve('NUM_PASO');
       l_cod_cia          G9999992.cod_cia            %TYPE := trn_k_global.devuelve('COD_CIA');
       l_cod_ramo         G9999992.cod_ramo           %TYPE := trn_k_global.devuelve('COD_RAMO');
       l_cod_tarifa       G9999992.cod_tarifa         %TYPE := trn_k_global.devuelve('COD_TARIFA');
       l_cod_agt          G9999992.cod_agt            %TYPE := trn_k_global.devuelve('COD_AGT');
       l_fec_efec_spto    c2000000.val_columna        %TYPE := trn_k_global.devuelve('FEC_EFEC_SPTO'); --5.40
       l_fec_vcto_spto    c2000000.val_columna        %TYPE := trn_k_global.devuelve('FEC_VCTO_SPTO'); --5.40
       --
       l_cursor_msg       ref_cursor;
        --
       l_num_simulacion   c2000020.num_simulacion %TYPE; --2.14
       l_eh_3_pacotes     BOOLEAN ; --2.14
       l_tip_produto      g2109142_vcr.tip_produto%TYPE ; --2.17
       --
       -- 5.25 INICIO
       l_reg a2000500 %ROWTYPE;
       l_existe BOOLEAN := FALSE;
       e_retorno EXCEPTION;
       l_trava_proposta df_cmn_nwt_xx_cnn.vrb_nam_val%TYPE;
       l_cod_mensaje VARCHAR2(250);
       l_anx_mensaje VARCHAR2(250);
       -- 5.25 FIM
       --
        TYPE rec_mensagem IS RECORD (cod_campo                      VARCHAR2(30),
                                     des_Mensagem                   VARCHAR2(350),
                                     tip_Mensagem                   VARCHAR2(80));
        --
        l_rec_mensagem  rec_mensagem;
        --
        l_num_mensagem_x2000060 NUMBER := 0; -- 5.24

       --
       CURSOR c_g0200001 IS
       SELECT a.nom_prg
         FROM g0200001 a
        WHERE a.cod_cia = trn_k_global.cod_cia
          AND a.cod_tar = g_k_tar_base;
       --
       CURSOR c_g0200002 IS
       SELECT a.cod_campo,
              a.val_defecto
         FROM g0200002 a
        WHERE a.cod_cia = trn_k_global.cod_cia
          AND a.cod_tar = g_k_tar_base
       ORDER BY a.num_secu_campo;
       --
       V_SQL VARCHAR2(200);
       --
      -- 5.25
       CURSOR c_a2000500(p_cod_cia c2000000.cod_cia %TYPE, p_cod_ramo c2000000.cod_ramo %TYPE, p_num_poliza a2000500.num_poliza%TYPE) IS
         SELECT *
           FROM tron2000.a2000500 a
          WHERE a.cod_cia = p_cod_cia
            AND a.cod_ramo = p_cod_ramo
            AND a.num_poliza = p_num_poliza
            AND a.tip_mvto_batch = trn.tres
            AND a.tip_situ = trn.uno;
   BEGIN
      --
      mx('I', 'p_emite');
       --
      IF NVL(trn_k_global.ref_f_global('MCA_POLIZA_GRUPO'),'N') = 'S' or
         NVL(trn_k_global.ref_f_global('COD_SERVICIO'),-1) = g_k_cod_srv_flotas THEN
        --
        l_eh_3_pacotes := FALSE;
        --
      ELSE
        --
        ea_k_231_utils.p_devuelve_dato_cotizacion(p_nom_tabla   => ea_k_231_utils.g_k_tabla_dv,
                                                  p_nom_columna => 'TIP_PRODUTO'              ,
                                                  p_val_campo   => l_tip_produto);      -- 2.20
        --
        l_eh_3_pacotes := ea_k_g2109142_vcr.f_eh_3_pacotes(l_cod_cia, --2.70
                                                           l_cod_ramo,
                                                           l_cod_agt,
                                                           l_tip_produto); -- 2.17
        -- I 3.47
        IF l_eh_3_pacotes THEN
         --
         pp_asigna('tres_pacotes',1);
         --
        ELSE
         --
         pp_asigna('tres_pacotes',0);
         --
        END IF;
       -- F 3.47
      --
       END IF;
       BEGIN
         --
         mx('-', 'trn_k_dinamico.p_ejecuta_sentencia');
         --
         trn_k_dinamico.p_ejecuta_sentencia('alter session set nls_numeric_characters=".,"');
         --
       EXCEPTION
         WHEN OTHERS THEN
           --
           mx('-', '1-SQLERRM: '||substr(SQLERRM,1,200));
           --
           BEGIN
             --
             mx('-', 'trn_k_dinamico.p_ejecuta_procedimiento');
             --
             V_SQL := 'execute immediate ''alter session set nls_numeric_characters=".,"''';
             --
             trn_k_dinamico.p_ejecuta_procedimiento(V_SQL);
             --
           EXCEPTION
             WHEN OTHERS THEN
               --
               mx('-', '2-SQLERRM: '||substr(SQLERRM,1,200));
               --
               BEGIN
                 --
                 mx('-', 'execute immediate');
                 --
                 execute immediate 'alter session set NLS_NUMERIC_CHARACTERS = ".,"';
                 --
               EXCEPTION
                 WHEN OTHERS THEN
                   --
                   mx('-', '3-SQLERRM: '||substr(SQLERRM,1,250));
                   --
                   RAISE;
                   --
               END;
           END;
       END;
       --
       mx('I', 'CONSULTA P2000030');
       --
       mx('p_emite - CONSULTA P2000030 - NUM_COTIZACION', l_num_cotizacion);
       mx('p_emite - CONSULTA P2000030 - COD_RAMO'      , trn_k_global.devuelve('COD_RAMO'));
       mx('p_emite - CONSULTA P2000030 - COD_CIA'       , trn_k_global.cod_cia);
       --I 2.14
       IF l_eh_3_pacotes THEN
         --
         ea_k_231_utils.p_devuelve_dato_cotizacion(ea_k_231_coti.g_k_tabla_simulacion,
                                                   'NUM_SIMULACION',
                                                   l_num_simulacion);
         --
         ea_k_definicion_pacote.p_carga_coberturas(l_num_simulacion,TRUE);--2.14
       --
       END IF;
       --F 2.14
       SELECT
          MAX(num_poliza)
       INTO
          l_num_poliza
       FROM
          P2000030
       WHERE
              COD_CIA         = trn_k_global.cod_cia
          AND COD_RAMO        = trn_k_global.devuelve('COD_RAMO')
          AND NUM_PRESUPUESTO = l_num_cotizacion
          AND MCA_POLIZA_ANULADA = trn.NO;
       --
       mx('F', 'CONSULTA P2000030');
       --
       mx('p_emite - f_num_Cotizacion', l_num_cotizacion);
       --
       mx('p_emite - num_poliza', l_num_poliza);
       --
       mx('l_fec_efec_spto', l_fec_efec_spto); --5.40
       mx('l_fec_vcto_spto', l_fec_vcto_spto); --5.40
       --
       -- INICIALIZACAO DAS TABELAS DE PROCESSAMENTO
       pp_borra_a2000520  ('3', l_num_poliza);
       --
       pp_inserta_a2000500('3', l_num_poliza);
       --
       trn_k_global.asigna('FEC_TRATAMIENTO'   , TO_CHAR(g_fec_tratamiento,'ddmmyyyy')  );
       trn_k_global.asigna('JBNUM_ORDEN'       , g_k_num_orden                          );
       trn_k_global.asigna('JBMCA_REPROCESO'   , trn.SI                                 );
       trn_k_global.asigna('TIP_MVTO_BATCH'    , '3'                                    );
       trn_k_global.asigna('JBCOD_USR_CIA'     , trn_k_global.cod_usr                   );
       trn_k_global.asigna('JBCANT_REGISTROS'  , g_k_cant_registros                     );
       trn_k_global.asigna('JBNUM_POLIZA'      , l_num_poliza                           );
       trn_k_global.asigna('JBCOD_RAMO'        , trn_k_global.devuelve('COD_RAMO')      );
       trn_k_global.asigna('COD_RAMO'          , trn_k_global.devuelve('COD_RAMO')      );
       trn_k_global.asigna('JBMCA_GRUPOS'      , trn.NULO                               );
       trn_k_global.asigna('MCA_LIMPA_PRE_BUZON'    , trn.NO                                 );
       --
       OPEN  c_g0200001;
       FETCH c_g0200001 INTO l_nom_prg;
       CLOSE c_g0200001;
       --
       FOR r_reg IN c_g0200002
       LOOP
          --
          l_val_defecto := NVL(trn_k_global.ref_f_global(r_reg.cod_campo), r_reg.val_defecto);
          --
          trn_k_global.asigna(r_reg.cod_campo, RTRIM(l_val_defecto));
          --
       END LOOP;
       --
       mx('I', 'em_k_gen.p_emite: - ' || l_nom_prg);
       --
       trn_k_dinamico.p_ejecuta_procedimiento(l_nom_prg);
       --
       mx('F', 'em_k_gen.p_emite: - ' || l_nom_prg);
       --
    OPEN l_cursor_msg FOR
      SELECT 'NUM_POLIZA' AS COD_CAMPO, TXT_ERROR, 'ERRO' AS TIP_MENSAGEM
        FROM A2000520
       WHERE COD_CIA = trn_k_global.cod_cia
         AND NUM_POLIZA = l_num_poliza
         AND fec_tratamiento = g_fec_tratamiento
         AND tip_mvto_batch  = 3
         AND num_orden       = g_k_num_orden    ;
       --
       LOOP
       FETCH l_cursor_msg
       INTO  l_rec_mensagem;
          --
          EXIT WHEN l_cursor_msg%NOTFOUND;
          --

          -- I 5.24
          IF INSTR( UPPER( l_rec_mensagem.des_mensagem ), 'X2000060' ) > 0 THEN
            --
            g_cod_mensaje := 20099913;
            g_anx_mensaje    :=  trn.blanco ||
                                  ss_k_mensaje.f_solo_texto_idioma(20099913,
                                                                   g_cod_idioma) ||
                                  ss_k_mensaje.f_solo_texto_idioma(20099914,
                                                                   g_cod_idioma);
            l_num_mensagem_x2000060 := l_num_mensagem_x2000060 + 1;
            --
            IF l_num_mensagem_x2000060 > 1 THEN
              --
              CONTINUE ;
              --
            END IF;
            --
          ELSE
            --
          g_cod_mensaje    := g_k_cod_error_gen;
          g_anx_mensaje    := l_rec_mensagem.des_mensagem;
          --
          END IF ;
          -- F 5.24
          mx('g_anx_mensaje',g_anx_mensaje);
          --
          pp_trata_msg_ws; --v1.98
          --
          g_err_msg.EXTEND(1); -- 4.99
          g_err_msg(g_err_msg.LAST) := fp_trata_msg(l_rec_mensagem.cod_campo, -- 4.99
                                                                                    g_cod_mensaje,
                                                                                    g_anx_mensaje);
       END LOOP;
       --
       trn_k_global.asigna('NUM_COTIZACION'    , l_num_cotizacion);
       trn_k_global.asigna('NUM_PRESUPUESTO'   , l_num_poliza);
       trn_k_global.asigna('NUM_PASO'          , l_num_paso);
       trn_k_global.asigna('COD_CIA'           , l_cod_cia);
       trn_k_global.asigna('COD_RAMO'          , l_cod_ramo);
       trn_k_global.asigna('COD_TARIFA'        , l_cod_tarifa);
       trn_k_global.asigna('COD_AGT'           , l_cod_agt);
       --
       -- I 5.40
       IF l_num_paso = 50 THEN
         --
         l_num_paso := 15;
         --
       END IF;
       -- F 5.20
       --
       trn_k_global.asigna('NUM_PASO'          , l_num_paso);
       trn_k_global.asigna('JBCOD_USR_CIA'     , trn_k_global.cod_usr);
       trn_k_global.asigna('NUM_PRESUPUESTO'   , l_num_poliza);
       --
       mx('F', 'p_emite');
       -- v. 4.70 inicio
       BEGIN
       --
       IF l_num_paso in (15,50) THEN --5.40
          --
          EM_K_A2109005_VCR_VCR.p_inserta_historico(l_cod_cia,
                                                    l_num_poliza,
                                                    'P',
                                                    0,
                                                    'Proposta Efetivada',
                                                    'E999001');
          -- 5.25 INICIO
           BEGIN
             BEGIN
               l_trava_proposta := trn_k_df_cmn_nwt_xx_cnn.f_vrb_nam_val('HABILITA_TRAVA_PROPOSTA');
             EXCEPTION
               WHEN OTHERS THEN
                 l_trava_proposta := trn.no;
             END;
             IF l_trava_proposta = trn.si THEN
               OPEN c_a2000500(l_cod_cia, l_cod_ramo, l_num_poliza);
               FETCH c_a2000500
                 INTO l_reg;
               l_existe := c_a2000500%FOUND;
               CLOSE c_a2000500;
               IF l_existe THEN
                 l_anx_mensaje := trn.blanco ||
                                  ss_k_mensaje.f_solo_texto_idioma(20099913,
                                                                   g_cod_idioma) ||
                                  ss_k_mensaje.f_solo_texto_idioma(20099914,
                                                                   g_cod_idioma);
                 g_err_msg.EXTEND(1);
                 g_err_msg(g_err_msg.last) := fp_trata_msg('COD_RETORNO',
                                                           '20099913',
                                                           l_cod_mensaje ||
                                                           l_anx_mensaje);
                 g_cod_mensaje := l_cod_mensaje;
                 RAISE e_retorno;
               END IF;
             END IF;
           EXCEPTION
             WHEN OTHERS THEN
               NULL;
           END;
           -- 5.25 FIM
       END IF;
       --
     EXCEPTION
       WHEN OTHERS THEN
         NULL;
     END; -- v.4.70 fim
   EXCEPTION
      WHEN e_retorno THEN -- 5.25
         --
         pp_devuelve_error;
         --
      WHEN OTHERS THEN
         --
         ROLLBACK;
         --
         g_txt_error      := substr(SQLERRM,1,2000);
         g_txt_ruta_error := substr('EM_K_GEN_WS.P_EMITE'|| dbms_utility.format_error_backtrace,1,2000);
         --
         mx('-', 'g_txt_error: '||substr(g_txt_error,1,250));
         mx('-', 'g_txt_ruta_error: '||substr(g_txt_ruta_error,1,250));
         --
         pp_log_erro(l_num_cotizacion ,
                     g_txt_error      ,
                     g_txt_ruta_error );
         --
         COMMIT;
         --
         g_cod_mensaje    := g_k_cod_error_gen;
         g_anx_mensaje    := SUBSTR('Erro na carga da proposta: '|| dbms_utility.format_error_backtrace,
                                    trn.CERO,
                                    g_k_num_max_char);
         --
         mx('F', 'p_emite - EXCEPTION');
         --
         pp_devuelve_error;
         --
   END p_emite;
   --
   /* ----------------------------------------------------
   || Processar p_efetiva
   */ ----------------------------------------------------
   --
    PROCEDURE p_efetiva IS
       --
       l_val_defecto      g0200002.val_defecto        %TYPE := NULL;
       l_nom_prg          g0200001.nom_prg            %TYPE;
       l_num_cotizacion   c2000000.num_cotizacion     %TYPE := trn_k_global.devuelve('NUM_COTIZACION');
       l_num_paso         c2000000.val_columna        %TYPE := trn_k_global.devuelve('NUM_PASO');
       l_cod_cia          G9999992.cod_cia            %TYPE := trn_k_global.devuelve('COD_CIA');
       l_cod_ramo         G9999992.cod_ramo           %TYPE := trn_k_global.devuelve('COD_RAMO');
       l_cod_tarifa       G9999992.cod_tarifa         %TYPE := trn_k_global.devuelve('COD_TARIFA');
       l_cod_agt          G9999992.cod_agt            %TYPE := trn_k_global.devuelve('COD_AGT');
       l_count            number;
       l_fec_efec_spto    c2000000.val_columna        %TYPE := trn_k_global.devuelve('FEC_EFEC_SPTO');  --5.40
       l_fec_vcto_spto    c2000000.val_columna        %TYPE := trn_k_global.devuelve('FEC_VCTO_SPTO');  --5.40
       l_cod_sector       p2000030.cod_sector         %TYPE := trn_k_global.devuelve('COD_SECTOR');     --5.40
       --
       l_reg              a2000500                    %ROWTYPE; -- GALEGO/SANTI
       l_existe           BOOLEAN                     := FALSE; -- GALEGO/SANTI
       e_retorno          EXCEPTION;                  -- GALEGO/SANTI
       l_trava_proposta   df_cmn_nwt_xx_cnn.vrb_nam_val%TYPE;   -- GALEGO/SANTI
       l_cod_mensaje      VARCHAR2(250);            -- GALEGO/SANTI
       l_anx_mensaje      VARCHAR2(250);            -- GALEGO/SANTI
       --
       l_cursor_msg       ref_cursor;
       --
       TYPE rec_mensagem IS RECORD (cod_campo                      VARCHAR2(30),
                                    des_Mensagem                   VARCHAR2(350),
                                    tip_Mensagem                   VARCHAR2(80));

       --
       l_rec_mensagem  rec_mensagem;
       --
       CURSOR c_g0200001 IS
       SELECT a.nom_prg
         FROM g0200001 a
        WHERE a.cod_cia = trn_k_global.cod_cia
          AND a.cod_tar = g_k_tar_base;
       --
       CURSOR c_g0200002 IS
       SELECT a.cod_campo,
              a.val_defecto
         FROM g0200002 a
        WHERE a.cod_cia = trn_k_global.cod_cia
          AND a.cod_tar = g_k_tar_base
       ORDER BY a.num_secu_campo;
       --
       V_SQL VARCHAR2(200);
       --
       CURSOR c_a2000500 (p_cod_cia           c2000000.cod_cia       %TYPE
                         ,p_cod_ramo          c2000000.cod_ramo      %TYPE
                         ,p_num_cotizacion    c2000000.num_cotizacion%TYPE ) IS
        SELECT *
          FROM tron2000.a2000500 a
         WHERE a.cod_cia                = p_cod_cia
           AND a.cod_ramo               = p_cod_ramo
           AND a.num_poliza             = p_num_cotizacion
           AND a.tip_mvto_batch         = 8
           AND a.tip_situ               = trn.UNO;
       --
    BEGIN
       --
       mx('I', 'p_efetiva');
       --
       BEGIN
         --
         mx('I', 'trn_k_dinamico.p_ejecuta_sentencia');
         --
         trn_k_dinamico.p_ejecuta_sentencia('alter session set nls_numeric_characters=".,"');
         --
       EXCEPTION
         WHEN OTHERS THEN
           --
           mx('E', '1-SQLERRM: '||substr(SQLERRM,1,250));
           --
           BEGIN
             --
             mx('I', 'trn_k_dinamico.p_ejecuta_procedimiento');
             --
             V_SQL := 'execute immediate ''alter session set nls_numeric_characters=".,"''';
             --
             trn_k_dinamico.p_ejecuta_procedimiento(V_SQL);
             --
           EXCEPTION
             WHEN OTHERS THEN
               --
               mx('E', '2-SQLERRM: '||substr(SQLERRM,1,250));
               --
               BEGIN
                 --
                 mx('I', 'execute immediate');
                 --
                 execute immediate 'alter session set NLS_NUMERIC_CHARACTERS = ".,"';
                 --
               EXCEPTION
                 WHEN OTHERS THEN
                   --
                   mx('E', '3-SQLERRM: '||substr(SQLERRM,1,250));
                   --
                   RAISE;
                   --
               END;
           END;
       END;
       --
       BEGIN
          --
          SELECT count(1)
            INTO l_count
            FROM a2000500
           WHERE tip_mvto_batch  = 8
             AND cod_cia         = trn_k_global.devuelve('COD_CIA')
             AND num_poliza      = l_num_cotizacion;
           --
       EXCEPTION
          --
          WHEN OTHERS THEN
             --
             l_count := 0;
       --
       END;
       --
       IF l_count >= 1 THEN
       --
         pp_borra_a2000500  ('8', l_num_cotizacion);
       --
       END IF;
       -- INICIALIZACAO DAS TABELAS DE PROCESSAMENTO
       pp_borra_a2000520  ('8', l_num_cotizacion);
       pp_inserta_a2000500('8', l_num_cotizacion);
       --
       mx('p_efetiva - NUM_COTIZACION', l_num_cotizacion);
       --
       trn_k_global.asigna('FEC_TRATAMIENTO' , TO_CHAR(g_fec_tratamiento,'ddmmyyyy')  );
       trn_k_global.asigna('JBNUM_ORDEN'     , g_k_num_orden                          );
       trn_k_global.asigna('JBMCA_REPROCESO' , trn.SI                                 );
       trn_k_global.asigna('TIP_MVTO_BATCH'  , '8'                                    );
       trn_k_global.asigna('JBCOD_USR_CIA'   , trn_k_global.cod_usr                   );
       trn_k_global.asigna('JBCANT_REGISTROS', g_k_cant_registros                     );
       trn_k_global.asigna('JBNUM_POLIZA'    , l_num_cotizacion);
       trn_k_global.asigna('JBCOD_RAMO'      , trn_k_global.devuelve('COD_RAMO')      );
       trn_k_global.asigna('COD_RAMO'        , trn_k_global.devuelve('COD_RAMO')      );
       trn_k_global.asigna('JBMCA_GRUPOS'    , trn.NULO                               );
       --
       OPEN  c_g0200001;
       FETCH c_g0200001 INTO l_nom_prg;
       CLOSE c_g0200001;
       --
       FOR r_reg IN c_g0200002
       LOOP
          --
          l_val_defecto := NVL(trn_k_global.ref_f_global(r_reg.cod_campo), r_reg.val_defecto);
          --
          trn_k_global.asigna(r_reg.cod_campo, RTRIM(l_val_defecto));
          --
       END LOOP;
       --
       mx('I', 'em_k_gen.p_efetiva: - ' || l_nom_prg);
       --
       trn_k_dinamico.p_ejecuta_procedimiento(l_nom_prg);
       --
       mx('F', 'em_k_gen.p_efetiva: - ' || l_nom_prg);
       --
    OPEN l_cursor_msg FOR
      SELECT 'NUM_COTIZACION' AS COD_CAMPO,
             TXT_ERROR,
             'ERRO' AS TIP_MENSAGEM
        FROM a2000520
       WHERE cod_cia         = trn_k_global.cod_cia
         AND num_poliza      = l_num_cotizacion
         AND fec_tratamiento = g_fec_tratamiento
         AND tip_mvto_batch  = 8
         AND num_orden       = g_k_num_orden       ;
       --
       LOOP
       FETCH l_cursor_msg
       INTO  l_rec_mensagem;
          --
          EXIT WHEN l_cursor_msg%NOTFOUND;
          --
          g_cod_mensaje    := g_k_cod_error_gen;
          g_anx_mensaje    := l_rec_mensagem.des_mensagem;
          --
          mx('g_anx_mensaje',g_anx_mensaje);
          --
          pp_trata_msg_ws; --v1.98
          --
          g_err_msg.EXTEND(1); -- 4.99
          g_err_msg(g_err_msg.LAST) := fp_trata_msg(l_rec_mensagem.cod_campo, -- 4.99
                                                                                    g_cod_mensaje,
                                                                                    g_anx_mensaje);
       END LOOP;
       --
       mx('-','Nova trava');
       -- -- GALEGO/SANTI INICIO
       BEGIN
         --
         BEGIN
           --
           mx('-','Nova trava 1');
           l_trava_proposta := trn_k_df_cmn_nwt_xx_cnn.f_vrb_nam_val('HABILITA_TRAVA_PROPOSTA');
           --
         EXCEPTION
           WHEN OTHERS THEN
             --
             mx('-','Nova trava 2');
             l_trava_proposta := trn.NO;
             --
         END;
         --
         IF l_trava_proposta = trn.SI THEN
           --
           mx('-','Nova trava 3');
           --
           OPEN c_a2000500(l_cod_cia
                          ,l_cod_ramo
                          ,l_num_cotizacion);
           --
           FETCH c_a2000500  INTO l_reg;
           --
           l_existe  := c_a2000500%FOUND;
           --
           CLOSE c_a2000500;
           --
           mx('-','Nova trava 4');
           --
           IF l_existe THEN
             --
             mx('-','Nova trava 5');
             --
             l_anx_mensaje := trn.BLANCO || ss_k_mensaje.f_solo_texto_idioma(20099913, g_cod_idioma)
                                         || ss_k_mensaje.f_solo_texto_idioma(20099914, g_cod_idioma);
             g_err_msg.EXTEND(1);
             g_err_msg(g_err_msg.LAST) := fp_trata_msg('COD_RETORNO',
                                                       '20099913',
                                                        l_cod_mensaje ||
                                                        l_anx_mensaje);
             --
             g_cod_mensaje := l_cod_mensaje;
             --
             RAISE e_retorno;
             --
           END IF;
           --
         END IF;
         --
       EXCEPTION
            WHEN OTHERS THEN
              --
              NULL;
              --
       END;
     -- GALEGO/SANTI FIM
       --
       trn_k_global.asigna('NUM_COTIZACION'    , l_num_cotizacion     );
       trn_k_global.asigna('NUM_PASO'          , l_num_paso           );
       trn_k_global.asigna('COD_CIA'           , l_cod_cia            );
       trn_k_global.asigna('COD_RAMO'          , l_cod_ramo           );
       trn_k_global.asigna('COD_TARIFA'        , l_cod_tarifa         );
       trn_k_global.asigna('COD_AGT'           , l_cod_agt            );
       trn_k_global.asigna('TIP_EMISION'       , em.TIP_EMISION_POL   ); -- V2.82
       -- I 5.40
       trn_k_global.asigna('FEC_EFEC_SPTO'     , l_fec_efec_spto      );
       trn_k_global.asigna('FEC_VCTO_SPTO'     , l_fec_vcto_spto      );
       trn_k_global.asigna('COD_NIVEL1'        , dc.COD_NIVEL1_GEN    );
       trn_k_global.asigna('COD_NIVEL2'        , dc.COD_NIVEL2_GEN    );
       trn_k_global.asigna('COD_NIVEL3'        , dc.COD_NIVEL3_GEN    );
       trn_k_global.asigna('COD_MON'           , trn_k_global.cod_mon );
       trn_k_global.asigna('COD_SPTO'          , trn.CERO             );
       trn_k_global.asigna('COD_TIP_SPTO'      , trn.CERO             );
       trn_k_global.asigna('SUB_COD_SPTO'      , trn.CERO             );
       trn_k_global.asigna('COD_SECTOR'        , l_cod_sector         );
       -- F 5.40
       --
       pp_actualiza_fec_efec_recibo;  -- V2.82
       --
       --
       mx('F', 'p_efetiva');
       --
       EXCEPTION
          WHEN e_retorno THEN -- -- GALEGO/SANTI
            --
            pp_devuelve_error;
            --
          WHEN OTHERS THEN
             --
             ROLLBACK;
             --
             g_txt_error      := substr(SQLERRM,1,2000);
             g_txt_ruta_error := substr('EM_K_GEN_WS.P_EFETIVA'|| dbms_utility.format_error_backtrace,1,2000);
             --
             mx('-', 'g_txt_error: '||substr(g_txt_error,1,250));
             mx('-', 'g_txt_ruta_error: '||substr(g_txt_ruta_error,1,250));
             --
             pp_log_erro(l_num_cotizacion,
                         g_txt_error      ,
                         g_txt_ruta_error );
             --
             COMMIT;
             --
             g_cod_mensaje    := g_k_cod_error_gen;
             g_anx_mensaje    := SUBSTR('Erro na carga da proposta: '|| dbms_utility.format_error_backtrace,
                                        trn.CERO,
                                        g_k_num_max_char);
             --
             mx('F', 'p_efetiva - EXCEPTION');
             --
             pp_devuelve_error;
             --

    END p_efetiva;
   --
   /* ----------------------------------------------------
   || Consulta e grava a formula clave
   */ ----------------------------------------------------
   --
   PROCEDURE p_grava_clave IS
      --
      l_val_clave      a2000560.val_campo             %TYPE;
      l_reg_a2000560   a2000560                    %ROWTYPE;
      l_obs_proceso    a2000520.txt_error             %TYPE;
      l_cod_cia        g9999992.cod_cia               %TYPE;
      l_cod_ramo       g9999992.cod_ramo              %TYPE;
      l_cod_tarifa     g9999992.cod_tarifa            %TYPE;
      l_cod_agt        g9999992.cod_agt               %TYPE;
      l_num_cotizacion c2009030_vcr.num_cotizacion    %TYPE;
      l_num_paso       g9999992.num_paso              %TYPE;
      l_val_blindagem  g2109044_vcr.val_min_blindagem %TYPE; -- 2.11
      l_mca_blindagem  a2000020.val_campo             %TYPE; -- 2.11
      --
      l_cod_retorno    NUMBER;
      l_msg_erro       a2000520.txt_error             %TYPE;
      --
      l_tip_pacote     a2000560.val_campo             %TYPE; -- 2.14
      l_eh_3_pacotes   BOOLEAN; -- 2.14
      l_tip_produto    g2109142_vcr.tip_produto       %TYPE ; --2.17
      --
      l_cod_rol_bo     c2000000.val_columna           %TYPE; --4.74
      --
   BEGIN
      --
      mx('I', 'p_grava_clave');
      --
      l_cod_cia        := trn_k_global.devuelve('cod_cia'       );
      l_cod_ramo       := trn_k_global.devuelve('cod_ramo'      );
      l_cod_tarifa     := trn_k_global.devuelve('cod_tarifa'    );
      l_cod_agt        := trn_k_global.devuelve('cod_agt'       );
      l_num_paso       := trn_k_global.devuelve('num_paso'      );
      l_num_cotizacion := trn_k_global.devuelve('num_cotizacion');
      l_val_blindagem  := ea_k_231_utils.f_valor_dv('val_blindagem'); -- 2.11
      l_mca_blindagem  := ea_k_231_utils.f_valor_dv('mca_blindagem'); -- 2.11
      --
      l_cod_rol_bo := ea_k_231_utils.f_devuelve_val_campo_spto(p_cod_campo => 'COD_ROL_BO'); --4.74
      --
    IF l_cod_rol_bo IS NULL THEN --4.74
      --
      em_k_gen_spto_batch_vcr.p_carregar_dados_apol(p_tip_mvto_batch => g_k_tip_mvto_batch_endosso,
                                                    p_cod_cia        => l_cod_cia                 ,
                                                    p_cod_ramo       => l_cod_ramo                ,
                                                    p_cod_agt        => l_cod_agt                 ,
                                                    p_num_poliza     => g_num_poliza              ,
                                                    p_cod_retorno    => l_cod_retorno             ,
                                                    p_msg_erro       => l_msg_erro                ,
                                                    p_passo_0        => FALSE                     );
      --
      IF NVL(trn_k_global.ref_f_global('MCA_POLIZA_GRUPO'),'N') = 'S' or
         NVL(trn_k_global.ref_f_global('COD_SERVICIO'),-1) = g_k_cod_srv_flotas THEN
        --
        l_eh_3_pacotes := FALSE;
        --
      ELSE
        --
        l_tip_produto := ea_k_231_utils.f_valor_dv('tip_produto'); --2.17
        --
        l_eh_3_pacotes := NVL(fp_devuelve_n('tres_pacotes'), 0) > 0; -- 3.47
        --
      END IF;
      --
      BEGIN
         --
         pp_asigna_globales_clave;
         --
         ea_k_231_cob.p_num_idade;
         --
         ea_k_231_cob.p_num_idade_veic;
         --
         ea_k_231_dv.p_v_mca_concessionaria;
         --
         ea_k_definicion_pacote_vcr.p_resgata_modalidad;
         --
         l_val_clave := trn_k_global.devuelve('DVVAL_CLAVE_FORMULA');
         --
         mx('l_val_clave', l_val_clave);
         --
         IF l_val_clave IS NOT NULL THEN
            --
            l_reg_a2000560.cod_cia       := trn_k_global.devuelve('COD_CIA');
            l_reg_a2000560.num_propuesta := trn_k_global.devuelve('NUM_PROPUESTA');
            l_reg_a2000560.cod_campo     := 'VAL_CLAVE_FORMULA';
            l_reg_a2000560.val_campo     := l_val_clave;
            --
            pp_inserta_a2000560(l_reg_a2000560);
            --
         END IF;
         --I 2.14
         --
         IF l_eh_3_pacotes THEN
           --
           l_tip_pacote := trn_k_global.devuelve('TIP_PACOTE') ;
           --
           IF l_tip_pacote IS NOT NULL THEN
             --
             l_reg_a2000560.cod_cia       := trn_k_global.devuelve('COD_CIA');
             l_reg_a2000560.num_propuesta := trn_k_global.devuelve('NUM_PROPUESTA');
             l_reg_a2000560.cod_campo     := 'TIP_PACOTE';
             l_reg_a2000560.val_campo     := l_tip_pacote;
             --
             pp_inserta_a2000560(l_reg_a2000560);
             --
           END IF;
           --
         END IF;
         --F 2.14
         --
       IF l_val_blindagem IS NOT NULL AND l_mca_blindagem = trn.SI THEN -- I 2.11
         --
         l_reg_a2000560.cod_cia       := trn_k_global.devuelve('COD_CIA');
         l_reg_a2000560.num_propuesta := trn_k_global.devuelve('NUM_PROPUESTA');
         l_reg_a2000560.cod_campo     := 'COMCA_SELECCION281';
         l_reg_a2000560.val_campo     := trn.SI;
         --
         pp_inserta_a2000560(l_reg_a2000560);
         --
         l_reg_a2000560.cod_campo := 'COSUMA_ASEG281';
         l_reg_a2000560.val_campo := l_val_blindagem;
         --
         pp_inserta_a2000560(l_reg_a2000560);
         --
       ELSE -- 4.58 I
         --
         l_reg_a2000560.cod_cia       := trn_k_global.devuelve('COD_CIA');
         l_reg_a2000560.num_propuesta := trn_k_global.devuelve('NUM_PROPUESTA');
         l_reg_a2000560.cod_campo     := 'COMCA_SELECCION281';
         l_reg_a2000560.val_campo     := trn.NO;
         --
         pp_inserta_a2000560(l_reg_a2000560);
         --
         l_reg_a2000560.cod_campo := 'COSUMA_ASEG281';
         l_reg_a2000560.val_campo := trn.NULO;
         --
         pp_inserta_a2000560(l_reg_a2000560);
         --
         l_reg_a2000560.cod_campo := 'NUM_NIVEL_BLINDAGEM';
         l_reg_a2000560.val_campo := trn.NULO;
         --
         pp_inserta_a2000560(l_reg_a2000560); -- 4.58 F
         --
       END IF; -- F 2.11
       --
      EXCEPTION
        WHEN OTHERS THEN
          --
          g_cod_mensaje    := g_k_cod_error_gen;
          g_anx_mensaje    := SQLERRM;
          --
          mx('p_grava_clave - EXCEPTION', SQLERRM);
          --
          g_err_msg.EXTEND(1); -- 4.99
          g_err_msg(g_err_msg.LAST) := fp_trata_msg('COD_RETORNO', NULL, g_k_pre_msg_erro || '20098400' || g_k_sep_cod_msg || g_anx_mensaje); -- 4.99
          --
          mx('p_grava_clave - erro: ', l_obs_proceso);
          --
      END;
      --
    END IF; -- 4.74
      --
      mx('F', 'p_grava_clave');
      --
      EXCEPTION
      WHEN OTHERS THEN
         --
         mx('p_grava_clave - EXCEPTION', SQLERRM);
         --
         g_cod_mensaje    := g_k_cod_error_gen;
         g_anx_mensaje    := SQLERRM;
         --
         g_err_msg.EXTEND(1); -- 4.99
         g_err_msg(g_err_msg.LAST) := fp_trata_msg('COD_RETORNO', -- 4.99
                                                                                   NULL,
                                                                                   g_k_pre_msg_erro || '20098402' || g_k_sep_cod_msg || SQLERRM||' - EXCEPTION');
      --
      mx('F', 'p_grava_clave - EXCEPTION');
      --
   END p_grava_clave;
   --
   /* ---------------------
   ||   p_ws_atualiza_rg  :
   */ ---------------------
   PROCEDURE p_ws_atualiza_rg IS
   BEGIN
     --
     mx('I', 'p_ws_atualiza_rg');
     --
     em_k_migracion_polizas.p_atualiza_rg;
     --
     mx('F', 'p_ws_atualiza_rg');
     --
   END p_ws_atualiza_rg;
   --
   /* ---------------------------------------------------------------- *
   || Enquadramento de tipo de desconto (Clube Seguro Novo / Renovacao Competitiva)
   */ ----------------------------------------------------------------
   PROCEDURE p_tip_desconto
   IS
     --
     l_cod_cia        c2000000.cod_cia         %TYPE;
     l_cod_ramo       c2000000.cod_ramo        %TYPE;
     l_cod_agt        a2000030.cod_agt         %TYPE;
     l_num_cotizacion c2000000.num_cotizacion  %TYPE;
     l_tip_desconto   g2109048_vcr.tip_desconto%TYPE;
     l_num_spto       a2000030.num_spto        %TYPE := NULL;
     l_imp_spto       a2100170.imp_spto        %TYPE := trn.CERO; -- 2.00
     --
     l_reg_a2000560   a2000560%ROWTYPE;
     l_reg_a2000030   a2000030%ROWTYPE;
     --
     l_num_presupuesto    c2990700.num_cotizacion    %TYPE;     --1.81
     --
     CURSOR c_a2100170 (pi_cod_cia       a2100170.cod_cia      %TYPE,
                        pi_cod_ramo      a2100170.cod_ramo     %TYPE,
                        pi_num_poliza    a2100170.num_poliza   %TYPE,
                        pi_num_spto      a2100170.num_spto     %TYPE,
                        pi_num_apli      a2100170.num_apli     %TYPE,
                        pi_num_spto_apli a2100170.num_spto_apli%TYPE) IS
      SELECT SUM(imp_spto)
        FROM a2100170
       WHERE cod_cia       = pi_cod_cia
         AND num_poliza    = pi_num_poliza
         AND num_spto      = pi_num_spto
         AND num_apli      = pi_num_apli
         AND num_spto_apli = pi_num_spto_apli
         AND num_riesgo    = trn.UNO
         AND cod_cob       IN (201,202,203,218)
         AND cod_eco       = em.COD_ECO_PRIMA_TARIFA;
     --
   BEGIN
     --
     mx('I', 'p_tip_desconto');
     --
     l_cod_cia        := trn_k_global.devuelve('cod_cia');
     --
     IF g_tip_mvto_batch = g_k_tip_mvto_batch_cotacao THEN
       --
       mx('-', 'COTACAO');
       --
       l_cod_ramo       := trn_k_global.devuelve('cod_ramo');
       l_cod_agt        := trn_k_global.devuelve('cod_agt');
       l_num_cotizacion := trn_k_global.devuelve('num_cotizacion');
       --
       em_k_csn.p_retorna_tip_desconto(p_cod_cia        =>  l_cod_cia       ,
                                       p_cod_ramo       =>  l_cod_ramo      ,
                                       p_num_cotizacion =>  l_num_cotizacion,
                                       p_cod_agt        =>  l_cod_agt       ,
                                       p_tip_mvto_batch =>  g_tip_mvto_batch,
                                       p_tip_desconto   =>  l_tip_desconto  );
       --
       pp_inserta_c2000000(p_nom_tabla   => g_k_tabla_dv  ,
                             p_nom_columna => 'TIP_DESCONTO',
                             p_val_columna => l_tip_desconto);
       --
     ELSIF g_tip_mvto_batch = g_k_tip_mvto_batch_endosso THEN
       --
       mx('-', 'ENDOSSO');
       --
       l_num_spto     := em_f_max_spto_1(l_cod_cia
                                        ,g_num_poliza);
       --
       l_num_presupuesto  := fp_devuelve_val_coti('DFNUM_PRESUPUESTO'); --1.81
       --
       em_k_a2000030.p_lee(l_cod_cia
                          ,g_num_poliza
                          ,l_num_spto
                          ,trn.CERO
                          ,trn.CERO);
       --
       l_reg_a2000030   := em_k_a2000030.f_devuelve_reg;
       l_num_cotizacion := g_num_poliza;
       --
       pp_asigna_globales(l_reg_a2000030);
       --
       -- {v2.00
       IF c_a2100170%ISOPEN
        THEN
          --
          CLOSE c_a2100170;
          --
       END IF;
       --
       OPEN  c_a2100170 (l_cod_cia
                        ,l_reg_a2000030.cod_ramo
                        ,g_num_poliza
                        ,l_num_spto
                        ,l_reg_a2000030.num_apli
                        ,l_reg_a2000030.num_spto_apli);
       --
       FETCH c_a2100170 INTO l_imp_spto;
       --
       CLOSE c_a2100170;
       -- }v2.00
       --
       em_k_csn.p_retorna_tip_desconto(l_cod_cia
                                      ,l_reg_a2000030.cod_ramo
                                      ,l_num_cotizacion
                                      ,l_reg_a2000030.cod_agt
                                      ,g_tip_mvto_batch
                                      ,l_tip_desconto);
       --
       BEGIN
         --
         em_k_a2000033.p_lee(l_cod_cia
                            ,g_num_poliza
                            ,l_num_spto
                            ,l_reg_a2000030.num_apli
                            ,l_reg_a2000030.num_spto_apli
                            ,g_k_subst_veiculo);
         --
         BEGIN
           --
           em_k_c2990700.p_lee(l_cod_cia
                              ,l_reg_a2000030.cod_ramo
                              ,l_num_presupuesto --1.81 g_num_poliza
                              ,99
                              ,g_k_anual
                              ,trn.UNO);
           --
           IF l_imp_spto <= trn.CERO OR em_k_c2990700.f_imp_neta <= trn.CERO -- v2.00
            THEN
             --
             l_tip_desconto  := trn.CERO;
             --
           END IF;
           --
           EXCEPTION WHEN OTHERS THEN
             --
             mx('-', 'E - em_k_c2990700.p_lee');
             --
             l_tip_desconto  := trn.CERO;
             --
         END;
         --
         EXCEPTION WHEN OTHERS THEN
           --
           mx('-', 'E - em_k_a2000033.p_lee');
           --
           l_tip_desconto  := trn.CERO;
           --
       END;
       --
       mx('l_tip_desconto', l_tip_desconto);
       --
       l_reg_a2000560.cod_cia       := l_cod_cia;
       l_reg_a2000560.num_propuesta := g_num_poliza;
       l_reg_a2000560.cod_campo     := 'TIP_DESCONTO';
       l_reg_a2000560.val_campo     := l_tip_desconto;
       --
       pp_inserta_a2000560(l_reg_a2000560);
       --
     END IF;
     --
     mx('F', 'p_tip_desconto');
     --
   END p_tip_desconto;
  --
  /* ------------------------------------------------------
  || p_ws_valida_renov_garantia
  */ ------------------------------------------------------
  --
  PROCEDURE p_ws_valida_renov_garantia IS
  BEGIN
    --
    mx('I', 'p_ws_valida_renov_garantia');
    --
    ea_k_231_coti_ws.p_valida_renov_garantia(p_xml_in => g_xml_in);
    --
    mx('F', 'p_ws_valida_renov_garantia');
    --
  END p_ws_valida_renov_garantia;
   --
   /* ------------------------------------------------------
   || Devolve as recusas flexiveis se aplicadas
   */ ------------------------------------------------------
   --
   PROCEDURE p_ws_recusa_flexivel
   IS
   --
   l_cod_sector      a1001800.cod_sector     %TYPE;
   --
   l_cod_cia          a2000030.cod_cia         %TYPE;
   l_cod_ramo         a2000030.cod_ramo        %TYPE;
   l_tip_mvto_batch   a2992130_vcr.cod_cia     %TYPE;
   l_num_cotizacion   a2992130_vcr.num_cotacao %TYPE;
   l_num_poliza       a2000030.num_poliza      %TYPE;
   l_num_spto         a2000030.num_spto        %TYPE;
   l_num_apli         a2000030.num_apli        %TYPE;
   l_num_spto_apli    a2000030.num_spto_apli   %TYPE;
   l_cod_tarifa       g9999992.cod_tarifa      %TYPE;
   --
   l_msg             TYPREG_MSG_WS;
   --
   l_reg_a2000030    a2000030%ROWTYPE;
   l_reg_a2992131    a2992131_vcr%ROWTYPE;
   l_tip_autoriza    g1010030.cod_valor %TYPE := 2;
   l_cod_rol         g2992158_vcr.cod_rol_bo%TYPE;
   --
   l_k_sin_recusa     CONSTANT a2992131_vcr.tip_situ_bo%TYPE := 0;
   l_mca_primer_vez VARCHAR2(1)                            := 'S';
   --
   CURSOR cl_a2992130_vcr(pc_cod_cia             a2992130_vcr.cod_cia        %TYPE,
                          pc_num_cotacao         a2992130_vcr.num_cotacao    %TYPE,
                          pc_num_poliza          a2992130_vcr.num_poliza     %TYPE,
                          pc_num_spto            a2992130_vcr.num_spto       %TYPE,
                          pc_num_apli            a2992130_vcr.num_apli       %TYPE,
                          pc_num_spto_apli       a2992130_vcr.num_spto_apli  %TYPE,
                          pc_num_mvto         a2992130_vcr.num_mvto       %TYPE,
                           pc_tip_situ_bo   a2992131_vcr.tip_situ_bo   %TYPE,
                           pc_cod_tarifa    g2992152_vcr.cod_tarifa    %TYPE) IS
       --
    SELECT a1.*, g.tip_recusa
      FROM a2992130_vcr a1, g2992152_vcr g
        WHERE a1.cod_cia       = pc_cod_cia
          AND a1.num_cotacao   = NVL (pc_num_cotacao ,em.NUM_POLIZA_GEN)
          AND a1.num_poliza    = NVL (pc_num_poliza , em.NUM_POLIZA_GEN)
          AND a1.num_spto      = pc_num_spto
          AND a1.num_apli      = pc_num_apli
          AND a1.num_spto_apli = pc_num_spto_apli
          AND a1.num_mvto      = pc_num_mvto
          AND g.cod_cia         = a1.cod_cia
          AND g.cod_ramo        = a1.cod_ramo
          AND g.cod_tarifa      = pc_cod_tarifa
          AND g.cod_recusa_flex = a1.cod_recusa_flex
          AND g.cod_modalidad   IN (g_cod_modalidad, em.COD_MODALIDAD_GEN) -- 4.24
          AND g.cod_nivel1      = dc.COD_NIVEL1_GEN
          AND g.cod_nivel2      = dc.COD_NIVEL2_GEN
          AND g.cod_nivel3      = dc.COD_NIVEL3_GEN
          AND g.cod_canal1      = dc.COD_CANAL1_GEN
          AND g.cod_canal2      = dc.COD_CANAL2_GEN
          AND g.cod_canal3      = dc.COD_CANAL3_GEN
          AND g.cod_agt         = em.COD_AGT_GEN
          AND g.mca_inh         = trn.NO
       AND g.fec_validez     = (SELECT MAX(g1.fec_validez)
                                  FROM g2992152_vcr g1
                                 WHERE g.cod_cia         = g1.cod_cia
                                   AND g.cod_ramo        = g1.cod_ramo
                                   AND g.cod_tarifa      = g1.cod_tarifa
                                   AND g.cod_recusa_flex = g1.cod_recusa_flex
                                   AND g.cod_modalidad   = g1.cod_modalidad
                                   AND g.cod_nivel1      = g1.cod_nivel1
                                   AND g.cod_nivel2      = g1.cod_nivel2
                                   AND g.cod_nivel3      = g1.cod_nivel3
                                   AND g.cod_canal1      = g1.cod_canal1
                                   AND g.cod_canal2      = g1.cod_canal2
                                   AND g.cod_canal3      = g1.cod_canal3
                                   AND g.cod_agt         = g1.cod_agt
                                   AND g.mca_inh         = g1.mca_inh        )
       AND (a1.mca_aviso = (DECODE(pc_tip_situ_bo,
                                   em_k_backoffice.g_k_con_restriccion,
                                   trn.NO,
                                   trn.SI))
                            OR
            a1.mca_aviso = (CASE
                            WHEN g.tip_recusa = 'BR' AND a1.tip_situ_recusa = em_k_backoffice.g_k_en_analisis
                            THEN trn.NO
                            END));
    --
   BEGIN
     --
     mx('I', 'p_ws_recusa_flexivel');
     --
     BEGIN
       --
       l_cod_cia            := fp_ref_devuelve_n('cod_cia');
       l_cod_ramo           := fp_ref_devuelve_n('cod_ramo');
       l_num_poliza         := fp_ref_devuelve_c('num_poliza');
       l_num_cotizacion     := fp_ref_devuelve_c('num_cotizacion');
       l_num_spto           := NVL(fp_ref_devuelve_n('num_spto'),trn.CERO);
       l_num_apli           := NVL(fp_ref_devuelve_n('num_apli'),trn.CERO);
       l_num_spto_apli      := NVL(fp_ref_devuelve_n('num_spto_apli'),trn.CERO);
       l_tip_mvto_batch     := NVL(fp_ref_devuelve_c('tip_mvto_batch'),trn.CERO);
       --
       l_cod_tarifa         := ea_k_231_utils.f_valor_dv('cod_tarifa');
       --
       g_cod_modalidad      := trn_k_global.ref_f_global(em_k_g2990015.f_dvcod_modalidad); -- 4.24
       --
       mx('-','l_cod_cia:          ' ||l_cod_cia);
       mx('-','l_cod_ramo:         ' ||l_cod_ramo);
       mx('-','l_tip_mvto_batch:   ' ||l_tip_mvto_batch);
       mx('-','l_num_cotizacion:   ' ||l_num_cotizacion);
       mx('-','l_num_poliza:       ' ||l_num_poliza);
       mx('-','l_num_spto:         ' ||l_num_spto);
       mx('-','l_num_apli:         ' ||l_num_apli);
       mx('-','l_num_spto_apli:    ' ||l_num_spto_apli);
       mx('-','l_cod_tarifa:       ' ||l_cod_tarifa);
       mx('-','g_cod_modalidad:    ' ||g_cod_modalidad); -- 4.24
       --
       l_cod_sector     := NVL(fp_ref_devuelve_n('COD_SECTOR')
                              ,dc_f_cod_sector_a1001800(p_cod_cia  => l_cod_cia
                                                       ,p_cod_ramo => l_cod_ramo));
       --
       g_hay_recusa_flexible := trn.NO;
       --
       IF l_tip_mvto_batch = em.SPTO_BATCH
       THEN
         --
         l_num_spto := em_f_max_spto_1(p_cod_cia    => l_cod_cia,
                                       p_num_poliza => l_num_poliza);
         --
       ELSE
         --
         l_num_spto    := NVL(l_num_spto, trn.CERO);
         l_num_poliza  := NULL;
         --
       END IF;
       --
      IF l_tip_mvto_batch IN
         (ea_k_231_utils.g_k_cotiza_batch, ea_k_231_utils.g_k_spto_batch) -- modificar
       THEN
         --
         l_reg_a2992131 := em_k_a2992131.f_tip_existe_recusa(p_cod_cia       => l_cod_cia       ,
                                                             p_num_cotacao   => l_num_cotizacion,
                                                             p_num_poliza    => l_num_poliza    ,
                                                             p_num_spto      => l_num_spto      ,
                                                             p_num_apli      => l_num_apli      ,
                                                             p_num_spto_apli => l_num_spto_apli ,
                                                             p_tip_emision   => l_tip_mvto_batch);
         --
        mx('-',
           'l_reg_a2992131.tip_situ_bo ' || l_reg_a2992131.tip_situ_bo);
         --
        IF l_tip_mvto_batch = ea_k_231_utils.g_k_spto_batch THEN
          mx('l_tip_mvto_batch',l_tip_mvto_batch);
          em_k_a2000030.p_lee(l_cod_cia,
                              l_num_poliza,
                              l_num_spto,
                              trn.CERO,
                              trn.CERO);
          l_reg_a2000030 := em_k_a2000030.f_devuelve_reg;
          pp_asigna_globales(l_reg_a2000030);
          pp_autoriza_ct_masivo(trn.NO,
                                g_k_error_cotacao,
                                l_tip_autoriza,
                                'AUTORIZA_RECUSA');
          mx('l_tip_autoriza',l_tip_autoriza);
        END IF;
        IF NVL(l_reg_a2992131.tip_situ_bo, l_k_sin_recusa) =
           em_k_backoffice.g_k_pendiente_tecnica THEN
            --
            g_hay_recusa_flexible := trn.SI ;
            --
         ELSE
            --
            g_hay_recusa_flexible := trn.NO ;
            --
         END IF;
         --
         IF NVL(l_reg_a2992131.tip_situ_bo , l_k_sin_recusa) = l_k_sin_recusa
           THEN
           --
           g_mca_existe_bo := trn.NO;
           --
         ELSE
           --
           g_mca_existe_bo := trn.SI;
           --
         END IF;
         --
        mx('l_reg_a2992131.tip_situ_bo',l_reg_a2992131.tip_situ_bo);
        IF NVL(l_reg_a2992131.tip_situ_bo, l_k_sin_recusa) IN
           (em_k_backoffice.g_k_en_analisis,
            em_k_backoffice.g_k_con_restriccion)
        THEN
            --
            FOR l_reg_30  IN cl_a2992130_vcr(pc_cod_cia       => l_cod_cia                  ,
                                             pc_num_cotacao   => l_num_cotizacion           ,
                                             pc_num_poliza    => l_num_poliza               ,
                                             pc_num_spto      => l_num_spto                 ,
                                             pc_num_apli      => l_num_apli                 ,
                                             pc_num_spto_apli => l_num_spto_apli            ,
                                             pc_num_mvto      => l_reg_a2992131.num_mvto_bo,
                                          pc_tip_situ_bo   => l_reg_a2992131.tip_situ_bo,
                                          pc_cod_tarifa    => l_cod_tarifa              ) -- wal
             LOOP

            mx('dentro loop l_reg_30.cod_recusa_flex', l_reg_30.cod_recusa_flex);
            IF NVL(l_reg_a2992131.tip_situ_bo, l_k_sin_recusa) =
               em_k_backoffice.g_k_en_analisis THEN
               --
               mx('if l_reg_30.cod_recusa_flex', l_reg_30.cod_recusa_flex);
               IF l_reg_30.tip_recusa = 'BR' AND
                  l_reg_30.mca_aviso  = trn.NO
               THEN
            --
                  em_k_g2992051.p_lee_nom_recusa(p_cod_cia    => l_cod_cia,
                                                 p_cod_recusa => l_reg_30.cod_recusa_flex,
                                                 p_cod_idioma => trn_k_global.cod_idioma);
                  --
      l_msg := fp_trata_msg('RECUSA_FLEX'
                                       ,NULL
               ,g_k_pre_msg_erro              ||
                l_reg_30.cod_recusa_flex      ||
          g_k_sep_cod_msg               ||
          em_k_g2992051.f_frontEnd);
                  --
                  l_msg.tip_mensagem := 'ERRO';
                  --
                  g_err_msg.EXTEND(1); -- 4.99
                  --
                  g_err_msg(g_err_msg.LAST) := l_msg; -- 4.99
                  --
               ELSE
                  --
                  l_msg := fp_trata_msg('RECUSA_FLEX'
                                       ,NULL
                                       ,g_k_pre_msg_erro              ||
                                        l_reg_30.cod_recusa_flex      ||
                                        g_k_sep_cod_msg               ||
                                        l_reg_30.desc_recusa);
                  --
               l_msg.tip_mensagem := 'INFO';
               --
               g_err_msg.EXTEND(1); -- 4.99
               --
               g_err_msg(g_err_msg.LAST) := l_msg; -- 4.99
               --
               END IF;
               ---
            ELSE
              mx('else l_reg_30.cod_recusa_flex', l_reg_30.cod_recusa_flex);
              --
              em_k_g2992051.p_lee_nom_recusa(p_cod_cia    => l_cod_cia,
                                             p_cod_recusa => l_reg_30.cod_recusa_flex,
                                             p_cod_idioma => trn_k_global.cod_idioma);
              --
              IF l_mca_primer_vez = 'S' THEN

                l_msg := fp_trata_msg('RECUSA_FLEX',
                                      NULL,
                                      g_k_pre_msg_erro ||
                                            '20099024' ||
                                      g_k_sep_cod_msg  ||
                                      ss_k_mensaje.f_solo_texto_idioma(p_cod_mensaje => 20099024
                                                                      ,p_cod_idioma  => trn_k_global.cod_idioma)); --v3.56

                 --
                 l_msg.tip_mensagem := g_k_tip_msg_error;
                 --
                 g_err_msg.EXTEND(1); -- 4.99
                 --
                 g_err_msg(g_err_msg.LAST) := l_msg; -- 4.99
                 l_mca_primer_vez := 'N';
                 --
              END IF;
              --
              --
              l_msg := fp_trata_msg('RECUSA_FLEX',
                                    NULL,
                                    g_k_pre_msg_erro ||
                                    l_reg_30.cod_recusa_flex ||
                                    g_k_sep_cod_msg                 ||
                                    em_k_g2992051.f_frontEnd);
              --
              l_msg.tip_mensagem := g_k_tip_msg_error;
              --
              g_err_msg.EXTEND(1); -- 4.99
              --
              g_err_msg(g_err_msg.LAST) := l_msg; -- 4.99
              --
            END IF;
            --
          END LOOP;
         --
        END IF;
         --
       END IF;
       --
       --
     EXCEPTION
       WHEN OTHERS
       THEN
         --
         NULL;
         --
     END;
     --
     mx('g_hay_recusa_flexible',g_hay_recusa_flexible);
     --
     mx('F', 'p_ws_recusa_flexivel');
     --
   END p_ws_recusa_flexivel;
   --
   /* ------------------------------------------------------
   || Devolve para o webmethods parametro CLOB: p_xml
   */ ------------------------------------------------------
   --
   PROCEDURE pp_ws_consulta_dados_veiculo (p_cod_cia         IN  G9999992.cod_cia%TYPE,
                                           p_cod_ramo        IN  G9999992.cod_ramo%TYPE,
                                           p_cod_tarifa      IN  G9999992.cod_tarifa%TYPE,
                                           p_cod_agt         IN  G9999992.cod_agt%TYPE,
                                           p_num_cotizacion  IN  C2009030_vcr.num_cotizacion%TYPE,
                                           p_xml_in          IN  CLOB,
                                           p_xml             OUT CLOB)
   IS
      --
      l_retorno           ref_cursor;
      l_num_serie         a2009018_vcr.num_chassi%TYPE;
      l_num_matricula     a2009018_vcr.num_placa%TYPE; -- 2.93
      l_ano_modelo        a2100430.anio_sub_modelo%TYPE;
      l_ano_fabricacao    a2009018_VCR.ano_Fabricacao%TYPE;
      l_cod_fipe          a2009018_vcr.cod_fipe%TYPE := NULL;
      l_cod_sub_modelo    g2109042_vcr.cod_sub_modelo%TYPE := NULL;
      l_cod_modelo        g2109042_vcr.cod_modelo%TYPE := NULL;
      l_cod_marca         g2109042_vcr.cod_marca%TYPE := NULL;
      l_nom_sub_modelo    g2109042_vcr.nom_modelo_submodelo%TYPE := NULL;
      l_mca_zero_km       a2000020.val_Campo%TYPE;
      l_ano_atual         A2009018_VCR.ano_fabricacao%TYPE;
      l_nom_servico       df_cmn_nwt_xx_cnn.vrb_nam_val%TYPE;
      --
      l_reg_msg_erro      TYPREG_MSG_WS;
      --
      l_reg_consulta_nortix A2009018_VCR%ROWTYPE;
      --
      l_mca_motor_subs  df_cmn_nwt_xx_cnn.vrb_nam_val%TYPE; -- MOTORSUBS 3.83
      l_rec_Dados_Motor ea_k_ws_motor_subscr.rec_Dados_Motor; -- MOTORSUBS 3.83
      --
      l_exception EXCEPTION; -- MOTORSUBS 3.83
      l_cod_error g1010020.cod_mensaje%TYPE; -- MOTORSUBS 3.83
      --
      PROCEDURE pi_valida_zero_km IS
      --
      BEGIN
        --
        IF l_mca_zero_km IS NULL
        THEN
          --
          l_mca_zero_km := NVL(fp_recupera_valor (p_xml_in, 'MCA_ZERO_KM')
                              ,trn.NO) ;
          --
          pp_asigna('MCA_ZERO_KM', l_mca_zero_km);
          --
        END IF;
        --
      END pi_valida_zero_km;
      --
   BEGIN
      --
      mx('I', 'pp_ws_consulta_dados_veiculo');
      --
      COMMIT;
      --
      g_err_msg :=  TYPTAB_MSG_WS(); -- 4.99
      --
      g_tab_veic := TYPTAB_DADOS_VEIC();
      g_reg_veic := TYPREG_DADOS_VEIC.autocreate;
      --
      -- I 3.83
      --
      BEGIN
          l_mca_motor_subs := f_recupera_constante('MOTOR_SUBSCR_HABILITA_NORTIX');
        EXCEPTION
          WHEN OTHERS THEN
            l_mca_motor_subs := trn.NO;
      END;
      --
      trn_k_global.asigna('HAB_MOTOR_NORTIX', l_mca_motor_subs); -- MOTORSUBS 3.83
      --
      -- F 3.83
      --
      trn_k_global.asigna('COD_CIA',    p_cod_cia);
      trn_k_global.asigna('COD_RAMO',   p_cod_ramo);
      trn_k_global.asigna('COD_TARIFA', p_cod_tarifa);
      trn_k_global.asigna('COD_AGT',    p_cod_agt);
      trn_k_global.asigna('COD_IDIOMA', g_k_cod_idioma);
      --
      pp_asigna_globales_defecto;
      --
      l_num_serie      := UPPER(fp_recupera_valor (p_xml_in, 'NUM_SERIE'));
      l_num_matricula  := UPPER(fp_recupera_valor(p_xml_in, 'NUM_MATRICULA')); -- jwolff --3.83
      l_ano_modelo     := fp_recupera_valor (p_xml_in, 'ANIO_SUB_MODELO');
      l_cod_fipe       := fp_recupera_valor (p_xml_in, 'COD_FIPE');
      l_cod_sub_modelo := fp_recupera_valor (p_xml_in, 'COD_SUB_MODELO');
      l_cod_modelo     := fp_recupera_valor (p_xml_in, 'COD_MODELO');
      l_cod_marca      := fp_recupera_valor (p_xml_in, 'COD_MARCA');
      l_nom_sub_modelo := fp_recupera_valor (p_xml_in, 'TXT_SUB_MODELO');
      --
      pi_valida_zero_km;
      --
      -- l_nom_servico    := trn_k_df_cmn_nwt_xx_cnn.f_vrb_nam_val('NOM_WS_NORTIX_VALIDA_CHASSI'); -- 2.99 | 3.06
      l_nom_servico := trn_k_df_cmn_nwt_xx_cnn.f_vrb_nam_val('NOM_WS_NORTIX_VALIDA_PLACA'); -- 3.06
      --
      v_tab_fipe := TYPTAB_FIPE();
      v_reg_fipe := TYPREG_FIPE.autocreate;
      --
      trn_k_global.asigna('NUM_COTIZACION', p_num_cotizacion);
      --
      g_existe_g2109042_vcr := fp_valida_g2109042_vcr(p_cod_cia
                                                     ,l_num_serie
                                                     ,l_num_matricula
                                                     ,l_cod_fipe
                                                     ,l_nom_servico
                                                     ,l_cod_marca
                                                     ,l_cod_modelo
                                                     ,l_ano_modelo
                                                     ,l_cod_sub_modelo
                                                     ,l_nom_sub_modelo); --3.67
    --
      --IF l_mca_zero_km = trn.SI THEN
         --
         --pp_consulta_dados_veiculo(p_cod_cia,g_k_cod_consulta_zero_km,p_xml_in,p_xml);
         --
      --END IF;
      --
      IF (l_cod_fipe IS NULL  OR  l_cod_fipe = '') AND
         (l_num_serie IS NOT NULL OR l_num_matricula IS NOT NULL) -- jwolff
      THEN
         -- { jwolff
         IF l_num_serie IS NOT NULL
         THEN
            --
            g_existe_num_serie := TRUE; --2.98
            --
            trn_k_global.asigna('DVNUM_SERIE',l_num_serie);
            --
            pp_asigna('serv_valida_fipe', trn.NO); -- { v 3.63 }
            --
            ea_k_231_dv.p_ws_v_num_serie;
            --
            trn_k_global.borra_variable('serv_valida_fipe'); -- { v 3.63 }
            --
         ELSIF l_num_matricula IS NOT NULL
         THEN
            --
            g_existe_num_matricula := TRUE; -- 2.98
            --
            trn_k_global.asigna('DVNUM_MATRICULA',l_num_matricula);
            --
            pp_asigna('serv_valida_fipe', trn.NO); -- { v 3.63 }
            --
            ea_k_231_dv.p_ws_v_num_matricula;
            --
            trn_k_global.borra_variable('serv_valida_fipe'); -- { v 3.63 }
            --
            l_nom_servico := trn_k_df_cmn_nwt_xx_cnn.f_vrb_nam_val('NOM_WS_NORTIX_VALIDA_PLACA'); -- 2.93
            --
         END IF;
         -- } jwolff
      -- I 3.85
      IF ea_k_ws_motor_subscr.f_retorna_motor_subscr(p_cod_cia,
                                                     p_cod_ramo,
                                                     l_mca_motor_subs)
       THEN
        --
        ea_k_ws_motor_subscr.p_lee_registro_nortix(p_cod_cia      => p_cod_cia,
                                                   p_desc_servico => l_nom_servico,
                                                   p_num_chassi   => l_num_serie,
                                                   p_num_placa    => l_num_matricula,
                                                   p_marca_modelo => trn.NULO,
                                                   p_reg_motor_pf => l_rec_Dados_Motor);
        l_reg_consulta_nortix := l_rec_Dados_Motor.reg_9018;
        --
        IF l_rec_Dados_Motor.desResultado NOT IN ('APROVADO', 'PENDENTE') THEN
          -- I 3.87
          IF l_rec_Dados_Motor.codErro IS NOT NULL THEN -- 4.45
            l_cod_error := l_rec_Dados_Motor.codErro;
              IF  l_cod_error > 0 then -- 4.45
            raise l_exception;
              END IF; -- 4.45
          END IF;
          -- F 3.87
        END IF;
        --
        -- IF l_reg_consulta_nortix.num_indice_risco IN (1, 4) THEN -- I 4.45
          --
        --   pp_inserta_c2000000('A2000020', 'PCT_AJUSTE_TAB_REF', '80');
          --
        -- END IF; -- F 4.45
        --
      -- F 3.85
      ELSE
         ea_k_ws_nortix.p_lee_registro(p_cod_cia      => p_cod_cia,
                                       p_desc_servico => l_nom_servico,
                                       p_num_chassi   => l_num_serie,
                                       p_num_placa    => l_num_matricula, -- jwolff
                                       p_marca_modelo => trn.NULO,
                                       p_reg_a2009018 => l_reg_consulta_nortix);
         --
      END IF; -- F MOTORSUBS 3.76
         l_cod_fipe := l_reg_consulta_nortix.cod_fipe;
         --
         IF l_cod_fipe IS NULL    OR
            l_cod_fipe = '0'      THEN
            --
            l_cod_fipe := l_reg_consulta_nortix.cod_molicar;
            --
            pp_trata_multi_molicar (l_cod_fipe, v_tab_fipe,v_reg_fipe);
            --
         ELSE
            --
            pp_trata_multi_fipe (l_cod_fipe, v_tab_fipe,v_reg_fipe);
            --
         END IF;
         --
         l_ano_modelo := l_reg_consulta_nortix.ano_modelo;
         --
         l_ano_fabricacao := l_reg_consulta_nortix.ano_fabricacao;
         -- I 3.07
         IF l_reg_consulta_nortix.num_chassi IS NOT NULL THEN
           l_num_serie := l_reg_consulta_nortix.num_chassi;
         END IF;
         -- F 3.07
         l_ano_atual := TO_CHAR(TRUNC(SYSDATE),'yyyy');
         --
         trn_k_global.asigna('ANO_FABRICACAO'  , l_ano_fabricacao);
         trn_k_global.asigna('ANIO_SUB_MODELO' , l_ano_modelo);
         --
         IF v_tab_fipe.EXISTS(1) THEN
            --
          FOR Y IN v_tab_fipe.FIRST .. v_tab_fipe.LAST LOOP
            -- I MOTORSUBS 3.88
            IF ea_k_ws_motor_subscr.f_retorna_motor_subscr(p_cod_cia,   -- 3.93
                                                           p_cod_ramo,  -- 3.93
                                                           l_mca_motor_subs) THEN
              --
              P_CONSULTA_VEIC(v_tab_fipe(y).cod_fipe,
                              g_tab_veic,
                              l_num_serie,
                              l_reg_consulta_nortix); -- 2.98 l_num_serie
              --
            ELSE
              --
              P_CONSULTA_VEIC(v_tab_fipe(y).cod_fipe,
                              g_tab_veic,
                              l_num_serie,
                              null); -- 2.98 l_num_serie
            END IF;
      -- F MOTORSUBS 3.88
            END LOOP;
            --
         END IF;
         -- I 2.98
         IF g_existe_num_serie THEN
           OPEN l_retorno FOR
           SELECT NOM_CAMPO_COD_FIPE             AS NOM_CAMPO_COD_FIPE,
                  COD_FIPE                       AS COD_FIPE,
                  NOM_CAMPO_COD_MOLICAR          AS NOM_CAMPO_COD_MOLICAR,
                  COD_MOLICAR                    AS COD_MOLICAR,
                  NOM_CAMPO_COD_MARCA            AS NOM_CAMPO_COD_MARCA,
                  COD_MARCA                      AS COD_MARCA,
                  NOM_CAMPO_COD_MODELO           AS NOM_CAMPO_COD_MODELO,
                  COD_MODELO                     AS COD_MODELO,
                  NOM_CAMPO_COD_SUB_MODELO       AS NOM_CAMPO_COD_SUB_MODELO,
                  COD_SUB_MODELO                 AS COD_SUB_MODELO,
                  NOM_CAMPO_ANIO_SUB_MODELO      AS NOM_CAMPO_ANIO_SUB_MODELO,
                  ANIO_SUB_MODELO                AS ANIO_SUB_MODELO,
                  NOM_CAMPO_COD_ANO_FABR         AS NOM_CAMPO_COD_ANO_FABR,
                  COD_ANO_FABR                   AS COD_ANO_FABR,
                  NOM_CAMPO_VAL_SUB_MODELO       AS NOM_CAMPO_VAL_SUB_MODELO,
                  VAL_SUB_MODELO                 AS VAL_SUB_MODELO,
                  NOM_CAMPO_NOM_MODELO_SUBMODELO AS NOM_CAMPO_NOM_MODELO_SUBMODELO,
                  NOM_MODELO_SUBMODELO           AS NOM_MODELO_SUBMODELO,
                  NOM_CAMPO_COD_MADRE            AS NOM_CAMPO_COD_MADRE,
                  COD_MADRE                      AS COD_MADRE,
                  NOM_CAMPO_COD_CATEGORIA        AS NOM_CAMPO_COD_CATEGORIA,
                  COD_CATEGORIA                  AS cod_categoria,
                  NOM_CAMPO_NUM_SERIE_MATRICULA  AS NOM_CAMPO_NUM_MATRICULA,
                  NUM_SERIE_MATRICULA            AS NUM_MATRICULA

                 /*NOM_CAMPO_NUM_PORTAS             AS NOM_CAMPO_NUM_PORTAS,
                 NUM_PORTAS                       AS NUM_PORTAS,
                 NOM_CAMPO_NUM_PASSAGEIROS        AS NOM_CAMPO_NUM_PASSAGEIROS,
                 NUM_PASSAGEIROS                  AS NUM_PASSAGEIROS,
                 NOM_CAMPO_COD_CLASSE             AS NOM_CAMPO_COD_CLASSE,
                 COD_CLASSE                       AS COD_CLASSE,
                 NOM_CAMPO_QTDE_IRREGULAR         AS NOM_CAMPO_QTDE_IRREGULAR,
                 NUM_QTDE_IRREGULAR               AS NUM_QTDE_IRREGULAR,
                 NOM_CAMPO_FEC_CONSULTA           AS NOM_CAMPO_FEC_CONSULTA,
                 FEC_CONSULTA                     AS FEC_CONSULTA,
                 NOM_CAMPO_RETORNO_SERVICO        AS NOM_CAMPO_RETORNO_SERVICO,
                 RETORNO_SERVICO                  AS RETORNO_SERVICO,
                 NOM_CAMPO_NOM_MARCA              AS NOM_CAMPO_NOM_MARCA,
                 NOM_MARCA                        AS NOM_MARCA*/
             FROM TABLE(CAST(g_tab_veic AS TYPTAB_DADOS_VEIC));
         ELSIF g_existe_num_matricula THEN
           OPEN l_retorno FOR
           SELECT NOM_CAMPO_COD_FIPE             AS NOM_CAMPO_COD_FIPE,
                  COD_FIPE                       AS COD_FIPE,
                  NOM_CAMPO_COD_MOLICAR          AS NOM_CAMPO_COD_MOLICAR,
                  COD_MOLICAR                    AS COD_MOLICAR,
                  NOM_CAMPO_COD_MARCA            AS NOM_CAMPO_COD_MARCA,
                  COD_MARCA                      AS COD_MARCA,
                  NOM_CAMPO_COD_MODELO           AS NOM_CAMPO_COD_MODELO,
                  COD_MODELO                     AS COD_MODELO,
                  NOM_CAMPO_COD_SUB_MODELO       AS NOM_CAMPO_COD_SUB_MODELO,
                  COD_SUB_MODELO                 AS COD_SUB_MODELO,
                  NOM_CAMPO_ANIO_SUB_MODELO      AS NOM_CAMPO_ANIO_SUB_MODELO,
                  ANIO_SUB_MODELO                AS ANIO_SUB_MODELO,
                  NOM_CAMPO_COD_ANO_FABR         AS NOM_CAMPO_COD_ANO_FABR,
                  COD_ANO_FABR                   AS COD_ANO_FABR,
                  NOM_CAMPO_VAL_SUB_MODELO       AS NOM_CAMPO_VAL_SUB_MODELO,
                  VAL_SUB_MODELO                 AS VAL_SUB_MODELO,
                  NOM_CAMPO_NOM_MODELO_SUBMODELO AS NOM_CAMPO_NOM_MODELO_SUBMODELO,
                  NOM_MODELO_SUBMODELO           AS NOM_MODELO_SUBMODELO,
                  NOM_CAMPO_COD_MADRE            AS NOM_CAMPO_COD_MADRE,
                  COD_MADRE                      AS COD_MADRE,
                  NOM_CAMPO_COD_CATEGORIA        AS NOM_CAMPO_COD_CATEGORIA,
                  COD_CATEGORIA                  AS cod_categoria,
                  NOM_CAMPO_NUM_SERIE_MATRICULA  AS NOM_CAMPO_NUM_SERIE,
                  NUM_SERIE_MATRICULA            AS NUM_SERIE

                 /*NOM_CAMPO_NUM_PORTAS             AS NOM_CAMPO_NUM_PORTAS,
                 NUM_PORTAS                       AS NUM_PORTAS,
                 NOM_CAMPO_NUM_PASSAGEIROS        AS NOM_CAMPO_NUM_PASSAGEIROS,
                 NUM_PASSAGEIROS                  AS NUM_PASSAGEIROS,
                 NOM_CAMPO_COD_CLASSE             AS NOM_CAMPO_COD_CLASSE,
                 COD_CLASSE                       AS COD_CLASSE,
                 NOM_CAMPO_QTDE_IRREGULAR         AS NOM_CAMPO_QTDE_IRREGULAR,
                 NUM_QTDE_IRREGULAR               AS NUM_QTDE_IRREGULAR,
                 NOM_CAMPO_FEC_CONSULTA           AS NOM_CAMPO_FEC_CONSULTA,
                 FEC_CONSULTA                     AS FEC_CONSULTA,
                 NOM_CAMPO_RETORNO_SERVICO        AS NOM_CAMPO_RETORNO_SERVICO,
                 RETORNO_SERVICO                  AS RETORNO_SERVICO,
                 NOM_CAMPO_NOM_MARCA              AS NOM_CAMPO_NOM_MARCA,
                 NOM_MARCA                        AS NOM_MARCA*/
             FROM TABLE(CAST(g_tab_veic AS TYPTAB_DADOS_VEIC));
         END IF;
         -- F 2.96
         --
      --I 3.69
        IF l_num_serie IS NOT NULL OR l_num_matricula IS NOT NULL THEN  --4.13
          --
          IF ( g_tab_veic.exists(1) ) THEN
            --I 3.91
            IF ea_k_ws_motor_subscr.f_retorna_motor_subscr(p_cod_cia,
                                                           p_cod_ramo,
                                                           l_mca_motor_subs)  THEN
              --
              g_existe_g2109042_vcr       := 'TRUE';
              --
            ELSE -- f 3.91
              --
              g_existe_g2109042_vcr := fp_valida_g2109042_vcr(p_cod_cia
                                                             ,l_num_serie
                                                             ,l_num_matricula
                                                             ,l_cod_fipe
                                                             ,l_nom_servico
                                                             ,l_cod_marca
                                                             ,l_cod_modelo
                                                             ,l_ano_modelo
                                                             ,l_cod_sub_modelo
                                                             ,l_nom_sub_modelo);
              --
            END IF; -- 3.91
            --
          ELSE
            --
            g_cod_mensaje := NULL;
            g_anx_mensaje := 'Chassi/Placa nao localido';
            --
            IF ( fp_recupera_valor(p_xml_in, 'NUM_SERIE') IS NOT NULL ) THEN -- chassi
              --
              g_cod_mensaje := 20098195; -- Nao foi possivel encontrar o numero de chassi informado.
              g_anx_mensaje := null;
              --
            ELSIF ( fp_recupera_valor(p_xml_in, 'NUM_MATRICULA') IS NOT NULL ) THEN -- placa
              --
              g_cod_mensaje := 20098006; -- Placa Invalida
              g_anx_mensaje := null;
              --
            END IF;
            --
            pp_devuelve_error;
            --
          END IF;
          --
        END IF;                                                         --4.13
      --F 3.69
      --
         p_gerar_xml_dados_veiculo(l_retorno, p_xml);
         --
      ELSIF l_cod_marca IS NOT NULL AND l_nom_sub_modelo IS NOT NULL THEN
         --
         pp_consulta_dados_veiculo(p_cod_cia,g_k_cod_consulta_marca_modelo,p_xml_in,p_xml);
         --
      ELSIF l_cod_marca IS NOT NULL THEN
         --
         IF l_cod_marca       IS NOT NULL  AND
            l_cod_modelo      IS NULL      AND
            l_cod_sub_modelo  IS NULL
        THEN
           --
           pp_consulta_dados_veiculo(p_cod_cia,g_k_cod_consulta_marca,p_xml_in,p_xml);
           --
        END IF;
        --
        IF l_cod_marca       IS NOT NULL  AND
           l_cod_modelo      IS NOT NULL  AND
           l_cod_sub_modelo  IS NOT NULL  AND
           l_ano_modelo      IS NOT NULL
        THEN
           --
           pp_consulta_dados_veiculo(p_cod_cia,g_k_cod_consulta_marca_ano,p_xml_in,p_xml);
           --
        END IF;
        --
      ELSIF l_cod_fipe IS NOT NULL
      THEN
         --
         pp_consulta_dados_veiculo(p_cod_cia,g_k_cod_consulta_fipe,p_xml_in,p_xml);
         --
    --I 1.51
      ELSIF l_cod_marca IS NULL AND l_nom_sub_modelo IS NOT NULL
      THEN
         --
         pp_consulta_dados_veiculo(p_cod_cia,g_k_cod_consulta_modelo,p_xml_in,p_xml);
         --
      --F 1.51
      END IF;
      --
      mx('F', 'pp_ws_consulta_dados_veiculo');
      --
      EXCEPTION
    --I 3.85
    WHEN l_exception THEN
      --
      IF l_retorno%ISOPEN THEN
        CLOSE l_retorno;
      END IF;
      --
      g_err_msg.EXTEND(1); -- 4.99
      g_err_msg(g_err_msg.LAST) := fp_trata_msg('NUM_SERIE', -- 4.99
                                                                                NULL,
                                                                                g_k_pre_msg_erro ||
                                                                                l_cod_error ||
                                                                                g_k_sep_cod_msg);
      --
      pp_processa_mensagem(g_err_msg, l_retorno); -- 4.99
      --
      p_gerar_xml_mensagem(l_retorno, p_xml);
      --
      g_err_msg := NULL; -- 4.99
      --
      trn_k_global.borra_todas;
      --
      mx('F', 'pp_ws_consulta_dados_veiculo - EXCEPTION');
    -- F 3.85
       WHEN OTHERS THEN
          --
          l_reg_msg_erro := fp_trata_msg('NUM_SERIE',SQLCODE,SQLERRM);
          --
          g_err_msg.EXTEND(1);                                          --ggarletti.3.95 -- 4.99
          g_err_msg(g_err_msg.LAST) := l_reg_msg_erro;  --ggarletti.3.95 -- 4.99
          --
          pp_processa_mensagem(g_err_msg, l_retorno); -- 4.99
          --
          p_gerar_xml_mensagem(l_retorno, p_xml);
          --
--        g_err_msg := NULL;                            --ggarletti.3.95
          --
          trn_k_global.borra_todas;
          --
          mx('F', 'pp_ws_consulta_dados_veiculo - EXCEPTION');
          --
   END pp_ws_consulta_dados_veiculo;
   --
   /* ------------------------------------------------------
   || Devolve para o webmethods parametro CLOB: p_xml
   */ ------------------------------------------------------
   --
   PROCEDURE p_ws_consulta_dados_veiculo (p_cod_cia         IN  G9999992.cod_cia%TYPE,
                                          p_cod_ramo        IN  G9999992.cod_ramo%TYPE,
                                          p_cod_tarifa      IN  G9999992.cod_tarifa%TYPE,
                                          p_cod_agt         IN  G9999992.cod_agt%TYPE,
                                          p_num_cotizacion  IN  C2009030_vcr.num_cotizacion%TYPE,
                                          p_xml_in          IN  CLOB,
                                          p_xml             OUT CLOB)
   IS
   --
   l_reg_a2009710      a2009710_vcr%ROWTYPE; -- 4.52
   --
   BEGIN
      --
      mx('I', 'p_ws_consulta_dados_veiculo');
      --
      g_num_paso       := trn_k_global.ref_f_global('NUM_PASO'); -- 4.52
      --
      trn_k_global.borra_todas;
      --
      DBMS_SESSION.RESET_PACKAGE; -- 3.00
      --
      -- 4.52 I
      --
      l_reg_a2009710.cod_cia        := p_cod_cia              ;
      l_reg_a2009710.cod_ramo       := p_cod_ramo             ;
      l_reg_a2009710.cod_agt        := NVL(p_cod_agt, em.COD_AGT_GEN)          ;
      l_reg_a2009710.num_cotizacion := NVL(p_num_cotizacion, em.NUM_POLIZA_GEN);
      l_reg_a2009710.tip_mvto_batch := NVL(g_tip_mvto_batch,9);
      l_reg_a2009710.num_paso       := NVL(g_num_paso,99)     ;
      l_reg_a2009710.txt_processo   := 'consultarDadosVeiculo';
      l_reg_a2009710.fec_ini        := SYSDATE                ;
      l_reg_a2009710.fec_fim        := NULL                   ;
      l_reg_a2009710.cod_retorno    := NULL                   ;
      l_reg_a2009710.desc_xml_in    := p_xml_in               ;
      l_reg_a2009710.desc_xml_out   := NULL                   ;
      --
      trn_k_global.asigna('COD_USR',g_cod_usr_automatico);
      --
      pp_ws_consulta_dados_veiculo (p_cod_cia       ,
                                    p_cod_ramo      ,
                                    p_cod_tarifa    ,
                                    p_cod_agt       ,
                                    p_num_cotizacion,
                                    p_xml_in        ,
                                    p_xml           );
      --
      -- 4.52 I
      --
      l_reg_a2009710.fec_fim        := SYSDATE;
      l_reg_a2009710.desc_xml_out   := p_xml;
      --
      IF LENGTH(p_xml) = trn.CERO THEN
        --
        l_reg_a2009710.cod_retorno    := g_k_cod_retorno_erro;
        --
      ELSE
        --
        l_reg_a2009710.cod_retorno    := g_k_cod_retorno_suce;
        --
      END IF;
      --
      em_k_a2009710_vcr.p_trata_log_processo(l_reg_a2009710);
      --
      mx('F', 'p_ws_consulta_dados_veiculo');
      --
      trn_k_global.borra_todas;
      --
   END p_ws_consulta_dados_veiculo;
   --
   /* ------------------------------------------------------
   || Devolve para o webmethods parametro CLOB: p_xml
   */ ------------------------------------------------------
   --
   PROCEDURE p_ws_consulta_dados_segurado (p_cod_cia   IN a2000030.cod_cia%TYPE ,
                                           p_cod_ramo  IN a2000030.cod_ramo%TYPE,
                                           p_cod_agt   IN a2000030.cod_agt%TYPE ,
                                           p_xml_in    IN CLOB,
                                           p_xml       OUT CLOB)
   IS
      --
      l_reg_a2009710      a2009710_vcr%ROWTYPE; -- 4.50
      l_eh_motor_api      varchar2(1); -- 4.82
      --
   BEGIN
      --
      mx('I', 'p_ws_consulta_dados_segurado');
      --
      -- 4.52 I
      --
      g_num_cotizacion       := trn_k_global.ref_f_global('NUM_COTIZACION');
      g_tip_mvto_batch       := trn_k_global.ref_f_global('TIP_MVTO_BATCH');
      g_num_paso             := trn_k_global.ref_f_global('NUM_PASO');
      l_eh_motor_api         := trn_k_global.ref_f_global('MCA_MOTOR_API'); -- 4.82
      --
      -- 4.52 F
      --
      trn_k_global.borra_todas;
      --
      DBMS_SESSION.RESET_PACKAGE;
      --
      --I 4.82
      IF  NVL(l_eh_motor_api, trn.NO) = trn.si AND  NVL(g_num_cotizacion,'9999999999999') <> '9999999999999' then
         trn_k_global.asigna('NUM_COTIZACION', g_num_cotizacion);
      END if;
      --F 4.82
      -- 4.50 I
      --
      l_reg_a2009710.cod_cia        := p_cod_cia           ;
      l_reg_a2009710.cod_ramo       := p_cod_ramo          ;
      l_reg_a2009710.cod_agt        := p_cod_agt           ;
      l_reg_a2009710.num_cotizacion := NVL(g_num_cotizacion,'9999999999999');
      l_reg_a2009710.tip_mvto_batch := NVL(g_tip_mvto_batch,9)    ;
      l_reg_a2009710.num_paso       := NVL(g_num_paso,99)  ;
      l_reg_a2009710.txt_processo   := 'consultarDadosSegurado';
      l_reg_a2009710.fec_ini        := SYSDATE             ;
      l_reg_a2009710.fec_fim        := NULL                ;
      l_reg_a2009710.cod_retorno    := NULL                ;
      l_reg_a2009710.desc_xml_in    := p_xml_in            ;
      l_reg_a2009710.desc_xml_out   := NULL                ;
      --
      trn_k_global.asigna('COD_USR',g_cod_usr_automatico); -- 4.50
      --
      pp_ws_consulta_dados_segurado(p_cod_cia
                                   ,p_cod_ramo
                                   ,p_cod_agt
                                   ,p_xml_in
                                   ,p_xml     );
      --
      -- 4.50 I
      --
      l_reg_a2009710.fec_fim        := SYSDATE;
      l_reg_a2009710.desc_xml_out   := p_xml;
      --
      IF LENGTH(p_xml) = trn.CERO THEN
        --
        l_reg_a2009710.cod_retorno    := g_k_cod_retorno_erro;
        --
      ELSE
        --
        l_reg_a2009710.cod_retorno    := g_k_cod_retorno_suce;
        --
      END IF;
      --
      em_k_a2009710_vcr.p_trata_log_processo(l_reg_a2009710); -- 4.50
      --
      mx('F', 'p_ws_consulta_dados_segurado');
      --
   END p_ws_consulta_dados_segurado;
   --
   /* ---------------------------------------------------------------- *
   || Servico de resumo
   */ ----------------------------------------------------------------
   PROCEDURE p_ws_consulta_resumo (p_cod_cia          IN a2000030.cod_cia%TYPE,
                                   p_cod_ramo         IN a2000030.cod_ramo%TYPE,
                                   p_cod_tarifa       IN G9999992.cod_tarifa%TYPE,
                                   p_cod_agt          IN a2000030.cod_agt%TYPE,
                                   p_num_cotizacion   IN C2009030_vcr.num_cotizacion%TYPE,
                                   p_num_poliza_grupo IN A2000500.num_poliza_grupo%TYPE,
                                   p_num_contrato     IN A2000500.num_contrato%TYPE,
                                   p_num_subcontrato  IN A2000500.num_contrato%TYPE,
                                   p_tip_mvto_batch   IN A2000500.tip_mvto_batch%TYPE,
                                   p_xml_in           IN CLOB,
                                   p_cursor_calculo   OUT SYS_REFCURSOR,
                                   p_cursor_tomador   OUT SYS_REFCURSOR,
                                   p_cursor_segurado  OUT SYS_REFCURSOR,
                                   p_cursor_riscos    OUT SYS_REFCURSOR,
                                   p_cursor_mensagens OUT SYS_REFCURSOR)
   IS
     --
     l_num_proceso      a0009030_vcr.num_proceso%TYPE;
     l_nom_archivo      a0009030_vcr.nom_archivo%TYPE;
     l_tip_mvto_batch   a2000500.tip_mvto_batch%TYPE;
     l_num_poliza_grupo a2000500.num_poliza_grupo%TYPE;
     l_val_calc         NUMBER;
     l_erro_processo    BOOLEAN := TRUE;
     l_nom_archivo_null EXCEPTION;
     --
   BEGIN
     --
     trn_k_global.borra_todas;
     --
     mx('I', 'p_ws_consulta_resumo');
     --
     l_tip_mvto_batch := NVL(p_tip_mvto_batch, g_k_tip_mvto_batch_cotacao);
     --
     IF p_xml_in IS NOT NULL THEN
       --
       l_num_proceso := fp_recupera_valor(p_xml_in, 'numProcesso');
       l_nom_archivo := fp_recupera_valor(p_xml_in, 'nomArquivo');
       --
       IF (l_num_proceso IS NOT NULL) THEN
         --
         IF p_cursor_calculo%ISOPEN THEN
           --
           CLOSE p_cursor_calculo;
           --
         END IF;
         --
         IF p_cursor_tomador%ISOPEN THEN
           --
           CLOSE p_cursor_tomador;
           --
         END IF;
         --
         IF p_cursor_segurado%ISOPEN THEN
           --
           CLOSE p_cursor_segurado;
           --
         END IF;
         --
         IF p_cursor_riscos%ISOPEN THEN
           --
           CLOSE p_cursor_riscos;
           --
         END IF;
         --
         IF p_cursor_mensagens%ISOPEN THEN
           --
           CLOSE p_cursor_mensagens;
           --
         END IF;
         --
         -- Verifica se o processo foi executado com sucesso
         SELECT SUM(IMP_RECIBO)
           INTO l_val_calc
           FROM a0009030_vcr a
              , a2000500_vcr b
              , c2990700 c
          WHERE b.cod_cia        = a.cod_cia
            AND b.num_proceso    = a.num_proceso
            AND c.cod_cia        = b.cod_cia
            AND c.cod_ramo       = b.cod_ramo
            AND c.num_cotizacion = b.num_poliza
            AND a.cod_cia     = p_cod_cia
            AND a.cod_ramo    = p_cod_ramo
            AND (a.cod_agt    = NVL(p_cod_agt, a.cod_agt)
             OR  a.cod_agt    = em.COD_AGT_GEN)
            AND a.num_proceso = l_num_proceso
            AND a.nom_archivo = NVL(l_nom_archivo, a.nom_archivo)
            AND a.tip_situ    = dc.SITU_TERMINACION_NORMAL;
         --
         IF l_val_calc > trn.CERO THEN
           --
           SELECT num_poliza_grupo
             INTO l_num_poliza_grupo
             FROM a0009030_vcr a
            WHERE cod_cia       = p_cod_cia
              AND a.cod_ramo    = p_cod_ramo
              AND (a.cod_agt    = NVL(p_cod_agt, a.cod_agt)
               OR  a.cod_agt    = em.COD_AGT_GEN)
              AND a.num_proceso = l_num_proceso
              AND a.nom_archivo = NVL(l_nom_archivo, a.nom_archivo)
              AND a.tip_situ    = dc.SITU_TERMINACION_NORMAL;
           --
           OPEN p_cursor_calculo
            FOR SELECT SUM(IMP_RECIBO)
                  FROM a0009030_vcr a
                     , a2000500_vcr b
                     , c2990700 c
                  WHERE b.cod_cia        = a.cod_cia
                    AND b.num_proceso    = a.num_proceso
                    AND c.cod_cia        = b.cod_cia
                    AND c.cod_ramo       = b.cod_ramo
                    AND c.num_cotizacion = b.num_poliza
                    AND a.cod_cia     = p_cod_cia
                    AND a.cod_ramo    = p_cod_ramo
                    AND (a.cod_agt    = NVL(p_cod_agt, a.cod_agt)
                     OR  a.cod_agt    = em.COD_AGT_GEN)
                    AND a.num_proceso = l_num_proceso
                    AND a.nom_archivo = NVL(l_nom_archivo, a.nom_archivo)
                    AND a.tip_situ    = dc.SITU_TERMINACION_NORMAL;
           --
           OPEN p_cursor_tomador
             FOR SELECT *
                   FROM (SELECT nom_columna
                              , val_columna
                           FROM c2000000 A
                          WHERE A.cod_cia        = p_cod_cia
                            AND A.cod_ramo       = p_cod_ramo
                            AND A.num_cotizacion = l_num_poliza_grupo)
                   PIVOT(MAX(val_columna) FOR nom_columna IN('COD_DOCUM_TOMA'    AS COD_DOCUM_TOMA,
                                                             'NOM_TERCERO_TOMA'  AS NOM_TERCERO_TOMA,
                                                             'FEC_NACIMIENTO'    AS FEC_NACIMIENTO,
                                                             'TLF_MOVIL'         AS TLF_MOVIL,
                                                             'TLF_NUMERO'        AS TLF_NUMERO,
                                                             'TLF_NUMERO_COM'    AS TLF_NUMERO_COM,
                                                             'EMAIL'             AS EMAIL));
           --
           OPEN p_cursor_segurado
             FOR SELECT *
                   FROM (SELECT nom_columna
                              , val_columna
                           FROM c2000000 A
                          WHERE A.cod_cia        = p_cod_cia
                            AND A.cod_ramo       = p_cod_ramo
                            AND A.num_cotizacion = l_num_poliza_grupo)
                   PIVOT(MAX(val_columna) FOR nom_columna IN('COD_DOCUM_ASEG'    AS COD_DOCUM_TOMA,
                                                             'NOM_TERCERO_ASEG'  AS NOM_TERCERO_TOMA,
                                                             'FEC_NACIMIENTO'    AS FEC_NACIMIENTO,
                                                             'TLF_MOVIL'         AS TLF_MOVIL,
                                                             'TLF_NUMERO'        AS TLF_NUMERO,
                                                             'TLF_NUMERO_COM'    AS TLF_NUMERO_COM,
                                                             'EMAIL'             AS EMAIL));
           --
           OPEN p_cursor_riscos
            FOR SELECT a.num_serie,
                      a.num_matricula,
                      b.nom_modelo_submodelo,
                      a.cod_ano_fabr ||'/'||a.anio_sub_modelo,
                      d.nom_uso_vehi
                 FROM (SELECT *
                          FROM c2000000
                          WHERE (cod_cia, cod_ramo, num_cotizacion) IN
                                 (SELECT cod_cia, cod_ramo, num_cotizacion
                                    FROM c2009030_vcr
                                   WHERE cod_cia          = p_cod_cia
                                     AND cod_ramo         = p_cod_ramo
                                     AND num_poliza_grupo = l_num_poliza_grupo)
                            AND nom_columna IN ('COD_MARCA'
                                               ,'COD_MODELO'
                                               ,'COD_SUB_MODELO'
                                               ,'NUM_SERIE'
                                               ,'NUM_MATRICULA'
                                               ,'ANIO_SUB_MODELO'
                                               ,'COD_ANO_FABR'
                                               ,'COD_TIP_VEHI'
                                               ,'COD_USO_VEHI'))
                 PIVOT(MAX(val_columna) FOR nom_columna IN ('COD_MARCA'       AS COD_MARCA
                                                           ,'COD_MODELO'      AS COD_MODELO
                                                           ,'COD_SUB_MODELO'  AS COD_SUB_MODELO
                                                           ,'NUM_SERIE'       AS NUM_SERIE
                                                           ,'NUM_MATRICULA'   AS NUM_MATRICULA
                                                           ,'ANIO_SUB_MODELO' AS ANIO_SUB_MODELO
                                                           ,'COD_ANO_FABR'    AS COD_ANO_FABR
                                                           ,'COD_TIP_VEHI'    AS COD_TIP_VEHI
                                                           ,'COD_USO_VEHI'    AS COD_USO_VEHI)) a,
                     g2109042_vcr b,
                     a2100200 d
                 WHERE b.cod_cia        = a.cod_cia
                   AND b.cod_marca      = a.cod_marca
                   AND b.cod_modelo     = a.cod_modelo
                   AND b.cod_sub_modelo = a.cod_sub_modelo
                   AND b.fec_validez    = (SELECT MAX(fec_validez)
                                             FROM g2109042_vcr c
                                            WHERE c.cod_cia        = b.cod_cia
                                              AND c.cod_marca      = b.cod_marca
                                              AND c.cod_modelo     = b.cod_modelo
                                              AND c.cod_sub_modelo = b.cod_sub_modelo)
                   AND d.cod_cia        = a.cod_cia
                   AND d.cod_uso_vehi   = a.cod_uso_vehi
                   AND d.mca_inh        = trn.NO
                   AND d.fec_validez    = (SELECT MAX(fec_validez)
                                             FROM a2100200 e
                                            WHERE e.cod_cia        = d.cod_cia
                                              AND e.cod_uso_vehi   = d.cod_uso_vehi
                                              AND e.mca_inh        = d.mca_inh);
           --
           OPEN p_cursor_mensagens
            FOR SELECT 'OK'
                  FROM dual;
           --
           l_erro_processo := FALSE;
           --
         END IF;
         --
       END IF;
       --
     END IF;
     --
     IF l_erro_processo THEN
       --
       OPEN p_cursor_calculo
        FOR SELECT ''
              FROM dual;
       --
       OPEN p_cursor_tomador
        FOR SELECT '' as COD_DOCUM_TOMA  ,
                   '' as NOM_TERCERO_TOMA,
                   '' as FEC_NACIMIENTO  ,
                   '' as TLF_MOVIL       ,
                   '' as TLF_NUMERO      ,
                   '' as TLF_NUMERO_COM  ,
                   '' as EMAIL
              FROM dual;
       --
       OPEN p_cursor_segurado
        FOR SELECT '' as COD_DOCUM_TOMA  ,
                   '' as NOM_TERCERO_TOMA,
                   '' as FEC_NACIMIENTO  ,
                   '' as TLF_MOVIL       ,
                   '' as TLF_NUMERO      ,
                   '' as TLF_NUMERO_COM  ,
                   '' as EMAIL
              FROM dual;
       --
       OPEN p_cursor_riscos
        FOR SELECT '' as num_serie,
                   '' as num_matricula,
                   '' as nom_modelo_submodelo,
                   '' as ano_fabr_y_sub_modelo,
                   '' as nom_uso_vehi
              FROM dual;
       --
       OPEN p_cursor_mensagens
        FOR SELECT 'ERRO'
              FROM dual;
       --
     END IF;
     --
     trn_k_global.borra_todas;
     --
     mx('F', 'p_ws_consulta_resumo');
     --
   EXCEPTION
     WHEN OTHERS THEN
      OPEN p_cursor_calculo
            FOR SELECT NULL
                  FROM dual;
           --
           OPEN p_cursor_tomador
            FOR SELECT NULL
                  FROM dual;
           --
           OPEN p_cursor_segurado
            FOR SELECT NULL
                  FROM dual;
           --
           OPEN p_cursor_riscos
            FOR SELECT NULL
                  FROM dual;
           --
       --
       OPEN p_cursor_mensagens
            FOR SELECT 'ERRO'
                  FROM dual;
       --
       mx('E', 'p_ws_consulta_resumo');
       --
   END p_ws_consulta_resumo;

   --
   /* ------------------------------------------------------
   || Devolve para o webmethods parametro CLOB: p_xml
   */ ------------------------------------------------------
   --
   PROCEDURE p_ws_consulta_uso_categoria (p_cod_cia        IN a2000030.cod_cia%TYPE,
                                          p_cod_ramo       IN a2000030.cod_ramo%TYPE,
                                          p_cod_agt        IN a2000030.cod_agt%TYPE,
                                          p_xml_in         IN CLOB,
                                          p_xml            OUT CLOB)
   IS
      --
      l_retorno             ref_cursor;
      l_cod_marca_veic_vcr  a2000020.val_campo%TYPE;
      l_cod_marca           a2000020.val_campo%TYPE;
      l_cod_modelo          a2000020.val_campo%TYPE;
      l_cod_submodelo       a2000020.val_campo%TYPE;
      l_cod_madre           a2000020.val_campo%TYPE;
      l_cod_tip_vehi        a2000020.val_campo%TYPE;
      --
      -- I 1.76
      l_num_poliza_grupo    a2000500.num_poliza_grupo%TYPE;
      l_cod_produto         NUMBER :=225; --  F 1.76
      --
      l_reg_a2009710        a2009710_vcr%ROWTYPE; -- 4.52
      --

   BEGIN
      --
      mx('I', 'p_ws_consulta_uso_categoria');
      --
      -- 4.52 I
      --
      g_num_cotizacion       := trn_k_global.ref_f_global('NUM_COTIZACION');
      g_tip_mvto_batch       := trn_k_global.ref_f_global('TIP_MVTO_BATCH');
      g_num_paso             := trn_k_global.ref_f_global('NUM_PASO');
      --
      -- 4.52 F
      --
      l_cod_marca          := fp_recupera_valor (p_xml_in, 'COD_MARCA');
      l_cod_modelo         := fp_recupera_valor (p_xml_in, 'COD_MODELO');
      l_cod_submodelo      := fp_recupera_valor (p_xml_in, 'COD_SUBMODELO');
      l_cod_madre          := fp_recupera_valor (p_xml_in, 'COD_MADRE');
      l_cod_tip_vehi       := fp_recupera_valor (p_xml_in, 'COD_TIP_VEHI');
      --
      l_reg_a2009710.cod_cia        := p_cod_cia           ;
      l_reg_a2009710.cod_ramo       := p_cod_ramo          ;
      l_reg_a2009710.cod_agt        := NVL(p_cod_agt, em.COD_AGT_GEN)          ;
      l_reg_a2009710.num_cotizacion := NVL(g_num_cotizacion, em.NUM_POLIZA_GEN);
      l_reg_a2009710.tip_mvto_batch := NVL(g_tip_mvto_batch,9);
      l_reg_a2009710.num_paso       := NVL(g_num_paso,99)     ;
      l_reg_a2009710.txt_processo   := 'consultarUsoCategoria';
      l_reg_a2009710.fec_ini        := SYSDATE                ;
      l_reg_a2009710.fec_fim        := NULL                   ;
      l_reg_a2009710.cod_retorno    := NULL                   ;
      l_reg_a2009710.desc_xml_in    := p_xml_in               ;
      l_reg_a2009710.desc_xml_out   := NULL                   ;
      --
      trn_k_global.asigna('COD_USR',g_cod_usr_automatico);
      --
      -- I 1.76
      l_num_poliza_grupo   := NVL(fp_recupera_valor (p_xml_in, 'NUM_POLIZA_GRUPO'), trn.CERO);

      IF l_num_poliza_grupo IS NULL                   OR
         l_num_poliza_grupo = em.NUM_POLIZA_GRUPO_GEN OR
         l_num_poliza_grupo = TO_CHAR(trn.CERO)
        --
        THEN
        --
           OPEN l_retorno
           FOR
           WITH c_categoria AS (SELECT MIN(g.cod_categoria_agregada) cod_categoria_agregada,
                                  g.cod_uso_vehi,
                                  MIN(g.mca_isencao_imposto) mca_isencao_imposto
                             FROM g2109019_vcr g
                             JOIN g2101800_vcr g800
                               ON g800.cod_tip_vehi = g.cod_tip_vehi
                              AND g800.cod_cia = g.cod_cia
                              AND g800.cod_uso_vehi = g.cod_uso_vehi -- 1.99
                            WHERE g.cod_cia       = p_cod_cia
                              AND g.cod_tip_vehi  = NVL(l_cod_tip_vehi,g.cod_tip_vehi)
                              AND g.cod_categoria_agregada = g800.cod_categoria -- 1.78
                              AND g.cod_madre     IN (l_cod_madre
                                                     ,ea_k_231_utils.g_k_cod_madre_gen)
                              AND g.mca_baja      = trn.NO
                              AND g800.tip_produto <> l_cod_produto
                              AND (g.cod_uso_vehi
                                  ,g.cod_madre
                                  ,g.fec_validez) IN (SELECT gg.cod_uso_vehi,
                                                             gg.cod_madre,
                                                             MAX(gg.fec_validez)
                                                       FROM g2109019_vcr gg
                                                      WHERE gg.cod_cia        = g.cod_cia
                                                        AND gg.cod_tip_vehi   = g.cod_tip_vehi
                                                        AND gg.cod_madre      = g.cod_madre
                                                        AND gg.mca_baja       = g.mca_baja
                                                        AND (gg.cod_uso_vehi
                                                            ,gg.cod_madre)    IN (SELECT ggg.cod_uso_vehi,
                                                                                         MIN(ggg.cod_madre)
                                                                                    FROM g2109019_vcr ggg
                                                                                   WHERE ggg.cod_cia      = gg.cod_cia
                                                                                     AND ggg.cod_tip_vehi = gg.cod_tip_vehi
                                                                                     AND ggg.cod_madre    IN (l_cod_madre
                                                                                                             ,ea_k_231_utils.g_k_cod_madre_gen)
                                                                                     AND ggg.mca_baja     = gg.mca_baja
                                                                                   GROUP BY ggg.cod_uso_vehi)
                                                      GROUP BY gg.cod_uso_vehi
                                                              ,gg.cod_madre)
                            GROUP BY g.cod_uso_vehi
                            ORDER BY g.cod_uso_vehi
                                    ,cod_categoria_agregada)
         SELECT DISTINCT 'COD_CATEGORIA'            AS nom_campo_cod_categoria,
                c.cod_categoria_agregada            AS cod_categoria,
                'NOM_CATEGORIA'                     AS nom_campo_nom_categoria,
                cc.nom_categoria                    AS nom_categoria,
                'COD_USO_VEHI'                      AS nom_campo_cod_uso_vehi,
                c.cod_uso_vehi                      AS cod_uso_vehi,
                'NOM_COD_USO_VEHI'                  AS nom_campo_nom_cod_uso_vehi,
                u.nom_uso_vehi                      AS nom_cod_uso_vehi,
                'MCA_ISENCAO_IMPOSTO'               AS nom_campo_mca_isencao_imposto,
                c.mca_isencao_imposto               AS mca_isencao_imposto
           FROM c_categoria c
                INNER JOIN G2100001 cc
                        ON cc.cod_cia       = p_cod_cia
                       AND cc.cod_categoria = c.cod_categoria_agregada
                INNER JOIN A2100200 u
                        ON u.cod_cia      = p_cod_cia
                       AND u.cod_uso_vehi = c.cod_uso_vehi
                       AND u.fec_validez = (SELECT MAX(fec_validez)
                                              FROM a2100200 y
                                             WHERE y.cod_cia      = u.cod_cia
                                               AND y.cod_uso_vehi = u.cod_uso_vehi
                                               AND y.mca_inh      = u.mca_inh)
            ORDER BY cod_uso_vehi,
                  nom_cod_uso_vehi;
      --
      ELSE

           OPEN l_retorno
           FOR
           WITH c_categoria AS (SELECT MIN(g.cod_categoria_agregada) cod_categoria_agregada,
                                  g.cod_uso_vehi,
                                  MIN(g.mca_isencao_imposto) mca_isencao_imposto
                             FROM g2109019_vcr g
                            WHERE g.cod_cia       = p_cod_cia
                              AND g.cod_tip_vehi  = l_cod_tip_vehi
                              AND g.cod_madre     IN (l_cod_madre
                                                     ,ea_k_231_utils.g_k_cod_madre_gen)
                              AND g.mca_baja      = trn.NO
                              AND (g.cod_uso_vehi
                                  ,g.cod_madre
                                  ,g.fec_validez) IN (SELECT gg.cod_uso_vehi,
                                                             gg.cod_madre,
                                                             MAX(gg.fec_validez)
                                                       FROM g2109019_vcr gg
                                                      WHERE gg.cod_cia        = g.cod_cia
                                                        AND gg.cod_tip_vehi   = g.cod_tip_vehi
                                                        AND gg.cod_madre      = g.cod_madre
                                                        AND gg.mca_baja       = g.mca_baja
                                                        AND (gg.cod_uso_vehi
                                                            ,gg.cod_madre)    IN (SELECT ggg.cod_uso_vehi,
                                                                                         MIN(ggg.cod_madre)
                                                                                    FROM g2109019_vcr ggg
                                                                                   WHERE ggg.cod_cia      = gg.cod_cia
                                                                                     AND ggg.cod_tip_vehi = gg.cod_tip_vehi
                                                                                     AND ggg.cod_madre    IN (l_cod_madre
                                                                                                             ,ea_k_231_utils.g_k_cod_madre_gen)
                                                                                     AND ggg.mca_baja     = gg.mca_baja
                                                                                   GROUP BY ggg.cod_uso_vehi)
                                                      GROUP BY gg.cod_uso_vehi
                                                              ,gg.cod_madre)
                            GROUP BY g.cod_uso_vehi
                            ORDER BY g.cod_uso_vehi
                                    ,cod_categoria_agregada)
           SELECT DISTINCT 'COD_CATEGORIA'            AS nom_campo_cod_categoria,
                c.cod_categoria_agregada            AS cod_categoria,
                'NOM_CATEGORIA'                     AS nom_campo_nom_categoria,
                cc.nom_categoria                    AS nom_categoria,
                'COD_USO_VEHI'                      AS nom_campo_cod_uso_vehi,
                c.cod_uso_vehi                      AS cod_uso_vehi,
                'NOM_COD_USO_VEHI'                  AS nom_campo_nom_cod_uso_vehi,
                u.nom_uso_vehi                      AS nom_cod_uso_vehi,
                'MCA_ISENCAO_IMPOSTO'               AS nom_campo_mca_isencao_imposto,
                c.mca_isencao_imposto               AS mca_isencao_imposto
           FROM c_categoria c
                INNER JOIN G2100001 cc
                        ON cc.cod_cia       = p_cod_cia
                       AND cc.cod_categoria = c.cod_categoria_agregada
                INNER JOIN A2100200 u
                        ON u.cod_cia      = p_cod_cia
                       AND u.cod_uso_vehi = c.cod_uso_vehi
                       AND u.fec_validez = (SELECT MAX(fec_validez)
                                              FROM a2100200 y
                                             WHERE y.cod_cia      = u.cod_cia
                                               AND y.cod_uso_vehi = u.cod_uso_vehi
                                               AND y.mca_inh      = u.mca_inh)
           ORDER BY cod_uso_vehi,
                  nom_cod_uso_vehi;

      END IF;
       -- F 1.76
       --
       p_gerar_xml_uso_categoria(l_retorno, p_xml);
       --
       -- 4.52 I
       --
       l_reg_a2009710.fec_fim        := SYSDATE;
       l_reg_a2009710.desc_xml_out   := p_xml;
       --
       IF LENGTH(p_xml) = trn.CERO THEN
         --
         l_reg_a2009710.cod_retorno    := g_k_cod_retorno_erro;
         --
       ELSE
         --
         l_reg_a2009710.cod_retorno    := g_k_cod_retorno_suce;
         --
       END IF;
       --
       em_k_a2009710_vcr.p_trata_log_processo(l_reg_a2009710);
       --
       mx('F', 'p_ws_consulta_uso_categoria');
       --
   EXCEPTION
      WHEN OTHERS THEN
         --
         l_reg_a2009710.fec_fim        := SYSDATE;
         l_reg_a2009710.desc_xml_out   := p_xml;
         l_reg_a2009710.cod_retorno    := g_k_cod_retorno_erro;
         --
         em_k_a2009710_vcr.p_trata_log_processo(l_reg_a2009710);
         --
         mx('F', 'p_ws_consulta_uso_categoria - EXCEPTION');
         --
         g_err_msg :=  TYPTAB_MSG_WS(); -- 4.99
         --
         g_err_msg.EXTEND(1); -- 4.99
         g_err_msg(g_err_msg.LAST) := fp_trata_msg('ANIO_MODELO', -- 4.99
                                                                                   NULL,
                                                                                   g_k_pre_msg_erro || '20098557' || g_k_sep_cod_msg);
         --
         pp_processa_mensagem(g_err_msg, -- 4.99
                              l_retorno);
         --
         p_gerar_xml_mensagem(l_retorno, p_xml);
         --
         g_err_msg := NULL; -- 4.99
         --
   END p_ws_consulta_uso_categoria;

   --
   /* ------------------------------------------------------
   || Devolve para o webmethods parametro CLOB: p_xml
   */ ------------------------------------------------------
   --
   PROCEDURE p_ws_processar_passo (p_cod_cia              IN  G9999992.cod_cia           %TYPE,
                                   p_cod_ramo             IN  G9999992.cod_ramo          %TYPE,
                                   p_cod_tarifa           IN  G9999992.cod_tarifa        %TYPE,
                                   p_cod_agt              IN  G9999992.cod_agt           %TYPE,
                                   p_num_cotizacion       IN  C2009030_vcr.num_cotizacion%TYPE,
                                   p_num_cotizacion_grupo IN     c2009030_vcr.num_poliza_grupo %TYPE,-- 20200723 jwolff
                                   p_num_poliza_grupo     IN  A2000500.num_poliza_grupo  %TYPE,
                                   p_num_contrato         IN  A2000500.num_contrato      %TYPE,
                                   p_num_subcontrato      IN  A2000500.num_contrato      %TYPE,
                                   p_num_paso             IN  G9999992.num_paso          %TYPE,
                                   p_tip_mvto_batch       IN  A2000500.tip_mvto_batch    %TYPE,
                                   p_xml_in               IN  CLOB                            ,
                                   p_xml                  OUT CLOB                             )
   IS
      --
      l_calculo           NUMBER := trn.CERO;
      --
      l_tip_mvto_batch    A2000500.tip_mvto_batch%TYPE;
      --
      l_reg_msg_erro      TYPREG_MSG_WS;
      l_retorno           ref_cursor;
      --
      l_reg_a2009700      a2009700_vcr%ROWTYPE;
      --
      l_xml_in CLOB;
      --
      l_trava_efetivacao  VARCHAR2(1); -- v4.89
      --
   BEGIN
      --
      g_fic_traza := NVL(NVL(p_num_cotizacion, p_num_cotizacion_grupo), g_fic_traza);--jwolff
      --
      mx('I', 'p_ws_processar_passo');
      --
      trn_k_global.borra_todas;
      --
      DBMS_SESSION.RESET_PACKAGE;
      --
      trn_k_global.asigna('MCA_COTI_SIMULADOR', trn.NO);
      trn_k_global.asigna('MCA_COTI_COMROUND', trn.SI);
      --
      mx('-', 'inicio pp_ws_processar_passo');
      --
      l_xml_in := p_xml_in;
      --
      IF p_tip_mvto_batch = g_k_tip_mvto_batch_endosso AND
         p_num_paso = 5                                THEN
         --
         l_xml_in := REPLACE('<informacoesCotacao>'||p_xml_in||'</informacoesCotacao>','<?xml version="1.0"?>','');
         --
      END IF;
      --
      pp_ws_processar_passo(p_cod_cia
                           ,p_cod_ramo
                           ,p_cod_tarifa
                           ,p_cod_agt
                           ,p_num_cotizacion
                           ,p_num_cotizacion_grupo -- 20200723 jwolff
                           ,p_num_poliza_grupo
                           ,p_num_contrato
                           ,p_num_subcontrato
                           ,p_num_paso
                           ,p_tip_mvto_batch
                           ,l_xml_in
                           ,p_xml              );
      --
      mx('-', 'fim pp_ws_processar_passo');
      --
      mx('-', 'inicio trn_k_global.borra_todas');
      trn_k_global.borra_todas;
      mx('-', 'fim trn_k_global.borra_todas');
      --
      mx('-', 'COMMIT processar_passo');
      COMMIT;
      mx('-', 'fim COMMIT processar_passo');
      --
      pp_limpa_globais;
      --
      mx('F', 'p_ws_processar_passo');
      --
   EXCEPTION
      WHEN OTHERS THEN
         --
         ROLLBACK;
         --
         --I v4.89
         l_trava_efetivacao  := trn_k_global.ref_f_global('erro_trava');
         --I. 5.17 Correcao ORA 2000
         IF NVL(l_trava_efetivacao,trn.NO) = trn.NO THEN
           --
           g_txt_error      := substr(SQLERRM,1,2000);
           g_txt_ruta_error := substr('EM_K_GEN_WS.P_WS_PROCESSAR_PASSO'|| dbms_utility.format_error_backtrace,1,2000);
           --
           g_err_msg.EXTEND(1);
           /*g_err_msg(g_err_msg.LAST) := fp_trata_msg('COD_RETORNO',
                                                     NULL,
                                                     g_k_pre_msg_erro || '20098400' || g_k_sep_cod_msg || g_txt_error);*/
           g_anx_mensaje := trn.BLANCO || ss_k_mensaje.f_solo_texto_idioma(99999031, g_cod_idioma);
           g_err_msg(g_err_msg.LAST) := fp_trata_msg('COD_RETORNO',
                                                     '99999031',
                                                     g_anx_mensaje);
           --  i 5.39
           g_err_msg.EXTEND(1);
           g_err_msg(g_err_msg.LAST) := fp_trata_msg('',
                                                     null,
                                                     g_k_pre_msg_erro || '20098400' || g_k_sep_cod_msg || g_txt_error);
           --  f 5.39
           --F. 5.17 Correcao ORA 2000
         END IF;
         --F v4.89
         /*g_txt_error      := substr(SQLERRM,1,2000);
         g_txt_ruta_error := substr('EM_K_GEN_WS.P_WS_PROCESSAR_PASSO'|| dbms_utility.format_error_backtrace,1,2000);
         --
         g_err_msg.EXTEND(1);
         g_err_msg(g_err_msg.LAST) := fp_trata_msg('COD_RETORNO',
                                                   NULL,
                                                   g_k_pre_msg_erro || '20098400' || g_k_sep_cod_msg || g_txt_error);*/
         pp_processa_mensagem(g_err_msg, -- 4.99
                              l_retorno);
         --
         p_gerar_xml_mensagem(l_retorno, p_xml);
         --
         -- I 3.79
         l_reg_a2009700.cod_cia        := g_cod_cia           ;
         l_reg_a2009700.cod_ramo       := g_cod_ramo          ;
         l_reg_a2009700.cod_agt        := g_cod_agt           ;
         l_reg_a2009700.num_cotizacion := g_num_cotizacion    ;
         l_reg_a2009700.tip_mvto_batch := g_tip_mvto_batch    ;
         l_reg_a2009700.num_paso       := g_num_paso          ;
         l_reg_a2009700.fec_ini        := SYSDATE             ;
         l_reg_a2009700.desc_xml_in    := p_xml_in            ;
         -- F 3.79
         --
         l_reg_a2009700.fec_fim        := SYSDATE             ;
         l_reg_a2009700.cod_retorno    := g_k_cod_retorno_erro;
         l_reg_a2009700.desc_xml_out   := p_xml               ;
         --
         pp_trata_log_processo (l_reg_a2009700);
         --
         pp_log_erro(nvl(p_num_cotizacion, '9999999999999'),
                     g_txt_error      ,
                     g_txt_ruta_error );
         --
         COMMIT;
         --
         g_err_msg:= NULL; -- 4.99
         trn_k_global.borra_todas;
         --
         g_cod_mensaje    := g_k_cod_error_gen;
         g_anx_mensaje    := SQLERRM;
         --
         mx('F', 'p_ws_processar_passo - EXCEPTION');
         --
         --pp_devuelve_error;
         --
   END p_ws_processar_passo;
   --
   /* ------------------------------------------------------
   || Devolve para o webmethods parametro CLOB: p_xml
   */ ------------------------------------------------------
   --
   PROCEDURE pp_ws_consulta_detalhe_cotacao(p_cod_cia          IN  a2000030.cod_cia%TYPE,
                                            p_cod_ramo         IN  a2000030.cod_ramo%TYPE,
                                            p_num_cotazion     IN  c2000000.num_cotizacion%TYPE,
                                            p_num_poliza_grupo IN  A2000500.num_poliza_grupo%TYPE,
                                            p_num_contrato     IN  A2000500.num_contrato%TYPE,
                                            p_num_subcontrato  IN  A2000500.num_contrato%TYPE,
                                            p_tip_mvto_batch   IN  A2000500.tip_mvto_batch%TYPE,
                                            p_xml_in           IN  CLOB,
                                            p_xml              OUT CLOB)
   IS
      --
      l_txt_erro      VARCHAR2(250);
      --
      l_tip_mvto_batch   A2000500.tip_mvto_batch%TYPE;
      l_cod_servico      G9999991.cod_servicio%TYPE;
      l_retorno          ref_cursor;
      l_recarga_dados    VARCHAR2(1);
      l_numero_simulacao VARCHAR2(2);
      --
      l_xml_message    CLOB;
      --
      l_num_poliza     a2000030.num_poliza %TYPE;
      l_num_spto       a2000030.num_spto %TYPE;
      l_num_apli       a2000030.num_apli %TYPE;
      l_num_spto_apli  a2000030.num_spto_apli %TYPE;
      l_num_paso       g9999992.num_paso %TYPE;
      l_num_cotizacion c2000000.num_cotizacion%TYPE;
      --
      l_reg_a2992131  a2992131_vcr %ROWTYPE;
      --
      l_msg TYPREG_MSG_WS;
      --
      l_xml CLOB;
      --
   BEGIN
      --
      mx('I', 'pp_ws_consulta_detalhe_cotacao');
      --
      l_xml_message := NULL;
      --
      trn_k_global.borra_todas;
      trn_k_global.asigna('COD_IDIOMA', g_k_cod_idioma);
      --
      IF p_xml_in IS NOT NULL THEN
         --
         l_recarga_dados    := NVL(fp_recupera_valor (p_xml_in, 'MCA_RECARGA_DADOS'),trn.NO);
         l_numero_simulacao := NVL(fp_recupera_valor (p_xml_in, 'NUM_SIMULACAO'),trn.UNO);
         --
         trn_k_global.asigna('MCA_RECARGA_DADOS',l_recarga_dados);
         trn_k_global.asigna('NUM_SIMULACAO',l_numero_simulacao);
         --
      END IF;
      --
      g_err_msg := TYPTAB_MSG_WS(); -- 4.99
      --
      l_tip_mvto_batch := NVL(p_tip_mvto_batch,g_k_tip_mvto_batch_cotacao);
      --
   -- { jwolff
      l_cod_servico := fp_devuelve_cod_servicio(p_tip_servicio         => 'D'             , -- Detalle
                                                p_tip_mvto_batch       => l_tip_mvto_batch,
                                                p_num_cotizacion_grupo => NULL            ,
                                                p_mca_poliza_grupo     => NULL            );
      -- } jwolff
      --
      trn_k_global.asigna('COD_CIA'   ,p_cod_cia);
      trn_k_global.asigna('COD_RAMO'  ,p_cod_ramo);
      trn_k_global.asigna('COD_TARIFA',g_k_cod_tarifa_generico);
      trn_k_global.asigna('TIP_MVTO_BATCH',l_tip_mvto_batch);
      trn_k_global.asigna('COD_AGT'   ,g_k_cod_agt_generico);
      trn_k_global.asigna('COD_SERVICIO'   ,l_cod_servico);
      trn_k_global.asigna('NUM_COTIZACION' ,p_num_cotazion);
      trn_k_global.asigna('NUM_PROPUESTA'  ,p_num_cotazion);
      trn_k_global.asigna('NUM_POLIZA_GRUPO' ,p_num_poliza_grupo);
      --
      p_busca_procedimento;
      --
      p_xml := g_xml;
      --
      trn_k_global.borra_todas;
     --
   --
    IF l_tip_mvto_batch IN
       (ea_k_231_utils.g_k_cotiza_batch ,ea_k_231_utils.g_k_spto_batch) THEN
      --
      mx('p_cod_cia', p_cod_cia);
      mx('p_num_cotacao', p_num_cotazion);
      mx('l_tip_mvto_batch', l_tip_mvto_batch);
      --
      mx('p_num_spto', l_num_spto);
      --
      IF l_tip_mvto_batch = ea_k_231_utils.g_k_spto_batch
      THEN
      --
      l_num_poliza := p_num_cotazion;
      --
      trn_k_global.asigna('num_propuesta', p_num_cotazion);
      --
      l_num_spto      := fp_devuelve_val_coti('DFNUM_SPTO'     );
      l_num_spto_apli := fp_devuelve_val_coti('DFNUM_SPTO_APLI');
      --
      ELSIF l_tip_mvto_batch = ea_k_231_utils.g_k_cotiza_batch
      THEN
      --
      l_num_spto      := trn.cero;
      l_num_spto_apli := trn.cero;
      --
      END IF;
      --
      mx('p_num_poliza'   , l_num_poliza   );
      mx('p_num_spto'     , l_num_spto     );
      mx('p_num_apli'     , l_num_apli     );
      mx('p_num_spto_apli', l_num_spto_apli);
      --
      IF p_num_poliza_grupo IS NULL
      THEN
         l_num_cotizacion := p_num_cotazion;
      ELSE
         l_num_cotizacion := p_num_poliza_grupo;
      END IF;
      l_reg_a2992131 := em_k_a2992131.f_tip_existe_recusa(p_cod_cia       => p_cod_cia,
                                                          p_num_cotacao   => l_num_cotizacion,
                                                          p_num_poliza    => l_num_poliza,
                                                          p_num_spto      => l_num_spto,
                                                          p_num_apli      => trn.CERO,
                                                          p_num_spto_apli => l_num_spto_apli,
                                                          p_tip_emision   => l_tip_mvto_batch);
      --
      mx('-', 'l_reg_a2992131.tip_situ_bo ' || l_reg_a2992131.tip_situ_bo);
      --
      IF l_reg_a2992131.tip_situ_bo IN (em_k_backoffice.g_k_aprobado, em_k_backoffice.g_k_dir_recusada_sucesso)
        OR (p_num_poliza_grupo IS NOT NULL
          AND l_reg_a2992131.tip_situ_bo = em_k_backoffice.g_k_recusado)
      THEN
      --
      mx('-', 'l_reg_a2992131.obs_situ_bo ' || l_reg_a2992131.obs_situ_bo);
      --
      --
      l_msg := fp_trata_msg('OBS_SITU_BO',
                  NULL,
                  g_k_pre_msg_erro || g_k_cod_error_gen||
                  g_k_sep_cod_msg ||
                  l_reg_a2992131.obs_situ_bo);
      --
      l_msg.tip_mensagem := 'INFO';
      --
      g_err_msg.EXTEND(1); -- 4.99
      --
      g_err_msg(g_err_msg.LAST) := l_msg; -- 4.99
      --
      pp_processa_mensagem(g_err_msg, l_retorno); -- 4.99
      --
      p_gerar_xml_mensagem(l_retorno, l_xml_message);
      --
      END IF;
      --
      --Mockup para Flotas --> DPEREZ
      --
      IF p_num_poliza_grupo = '2204003245009'
      THEN
         --
         pp_inicia_xml_campos;
         --
         pp_col_lista_observacion;
         --
         pp_col_observacion;
         --
         pp_insertar_xml_campo_observacion(p_cod_campo  => 'txt_observacion',
                                           p_val_campo  => 'Observacion Corredor' );
         --
         pp_insertar_xml_campo_observacion(p_cod_campo  => 'nom_agt_analista',
                                           p_val_campo  => 'HAROLDO DOS SANTOS TEIXEIRA' );
         --
         pp_insertar_xml_campo_observacion(p_cod_campo  => 'fec_envio_bo',
                                           p_val_campo  => '31032022' );
         --
         pp_col_observacion;
         --
         pp_insertar_xml_campo_observacion(p_cod_campo  => 'txt_observacion',
                                           p_val_campo  => 'Observacion analista' );
         --
         pp_insertar_xml_campo_observacion(p_cod_campo  => 'nom_agt_analista',
                                           p_val_campo  => 'LLFSILVA - DIN_FRO_EXC_ANL_RISC_JR' );
         --
         pp_insertar_xml_campo_observacion(p_cod_campo  => 'fec_envio_bo',
                                           p_val_campo  => '01042022' );
         --
         pp_cerrar_xml_campos(p_xml => l_xml);
         --
         p_xml := CONCAT(p_xml, l_xml);
         --
      END IF;
      --
      p_xml := CONCAT(p_xml, l_xml_message);
      --
    END IF;
    --
    mx('F', 'pp_ws_consulta_detalhe_cotacao');
    --
  END pp_ws_consulta_detalhe_cotacao;
  --
  --
  /* ------------------------------------------------------
  || Devolve para o webmethods parametro CLOB: p_xml
  */ ------------------------------------------------------
  --
  PROCEDURE p_ws_consulta_detalhe_cotacao(p_cod_cia              IN a2000030.cod_cia%TYPE,
                                          p_cod_ramo             IN a2000030.cod_ramo%TYPE,
                                          p_num_cotazion         IN c2000000.num_cotizacion%TYPE,
                                          p_num_cotizacion_grupo IN C2009030_vcr.num_poliza_grupo%TYPE,
                                          p_num_poliza_grupo     IN A2000500.num_poliza_grupo%TYPE,
                                          p_num_contrato         IN A2000500.num_contrato%TYPE,
                                          p_num_subcontrato      IN A2000500.num_contrato%TYPE,
                                          p_tip_mvto_batch       IN A2000500.tip_mvto_batch%TYPE,
                                          p_xml_in               IN CLOB,
                                          p_xml                  OUT CLOB) IS
    --
    l_reg_a2009710      a2009710_vcr%ROWTYPE; -- 4.52
    --
  BEGIN
    --
    mx('I', 'p_ws_consulta_detalhe_cotacao');
    --
    mx('p_xml_in', substr(p_xml_in, 1, 200));
    --
    -- 4.52 I
    --
    g_cod_agt        := trn_k_global.ref_f_global('COD_AGT');
    g_num_paso       := trn_k_global.ref_f_global('NUM_PASO');
    --
    -- 4.52 F
    --
    trn_k_global.borra_todas;
    --
    -- 4.52 I
    --
    l_reg_a2009710.cod_cia        := p_cod_cia           ;
    l_reg_a2009710.cod_ramo       := p_cod_ramo          ;
    l_reg_a2009710.cod_agt        := NVL(g_cod_agt, em.COD_AGT_GEN)        ;
    l_reg_a2009710.num_cotizacion := NVL(p_num_cotazion ,em.NUM_POLIZA_GEN);
    l_reg_a2009710.tip_mvto_batch := NVL(p_tip_mvto_batch,9)   ;
    l_reg_a2009710.num_paso       := NVL(g_num_paso,99)        ;
    l_reg_a2009710.txt_processo   := 'consultarDetalhesCotacao';
    l_reg_a2009710.fec_ini        := SYSDATE                   ;
    l_reg_a2009710.fec_fim        := NULL                      ;
    l_reg_a2009710.cod_retorno    := NULL                      ;
    l_reg_a2009710.desc_xml_in    := p_xml_in                  ;
    l_reg_a2009710.desc_xml_out   := NULL                      ;
    --
    trn_k_global.asigna('COD_USR',g_cod_usr_automatico);
    --
    pp_ws_consulta_detalhe_cotacao(p_cod_cia,
                                   p_cod_ramo,
                                   p_num_cotazion,
                                   NVL(p_num_cotizacion_grupo,
                                       p_num_poliza_grupo),
                                   p_num_contrato,
                                   p_num_subcontrato,
                                   p_tip_mvto_batch,
                                   p_xml_in,
                                   p_xml);
    --
    trn_k_global.borra_todas;
    --
    l_reg_a2009710.fec_fim        := SYSDATE;
    l_reg_a2009710.desc_xml_out   := p_xml;
    --
    IF LENGTH(p_xml) = trn.CERO THEN
      --
      l_reg_a2009710.cod_retorno    := g_k_cod_retorno_erro;
      --
    ELSE
      --
      l_reg_a2009710.cod_retorno    := g_k_cod_retorno_suce;
      --
    END IF;
    --
    em_k_a2009710_vcr.p_trata_log_processo(l_reg_a2009710);
    --
    mx('F', 'p_ws_consulta_detalhe_cotacao');
    --
  END p_ws_consulta_detalhe_cotacao;
  --
  /* ----------------------------------
  ||  fp_lee_dados_A1001333
  */ ----------------------------------
  --
  FUNCTION fp_lee_dados_A1001333(p_cod_cia          a2000030.cod_cia    %TYPE,
                                 l_cod_operador_agt A1001333_VCR.cod_agt%TYPE)

  RETURN a1001333_vcr%ROWTYPE
  IS
   --
  CURSOR c_A1001333_VCR IS
      SELECT *
        FROM A1001333_VCR
       WHERE COD_CIA  = p_cod_cia
         AND COD_AGT  = l_cod_operador_agt;
   --
   reg_A1001333_VCR c_A1001333_VCR%ROWTYPE;
   --
   BEGIN
   --
   mx('I', 'fp_lee_dados_A1001333');
   --
    --
      OPEN  c_A1001333_VCR;
       FETCH c_A1001333_VCR INTO reg_A1001333_VCR;
       --
     CLOSE c_A1001333_VCR;
   --
    RETURN reg_A1001333_VCR;
    --
          EXCEPTION WHEN OTHERS THEN
           NULL;
   --
   mx('F', 'fp_lee_dados_A1001333');
   --
   END fp_lee_dados_A1001333;
    --
    --
    /* ------------------------------------------------------
    || Devolve para o webmethods parametro CLOB: p_xml
    */ ------------------------------------------------------
    --
    PROCEDURE p_ws_autoriza_ct_masivo (p_cod_cia         IN     G9999992.cod_cia%TYPE
                                      ,p_cod_ramo        IN     G9999992.cod_ramo%TYPE
                                      ,p_cod_tarifa      IN     G9999992.cod_tarifa%TYPE
                                      ,p_cod_agt         IN     G9999992.cod_agt%TYPE
                                      ,p_num_cotizacion  IN     C2009030_vcr.num_cotizacion%TYPE
                                      ,p_tip_mvto_batch  IN     a2000500.tip_mvto_batch%TYPE
                                      ,p_xml_in          IN     CLOB
                                      ,p_xml                OUT CLOB)
    IS
    --
    l_retorno             ref_cursor;
    --
    l_mca_presupuesto     VARCHAR2(1) := trn.NULO;
    --
    l_cod_error           g2000210.cod_error      %TYPE;
    l_tip_autoriza_ct     a2000500.tip_autoriza_ct%TYPE;
    l_obs_error           a2000221.obs_error      %TYPE;
    --
    l_num_poliza          a2000500.num_poliza  %TYPE;
    --
    l_fec_efec_spto       a2000020.val_campo%TYPE;
    l_fec_vcto_spto       a2000020.val_campo%TYPE;
    --
    PROCEDURE pi_inicializa_variables IS
    --
    BEGIN
      --
      pp_limpa_globais;
      --
      g_err_msg :=  TYPTAB_MSG_WS(); -- 4.99
      --
      l_mca_presupuesto  := fp_recupera_valor (p_xml_in, 'MCA_PRESUPUESTO' );
      l_cod_error        := TO_NUMBER(fp_recupera_valor (p_xml_in, 'COD_ERROR'       ));
      l_tip_autoriza_ct  := fp_recupera_valor (p_xml_in, 'TIP_AUTORIZA_CT' );
      l_obs_error        := fp_recupera_valor (p_xml_in, 'OBS_ERROR'       );
      --
      pp_asigna('COD_CIA'
               ,p_cod_cia);
      pp_asigna('COD_RAMO'
               ,p_cod_ramo);
      pp_asigna('COD_TARIFA'
               ,p_cod_tarifa);
      pp_asigna('COD_AGT'
               ,p_cod_agt);
      pp_asigna('NUM_COTIZACION'
               ,p_num_cotizacion);
      pp_asigna('TIP_MVTO_BATCH'
               ,p_tip_mvto_batch);
      --
      IF p_tip_mvto_batch = ea_k_231_utils.g_k_cotiza_batch
      THEN
        --
        pp_asigna_globales_defecto;
        --
        pp_inicializa_variables;
        --
        ea_k_231_utils.p_devuelve_dato_cotizacion(p_nom_tabla   => ea_k_231_utils.g_k_tabla_df
                                                 ,p_nom_columna => 'FEC_EFEC_POLIZA'
                                                 ,p_val_campo   => l_fec_efec_spto);
        --
        ea_k_231_utils.p_devuelve_dato_cotizacion(p_nom_tabla   => ea_k_231_utils.g_k_tabla_df
                                                 ,p_nom_columna => 'FEC_VCTO_POLIZA'
                                                 ,p_val_campo   => l_fec_vcto_spto);
        --
      ELSIF p_tip_mvto_batch = ea_k_231_utils.g_k_spto_batch
      THEN
        --
        pp_asgina_globales_spto;
        --
        pp_inicializa_variables;
        --
        ea_k_231_utils.p_devuelve_dato_cotizacion(p_nom_tabla   => ea_k_231_utils.g_k_tabla_df
                                                 ,p_nom_columna => 'FEC_EFEC_SPTO'
                                                 ,p_val_campo   => l_fec_efec_spto);
        --
        ea_k_231_utils.p_devuelve_dato_cotizacion(p_nom_tabla   => ea_k_231_utils.g_k_tabla_df
                                                 ,p_nom_columna => 'FEC_VCTO_SPTO'
                                                 ,p_val_campo   => l_fec_vcto_spto);
        --
        ea_k_231_utils.p_devuelve_dato_cotizacion(p_nom_tabla   => ea_k_231_utils.g_k_tabla_df
                                                 ,p_nom_columna => 'NUM_SPTO'
                                                 ,p_val_campo   => g_num_spto);
        --
      END IF;
      --
      g_fec_efec_spto := TO_DATE(l_fec_efec_spto, trn.FORMATO_FECHA);
      g_fec_vcto_spto := TO_DATE(l_fec_vcto_spto, trn.FORMATO_FECHA);
      --
      BEGIN
        --
        em_k_a2000500.p_lee2(p_cod_cia    => p_cod_cia
                            ,p_num_poliza => p_num_cotizacion);
        --
        l_num_poliza := em_k_a2000500.f_num_poliza_definitivo;
        --
      EXCEPTION
        WHEN OTHERS
        THEN
          --
          l_num_poliza := trn.NULO;
          --
      END;
      --
      IF NVL(l_mca_presupuesto, trn.SI) <> trn.SI
      THEN
        --
        BEGIN
          --
          em_k_a2000500.p_lee2(p_cod_cia    => p_cod_cia
                              ,p_num_poliza => l_num_poliza);
          --
          l_num_poliza := em_k_a2000500.f_num_poliza_definitivo;
          --
        EXCEPTION
          WHEN OTHERS
          THEN
            --
            l_num_poliza := trn.NULO;
            --
        END;
        --
      END IF;
      --
      pp_asigna('NUM_POLIZA', l_num_poliza);
      --
    END pi_inicializa_variables;
    --
    BEGIN
       --
       mx('I', 'p_ws_autoriza_ct_masivo');
       --
       pi_inicializa_variables;
       --
       em_k_gen_ct.p_autoriza_ct_masivo(p_cod_cia          => p_cod_cia
                                       ,p_mca_presupuesto  => l_mca_presupuesto
                                       ,p_num_poliza       => l_num_poliza
                                       ,p_num_spto         => g_num_spto
                                       ,p_num_apli         => g_num_apli
                                       ,p_num_spto_apli    => g_num_spto_apli
                                       ,p_fec_efec_spto    => g_fec_efec_spto
                                       ,p_fec_vcto_spto    => g_fec_vcto_spto
                                       ,p_num_riesgo       => g_num_riesgo
                                       ,p_cod_usr          => g_cod_usr
                                       ,p_cod_error        => l_cod_error
                                       ,p_tip_autoriz      => l_tip_autoriza_ct
                                       ,p_obs              => l_obs_error);
      --
      pp_processa_retorno(p_xml);
      --
      mx('F', 'p_ws_autoriza_ct_masivo');
      --
   EXCEPTION
      WHEN OTHERS THEN
         --
         ROLLBACK;
         --
         g_txt_error      := substr(SQLERRM,1,2000);
         g_txt_ruta_error := substr('EM_K_GEN_WS.P_WS_AUTORIZA_CT_MASIVO'|| dbms_utility.format_error_backtrace,1,2000);
         --
         g_err_msg.EXTEND(1); -- 4.99
         g_err_msg(g_err_msg.LAST) := fp_trata_msg('COD_RETORNO', -- 4.99
                                                                                   NULL,
                                                                                   g_k_pre_msg_erro || '20098400' || g_k_sep_cod_msg || g_txt_error);
         pp_processa_mensagem(g_err_msg, -- 4.99
                              l_retorno);
         --
         p_gerar_xml_mensagem(l_retorno, p_xml);
         --
         mx('F', 'p_ws_autoriza_ct_masivo - EXCEPTION');
         --
    END p_ws_autoriza_ct_masivo;
    --
    /* ------------------------------------------------------
    || Devolve para o webmethods parametro CLOB: p_xml
    */ ------------------------------------------------------
    --
    PROCEDURE p_ws_consulta_corretor (p_cod_cia      IN a2000030.cod_cia%TYPE,
                                      p_cod_ramo     IN a2000030.cod_ramo%TYPE,
                                      p_cod_agt      IN a2000030.cod_agt%TYPE,
                                      p_xml          OUT clob)
    IS
      --
      l_retorno               ref_cursor;
      l_reg_a1001333_vcr      a1001333_vcr%ROWTYPE;
      l_mca_corretor_sicredi  VARCHAR2(1);
      --
      l_pct_agt_npr           g2100830_vcr.pct_agt_npr%type; --1.52
      --
      l_reg_a2009710      a2009710_vcr%ROWTYPE; -- 4.52
      --
    BEGIN
       --
       mx('I', 'p_ws_consulta_corretor');
       --
       -- 4.52 I
       --
       g_num_cotizacion       := trn_k_global.ref_f_global('NUM_COTIZACION');
       g_tip_mvto_batch       := trn_k_global.ref_f_global('TIP_MVTO_BATCH');
       g_num_paso             := trn_k_global.ref_f_global('NUM_PASO');
       --
       trn_k_global.asigna('COD_USR',g_cod_usr_automatico);
       --
       dc_k_a1001332_trn.p_lee(p_cod_cia,
                               p_cod_agt,
                               TRUNC(SYSDATE));
       --
       dc_k_a1001399_trn.p_lee(p_cod_cia,
                               dc_k_a1001332_trn.f_tip_docum,
                               dc_k_a1001332_trn.f_cod_docum);
       --
       l_reg_a1001333_vcr    := fp_lee_dados_A1001333(p_cod_cia,p_cod_agt);
       --
       IF l_reg_a1001333_vcr.cod_agt IS NULL
       THEN
         --
         l_mca_corretor_sicredi := TRN.NO;
         --
       ELSE
         --
         l_mca_corretor_sicredi := TRN.SI;
         --
       --
       END IF;
       --
       --I 1.52
       BEGIN
          --
          ea_k_g2100830_vcr.p_lee_vigente(  p_cod_cia ,
                                            p_cod_ramo,
                                            p_cod_agt ,
                                            NULL,
                                            NULL,
                                            NULL,
                                            NULL,
                                            NULL,
                                            NULL,
                                            NULL,
                                            NULL,
                                            NULL,
                                            NULL,
                                            NULL,
                                            NULL,
                                            NULL,
                                            NULL,
                                            NULL,
                                            SYSDATE);
          --
          l_pct_agt_npr := ea_k_g2100830_vcr.f_pct_agt_npr;

       EXCEPTION
         WHEN OTHERS THEN
            l_pct_agt_npr := null;
       END;
       --
       OPEN l_retorno
       FOR
          SELECT
                'NOM_TERCERO_AGT'                                               AS NOM_CAMPO_NOM_TERCERO_AGT,
                dc_k_a1001399_trn.f_nom_tercero                                 AS NOM_TERCERO_AGT,
                'TLF_NUMERO_AGT'                                                AS NOM_CAMPO_TLF_NUMERO_AGT,
                dc_k_a1001332_trn.f_tlf_zona || dc_k_a1001332_trn.f_tlf_numero  AS TLF_NUMERO_AGT,
                'COD_CAMPANHA_VCR'                                              AS NOM_CAMPO_COD_CAMPANHA_VCR,
                ''                                                              AS COD_CAMPANHA_VCR,
                'MCA_SICREDI'                                                   AS NOM_CAMPO_MCA_SICREDI,
                l_mca_corretor_sicredi                                          AS MCA_SICREDI,
                'PCT_AGT_NPR'                                                   AS NOM_CAMPO_PCT_AGT_NPR,
                l_pct_agt_npr                                                   AS PCT_AGT_NPR,
                'EMAIL'                                                         AS NOM_CAMPO_EMAIL,  --3.77
                dc_k_a1001332_trn.f_email                                       AS EMAIL,             --3.77
                'COD_DOCUM_SUSEP'                                               AS NOM_CAMPO_COD_DOCUM_SUSEP, --4.98
                dc_k_a1001332_trn.f_cod_agt_colegio                             AS COD_DOCUM_SUSEP          , --4.98
                'COD_DOCUM'                                                     AS NOM_CAMPO_COD_DOCUM      , --4.98
                dc_k_a1001332_trn.f_cod_docum                                   AS COD_COCUM
             FROM
                dual;
       --F 1.52
       p_gerar_xml_campos_corretor(l_retorno, p_xml);
       --
       mx('F', 'p_ws_consulta_corretor');
       --
    EXCEPTION
       WHEN OTHERS THEN
          --
          mx('F', 'p_ws_consulta_corretor - EXCEPTION');
          --
          g_err_msg :=  TYPTAB_MSG_WS(); -- 4.99
          --
          g_err_msg.EXTEND(1);
          g_err_msg(g_err_msg.LAST) := fp_trata_msg('COD_AGT',
                                                    NULL,
                                                    g_k_pre_msg_erro || '20098558' || g_k_sep_cod_msg);
          --
          pp_processa_mensagem(g_err_msg, -- 4.99
                               l_retorno);
          --
          p_gerar_xml_mensagem(l_retorno, p_xml);
          --
          g_err_msg := NULL; -- 4.99
          --
    END p_ws_consulta_corretor;
    --
    /* ------------------------------------------------------
    || Devolve para o webmethods parametro CLOB: p_xml
    */ ------------------------------------------------------
    --
    PROCEDURE p_ws_calcular_fim_vigencia (p_cod_cia              IN  a2000030.cod_cia%TYPE,
                                          p_cod_ramo             IN  a2000030.cod_ramo%TYPE,
                                          p_xml_in               IN  CLOB,
                                          p_xml                  OUT CLOB)
    IS
       --
       l_retorno         ref_cursor;
       l_fec_efec_poliza a2000030.fec_efec_poliza%TYPE;
       l_fec_vcto_poliza a2000030.fec_vcto_poliza%TYPE;
       l_tip_duracion    a2000030.tip_duracion   %TYPE;
       l_exception_desc  a2000020.val_campo      %TYPE;
       l_exception       EXCEPTION;
       --
       l_reg_a2009710    a2009710_vcr%ROWTYPE; -- 4.52
       --
    BEGIN
       --
       mx('I', 'p_ws_calcular_fim_vigencia');
       --
       -- 4.52 I
       --
       g_cod_agt              := trn_k_global.ref_f_global('COD_AGT');
       g_num_cotizacion       := trn_k_global.ref_f_global('NUM_COTIZACION');
       g_tip_mvto_batch       := trn_k_global.ref_f_global('TIP_MVTO_BATCH');
       g_num_paso             := trn_k_global.ref_f_global('NUM_PASO');
       --
       -- 4.52 F
       --
       l_tip_duracion    := NVL(fp_recupera_valor (p_xml_in, 'TIP_DURACION'),
                                g_k_tip_duracion_prazo_curto);
       --
       mx('-', 'l_tip_duracion: '||l_tip_duracion);
       --
       l_fec_efec_poliza := TO_DATE(fp_recupera_valor (p_xml_in, 'FEC_EFEC_POLIZA'),
                            g_k_formato_fecha_bar);
       --
       -- 4.52 I
       --
       l_reg_a2009710.cod_cia        := p_cod_cia           ;
       l_reg_a2009710.cod_ramo       := p_cod_ramo          ;
       l_reg_a2009710.cod_agt        := NVL(g_cod_agt, em.COD_AGT_GEN)          ;
       l_reg_a2009710.num_cotizacion := NVL(g_num_cotizacion, em.NUM_POLIZA_GEN);
       l_reg_a2009710.tip_mvto_batch := NVL(g_tip_mvto_batch,9);
       l_reg_a2009710.num_paso       := NVL(g_num_paso,99)     ;
       l_reg_a2009710.txt_processo   := 'calcularFimDeVigencia';
       l_reg_a2009710.fec_ini        := SYSDATE                ;
       l_reg_a2009710.fec_fim        := NULL                   ;
       l_reg_a2009710.cod_retorno    := NULL                   ;
       l_reg_a2009710.desc_xml_in    := p_xml_in               ;
       l_reg_a2009710.desc_xml_out   := NULL                   ;
       --
       trn_k_global.asigna('COD_USR',g_cod_usr_automatico);
       --
       mx('-', 'l_fec_efec_poliza: '||l_fec_efec_poliza);
       --
       IF ( l_tip_duracion <> g_k_tip_duracion_prazo_curto ) THEN  -- Prazo Curto
         --
         em_k_gen_df.p_ws_pre_fec_vcto_spto(p_cod_cia,
                                            l_tip_duracion,
                                            l_fec_efec_poliza,
                                            l_fec_vcto_poliza);
         --
         mx('-', 'l_fec_vcto_poliza: '||l_fec_vcto_poliza);
         --
       ELSE
         --
         IF ( TRIM(l_fec_efec_poliza) IS NULL ) THEN
           --
           l_exception_desc := 'Data Inicio de Vigencia invalida ou nao cadastrada!';
           RAISE l_exception;
           --
         END IF;
         --
         l_fec_vcto_poliza := TO_DATE(fp_recupera_valor (p_xml_in, 'FEC_VCTO_POLIZA'),
                              g_k_formato_fecha_bar);
         --
         mx('-', 'l_fec_vcto_poliza: '||l_fec_vcto_poliza);
         --
         IF ( TRIM(l_fec_vcto_poliza) IS NULL ) THEN
           --
           l_exception_desc := 'Data Fim de Vigencia invalida ou nao cadastrada!';
           RAISE l_exception;
           --
         END IF;
         --
         IF ( l_fec_vcto_poliza <= l_fec_efec_poliza ) THEN
           --
           l_exception_desc := 'Data Fim de Vigencia deve ser maior que a Data de Inicio de Vigencia';
           RAISE l_exception;
           --
         ELSIF ( l_fec_vcto_poliza >= ADD_MONTHS(l_fec_efec_poliza, 12) ) THEN
           --
           l_exception_desc:= 'Para vigencias maior que 1 ano, selecione outro Tipo de Calculo';
           RAISE l_exception;
           --
         END IF;
       END IF;
       --
       OPEN l_retorno
       FOR
          SELECT 'FEC_VCTO_POLIZA'                             AS codCampo,
                 TO_CHAR(l_fec_vcto_poliza ,trn.FORMATO_FECHA) AS valCampo
            FROM dual;
       --
       p_gerar_xml_campo_unico(l_retorno, p_xml);
       --
       l_reg_a2009710.fec_fim        := SYSDATE;
       l_reg_a2009710.desc_xml_out   := p_xml;
       --
       IF LENGTH(p_xml) = trn.CERO THEN
         --
         l_reg_a2009710.cod_retorno    := g_k_cod_retorno_erro;
         --
       ELSE
         --
         l_reg_a2009710.cod_retorno    := g_k_cod_retorno_suce;
         --
       END IF;
       --
       em_k_a2009710_vcr.p_trata_log_processo(l_reg_a2009710);
       --
       mx('F', 'p_ws_calcular_fim_vigencia');
       --
    EXCEPTION
      WHEN l_exception THEN
        --
        -- 4.52 I
        --
        l_reg_a2009710.fec_fim        := SYSDATE;
        l_reg_a2009710.desc_xml_out   := p_xml;
        l_reg_a2009710.cod_retorno    := g_k_cod_retorno_erro;
        --
        em_k_a2009710_vcr.p_trata_log_processo(l_reg_a2009710);
        --
        -- 4.52 F
        --
        mx('F', 'p_ws_calcular_fim_vigencia - EXCEPTION: ' || l_exception_desc);
        --
        p_xml := em_k_gen_ws_vcr.f_formar_xml(p_cod_campo1 => 'TXT_ERROR',
                                              p_val_campo1 => l_exception_desc);
        --
      WHEN OTHERS THEN
        --
        -- 4.52 I
        --
        l_reg_a2009710.fec_fim        := SYSDATE;
        l_reg_a2009710.desc_xml_out   := p_xml;
        l_reg_a2009710.cod_retorno    := g_k_cod_retorno_erro;
        --
        em_k_a2009710_vcr.p_trata_log_processo(l_reg_a2009710);
        --
        -- 4.52 F
        --
        mx('F', 'p_ws_calcular_fim_vigencia - EXCEPTION: ' || SQLERRM);
        --
        p_xml := em_k_gen_ws_vcr.f_formar_xml(p_cod_campo1 => 'TXT_ERROR',
                                              p_val_campo1 => SQLERRM);
        --
        IF l_retorno%ISOPEN THEN
          --
          CLOSE l_retorno;
          --
        END IF;
        --
    END p_ws_calcular_fim_vigencia;
    --
    /* ------------------------------------------------------
    || Devolve para o webmethods parametro CLOB: p_xml
    */ ------------------------------------------------------
    --
    PROCEDURE p_ws_detalhar_atv_economica (p_cod_cia  IN     a2000030.cod_cia %TYPE,
                                           p_cod_ramo IN     a2000030.cod_ramo%TYPE,
                                           p_cod_agt  IN     G9999992.cod_agt %TYPE,
                                           p_xml_in   IN     CLOB                  ,
                                           p_xml         OUT CLOB)
    IS
      --
      l_mca_estatal           a2007702_vcr.mca_estatal     %TYPE;
      l_mca_iof               a2007702_vcr.mca_iof         %TYPE;
      l_tip_act_economica_vcr a2007702_vcr.cod_act_econ_vcr%TYPE;
      --
      l_retorno     ref_cursor;
      --
    BEGIN
      --
      mx('I', 'p_ws_detalhar_atv_economica');
      --
      l_tip_act_economica_vcr := NVL(fp_recupera_valor (p_xml_in               ,
                                                        'TIP_ACT_ECONOMICA_VCR'),trn.NO) ;
      --
      OPEN l_retorno FOR
        SELECT 'MCA_IOF_TOMA' AS codCampo,
               mca_iof        AS nomCampo
          FROM tron2000.a2007702_vcr a
         WHERE a.cod_cia          = p_cod_cia
           AND a.cod_Act_econ_vcr = l_tip_act_economica_vcr
        --
        UNION
        --
        SELECT 'MCA_ESTATAL'  AS codCampo,
               mca_estatal    AS nomCampo
          FROM tron2000.a2007702_vcr a
         WHERE a.cod_cia          = p_cod_cia
           AND a.cod_Act_econ_vcr = l_tip_act_economica_vcr;
      --
      p_gerar_xml_lista_campos(l_retorno, p_xml);
      --
      mx('F', 'p_ws_detalhar_atv_economica');
      --
     EXCEPTION
      WHEN OTHERS
        THEN
        --
        mx('-', 'EXCECAO p_ws_detalhar_atv_economica');
        mx('F', 'p_ws_detalhar_atv_economica');
        --
    END p_ws_detalhar_atv_economica;
    --
    /* ------------------------------------------------------
    || Devolve para o webmethods parametro CLOB: p_xml
    */ ------------------------------------------------------
    --
    PROCEDURE p_ws_consultar_poliza_anterior (p_cod_cia  IN  a2000030.cod_cia %TYPE,
                                              p_cod_ramo IN  a2000030.cod_ramo%TYPE,
                                              p_cod_agt  IN  G9999992.cod_agt %TYPE,
                                              p_xml_in   IN  CLOB                  ,
                                              p_xml      OUT CLOB)
    IS
      --
      l_k_cod_cia_seguradora a2000020.val_campo %TYPE:= 'COD_CIA_SEGURADORA';
      l_num_poliza_anterior  a2000030.num_poliza%TYPE;
      l_mca_renov_outras     a2000020.val_campo %TYPE;
      l_cod_cia              a2000030.cod_cia   %TYPE;
      l_cod_ramo             a2000020.cod_ramo  %TYPE;
      l_retorno              ref_cursor;
      --
      l_except_apolice       EXCEPTION;
      l_except_apolice_nl    EXCEPTION;
      --
    BEGIN
      --
      mx('I', 'p_ws_consultar_poliza_anterior');
      --
      l_num_poliza_anterior := NVL(fp_recupera_valor (p_xml_in               ,
                                                      'NUM_POLIZA_RENOV'),trn.NO);
      l_mca_renov_outras    := NVL(fp_recupera_valor (p_xml_in               ,
                                                      'MCA_RENOV_OUTRAS'),trn.NO);
      --
  --  IF (l_mca_renov_outras = 2) THEN             --ggarletti.4.05.i
  --    --
  --    l_cod_cia := 1;
  --    --
  --  ELSIF (l_mca_renov_outras = 6) THEN
  --    --
  --    l_cod_cia := 52;
  --    --
  --  ELSE
  --    --
  --    l_cod_cia := p_cod_cia;
  --    --
  --  END IF;
      --
      l_cod_cia := p_cod_cia;                      --ggarletti.4.05.f
      --
      -- verifica: 'Apolice informada nao localizada' e 'Apolice invalida. Pertence a outro produto ou ramo' --
      --
      BEGIN
        --
        SELECT a.cod_ramo
          INTO l_cod_ramo
          FROM a2000020 a
         WHERE a.cod_cia    = l_cod_cia
           AND a.num_poliza = l_num_poliza_anterior
           AND a.cod_campo  = l_k_cod_cia_seguradora
           AND ROWNUM       = 1;
           --
           IF ( l_cod_ramo NOT IN ( 217, 231 ) ) THEN
                -- verifica 'Apolice invalida. Pertence a outro produto ou ramo' --
                RAISE l_except_apolice_nl;
           END IF;
           --
      EXCEPTION
         WHEN no_data_found THEN
              -- verifica 'Apolice informada nao localizada' --
              RAISE l_except_apolice;
      END;
      --
      -- retorno json --
      --
      OPEN l_retorno FOR
        --
        SELECT 'FEC_VCTO_POLIZA_CONGENERE' AS codCampo,
               TO_CHAR(a.fec_vcto_poliza)  AS valCampo -- I_A2000030_CIA_POL1
          FROM a2000030 a
         WHERE a.num_poliza = l_num_poliza_anterior
           AND a.cod_cia    = l_cod_cia
           AND ROWNUM       = 1                        -- retornar solo un registro
        --
        UNION
        --
        SELECT 'COD_CIA_SEGURADORA' AS cod_campo,
               a.val_campo          AS valCampo        -- partition OK cod_ramo
          FROM a2000020 a
         WHERE a.cod_cia    = l_cod_cia
           AND a.num_poliza = l_num_poliza_anterior
           AND a.cod_ramo   = l_cod_ramo
           AND a.cod_campo  = l_k_cod_cia_seguradora
           AND ROWNUM       = 1;
      --
      p_gerar_xml_lista_campos(l_retorno, p_xml);
      --
      mx('F', 'p_ws_consultar_poliza_anterior');
      --
    EXCEPTION
      WHEN l_except_apolice THEN
        --
        mx('F', 'p_ws_consultar_poliza_anterior');
        --
        p_xml := em_k_gen_ws_vcr.f_formar_xml(p_cod_campo1 => 'TXT_ERROR',
                                              p_val_campo1 => 'Apolice informada nao localizada');
      WHEN l_except_apolice_nl THEN
        --
        mx('F', 'p_ws_consultar_poliza_anterior');
        --
        p_xml := em_k_gen_ws_vcr.f_formar_xml(p_cod_campo1 => 'TXT_ERROR',
                                              p_val_campo1 => 'Apolice invalida. Pertence a outro produto ou ramo');
      WHEN OTHERS THEN
        --
        mx('F', 'p_ws_consultar_poliza_anterior');
        --
        p_xml := em_k_gen_ws_vcr.f_formar_xml(p_cod_campo1 => 'TXT_ERROR',
                                              p_val_campo1 => SQLERRM);
        --
    END p_ws_consultar_poliza_anterior;
    --
    /* ------------------------------------------------------
    || Devolve para o webmethods parametro CLOB: p_xml
    */ ------------------------------------------------------
    --
    PROCEDURE p_ws_calcular_valor_ajustado (p_cod_cia              IN  a2000030.cod_cia%TYPE,
                                            p_cod_ramo             IN  a2000030.cod_ramo%TYPE,
                                            p_xml_in               IN  CLOB,
                                            p_xml                  OUT CLOB)
    IS
       --
       l_retorno             ref_cursor;
       l_out_val_sub_modelo  a2000031_vcr.val_sub_modelo%TYPE;
       l_val_referencia      a2000020.val_campo%TYPE;
       l_pct_ajuste_tab_ref  a2000020.val_campo%TYPE;
       --
       l_reg_a2009710        a2009710_vcr%ROWTYPE; -- 4.52
       --

    BEGIN
       --
       mx('I', 'p_ws_calcular_valor_ajustado');
       --
       -- 4.52 I
       --
       g_cod_agt            := trn_k_global.ref_f_global('COD_AGT');
       g_num_cotizacion     := trn_k_global.ref_f_global('NUM_COTIZACION');
       g_tip_mvto_batch     := trn_k_global.ref_f_global('TIP_MVTO_BATCH');
       g_num_paso           := trn_k_global.ref_f_global('NUM_PASO');
       --
       -- 4.52 F
       --
       l_val_referencia     := fp_recupera_valor (p_xml_in, 'VAL_REFERENCIA');
       l_pct_ajuste_tab_ref := fp_recupera_valor (p_xml_in, 'PCT_AJUSTE_TAB_REF');
       --
       -- 4.52 I
       --
       l_reg_a2009710.cod_cia        := p_cod_cia            ;
       l_reg_a2009710.cod_ramo       := p_cod_ramo           ;
       l_reg_a2009710.cod_agt        := NVL(g_cod_agt, em.COD_AGT_GEN)          ;
       l_reg_a2009710.num_cotizacion := NVL(g_num_cotizacion, em.NUM_POLIZA_GEN);
       l_reg_a2009710.tip_mvto_batch := NVL(g_tip_mvto_batch,9);
       l_reg_a2009710.num_paso       := NVL(g_num_paso,99)     ;
       l_reg_a2009710.txt_processo   := 'calcularValorAjustado';
       l_reg_a2009710.fec_ini        := SYSDATE                ;
       l_reg_a2009710.fec_fim        := NULL                   ;
       l_reg_a2009710.cod_retorno    := NULL                   ;
       l_reg_a2009710.desc_xml_in    := p_xml_in               ;
       l_reg_a2009710.desc_xml_out   := NULL                   ;
       --
       trn_k_global.asigna('COD_USR',g_cod_usr_automatico);
       --
       p_calcular_valor_ajustado(l_val_referencia, l_pct_ajuste_tab_ref, l_out_val_sub_modelo);
       --
       OPEN l_retorno
       FOR
          SELECT
                'VAL_SUB_MODELO'                    AS codCampo,
                to_char(l_out_val_sub_modelo)       AS valCampo
             FROM
                dual;
      --
      p_gerar_xml_campo_unico(l_retorno, p_xml);
      --
      -- 4.52 I
      --
      l_reg_a2009710.fec_fim        := SYSDATE;
      l_reg_a2009710.desc_xml_out   := p_xml;
      --
      IF LENGTH(p_xml) = trn.CERO THEN
        --
        l_reg_a2009710.cod_retorno    := g_k_cod_retorno_erro;
        --
      ELSE
        --
        l_reg_a2009710.cod_retorno    := g_k_cod_retorno_suce;
        --
      END IF;
      --
      em_k_a2009710_vcr.p_trata_log_processo(l_reg_a2009710);
      --
      mx('F', 'p_ws_calcular_valor_ajustado');
      --
    END p_ws_calcular_valor_ajustado;

    --
    /* ------------------------------------------------------
    || Devolve para o webmethods parametro CLOB: p_xml
    */ ------------------------------------------------------
    --
    PROCEDURE p_ws_calcular_fator_ajuste (p_cod_cia         IN  G9999992.cod_cia%TYPE,
                                          p_cod_ramo        IN  G9999992.cod_ramo%TYPE,
                                          p_cod_tarifa      IN  G9999992.cod_tarifa%TYPE,
                                          p_cod_agt         IN  G9999992.cod_agt%TYPE,
                                          p_num_cotizacion  IN  C2009030_vcr.num_cotizacion%TYPE,
                                          p_num_paso        IN  G9999992.num_paso%TYPE,
                                          p_xml_in          IN  CLOB,
                                          p_xml             OUT CLOB)
    IS
       --
       l_retorno                       ref_cursor;
       --
       l_reg_msg_erro                  TYPREG_MSG_WS;
       --
       l_cod_categoria                 g2109024_vcr.cod_categoria%TYPE;
       l_cod_isencao_imposto           g2109024_vcr.cod_isencao_imposto%TYPE;
       l_mca_zero_km                   g2109024_vcr.mca_zero_km%TYPE;
       l_num_idade_veiculo             g2109024_vcr.num_idade_veiculo_de%TYPE;
       l_pct_ajuste_tab                g2109024_vcr.pct_ajuste_tab_ref_max%TYPE;
       l_mca_salta                     g2109024_vcr.mca_salta%TYPE;
       l_mca_chasis_remarca            a2000020.val_campo%TYPE;
       l_pct_ajuste_tab_ref            g2109024_vcr.pct_ajuste_tab_ref_max%TYPE;
       l_pct_ajuste_tab_remarcado      g2109024_vcr.pct_ajuste_tab_ref_max%TYPE;
       l_chassi_remarcado_fator_ajus   df_cmn_nwt_xx_cnn.vrb_nam_val%TYPE:= NULL;
       l_tip_merc_deter                a2000020.val_campo%TYPE;
       l_cod_subzona                   g2109021_vcr.cod_subzona%TYPE;
       l_mca_renov_outras              a2000020.val_campo%TYPE;
       l_mca_sini_ult_vig              a2000020.val_campo%TYPE;
       l_cod_marca                     g2109042_vcr.cod_marca%TYPE;
       l_cod_classe                    g2109042_vcr.cod_classe%TYPE;
       l_cod_madre                     g2109042_vcr.cod_madre%TYPE;
       l_cod_modelo                    g2109024_vcr.cod_modelo%TYPE; -- 3.51
       l_cod_sub_modelo                g2109024_vcr.cod_sub_modelo%TYPE; -- 3.51
       --
       l_reg_a2009710                  a2009710_vcr%ROWTYPE; -- 4.52
       --

    BEGIN
       --
       mx('I', 'p_ws_calcular_fator_ajuste');
       --
       g_tip_mvto_batch       := trn_k_global.ref_f_global('TIP_MVTO_BATCH'); -- 4.52
       --
       trn_k_global.asigna('COD_CIA',p_cod_cia);
       trn_k_global.asigna('COD_RAMO',NVL(p_cod_ramo,em.COD_RAMO_GEN));
       trn_k_global.asigna('COD_AGT',NVL(p_cod_agt,em.COD_AGT_GEN));
       --
       -- 4.52 I
       --
       l_reg_a2009710.cod_cia        := p_cod_cia           ;
       l_reg_a2009710.cod_ramo       := p_cod_ramo          ;
       l_reg_a2009710.cod_agt        := NVL(p_cod_agt, em.COD_AGT_GEN)          ;
       l_reg_a2009710.num_cotizacion := NVL(p_num_cotizacion, em.NUM_POLIZA_GEN);
       l_reg_a2009710.tip_mvto_batch := NVL(g_tip_mvto_batch,9);
       l_reg_a2009710.num_paso       := NVL(p_num_paso,99)     ;
       l_reg_a2009710.txt_processo   := 'calcularFatorAjuste'  ;
       l_reg_a2009710.fec_ini        := SYSDATE                ;
       l_reg_a2009710.fec_fim        := NULL                   ;
       l_reg_a2009710.cod_retorno    := NULL                   ;
       l_reg_a2009710.desc_xml_in    := p_xml_in               ;
       l_reg_a2009710.desc_xml_out   := NULL                   ;
       --
       trn_k_global.asigna('COD_USR',g_cod_usr_automatico);
       --
       -- pp_asigna_globales_defecto;
       --
       l_num_idade_veiculo   := (EXTRACT(YEAR FROM SYSDATE) - fp_recupera_valor (p_xml_in, 'COD_ANO_FABR'));
       l_cod_categoria       := fp_recupera_valor (p_xml_in  , 'COD_CATEGORIA'        );
       --
       l_cod_isencao_imposto := NVL(fp_recupera_valor(p_xml_in, 'COD_ISENCAO_IMPOSTO')
                                   ,g_k_isento_imposto); --v2.04
       l_mca_zero_km         := NVL(fp_recupera_valor(p_xml_in, 'MCA_ZERO_KM')
                                   ,trn.NO);             --v2.04
       l_mca_chasis_remarca  := NVL(fp_recupera_valor(p_xml_in, 'MCA_CHASIS_REMARCA')
                                   ,trn.NO);             --v2.04
       --
       l_tip_merc_deter      := fp_recupera_valor (p_xml_in  , 'TIP_MERC_DETER'       );
       l_cod_subzona         := fp_recupera_valor (p_xml_in  , 'COD_SUBZONA'          );
       l_mca_renov_outras    := fp_recupera_valor (p_xml_in  , 'MCA_RENOV_OUTRAS'     );
       l_mca_sini_ult_vig    := fp_recupera_valor (p_xml_in  , 'MCA_SINI_ULT_VIGENCIA');
       l_cod_marca           := fp_recupera_valor (p_xml_in  , 'COD_MARCA'            );
       l_cod_classe          := fp_recupera_valor (p_xml_in  , 'COD_CLASSE'           );
       l_cod_madre           := fp_recupera_valor (p_xml_in  , 'COD_MADRE'            );
       l_cod_modelo          := fp_recupera_valor (p_xml_in  , 'COD_MODELO'           ); -- 3.51
       l_cod_sub_modelo      := fp_recupera_valor (p_xml_in  , 'COD_SUB_MODELO'       ); -- 3.51
       --
       --
       IF l_mca_renov_outras IS NULL -- I 3.51
       THEN
         --
         IF p_num_cotizacion IS NOT NULL --v3.58
         THEN
           --
           BEGIN
             --
             SELECT c.val_columna
               INTO l_mca_renov_outras
               FROM c2000000 c
              WHERE c.cod_cia        = p_cod_cia
                AND c.cod_ramo       = p_cod_ramo
                AND c.num_cotizacion = p_num_cotizacion
                AND c.nom_columna    = 'MCA_RENOV_OUTRAS';
             --
           EXCEPTION
             WHEN OTHERS
             THEN
               --
               l_mca_renov_outras := ea_k_231_utils.g_k_mca_renov_outras_gen; --v.3.58
               --
           END;
           --
         ELSE
           --
           l_mca_renov_outras := ea_k_231_utils.g_k_mca_renov_outras_gen; --v3.58
           --
         END IF;
         --
       END IF; -- F 3.51
       --
       BEGIN --v2.04
         --
         ea_k_g2109024_vcr.p_lee_vigente(p_cod_cia    => p_cod_cia
                    ,p_cod_ramo               => p_cod_ramo
                    ,p_cod_categoria          => l_cod_categoria
                    ,p_cod_isencao_imposto    => l_cod_isencao_imposto
                    ,p_num_idade_veiculo      => l_num_idade_veiculo
                    ,p_mca_zero_km            => l_mca_zero_km
                    ,p_pct_ajuste_tab_ref     => trn.NULO
                    ,p_tip_merc_deter         => l_tip_merc_deter
                    ,p_cod_subzona            => l_cod_subzona
                    ,p_mca_renov_outras       => l_mca_renov_outras
                    ,p_mca_sini_ult_vigencia  => l_mca_sini_ult_vig
                    ,p_cod_marca              => l_cod_marca
                    ,p_cod_classe             => l_cod_classe
                    ,p_cod_madre              => l_cod_madre
                    ,p_cod_modelo             => l_cod_modelo     -- 3.51
                    ,p_cod_sub_modelo         => l_cod_sub_modelo -- 3.51
                     );
         --
         l_pct_ajuste_tab   := ea_k_g2109024_vcr.f_pct_ajuste_tab_ref_max;
         l_mca_salta        := ea_k_g2109024_vcr.f_mca_salta;
         --
       EXCEPTION      --v2.04
         WHEN OTHERS
         THEN
           --
           l_pct_ajuste_tab := 100   ;
           l_mca_salta      := trn.NO;
           --
       END;
       --
       IF l_mca_chasis_remarca = trn.SI THEN
          --
          l_chassi_remarcado_fator_ajus  := g_k_fator_ajuste_chassi_remar;
          l_pct_ajuste_tab_remarcado := TO_NUMBER(l_chassi_remarcado_fator_ajus);
          --
       END IF;
       --
       IF TO_NUMBER(l_chassi_remarcado_fator_ajus) < TO_NUMBER(l_pct_ajuste_tab) THEN
          --
          l_pct_ajuste_tab_ref := l_chassi_remarcado_fator_ajus;
          --
       ELSE
          --
          l_pct_ajuste_tab_ref := l_pct_ajuste_tab;
          --
       END IF;
       --
       OPEN l_retorno
       FOR
          SELECT
                cod_campo,
                nom_campo
            FROM
                (SELECT
                       TO_CHAR(LEAST(l_pct_ajuste_tab_ref
                                    ,100))           AS pct_ajuste_tab_ref,
                       l_mca_salta                   AS mca_salta
                   FROM
                       DUAL
                ) t UNPIVOT INCLUDE NULLS
                 ( nom_campo FOR( cod_campo ) IN
                     ( pct_ajuste_tab_ref AS 'PCT_AJUSTE_TAB_REF',
                       mca_salta          AS 'MCA_SALTA'
                     )
                 )
          ORDER BY cod_campo;
       --
       p_gerar_xml_lista_campos(l_retorno, p_xml);
       --
       -- 4.52 I
       --
       l_reg_a2009710.fec_fim        := SYSDATE;
       l_reg_a2009710.desc_xml_out   := p_xml;
       --
       IF LENGTH(p_xml) = trn.CERO THEN
         --
         l_reg_a2009710.cod_retorno    := g_k_cod_retorno_erro;
         --
       ELSE
         --
         l_reg_a2009710.cod_retorno    := g_k_cod_retorno_suce;
         --
       END IF;
       --
       em_k_a2009710_vcr.p_trata_log_processo(l_reg_a2009710);
       --
       mx('F', 'p_ws_calcular_fator_ajuste');
       --
    END p_ws_calcular_fator_ajuste;

    --
    /* ---------------------------------------------------------------- *
    || Devolve um CLOB contendo uma lista de dados XML : p_xml
    */ ----------------------------------------------------------------
    PROCEDURE p_ws_consulta_cobertura (p_cod_cia          IN  G9999992.cod_cia%TYPE,
                                       p_cod_ramo         IN  G9999992.cod_ramo%TYPE,
                                       p_cod_tarifa       IN  G9999992.cod_tarifa%TYPE,
                                       p_cod_agt          IN  G9999992.cod_agt%TYPE,
                                       p_num_cotizacion   IN  C2009030_vcr.num_cotizacion%TYPE,
                                       p_num_poliza_grupo IN  A2000500.num_poliza_grupo%TYPE,
                                       p_num_contrato     IN  A2000500.num_contrato%TYPE,
                                       p_num_subcontrato  IN  A2000500.num_contrato%TYPE,
                                       p_num_paso         IN  G9999992.num_paso%TYPE,
                                       p_tip_mvto_batch   IN  A2000500.tip_mvto_batch%TYPE,
                                       p_xml_in           IN  CLOB,
                                       p_xml              OUT CLOB)
    IS
       --
       l_retorno_coberturas        ref_cursor;
       --
       l_num_cotizacion            C2009030_vcr.num_cotizacion%TYPE;
       l_num_simulacion            c2009040_vcr.num_simulacion%TYPE;
       --

    BEGIN
       --
       mx('I', 'p_ws_consulta_coberturas');
       --
       l_num_cotizacion     := fp_recupera_valor (p_xml_in, 'NUM_COTIZACION');
       l_num_simulacion     := fp_recupera_valor (p_xml_in, 'NUM_SIMULACION');
       --
       OPEN l_retorno_coberturas
       FOR
          WITH c_coberturas AS (SELECT a.num_simulacion,
                                       a.cod_cob,
                                       a.nom_cob,
                                       a.suma_aseg,
                                       a.val_franquicia_min,
                                       SUM(NVL(b.imp_spto, 0)) AS imp_anual
                                  FROM c2009040_vcr a
                                  LEFT OUTER JOIN c2109170_vcr b
                                    ON (a.cod_cia       = b.cod_cia AND
                                       a.cod_ramo       = b.cod_ramo AND
                                       a.num_cotizacion = b.num_cotizacion AND
                                       a.num_simulacion = b.num_simulacion AND
                                       a.cod_cob        = b.cod_cob)
                                 WHERE a.cod_cia        = p_cod_cia
                                   AND a.cod_ramo       = p_cod_ramo
                                   AND a.num_cotizacion = l_num_cotizacion
                                   AND a.num_simulacion = l_num_simulacion
                                 GROUP BY a.num_simulacion,
                                          a.cod_cob,
                                          a.nom_cob,
                                          a.suma_aseg,
                                          a.val_franquicia_min),
          c_modalidad AS (SELECT cod_modalidad,
                                 nom_modalidad
                            FROM (SELECT SUBSTR(a.nom_columna, 0, 13) AS nom_columna,
                                         a.val_columna
                                    FROM c2000000 a
                                   WHERE a.cod_cia = p_cod_cia
                                     AND a.cod_ramo = p_cod_ramo
                                     AND a.num_cotizacion = l_num_cotizacion
                                     AND (a.nom_columna = 'NOM_MODALIDAD' || g_k_pref_simulacion || TO_CHAR(l_num_simulacion) OR
                                          a.nom_columna = 'COD_MODALIDAD' || g_k_pref_simulacion || TO_CHAR(l_num_simulacion)))
                          PIVOT(
                                 MAX(val_columna) FOR nom_columna IN('COD_MODALIDAD' AS cod_modalidad,
                                                                     'NOM_MODALIDAD' AS nom_modalidad
                                                                     )
                          ))
          SELECT l_num_simulacion AS num_simulacion,
                 d.nom_modalidad AS nom_pacote,
                 CASE NVL(b.suma_aseg, -1)
                   WHEN -1 THEN
                    'A'
                   ELSE
                    'C'
                 END AS mca_tip_cobertura,
                 a.cod_cob,
                 a.nom_cob,
                 b.suma_aseg AS val_indexacao,
                 b.val_franquicia_min AS val_franquia,
                 b.imp_anual AS val_premio
            FROM x2000040 a
            LEFT OUTER JOIN c_coberturas b
              ON (b.cod_cob = a.cod_cob),
              c_modalidad d
           WHERE a.cod_cia    = p_cod_cia
             AND a.num_poliza = TO_CHAR(p_cod_ramo)
             AND a.cod_cob    IN (SELECT e.cod_cob
                                    FROM a1002090 e
                                   WHERE e.cod_cia = p_cod_cia
                                     AND e.cod_ramo = p_cod_ramo
                                     AND e.cod_modalidad = d.cod_modalidad)
           ORDER BY a.num_secu;
       --
       p_gerar_xml_coberturas(l_retorno_coberturas ,p_xml);
       --
       mx('F', 'p_ws_consulta_coberturas');
       --
    END p_ws_consulta_cobertura;
    --
    /* ---------------------------------------------------------------- *
    || Devolve um CLOB contendo uma lista de dados XML : p_xml
    */ ----------------------------------------------------------------
    --
    PROCEDURE p_ws_consulta_coti_spto (p_cod_cia          IN  a2000030.cod_cia         %TYPE,
                                       p_cod_ramo         IN  a2000030.cod_ramo        %TYPE,
                                       p_cod_tarifa       IN  G9999992.cod_tarifa      %TYPE,
                                       p_cod_agt          IN  G9999992.cod_agt         %TYPE,
                                       p_tip_mvto_batch   IN  A2000500.tip_mvto_batch  %TYPE,
                                       p_xml_in           IN                            CLOB,
                                       p_xml             OUT                            CLOB)
    IS
       --
       l_cod_ramo          c2009030_vcr.cod_ramo   %TYPE;
       l_num_serie         a2009018_vcr.num_chassi %TYPE;
       l_num_matricula     a2000020.val_campo      %TYPE;
       l_num_poliza        a2000030.num_poliza     %TYPE;
       l_tip_docum         a2000030.tip_docum      %TYPE;
       l_cod_docum         a2000030.cod_docum      %TYPE;
       l_num_simulacion    a2000030.num_presupuesto%TYPE;
       l_fec_ini_vig       a2000030.fec_efec_spto  %TYPE;
       l_fec_fim_vig       a2000030.fec_vcto_spto  %TYPE;
       l_retorno_cotacao   ref_cursor;
       l_cod_sistema       a2000020.val_campo      %TYPE; -- 1.93
       l_cod_sector        a2000030.cod_sector     %TYPE; -- v 1.93
       l_status_cancelamento   df_cmn_nwt_xx_cnn.vrb_nam_val%TYPE; -- 2.01
       e_cod_cia_inexistente     EXCEPTION; -- v 1.93
       e_cod_ramo_inexistente    EXCEPTION; -- v 1.93
       e_cod_agt_inexistente     EXCEPTION; -- v 1.93
       e_fec_vig_incorreto       EXCEPTION; -- v 1.93
       e_tip_cod_docum_incorreto EXCEPTION; -- v 1.93
       l_nom_completo      a2009201_vcr.nom_completo %TYPE;  -- V 2.81
       l_cod_susep_agt              a2000020.val_campo             %TYPE; -- v5.35
       l_tip_classificacao_corretor a2000020.val_campo             %TYPE; -- v5.35
       l_num_dias_vigencia          g2109013_vcr.num_dias_vigencia %TYPE; -- v5.35
       l_fec_primeiro_calculo       a2000560.val_campo             %TYPE; -- v5.51

       --
    BEGIN
       --
       mx('I', 'p_ws_consulta_coti_spto');
       --
       g_xml_in   := p_xml_in;
       --
       trn_k_global.asigna('NUM_SIMULACION', fp_recupera_valor (g_xml_in, 'NUM_SIMULACION'));
       trn_k_global.asigna('NUM_SERIE'     , fp_recupera_valor (g_xml_in, 'NUM_SERIE')     );
       trn_k_global.asigna('NUM_MATRICULA' , fp_recupera_valor (g_xml_in, 'NUM_MATRICULA') );
       trn_k_global.asigna('NUM_POLIZA'    , fp_recupera_valor (g_xml_in, 'NUM_POLIZA')    );
       trn_k_global.asigna('TIP_DOCUM'     , fp_recupera_valor (g_xml_in, 'TIP_DOCUM')     );
       trn_k_global.asigna('COD_DOCUM'     , fp_recupera_valor (g_xml_in, 'COD_DOCUM')     );
       trn_k_global.asigna('FEC_INI_VIG'   , fp_recupera_valor (g_xml_in, 'FEC_INI_VIG')   );
       trn_k_global.asigna('FEC_FIM_VIG'   , fp_recupera_valor (g_xml_in, 'FEC_FIM_VIG')   );
       trn_k_global.asigna('COD_SISTEMA'   , NVL( fp_recupera_valor (g_xml_in, 'COD_SISTEMA'), 0 ) ); -- 1.93
       --
       l_num_serie       := fp_ref_devuelve_c('NUM_SERIE');
       l_num_matricula   := fp_ref_devuelve_c('NUM_MATRICULA');
       l_num_poliza      := fp_ref_devuelve_c('NUM_POLIZA');
       l_tip_docum       := fp_ref_devuelve_c('TIP_DOCUM');
       l_cod_docum       := fp_ref_devuelve_c('COD_DOCUM');
       l_num_simulacion  := fp_ref_devuelve_c('NUM_SIMULACION');
       l_fec_ini_vig     := fp_ref_devuelve_f('FEC_INI_VIG');
       l_fec_fim_vig     := fp_ref_devuelve_f('FEC_FIM_VIG');
       l_cod_sistema     := fp_ref_devuelve_n('COD_SISTEMA'); -- 1.93
       l_nom_completo    := Trim(Upper(fp_recupera_valor (g_xml_in, 'NOM_COMPLETO'))); -- v 2.81

       --
       mx('l_num_serie'     , l_num_serie     );
       mx('l_num_matricula' , l_num_matricula );
       mx('l_num_poliza'    , l_num_poliza    );
       mx('l_tip_docum'     , l_tip_docum     );
       mx('l_cod_docum'     , l_cod_docum     );
       mx('l_num_simulacion', l_num_simulacion);
       mx('l_fec_ini_vig'   , l_fec_ini_vig   );
       mx('l_fec_fim_vig'   , l_fec_fim_vig   );
       --
       --  INICIO v 1.93
       --
       IF p_cod_cia IS NULL THEN
         RAISE e_cod_cia_inexistente;
       END IF;
       --
       IF p_cod_ramo IS NULL THEN
         RAISE e_cod_ramo_inexistente;
       END IF;
       --
       IF p_cod_agt IS NULL THEN
         RAISE e_cod_agt_inexistente;
       END IF;
       --
       IF (l_fec_ini_vig IS NOT NULL AND l_fec_fim_vig IS NULL) OR
          (l_fec_ini_vig IS NULL AND l_fec_fim_vig IS NOT NULL) THEN
         --
         RAISE e_fec_vig_incorreto;
         --
       END IF;
       --
       IF (l_tip_docum IS NOT NULL AND l_cod_docum IS NULL) OR
          (l_tip_docum IS NULL AND l_cod_docum IS NOT NULL) THEN
         --
         RAISE e_tip_cod_docum_incorreto;
         --
       END IF;
       --
       l_cod_sector      := dc_f_cod_sector_a1001800(p_cod_cia  => p_cod_cia
                                                    ,p_cod_ramo => p_cod_ramo);
       --
       l_status_cancelamento := em_k_gen_ws_vcr.f_recupera_constante(p_vrb_nam => 'COD_STATUS_CANC_END'); -- 2.01
       --
       -- {v5.51
       BEGIN
         --
         em_k_a2000560.p_lee(p_cod_cia       => p_cod_cia
                            ,p_num_propuesta => l_num_poliza
                            ,p_cod_campo     => 'FEC_PRIMEIRO_CALCULO');
         --
         l_fec_primeiro_calculo   := em_k_a2000560.f_val_campo;
         --
         EXCEPTION WHEN OTHERS THEN
           --
           l_fec_primeiro_calculo := to_char(TRUNC(SYSDATE),'DDMMYYYY');
           --
       END;
       -- v5.51}
       -- {v5.35
       BEGIN
         --
         dc_k_a1001332.p_lee(p_cod_cia     => p_cod_cia
                            ,p_cod_agt     => p_cod_agt
                            ,p_fec_validez => TRUNC(SYSDATE));
         --
         l_cod_susep_agt := dc_k_a1001332.f_cod_agt_colegio;
         --
         EXCEPTION WHEN OTHERS THEN
           --
           l_cod_susep_agt := ea_k_231_utils.g_k_cod_susep_gen_2;
           --

       END;

       --
       BEGIN
         --
         dc_k_g1001332_vcr.p_lee_vigente(p_cod_cia
                                        ,l_cod_sector
                                        ,p_cod_ramo
                                        ,ea_k_231_utils.g_k_tip_produto_gen
                                        ,dc.COD_NIVEL1_GEN
                                        ,dc.COD_NIVEL2_GEN
                                        ,dc.COD_NIVEL3_GEN
                                        ,dc.COD_CANAL1_GEN
                                        ,dc.COD_CANAL2_GEN
                                        ,dc.COD_CANAL3_GEN
                                        ,p_cod_agt
                                        ,l_cod_susep_agt
                                        ,em.NUM_POLIZA_GRUPO_GEN
                                        ,em.NUM_CONTRATO_GEN
                                        ,em.NUM_SUBCONTRATO_GEN
                                        ,em.NUM_POLIZA_GEN
                                        ,em.NUM_POLIZA_GEN
                                        ,em.COD_MODALIDAD_GEN
                                        ,ea_k_231_utils.g_k_tip_segmento_gen
                                        ,TRUNC(SYSDATE));
         --
         l_tip_classificacao_corretor := dc_k_g1001332_vcr.f_tip_classificacao_corretor;
         --
         EXCEPTION WHEN OTHERS THEN
           --
           l_tip_classificacao_corretor := 'ZZ';
           --

       END;

       --
       BEGIN
         --
         ea_k_g2109013.p_lee_vigente(p_cod_cia
                                    ,p_cod_ramo
                                    ,p_cod_agt
                                    ,dc.COD_NIVEL1_GEN
                                    ,dc.COD_NIVEL2_GEN
                                    ,dc.COD_NIVEL3_GEN
                                    ,dc.COD_CANAL1_GEN
                                    ,dc.COD_CANAL2_GEN
                                    ,dc.COD_CANAL3_GEN
                                    ,em.NUM_POLIZA_GRUPO_GEN
                                    ,em.NUM_CONTRATO_GEN
                                    ,em.NUM_SUBCONTRATO_GEN
                                    ,em.NUM_POLIZA_GEN
                                    ,em.NUM_POLIZA_GEN
                                    ,g_k_mca_renov_outras
                                    ,to_date(l_fec_primeiro_calculo,'DDMMYYYY')  -- v5.51
                                    ,em.COD_MODALIDAD_GEN                        -- v5.51
                                    ,g_k_tip_mvto_batch
                                    ,l_cod_susep_agt
                                    ,l_tip_classificacao_corretor
                                    ,g_k_cod_canal_origen_gen
                                    ,g_k_cod_canal_comerc_entrada
                                    ,g_k_cod_canal_comerc_calculo
                                    ,g_k_mca_zero_km
                                    ,g_k_mca_sini_ult_vigencia
                                    ,g_k_cod_afinidade);
         --
         l_num_dias_vigencia    := ea_k_g2109013.f_num_dias_vigencia;
         --
         EXCEPTION WHEN OTHERS THEN
           --
           l_num_dias_vigencia  := 7;
           --

       END;
       -- v5.35}
       --
       -- {v5.51
       IF l_num_dias_vigencia IS NULL THEN
         --
         l_num_dias_vigencia  := 7;
         --
       END IF;
       -- v5.51}
       --
       OPEN l_retorno_cotacao
       FOR
        --
        SELECT 'NUM_COTIZACION' AS nom_campo_num_cotizacion,
               NUM_COTIZACION,
               'NUM_SIMULACION' AS nom_campo_num_simulacion,
               NUM_SPTO_APLI,
               'COD_RAMO'       AS nom_campo_cod_ramo,
               COD_RAMO,
               'FEC_CALCULO'    AS nom_campo_fec_calculo,
               FEC_CALCULO,
               'NUM_POLIZA'     AS nom_campo_num_poliza,
               NUM_POLIZA,
               'NUM_SPTO'       AS nom_campo_num_spto,
               NUM_SPTO,
               'FEC_EFEC_SPTO'  AS nom_campo_fec_efec_spto,
               FEC_EFEC_SPTO,
               'FEC_VCTO_SPTO'  AS nom_campo_fec_vcto_spto,
               FEC_VCTO_SPTO,
               'TIP_DOCUM'      AS nom_campo_tip_docum,
               TIP_DOCUM,
               'COD_DOCUM'      AS nom_campo_cod_docum,
               COD_DOCUM,
               'NOM_COMPLETO'   AS nom_campo_nom_completo,
               NOM_COMPLETO,
               'TIP_SPTO'       AS nom_campo_tip_spto,
               TIP_SPTO,
               'NOM_RIESGO'     AS nom_campo_nom_riesgo,
               NOM_RIESGO,
               'NUM_MATRICULA'  AS nom_campo_num_matricula,
               NUM_MATRICULA,
               'NUM_SERIE'      AS nom_campo_num_serie,
               NUM_SERIE,
               'NUM_VISTORIA'   AS nom_campo_num_vistoria,
               NUM_VISTORIA,
               'IMP_RECIBO'     AS nom_campo_imp_recibo,
               IMP_RECIBO,
               'IMP_NETA'       AS nom_campo_imp_neta,
               IMP_NETA,
               'STATUS'         AS nom_campo_status,
               CASE
                 WHEN COD_STATUS = 1 AND FEC_CALCULO < TRUNC(SYSDATE) - l_num_dias_vigencia THEN  -- v5.35
                  (SELECT NOM_VALOR
                     FROM tron2000.g1010031
                    where COD_RAMO   = g_k_cod_ramo_generico
                      AND COD_CAMPO  = 'COD_STATUS_ENDOSSO'
                      AND COD_IDIOMA = 'PT'
                      AND COD_VALOR  = '3'
                      AND COD_CIA    = p_cod_cia) --4.62
               --
                 WHEN COD_STATUS = 1 AND FEC_CALCULO >= TRUNC(SYSDATE) - l_num_dias_vigencia THEN  -- v5.35
                 -- I 5.05
                  NVL((SELECT upper(a.val_campo)
                      FROM p2000020 a
                    WHERE a.cod_cia = a1.COD_CIA
                      AND a.num_poliza = a1.num_poliza
                      AND a.num_spto_apli = a1.num_spto_apli
                      AND a. cod_campo = 'TXT_STATUS_MCC'),
                  (SELECT NOM_VALOR
                     FROM tron2000.g1010031
                    where COD_RAMO   = g_k_cod_ramo_generico
                      AND COD_CAMPO  = 'COD_STATUS_ENDOSSO'
                      AND COD_IDIOMA = 'PT'
                      AND COD_VALOR  = '1'
                      AND COD_CIA = p_cod_cia)) -- 4.62
               -- F 5.05
                 WHEN COD_STATUS = 2 THEN
                  (SELECT NOM_VALOR
                     FROM tron2000.g1010031
                    where COD_RAMO   = g_k_cod_ramo_generico
                      AND COD_CAMPO  = 'COD_STATUS_ENDOSSO'
                      AND COD_IDIOMA = 'PT'
                      AND COD_VALOR  = '2'
                      AND COD_CIA    = p_cod_cia) --4.62
               --
              -- I 2.01
                 WHEN COD_STATUS = 6 THEN
                  (SELECT NOM_VALOR
                     FROM tron2000.g1010031
                    where COD_RAMO   = g_k_cod_ramo_generico
                      AND COD_CAMPO  = 'COD_STATUS_ENDOSSO'
                      AND COD_IDIOMA = 'PT'
                      AND COD_VALOR  = '6'
                      AND COD_CIA    = p_cod_cia) --4.62
               -- F 2.01
               END AS status
          FROM TRON2000.A2009201_VCR A1
         WHERE COD_CIA        = p_cod_cia
           AND COD_SECTOR     = l_cod_sector
           AND COD_RAMO       = p_cod_ramo
           AND COD_AGT        = p_cod_agt
           AND (NUM_SERIE  = NVL(l_num_serie, NUM_SERIE) OR (NUM_SERIE IS NULL AND l_num_serie IS NULL))
           AND (NUM_MATRICULA  = NVL(l_num_matricula, NUM_MATRICULA) OR (NUM_MATRICULA IS NULL AND l_num_matricula IS NULL))
           AND NUM_POLIZA     = NVL(l_num_poliza, NUM_POLIZA)
           AND NUM_COTIZACION = NVL(l_num_simulacion, NUM_COTIZACION)
           AND FEC_CALCULO BETWEEN
               NVL(l_fec_ini_vig, FEC_CALCULO) AND
               NVL(l_fec_fim_vig, FEC_CALCULO)
           AND TIP_DOCUM      = NVL(l_tip_docum, TIP_DOCUM)
           AND COD_DOCUM      = NVL(l_cod_docum, COD_DOCUM)
           AND NUM_SPTO > 0 -- 2.01
           -- AND COD_STATUS NOT IN (l_status_cancelamento) -- 2.01 --4.33
           AND TRIM(NOM_COMPLETO)   = NVL(l_nom_completo , TRIM(NOM_COMPLETO))   -- V 2.81
           AND ((NVL(l_cod_sistema, trn.CERO) = 1 AND COD_STATUS = 2 AND
               FEC_EFEC_SPTO BETWEEN TRUNC(SYSDATE) - 7 AND TRUNC(SYSDATE)) OR
               NVL(l_cod_sistema, trn.CERO) <> 1);

       --
       -- FIM v 1.93
       --
       p_gerar_xml_coti_spto(l_retorno_cotacao ,p_xml);
       --
       mx('F', 'p_ws_consulta_coti_spto');
       --
       EXCEPTION
        --
        -- inicio V 1.93
        --
        WHEN e_cod_cia_inexistente THEN
             mx('F', 'p_ws_consulta_coti_spto - EXCEPTION: COD_CIA nao informado.');
        --
        WHEN e_cod_ramo_inexistente THEN
             mx('F', 'p_ws_consulta_coti_spto - EXCEPTION: COD_RAMO nao informado.');
        --
        WHEN e_cod_agt_inexistente THEN
             mx('F', 'p_ws_consulta_coti_spto - EXCEPTION: COD_AGT nao informado.');
        --
        WHEN e_fec_vig_incorreto THEN
             mx('F', 'p_ws_consulta_coti_spto - EXCEPTION: Data de inicio e fim de vigencia devem ser preenchidas em conjunto.');
        --
        WHEN e_tip_cod_docum_incorreto THEN
             mx('F', 'p_ws_consulta_coti_spto - EXCEPTION: TIP_DOCUM e COD_DOCUM devem ser preenchidas em conjunto.');
        -- fim V 1.93
        --
        WHEN OTHERS THEN
          --
          mx('F', 'p_ws_consulta_coti_spto - EXCEPTION');
          --
          g_err_msg :=  TYPTAB_MSG_WS(); -- 4.99
          --
          g_err_msg.EXTEND(1); -- 4.99
          g_err_msg(g_err_msg.LAST) := fp_trata_msg('NUM_COTIZACION', -- 4.99
                                                                                      SQLCODE,
                                                                                      SQLERRM);
          --
          pp_processa_mensagem(g_err_msg, -- 4.99
                               l_retorno_cotacao);
          --
          p_gerar_xml_mensagem(l_retorno_cotacao, p_xml);
          --
          g_err_msg := NULL; -- 4.99
          --
    END p_ws_consulta_coti_spto;
    --
    /* ---------------------------------------------------------------- *
    || Devolve um CLOB contendo uma lista de dados XML : p_xml
    */ ----------------------------------------------------------------
    --
    PROCEDURE p_ws_revisao_coti_spto (p_cod_cia          IN  a2000030.cod_cia         %TYPE,
                                      p_cod_ramo         IN  a2000030.cod_ramo        %TYPE,
                                      p_cod_tarifa       IN  g9999992.cod_tarifa      %TYPE,
                                      p_cod_agt          IN  g9999992.cod_agt         %TYPE,
                                      p_num_cotizacion   IN  a2000030.num_presupuesto %TYPE,
                                      p_tip_mvto_batch   IN  a2000500.tip_mvto_batch  %TYPE,
                                      p_xml_in           IN                            CLOB,
                                      p_xml             OUT                            CLOB)
    IS
       --
       CURSOR c_a2000030 IS
       SELECT a.num_poliza,a.num_spto_apli
         FROM tron2000.a2000030 a
        WHERE a.cod_cia         = p_cod_cia
          AND a.cod_ramo        = p_cod_ramo
          AND a.num_presupuesto = p_num_cotizacion
          AND a.mca_provisional = trn.SI;
       --
       CURSOR c_p2000030 IS
       SELECT p.num_poliza,p.num_spto_apli
         FROM tron2000.p2000030 p
        WHERE p.cod_cia         = p_cod_cia
          AND p.cod_ramo        = p_cod_ramo
          AND p.num_presupuesto = p_num_cotizacion
          AND p.mca_provisional = trn.SI;
       --
       l_reg_a2000030     c_a2000030%ROWTYPE;
       l_reg_p2000030     c_p2000030%ROWTYPE;
       --
       l_retorno_rev_coti     ref_cursor;
       l_num_poliza           a2000030.num_poliza   %TYPE;
       l_num_simulacion       a2000030.num_spto_apli%TYPE;
       --
    BEGIN
       --
       mx('I', 'p_ws_revisao_coti_spto');
       --
       mx('p_cod_cia'       , p_cod_cia       );
       mx('p_cod_ramo'      , p_cod_ramo      );
       mx('p_cod_tarifa'    , p_cod_tarifa    );
       mx('p_cod_agt'       , p_cod_agt       );
       mx('p_num_cotizacion', p_num_cotizacion);
       mx('p_tip_mvto_batch', p_tip_mvto_batch);
       mx('p_xml_in'        , p_xml_in        );
       --
       g_cot_dados := TYPTAB_DADOS_COT();
       g_cot_reg   := TYPREG_DADOS_COT.autocreate;
       --
       OPEN  c_p2000030;
       --
       FETCH c_p2000030 INTO l_reg_p2000030;
       --
       mx('-', 'ENCONTROU NA P2000030');
       l_num_poliza     := l_reg_p2000030.num_poliza;
       l_num_simulacion := l_reg_p2000030.num_spto_apli;
       --
       CLOSE c_p2000030;
       --
       IF l_num_poliza IS NULL AND
          l_num_simulacion IS NULL THEN
          --
          OPEN  c_a2000030;
          --
          FETCH c_a2000030 INTO l_reg_a2000030;
          --
          mx('-', 'ENCONTROU NA A2000030');
          l_num_poliza     := l_reg_a2000030.num_poliza;
          l_num_simulacion := l_reg_a2000030.num_spto_apli;
          --
          CLOSE c_a2000030;
          --
       END IF;
       --
       mx('l_num_poliza'    , l_num_poliza    );
       mx('l_num_simulacion', l_num_simulacion);
       --
       pp_gera_segurado(p_cod_cia
                       ,p_cod_ramo
                       ,p_cod_tarifa
                       ,p_cod_agt
                       ,l_num_poliza
                       ,p_num_cotizacion
                       ,p_tip_mvto_batch
                       ,p_xml_in
                       ,p_xml);
       --
       pp_gera_condutor(p_cod_cia
                       ,p_cod_ramo
                       ,p_cod_tarifa
                       ,p_cod_agt
                       ,l_num_poliza
                       ,p_num_cotizacion
                       ,p_tip_mvto_batch
                       ,p_xml_in
                       ,p_xml);
       --
       pp_gera_resp_pagamento(p_cod_cia
                             ,p_cod_ramo
                             ,p_cod_tarifa
                             ,p_cod_agt
                             ,l_num_poliza
                             ,p_num_cotizacion
                             ,p_tip_mvto_batch
                             ,p_xml_in
                             ,p_xml);
       --
       pp_gera_demais_terceiros(p_cod_cia
                               ,p_cod_ramo
                               ,p_cod_tarifa
                               ,p_cod_agt
                               ,l_num_poliza
                               ,p_num_cotizacion
                               ,p_tip_mvto_batch
                               ,p_xml_in
                               ,p_xml);
       --
       pp_gera_dados_variaveis(p_cod_cia
                              ,p_cod_ramo
                              ,p_cod_tarifa
                              ,p_cod_agt
                              ,l_num_poliza
                              ,l_num_simulacion
                              ,p_tip_mvto_batch
                              ,p_xml_in
                              ,p_xml);
       --
       OPEN l_retorno_rev_coti
        FOR
         SELECT X2000000.cod_campo,
                X2000000.val_campo
           FROM TABLE(CAST(g_cot_dados AS TYPTAB_DADOS_COT)) X2000000
          ORDER BY X2000000.cod_campo;
       --
       p_gerar_xml_campo_unico(l_retorno_rev_coti, p_xml);
       --
       mx('F', 'p_ws_revisao_coti_spto');
       --
       EXCEPTION
        WHEN OTHERS THEN
          --
         mx('F', 'p_ws_revisao_coti_spto - EXCEPTION');
         --
         g_err_msg :=  TYPTAB_MSG_WS(); -- 4.99
         --
         g_err_msg.EXTEND(1); -- 4.99
         g_err_msg(g_err_msg.LAST) := fp_trata_msg('NUM_POLIZA', -- 4.99
                                                                                   SQLCODE,
                                                                                   SQLERRM);
         --
         pp_processa_mensagem(g_err_msg, -- 4.99
                              l_retorno_rev_coti);
         --
         p_gerar_xml_mensagem(l_retorno_rev_coti, p_xml);
         --
         g_err_msg := NULL; -- 4.99
         --
    END p_ws_revisao_coti_spto;
    --
    /* ------------------------------------------------------
    || transforma resultado do processamento em CLOB de XML
    */ ------------------------------------------------------
    --
    PROCEDURE p_gerar_xml_cobertura_endosso (p_retorno_pacote        IN ref_cursor,
                                             p_clob_lista            OUT CLOB)
    IS
       --
       l_retorno_xml_pac    ref_cursor;
       l_rec_lista_pac      rec_detalhe_pacote;
       --
       l_xml_lista          XMLTYPE;
       --
       l_document           DBMS_XMLDOM.DOMDOCUMENT;
       l_text_campo         DBMS_XMLDOM.DOMTEXT;
       l_node_valor         DBMS_XMLDOM.DOMNODE;
       l_node_lista         DBMS_XMLDOM.DOMNODE;
       l_node_dados         DBMS_XMLDOM.DOMNODE;
       l_node_val_cob_pac   DBMS_XMLDOM.DOMNODE;
       l_node_col_cob_cas   DBMS_XMLDOM.DOMNODE;
       l_node_lim_max_inde  DBMS_XMLDOM.DOMNODE;
       l_node_col_atri_lis  DBMS_XMLDOM.DOMNODE;
       l_node_tip_atri_cob  DBMS_XMLDOM.DOMNODE;
       l_node_val_franq     DBMS_XMLDOM.DOMNODE;
       l_node_col_cob       DBMS_XMLDOM.DOMNODE;
       l_node_val_cobs_adi  DBMS_XMLDOM.DOMNODE;
       l_node_val_cobs_bloq DBMS_XMLDOM.DOMNODE;
       --
       l_tab_cob            rec_tab_det_cob      := NULL;
       l_tab_val_lim_inde   rec_tab_val_lim_inde := NULL;
       l_tab_atri_lista     rec_tab_atri_lista   := NULL;
       l_tab_atri_cob       rec_tab_atri_cob     := NULL;
       l_tab_val_franq      rec_tab_val_franq    := NULL;
       --
       l_detalhe_cobertura  rec_det_cob;
       l_cod_cobs           VARCHAR2(50);
       --
       CURSOR c_cob_contratadas(p_cod_cia     a2000560.cod_cia%TYPE,
                                p_cod_ramo    a2000560.val_campo%TYPE,
                                p_num_poliza  a2000560.num_propuesta%TYPE,
                                p_val_clave_formula  a2000560.val_campo%TYPE,
                                p_fec_validez_tarifa a2000560.val_campo%TYPE) IS
         WITH
         -- COD_COB_PARSER TRANSFORMA VARIAVEL VARCHAR COM OS COD_COB EM SUBCONSULTA PARA SER USANDO EM IN
         cod_cob_parser AS (SELECT regexp_substr(l_cod_cobs, '[^,]+', trn.uno, LEVEL) AS cod_cob
                              FROM dual
                            CONNECT BY LEVEL <= length(l_cod_cobs) -
                                       length(REPLACE(l_cod_cobs, g_k_separador_vir, trn.nulo)) +
                                       trn.uno),
         -- BUSCA TODAS AS COBERTURAS POR PACOTE G2109040_VCR (DEFINICOES DE VALORES DEFAULT PARA COBERTURAS/PACOTE)
         c_cobertura_g2109040_vcr AS (SELECT i.cod_cob, i.suma_aseg, i.mca_defecto, i.mca_contrata
                                        FROM g2109040_vcr i
                                       WHERE i.cod_cia = p_cod_cia
                                         AND i.val_clave_formula = p_val_clave_formula
                                         AND i.mca_baja = trn.no
                                         AND i.fec_validez = (SELECT MAX(ii.fec_validez)
                                                                FROM g2109040_vcr ii
                                                               WHERE ii.cod_cia           = i.cod_cia
                                                                 AND ii.val_clave_formula = i.val_clave_formula
                                                                 AND ii.cod_cob           = i.cod_cob
                                                                 AND ii.fec_validez      <= to_date(p_fec_validez_tarifa, 'ddmmyyyy'))),
         -- BUSCA TODAS AS COBERTURAS POR PACOTE G2109041_VCR (DEFINICOES DE VALORES DEFAULT DE REGRAS)
         c_cobertura_g2109041_vcr AS (SELECT r.cod_cob, r.mca_contrata_cob
                                        FROM g2109041_vcr r
                                       WHERE r.cod_cia = p_cod_cia
                                         AND r.val_clave_formula = p_val_clave_formula
                                         AND r.mca_baja = trn.no
                                         AND r.fec_validez = (SELECT MAX(rr.fec_validez)
                                                                FROM g2109041_vcr rr
                                                               WHERE rr.cod_cia           = r.cod_cia
                                                                 AND rr.val_clave_formula = r.val_clave_formula
                                                                 AND rr.cod_cob           = r.cod_cob
                                                                 AND rr.fec_validez      <= to_date(p_fec_validez_tarifa, 'ddmmyyyy')))
         -- BUSCA TODAS AS COBERTURAS CONTRATADAS
         SELECT a.cod_cob
           FROM a2000040 a, a1002050 b
          WHERE a.cod_cia    = p_cod_cia
            AND a.cod_ramo   = p_cod_ramo
            AND a.num_poliza = p_num_poliza
            AND a.num_riesgo = trn.UNO
            AND a.cod_cob    NOT IN (SELECT p.cod_cob FROM cod_cob_parser p)
            AND a.cod_cob    <> 2324 --ignorar cobertura fator de ajuste
            AND nvl(a.mca_baja_cob, trn.no) = trn.no
            AND a.num_spto    = (SELECT MAX(z.num_spto)
                                   FROM a2000030 z
                                  WHERE z.cod_cia            = a.cod_cia
                                    AND z.cod_ramo           = a.cod_ramo
                                    AND z.num_poliza         = a.num_poliza
                                    AND z.mca_provisional    = trn.NO
                                    AND z.mca_poliza_anulada = trn.NO
                                    AND z.mca_spto_anulado   = trn.NO      )
            AND b.cod_cia          = a.cod_cia
            AND b.cod_cob          = a.cod_cob
            AND b.tip_cob          <> em.tip_cob_informativa
            AND a.cod_cob IN (SELECT cod_cob FROM c_cobertura_g2109040_vcr)
            AND a.cod_cob NOT IN (SELECT cod_cob
                                    FROM c_cobertura_g2109040_vcr
                                   WHERE mca_contrata = trn.no
                                     AND cod_cob IN (SELECT cod_cob
                                                       FROM c_cobertura_g2109041_vcr
                                                      WHERE mca_contrata_cob = trn.no))
         ORDER BY a.cod_cob;
       --
       --
       CURSOR c_cob_adicionais( p_cod_cia     a2000560.cod_cia%TYPE,
                                p_cod_ramo    a2000560.val_campo%TYPE,
                                p_num_poliza  a2000560.num_propuesta%TYPE,
                                p_num_riesgo  a2000560.val_campo%TYPE,
                                p_val_clave_formula  a2000560.val_campo%TYPE,
                                p_fec_validez_tarifa a2000560.val_campo%TYPE) IS
         WITH
         -- COD_COB_PARSER TRANSFORMA VARIAVEL VARCHAR COM OS COD_COB EM SUBCONSULTA PARA SER USANDO EM IN
         cod_cob_parser AS (SELECT regexp_substr(l_cod_cobs, '[^,]+', trn.UNO, LEVEL) AS cod_cob
                            FROM dual
                            CONNECT BY LEVEL <= LENGTH(l_cod_cobs) - LENGTH(REPLACE(l_cod_cobs,
                                                                                    g_k_separador_vir,
                                                                                    trn.NULO)) + trn.UNO),
         -- BUSCA TODAS AS COBERTURAS POR PACOTE G2109040_VCR (DEFINICOES DE VALORES DEFAULT PARA COBERTURAS/PACOTE)
         c_cobertura_g2109040_vcr AS (SELECT   i.cod_cob,
                                               i.suma_aseg,
                                               i.mca_defecto,
                                               i.mca_contrata
                                      FROM     g2109040_vcr i
                                      WHERE    i.cod_cia            = p_cod_cia
                                           AND i.val_clave_formula  = p_val_clave_formula
                                           AND i.mca_baja           = trn.NO
                                           AND i.fec_validez        = ( SELECT MAX(ii.fec_validez)
                                                                        FROM g2109040_vcr ii
                                                                        WHERE ii.cod_cia            = i.cod_cia
                                                                          AND ii.val_clave_formula  = i.val_clave_formula
                                                                          AND ii.cod_cob            = i.cod_cob
                                                                          AND ii.fec_validez       <= to_date(p_fec_validez_tarifa, 'ddmmyyyy'))),
         -- BUSCA TODAS AS COBERTURAS CALCULADAS
         c_cobertura_calculadas AS (SELECT a.cod_cob
                                      FROM a2000040 a
                                     WHERE a.cod_cia = p_cod_cia
                                       AND a.cod_ramo = p_cod_ramo
                                       AND a.num_poliza = p_num_poliza
                                       AND a.num_riesgo = p_num_riesgo
                                       AND nvl(a.mca_baja_cob, trn.NO) = trn.NO
                                       AND a.mca_vigente = trn.SI
                                       AND a.mca_vigente_apli = trn.SI),
         -- BUSCA TODAS AS COBERTURAS POR PACOTE G2109041_VCR (DEFINICOES DE VALORES DEFAULT DE REGRAS)
         c_cobertura_G2109041_VCR AS (SELECT   r.cod_cob,
                                               r.mca_contrata_cob
                                      FROM     g2109041_vcr r
                                      WHERE    r.cod_cia            = p_cod_cia
                                           AND r.val_clave_formula  = p_val_clave_formula
                                           AND r.mca_baja           = trn.NO
                                           AND r.fec_validez        = ( SELECT MAX(rr.fec_validez)
                                                                        FROM g2109041_vcr rr
                                                                        WHERE rr.cod_cia            = r.cod_cia
                                                                          AND rr.val_clave_formula  = r.val_clave_formula
                                                                          AND rr.cod_cob            = r.cod_cob))

         -- BUSCA O NOME DAS COBERTURAS NAO CONTRATADAS
         SELECT x.cod_cob
           FROM a1002150 x
          WHERE x.cod_cia = p_cod_cia
            AND x.cod_ramo = p_cod_ramo
            AND x.fec_validez = (SELECT MAX(rr.fec_validez)
                                   FROM a1002150 rr
                                  WHERE rr.cod_cia = x.cod_cia
                                    AND rr.cod_ramo = x.cod_ramo
                                    AND rr.cod_modalidad = x.cod_modalidad
                                    AND rr.cod_cob = x.cod_cob)
            AND x.cod_cob IN (SELECT cod_cob FROM c_cobertura_g2109040_vcr)
            AND x.cod_cob NOT IN (SELECT cod_cob FROM c_cobertura_calculadas)
            AND x.cod_cob NOT IN (SELECT cod_cob
                                    FROM c_cobertura_g2109040_vcr
                                   WHERE mca_contrata = trn.NO
                                     AND cod_cob IN (SELECT cod_cob FROM c_cobertura_g2109041_vcr WHERE mca_contrata_cob = trn.NO))
            AND x.cod_cob NOT IN (SELECT cod_cob FROM cod_cob_parser)
       ORDER BY x.cod_cob;
       --
       --
       CURSOR c_cob_bloqueadas( p_cod_cia     a2000560.cod_cia%TYPE,
                                p_cod_ramo    a2000560.val_campo%TYPE,
                                p_num_poliza  a2000560.num_propuesta%TYPE,
                                p_num_riesgo  a2000560.val_campo%TYPE,
                                p_val_clave_formula  a2000560.val_campo%TYPE,
                                p_fec_validez_tarifa a2000560.val_campo%TYPE) IS
         WITH
         -- COD_COB_PARSER TRANSFORMA VARIAVEL VARCHAR COM OS COD_COB EM SUBCONSULTA PARA SER USANDO EM IN
         cod_cob_parser AS (SELECT regexp_substr(l_cod_cobs, '[^,]+', trn.uno, LEVEL) AS cod_cob
                              FROM dual
                            CONNECT BY LEVEL <= length(l_cod_cobs) -
                                       length(REPLACE(l_cod_cobs, g_k_separador_vir, trn.nulo)) +
                                       trn.uno),
         -- BUSCA TODAS AS COBERTURAS QUE NAO PODEM SER CONTRATADAS NO PACOTE
         c_pacote_cobertura AS (SELECT i.cod_cob, i.suma_aseg, i.mca_defecto, i.mca_contrata
                                  FROM g2109040_vcr i
                                 WHERE i.cod_cia = p_cod_cia
                                   AND i.val_clave_formula = p_val_clave_formula
                                   AND i.mca_baja = trn.no
                                   AND i.mca_contrata = trn.no
                                   AND i.fec_validez = (SELECT MAX(ii.fec_validez)
                                                          FROM g2109040_vcr ii
                                                         WHERE ii.cod_cia = i.cod_cia
                                                           AND ii.val_clave_formula = i.val_clave_formula
                                                           AND ii.cod_cob = i.cod_cob
                                                           AND ii.fec_validez <= to_date(p_fec_validez_tarifa, 'ddmmyyyy'))
                                   AND i.cod_cob IN (SELECT j.cod_cob
                                                       FROM g2109041_vcr j
                                                      WHERE j.cod_cia = i.cod_cia
                                                        AND j.val_clave_formula = i.val_clave_formula
                                                        AND j.mca_baja = trn.no
                                                        AND j.mca_contrata_cob = trn.no
                                                        AND j.fec_validez = i.fec_validez))
         -- BUSCA TODAS AS COBERTURAS CALCULADAS E QUE NAO PERTENCEM AO NOVO PACOTE
         SELECT a.cod_cob, a.suma_aseg
           FROM a2000040 a
          WHERE a.cod_cia = p_cod_cia
            AND a.cod_ramo = p_cod_ramo
            AND a.num_poliza = p_num_poliza
            AND a.num_riesgo = p_num_riesgo
            AND nvl(a.mca_baja_cob, trn.no) = trn.no
            AND a.num_spto    = (SELECT MAX(z.num_spto)
                                   FROM a2000030 z
                                  WHERE z.cod_cia            = a.cod_cia
                                    AND z.cod_ramo           = a.cod_ramo
                                    AND z.num_poliza         = a.num_poliza
                                    AND z.mca_provisional    = trn.NO
                                    AND z.mca_poliza_anulada = trn.NO
                                    AND z.mca_spto_anulado   = trn.NO      )
            AND a.cod_cob <> 2324 --ignorar cobertura fator de ajuste
            AND a.cod_cob NOT IN (SELECT p.cod_cob FROM cod_cob_parser p)
            AND a.cod_cob IN (SELECT cod_cob FROM c_pacote_cobertura)
         ORDER BY a.cod_cob;
         --
         --
      BEGIN
        --
        mx('I', 'p_gerar_xml_cobertura_endosso');
        --
        l_retorno_xml_pac  := p_retorno_pacote;
        l_document         := DBMS_XMLDOM.newdomdocument;
        l_node_lista       := DBMS_XMLDOM.makenode(l_document);
        --
        LOOP FETCH l_retorno_xml_pac INTO l_rec_lista_pac;
           --
           EXIT WHEN l_retorno_xml_pac%NOTFOUND;
           --
           mx('cod_cia',l_rec_lista_pac.COD_CIA);
           mx('cod_ramo',l_rec_lista_pac.COD_RAMO);
           mx('num_cotizacion',l_rec_lista_pac.NUM_COTIZACION);
           mx('cod_pacote',l_rec_lista_pac.COD_PACOTE);
           mx('val_veiculo',l_rec_lista_pac.VAL_VEICULO);
           mx('fec_validez_tarifa',l_rec_lista_pac.FEC_VALIDEZ_TARIFA);
           mx('val_clave_formula',l_rec_lista_pac.VAL_CLAVE_FORMULA);
           --
           l_node_lista := DBMS_XMLDOM.makenode(l_document);
           l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'descPacotes')));
           --
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'codPacote')));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_pac.NUM_SIMULACION );
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
           --
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'nomPacote')));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_pac.NOM_PACOTE );
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
           --
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valTotal')));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_pac.VAL_TOTAL );
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
           --
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'pctAjuste')));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_pac.PCT_FATOR_AJUSTE );
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
           --
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valSubModelo')));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_pac.VAL_VEICULO );
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
           --
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'tipMercDeter')));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_pac.TIP_MERC_DETER );
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
           --
           -- v3.36 ini
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'pctAgtNpr')));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_pac.PCT_AGT_NPR );
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
           -- v3.36 fim
           --
       -- v4.37 Ini
           IF trn_k_global.devuelve('MCA_PREFERENCIA') = 'S' THEN

           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valParcelasPagamento')));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_pac.COD_PLAN_PAGO );
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
           --
           --
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valFormaPagamento')));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_pac.COD_FORMA_PAGO );
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
           --
           END IF; --v4.37 fim
           l_node_val_cob_pac := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCoberturasPacotes')));
           --
           -- BUSCA TYPE
           --
           l_tab_cob := fp_bus_coberturas_casco(l_rec_lista_pac.COD_CIA,
                                                l_rec_lista_pac.COD_RAMO,
                                                l_rec_lista_pac.NUM_COTIZACION,
                                                l_rec_lista_pac.NUM_SIMULACION,
                                                l_rec_lista_pac.COD_PACOTE,
                                                l_rec_lista_pac.VAL_VEICULO,
                                                l_rec_lista_pac.FEC_VALIDEZ_TARIFA,
                                                l_rec_lista_pac.VAL_CLAVE_FORMULA,
                                                g_k_cod_cons_cob_contrada);
           --
           -- TRATA INFORMACEOS DAS COBERTURAS DE CASCO
           IF l_tab_cob.EXISTS(1) THEN
              --
              FOR cob_index IN l_tab_cob.FIRST..l_tab_cob.LAST
              LOOP
                 --
                 l_node_col_cob_cas := DBMS_XMLDOM.appendchild(l_node_val_cob_pac, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colCoberturasCasco')));
                 --
                 mx('l_tab_cob',l_tab_cob(cob_index).COD_COB);
                 --
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_cob_cas, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'codCobertura')));
                 l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_cob(cob_index).COD_COB );
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                 --
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_cob_cas, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'nomCobertura')));
                 l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_cob(cob_index).NOM_COB );
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                 --
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_cob_cas, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'mcaSeleccionCob')));
                 l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_cob(cob_index).MCA_SELEC_COB );
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                 --
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_cob_cas, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'mcaModificaCapital')));
                 l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_cob(cob_index).MCA_MODIF_CAP );
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                 --
                 l_tab_val_lim_inde := l_tab_cob(cob_index).TAB_VAL_LIM_INDE;
                 --
                 -- TRATA INFORMACOES DO LIMITE DE INDENIZACAO
                    --
                    FOR inde_index IN l_tab_val_lim_inde.FIRST..l_tab_val_lim_inde.LAST
                    LOOP
                       --
                       l_node_lim_max_inde := DBMS_XMLDOM.appendchild(l_node_col_cob_cas, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valLimiteMaxIndenizacao')));
                       --
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_lim_max_inde, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'codCampo')));
                       l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_lim_inde(inde_index).COD_CAMPO );
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                       --
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_lim_max_inde, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valCampo')));
                       l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_lim_inde(inde_index).VAL_CAMPO );
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                       --
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_lim_max_inde, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'mcaValDefecto')));
                       l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_lim_inde(inde_index).MCA_VAL_DEFEC );
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                       --
                    END LOOP;

                 --
                 l_tab_atri_lista := l_tab_cob(cob_index).TAB_ATRI_LISTA;
                 --
                 l_node_col_atri_lis := DBMS_XMLDOM.appendchild(l_node_col_cob_cas, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colAtributosLista')));
                 --
                 -- TRATA LISTA DE ATRIBUTOS DA LISTA DA COBERTURA (DV) - LISTA DE LISTA
                 IF l_tab_atri_lista.EXISTS(1) THEN
                    --
                    FOR atri_lis_index IN l_tab_atri_lista.FIRST..l_tab_atri_lista.LAST
                    LOOP
                       --
                       l_tab_atri_cob := l_tab_atri_lista(atri_lis_index);
                       --
                       -- TRATA LISTA DA LISTA DA COBERTURA (LISTA DO DV)
                       IF l_tab_atri_cob.EXISTS(1) THEN
                          --
                          FOR atri_cob_index IN l_tab_atri_cob.FIRST..l_tab_atri_cob.LAST
                          LOOP
                             --
                             l_node_tip_atri_cob := DBMS_XMLDOM.appendchild(l_node_col_atri_lis, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'tipAtributoCob')));
                             --
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_tip_atri_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'codCampo')));
                             l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_atri_cob(atri_cob_index).COD_CAMPO );
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                             --
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_tip_atri_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valCampo')));
                             l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_atri_cob(atri_cob_index).VAL_CAMPO );
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                             --
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_tip_atri_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'txtCampo')));
                             l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_atri_cob(atri_cob_index).TXT_CAMPO );
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                             --
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_tip_atri_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'mcaSeleccionAtributo')));
                             l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_atri_cob(atri_cob_index).MCA_SELEC );
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                             --
                          END LOOP;
                          --
                      END IF;
                      --
                    END LOOP;
                    --
                 END IF;
                 --
                 l_tab_val_franq := l_tab_cob(cob_index).TAB_VAL_FRANQ;
                 --
                 -- TRATA LISTA DE FRANQUIA DA COBERTURA
                  IF l_tab_val_franq.COUNT = trn.CERO THEN
                    --
                    l_node_val_franq := DBMS_XMLDOM.appendchild(l_node_col_cob_cas, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valFranquia')));
                   --
                 ELSE
                    --
                    FOR val_franq_index IN l_tab_val_franq.FIRST..l_tab_val_franq.LAST
                    LOOP
                       --
                       l_node_val_franq := DBMS_XMLDOM.appendchild(l_node_col_cob_cas, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valFranquia')));
                       --
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_val_franq, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'codCampo')));
                       l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_franq(val_franq_index).COD_CAMPO );
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                       --
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_val_franq, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valCampo')));
                       l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_franq(val_franq_index).VAL_CAMPO );
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                       --
                    END LOOP;
                    --
                 END IF;
                 --
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_cob_cas, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valPremioCasco')));
                 l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_cob(cob_index).VAL_PREMIO );
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                 --
              END LOOP;
              --
           END IF;
           --
           -- RETORNA TODOS OS COD_COB DE CASCO PARA NAO SEREM INCLUIDOS NO RETORNO DO CURSOR
           l_cod_cobs := fp_trata_lista_cob(fp_bus_cod_cob_casco(l_rec_lista_pac.COD_CIA,
                                                                 l_rec_lista_pac.COD_RAMO,
                                                                 g_k_cod_campo_cob_casco));
           --
           l_tab_cob := rec_tab_det_cob();
           --
           -- BUSCA TODAS AS COBERTURAS PARAMETRIZADAS PARA O COD_RAMO QUE TENHAM SIDO CALCULADAS E NAO SEJAM DE CASCO
           FOR cob IN c_cob_contratadas(l_rec_lista_pac.COD_CIA,
                                        l_rec_lista_pac.COD_RAMO,
                                        l_rec_lista_pac.NUM_COTIZACION,
                                        l_rec_lista_pac.VAL_CLAVE_FORMULA,
                                        l_rec_lista_pac.FEC_VALIDEZ_TARIFA)
           LOOP
              --
              l_detalhe_cobertura := fp_bus_det_cob_endosso( l_rec_lista_pac.COD_CIA,
                                                             l_rec_lista_pac.COD_RAMO,
                                                             l_rec_lista_pac.NUM_COTIZACION,
                                                             trn.UNO,
                                                             cob.cod_cob,
                                                             l_rec_lista_pac.VAL_CLAVE_FORMULA,
                                                             l_rec_lista_pac.FEC_VALIDEZ_TARIFA,
                                                             g_k_cod_cons_cob_contrada);
             --
             l_tab_cob.EXTEND(1);
             l_tab_cob(l_tab_cob.LAST) := l_detalhe_cobertura;
             --
           END LOOP;
           --
           -- TRATA INFORMACOES DAS COBERTURAS CONTRATADAS
           IF l_tab_cob.EXISTS(1) THEN
              --
              FOR cob_index IN l_tab_cob.FIRST..l_tab_cob.LAST
              LOOP
                 --
                 mx('cod_cob',l_tab_cob(cob_index).COD_COB);
                 --
                 l_node_col_cob := DBMS_XMLDOM.appendchild(l_node_val_cob_pac, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colCoberturas')));
                 --
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'codCobertura')));
                 l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_cob(cob_index).COD_COB );
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                 --
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'nomCobertura')));
                 l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_cob(cob_index).NOM_COB );
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                 --
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'mcaSeleccionCob')));
                 l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_cob(cob_index).MCA_SELEC_COB );
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                 --
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'mcaModificaCapital')));
                 l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_cob(cob_index).MCA_MODIF_CAP );
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                 --
                 l_tab_val_lim_inde := l_tab_cob(cob_index).TAB_VAL_LIM_INDE;
                 --
                 -- TRATA INFORMACOES DO LIMITE DE INDENIZACAO
                 IF l_tab_val_lim_inde.COUNT = trn.CERO THEN
                    --
                    l_node_lim_max_inde := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valLimiteMaxIndenizacao')));
                    --
                 ELSE
                    --
                    FOR inde_index IN l_tab_val_lim_inde.FIRST..l_tab_val_lim_inde.LAST
                    LOOP
                       --
                       l_node_lim_max_inde := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valLimiteMaxIndenizacao')));
                       --
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_lim_max_inde, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'codCampo')));
                       l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_lim_inde(inde_index).COD_CAMPO );
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                       --
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_lim_max_inde, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valCampo')));
                       l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_lim_inde(inde_index).VAL_CAMPO );
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                       --
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_lim_max_inde, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'mcaValDefecto')));
                       l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_lim_inde(inde_index).MCA_VAL_DEFEC );
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                       --
                    END LOOP;
                    --
                 END IF;
                 --
                 l_tab_atri_lista := l_tab_cob(cob_index).TAB_ATRI_LISTA;
                 --
                 l_node_col_atri_lis := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colAtributosLista')));
                 --
                 -- TRATA LISTA DE ATRIBUTOS DA LISTA DA COBERTURA (DV) - LISTA DE LISTA
                 IF l_tab_atri_lista.COUNT = trn.CERO THEN
                    --
                    mx('-',                                               'TRATA INFORMACOES DAS COBERTURAS CONTRATADAS');
                    mx('-TRATA LISTA DE ATRIBUTOS DA LISTA DA COBERTURA', 'NAO HA DADOS NA LISTA');
                    --
                 ELSE
                    --
                    FOR atri_lis_index IN l_tab_atri_lista.FIRST..l_tab_atri_lista.LAST
                    LOOP
                       --
                       l_tab_atri_cob := l_tab_atri_lista(atri_lis_index);
                       --
                       -- TRATA LISTA DA LISTA DA COBERTURA (LISTA DO DV)
                       IF l_tab_atri_cob.EXISTS(1) THEN
                          --
                          FOR atri_cob_index IN l_tab_atri_cob.FIRST..l_tab_atri_cob.LAST
                          LOOP
                             --
                             l_node_tip_atri_cob := DBMS_XMLDOM.appendchild(l_node_col_atri_lis, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'tipAtributoCob')));
                             --
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_tip_atri_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'codCampo')));
                             l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_atri_cob(atri_cob_index).COD_CAMPO );
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                             --
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_tip_atri_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valCampo')));
                             l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_atri_cob(atri_cob_index).VAL_CAMPO );
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                             --
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_tip_atri_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'txtCampo')));
                             l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_atri_cob(atri_cob_index).TXT_CAMPO );
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                             --
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_tip_atri_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'mcaSeleccionAtributo')));
                             l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_atri_cob(atri_cob_index).MCA_SELEC );
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                             --
                          END LOOP;
                          --
                      END IF;
                      --
                    END LOOP;
                    --
                 END IF;
                 --
                 l_tab_val_franq := l_tab_cob(cob_index).TAB_VAL_FRANQ;
                 --
                 -- TRATA LISTA DE FRANQUIA DA COBERTURA
                 IF l_tab_val_franq.COUNT = trn.CERO THEN
                    --
                    l_node_val_franq := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valFranquia')));
                    --
                 ELSE
                    --
                    FOR val_franq_index IN l_tab_val_franq.FIRST..l_tab_val_franq.LAST
                    LOOP
                       --
                       l_node_val_franq := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valFranquia')));
                       --
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_val_franq, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'codCampo')));
                       l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_franq(val_franq_index).COD_CAMPO );
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                       --
                       IF l_tab_val_franq(val_franq_index).TXT_CAMPO IS NOT NULL THEN
                          --
                          l_node_valor := DBMS_XMLDOM.appendchild(l_node_val_franq, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'txtCampo')));
                          l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_franq(val_franq_index).TXT_CAMPO );
                          l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                          --
                       END IF;
                       --
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_val_franq, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valCampo')));
                       l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_franq(val_franq_index).VAL_CAMPO );
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                       --
                    END LOOP;
                    --
                 END IF;
                 --
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valPremio')));
                 l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_cob(cob_index).VAL_PREMIO );
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                 --
              END LOOP;
           END IF;
           --
           l_node_val_cobs_bloq := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCoberturasBloqueadas')));
           --
           l_tab_cob := fp_bus_coberturas_casco(l_rec_lista_pac.COD_CIA,
                                                l_rec_lista_pac.COD_RAMO,
                                                l_rec_lista_pac.NUM_COTIZACION,
                                                l_rec_lista_pac.NUM_SIMULACION,
                                                l_rec_lista_pac.COD_PACOTE,
                                                l_rec_lista_pac.VAL_VEICULO,
                                                l_rec_lista_pac.FEC_VALIDEZ_TARIFA,
                                                l_rec_lista_pac.VAL_CLAVE_FORMULA,
                                                g_k_cod_cons_cob_bloqueada);
           --
           -- TRATA INFORMACEOS DAS COBERTURAS DE CASCO
           IF l_tab_cob.EXISTS(1) THEN
              --
              FOR cob_index IN l_tab_cob.FIRST..l_tab_cob.LAST
              LOOP
                 --
                 l_node_col_cob_cas := DBMS_XMLDOM.appendchild(l_node_val_cobs_bloq, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colCoberturasCasco')));
                 --
                 mx('l_tab_cob',l_tab_cob(cob_index).COD_COB);
                 --
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_cob_cas, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'codCobertura')));
                 l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_cob(cob_index).COD_COB );
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                 --
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_cob_cas, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'nomCobertura')));
                 l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_cob(cob_index).NOM_COB );
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                 --
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_cob_cas, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'mcaSeleccionCob')));
                 l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_cob(cob_index).MCA_SELEC_COB );
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                 --
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_cob_cas, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'mcaModificaCapital')));
                 l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_cob(cob_index).MCA_MODIF_CAP );
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                 --
                 l_tab_val_lim_inde := l_tab_cob(cob_index).TAB_VAL_LIM_INDE;
                 --
                 -- TRATA INFORMACOES DO LIMITE DE INDENIZACAO
                    --
                    FOR inde_index IN l_tab_val_lim_inde.FIRST..l_tab_val_lim_inde.LAST
                    LOOP
                       --
                       l_node_lim_max_inde := DBMS_XMLDOM.appendchild(l_node_col_cob_cas, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valLimiteMaxIndenizacao')));
                       --
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_lim_max_inde, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'codCampo')));
                       l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_lim_inde(inde_index).COD_CAMPO );
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                       --
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_lim_max_inde, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valCampo')));
                       l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_lim_inde(inde_index).VAL_CAMPO );
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                       --
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_lim_max_inde, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'mcaValDefecto')));
                       l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_lim_inde(inde_index).MCA_VAL_DEFEC );
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                       --
                    END LOOP;

                 --
                 l_tab_atri_lista := l_tab_cob(cob_index).TAB_ATRI_LISTA;
                 --
                 l_node_col_atri_lis := DBMS_XMLDOM.appendchild(l_node_col_cob_cas, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colAtributosLista')));
                 --
                 -- TRATA LISTA DE ATRIBUTOS DA LISTA DA COBERTURA (DV) - LISTA DE LISTA
                 IF l_tab_atri_lista.EXISTS(1) THEN
                    --
                    FOR atri_lis_index IN l_tab_atri_lista.FIRST..l_tab_atri_lista.LAST
                    LOOP
                       --
                       l_tab_atri_cob := l_tab_atri_lista(atri_lis_index);
                       --
                       -- TRATA LISTA DA LISTA DA COBERTURA (LISTA DO DV)
                       IF l_tab_atri_cob.EXISTS(1) THEN
                          --
                          FOR atri_cob_index IN l_tab_atri_cob.FIRST..l_tab_atri_cob.LAST
                          LOOP
                             --
                             l_node_tip_atri_cob := DBMS_XMLDOM.appendchild(l_node_col_atri_lis, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'tipAtributoCob')));
                             --
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_tip_atri_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'codCampo')));
                             l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_atri_cob(atri_cob_index).COD_CAMPO );
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                             --
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_tip_atri_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valCampo')));
                             l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_atri_cob(atri_cob_index).VAL_CAMPO );
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                             --
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_tip_atri_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'txtCampo')));
                             l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_atri_cob(atri_cob_index).TXT_CAMPO );
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                             --
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_tip_atri_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'mcaSeleccionAtributo')));
                             l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_atri_cob(atri_cob_index).MCA_SELEC );
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                             --
                          END LOOP;
                          --
                      END IF;
                      --
                    END LOOP;
                    --
                 END IF;
                 --
                 l_tab_val_franq := l_tab_cob(cob_index).TAB_VAL_FRANQ;
                 --
                 -- TRATA LISTA DE FRANQUIA DA COBERTURA
                  IF l_tab_val_franq.COUNT = trn.CERO THEN
                    --
                    l_node_val_franq := DBMS_XMLDOM.appendchild(l_node_col_cob_cas, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valFranquia')));
                   --
                 ELSE
                    --
                    FOR val_franq_index IN l_tab_val_franq.FIRST..l_tab_val_franq.LAST
                    LOOP
                       --
                       l_node_val_franq := DBMS_XMLDOM.appendchild(l_node_col_cob_cas, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valFranquia')));
                       --
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_val_franq, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'codCampo')));
                       l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_franq(val_franq_index).COD_CAMPO );
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                       --
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_val_franq, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valCampo')));
                       l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_franq(val_franq_index).VAL_CAMPO );
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                       --
                    END LOOP;
                    --
                 END IF;
                 --
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_cob_cas, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valPremioCasco')));
                 l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_cob(cob_index).VAL_PREMIO );
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                 --
              END LOOP;
              --
           END IF;
           --
           l_tab_cob := rec_tab_det_cob();
           --
           -- BUSCA TODAS AS COBERTURAS PARAMETRIZADAS PARA O COD_RAMO QUE NAO TENHA SIDO CALCULADA, NAO SEJA DE CASCO E NAO ESTEJA NO NOVO PACOTE
           FOR cob IN c_cob_bloqueadas( l_rec_lista_pac.COD_CIA,
                                        l_rec_lista_pac.COD_RAMO,
                                        l_rec_lista_pac.NUM_COTIZACION,
                                        trn.UNO,
                                        l_rec_lista_pac.VAL_CLAVE_FORMULA,
                                        l_rec_lista_pac.FEC_VALIDEZ_TARIFA)
           LOOP
              --
              l_detalhe_cobertura := fp_bus_det_cob_endosso( l_rec_lista_pac.COD_CIA,
                                                             l_rec_lista_pac.COD_RAMO,
                                                             l_rec_lista_pac.NUM_COTIZACION,
                                                             trn.UNO,
                                                             cob.cod_cob,
                                                             l_rec_lista_pac.VAL_CLAVE_FORMULA,
                                                             l_rec_lista_pac.FEC_VALIDEZ_TARIFA,
                                                             g_k_cod_cons_cob_bloqueada);
             --
             l_tab_cob.EXTEND(1);
             l_tab_cob(l_tab_cob.LAST) := l_detalhe_cobertura;
             --
           END LOOP;
           --
           -- TRATA INFORMACEOS DAS COBERTURAS BLOQUEADAS
           IF l_tab_cob.EXISTS(1) THEN
              --
              FOR cob_index IN l_tab_cob.FIRST..l_tab_cob.LAST
              LOOP
                 --
                 mx('l_tab_cob',l_tab_cob(cob_index).COD_COB);
                 --
                 l_node_col_cob := DBMS_XMLDOM.appendchild(l_node_val_cobs_bloq, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colCoberturas')));
                 --
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'codCobertura')));
                 l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_cob(cob_index).COD_COB );
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                 --
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'nomCobertura')));
                 l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_cob(cob_index).NOM_COB );
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                 --
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'mcaSeleccionCob')));
                 l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_cob(cob_index).MCA_SELEC_COB );
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                 --
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'mcaModificaCapital')));
                 l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_cob(cob_index).MCA_MODIF_CAP );
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                 --
                 l_tab_val_lim_inde := l_tab_cob(cob_index).TAB_VAL_LIM_INDE;
                 --
                 -- TRATA INFORMACOES DO LIMITE DE INDENIZACAO
                 IF l_tab_val_lim_inde.COUNT = trn.CERO THEN
                    --
                    l_node_lim_max_inde := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valLimiteMaxIndenizacao')));
                    --
                 ELSE
                    --
                    FOR inde_index IN l_tab_val_lim_inde.FIRST..l_tab_val_lim_inde.LAST
                    LOOP
                       --
                       l_node_lim_max_inde := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valLimiteMaxIndenizacao')));
                       --
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_lim_max_inde, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'codCampo')));
                       l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_lim_inde(inde_index).COD_CAMPO );
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                       --
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_lim_max_inde, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valCampo')));
                       l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_lim_inde(inde_index).VAL_CAMPO );
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                       --
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_lim_max_inde, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'mcaValDefecto')));
                       l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_lim_inde(inde_index).MCA_VAL_DEFEC );
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                       --
                    END LOOP;
                    --
                 END IF;
                 --
                 l_tab_atri_lista := l_tab_cob(cob_index).TAB_ATRI_LISTA;
                 --
                 l_node_col_atri_lis := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colAtributosLista')));
                 --
                 -- TRATA LISTA DE ATRIBUTOS DA LISTA DA COBERTURA (DV) - LISTA DE LISTA
                 IF l_tab_atri_lista.COUNT = trn.CERO THEN
                    --
                    mx('-',                                               'TRATA INFORMACEOS DAS COBERTURAS BLOQUEADAS');
                    mx('-TRATA LISTA DE ATRIBUTOS DA LISTA DA COBERTURA', 'NAO HA DADOS NA LISTA');
                    --
                 ELSE
                    --
                    FOR atri_lis_index IN l_tab_atri_lista.FIRST..l_tab_atri_lista.LAST
                    LOOP
                       --
                       l_tab_atri_cob := l_tab_atri_lista(atri_lis_index);
                       --
                       FOR atri_cob_index IN l_tab_atri_cob.FIRST..l_tab_atri_cob.LAST
                       LOOP
                          --
                          l_node_tip_atri_cob := DBMS_XMLDOM.appendchild(l_node_col_atri_lis, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'tipAtributoCob')));
                          --
                          l_node_valor := DBMS_XMLDOM.appendchild(l_node_tip_atri_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'codCampo')));
                          l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_atri_cob(atri_cob_index).COD_CAMPO );
                          l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                          --
                          l_node_valor := DBMS_XMLDOM.appendchild(l_node_tip_atri_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valCampo')));
                          l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_atri_cob(atri_cob_index).VAL_CAMPO );
                          l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                          --
                          l_node_valor := DBMS_XMLDOM.appendchild(l_node_tip_atri_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'txtCampo')));
                          l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_atri_cob(atri_cob_index).TXT_CAMPO );
                          l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                          --
                          l_node_valor := DBMS_XMLDOM.appendchild(l_node_tip_atri_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'mcaSeleccionAtributo')));
                          l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_atri_cob(atri_cob_index).MCA_SELEC );
                          l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                          --
                       END LOOP;
                       --
                    END LOOP;
                    --
                 END IF;
                 --
                 l_tab_val_franq := l_tab_cob(cob_index).TAB_VAL_FRANQ;
                 --
                 -- TRATA LISTA DE FRANQUIA DA COBERTURA
                 IF l_tab_val_franq.COUNT = trn.CERO THEN
                    --
                    l_node_val_franq := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valFranquia')));
                    --
                 ELSE
                    --
                    FOR val_franq_index IN l_tab_val_franq.FIRST..l_tab_val_franq.LAST
                    LOOP
                       --
                       l_node_val_franq := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valFranquia')));
                       --
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_val_franq, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'codCampo')));
                       l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_franq(val_franq_index).COD_CAMPO );
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                       --
                       IF l_tab_val_franq(val_franq_index).TXT_CAMPO IS NOT NULL THEN
                          --
                          l_node_valor := DBMS_XMLDOM.appendchild(l_node_val_franq, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'txtCampo')));
                          l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_franq(val_franq_index).TXT_CAMPO );
                          l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                          --
                       END IF;
                       --
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_val_franq, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valCampo')));
                       l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_franq(val_franq_index).VAL_CAMPO );
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                       --
                    END LOOP;
                    --
                 END IF;
                 --
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valPremio')));
                 l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_cob(cob_index).VAL_PREMIO );
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                 --
              END LOOP;
              --
              ELSE
                --
                 l_node_col_cob := DBMS_XMLDOM.appendchild(l_node_val_cobs_bloq, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colCoberturas')));
                 --
           END IF;
           --
           l_node_val_cobs_adi := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCoberturasAdicionais')));
           --
           l_tab_cob := rec_tab_det_cob();
           --
           -- BUSCA TODAS AS COBERTURAS PARAMETRIZADAS PARA O COD_RAMO QUE NAO TENHA SIDO CALCULADA E NAO SEJA DE CASCO
           FOR cob IN c_cob_adicionais( l_rec_lista_pac.COD_CIA,
                                        l_rec_lista_pac.COD_RAMO,
                                        l_rec_lista_pac.NUM_COTIZACION,
                                        trn.UNO,
                                        l_rec_lista_pac.VAL_CLAVE_FORMULA,
                                        l_rec_lista_pac.FEC_VALIDEZ_TARIFA)
           LOOP
              --
              l_detalhe_cobertura := fp_bus_det_cob_endosso( l_rec_lista_pac.COD_CIA,
                                                             l_rec_lista_pac.COD_RAMO,
                                                             l_rec_lista_pac.NUM_COTIZACION,
                                                             trn.UNO,
                                                             cob.cod_cob,
                                                             l_rec_lista_pac.VAL_CLAVE_FORMULA,
                                                             l_rec_lista_pac.FEC_VALIDEZ_TARIFA,
                                                             g_k_cod_cons_cob_adicional);
             --
             l_tab_cob.EXTEND(1);
             l_tab_cob(l_tab_cob.LAST) := l_detalhe_cobertura;
             --
           END LOOP;
           --
           -- TRATA INFORMACOES DAS COBERTURAS ADICIONAIS
           IF l_tab_cob.EXISTS(1) THEN
              --
              FOR cob_index IN l_tab_cob.FIRST..l_tab_cob.LAST
              LOOP
                 --
                 mx('l_tab_cob',l_tab_cob(cob_index).COD_COB);
                 --
                 l_node_col_cob := DBMS_XMLDOM.appendchild(l_node_val_cobs_adi, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colCoberturas')));
                 --
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'codCobertura')));
                 l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_cob(cob_index).COD_COB );
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                 --
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'nomCobertura')));
                 l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_cob(cob_index).NOM_COB );
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                 --
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'mcaSeleccionCob')));
                 l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_cob(cob_index).MCA_SELEC_COB );
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                 --
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'mcaModificaCapital')));
                 l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_cob(cob_index).MCA_MODIF_CAP );
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                 --
                 l_tab_val_lim_inde := l_tab_cob(cob_index).TAB_VAL_LIM_INDE;
                 --
                 -- TRATA INFORMACOES DO LIMITE DE INDENIZACAO
                 IF l_tab_val_lim_inde.COUNT = trn.CERO THEN
                    --
                    l_node_lim_max_inde := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valLimiteMaxIndenizacao')));
                    --
                 ELSE
                    --
                    FOR inde_index IN l_tab_val_lim_inde.FIRST..l_tab_val_lim_inde.LAST
                    LOOP
                       --
                       l_node_lim_max_inde := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valLimiteMaxIndenizacao')));
                       --
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_lim_max_inde, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'codCampo')));
                       l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_lim_inde(inde_index).COD_CAMPO );
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                       --
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_lim_max_inde, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valCampo')));
                       l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_lim_inde(inde_index).VAL_CAMPO );
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                       --
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_lim_max_inde, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'mcaValDefecto')));
                       l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_lim_inde(inde_index).MCA_VAL_DEFEC );
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                       --
                    END LOOP;
                    --
                 END IF;
                 --
                 l_tab_atri_lista := l_tab_cob(cob_index).TAB_ATRI_LISTA;
                 --
                 l_node_col_atri_lis := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colAtributosLista')));
                 --
                 -- TRATA LISTA DE ATRIBUTOS DA LISTA DA COBERTURA (DV) - LISTA DE LISTA
                 IF l_tab_atri_lista.COUNT = trn.CERO THEN
                    --
                    mx('-',                                               'TRATA INFORMACEOS DAS COBERTURAS ADICIONAIS');
                    mx('-TRATA LISTA DE ATRIBUTOS DA LISTA DA COBERTURA', 'NAO HA DADOS NA LISTA');
                    --
                 ELSE
                    --
                    FOR atri_lis_index IN l_tab_atri_lista.FIRST..l_tab_atri_lista.LAST
                    LOOP
                       --
                       l_tab_atri_cob := l_tab_atri_lista(atri_lis_index);
                       --
                       FOR atri_cob_index IN l_tab_atri_cob.FIRST..l_tab_atri_cob.LAST
                       LOOP
                          --
                          l_node_tip_atri_cob := DBMS_XMLDOM.appendchild(l_node_col_atri_lis, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'tipAtributoCob')));
                          --
                          l_node_valor := DBMS_XMLDOM.appendchild(l_node_tip_atri_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'codCampo')));
                          l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_atri_cob(atri_cob_index).COD_CAMPO );
                          l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                          --
                          l_node_valor := DBMS_XMLDOM.appendchild(l_node_tip_atri_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valCampo')));
                          l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_atri_cob(atri_cob_index).VAL_CAMPO );
                          l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                          --
                          l_node_valor := DBMS_XMLDOM.appendchild(l_node_tip_atri_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'txtCampo')));
                          l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_atri_cob(atri_cob_index).TXT_CAMPO );
                          l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                          --
                          l_node_valor := DBMS_XMLDOM.appendchild(l_node_tip_atri_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'mcaSeleccionAtributo')));
                          l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_atri_cob(atri_cob_index).MCA_SELEC );
                          l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                          --
                       END LOOP;
                       --
                    END LOOP;
                    --
                 END IF;
                 --
                 l_tab_val_franq := l_tab_cob(cob_index).TAB_VAL_FRANQ;
                 --
                 -- TRATA LISTA DE FRANQUIA DA COBERTURA
                 IF l_tab_val_franq.COUNT = trn.CERO THEN
                    --
                    l_node_val_franq := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valFranquia')));
                    --
                 ELSE
                    --
                    FOR val_franq_index IN l_tab_val_franq.FIRST..l_tab_val_franq.LAST
                    LOOP
                       --
                       l_node_val_franq := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valFranquia')));
                       --
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_val_franq, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'codCampo')));
                       l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_franq(val_franq_index).COD_CAMPO );
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                       --
                       IF l_tab_val_franq(val_franq_index).TXT_CAMPO IS NOT NULL THEN
                          --
                          l_node_valor := DBMS_XMLDOM.appendchild(l_node_val_franq, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'txtCampo')));
                          l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_franq(val_franq_index).TXT_CAMPO );
                          l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                          --
                       END IF;
                       --
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_val_franq, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valCampo')));
                       l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_franq(val_franq_index).VAL_CAMPO );
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                       --
                    END LOOP;
                    --
                 END IF;
                 --
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valPremio')));
                 l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_cob(cob_index).VAL_PREMIO );
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                 --
              END LOOP;
              --
              ELSE
                --
                 l_node_col_cob := DBMS_XMLDOM.appendchild(l_node_val_cobs_adi, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colCoberturas')));
                 --
           END IF;
           --
        END LOOP;
        --
        l_xml_lista := DBMS_XMLDOM.getxmltype(l_document);
        DBMS_XMLDOM.freedocument(l_document);
        p_clob_lista := l_xml_lista.getclobval;
        --
        mx('F', 'p_gerar_xml_cobertura_endosso');
     --
    END p_gerar_xml_cobertura_endosso;
  --
  --
  -- v2.87
  /* ----------------------------------------------------
  || Function f_trata_nom_pacote
  */ ----------------------------------------------------
  --
  FUNCTION f_trata_nom_pacote(p_nom_pacote g2109040_vcr.val_clave_formula%TYPE)
  RETURN g2109040_vcr.val_clave_formula%TYPE AS
    --
    l_nom_pacote g2109040_vcr.val_clave_formula%TYPE := trn.NULO;
    --
    PROCEDURE pi_valida_msg(p_cod_mensage_old g1010020.cod_mensaje%TYPE
                           ,p_cod_mensage_new g1010020.cod_mensaje%TYPE) IS
      --
    BEGIN
      --
      l_nom_pacote := REPLACE(l_nom_pacote
                             ,ss_k_mensaje.f_solo_texto_idioma(p_cod_mensage_old
                                                              ,trn_k_global.cod_idioma)
                             ,ss_k_mensaje.f_solo_texto_idioma(p_cod_mensage_new
                                                              ,trn_k_global.cod_idioma));
      --
    END pi_valida_msg;
    --
  BEGIN
    --
    mx('I', 'f_trata_nom_pacote');
    --
    l_nom_pacote := SUBSTR(p_nom_pacote
                          ,trn.UNO
                          ,INSTR(p_nom_pacote
                                ,'-') - trn.UNO);
    --
    pi_valida_msg(20099370
                 ,20099371);
    --
    pi_valida_msg(20099372
                 ,20099373);
    --
    pi_valida_msg(20099374
                 ,20099375);
    --
    RETURN l_nom_pacote;
    --
    mx('F', 'f_trata_nom_pacote');
    --
  EXCEPTION
    WHEN OTHERS THEN
      --
      mx('F', 'f_trata_nom_pacote - Exception');
      --
      RETURN p_nom_pacote;
      --
  END f_trata_nom_pacote;
  --
  -- I 2.50
  PROCEDURE pp_ws_detalhe_pacote_prefere(p_cod_cia          IN G9999992.cod_cia%TYPE,
                                         p_cod_ramo         IN G9999992.cod_ramo%TYPE,
                                         p_cod_tarifa       IN G9999992.cod_tarifa%TYPE,
                                         p_cod_agt          IN G9999992.cod_agt%TYPE,
                                         p_num_cotizacion   IN C2009030_vcr.num_cotizacion%TYPE,
                                         p_num_poliza_grupo IN A2000500.num_poliza_grupo%TYPE,
                                         p_num_contrato     IN A2000500.num_contrato%TYPE,
                                         p_num_subcontrato  IN A2000500.num_contrato%TYPE,
                                         p_num_paso         IN G9999992.num_paso%TYPE,
                                         p_tip_mvto_batch   IN A2000500.tip_mvto_batch%TYPE,
                                         p_xml_in           IN CLOB,
                                         p_xml              OUT CLOB) IS
    --
    l_retorno_pacote      ref_cursor;
    l_retorno_coberturas  ref_cursor;
    l_retorno_cascos      ref_cursor;
    l_retorno_modalidades ref_cursor;
    l_retorno_franquias   ref_cursor;
    --
    l_num_cotizacion c2009030_vcr.num_cotizacion%TYPE;
    --
    l_num_simulacion c2000000.nom_columna%TYPE := NULL;
    --
    l_num_spto      A2000030.num_spto%TYPE;
    l_cod_modalidad G9999992.cod_tarifa%TYPE;
    --
    l_eh_3_pacotes BOOLEAN;
    l_tip_produto  g2109142_vcr.tip_produto %TYPE;
    --
    l_cod_rol_bo         c2000000.val_columna%TYPE := trn.NULO;
    l_num_simulacion_tmp c2000000.nom_columna%TYPE := trn.NULO;
    l_nom_prefer         g2109040_vcr.val_clave_formula%TYPE;
    l_nom_prefer_tmp     g2109040_vcr.val_clave_formula %TYPE; -- 2.57
    l_cod_tarifa         G9999992.cod_tarifa%TYPE;
    l_count_9140         NUMBER;
    l_reg_cob            c2009040_vcr%ROWTYPE;
    l_reg_des            c2109170_vcr%ROWTYPE;
    l_cod_modalid        g2109040_vcr.cod_modalidad %TYPE;
    l_cob_201_cnt        VARCHAR2(1) := 'N'; -- 2.62
    l_cob_202_cnt        VARCHAR2(1) := 'N'; -- 2.62
    l_cob_203_cnt        VARCHAR2(1) := 'N'; -- 2.62
    l_cob_218_cnt        VARCHAR2(1) := 'N'; -- 2.62
    --
  l_cod_plan_pago         a1009215_vcr.cod_plan_pago %TYPE; --4.37
    l_cod_forma_pago        a1009215_vcr.cod_forma_pago %TYPE; --4.37
    l_pct_agt_npr           g2100830_vcr.pct_agt_npr %TYPE;  -- 4.37
  --
  BEGIN
    --
    mx('I', 'pp_ws_detalhe_pacote_prefere');
    --
    g_tip_mvto_batch := NVL(p_tip_mvto_batch, g_k_tip_mvto_batch_cotacao);
    --
    trn_k_global.asigna('cod_cia', p_cod_cia);
    trn_k_global.asigna('cod_ramo', p_cod_ramo);

    trn_k_global.asigna('num_paso', p_num_paso);
    trn_k_global.asigna('tip_mvto_batch', g_tip_mvto_batch);
    trn_k_global.asigna('cod_agt', p_cod_agt);
    trn_k_global.asigna('tres_pacotes', 0);
    trn_k_global.asigna('NUM_COTIZACION',p_num_cotizacion ) ; -- 2.54
    --
    l_nom_prefer := ss_k_mensaje.f_solo_texto_idioma(p_cod_mensaje => 20099363, -- 2.51
                                                     p_cod_idioma  => trn_k_global.cod_idioma) || '-' ||
                    p_cod_agt;

    l_cod_tarifa := CASE -- I 2.84
                      WHEN p_cod_tarifa = 224 OR p_cod_tarifa = 215 THEN
                       215
                      WHEN p_cod_tarifa = 226 OR p_cod_tarifa = 207 THEN
                       207
                      WHEN p_cod_tarifa = 228 OR p_cod_tarifa = 213 THEN
                       213
                      WHEN p_cod_tarifa = 229 OR p_cod_tarifa = 214 THEN
                       214 -- F 2.84
                    END;
    trn_k_global.asigna('cod_tarifa', l_cod_tarifa);

    l_tip_produto := CASE
                       WHEN l_cod_tarifa = 215 then
                        224
                       WHEN l_cod_tarifa = 207 THEN
                        226
                       WHEN l_cod_tarifa = 213 THEN
                        228
                       WHEN l_cod_tarifa = 214 THEN
                        229
                     END;

    SELECT distinct cod_modalidad
      INTO l_cod_modalid
      FROM g2109040_vcr
     WHERE cod_cia = p_cod_cia
       AND cod_ramo = p_cod_ramo
       AND cod_agt = '99999'
       AND cod_nivel1 = dc.COD_NIVEL1_GEN
       AND cod_nivel2 = dc.COD_NIVEL2_GEN
       AND cod_nivel3 = dc.COD_NIVEL3_GEN
       AND cod_canal1 = dc.COD_CANAL1_GEN
       AND cod_canal2 = dc.COD_CANAL2_GEN
       AND cod_canal3 = dc.COD_CANAL3_GEN
       AND num_poliza_grupo = em.NUM_POLIZA_GRUPO_GEN
       AND num_contrato = em.NUM_CONTRATO_GEN
       AND num_subcontrato = em.NUM_SUBCONTRATO_GEN
       AND num_poliza_cliente = em.NUM_POLIZA_GEN
       AND num_poliza = em.NUM_POLIZA_GEN
       AND cod_tarifa = l_cod_tarifa
       AND tip_pacote = 98;

    SELECT count(1)
      INTO l_count_9140
      FROM g2109141_vcr
     WHERE COD_CIA = p_cod_cia
       AND COD_RAMO = p_cod_ramo
       AND COD_AGT = p_cod_agt
       AND COD_NIVEL1 = dc.COD_NIVEL1_GEN
       AND COD_NIVEL2 = dc.COD_NIVEL2_GEN
       AND COD_NIVEL3 = dc.COD_NIVEL3_GEN
       AND COD_CANAL1 = dc.COD_CANAL1_GEN
       AND COD_CANAL2 = dc.COD_CANAL2_GEN
       AND COD_CANAL3 = dc.COD_CANAL3_GEN
       AND NUM_POLIZA_GRUPO = em.NUM_POLIZA_GRUPO_GEN
       AND NUM_CONTRATO = em.NUM_CONTRATO_GEN
       AND NUM_SUBCONTRATO = em.NUM_SUBCONTRATO_GEN
       AND NUM_POLIZA_CLIENTE = em.NUM_POLIZA_GEN
       AND NUM_POLIZA = em.NUM_POLIZA_GEN
       AND TIP_SEGMENTO = '01'
       AND TIP_PRODUTO = l_tip_produto
       AND COD_TARIFA = l_cod_tarifa
       AND COD_MODALIDAD = l_cod_modalid
       AND VAL_CLAVE_FORMULA in (l_nom_prefer,'Preferencial-'||p_cod_agt)
       AND TIP_PACOTE = 2;

    IF l_count_9140 > 0 THEN
      -- i 2.54
      BEGIN
      SELECT DISTINCT val_clave_formula
        INTO l_nom_prefer_tmp
        FROM g2109141_vcr
       WHERE cod_cia = p_cod_cia
         AND cod_ramo = p_cod_ramo
         AND cod_agt = p_cod_agt
         AND cod_nivel1 = dc.COD_NIVEL1_GEN
         AND cod_nivel2 = dc.COD_NIVEL2_GEN
         AND cod_nivel3 = dc.COD_NIVEL3_GEN
         AND cod_canal1 = dc.COD_CANAL1_GEN
         AND cod_canal2 = dc.COD_CANAL2_GEN
         AND cod_canal3 = dc.COD_CANAL3_GEN
         AND num_poliza_grupo = em.NUM_POLIZA_GRUPO_GEN
         AND num_contrato = em.NUM_CONTRATO_GEN
         AND num_subcontrato = em.NUM_SUBCONTRATO_GEN
         AND num_poliza_cliente = em.NUM_POLIZA_GEN
         AND num_poliza = em.NUM_POLIZA_GEN
         AND cod_tarifa = l_cod_tarifa
         AND tip_pacote = 2   ;
         l_nom_prefer := l_nom_prefer_tmp;
      EXCEPTION
        WHEN OTHERS THEN
          NULL;
      END;
      --I 2.54
      BEGIN
        DELETE
          FROM c2009040_vcr
         WHERE cod_cia = p_cod_cia
           AND cod_ramo = p_cod_ramo
           AND num_cotizacion = p_num_cotizacion
           AND num_simulacion = 999;
      EXCEPTION
        WHEN OTHERS THEN
      --
          NULL;
          --
      END ;
      BEGIN
        DELETE
          FROM c2109170_vcr
         WHERE cod_cia = p_cod_cia
           AND cod_ramo = p_cod_ramo
           AND num_cotizacion = p_num_cotizacion
           AND num_simulacion = 999;
      EXCEPTION
        WHEN OTHERS THEN
          --
          NULL;
          --
      END ;
      --F 2.54
      FOR rec IN (SELECT *
                    FROM g2109040_vcr
                   WHERE cod_cia = p_cod_cia
                     AND cod_ramo = p_cod_ramo
                     AND cod_agt = p_cod_agt
                     AND cod_nivel1 = dc.COD_NIVEL1_GEN
                     AND cod_nivel2 = dc.COD_NIVEL2_GEN
                     AND cod_nivel3 = dc.COD_NIVEL3_GEN
                     AND cod_canal1 = dc.COD_CANAL1_GEN
                     AND cod_canal2 = dc.COD_CANAL2_GEN
                     AND cod_canal3 = dc.COD_CANAL3_GEN
                     AND num_poliza_grupo = em.NUM_POLIZA_GRUPO_GEN
                     AND num_contrato = em.NUM_CONTRATO_GEN
                     AND num_subcontrato = em.NUM_SUBCONTRATO_GEN
                     AND num_poliza_cliente = em.NUM_POLIZA_GEN
                     AND num_poliza = em.NUM_POLIZA_GEN
                     AND cod_tarifa = l_cod_tarifa
                     AND val_clave_formula = l_nom_prefer
                     AND mca_contrata = trn.SI
                     AND tip_pacote = 2) LOOP
        IF rec.mca_contrata = trn.SI THEN  -- 2.61
        l_reg_cob.cod_cia            := p_cod_cia;
        l_reg_cob.cod_ramo           := p_cod_ramo;
        l_reg_cob.num_cotizacion     := p_num_cotizacion;
        l_reg_cob.num_simulacion     := 999;
        l_reg_cob.num_riesgo         := trn.UNO;
        l_reg_cob.num_secu           := trn.CERO;
        l_reg_cob.cod_cob            := rec.cod_cob;
        l_reg_cob.nom_cob            := trn.CERO;
        l_reg_cob.cod_franquicia     := CASE rec.cod_cob WHEN 201 THEN 998 ELSE trn.nulo END;
        l_reg_cob.pct_franquicia     := trn.CERO;
        l_reg_cob.val_franquicia_min := CASE rec.cod_cob WHEN 201 THEN 998 ELSE trn.nulo END;
        l_reg_cob.val_franquicia_max := trn.CERO;
        l_reg_cob.suma_aseg          := rec.suma_aseg;
        l_reg_cob.cod_secc_reas      := trn.CERO;
        l_reg_cob.fec_actu           := TRUNC(SYSDATE);
        l_reg_cob.cod_usr            := g_cod_usr_automatico;
        --
        em_k_c2009040_vcr.p_inserta(p_reg => l_reg_cob);

        l_reg_des.cod_cia        := p_cod_cia;
        l_reg_des.cod_ramo       := p_cod_ramo;
        l_reg_des.num_cotizacion := p_num_cotizacion;
        l_reg_des.num_simulacion := 999;
        l_reg_des.num_riesgo     := trn.UNO;
        l_reg_des.cod_cob        := rec.cod_cob;
        l_reg_des.num_secu       := trn.CERO;
        l_reg_des.cod_desglose   := trn.UNO;
        l_reg_des.nom_desglose   := ' ';
        l_reg_des.imp_spto       := trn.CERO;
        l_reg_des.imp_anual      := trn.CERO;
        l_reg_des.fec_actu       := TRUNC(SYSDATE);
        l_reg_des.cod_usr        := g_cod_usr_automatico;
        --
        em_k_c2109170_vcr.p_inserta(p_reg => l_reg_des);
        END IF ; -- 2.61
        --
      END LOOP;
      -- grava os dvs
      --i 2.54
      for r in (SELECT cod_campo, val_defecto
              FROM g2109010_vcr a
             WHERE a.cod_cia = p_cod_cia
               AND a.cod_ramo = p_cod_ramo
               AND a.cod_modalidad IN (l_cod_modalid)
               AND a.tip_produto IN
                   (l_tip_produto)
               AND a.tip_segmento IN
                   ('01',
                    ea_k_231_utils.g_k_tip_segmentacion_outros)
               AND a.cod_nivel1 IN             (dc.COD_NIVEL1_GEN)
               AND a.cod_nivel2 IN             ( dc.COD_NIVEL2_GEN)
               AND a.cod_nivel3 IN             ( dc.COD_NIVEL3_GEN)
               AND a.cod_canal1 IN             ( dc.COD_CANAL1_GEN)
               AND a.cod_canal2 IN             ( dc.COD_CANAL2_GEN)
               AND a.cod_canal3 IN             ( dc.COD_CANAL3_GEN)
               AND a.cod_agt IN             (p_cod_agt,em.NUM_CONTRATO_GEN)
               AND a.num_poliza_grupo IN
                   (              em.NUM_POLIZA_GRUPO_GEN)
               AND a.num_contrato IN (                                em.NUM_CONTRATO_GEN)
               AND a.num_subcontrato IN
                   (
                    em.NUM_SUBCONTRATO_GEN)
               AND a.num_poliza_cliente IN
                   (
                    em.NUM_POLIZA_GEN)
               AND a.num_poliza IN
                   ( em.NUM_POLIZA_GEN)
               AND a.val_clave_formula =l_nom_prefer
               AND a.mca_baja = 'N'
             ORDER BY cod_modalidad --Freddy
                     ,
                      tip_produto,
                      num_poliza,
                      CASE num_poliza_cliente
                        WHEN '9999999999999' THEN
                         NULL
                        ELSE
                         num_poliza_cliente
                      END NULLS LAST,
                      num_subcontrato,
                      num_contrato,
                      num_poliza_grupo,
                      cod_agt,
                      cod_nivel3,
                      cod_nivel2,
                      cod_nivel1,
                      tip_segmento,
                      fec_validez DESC) LOOP
      --
      pp_inserta_c2000000( p_nom_tabla   => g_k_tabla_dv ,
                           p_nom_columna => r.cod_campo,
                           p_val_columna =>r.val_defecto);


      pp_inserta_c2000000(p_nom_tabla   => g_k_tabla_dv,
                          p_nom_columna => r.cod_campo||'#999',
                          p_val_columna => r.val_defecto);  -- 2.61

      END loop;
      --f 2.54
      --I 2.62
      IF  l_cob_201_cnt = 'N' AND
          l_cob_202_cnt = 'S' AND
          l_cob_203_cnt = 'S' AND
          l_cob_218_cnt = 'N' THEN
        --
        pp_inserta_c2000000(p_nom_tabla   => g_k_tabla_dv,
                            p_nom_columna => 'TIP_FRANQUIA',
                            p_val_columna => '11'); -- 2.62
        pp_inserta_c2000000(p_nom_tabla   => g_k_tabla_dv,
                            p_nom_columna => 'TIP_FRANQUIA#999',
                            p_val_columna => '11'); -- 2.62

        trn_k_global.asigna('MCA_GERA_FRANQUIA_DETALHE', '1'); --2.63
        --
      ELSE
        --
        trn_k_global.asigna('MCA_GERA_FRANQUIA_DETALHE', '0');--2.63
        --
      END IF;
      --F 2.62
      trn_k_global.asigna('MCA_PREFE_PCT','1' );
            -- I 2.58
      l_eh_3_pacotes := ea_k_g2109142_vcr.f_eh_3_pacotes(p_cod_cia,
                                                         p_cod_ramo,
                                                         p_cod_agt,
                                                         l_tip_produto);
      -- I 3.47
      IF l_eh_3_pacotes THEN
       --
       pp_asigna('tres_pacotes',1);
       --
      ELSE
       --
       pp_asigna('tres_pacotes',0);
       --
      END IF;
      -- F 3.47
      IF l_eh_3_pacotes  THEN
        --
        trn_k_global.asigna('tres_pacotes', 1);
        --
        pp_inserta_c2000000(p_nom_tabla   => ea_k_231_coti.g_k_tabla_simulacion,
                            p_nom_columna => 'VAL_CLAVE_FORMULA#999',
                            p_val_columna => l_nom_prefer);
        pp_inserta_c2000000(p_nom_tabla   => ea_k_231_coti.g_k_tabla_simulacion,
                            p_nom_columna => 'COD_TARIFA#999',
                            p_val_columna => l_cod_tarifa);
        pp_inserta_c2000000(p_nom_tabla   => ea_k_231_coti.g_k_tabla_simulacion,
                            p_nom_columna => 'TIP_PACOTE#999',
                            p_val_columna => '2');
        --
      ELSE
        --
        trn_k_global.asigna('tres_pacotes', 0);
        --
      END IF;
      -- F 2.58
      --
    ELSE
      --I 2.54
      l_nom_prefer  := CASE
                       WHEN l_tip_produto = 224 then
                        'Generico-99999'
                       WHEN l_tip_produto = 226 THEN
                        'Generico-99998'
                       WHEN l_tip_produto = 228 THEN
                        'Generico-99997'
                       WHEN l_tip_produto = 229 THEN
                        'Generico-99996'
                     END;
                     --
      l_cod_plan_pago  := '2301'; --4.37
      l_cod_forma_pago := '1'; --4.37
      l_pct_agt_npr    := '10'; --4.37
      --
      BEGIN
        DELETE
          FROM c2009040_vcr
         WHERE cod_cia = p_cod_cia
           AND cod_ramo = p_cod_ramo
           AND num_cotizacion = p_num_cotizacion
           AND num_simulacion = 999;
      EXCEPTION
        WHEN OTHERS THEN
      --
          NULL;
          --
      END ;
      BEGIN
        DELETE
          FROM c2109170_vcr
         WHERE cod_cia = p_cod_cia
           AND cod_ramo = p_cod_ramo
           AND num_cotizacion = p_num_cotizacion
           AND num_simulacion = 999;
      EXCEPTION
        WHEN OTHERS THEN
          --
          NULL;
          --
      END ;
      --F 2.54
      FOR rec IN (SELECT *
                    FROM g2109040_vcr
                   WHERE cod_cia = p_cod_cia
                     AND cod_ramo = p_cod_ramo
                     AND cod_agt = 99999
                     AND cod_nivel1 = dc.COD_NIVEL1_GEN
                     AND cod_nivel2 = dc.COD_NIVEL2_GEN
                     AND cod_nivel3 = dc.COD_NIVEL3_GEN
                     AND cod_canal1 = dc.COD_CANAL1_GEN
                     AND cod_canal2 = dc.COD_CANAL2_GEN
                     AND cod_canal3 = dc.COD_CANAL3_GEN
                     AND num_poliza_grupo = em.NUM_POLIZA_GRUPO_GEN
                     AND num_contrato = em.NUM_CONTRATO_GEN
                     AND num_subcontrato = em.NUM_SUBCONTRATO_GEN
                     AND num_poliza_cliente = em.NUM_POLIZA_GEN
                     AND num_poliza = em.NUM_POLIZA_GEN
                     AND cod_tarifa = l_cod_tarifa
                     AND val_clave_formula = l_nom_prefer
                     AND tip_pacote = 98
                     AND cod_cob IN (201,202,203,218,108,139,206,254,1304)) LOOP  --2.58 --2.68

    -- I 2.68
        IF rec.cod_cob = 201 THEN
          l_cob_201_cnt := rec.mca_contrata;
        ELSIF rec.cod_cob = 202 THEN
          l_cob_202_cnt := rec.mca_contrata;
        ELSIF rec.cod_cob = 203 THEN
          l_cob_203_cnt := rec.mca_contrata;
        ELSIF rec.cod_cob = 218 THEN
          l_cob_218_cnt := rec.mca_contrata;
        END IF;
    -- F 2.68
        l_reg_cob.cod_cia            := p_cod_cia;
        l_reg_cob.cod_ramo           := p_cod_ramo;
        l_reg_cob.num_cotizacion     := p_num_cotizacion;
        l_reg_cob.num_simulacion     := 999;
        l_reg_cob.num_riesgo         := trn.UNO;
        l_reg_cob.num_secu           := trn.UNO;
        l_reg_cob.cod_cob            := rec.cod_cob;
        l_reg_cob.nom_cob            := trn.CERO;
        l_reg_cob.cod_franquicia     := CASE rec.cod_cob WHEN 201 THEN 998 ELSE trn.nulo END;
        l_reg_cob.pct_franquicia     := trn.CERO;
        l_reg_cob.val_franquicia_min := CASE rec.cod_cob WHEN 201 THEN 998 ELSE trn.nulo END;
        l_reg_cob.val_franquicia_max := trn.CERO;
        l_reg_cob.suma_aseg          := trn.CERO;
        l_reg_cob.cod_secc_reas      := trn.CERO;
        l_reg_cob.fec_actu           := TRUNC(SYSDATE);
        l_reg_cob.cod_usr            := g_cod_usr_automatico;
        --
        IF rec.mca_contrata = trn.SI THEN
          --
          em_k_c2009040_vcr.p_inserta(p_reg => l_reg_cob);

          l_reg_des.cod_cia        := p_cod_cia;
          l_reg_des.cod_ramo       := p_cod_ramo;
          l_reg_des.num_cotizacion := p_num_cotizacion;
          l_reg_des.num_simulacion := 999;
          l_reg_des.num_riesgo     := trn.UNO;
          l_reg_des.cod_cob        := rec.cod_cob;
          l_reg_des.num_secu       := trn.CERO;
          l_reg_des.cod_desglose   := trn.UNO;
          l_reg_des.nom_desglose   := ' ';
          l_reg_des.imp_spto       := trn.CERO;
          l_reg_des.imp_anual      := trn.CERO;
          l_reg_des.fec_actu       := TRUNC(SYSDATE);
          l_reg_des.cod_usr        := g_cod_usr_automatico;
          --
          em_k_c2109170_vcr.p_inserta(p_reg => l_reg_des);
          --
        END IF;
      END LOOP;
      --
      pp_inserta_c2000000(p_nom_tabla   => g_k_tabla_dv,
                          p_nom_columna => 'TIP_FRANQUIA',
                          p_val_columna => '11'); -- 2.62
      pp_inserta_c2000000(p_nom_tabla   => g_k_tabla_dv,
                          p_nom_columna => 'TIP_FRANQUIA#999',
                          p_val_columna => '11'); -- 2.62

    trn_k_global.asigna('MCA_PREFE_PCT','0' );
      -- I 2.63
      IF  l_cob_201_cnt = 'N' AND
          l_cob_202_cnt = 'S' AND
          l_cob_203_cnt = 'S' AND
          l_cob_218_cnt = 'N' THEN
        --
        trn_k_global.asigna('MCA_GERA_FRANQUIA_DETALHE', '1');
        --
      ELSE
        --
        trn_k_global.asigna('MCA_GERA_FRANQUIA_DETALHE', '0');
        --
      END IF;
      --F2.63

    END IF;
    --
    g_mca_valida := 'N'; --4.37
    pp_asigna_globales_defecto;
    g_mca_valida := null;
    -- 2.14
    trn_k_global.asigna( 'tip_produto',l_tip_produto ) ; --2.56
    trn_k_global.asigna( em.PREFIJO_DATOS_VARIABLES || 'tip_produto', l_tip_produto);    --2.56
    trn_k_global.asigna( em.PREFIJO_DATOS_VARIABLES || 'cod_modalidad'  ,l_cod_modalid ); --2.56
    trn_k_global.asigna( 'cod_modalidad'  ,l_cod_modalid ); --2.61
    --
    OPEN l_retorno_pacote FOR
      SELECT p_cod_cia AS cod_cia,
             p_cod_ramo AS cod_ramo,
             '9999999999999' AS num_cotizacion,
             999 AS num_simulacao,
             l_cod_modalid AS cod_pacote, --2.56
             l_nom_prefer AS nom_pacote,
             l_cod_tarifa AS cod_tarifa,
             to_char(trunc(sysdate), 'ddmmrrrr') AS fec_validez_tarifa, -- 2.61
             l_nom_prefer AS val_clave_formula,
             '0' AS val_total,
             '0' AS pct_fator_ajuste,
             '0' AS val_veiculo,
             'M' AS tip_merc_deter,
             2 AS tip_pacote,
             l_pct_agt_npr AS pct_agt_npr, --v3.36 4.37
             l_cod_forma_pago AS cod_forma_pago, -- 4.37
             l_cod_plan_pago AS cod_plan_pago --4.37
        FROM DUAL;
    --
    IF NVL(trn_k_global.ref_f_global('MCA_GERA_COTACA'),trn.NO) = trn.NO THEN -- I 4.38
      --
      p_gerar_xml_detalhe_pacote(l_retorno_pacote, p_xml);
      --
    END IF; -- F 4.38
    --
    mx('F', 'pp_ws_detalhe_pacote_prefere');
    --
  END pp_ws_detalhe_pacote_prefere;
  -- F 2.50
       --
    /* ---------------------------------------------------------------- *
    || Devolve um CLOB contendo uma lista de dados XML : p_xml
    */ ----------------------------------------------------------------
    --
    PROCEDURE pp_ws_detalhe_pacote_cobertura(p_cod_cia          IN  G9999992.cod_cia%TYPE,
                                             p_cod_ramo         IN  G9999992.cod_ramo%TYPE,
                                             p_cod_tarifa       IN  G9999992.cod_tarifa%TYPE,
                                             p_cod_agt          IN  G9999992.cod_agt%TYPE,
                                             p_num_cotizacion   IN  C2009030_vcr.num_cotizacion%TYPE,
                                             p_num_poliza_grupo IN  A2000500.num_poliza_grupo%TYPE,
                                             p_num_contrato     IN  A2000500.num_contrato%TYPE,
                                             p_num_subcontrato  IN  A2000500.num_contrato%TYPE,
                                             p_num_paso         IN  G9999992.num_paso%TYPE,
                                             p_tip_mvto_batch   IN  A2000500.tip_mvto_batch%TYPE,
                                             p_xml_in           IN  CLOB,
                                             p_xml              OUT CLOB)
    IS
       --
       l_retorno_pacote           ref_cursor;
       l_retorno_coberturas       ref_cursor;
       l_retorno_cascos           ref_cursor;
       l_retorno_modalidades      ref_cursor;
       l_retorno_franquias        ref_cursor;
       --
    l_num_cotizacion c2009030_vcr.num_cotizacion%TYPE;
    --
    l_num_simulacion c2000000.nom_columna%TYPE := NULL;
    --
    l_num_spto      A2000030.num_spto%TYPE;
    l_cod_modalidad G9999992.cod_tarifa%TYPE;
    --
    l_eh_3_pacotes BOOLEAN; -- 2.14
    l_tip_produto  g2109142_vcr.tip_produto %TYPE; --2.17
    --
    l_cod_rol_bo         c2000000.val_columna%TYPE := trn.NULO; --2.44
    l_num_simulacion_tmp c2000000.nom_columna%TYPE := trn.NULO; -- 2.44
    -- mbaruch RF 11 e 12 v3.70
    /* ----------------------------------------------------------------
    || pi_bkp_coti_clave_formula : restaura todos los valores cambiados
    */ ----------------------------------------------------------------
    PROCEDURE pi_bkp_coti_clave_formula (pi_cod_cia               c2000000.cod_cia       %TYPE,
                                         pi_cod_ramo              c2000000.cod_ramo      %TYPE,
                                         pi_num_coti_riesgo       c2000000.num_cotizacion%TYPE) -- toda definicao do oracle de variaveis a nomes de programa precisa ter no max 30 caracteres
    IS
      --
      PRAGMA AUTONOMOUS_TRANSACTION;
      --
      l_rec_clave_formula     c2000000            %ROWTYPE; -- ROWTYPE tem o valor de uma linha de registro da tabela l_rec_clave_formula.cod_cia|l_rec_clave_formula.cod_ramo|l_rec_clave_formula.num_cotizacion ... ate terminar a tabela
      --
      l_bkp_val_clave_formula c2000000.val_columna%TYPE;
      --
      CURSOR ci_clave_formula_coti (pc_cod_cia               c2000000.cod_cia       %TYPE,
                                    pc_cod_ramo              c2000000.cod_ramo      %TYPE,
                                    pc_num_coti_riesgo       c2000000.num_cotizacion%TYPE,
                                    pc_clave_formula_gen_cat c2000000.val_columna   %TYPE)
      IS
        --
        --
        --NOM_COLUMNA  COD_FILA  VAL_COLUMNA
        --VAL_CLAVE_FORMULA  99999  23111-225-21702-2-D-N-S-01-40-01-01-01/01/2018
        --VAL_CLAVE_FORMULA#1  99999  23111-225-21702-2-D-N-S-01-40-01-01-01/01/2018
        SELECT * -- selecionar tudo num rec?
          FROM c2000000
         WHERE cod_cia        = pc_cod_cia
           AND cod_ramo       = pc_cod_ramo
           AND nom_columna    IN ('VAL_CLAVE_FORMULA'  ,
                                  'VAL_CLAVE_FORMULA#1') -- definir constantes
           AND num_cotizacion = pc_num_coti_riesgo;
        --
      CURSOR ci_clave_formula_coti_bkp (pc_cod_cia               c2000000.cod_cia       %TYPE,
                                        pc_cod_ramo              c2000000.cod_ramo      %TYPE,
                                        pc_num_coti_riesgo       c2000000.num_cotizacion%TYPE)
      IS
        --
        SELECT * -- selecionar tudo num rec?
          FROM c2000000
         WHERE cod_cia        = pc_cod_cia
           AND cod_ramo       = pc_cod_ramo
           AND nom_columna    IN ('VAL_CLV_FRML_BKP'  ,
                                  'VAL_CLV_FRML#1_BKP') -- definir constantes
           AND num_cotizacion = pc_num_coti_riesgo;
      --
    BEGIN
      --
      mx('I', 'pi_bkp_coti_clave_formula');
      --
      mx('pi_cod_cia', pi_cod_cia              );
      mx('pi_cod_ramo', pi_cod_ramo             );
      mx('pi_num_coti_riesgo', pi_num_coti_riesgo      );
      --mx('pi_clave_formula_gen_cat', pi_clave_formula_gen_cat);
      --
      IF ci_clave_formula_coti_bkp%ISOPEN -- todo cursor tem alguns atributos e metodos para validar algumas coisas %ISOPEN %NOTFOUND
      THEN
        CLOSE ci_clave_formula_coti_bkp;
      END IF;
      --
      OPEN ci_clave_formula_coti_bkp (pi_cod_cia        ,
                                      pi_cod_ramo       ,
                                      pi_num_coti_riesgo);
      LOOP
        --
        mx('-', '1');
        --
        FETCH ci_clave_formula_coti_bkp INTO l_rec_clave_formula;
        --
        EXIT WHEN ci_clave_formula_coti_bkp%NOTFOUND;
        --
        mx('l_rec_clave_formula', l_rec_clave_formula.cod_cia);
        mx('l_rec_clave_formula', l_rec_clave_formula.cod_ramo);
        mx('l_rec_clave_formula', l_rec_clave_formula.num_cotizacion);
        mx('l_rec_clave_formula', l_rec_clave_formula.nom_columna);
        mx('l_rec_clave_formula', l_rec_clave_formula.val_columna);
        mx('l_rec_clave_formula', l_rec_clave_formula.nom_tabla);
        --
        DELETE c2000000
         WHERE cod_cia        = l_rec_clave_formula.cod_cia
           AND cod_ramo       = l_rec_clave_formula.cod_ramo
           AND nom_tabla      = l_rec_clave_formula.nom_tabla
           AND nom_columna    = l_rec_clave_formula.nom_columna
           AND num_cotizacion = l_rec_clave_formula.num_cotizacion;
        --
        IF l_rec_clave_formula.nom_columna = 'VAL_CLV_FRML_BKP'
        THEN
          --
          l_rec_clave_formula.nom_columna := 'VAL_CLAVE_FORMULA';
          --
        ELSIF l_rec_clave_formula.nom_columna = 'VAL_CLV_FRML#1_BKP'
        THEN
          --
          l_rec_clave_formula.nom_columna := 'VAL_CLAVE_FORMULA#1';
          --
        END IF;
        --
        --l_bkp_val_clave_formula         := l_rec_clave_formula.val_columna; -- bkp valor antiguo
        --
        em_k_c2000000.p_inserta_borrando(l_rec_clave_formula);              -- inserta con clave_formula nuevo
        --
        mx('-', '4');
        COMMIT;
      END LOOP;
      --
      CLOSE ci_clave_formula_coti;
      --
      mx('F', 'pi_bkp_coti_clave_formula');
      --
      EXCEPTION
        WHEN OTHERS THEN
          MX('ERRM   : ', SQLERRM);
          MX('SQLCODE: ', SQLCODE);
    END pi_bkp_coti_clave_formula;
    /* ----------------------------------------------------------------
    || pi_set_clave_formula_gen_cat : cambia val_clave_formula y graba un bkp
    */ ----------------------------------------------------------------
    PROCEDURE pi_set_clave_formula_gen_cat (pi_cod_cia               c2000000.cod_cia       %TYPE,
                                            pi_cod_ramo              c2000000.cod_ramo      %TYPE,
                                            pi_num_coti_riesgo       c2000000.num_cotizacion%TYPE,
                                            pi_clave_formula_gen_cat c2000000.val_columna   %TYPE) -- toda definicao do oracle de variaveis a nomes de programa precisa ter no max 30 caracteres
    IS
      --
      PRAGMA AUTONOMOUS_TRANSACTION;
      --
      l_rec_clave_formula     c2000000            %ROWTYPE; -- ROWTYPE tem o valor de uma linha de registro da tabela l_rec_clave_formula.cod_cia|l_rec_clave_formula.cod_ramo|l_rec_clave_formula.num_cotizacion ... ate terminar a tabela
      --
      l_bkp_val_clave_formula c2000000.val_columna%TYPE;
      --
      CURSOR ci_clave_formula_coti (pc_cod_cia               c2000000.cod_cia       %TYPE,
                                    pc_cod_ramo              c2000000.cod_ramo      %TYPE,
                                    pc_num_coti_riesgo       c2000000.num_cotizacion%TYPE,
                                    pc_clave_formula_gen_cat c2000000.val_columna   %TYPE)
      IS
        --
        --
        --NOM_COLUMNA  COD_FILA  VAL_COLUMNA
        --VAL_CLAVE_FORMULA  99999  23111-225-21702-2-D-N-S-01-40-01-01-01/01/2018
        --VAL_CLAVE_FORMULA#1  99999  23111-225-21702-2-D-N-S-01-40-01-01-01/01/2018
        SELECT * -- selecionar tudo num rec?
          FROM c2000000
         WHERE cod_cia        = pc_cod_cia
           AND cod_ramo       = pc_cod_ramo
           AND nom_columna    IN ('VAL_CLAVE_FORMULA'  ,
                                  'VAL_CLAVE_FORMULA#1') -- definir constantes
           AND num_cotizacion = pc_num_coti_riesgo;
        --
      --
    BEGIN
      --
      mx('I', 'pi_set_clave_formula_gen_cat');
      --
      mx('-', pi_cod_cia              );
      mx('-', pi_cod_ramo             );
      mx('-', pi_num_coti_riesgo      );
      mx('-', pi_clave_formula_gen_cat);
      --
      IF ci_clave_formula_coti%ISOPEN -- todo cursor tem alguns atributos e metodos para validar algumas coisas %ISOPEN %NOTFOUND
      THEN
        CLOSE ci_clave_formula_coti;
      END IF;
      --
      OPEN ci_clave_formula_coti (pi_cod_cia               ,
                                  pi_cod_ramo              ,
                                  pi_num_coti_riesgo       ,
                                  pi_clave_formula_gen_cat ) ;
      LOOP
        --
        mx('-', '1');
        --
        FETCH ci_clave_formula_coti INTO l_rec_clave_formula;
        --
        EXIT WHEN ci_clave_formula_coti%NOTFOUND;
        --
        mx('l_rec_clave_formula', l_rec_clave_formula.cod_cia);
        mx('l_rec_clave_formula', l_rec_clave_formula.cod_ramo);
        mx('l_rec_clave_formula', l_rec_clave_formula.num_cotizacion);
        mx('l_rec_clave_formula', l_rec_clave_formula.nom_columna);
        mx('l_rec_clave_formula', l_rec_clave_formula.val_columna);
        mx('l_rec_clave_formula', l_rec_clave_formula.nom_tabla);
        --
        l_bkp_val_clave_formula         := l_rec_clave_formula.val_columna; -- bkp valor antiguo
        mx('-', '2');
        l_rec_clave_formula.val_columna := pi_clave_formula_gen_cat;        -- actualiza valor para insertar en c2000000
        em_k_c2000000.p_inserta_borrando(l_rec_clave_formula);              -- inserta con clave_formula nuevo
        --
        mx('-', '3');
        l_rec_clave_formula.val_columna := l_bkp_val_clave_formula;                         -- restaura clave_formula
        --
        IF l_rec_clave_formula.nom_columna = 'VAL_CLAVE_FORMULA'
        THEN
          --
          l_rec_clave_formula.nom_columna := 'VAL_CLV_FRML_BKP';
          --
        ELSIF l_rec_clave_formula.nom_columna = 'VAL_CLAVE_FORMULA#1'
        THEN
          --
          l_rec_clave_formula.nom_columna := 'VAL_CLV_FRML#1_BKP';
          --
        END IF;
        --
        --l_rec_clave_formula.nom_columna := CONCAT(l_rec_clave_formula.nom_columna, '_BKP'); -- crea un registro temporario en c2000000, se puede settar un atrib global
        em_k_c2000000.p_inserta_borrando(l_rec_clave_formula);                              -- inserta bkp de val_clave_formula
        --
        -- hmmmmmmmmmmmmmmmmmmmmm ter que abrir um pragma aqui ou n precisa? n sei...
        -- n tem um p_actualiza
        --
        mx('-', '4');
        COMMIT;
      END LOOP;
      --
      CLOSE ci_clave_formula_coti;
      --
      mx('F', 'pi_set_clave_formula_gen_cat');
      --
      EXCEPTION
        WHEN OTHERS THEN
          MX('ERRM   : ', SQLERRM);
          MX('SQLCODE: ', SQLCODE);
    END pi_set_clave_formula_gen_cat;
    /* ----------------------------------------------------------------
    || pi_halla_clave_formula_gen_cat : encuentra al val_clave_forumla generico para categoria
    */ ----------------------------------------------------------------
    PROCEDURE pi_halla_clave_formula_gen_cat (pi_cod_cia               IN     a2100100.cod_cia     %TYPE,
                                              pi_cod_tip_vehi          IN     a2100100.cod_tip_vehi%TYPE,
                                              pi_clave_formula_gen_cat    OUT c2000000.val_columna %TYPE)
    IS
      --
      CURSOR ci_halla_clave_formula_gen_cat (pc_cod_cia      a2100100.cod_cia     %TYPE,
                                             pc_cod_tip_vehi a2100100.cod_tip_vehi%TYPE)
      IS
        --
        SELECT nom_tip_vehi
          FROM a2100100 a
         WHERE a.cod_cia      = pc_cod_cia -- constante ou param
           AND a.cod_tip_vehi = pc_cod_tip_vehi
           AND a.fec_validez  = (SELECT MAX(fec_validez)
                                   FROM a2100100 b
                                  WHERE b.cod_cia      = a.cod_cia
                                    AND b.cod_tip_vehi = a.cod_tip_vehi);
        --
      --
    BEGIN
      --
      mx('I', 'pi_halla_clave_formula_gen_cat');
      --
      IF ci_halla_clave_formula_gen_cat%ISOPEN
      THEN
        CLOSE ci_halla_clave_formula_gen_cat;
      END IF;
      --
      OPEN ci_halla_clave_formula_gen_cat (pc_cod_cia      => pi_cod_cia     ,
                                           pc_cod_tip_vehi => pi_cod_tip_vehi);
      --
      IF ci_halla_clave_formula_gen_cat%NOTFOUND
      THEN
        pi_clave_formula_gen_cat := NULL;
      ELSE
        FETCH ci_halla_clave_formula_gen_cat INTO pi_clave_formula_gen_cat;
      END IF;
      --
      CLOSE ci_halla_clave_formula_gen_cat;
      --
      mx('F', 'pi_halla_clave_formula_gen_cat');
      --
    END pi_halla_clave_formula_gen_cat;
    /* ----------------------------------------------------------------
    || pi_halla_coti_riesgo_cat : encuentra a una cotizacion de riesgo con la categoria
    */ ----------------------------------------------------------------
    PROCEDURE pi_halla_coti_riesgo_cat (pi_cod_cia         IN     c2000000.cod_cia       %TYPE,
                                        pi_cod_ramo        IN     c2000000.cod_ramo      %TYPE,
                                        pi_num_coti_grupo  IN     c2000000.num_cotizacion%TYPE,
                                        pi_num_coti_riesgo IN OUT c2000000.num_cotizacion%TYPE,
                                        pi_cod_tip_vehi    IN     A2100100.cod_tip_vehi  %TYPE)
    IS
      --
      l_k_campo_cod_tip_vehi c2000000.nom_columna   %TYPE := 'COD_TIP_VEHI';
      --
      li_num_cotizacion      c2000000.num_cotizacion       %TYPE;
      li_val_clave_formula   g2109140_vcr.val_clave_formula%TYPE;
      --
      l_val_clave_formula_gen_cat g2109140_vcr.val_clave_formula%TYPE;
      --
      CURSOR ci_halla_coti_riesgo (pc_cod_cia        c2000000.cod_cia       %TYPE,
                                   pc_cod_ramo       c2000000.cod_ramo      %TYPE,
                                   pc_num_coti_grupo c2000000.num_cotizacion%TYPE,
                                   pc_cod_tip_vehi   A2100100.cod_tip_vehi  %TYPE) -- pegar tabela depois
      IS
        --
        SELECT b.num_cotizacion
          FROM tron2000.c2009030_vcr a,
               tron2000.c2000000 b
         WHERE a.cod_cia          = pc_cod_cia
           AND a.cod_ramo         = pc_cod_ramo
           AND a.num_poliza_grupo = pc_num_coti_grupo
           --
           AND b.cod_cia        = a.cod_cia
           AND b.cod_Ramo       = a.cod_ramo
           AND b.num_cotizacion = a.num_cotizacion
           AND b.nom_columna    = l_k_campo_cod_tip_vehi -- criar constante L_K_CAMPO_COD_TIP_VEHI
           AND b.val_columna    = pc_cod_tip_vehi -- variavel para comparacao de valor
           AND ROWNUM = TRN.UNO; -- limitar somente para 1 reg no retorno?
        --
      --
    BEGIN
      --
      mx('I', 'pi_halla_coti_riesgo_cat');
      --
      IF ci_halla_coti_riesgo%ISOPEN
      THEN
        CLOSE ci_halla_coti_riesgo;
      END IF;
      --
      mx('pc_cod_cia'       ,pi_cod_cia);
      mx('pc_cod_ramo'      ,pi_cod_ramo);
      mx('pc_num_coti_grupo',pi_num_coti_grupo);
      mx('pc_cod_tip_vehi'  ,pi_cod_tip_vehi);
      --
      OPEN ci_halla_coti_riesgo (pc_cod_cia        => pi_cod_cia       ,
                                 pc_cod_ramo       => pi_cod_ramo      ,
                                 pc_num_coti_grupo => pi_num_coti_grupo,
                                 pc_cod_tip_vehi   => pi_cod_tip_vehi  );
      --
      FETCH ci_halla_coti_riesgo INTO li_num_cotizacion;
      mx('li_num_cotizacion',li_num_cotizacion);
      CLOSE ci_halla_coti_riesgo;
      --
      pi_halla_clave_formula_gen_cat (pi_cod_cia               => pi_cod_cia          ,  -- IN
                                      pi_cod_tip_vehi          => pi_cod_tip_vehi     ,  -- IN
                                      pi_clave_formula_gen_cat => li_val_clave_formula); --    OUT
      --
      pi_set_clave_formula_gen_cat (pi_cod_cia          ,
                                    pi_cod_ramo         ,
                                    li_num_cotizacion   ,
                                    li_val_clave_formula); -- PRAGMA AUTONOMOUS_TRANSACTION;
      --
      pi_num_coti_riesgo := li_num_cotizacion;
      --
      mx('F', 'pi_halla_coti_riesgo_cat');
      --
    END pi_halla_coti_riesgo_cat;
    --
    /* ----------------------------------------------------------------
    || fi_valida_coti_grupo : valida si es una cotizacion flota
    */ ----------------------------------------------------------------
    --
    FUNCTION fi_valida_coti_grupo (p_cod_cia         c2000000.cod_cia       %TYPE,
                                   p_cod_ramo        c2000000.cod_ramo      %TYPE,
                                   p_num_coti_grupo  c2000000.num_cotizacion%TYPE)
    RETURN BOOLEAN
    IS
      --
      v_count NUMBER(8);
      --
      CURSOR c_valida_coti_grupo (pc_cod_cia         c2000000.cod_cia       %TYPE,
                                  pc_cod_ramo        c2000000.cod_ramo      %TYPE,
                                  pc_num_coti_grupo  c2000000.num_cotizacion%TYPE)
      IS
        --
        SELECT COUNT(1)
          FROM c2009030_vcr
         WHERE num_poliza_grupo = pc_num_coti_grupo
           AND cod_cia          = pc_cod_cia
           AND cod_ramo         = pc_cod_ramo;
        --
      --
    BEGIN
      --
      mx('I', 'fi_valida_coti_grupo');
      --
      IF c_valida_coti_grupo%ISOPEN
      THEN
        CLOSE c_valida_coti_grupo;
      END IF;
      --
      OPEN c_valida_coti_grupo (p_cod_cia       ,
                                p_cod_ramo      ,
                                p_num_coti_grupo);
      --
      FETCH c_valida_coti_grupo INTO v_count;
      --
      --
      mx('p_cod_cia', p_cod_cia);
      mx('p_cod_ramo', p_cod_ramo);
      mx('p_num_coti_grupo', p_num_coti_grupo);
      mx('v_count', v_count);
      --
      --
      mx('F', 'fi_valida_coti_grupo');
      --
      IF v_count > 0
      THEN
        RETURN TRUE;
      ELSE
        RETURN FALSE;
      END IF;
      --
    END fi_valida_coti_grupo;
    --
    --
    BEGIN
       --
       mx('I', 'pp_ws_detalhe_pacote_cobertura');
       --
       g_fic_traza := NVL(p_num_cotizacion, g_fic_traza);
       --
       g_tip_mvto_batch := NVL(p_tip_mvto_batch, g_k_tip_mvto_batch_cotacao);
       --
       trn_k_global.asigna('cod_cia'         ,p_cod_cia);
       trn_k_global.asigna('cod_ramo'        ,p_cod_ramo);
       trn_k_global.asigna('cod_tarifa'      ,p_cod_tarifa);
       trn_k_global.asigna('num_cotizacion'  ,p_num_cotizacion);
       trn_k_global.asigna('num_poliza_grupo',p_num_poliza_grupo);
       trn_k_global.asigna('num_contrato'    ,p_num_contrato);
       trn_k_global.asigna('num_subcontrato' ,p_num_subcontrato);
       trn_k_global.asigna('num_paso'        ,p_num_paso);
       trn_k_global.asigna('tip_mvto_batch'  ,g_tip_mvto_batch);
       trn_k_global.asigna('cod_agt'         ,p_cod_agt); -- 2.14
       trn_k_global.asigna('cod_agt_param'   ,p_cod_agt); -- v4.75
       --
       IF g_tip_mvto_batch = g_k_tip_mvto_batch_cotacao THEN
         g_mca_valida := ''; --2.32
         pp_asigna_globales_defecto;
         g_mca_valida := NULL;
       ELSE
         trn_k_global.asigna('num_propuesta' , p_num_cotizacion ); --2.14
         pp_asgina_globales_spto;
       END IF;
       IF NVL(trn_k_global.ref_f_global('MCA_POLIZA_GRUPO'),'N') = 'S' or
          NVL(trn_k_global.ref_f_global('COD_SERVICIO'),-1) = g_k_cod_srv_flotas THEN
         --
         l_eh_3_pacotes := FALSE;
         --
       ELSE
         --
         IF g_tip_mvto_batch = g_k_tip_mvto_batch_cotacao THEN -- 2.20
           --
           ea_k_231_utils.p_devuelve_dato_cotizacion(p_nom_tabla   => ea_k_231_utils.g_k_tabla_dv,
                                                    p_nom_columna => 'TIP_PRODUTO'              ,
                                                    p_val_campo   => l_tip_produto);      -- 2.20
           --
         ELSE
           --
           l_tip_produto := ea_k_231_utils.f_valor_dv('tip_produto'); --2.17
           --
         END IF; -- 2.20
         --
         l_eh_3_pacotes := ea_k_g2109142_vcr.f_eh_3_pacotes(p_cod_cia, --2.70
                                                            p_cod_ramo,
                                                            p_cod_agt,
                                                            l_tip_produto); -- 2.17
        -- I 3.47
        IF l_eh_3_pacotes THEN
         --
         pp_asigna('tres_pacotes',1);
         --
        ELSE
         --
         pp_asigna('tres_pacotes',0);
         --
        END IF;
       -- F 3.47
       END IF;
       IF g_tip_mvto_batch = g_k_tip_mvto_batch_cotacao THEN
          --
          IF p_xml_in IS NULL THEN
             --
             l_num_cotizacion     := p_num_cotizacion;
             --I 2.44
             IF l_eh_3_pacotes THEN
                --
                ea_k_231_utils.p_devuelve_dato_cotizacion(p_nom_tabla   => g_k_tabla_vg
                                                      ,p_nom_columna => 'COD_ROL_BO'
                                                      ,p_val_campo   => l_cod_rol_bo);
                --
                IF l_cod_rol_bo IS NOT NULL THEN
                   --
                   ea_k_231_utils.p_devuelve_dato_cotizacion(ea_k_231_coti.g_k_tabla_simulacion,
                                                             'NUM_SIMULACION',
                                                             l_num_simulacion_tmp);
                   --
                   l_num_simulacion := NVL( l_num_simulacion_tmp, trn.UNO ) ;
                   --
                END IF;
                --
             END IF;
             -- F 2.44
             --ea_k_231_utils.p_devuelve_dato_cotizacion(ea_k_231_coti.g_k_tabla_simulacion, --2.36
             --                                         'NUM_SIMULACION', --2.36
             --                                          l_num_simulacion); --2.36 -- 2.20
             --
          ELSE
             --
             l_num_cotizacion     := fp_recupera_valor (p_xml_in, 'NUM_COTIZACION');
             --
             l_num_simulacion     := fp_recupera_valor (p_xml_in, 'NUM_SIMULACION');
             --

          END IF;
          -- mbaruch mock RF 11 12
      IF fp_recupera_valor(p_xml_in, 'MCA_FLOTA_BATCH') = 'S'
      THEN
        --
        pi_halla_coti_riesgo_cat (pi_cod_cia         => p_cod_cia       ,
                                  pi_cod_ramo        => p_cod_ramo      ,
                                  pi_num_coti_grupo  => p_num_poliza_grupo,
                                  pi_num_coti_riesgo => l_num_cotizacion,
                                  pi_cod_tip_vehi    => fp_recupera_valor(p_xml_in, 'COD_TIP_VEHI'));
      --
      ELSE -- 3.84 {
        --
        IF fi_valida_coti_grupo (p_cod_cia         => p_cod_cia       ,
                                 p_cod_ramo        => p_cod_ramo      ,
                                 p_num_coti_grupo  => p_num_poliza_grupo)
        THEN
          --
          mx('MCA_POLIZA_GRUPO','S');
          trn_k_global.asigna('MCA_POLIZA_GRUPO','S');
          --
        ELSE
          --
          mx('MCA_POLIZA_GRUPO','N');
          trn_k_global.asigna('MCA_POLIZA_GRUPO','N');
          --
        END IF;
        --
      END IF; -- 3.84  }
      -- mbaruch mock RF 11 12
      --
          --
          IF l_eh_3_pacotes THEN -- 2.14
            --
            pp_inicializa_variables; -- 2.14
            --
          END IF;
          IF fp_valida_controle_passo(p_cod_cia
                                     ,p_cod_ramo
                                     ,p_cod_tarifa
                                     ,p_cod_agt
                                     ,l_num_cotizacion
                                     ,l_num_simulacion
                                     ,p_num_poliza_grupo
                                     ,p_num_contrato
                                     ,p_num_subcontrato
                                     ,p_num_paso
                                     ,g_tip_mvto_batch)
          THEN
            --
            IF NOT l_eh_3_pacotes THEN -- 2.14
            --
            OPEN l_retorno_pacote
               FOR
                  WITH c_modalidad AS (SELECT cod_cia,
                                              cod_ramo,
                                              num_cotizacion,
                                              num_pacote,
                                              cod_modalidad,
                                              nom_modalidad,
                                              cod_tarifa,
                                              fec_validez_tarifa,
                                              val_clave_formula--,
                                              --pct_agt_npr --v3.36 / v3.41
                                    FROM (SELECT cod_cia,
                                                 cod_ramo,
                                                 num_cotizacion,
                                                 SUBSTR(a.nom_columna,
                                                        INSTR(a.nom_columna, g_k_pref_simulacion) + trn.UNO,
                                                        LENGTH(nom_columna))                                 AS num_pacote,
                                                 SUBSTR(a.nom_columna,
                                                        trn.CERO,
                                                        INSTR(a.nom_columna, g_k_pref_simulacion) - trn.UNO) AS nom_columna,
                                                 a.val_columna
                                            FROM c2000000 a
                                           WHERE a.cod_cia        = p_cod_cia
                                             AND a.cod_ramo       = p_cod_ramo
                                             AND a.num_cotizacion = l_num_cotizacion
                                             AND (a.nom_columna   LIKE ('%NOM_MODALIDAD' || g_k_pref_simulacion || TO_CHAR(l_num_simulacion) || '%') OR
                                                  a.nom_columna   LIKE ('%COD_MODALIDAD' || g_k_pref_simulacion || TO_CHAR(l_num_simulacion) || '%') OR
                                                  a.nom_columna   LIKE ('%COD_TARIFA' || g_k_pref_simulacion || TO_CHAR(l_num_simulacion) || '%') OR
                                                  a.nom_columna   LIKE ('%FEC_VALIDEZ_TARIFA' || g_k_pref_simulacion || TO_CHAR(l_num_simulacion) || '%') OR
                                                  --a.nom_columna   LIKE ('%PCT_AGT_NPR' || g_k_pref_simulacion || TO_CHAR(l_num_simulacion) || '%') OR --v3.36 / v3.41
                                                  a.nom_columna   LIKE ('%VAL_CLAVE_FORMULA' || g_k_pref_simulacion || TO_CHAR(l_num_simulacion) || '%')))
                                  PIVOT(MAX(val_columna) FOR nom_columna IN(
                                                                            'COD_MODALIDAD'      AS cod_modalidad,
                                                                            'NOM_MODALIDAD'      AS nom_modalidad,
                                                                            'COD_TARIFA'         AS cod_tarifa,
                                                                            'FEC_VALIDEZ_TARIFA' AS fec_validez_tarifa,
                                                                            'VAL_CLAVE_FORMULA'  AS val_clave_formula--,
                                                                            --'PCT_AGT_NPR'        AS pct_agt_npr --v3.36 / v3.41
                                                                           )
                                  )
                                  ORDER BY num_pacote),
                       c_val_to AS (SELECT c.num_simulacion,
                                           NVL(c.imp_recibo,trn.CERO) AS val_total
                                      FROM c2990700 c
                                     WHERE cod_cia        = p_cod_cia
                                       AND cod_ramo       = p_cod_ramo
                                       AND num_cotizacion = l_num_cotizacion
                                       AND cod_fracc_pago = 2301)
               SELECT
                     m.cod_cia                   AS cod_cia,
                     m.cod_ramo                  AS cod_ramo,
                     m.num_cotizacion            AS num_cotizacion,
                     m.num_pacote                AS num_simulacao,
                     m.cod_modalidad             AS cod_pacote,
                     m.nom_modalidad             AS nom_pacote,
                     m.cod_tarifa                AS cod_tarifa,
                     m.fec_validez_tarifa        AS fec_validez_tarifa,
                     m.val_clave_formula         AS val_clave_formula,
                     p.val_total                 AS val_total,
                     p.val_columna               AS pct_fator_ajuste,
                     v.val_columna               AS val_veiculo,
                     t.val_columna               AS tip_merc_deter,
                     99                          AS tip_pacote,  -- 2.14
                     u.val_columna               AS pct_agt_npr, --v3.41
                     NULL                        AS cod_plan_pago, --4.37
                     NULL                        AS cod_forma_pago --v4.37
                 FROM
                    c_modalidad m
                    LEFT OUTER JOIN c_val_to p  ON m.num_pacote      = p.num_simulacion
                    LEFT OUTER JOIN c2000000 p  ON  p.cod_cia        = m.cod_cia
                                                AND p.cod_ramo       = m.cod_ramo
                                                AND p.num_cotizacion = m.num_cotizacion
                                                AND p.nom_columna    = 'PCT_AJUSTE_TAB_REF'
                    LEFT OUTER JOIN c2000000 v  ON  v.cod_cia        = m.cod_cia
                                                AND v.cod_ramo       = m.cod_ramo
                                                AND v.num_cotizacion = m.num_cotizacion
                                                AND v.nom_columna    = 'VAL_SUB_MODELO'
                    LEFT OUTER JOIN c2000000 t  ON  t.cod_cia        = m.cod_cia
                                                AND t.cod_ramo       = m.cod_ramo
                                                AND t.num_cotizacion = m.num_cotizacion
                                                AND t.nom_columna    = 'TIP_MERC_DETER'
                    LEFT OUTER JOIN c2000000 u  ON  u.cod_cia        = m.cod_cia
                                                AND u.cod_ramo       = m.cod_ramo
                                                AND u.num_cotizacion = m.num_cotizacion
                                                AND u.nom_columna    = 'PCT_AGT_NPR' --v3.41
               ORDER BY num_simulacao;
               --
            ELSE -- I 2.14
               --
               OPEN l_retorno_pacote
                 FOR
                    WITH c_modalidad AS (SELECT cod_cia,
                                                cod_ramo,
                                                num_cotizacion,
                                                num_pacote,
                                                cod_modalidad,
                                                nom_modalidad,
                                                cod_tarifa,
                                                fec_validez_tarifa,
                                                val_clave_formula,
                                                tip_pacote, -- 2.14
                                                pct_agt_npr --v3.36
                                      FROM (SELECT cod_cia,
                                                   cod_ramo,
                                                   num_cotizacion,
                                                   SUBSTR(a.nom_columna,
                                                          INSTR(a.nom_columna, g_k_pref_simulacion) + trn.UNO,
                                                          LENGTH(nom_columna))                                 AS num_pacote,
                                                   SUBSTR(a.nom_columna,
                                                          trn.CERO,
                                                          INSTR(a.nom_columna, g_k_pref_simulacion) - trn.UNO) AS nom_columna,
                                                   a.val_columna
                                              FROM c2000000 a
                                             WHERE a.cod_cia        = p_cod_cia
                                               AND a.cod_ramo       = p_cod_ramo
                                               AND a.num_cotizacion = l_num_cotizacion
                                               AND (a.nom_columna   LIKE ('%NOM_MODALIDAD' || g_k_pref_simulacion || TO_CHAR(l_num_simulacion) || '%') OR
                                                    a.nom_columna   LIKE ('%COD_MODALIDAD' || g_k_pref_simulacion || TO_CHAR(l_num_simulacion) || '%') OR
                                                    a.nom_columna   LIKE ('%COD_TARIFA' || g_k_pref_simulacion || TO_CHAR(l_num_simulacion) || '%') OR
                                                    a.nom_columna   LIKE ('%FEC_VALIDEZ_TARIFA' || g_k_pref_simulacion || TO_CHAR(l_num_simulacion) || '%') OR
                                                    a.nom_columna   LIKE ('%VAL_CLAVE_FORMULA' || g_k_pref_simulacion || TO_CHAR(l_num_simulacion) || '%') OR
                                                    a.nom_columna   LIKE ('%PCT_AGT_NPR' || g_k_pref_simulacion || TO_CHAR(l_num_simulacion) || '%') OR --v3.36
                                                    a.nom_columna   LIKE ('%TIP_PACOTE' || g_k_pref_simulacion || TO_CHAR(l_num_simulacion) || '%'))) -- 2.14

                                    PIVOT(MAX(val_columna) FOR nom_columna IN(
                                                                            'COD_MODALIDAD'      AS cod_modalidad,
                                                                            'NOM_MODALIDAD'      AS nom_modalidad,
                                                                            'COD_TARIFA'         AS cod_tarifa,
                                                                            'FEC_VALIDEZ_TARIFA' AS fec_validez_tarifa,
                                                                            'VAL_CLAVE_FORMULA'  AS val_clave_formula,
                                                                            'PCT_AGT_NPR'        AS pct_agt_npr, --v3.36
                                                                            'TIP_PACOTE'         AS tip_pacote -- 2.14
                                                                           )
                                  )
                                  ORDER BY num_pacote),
                       c_val_to AS (SELECT d.num_simulacion,
                                           NVL(c.imp_recibo,trn.CERO) AS val_total
                                      FROM c2990700 c,( SELECT  SUBSTR(a.nom_columna,
                                                                 INSTR(a.nom_columna, '#') + 1,
                                                                 LENGTH(nom_columna))  AS num_simulacion,
                                                                 val_columna
                                                          FROM c2000000 a
                                                         WHERE a.cod_cia        = p_cod_cia
                                                           AND a.cod_ramo       = p_cod_ramo
                                                           AND a.num_cotizacion = l_num_cotizacion
                                                           AND (a.nom_columna   LIKE ('%NUM_SIMULACION' || '#' || TO_CHAR(l_num_simulacion) || '%')  )    ) d
                                     WHERE cod_cia        = p_cod_cia
                                       AND cod_ramo       = p_cod_ramo
                                       AND num_cotizacion = d.val_columna
                                       AND c.num_simulacion = 1
                                       AND cod_fracc_pago = 2301),
                       c_pacote_ajuste AS (SELECT  SUBSTR(a.nom_columna,  -- 1.86
                                                    INSTR(a.nom_columna, '#') + 1,
                                                    LENGTH(nom_columna))  AS num_simulacion,
                                                    val_columna,a.nom_columna
                                             FROM c2000000 a
                                            WHERE a.cod_cia        = p_cod_cia
                                              AND a.cod_ramo       = p_cod_ramo
                                              AND a.num_cotizacion = l_num_cotizacion
                                              AND (a.nom_columna   LIKE ('PCT_AJUSTE_TAB_REF' || '#' || TO_CHAR(l_num_simulacion) || '%')  )    ),
                       c_pacote_val_modelo AS (SELECT  SUBSTR(a.nom_columna,
                                                        INSTR(a.nom_columna, '#') + 1,
                                                        LENGTH(nom_columna))  AS num_simulacion,
                                                        val_columna,a.nom_columna
                                                 FROM c2000000 a
                                                WHERE a.cod_cia        = p_cod_cia
                                                  AND a.cod_ramo       = p_cod_ramo
                                                  AND a.num_cotizacion = l_num_cotizacion
                                                  AND (a.nom_columna   LIKE ('VAL_SUB_MODELO' || '#' || TO_CHAR(l_num_simulacion) || '%')  )    ),
                       c_pacote_tip_merc AS (SELECT  SUBSTR(a.nom_columna,
                                                      INSTR(a.nom_columna, '#') + 1,
                                                      LENGTH(nom_columna))  AS num_simulacion,
                                                      val_columna,a.nom_columna
                                               FROM c2000000 a
                                              WHERE a.cod_cia        = p_cod_cia
                                                AND a.cod_ramo       = p_cod_ramo
                                                AND a.num_cotizacion = l_num_cotizacion
                                                AND (a.nom_columna   LIKE ('TIP_MERC_DETER' || '#' || TO_CHAR(l_num_simulacion) || '%')  )    )
               SELECT
                     m.cod_cia                   AS cod_cia,
                     m.cod_ramo                  AS cod_ramo,
                     m.num_cotizacion            AS num_cotizacion,
                     m.num_pacote                AS num_simulacao,
                     m.cod_modalidad             AS cod_pacote,
                     f_trata_nom_pacote(m.val_clave_formula) AS nom_pacote, --v2.87
                     m.cod_tarifa                AS cod_tarifa,
                     m.fec_validez_tarifa        AS fec_validez_tarifa,
                     m.val_clave_formula         AS val_clave_formula,
                     p.val_total                 AS val_total,
                     w.val_columna               AS pct_fator_ajuste,
                     x.val_columna               AS val_veiculo,
                     y.val_columna               AS tip_merc_deter,
                     m.tip_pacote                AS tip_pacote,  -- 2.14
                     m.pct_agt_npr               AS pct_agt_npr, --v3.36
                     NULL                        AS cod_plan_pago, --4.37
                     NULL                        AS cod_forma_pago --4.37
                 FROM
                    c_modalidad m
                    LEFT OUTER JOIN c_val_to p            ON m.num_pacote      = p.num_simulacion -- 2.14
                    LEFT OUTER JOIN c_pacote_ajuste w     ON  m.num_pacote     = w.num_simulacion -- 1.86
                    LEFT OUTER JOIN c_pacote_val_modelo x ON  m.num_pacote     = x.num_simulacion -- 1.86
                    LEFT OUTER JOIN c_pacote_tip_merc y   ON  m.num_pacote     = y.num_simulacion -- 1.86
               ORDER BY num_simulacao;
              --
            END IF; -- F 2.14
            --
            --mbaruch detalhe pacote auto poliza grupo -- v3.68
            IF (fp_recupera_valor(p_xml_in, 'MCA_TEST') = 'S')
            THEN
              p_gerar_xml_detalhe_pkt_auto3(l_retorno_pacote, p_xml);
            ELSIF (trn_k_global.ref_f_global('MCA_POLIZA_GRUPO') = 'S')
            THEN
              p_gerar_xml_detalhe_pkt_auto3(l_retorno_pacote, p_xml);
            ELSIF (fp_recupera_valor(p_xml_in, 'MCA_FLOTA_BATCH') = 'S')
            THEN
              trn_k_global.asigna('MCA_FLOTA_BATCH', fp_recupera_valor(p_xml_in, 'MCA_FLOTA_BATCH'));
              p_gerar_xml_detalhe_pkt_auto3(l_retorno_pacote, p_xml); -- 3.93
            ELSE
              p_gerar_xml_detalhe_pacote(l_retorno_pacote, p_xml);
            END IF;
            --
            --
          ELSE
            --
            IF g_mca_existe_bo = trn.NO  THEN
              --
              pp_borra_tablas_cotizacion(p_cod_cia
                                      ,p_cod_ramo
                                      ,p_cod_tarifa
                                      ,p_cod_agt
                                      ,l_num_cotizacion
                                      ,l_num_simulacion
                                      ,p_num_poliza_grupo
                                      ,p_num_contrato
                                      ,p_num_subcontrato
                                      ,p_num_paso
                                      ,g_tip_mvto_batch);
             --
            END IF;
            --
          END IF;
          --
       ELSIF g_tip_mvto_batch = g_k_tip_mvto_batch_endosso THEN
         --
         l_num_cotizacion     := p_num_cotizacion;
         --
         trn_k_global.asigna('cod_cia'       , p_cod_cia        );
         trn_k_global.asigna('num_propuesta' , l_num_cotizacion );
         IF l_eh_3_pacotes THEN -- 2.14
           --
           pp_inicializa_variables; -- 2.14
         END IF; -- 2.14
         --
         mx('cod_cia      :', p_cod_cia        );
         mx('num_propuesta:', l_num_cotizacion );
         --
         IF NOT l_eh_3_pacotes THEN -- 2.14
         OPEN l_retorno_pacote
            FOR
               WITH c_modalidad AS (SELECT cod_cia,
                                           num_propuesta,
                                           cod_ramo,
                                           cod_modalidad,
                                           cod_tarifa,
                                           fec_validez_tarifa,
                                           val_clave_formula--,
                                           --pct_agt_npr --v3.41
                                      FROM (SELECT cod_cia,
                                                   num_propuesta,
                                                   cod_campo     AS nom_columna,
                                                   val_campo     AS val_columna
                                              FROM a2000560 a
                                             WHERE a.cod_cia = p_cod_cia
                                               AND a.num_propuesta = l_num_cotizacion
                                               AND a.cod_campo IN
                                                   ('COD_MODALIDAD',
                                                    'COD_TARIFA',
                                                    'FEC_VALIDEZ_TARIFA',
                                                    'VAL_CLAVE_FORMULA',
                                                    --'PCT_AGT_NPR', --v3.41
                                                    'LLCOD_RAMO')) pivot(MAX(val_columna) FOR nom_columna IN('COD_MODALIDAD' AS cod_modalidad,
                                                                                                             'COD_TARIFA' AS cod_tarifa,
                                                                                                             'FEC_VALIDEZ_TARIFA' AS fec_validez_tarifa,
                                                                                                             'VAL_CLAVE_FORMULA' AS val_clave_formula,
                                                                                                             --'PCT_AGT_NPR' AS pct_agt_npr, --v3.41
                                                                                                             'LLCOD_RAMO' AS cod_ramo)))
               --
               SELECT m.cod_cia            AS cod_cia,
                      m.cod_ramo           AS cod_ramo,
                      m.num_propuesta      AS num_cotizacion,
                      trn.uno              AS num_simulacion,
                      m.cod_modalidad      AS cod_pacote,
                      n.nom_modalidad      AS nom_pacote,
                      m.cod_tarifa         AS cod_tarifa,
                      m.fec_validez_tarifa AS fec_validez_tarifa,
                      m.val_clave_formula  AS val_clave_formula,
                      trn.cero             AS val_total,
                      p.val_campo          AS pct_fator_ajuste,
                      v.val_campo          AS val_veiculo,
                      t.val_campo          AS tip_merc_deter,
                      99                   AS tip_pacote,  -- 2.14
                      u.val_campo          AS pct_agt_npr, --v3.41
                      NULL                 AS cod_plan_pago, --4.37
                      NULL                 AS cod_forma_pago --4.37
                 FROM c_modalidad m
                 LEFT OUTER JOIN g2990004 n
                   ON n.cod_cia = m.cod_cia
                  AND n.cod_modalidad = m.cod_modalidad
                 LEFT OUTER JOIN a2000560 p
                   ON p.cod_cia = m.cod_cia
                  AND p.num_propuesta = m.num_propuesta
                  AND p.cod_campo = 'PCT_AJUSTE_TAB_REF'
                 LEFT OUTER JOIN a2000560 v
                   ON v.cod_cia = m.cod_cia
                  AND v.num_propuesta = m.num_propuesta
                  AND v.cod_campo = 'VAL_SUB_MODELO'
                 LEFT OUTER JOIN a2000560 t
                   ON t.cod_cia = m.cod_cia
                  AND t.num_propuesta = m.num_propuesta
                  AND t.cod_campo = 'TIP_MERC_DETER'
                 LEFT OUTER JOIN a2000560 u
                   ON u.cod_cia = m.cod_cia
                  AND u.num_propuesta = m.num_propuesta
                  AND u.cod_campo = 'PCT_AGT_NPR'; --v3.41
         --
         ELSE -- I 2.14
         OPEN l_retorno_pacote
            FOR
               WITH c_modalidad AS (SELECT cod_cia,
                                           num_propuesta,
                                           cod_ramo,
                                           cod_modalidad,
                                           cod_tarifa,
                                           fec_validez_tarifa,
                                           val_clave_formula,
                                           pct_agt_npr --v3.36
                                      FROM (SELECT cod_cia,
                                                   num_propuesta,
                                                   cod_campo     AS nom_columna,
                                                   val_campo     AS val_columna
                                              FROM a2000560 a
                                             WHERE a.cod_cia = p_cod_cia
                                               AND a.num_propuesta = l_num_cotizacion
                                               AND a.cod_campo IN
                                                   ('COD_MODALIDAD',
                                                    'COD_TARIFA',
                                                    'FEC_VALIDEZ_TARIFA',
                                                    'VAL_CLAVE_FORMULA',
                                                    'PCT_AGT_NPR', --v3.36
                                                    'LLCOD_RAMO')) pivot(MAX(val_columna) FOR nom_columna IN('COD_MODALIDAD' AS cod_modalidad,
                                                                                                             'COD_TARIFA' AS cod_tarifa,
                                                                                                             'FEC_VALIDEZ_TARIFA' AS fec_validez_tarifa,
                                                                                                             'VAL_CLAVE_FORMULA' AS val_clave_formula,
                                                                                                             'PCT_AGT_NPR' AS pct_agt_npr, --v3.36
                                                                                                             'LLCOD_RAMO' AS cod_ramo)))
               --
               SELECT m.cod_cia            AS cod_cia,
                      m.cod_ramo           AS cod_ramo,
                      m.num_propuesta      AS num_cotizacion,
                      trn.uno              AS num_simulacion,
                      m.cod_modalidad      AS cod_pacote,
                      f_trata_nom_pacote(m.val_clave_formula) AS nom_pacote, --v2.87
                      m.cod_tarifa         AS cod_tarifa,
                      m.fec_validez_tarifa AS fec_validez_tarifa,
                      m.val_clave_formula  AS val_clave_formula,
                      trn.cero             AS val_total,
                      p.val_campo          AS pct_fator_ajuste,
                      v.val_campo          AS val_veiculo,
                      t.val_campo          AS tip_merc_deter,
                      trn.UNO              AS tip_pacote, -- 2.14
                      m.pct_agt_npr        AS pct_agt_npr, --v3.36
                      NULL                 AS cod_plan_pago, --4.37
                      NULL                 AS cod_forma_pago --4.37
                 FROM c_modalidad m
                 /*LEFT OUTER JOIN g2990004 n
                   ON n.cod_cia = m.cod_cia
                  AND n.cod_modalidad = m.cod_modalidad*/ --2.85
                 LEFT OUTER JOIN a2000560 p
                   ON p.cod_cia = m.cod_cia
                  AND p.num_propuesta = m.num_propuesta
                  AND p.cod_campo = 'PCT_AJUSTE_TAB_REF'
                 LEFT OUTER JOIN a2000560 v
                   ON v.cod_cia = m.cod_cia
                  AND v.num_propuesta = m.num_propuesta
                  AND v.cod_campo = 'VAL_SUB_MODELO'
                 LEFT OUTER JOIN a2000560 t
                   ON t.cod_cia = m.cod_cia
                  AND t.num_propuesta = m.num_propuesta
                  AND t.cod_campo = 'TIP_MERC_DETER';
           --
         END IF; -- F 2.14
         --
         mx('MCA_COTI_SIMULADOR:', trn_k_global.ref_f_global('MCA_COTI_SIMULADOR') );
         mx('MCA_COTI_COMROUND :', trn_k_global.ref_f_global('MCA_COTI_COMROUND')  );
         --
         IF (trn_k_global.ref_f_global('MCA_COTI_SIMULADOR') = trn.NO  AND
             trn_k_global.ref_f_global('MCA_COTI_COMROUND')  = trn.SI) THEN
            --
            --mbaruch detalhe pacote auto poliza grupo -- v3.68
            IF (fp_recupera_valor(p_xml_in, 'MCA_TEST') = 'S')
            THEN
              p_gerar_xml_detalhe_pkt_auto3(l_retorno_pacote, p_xml);
            ELSIF (trn_k_global.ref_f_global('MCA_POLIZA_GRUPO') = 'S')
            THEN
              --
              mx('p_gerar_xml_detalhe_pkt_auto3', 'p_gerar_xml_detalhe_pkt_auto2');
              p_gerar_xml_detalhe_pkt_auto3(l_retorno_pacote, p_xml);
              --
            ELSIF (fp_recupera_valor(p_xml_in, 'MCA_FLOTA_BATCH') = 'S')
            THEN
              --
              trn_k_global.asigna('MCA_FLOTA_BATCH', fp_recupera_valor(p_xml_in, 'MCA_FLOTA_BATCH'));
              p_gerar_xml_detalhe_pkt_auto3(l_retorno_pacote, p_xml); -- 3.93
              --
            ELSE
              --
              p_gerar_xml_detalhe_pacote(l_retorno_pacote, p_xml);
              --
            END IF;
            --
            --p_gerar_xml_cobertura_endosso(l_retorno_pacote, p_xml);
            --
         ELSE
           --
           p_gerar_xml_cobertura_endosso(l_retorno_pacote, p_xml);
           --
         END IF;
         --
       END IF;
       -- chamar a restauracao de val_clave aqui
       pi_bkp_coti_clave_formula (pi_cod_cia         => p_cod_cia       ,
                                  pi_cod_ramo        => p_cod_ramo      ,
                                  pi_num_coti_riesgo => l_num_cotizacion);
       --
       mx('F', 'pp_ws_detalhe_pacote_cobertura');
       --
    END pp_ws_detalhe_pacote_cobertura;
    --
    /* ---------------------------------------------------------------- *
    || Devolve um CLOB contendo uma lista de dados XML : p_xml
    */ ----------------------------------------------------------------
    PROCEDURE p_ws_consulta_pacote_cobertura (p_cod_cia                 IN  G9999992.cod_cia%TYPE,
                                              p_cod_ramo                IN  G9999992.cod_ramo%TYPE,
                                              p_cod_tarifa              IN  G9999992.cod_tarifa%TYPE,
                                              p_cod_agt                 IN  G9999992.cod_agt%TYPE,
                                              p_num_cotizacion          IN  C2009030_vcr.num_cotizacion%TYPE,
                                              p_num_cotizacion_grupo    IN  C2009030_vcr.num_poliza_grupo%TYPE,
                                              p_num_poliza_grupo        IN  A2000500.num_poliza_grupo%TYPE,
                                              p_num_contrato            IN  A2000500.num_contrato%TYPE,
                                              p_num_subcontrato         IN  A2000500.num_contrato%TYPE,
                                              p_num_paso                IN  G9999992.num_paso%TYPE,
                                              p_tip_mvto_batch          IN  A2000500.tip_mvto_batch%TYPE,
                                              p_xml_in                  IN  CLOB,
                                              p_xml                     OUT CLOB)
    IS
       --
       l_retorno_pacote            ref_cursor;
       --
       l_num_cotizacion            C2009030_vcr.num_cotizacion%TYPE;
       --
       l_num_simulacion            c2000000.nom_columna%TYPE;
       --
       l_tip_mvto_batch            A2000500.tip_mvto_batch%TYPE;
       --
       l_reg_aux_msg               TYPREG_MSG_WS;
       --
       l_txt_num_cotizacion        g2109999_vcr.txt_mensagem%TYPE;
       --
       l_txt_tip_de                g2109999_vcr.txt_mensagem%TYPE;
       --
       l_eh_3_pacotes              BOOLEAN ; -- 2.14
       l_tip_produto               g2109142_vcr.tip_produto       %TYPE ; --2.17
       --
       l_tip_situ_bo               c2000000.val_columna%TYPE := trn.NULO;
       l_cod_rol_bo                c2000000.val_columna%TYPE := trn.NULO; -- 2.44
       l_num_simulacion_tmp        c2000000.nom_columna%TYPE := trn.NULO; -- 2.44
       --
       l_mca_renovacion            VARCHAR2(1) := trn.NO; --v3.01
       --
       l_agrup_recusa              a2992131_vcr.tip_agrup_recusa%TYPE;
       l_tip_situ                  a2992131_vcr.tip_situ_bo     %TYPE;
       --
       l_reg_a2992131              a2992131_vcr%ROWTYPE;
       --
       l_reg_a2009710              a2009710_vcr%ROWTYPE; -- 4.52
       --
       l_mca_recalculo_cr          c2000000.nom_columna%TYPE := trn.NULO; -- v5.20
       --
    BEGIN
       --
       mx('I', 'p_ws_consulta_pacote_coberturas');
       --
       trn_k_global.borra_todas; -- 3.92
       --
       DBMS_SESSION.RESET_PACKAGE; -- 3.92
       --
       l_tip_mvto_batch        := NVL(p_tip_mvto_batch, g_k_tip_mvto_batch_cotacao);
       --
       l_reg_a2009710.cod_cia        := p_cod_cia                  ;
       l_reg_a2009710.cod_ramo       := p_cod_ramo                 ;
       l_reg_a2009710.cod_agt        := NVL(p_cod_agt, em.COD_AGT_GEN)          ;
       l_reg_a2009710.num_cotizacion := NVL(p_num_cotizacion, em.NUM_POLIZA_GEN);
       l_reg_a2009710.tip_mvto_batch := NVL(l_tip_mvto_batch,9)    ;
       l_reg_a2009710.num_paso       := NVL(p_num_paso,99)         ;
       l_reg_a2009710.txt_processo   := 'consultarPacoteCoberturas';
       l_reg_a2009710.fec_ini        := SYSDATE                    ;
       l_reg_a2009710.fec_fim        := NULL                       ;
       l_reg_a2009710.cod_retorno    := NULL                       ;
       l_reg_a2009710.desc_xml_in    := p_xml_in                   ;
       l_reg_a2009710.desc_xml_out   := NULL                       ;
       --
       trn_k_global.asigna('COD_USR',g_cod_usr_automatico);
       --
       trn_k_global.asigna('cod_cia'         ,p_cod_cia);  -- 2.14
       trn_k_global.asigna('cod_ramo'        ,p_cod_ramo); -- 2.14
       trn_k_global.asigna('cod_tarifa'      ,p_cod_tarifa); -- 2.14
       trn_k_global.asigna('num_cotizacion'  ,p_num_cotizacion); -- 2.14
       trn_k_global.asigna('num_poliza_grupo',p_num_poliza_grupo); -- 2.14
       trn_k_global.asigna('num_contrato'    ,p_num_contrato); -- 2.14
       trn_k_global.asigna('num_subcontrato' ,p_num_subcontrato); -- 2.14
       trn_k_global.asigna('num_paso'        ,p_num_paso); -- 2.14
       trn_k_global.asigna('tip_mvto_batch'  ,l_tip_mvto_batch); -- 2.14
       trn_k_global.asigna('cod_agt'         ,p_cod_agt); -- 2.14
       trn_k_global.asigna('num_propuesta'   ,p_num_cotizacion); -- 2.85
       IF l_tip_mvto_batch = g_k_tip_mvto_batch_cotacao THEN
         --
         g_mca_valida := 'N'; -- 2.14
         pp_asigna_globales_defecto; -- 2.14
         g_mca_valida := NULL; -- 2.14
         --
       ELSE
         --
         pp_asgina_globales_spto;
         --
       END IF;
       --
       IF NVL(trn_k_global.ref_f_global('MCA_POLIZA_GRUPO'),'N') = 'S' OR
          NVL(trn_k_global.ref_f_global('COD_SERVICIO'),-1) = g_k_cod_srv_flotas THEN
         --
         l_eh_3_pacotes := FALSE;
         --
       ELSE
         --
         IF l_tip_mvto_batch = g_k_tip_mvto_batch_cotacao THEN -- 2.19
           --
           ea_k_231_utils.p_devuelve_dato_cotizacion(p_nom_tabla   => ea_k_231_utils.g_k_tabla_dv,
                                                     p_nom_columna => 'TIP_PRODUTO'              ,
                                                     p_val_campo   => l_tip_produto);
           --
         ELSE
           --
           l_tip_produto := ea_k_231_utils.f_valor_dv('tip_produto'); --2.17
           --
         END IF;   -- 2.19
         --
         l_eh_3_pacotes := ea_k_g2109142_vcr.f_eh_3_pacotes(p_cod_cia, --2.70
                                                            p_cod_ramo,
                                                            p_cod_agt,
                                                            l_tip_produto); -- 2.17
        -- I 3.47
        IF l_eh_3_pacotes THEN
         --
         pp_asigna('tres_pacotes',1);
         --
        ELSE
         --
         pp_asigna('tres_pacotes',0);
         --
        END IF;
       -- F 3.47
       END IF ;
       --
       IF l_tip_mvto_batch = g_k_tip_mvto_batch_cotacao THEN
          --
          IF p_xml_in IS NULL THEN
             --
             l_num_cotizacion     := p_num_cotizacion;
             -- I 2.44
             ea_k_231_utils.p_devuelve_dato_cotizacion(p_nom_tabla   => g_k_tabla_vg
                                                      ,p_nom_columna => 'COD_ROL_BO'
                                                      ,p_val_campo   => l_cod_rol_bo);
             --
             -- I 2.44
             IF l_eh_3_pacotes THEN
                --
                /*ea_k_231_utils.p_devuelve_dato_cotizacion(p_nom_tabla   => g_k_tabla_vg
                                                      ,p_nom_columna => 'COD_ROL_BO'
                                                      ,p_val_campo   => l_cod_rol_bo);*/
                --
                -- v5.20
                ea_k_231_utils.p_devuelve_dato_cotizacion(p_nom_tabla   => ea_k_231_coti.g_k_tabla_simulacion
                                                         ,p_nom_columna => 'MCA_RECALCULO_CR'
                                                         ,p_val_campo   => l_mca_recalculo_cr);
                --
                IF l_cod_rol_bo       IS NOT NULL /*OR
                   l_mca_recalculo_cr IS NOT NULL*/    --v5.20 --
                THEN
                   --
                   ea_k_231_utils.p_devuelve_dato_cotizacion(ea_k_231_coti.g_k_tabla_simulacion,
                                                             'NUM_SIMULACION',
                                                             l_num_simulacion_tmp);
                   --
                   l_num_simulacion := NVL( l_num_simulacion_tmp, trn.UNO ) ;
                   --
                END IF;
                --
             ELSE
               --
               ea_k_231_utils.p_devuelve_dato_cotizacion(g_k_tabla_vg,
                                                         'TIP_SITU_BO',
                                                         l_tip_situ_bo);
               --
               IF l_cod_rol_bo IS NOT NULL AND
                  l_tip_situ_bo = em_k_backoffice.g_k_en_analisis
               THEN
                 --
                 l_num_simulacion := trn.UNO;
                 --
               END IF;
               --
             END IF;
             -- F 2.44
             --ea_k_231_utils.p_devuelve_dato_cotizacion(ea_k_231_coti.g_k_tabla_simulacion, -- 2.35
             --                                         'NUM_SIMULACION', -- 2.35
             --                                          l_num_simulacion);  -- 2.35 -- 2.20
             --
          ELSE
             --
             l_num_cotizacion     := fp_recupera_valor (p_xml_in, 'NUM_COTIZACION');
             --
             l_num_simulacion     := fp_recupera_valor (p_xml_in, 'NUM_SIMULACION');
             --

          END IF;
          --
          -- v3.01 ini
          -- v4.55 ini -v4.56
          ea_k_231_utils.p_devuelve_dato_cotizacion(ea_k_231_utils.g_k_tabla_df,
                                                    'MCA_RENOVACION',
                                                    l_mca_renovacion);
          --
          l_num_simulacion_tmp := l_num_simulacion;
          --
          IF NVL(l_mca_renovacion, trn.NO) = trn.SI
          THEN
            --
            pp_asigna('MCA_RENOVACION'
                     ,l_mca_renovacion);  --v3.80
            --
            l_num_simulacion_tmp := trn.UNO ;-- v4.56 -- V5.04
            l_num_simulacion     := trn.UNO ;
            --
          END IF;
          -- v4.55 fim - v4.56
          -- v3.01 fim
          --
          IF fp_valida_controle_passo(p_cod_cia
                                     ,p_cod_ramo
                                     ,p_cod_tarifa
                                     ,p_cod_agt
                                     ,l_num_cotizacion
                                     ,l_num_simulacion
                                     ,p_num_poliza_grupo
                                     ,p_num_contrato
                                     ,p_num_subcontrato
                                     ,p_num_paso
                                     ,l_tip_mvto_batch)
          THEN
            --
            l_reg_aux_msg := fp_trata_msg('TXT_NUM_COTIZACION',
                                          NULL,
                                          g_k_pre_msg_erro || '99999999' || g_k_sep_cod_msg);
            --
            l_txt_num_cotizacion := l_reg_aux_msg.des_mensagem;
            --
            l_reg_aux_msg := fp_trata_msg('TXT_TIP_DE',
                                          NULL,
                                          g_k_pre_msg_erro || '99999998' || g_k_sep_cod_msg);
            --
            l_txt_tip_de := l_reg_aux_msg.des_mensagem;
            --
            IF NOT l_eh_3_pacotes THEN -- 2.14
            --
            mx('-', 'l_eh_3_pacotes --> FALSE');
            --
            OPEN l_retorno_pacote
            FOR
             WITH c_modalidad AS (SELECT num_pacote,
                                         cod_modalidad,
                                         nom_modalidad,
                                         mca_rast_obrig
                                    FROM (SELECT SUBSTR(a.nom_columna,
                                                        INSTR(a.nom_columna, g_k_pref_simulacion) + trn.UNO,
                                                        LENGTH(nom_columna))                                 AS num_pacote,
                                                 SUBSTR(a.nom_columna,
                                                        trn.CERO,
                                                        INSTR(a.nom_columna, g_k_pref_simulacion) - trn.UNO) AS nom_columna,
                                                 a.val_columna
                                            FROM c2000000 a
                                           WHERE a.cod_cia        = p_cod_cia
                                             AND a.cod_ramo       = p_cod_ramo
                                             AND a.num_cotizacion = l_num_cotizacion
                                             AND (a.nom_columna   LIKE ('%NOM_MODALIDAD' || g_k_pref_simulacion || TO_CHAR(l_num_simulacion) || '%') OR
                                                  a.nom_columna   LIKE ('%COD_MODALIDAD' || g_k_pref_simulacion || TO_CHAR(l_num_simulacion) || '%') OR
                                                  a.nom_columna   LIKE ('%MCA_RASTREADOR' || g_k_pref_simulacion || TO_CHAR(l_num_simulacion) || '%')))
                                  PIVOT(MAX(val_columna) FOR nom_columna IN(
                                                                            'COD_MODALIDAD' AS cod_modalidad,
                                                                            'NOM_MODALIDAD' AS nom_modalidad,
                                                                            'MCA_RASTREADOR' AS mca_rast_obrig
                                                                           )
                                  )
                                  ORDER BY num_pacote),
                  c_recibos AS (SELECT trn.UNO                                            num_simulacion
                                      ,c.cod_fracc_pago                                   cod_fracc_pago
                                      ,k.val_campo_de_vcr                                 cod_forma_pago --v1.71
                                      ,c.num_cuota                                        qtd_parcelas
                                      ,CASE
                                       WHEN c.imp_interes +
                                            c.imp_imptos_interes > 0 THEN
                                         --
                                         'com juros'
                                         --
                                       ELSE
                                         --
                                         'sem juros'
                                         --
                                       END                                                nom_mca_juros
                                      --,c.imp_recibo           valor_total
                                      ,(SELECT SUM(imp_spto)
                                          FROM tron2000.c2109170_vcr y
                                         WHERE y.cod_cia        = c.cod_cia
                                           AND y.cod_ramo       = c.cod_ramo
                                           AND y.num_cotizacion = c.num_cotizacion
                                           AND y.num_riesgo     = trn.UNO
                                           AND y.num_simulacion = NVL(l_num_simulacion
                                                                     ,y.num_simulacion))  valor_total --v2.02
                                      , w.row_nam                                         forma_pagamento --v5.59
                                  FROM c2990700     c
                                      ,g9999021_vcr k --v1.95
                                      ,df_cmn_nwt_xx_vrb_cnc w --v5.59
                                 WHERE c.cod_cia          = p_cod_cia
                                   AND c.cod_ramo         = p_cod_ramo
                                   AND c.num_cotizacion   = l_num_cotizacion
                                   --v1.95 ini
                                   AND c.cod_cia          = k.cod_cia
                                   AND c.num_simulacion   = k.val_campo_para_vcr
                                   AND k.cod_ramo         = em.COD_RAMO_GEN
                                   AND k.cod_campo        = 'COD_FORMA_PAGTO'
                                   AND k.val_campo_de_vcr NOT IN ( g_k_cod_de_para_forma_pxpx, g_k_cod_de_para_forma_pxba, g_k_cod_de_para_forma_pxdb ) -- 5.30
                                   --v1.95 fim
                                   AND c.num_cuota      = (SELECT MAX(z.num_cuota)
                                                             FROM c2990700 z
                                                            WHERE z.cod_cia        = c.cod_cia
                                                              AND z.cod_ramo       = c.cod_ramo
                                                              AND z.num_cotizacion = c.num_cotizacion
                                                              AND z.num_simulacion = c.num_simulacion)
                                   -- v5.59 ini
                                   AND c.num_simulacion   = (SELECT MAX(x.num_simulacion)
                                                               FROM C2990700 x
                                                              WHERE x.cod_cia = c.cod_cia
                                                                AND x.cod_ramo = c.cod_ramo
                                                                AND x.num_cotizacion = c.num_cotizacion)
                                   AND c.cod_cia          = w.cmp_val
                                   AND c.cod_ramo         = w.lob_val
                                   AND c.num_simulacion   = w.cnc_vrb_val
                                   AND w.MDT_VAL          = 99999
                                   AND w.CRN_VAL          = 99
                                   AND w.CVR_VAL          = 9999
                                   AND w.FRS_LVL_VAL      = 99
                                   AND w.SCN_LVL_VAL      = 999
                                   AND w.THR_LVL_VAL      = 9999
                                   AND w.FRS_DST_HNL_VAL  = 'ZZZZ'
                                   AND w.SCN_DST_HNL_VAL  = 'ZZZZ'
                                   AND w.THR_DST_HNL_VAL  = 'ZZZZ'
                                   AND w.VRB_NAM          = 'GESTORES_X_PLANOS_PAGAMENTO'
                                   -- v5.59 fim
                              ORDER BY c.imp_recibo
                                      ,c.imp_interes +
                                       c.imp_imptos_interes),
                  c_franquia AS (SELECT v.num_simulacion,
                                        cc.nom_columna,
                                        cc.val_columna,
                                        g.nom_valor,
                                        v.val_franquicia_min
                                   FROM (SELECT c.cod_cia,
                                                c.cod_ramo,
                                                c.num_cotizacion,
                                                c.nom_columna,
                                                c.val_columna
                                           FROM c2000000 c
                                          WHERE c.cod_cia        = p_cod_cia
                                            AND c.cod_ramo       = p_cod_ramo
                                            AND c.num_cotizacion = l_num_cotizacion
                                            AND c.nom_columna    = 'TIP_FRANQUIA') cc
                                                INNER JOIN g2990006 g
                                                   ON g.cod_cia = cc.COD_CIA
                                                  AND g.cod_ramo = cc.COD_RAMO
                                                  AND g.cod_campo = cc.NOM_COLUMNA
                                                  AND g.cod_valor = cc.VAL_COLUMNA
                                                  AND g.cod_modalidad = 99999
                                                INNER JOIN c2009040_vcr v
                                                   ON v.cod_cia = cc.cod_cia
                                                  AND v.cod_ramo = cc.cod_ramo
                                                  AND v.num_cotizacion = cc.num_cotizacion
                                                  AND v.cod_franquicia = 998
                                                  AND v.cod_cob        = g_k_cob_casco
                                                  AND v.num_simulacion = NVL(l_num_simulacion, v.num_simulacion)
                                 ORDER BY num_simulacion),
                  -- v3.42 ini
                  c_qtd AS (SELECT MAX(x.contador_casco) contador_casco
                                 , x.num_simulacion      num_simulacion
                              FROM (SELECT COUNT(COD_COB)            contador_casco
                                         , NVL(MAX(c.num_simulacion)
                                                  ,trn.UNO)          num_simulacion
                                      FROM tron2000.c2009040_vcr c
                                     WHERE c.cod_cia        = p_cod_cia
                                       AND c.cod_ramo       = p_cod_ramo
                                       AND c.num_simulacion = NVL(l_num_simulacion, c.num_simulacion) --v4.56
                                       AND c.num_cotizacion = l_num_cotizacion
                                       AND c.cod_cob        IN (201
                                                               ,202
                                                               ,203
                                                               ,218)) x
                               GROUP BY x.num_simulacion),
                  cDesc AS (SELECT CASE
                                     WHEN contador_casco = 4 THEN
                                      (SELECT val_columna
                                         FROM tron2000.g2009017_vcr -- I 4.94 Alteracao das descricoes das coberturas
                                        WHERE cod_cia      = p_cod_cia
                                          AND cod_ramo     = p_cod_ramo
                                          AND nom_columna  = 'NOM_COB_AGRUPADA'
                                          AND cod_valor    = '1'
                                          AND mca_baja     = trn.NO
                                          AND fec_validez <= TRUNC(SYSDATE))
                                     WHEN contador_casco = 3 THEN
                                      (SELECT val_columna
                                         FROM tron2000.g2009017_vcr -- I 4.94 Alteracao das descricoes das coberturas
                                        WHERE cod_cia      = p_cod_cia
                                          AND cod_ramo     = p_cod_ramo
                                          AND nom_columna  = 'NOM_COB_AGRUPADA'
                                          AND cod_valor    = '2'
                                          AND mca_baja     = trn.NO
                                          AND fec_validez <= TRUNC(SYSDATE))
                                     WHEN contador_casco = 2 THEN
                                      (SELECT val_columna
                                         FROM tron2000.g2009017_vcr -- I 4.94 Alteracao das descricoes das coberturas
                                        WHERE cod_cia      = p_cod_cia
                                          AND cod_ramo     = p_cod_ramo
                                          AND nom_columna  = 'NOM_COB_AGRUPADA'
                                          AND cod_valor    = '3'
                                          AND mca_baja     = trn.NO
                                          AND fec_validez <= TRUNC(SYSDATE))
                                     WHEN contador_casco = 0 THEN
                                      (SELECT val_columna
                                         FROM tron2000.g2009017_vcr -- I 4.94 Alteracao das descricoes das coberturas
                                        WHERE cod_cia      = p_cod_cia
                                          AND cod_ramo     = p_cod_ramo
                                          AND nom_columna  = 'TIP_MERC_DETER'
                                          AND cod_valor    = 'R'
                                          AND mca_baja     = trn.NO
                                          AND fec_validez <= TRUNC(SYSDATE))
                                   END AS nom_casco_agrup,
                                   num_simulacion
                              FROM c_qtd),
                  --v3.42 fim
             c_tip_desconto AS (SELECT c.cod_cia,
                                            c.cod_ramo,
                                            c.num_cotizacion,
                                            c.nom_columna,
                                           c.val_columna
                                           FROM c2000000 c
                                          WHERE c.cod_cia        = p_cod_cia
                                            AND c.cod_ramo       = p_cod_ramo
                                            AND c.num_cotizacion = l_num_cotizacion
                                            AND c.nom_columna    = 'TIP_DESCONTO' )
             SELECT m.cod_modalidad                                       AS cod_pacote,
                    m.nom_modalidad                                       AS nom_pacote,
                    s.nom_casco_agrup                                     AS des_pacote, --v3.42
                    CASE
                      WHEN f.nom_valor IS NOT NULL THEN
                       l_txt_tip_de || f.nom_valor || ' ' || 'R$ '||  TO_CHAR(f.val_franquicia_min, 'FM999G999G999D90', 'nls_numeric_characters='',.''')
                      ELSE
                       ''
                    END                                                   AS des_franquia_total,
                    to_char(r.valor_total)                                        AS des_premio_total, --3.95
                    CASE
                      WHEN r.qtd_parcelas IS NOT NULL
                      THEN
                        --
                        ss_k_mensaje.f_solo_texto_idioma(20099215, trn_k_global.cod_idioma)
                           ||trn.BLANCO||r.qtd_parcelas||'X'||trn.BLANCO||r.nom_mca_juros||' NO '||r.forma_pagamento --v5.59
                        --
                      ELSE
                        --
                        trn.NULO
                        --
                    END                                                   AS des_parcelamento,
                    m.mca_rast_obrig                                      AS des_rastreador_obrigatorio,
                    DECODE(l_mca_renovacion
                          ,trn.SI
                          ,trn.UNO
                          ,l_num_cotizacion || m.num_pacote)              AS cod_nro_simulacao, --v3.80
                    l_txt_num_cotizacion  || ' ' || l_num_cotizacion      AS des_nro_simulacao, -- 2.45
                    d.val_columna
               FROM g2990004 g
                    INNER JOIN c_modalidad m
                               ON (m.cod_modalidad = g.cod_modalidad)
                    INNER JOIN c_recibos r
                               ON (r.num_simulacion = l_num_simulacion) -- 3.95
                    LEFT OUTER JOIN c_franquia f
                               ON (f.num_simulacion = l_num_simulacion) -- 3.95
                    LEFT OUTER JOIN c_tip_desconto d
                               ON (d.num_cotizacion = l_num_cotizacion)
                    LEFT OUTER JOIN cDesc s
                               ON (s.num_simulacion = l_num_simulacion) --v3.42 -- 3.95
              WHERE g.cod_cia        = p_cod_cia
                AND r.num_simulacion = l_num_simulacion -- 3.95
                AND g.fec_validez    = (SELECT MAX(fec_validez)
                                          FROM g2990004 gg
                                         WHERE gg.cod_cia = g.cod_cia
                                           AND gg.cod_modalidad = g.cod_modalidad)
            ORDER BY cod_nro_simulacao;
            --
            ELSE -- I 2.14

            --
            mx('-', 'l_eh_3_pacotes --> TRUE');
            --
            OPEN l_retorno_pacote
            FOR  -- I 2.14
             WITH c_pacote_franquia AS (SELECT SUBSTR(a.nom_columna,
                                                      INSTR(a.nom_columna, '#') + 1,
                                                      LENGTH(a.nom_columna))  AS num_simulacion,
                                                      a.val_columna,
                                                      a.nom_columna,
                                               SUBSTR(a.nom_columna,
                                                      1,
                                                      INSTR(a.nom_columna, '#') - 1)  AS nom_orig
                                         FROM c2000000 a
                                        WHERE a.cod_cia        = p_cod_cia
                                          AND a.cod_ramo       = p_cod_ramo
                                          AND a.num_cotizacion = l_num_cotizacion
                                          AND (a.nom_columna   LIKE ('TIP_FRANQUIA' || g_k_pref_simulacion || TO_CHAR(l_num_simulacion) || '%')  )    ),
                  c_num_simulacoes AS (SELECT  SUBSTR(a.nom_columna,
                                                  INSTR(a.nom_columna, '#') + 1,
                                                  LENGTH(nom_columna))  AS num_simulacion,
                                                  val_columna,a.nom_columna
                                           FROM c2000000 a
                                          WHERE a.cod_cia        = p_cod_cia
                                            AND a.cod_ramo       = p_cod_ramo
                                            AND a.num_cotizacion = l_num_cotizacion
                                            AND (a.nom_columna   LIKE ('NUM_SIMULACION' || g_k_pref_simulacion || TO_CHAR(l_num_simulacion) || '%')  )    )   ,   -- f 2.14
                  c_qtd AS (SELECT COUNT(COD_COB) contador_casco
                                 , m.num_simulacion -- I 2.48
                              FROM c2009040_vcr c
                                 , c_num_simulacoes m
                             WHERE c.cod_cia        (+) = p_cod_cia
                               AND c.cod_ramo       (+) = p_cod_ramo
                               AND c.num_simulacion (+) = M.num_simulacion
                               AND c.num_cotizacion (+) = l_num_cotizacion
                               AND c.cod_cob        (+) IN (201
                                                           ,202
                                                           ,203
                                                           ,218)
                             GROUP BY m.num_simulacion),
                  cDesc AS (SELECT CASE
                                     WHEN contador_casco = 4 THEN
                                      (SELECT val_columna
                                         FROM tron2000.g2009017_vcr -- I 4.94 Alteracao das descricoes das coberturas
                                        WHERE cod_cia      = p_cod_cia
                                          AND cod_ramo     = p_cod_ramo
                                          AND nom_columna  = 'NOM_COB_AGRUPADA'
                                          AND cod_valor    = '1'
                                          AND mca_baja     = trn.NO
                                          AND fec_validez <= TRUNC(SYSDATE))
                                     WHEN contador_casco = 3 THEN
                                      (SELECT val_columna
                                         FROM tron2000.g2009017_vcr -- I 4.94 Alteracao das descricoes das coberturas
                                        WHERE cod_cia      = p_cod_cia
                                          AND cod_ramo     = p_cod_ramo
                                          AND nom_columna  = 'NOM_COB_AGRUPADA'
                                          AND cod_valor    = '2'
                                          AND mca_baja     = trn.NO
                                          AND fec_validez <= TRUNC(SYSDATE))
                                     WHEN contador_casco = 2 THEN
                                      (SELECT val_columna
                                         FROM tron2000.g2009017_vcr -- I 4.94 Alteracao das descricoes das coberturas
                                        WHERE cod_cia      = p_cod_cia
                                          AND cod_ramo     = p_cod_ramo
                                          AND nom_columna  = 'NOM_COB_AGRUPADA'
                                          AND cod_valor    = '3'
                                          AND mca_baja     = trn.NO
                                          AND fec_validez <= TRUNC(SYSDATE))
                                     WHEN contador_casco = 0 THEN --v3.42
                                      (SELECT val_columna
                                         FROM tron2000.g2009017_vcr -- I 4.94 Alteracao das descricoes das coberturas
                                        WHERE cod_cia      = p_cod_cia
                                          AND cod_ramo     = p_cod_ramo
                                          AND nom_columna  = 'TIP_MERC_DETER'
                                          AND cod_valor    = 'R'
                                          AND mca_baja     = trn.NO
                                          AND fec_validez <= TRUNC(SYSDATE))
                                   END AS nom_casco_agrup,
                                   num_simulacion
                              FROM c_qtd),
                  c_modalidad AS (SELECT num_pacote,
                                         cod_modalidad,
                                         nom_modalidad,
                                         mca_rast_obrig,
                                         val_clave_formula -- 2.14
                                    FROM (SELECT SUBSTR(a.nom_columna,
                                                        INSTR(a.nom_columna, g_k_pref_simulacion) + trn.UNO,
                                                        LENGTH(nom_columna))                                 AS num_pacote,
                                                 SUBSTR(a.nom_columna,
                                                        trn.CERO,
                                                        INSTR(a.nom_columna, g_k_pref_simulacion) - trn.UNO) AS nom_columna,
                                                 a.val_columna
                                            FROM c2000000 a
                                           WHERE a.cod_cia        = p_cod_cia
                                             AND a.cod_ramo       = p_cod_ramo
                                             AND a.num_cotizacion = l_num_cotizacion
                                             AND (a.nom_columna   LIKE ('%NOM_MODALIDAD' || g_k_pref_simulacion || TO_CHAR(l_num_simulacion) || '%') OR
                                                  a.nom_columna   LIKE ('%COD_MODALIDAD' || g_k_pref_simulacion || TO_CHAR(l_num_simulacion) || '%') OR
                                                  a.nom_columna   LIKE ('%MCA_RASTREADOR' || g_k_pref_simulacion || TO_CHAR(l_num_simulacion) || '%') OR
                                                  a.nom_columna   LIKE ('%VAL_CLAVE_FORMULA' || g_k_pref_simulacion || TO_CHAR(l_num_simulacion) || '%')))
                                  PIVOT(MAX(val_columna) FOR nom_columna IN(
                                                                            'COD_MODALIDAD' AS cod_modalidad,
                                                                            'NOM_MODALIDAD' AS nom_modalidad,
                                                                            'MCA_RASTREADOR' AS mca_rast_obrig,
                                                                            'VAL_CLAVE_FORMULA' as val_clave_formula -- 2.14
                                                                           )
                                  )
                                  ORDER BY num_pacote),
                  c_recibos AS (SELECT * FROM ( SELECT d.num_simulacion               num_simulacion  -- 2.14
                                      ,c.cod_fracc_pago       cod_fracc_pago
                                      ,k.val_campo_de_vcr cod_forma_pago --v2.78
                                      ,c.num_cuota            qtd_parcelas
                                      ,CASE
                                       WHEN c.imp_interes +
                                            c.imp_imptos_interes > 0 THEN
                                         --
                                         'com juros'
                                         --
                                       ELSE
                                         --
                                         'sem juros'
                                         --
                                       END                    nom_mca_juros
                                      ,c.imp_recibo           valor_total
                                      ,c.imp_recibo -- 2.14
                                      ,c.imp_interes  -- 2.14
                                      ,c.imp_imptos_interes -- 2.14
                                  FROM c2990700 c, c_num_simulacoes d,g9999021_vcr k -- 2.78 -- 2.14
                                  --       (SELECT d.val_columna -- 2.14
                                  --         FROM c2000000 d
                                  --        WHERE d.cod_cia        = p_cod_cia -- 2.14
                                  --          AND d.cod_ramo       = p_cod_ramo -- 2.14
                                  --          AND d.num_cotizacion = l_num_cotizacion -- 2.14
                                  --          AND d.nom_columna    = 'NUM_SIMULACION#1' ) d -- 2.14
                                 WHERE c.cod_cia        = p_cod_cia
                                   AND c.cod_ramo       = p_cod_ramo
                                   AND c.num_cotizacion = d.val_columna -- 2.14
--                                   AND c.num_simulacion = (in (l_ituran, 99) -- { v 5.28  --v2.87 -- 5.01
                                   AND c.num_simulacion = ( SELECT MAX ( c1.num_simulacion )
                                                              FROM c2990700 c1
                                                             WHERE c1.cod_cia        = c.cod_cia
                                                               AND c1.cod_ramo       = c.cod_ramo
                                                               AND c1.num_cotizacion = c.num_cotizacion ) -- } v 5.28
                                   AND c.cod_cia        = k.cod_cia --2.78
                                   AND c.num_simulacion = k.val_campo_para_vcr--2.78
                                   AND k.cod_ramo       = em.COD_RAMO_GEN--2.78
                                   AND k.cod_campo      = 'COD_FORMA_PAGTO'      --2.78
                                   AND k.val_campo_de_vcr NOT IN ( g_k_cod_de_para_forma_pxpx, g_k_cod_de_para_forma_pxba, g_k_cod_de_para_forma_pxdb ) -- 5.30
                                   AND c.num_cuota      = (SELECT MAX(z.num_cuota)
                                                             FROM c2990700 z
                                                            WHERE z.cod_cia        = c.cod_cia
                                                              AND z.cod_ramo       = c.cod_ramo
                                                              AND z.num_cotizacion = c.num_cotizacion
                                                              AND z.num_simulacion = c.num_simulacion)
                                                             )  c  --F 2.14
                              ORDER BY c.imp_recibo
                                      ,c.imp_interes +
                                       c.imp_imptos_interes),
                  c_franquia AS (SELECT v.num_simulacion,
                                        cc.nom_columna,
                                        cc.val_columna,
                                        g.nom_valor,
                                        v.val_franquicia_min
                                   FROM (SELECT c.cod_cia,
                                                c.cod_ramo,
                                                c.num_cotizacion,
                                                c.nom_columna,
                                                d.val_columna, --1,84
                                                d.nom_orig,  --1,84
                                                d.num_simulacion   --1,84
                                           FROM c2000000 c,c_pacote_franquia d
                                          WHERE c.cod_cia        = p_cod_cia
                                            AND c.cod_ramo       = p_cod_ramo
                                            AND c.num_cotizacion = l_num_cotizacion
                                            AND c.nom_columna    = d.nom_columna ) cc --'TIP_FRANQUIA') cc 2.14
                                                INNER JOIN g2990006 g
                                                   ON g.cod_cia = cc.COD_CIA
                                                  AND g.cod_ramo = cc.COD_RAMO
                                                  AND g.cod_campo = cc.nom_orig -- 2.14 NOM_COLUMNA
                                                  AND g.cod_valor = cc.VAL_COLUMNA
                                                  AND g.cod_modalidad = 99999
                                                INNER JOIN c2009040_vcr v
                                                   ON v.cod_cia = cc.cod_cia
                                                  AND v.cod_ramo = cc.cod_ramo
                                                  AND v.num_cotizacion = cc.num_cotizacion
                                                  AND v.cod_franquicia = 998
                                                  AND v.cod_cob = g_k_cob_casco --2.64
                                                  AND v.num_simulacion = NVL(l_num_simulacion, v.num_simulacion)
                                                  AND v.num_simulacion = cc.num_simulacion
                                 ORDER BY num_simulacion),
             c_tip_desconto AS (SELECT c.cod_cia,
                                            c.cod_ramo,
                                            c.num_cotizacion,
                                            c.nom_columna,
                                           c.val_columna
                                           FROM c2000000 c
                                          WHERE c.cod_cia        = p_cod_cia
                                            AND c.cod_ramo       = p_cod_ramo
                                            AND c.num_cotizacion = l_num_cotizacion
                                            AND c.nom_columna    = 'TIP_DESCONTO' )
             SELECT f_trata_nom_pacote(m.val_clave_formula) AS cod_pacote, --v2.87
                    f_trata_nom_pacote(m.val_clave_formula) AS nom_pacote, --v2.87
                    s.nom_casco_agrup    AS des_pacote, -- 2.48
                    CASE
                      WHEN f.nom_valor IS NOT NULL THEN
                       l_txt_tip_de || f.nom_valor || ' ' || 'R$ '||  TO_CHAR(f.val_franquicia_min, 'FM999G999G999D90', 'nls_numeric_characters='',.''')
                      ELSE
                       ' '
                    END                                                   AS des_franquia_total,
                    r.valor_total                                         AS des_premio_total,
                    CASE
                      WHEN r.qtd_parcelas IS NOT NULL
                      THEN
                        --
                        ss_k_mensaje.f_solo_texto_idioma(20099215, trn_k_global.cod_idioma)
                           ||trn.BLANCO||r.qtd_parcelas||'X'||trn.BLANCO||r.nom_mca_juros||
                        ss_k_mensaje.f_solo_texto_idioma(20099210, trn_k_global.cod_idioma)
                        --
                      ELSE
                        --
                        trn.NULO
                        --
                    END                                                              AS des_parcelamento,
                    NVL(m.mca_rast_obrig, 'N')                                       AS des_rastreador_obrigatorio,
                    l_num_cotizacion || m.num_pacote                                 AS cod_nro_simulacao,
                    l_txt_num_cotizacion  || ' ' || l_num_cotizacion || m.num_pacote AS des_nro_simulacao,--2.39 --2.45
                    d.val_columna
               FROM g2990004 g
                    INNER JOIN c_modalidad m
                               ON (m.cod_modalidad = g.cod_modalidad)
                    INNER JOIN c_recibos r
                               ON (r.num_simulacion = m.num_pacote)
                    LEFT OUTER JOIN c_franquia f
                               ON (f.num_simulacion = m.num_pacote)
                    LEFT OUTER JOIN c_tip_desconto d
                               ON (d.num_cotizacion = l_num_cotizacion)
          LEFT OUTER JOIN cDesc s -- 2.48
                               ON (s.num_simulacion = m.num_pacote) -- 2.48
              WHERE g.cod_cia        = p_cod_cia
                AND r.num_simulacion = m.num_pacote
                AND g.fec_validez    = (SELECT MAX(fec_validez)
                                          FROM g2990004 gg
                                         WHERE gg.cod_cia = g.cod_cia
                                           AND gg.cod_modalidad = g.cod_modalidad)
            ORDER BY cod_nro_simulacao;
            END IF; -- F 2.14
            --
            trn_k_global.asigna('num_cotizacion',p_num_cotizacion);
            trn_k_global.asigna('cod_ramo',p_cod_ramo);
            trn_k_global.asigna('cod_cia',p_cod_cia);
            --
            IF NVL(l_mca_renovacion, trn.NO) = trn.SI
            THEN --v3.80
              --
              trn_k_global.asigna('tres_pacotes', trn.UNO);
              --
            END IF;
            --
            l_reg_a2992131 := em_k_a2992131.f_tip_existe_recusa(p_cod_cia        => p_cod_cia       ,
                                                                p_num_cotacao    => p_num_cotizacion,
                                                                p_num_poliza     => NULL            ,
                                                                p_num_spto       => trn.CERO        ,
                                                                p_num_apli       => trn.CERO        ,
                                                                p_num_spto_apli  => trn.CERO        ,
                                                                p_tip_emision    => p_tip_mvto_batch);
            --
            l_tip_situ      := nvl(l_reg_a2992131.tip_situ_bo, trn.TRES);
            l_agrup_recusa  := nvl(l_reg_a2992131.tip_agrup_recusa,'EXC');
            --
            IF (l_tip_situ = 7 AND l_agrup_recusa = 'EXC')
            THEN
               --
               p_xml := NULL;
               --
            ELSE
               --
               p_gerar_xml_pacote_cobertura(l_retorno_pacote, p_xml);
               --
            END IF;
            --
          ELSE
            --
            IF g_mca_existe_bo = trn.NO
              THEN
              --
              mx('-', 'ENTRA A pp_borra_tablas_cotizacion');
              --
              pp_borra_tablas_cotizacion(p_cod_cia
                                      ,p_cod_ramo
                                      ,p_cod_tarifa
                                      ,p_cod_agt
                                      ,l_num_cotizacion
                                      ,l_num_simulacion
                                      ,p_num_poliza_grupo
                                      ,p_num_contrato
                                      ,p_num_subcontrato
                                      ,p_num_paso
                                      ,g_tip_mvto_batch);
            --
            END IF;
            --
          END IF;
          --
       ELSIF l_tip_mvto_batch = g_k_tip_mvto_batch_endosso THEN
          --
          IF p_xml_in IS NULL THEN
             --
             l_num_cotizacion     := p_num_cotizacion;
             --
          ELSE
             --
             l_num_cotizacion     := fp_recupera_valor (p_xml_in, 'NUM_COTIZACION');
             --
             l_num_simulacion     := fp_recupera_valor (p_xml_in, 'NUM_SIMULACION');
             --

          END IF;
          --
          IF NOT l_eh_3_pacotes THEN -- 2.85
            --
            OPEN l_retorno_pacote
             FOR
              --
              WITH c_modalidad AS (SELECT num_propuesta num_simulacion,
                                          cod_modalidad,
                                          mca_rast_obrig,
                                          num_presupuesto --v1.92
                                     FROM (SELECT a.num_propuesta,
                                                  a.cod_campo     AS nom_columna,
                                                  a.val_campo     AS val_columna
                                             FROM a2000560 a
                                            WHERE a.cod_cia       = p_cod_cia
                                              AND a.num_propuesta = l_num_cotizacion
                                              AND a.cod_campo IN ('COD_MODALIDAD', 'MCA_RASTREADOR','DFNUM_PRESUPUESTO'))
                                             PIVOT(MAX(val_columna) FOR nom_columna IN('COD_MODALIDAD'  AS cod_modalidad,
                                                                                       'MCA_RASTREADOR' AS mca_rast_obrig,
                                                                                       'DFNUM_PRESUPUESTO' AS num_presupuesto) --v1.92
                                                  )),
                   c_recibos AS (SELECT trn.UNO                                                      num_simulacion
                                       ,c.num_cotizacion                                             num_cotizacion
                                       ,c.cod_fracc_pago                                             cod_fracc_pago
                                       ,k.val_campo_de_vcr                                           cod_forma_pago --v1.71
                                       ,c.num_cuota                                                  qtd_parcelas
                                       ,CASE
                                        WHEN c.imp_interes +
                                             c.imp_imptos_interes > 0 THEN
                                          --
                                          'com juros'
                                          --
                                        ELSE
                                          --
                                          'sem juros'
                                          --
                                        END                                                          nom_mca_juros
                                       --,c.imp_recibo           valor_total
                                       ,(SELECT SUM(imp_spto)
                                           FROM a2100170 y
                                          WHERE y.cod_cia    = c.cod_cia
                                            AND y.cod_ramo   = c.cod_ramo
                                            AND y.num_poliza = l_num_cotizacion
                                            AND y.num_riesgo = trn.UNO
                                            AND y.num_spto   = (SELECT MAX(num_spto)
                                                                  FROM a2100170 z
                                                               WHERE z.cod_cia    = y.cod_cia
                                                                 AND z.cod_ramo   = y.cod_ramo
                                                                 AND z.num_poliza = y.num_poliza
                                                                 AND z.num_riesgo = y.num_riesgo)) valor_total --v2.02
                                   FROM c2990700     c
                                       ,c_modalidad  a --v1.92
                                       ,g9999021_vcr k --v1.95
                                  WHERE c.cod_cia        = p_cod_cia
                                    AND c.cod_ramo       = p_cod_ramo
                                    AND c.num_cotizacion = a.num_presupuesto --v1.69 = l_num_cotizacion
                                    AND c.num_simulacion = ( SELECT MAX ( c1.num_simulacion )              -- { v 5.28 -- = 99
                                                               FROM c2990700 c1
                                                              WHERE c1.cod_cia        = c.cod_cia
                                                                AND c1.cod_ramo       = c.cod_ramo
                                                                AND c1.num_cotizacion = c.num_cotizacion ) -- } v 5.28
                                    -- v1.95 ini
                                    AND c.cod_cia        = k.cod_cia
                                    AND c.num_simulacion = k.val_campo_para_vcr
                                    AND k.cod_ramo       = em.COD_RAMO_GEN
                                    AND k.cod_campo      = 'COD_FORMA_PAGTO'
                                    AND k.val_campo_de_vcr NOT IN ( g_k_cod_de_para_forma_pxpx, g_k_cod_de_para_forma_pxba, g_k_cod_de_para_forma_pxdb ) -- 5.30
                                    -- v1.95 fim
                                    AND c.num_cuota      = (SELECT MAX(z.num_cuota)
                                                              FROM c2990700 z
                                                             WHERE z.cod_cia        = c.cod_cia
                                                               AND z.cod_ramo       = c.cod_ramo
                                                               AND z.num_cotizacion = c.num_cotizacion
                                                               AND z.num_simulacion = c.num_simulacion)
                               ORDER BY c.imp_recibo
                                       ,c.imp_interes +
                                        c.imp_imptos_interes),
                   c_franquia AS (SELECT v.num_poliza num_simulacion,
                                         cc.nom_columna,
                                         cc.val_columna,
                                         g.nom_valor,
                                         v.val_franquicia_min
                                    FROM (SELECT c.cod_cia,
                                                 c.num_propuesta num_cotizacion,
                                                 substr(c.cod_campo,1,12) nom_columna,
                                                 c.val_campo     val_columna
                                            FROM a2000560 c
                                           WHERE c.cod_cia        = p_cod_cia
                                             AND c.num_propuesta  = l_num_cotizacion
                                             AND c.cod_campo      = g_k_tip_franquia_201) cc
                                                 INNER JOIN g2990006 g
                                                    ON g.cod_cia       = cc.COD_CIA
                                                   AND g.cod_ramo      = p_cod_ramo
                                                  AND g.cod_campo     = cc.NOM_COLUMNA
                                                   AND g.cod_valor     = cc.VAL_COLUMNA
                                                   AND g.cod_modalidad = g_k_cod_modalidade
                                                 INNER JOIN a2000040 v
                                                    ON v.cod_cia        = cc.cod_cia
                                                   AND v.cod_ramo       = p_cod_ramo
                                                   AND v.num_poliza     = cc.num_cotizacion
                                                   AND v.cod_cob        = g_k_cob_casco
                                                   AND v.cod_franquicia = 998
                                                   AND v.mca_vigente    = trn.SI
                                  ORDER BY num_simulacion),
                   c_tip_desconto AS (SELECT c.cod_cia,
                                             p_cod_ramo      cod_ramo,
                                             c.num_propuesta num_cotizacion,
                                             c.cod_campo     nom_columna,
                                             c.val_campo     val_columna
                                       FROM a2000560 c
                                      WHERE c.cod_cia       = p_cod_cia
                                        AND c.num_propuesta = l_num_cotizacion
                                        AND c.cod_campo     = 'TIP_DESCONTO' )
              SELECT m.cod_modalidad                                       AS cod_pacote,
                     f_trata_nom_pacote(mo.nom_modalidad) AS nom_pacote, --v2.87
                     mo.nom_cor_modalidad                                  AS des_pacote,
                     CASE
                       WHEN f.nom_valor IS NOT NULL THEN
                        l_txt_tip_de || f.nom_valor || ' ' || 'R$ '||  TO_CHAR(f.val_franquicia_min, 'FM999G999G999D90', 'nls_numeric_characters='',.''')
                       ELSE
                        trn.NULO
                     END                                                   AS des_franquia_total,
                     NVL(r.valor_total, 0)                                 AS des_premio_total,
                     CASE
                       WHEN r.qtd_parcelas IS NOT NULL
                       THEN
                         --
                         ss_k_mensaje.f_solo_texto_idioma(20099215, trn_k_global.cod_idioma)
                         || trn.BLANCO ||r.qtd_parcelas||'X'|| trn.BLANCO ||r.nom_mca_juros||
                         ss_k_mensaje.f_solo_texto_idioma(20099210, trn_k_global.cod_idioma)
                         --
                       ELSE
                         --
                         trn.NULO
                         --
                     END                                                   AS des_parcelamento,
                   m.mca_rast_obrig                                      AS des_rastreador_obrigatorio,
                     l_num_cotizacion                                      AS cod_nro_simulacao,
                     l_txt_num_cotizacion || ' ' || l_num_cotizacion       AS des_nro_simulacao, -- 2.45
                     d.val_columna
               FROM g2990004 mo
                    INNER JOIN c_modalidad m
                               ON (m.cod_modalidad  = mo.cod_modalidad)
                    LEFT OUTER JOIN c_recibos r
                               ON (r.num_simulacion = trn.UNO  AND
                                   r.num_cotizacion = m.num_presupuesto) --v1.92 = m.num_simulacion
                    LEFT OUTER JOIN c_franquia f
                               ON (f.num_simulacion = m.num_simulacion)
                    LEFT OUTER JOIN c_tip_desconto d
                               ON (d.num_cotizacion = l_num_cotizacion)
              WHERE mo.cod_cia       = p_cod_cia
                AND mo.fec_validez   = (SELECT MAX(fec_validez)
                                          FROM g2990004 gg
                                         WHERE gg.cod_cia       = mo.cod_cia
                                           AND gg.cod_modalidad = mo.cod_modalidad)
              ORDER BY cod_nro_simulacao;
            --
            ELSE --I 2.84
            --
              OPEN l_retorno_pacote
               FOR
                --
                WITH c_modalidad AS (SELECT num_propuesta num_simulacion,
                                            cod_modalidad,
                                            mca_rast_obrig,
                                            num_presupuesto, --v1.92
                                            val_clave_formula
                                       FROM (SELECT a.num_propuesta,
                                                    a.cod_campo     AS nom_columna,
                                                    a.val_campo     AS val_columna
                                               FROM a2000560 a
                                              WHERE a.cod_cia       = p_cod_cia
                                                AND a.num_propuesta = l_num_cotizacion
                                                AND a.cod_campo IN ('COD_MODALIDAD', 'MCA_RASTREADOR','DFNUM_PRESUPUESTO','VAL_CLAVE_FORMULA'))
                                               PIVOT(MAX(val_columna) FOR nom_columna IN('COD_MODALIDAD'  AS cod_modalidad,
                                                                                         'MCA_RASTREADOR' AS mca_rast_obrig,
                                                                                         'DFNUM_PRESUPUESTO' AS num_presupuesto,
                                                                                         'VAL_CLAVE_FORMULA' AS val_clave_formula) --v1.92
                                                    )),
                     c_qtd AS (SELECT COUNT(COD_COB) contador_casco, trn.UNO num_simulacion -- I 2.48
                       FROM a2000040 c
                        WHERE c.cod_cia = p_cod_cia
                        AND c.num_spto  = (SELECT MAX(num_spto)
                                             FROM a2100170 z
                                            WHERE z.cod_cia    = c.cod_cia
                                              AND z.cod_ramo   = c.cod_ramo
                                              AND z.num_poliza = c.num_poliza
                                              AND z.num_riesgo = trn.UNO)
                        AND c.num_poliza = l_num_cotizacion
                        AND c.cod_cob IN (201, 202, 203, 218)
                        GROUP BY c.num_poliza),
                     cDesc AS (SELECT CASE
                            WHEN contador_casco = 4 THEN
                           (SELECT val_columna
                              FROM g2009017_vcr -- I 4.94 Alteracao das descricoes das coberturas
                             WHERE cod_cia = p_cod_cia
                             AND cod_ramo = p_cod_ramo
                             AND nom_columna = 'NOM_COB_AGRUPADA'
                             AND cod_valor = '1'
                             AND mca_baja = trn.NO
                             AND fec_validez <= trunc(SYSDATE))
                            WHEN contador_casco = 3 THEN
                           (SELECT val_columna
                              FROM g2009017_vcr -- I 4.94 Alteracao das descricoes das coberturas
                             WHERE cod_cia = p_cod_cia
                             AND cod_ramo = p_cod_ramo
                             AND nom_columna = 'NOM_COB_AGRUPADA'
                             AND cod_valor = '2'
                             AND mca_baja = trn.NO
                             AND fec_validez <= trunc(SYSDATE))
                            WHEN contador_casco = 2 THEN
                           (SELECT val_columna
                              FROM g2009017_vcr -- I 4.94 Alteracao das descricoes das coberturas
                             WHERE cod_cia = p_cod_cia
                             AND cod_ramo = p_cod_ramo
                             AND nom_columna = 'NOM_COB_AGRUPADA'
                             AND cod_valor = '3'
                             AND mca_baja = trn.NO
                             AND fec_validez <= trunc(SYSDATE))
                          END AS nom_casco_agrup,
                          num_simulacion
                       FROM c_qtd),
                     c_recibos AS (SELECT trn.UNO                                                      num_simulacion
                                         ,c.num_cotizacion                                             num_cotizacion
                                         ,c.cod_fracc_pago                                             cod_fracc_pago
                                         ,k.val_campo_de_vcr                                           cod_forma_pago --v1.71
                                         ,c.num_cuota                                                  qtd_parcelas
                                         ,CASE
                                          WHEN c.imp_interes +
                                               c.imp_imptos_interes > 0 THEN
                                            --
                                            'com juros'
                                            --
                                          ELSE
                                            --
                                            'sem juros'
                                            --
                                          END                                                          nom_mca_juros
                                         --,c.imp_recibo           valor_total
                                         ,(SELECT SUM(imp_spto)
                                             FROM a2100170 y
                                            WHERE y.cod_cia    = c.cod_cia
                                              AND y.cod_ramo   = c.cod_ramo
                                              AND y.num_poliza = l_num_cotizacion
                                              AND y.num_riesgo = trn.UNO
                                              AND y.num_spto   = (SELECT MAX(num_spto)
                                                                    FROM a2100170 z
                                                                   WHERE z.cod_cia    = y.cod_cia
                                                                     AND z.cod_ramo   = y.cod_ramo
                                                                     AND z.num_poliza = y.num_poliza
                                                                     AND z.num_riesgo = y.num_riesgo)) valor_total --v2.02
                                     FROM c2990700     c
                                         ,c_modalidad  a --v1.92
                                         ,g9999021_vcr k --v1.95
                                    WHERE c.cod_cia        = p_cod_cia
                                      AND c.cod_ramo       = p_cod_ramo
                                      AND c.num_cotizacion = a.num_presupuesto --v1.69 = l_num_cotizacion
                                      AND c.num_simulacion = ( SELECT MAX ( c1.num_simulacion )              -- { v 5.28 -- = 99
                                                                 FROM c2990700 c1
                                                                WHERE c1.cod_cia        = c.cod_cia
                                                                  AND c1.cod_ramo       = c.cod_ramo
                                                                  AND c1.num_cotizacion = c.num_cotizacion ) -- } v 5.28
                                      -- v1.95 ini
                                      AND c.cod_cia        = k.cod_cia
                                      AND c.num_simulacion = k.val_campo_para_vcr
                                      AND k.cod_ramo       = em.COD_RAMO_GEN
                                      AND k.cod_campo      = 'COD_FORMA_PAGTO'
                                      -- v1.95 fim
                                      AND k.val_campo_de_vcr NOT IN ( g_k_cod_de_para_forma_pxpx, g_k_cod_de_para_forma_pxba, g_k_cod_de_para_forma_pxdb ) -- 5.30
                                      AND c.num_cuota      = (SELECT MAX(z.num_cuota)
                                                                FROM c2990700 z
                                                               WHERE z.cod_cia        = c.cod_cia
                                                                 AND z.cod_ramo       = c.cod_ramo
                                                                 AND z.num_cotizacion = c.num_cotizacion
                                                                 AND z.num_simulacion = c.num_simulacion)
                                 ORDER BY c.imp_recibo
                                         ,c.imp_interes +
                                          c.imp_imptos_interes),
                     c_franquia AS (SELECT v.num_poliza num_simulacion,
                                           cc.nom_columna,
                                           cc.val_columna,
                                           g.nom_valor,
                                           v.val_franquicia_min
                                      FROM (SELECT c.cod_cia,
                                                   c.num_propuesta num_cotizacion,
                                                   substr(c.cod_campo,1,12) nom_columna,
                                                   c.val_campo     val_columna
                                              FROM a2000560 c
                                             WHERE c.cod_cia        = p_cod_cia
                                               AND c.num_propuesta  = l_num_cotizacion
                                               AND c.cod_campo      = g_k_tip_franquia_201) cc
                                                   INNER JOIN g2990006 g
                                                      ON g.cod_cia       = cc.COD_CIA
                                                     AND g.cod_ramo      = p_cod_ramo
                                                     AND g.cod_campo     = cc.NOM_COLUMNA
                                                     AND g.cod_valor     = cc.VAL_COLUMNA
                                                     AND g.cod_modalidad = g_k_cod_modalidade
                                                   INNER JOIN a2000040 v
                                                      ON v.cod_cia        = cc.cod_cia
                                                     AND v.cod_ramo       = p_cod_ramo
                                                     AND v.num_poliza     = cc.num_cotizacion
                                                     AND v.cod_cob        = g_k_cob_casco
                                                     AND v.cod_franquicia = 998
                                                     AND v.mca_vigente    = trn.SI
                                    ORDER BY num_simulacion),
                     c_tip_desconto AS (SELECT c.cod_cia,
                                               p_cod_ramo      cod_ramo,
                                               c.num_propuesta num_cotizacion,
                                               c.cod_campo     nom_columna,
                                               c.val_campo     val_columna
                                         FROM a2000560 c
                                        WHERE c.cod_cia       = p_cod_cia
                                          AND c.num_propuesta = l_num_cotizacion
                                          AND c.cod_campo     = 'TIP_DESCONTO' )
                SELECT m.val_clave_formula AS cod_pacote, --m.cod_modalidad                                       AS cod_pacote,
                       m.val_clave_formula AS nom_pacote, --mo.nom_modalidad                                      AS nom_pacote,
                       s.nom_casco_agrup   AS des_pacote,  --mo.nom_cor_modalidad                                  AS des_pacote,
                       CASE
                         WHEN f.nom_valor IS NOT NULL THEN
                          l_txt_tip_de || f.nom_valor || ' ' || 'R$ '||  TO_CHAR(f.val_franquicia_min, 'FM999G999G999D90', 'nls_numeric_characters='',.''')
                         ELSE
                          trn.NULO
                       END                                                   AS des_franquia_total,
                       NVL(r.valor_total, 0)                                 AS des_premio_total,
                       CASE
                         WHEN r.qtd_parcelas IS NOT NULL
                         THEN
                           --
                           ss_k_mensaje.f_solo_texto_idioma(20099215, trn_k_global.cod_idioma)
                           || trn.BLANCO ||r.qtd_parcelas||'X'|| trn.BLANCO ||r.nom_mca_juros||
                           ss_k_mensaje.f_solo_texto_idioma(20099210, trn_k_global.cod_idioma)
                           --
                         ELSE
                           --
                           trn.NULO
                           --
                       END                                                   AS des_parcelamento,
                       NVL(m.mca_rast_obrig,'N')                             AS des_rastreador_obrigatorio,
                       l_num_cotizacion                                      AS cod_nro_simulacao,
                       l_txt_num_cotizacion || ' ' || l_num_cotizacion       AS des_nro_simulacao, -- 2.45
                       d.val_columna
                 FROM g2990004 mo
                      INNER JOIN c_modalidad m
                                 ON (m.cod_modalidad  = mo.cod_modalidad)
                      LEFT OUTER JOIN c_recibos r
                                 ON (r.num_simulacion = trn.UNO  AND
                                     r.num_cotizacion = m.num_presupuesto)
                      LEFT OUTER JOIN c_franquia f
                                 ON (f.num_simulacion = m.num_simulacion)
                      LEFT OUTER JOIN c_tip_desconto d
                                 ON (d.num_cotizacion = l_num_cotizacion)
                      LEFT OUTER JOIN cDesc s
                               ON (s.num_simulacion = m.num_simulacion)
                WHERE mo.cod_cia       = p_cod_cia
                  AND mo.fec_validez   = (SELECT MAX(fec_validez)
                                            FROM g2990004 gg
                                           WHERE gg.cod_cia       = mo.cod_cia
                                             AND gg.cod_modalidad = mo.cod_modalidad)
                ORDER BY cod_nro_simulacao;
                --
            END IF ;--F 2.85
            trn_k_global.asigna('num_cotizacion',p_num_cotizacion);
            trn_k_global.asigna('cod_ramo',p_cod_ramo);
            trn_k_global.asigna('cod_cia',p_cod_cia);
            --
            p_gerar_xml_pacote_cob_spto(l_retorno_pacote, p_xml);
            --
       END IF;
       --
       -- 4.52 I
       --
       l_reg_a2009710.fec_fim        := SYSDATE;
       l_reg_a2009710.desc_xml_out   := p_xml;
       --
       IF LENGTH(p_xml) = trn.CERO THEN
         --
         l_reg_a2009710.cod_retorno    := g_k_cod_retorno_erro;
         --
       ELSE
         --
         l_reg_a2009710.cod_retorno    := g_k_cod_retorno_suce;
         --
       END IF;
       --
       em_k_a2009710_vcr.p_trata_log_processo(l_reg_a2009710);
       --
       mx('F', 'p_ws_consulta_pacote_cobertura');
       --
    END p_ws_consulta_pacote_cobertura;
    --
    /* ---------------------------------------------------------------- *
    || Devolve um CLOB contendo uma lista de dados XML : p_xml
    */ ----------------------------------------------------------------
    --
    PROCEDURE p_ws_detalhe_pacote_coberturas(p_cod_cia              IN  G9999992.cod_cia%TYPE,
                                             p_cod_ramo             IN  G9999992.cod_ramo%TYPE,
                                             p_cod_tarifa           IN  G9999992.cod_tarifa%TYPE,
                                             p_cod_agt              IN  G9999992.cod_agt%TYPE,
                                             p_num_cotizacion       IN  C2009030_vcr.num_cotizacion%TYPE,
                                             p_num_cotizacion_grupo IN  C2009030_vcr.num_poliza_grupo%TYPE,
                                             p_num_poliza_grupo     IN  A2000500.num_poliza_grupo%TYPE,
                                             p_num_contrato         IN  A2000500.num_contrato%TYPE,
                                             p_num_subcontrato      IN  A2000500.num_contrato%TYPE,
                                             p_num_paso             IN  G9999992.num_paso%TYPE,
                                             p_tip_mvto_batch       IN  A2000500.tip_mvto_batch%TYPE,
                                             p_xml_in               IN  CLOB,
                                             p_xml                  OUT CLOB)
    IS
    --
    -- mbaruch mock RF 11 12
    l_p_num_poliza_grupo A2000500.num_poliza_grupo%TYPE;
    l_mca_flota_batch VARCHAR2(2) := trn.NO;
    --
    l_agrup_recusa    a2992131_vcr.tip_agrup_recusa%TYPE;
    l_tip_situ        a2992131_vcr.tip_situ_bo     %TYPE;
    --
    l_reg_a2992131    a2992131_vcr%ROWTYPE;
    --
    l_reg_a2009710    a2009710_vcr%ROWTYPE; -- 4.52
    --
    BEGIN
    --
    mx('I', 'p_ws_detalhe_pacote_coberturas');

    g_tip_mvto_batch       := trn_k_global.ref_f_global('TIP_MVTO_BATCH'); -- 4.52

    --
    DBMS_SESSION.RESET_PACKAGE;
    --
    g_tip_mvto_batch := NVL(p_tip_mvto_batch, g_k_tip_mvto_batch_cotacao);
    --
    l_reg_a2009710.cod_cia        := p_cod_cia                 ;
    l_reg_a2009710.cod_ramo       := p_cod_ramo                ;
    l_reg_a2009710.cod_agt        := NVL(p_cod_agt, em.COD_AGT_GEN)          ;
    l_reg_a2009710.num_cotizacion := NVL(p_num_cotizacion, em.NUM_POLIZA_GEN);
    l_reg_a2009710.tip_mvto_batch := NVL(g_tip_mvto_batch,9)   ;
    l_reg_a2009710.num_paso       := NVL(p_num_paso,99)        ;
    l_reg_a2009710.txt_processo   := 'detalharPacoteCoberturas';
    l_reg_a2009710.fec_ini        := SYSDATE                   ;
    l_reg_a2009710.fec_fim        := NULL                      ;
    l_reg_a2009710.cod_retorno    := NULL                      ;
    l_reg_a2009710.desc_xml_in    := p_xml_in                  ;
    l_reg_a2009710.desc_xml_out   := NULL                      ;
    --
    trn_k_global.asigna('COD_USR',g_cod_usr_automatico);
    --
    trn_k_global.asigna('MCA_COTI_SIMULADOR', trn.NO);
    trn_k_global.asigna('MCA_COTI_COMROUND', trn.SI);
    trn_k_global.asigna('TIP_MVTO_BATCH', g_tip_mvto_batch);
    trn_k_global.asigna('COD_IDIOMA', g_k_cod_idioma);

    --
    --I 2.50
    trn_k_global.asigna('MCA_PREFERENCIA',
                        nvl(fp_recupera_valor(p_xml       => p_xml_in,
                                              p_cod_campo => 'MCA_PREFERENCIA'),
                            'N'));
    --
    l_reg_a2992131 := em_k_a2992131.f_tip_existe_recusa(p_cod_cia        => p_cod_cia       ,
                                                        p_num_cotacao    => p_num_cotizacion,
                                                        p_num_poliza     => NULL            ,
                                                        p_num_spto       => trn.CERO        ,
                                                        p_num_apli       => trn.CERO        ,
                                                        p_num_spto_apli  => trn.CERO        ,
                                                        p_tip_emision    => p_tip_mvto_batch);
    --
    l_tip_situ      := nvl(l_reg_a2992131.tip_situ_bo, trn.TRES);
    l_agrup_recusa  := nvl(l_reg_a2992131.tip_agrup_recusa,'EXC');
    --
    IF trn_k_global.devuelve('MCA_PREFERENCIA') = 'S' THEN
      --
      pp_ws_detalhe_pacote_prefere(p_cod_cia,
                                   p_cod_ramo,
                                   p_cod_tarifa,
                                   p_cod_agt,
                                   p_num_cotizacion,
                                   p_num_poliza_grupo,
                                   p_num_contrato,
                                   p_num_subcontrato,
                                   p_num_paso,
                                   p_tip_mvto_batch,
                                   p_xml_in,
                                   p_xml);
      --
    ELSE
      --
      IF l_mca_flota_batch = 'S'
      THEN
         --
         IF (l_tip_situ = 7 AND l_agrup_recusa = 'EXC')
         THEN
            --
            p_xml := NULL;
            --
         ELSE
            --
            pp_ws_detalhe_pacote_cobertura(p_cod_cia,
                                           p_cod_ramo,
                                           p_cod_tarifa,
                                           p_cod_agt,
                                           p_num_cotizacion,
                                           l_p_num_poliza_grupo, -- aqui l_p_num_poliza_grupo
                                           p_num_contrato,
                                           p_num_subcontrato,
                                           p_num_paso,
                                           p_tip_mvto_batch,
                                           p_xml_in,
                                           p_xml);
            --
         END IF;
         --
      ELSE -- mbaruch mock RF 11 12
      -- preservar essa chamada
         --
         IF (l_tip_situ = 7 AND l_agrup_recusa = 'EXC')
         THEN
            --
            p_xml := NULL;
            --
         ELSE
            --
            pp_ws_detalhe_pacote_cobertura(p_cod_cia,
                                           p_cod_ramo,
                                           p_cod_tarifa,
                                           p_cod_agt,
                                           p_num_cotizacion,
                                           NVL(p_num_poliza_grupo, p_num_cotizacion_grupo),
                                           p_num_contrato,
                                           p_num_subcontrato,
                                           p_num_paso,
                                           p_tip_mvto_batch,
                                           p_xml_in,
                                           p_xml);
            --
         END IF;
         --
      END IF;
      -- mbaruch mock RF 11 12
    END IF;
    --
    -- 4.52 I
    --
    l_reg_a2009710.fec_fim        := SYSDATE;
    l_reg_a2009710.desc_xml_out   := p_xml;
    --
    IF LENGTH(p_xml) = trn.CERO THEN
      --
      l_reg_a2009710.cod_retorno    := g_k_cod_retorno_erro;
      --
    ELSE
      --
      l_reg_a2009710.cod_retorno    := g_k_cod_retorno_suce;
      --
    END IF;
    --
    em_k_a2009710_vcr.p_trata_log_processo(l_reg_a2009710);
    --
    mx('F', 'p_ws_detalhe_pacote_coberturas');
    --
    END p_ws_detalhe_pacote_coberturas;
    --
    /* ------------------------------------------------------
    || Devolve para o webmethods parametro CLOB: p_xml
    */ ------------------------------------------------------
    --
    PROCEDURE p_ws_consultar_ano_veiculo  (p_cod_cia        IN a2109157_vcr.cod_cia%TYPE,
                                           p_cod_ramo       IN a2000030.cod_ramo%TYPE,
                                           p_cod_campo      IN c2000020.cod_campo%TYPE,
                                           p_xml_in         IN CLOB,
                                           p_xml            OUT CLOB)
    IS
       --
       l_txt_erro          VARCHAR2(250);
       l_retorno           ref_cursor;
       l_cod_marca         a2000020.val_campo%TYPE;
       l_cod_modelo        a2000020.val_campo%TYPE;
       l_cod_submodelo     a2000020.val_campo%TYPE;
       --
       l_reg_a2009710      a2009710_vcr%ROWTYPE; -- 4.52
       --

    BEGIN
       --
       mx('I', 'p_ws_consultar_ano_veiculo');
       --
       -- 4.52 I
       --
       g_cod_agt              := trn_k_global.ref_f_global('COD_AGT');
       g_num_cotizacion       := trn_k_global.ref_f_global('NUM_COTIZACION');
       g_tip_mvto_batch       := trn_k_global.ref_f_global('TIP_MVTO_BATCH');
       g_num_paso             := trn_k_global.ref_f_global('NUM_PASO');
       --
       -- 4.52 F
       --
       l_cod_marca     := fp_recupera_valor (p_xml_in, 'COD_MARCA');
       l_cod_modelo    := fp_recupera_valor (p_xml_in, 'COD_MODELO');
       l_cod_submodelo := fp_recupera_valor (p_xml_in, 'COD_SUBMODELO');
       --
       trn_k_global.asigna('COD_USR',g_cod_usr_automatico);
       --
       /*
       || Busca a lista de valores e retorna na variavel : l_retorno
       --*/
       p_lee_lista_ano_veiculo(p_cod_cia,
                               p_cod_ramo,
                               p_cod_campo,
                               l_cod_marca,
                               l_cod_modelo,
                               l_cod_submodelo,
                               l_retorno,
                               l_txt_erro);
       --
       IF l_retorno%ISOPEN THEN
       --
          IF l_txt_erro IS NULL THEN
          /*
          || Geral o XML com a lista de valores e retorna na variavel : p_xml
          --*/

          p_gerar_xml_lista_campos(l_retorno, p_xml);
          --
          ELSE
          /**
          || Geral o XML com a mensagem de erro e retorna na variavel : p_xml
          --*/

          p_gerar_xml_mensagem(l_retorno, p_xml);
          --
          END IF;
       --
       END IF;
       --
       mx('F', 'p_ws_consultar_ano_veiculo');
       --
    END p_ws_consultar_ano_veiculo;

    --
    /* ------------------------------------------------------
    || Devolve para o webmethods parametro CLOB: p_xml
    */ ------------------------------------------------------
    --
    PROCEDURE p_ws_consulta_cep (p_cod_cia              IN a2000030.cod_cia%TYPE,
                                 p_cod_ramo             IN a2000030.cod_ramo%TYPE,
                                 p_cod_modalidade       IN G9999992.cod_tarifa%TYPE,
                                 p_cod_agt              IN a2000030.cod_agt%TYPE,
                                 p_xml_in               IN CLOB,
                                 p_xml                  OUT CLOB)
    IS
       --
       l_retorno                 ref_cursor;
       --
       l_cod_postal              a2000020.val_campo%TYPE;
       l_cod_pais                a2000020.val_campo%TYPE;
       l_cod_estado              a2000020.val_campo%TYPE;
       l_cod_cidade              a2000020.val_campo%TYPE;
       l_nom_logradouro          log_logradouro.log_no%TYPE;
       l_nom_logradouro_tratado  a2000020.val_campo%TYPE;
       --
       l_reg_msg_erro      TYPREG_MSG_WS;
       --
       l_reg_a2009710      a2009710_vcr%ROWTYPE; -- 4.52
       --

    BEGIN
       --
        mx('I', 'p_ws_consulta_cep');
       --
       g_num_cotizacion              := trn_k_global.ref_f_global('NUM_COTIZACION');
       g_tip_mvto_batch              := trn_k_global.ref_f_global('TIP_MVTO_BATCH');
       g_num_paso                    := trn_k_global.ref_f_global('NUM_PASO');
       l_reg_a2009710.cod_cia        := p_cod_cia           ;
       l_reg_a2009710.cod_ramo       := p_cod_ramo          ;
       l_reg_a2009710.cod_agt        := NVL(p_cod_agt, em.COD_AGT_GEN)          ;
       l_reg_a2009710.num_cotizacion := NVL(g_num_cotizacion, em.NUM_POLIZA_GEN);
       l_reg_a2009710.tip_mvto_batch := NVL(g_tip_mvto_batch,9);
       l_reg_a2009710.num_paso       := NVL(g_num_paso,99)     ;
       l_reg_a2009710.txt_processo   := 'consultarCEP'         ;
       l_reg_a2009710.fec_ini        := SYSDATE                ;
       l_reg_a2009710.fec_fim        := NULL                   ;
       l_reg_a2009710.cod_retorno    := NULL                   ;
       l_reg_a2009710.desc_xml_in    := p_xml_in               ;
       l_reg_a2009710.desc_xml_out   := NULL                   ;
       --
       trn_k_global.asigna('COD_USR',g_cod_usr_automatico);
       --
       l_cod_postal     := fp_recupera_valor (p_xml_in, 'COD_POSTAL');
       l_cod_pais       := fp_recupera_valor (p_xml_in, 'COD_PAIS');
       l_cod_estado     := fp_recupera_valor (p_xml_in, 'COD_ESTADO');
       l_cod_cidade     := fp_recupera_valor (p_xml_in, 'COD_CIDADE');
       l_nom_logradouro := fp_recupera_valor (p_xml_in, 'NOM_LOGRADOURO');
       --
       g_err_msg :=  TYPTAB_MSG_WS(); -- 4.99
       --
       IF l_cod_postal IS NOT NULL THEN
          --
          OPEN l_retorno
          FOR
          SELECT 'NOM_DOMICILO1'                AS NOM_CAMPO_NOM_DOMICILO1,
                  DECODE(A5.TLO_TX, NULL, NULL, A5.TLO_TX || ' ' || A5.LOG_NO) AS NOM_DOMICILO1,
                 'NUM_APARTADO'                 AS NOM_CAMPO_NUM_APARTADO,
                 NULL                           AS NUM_APARTADO,
                 'NOM_DOMICILIO2'               AS NOM_CAMPO_NOM_DOMICILIO2,
                 A5.LOG_COMPLEMENTO             AS NOM_DOMICILIO2,
                 'NOM_LOCALIDAD'                AS NOM_CAMPO_NOM_LOCALIDAD,
                 DECODE(A2.cod_localidad
                       ,99998
                       ,trn.nulo
                       ,A2.nom_localidad)       AS NOM_LOCALIDAD,
                 'COD_ESTADO'                   AS NOM_CAMPO_COD_ESTADO,
                 A4.COD_ESTADO                  AS COD_ESTADO,
                 'NOM_ESTADO'                   AS NOM_CAMPO_NOM_ESTADO,
                 A4.NOM_ESTADO                  AS NOM_ESTADO,
                 'ABR_ESTADO'                   AS NOM_CAMPO_ABR_ESTADO,
                 A4.ABR_ESTADO                  AS ABR_ESTADO,
                 'COD_PROV'                     AS NOM_CAMPO_COD_PROV,
                 A3.COD_PROV                    AS COD_PROV,
                 'NOM_CIDADE'                   AS NOM_CAMPO_NOM_CIDADE,
                 A0.NOM_PROV                    AS NOM_CIDADE,
                 'NOM_PAIS'                     AS NOM_CAMPO_NOM_PAIS,
                 A1.NOM_PAIS                    AS NOM_PAIS,
                 'NUM_CEP'                      AS NUM_CAMPO_CEP,
                 NVL(a5.CEP, l_cod_postal)      AS CEP
           FROM a1000100       a0,
                a1000101       a1,
                a1000102       a2,
                a1000104       a4,
                a1000103       a3,
                log_logradouro a5
          WHERE a3.cod_postal     = l_cod_postal
            AND a5.cep(+)         = a3.cod_postal
            AND a4.cod_estado     = a3.cod_estado
            AND a4.cod_pais       = a3.cod_pais
            AND a2.cod_prov       = a3.cod_prov
            AND a2.cod_pais       = a3.cod_pais
            AND a2.cod_localidad  = a3.cod_localidad
            AND a1.cod_pais       = a3.cod_pais
            AND a0.cod_prov       = a3.cod_prov
            AND a0.cod_estado     = a3.cod_estado
            AND a0.cod_pais       = a3.cod_pais;
          --
          p_gerar_xml_cep(l_retorno, p_xml);
          --
       ELSIF l_cod_pais       IS NOT NULL   AND
             l_cod_estado     IS NOT NULL   AND
             l_cod_cidade     IS NOT NULL   AND
             l_nom_logradouro IS NOT NULL
       THEN
          --
          l_nom_logradouro_tratado := fp_recupera_logradouro(l_nom_logradouro);
          --
          IF l_nom_logradouro_tratado IS NULL THEN
             --
             l_nom_logradouro_tratado := l_nom_logradouro;
             --
          END IF;

          --
          OPEN l_retorno
          FOR
             SELECT * FROM(
                SELECT 'NOM_DOMICILO1'                AS  NOM_CAMPO_NOM_DOMICILO1,
                                                         NOM_DOMICILO1,
                       'NUM_APARTADO'                 AS NOM_CAMPO_NUM_APARTADO,
                       NULL                           AS NUM_APARTADO,
                       'NOM_DOMICILIO2'               AS NOM_CAMPO_NOM_DOMICILIO2,
                       tab_a5.LOG_COMPLEMENTO         AS NOM_DOMICILIO2,
                       'NOM_LOCALIDAD'                AS NOM_CAMPO_NOM_LOCALIDAD,
                       DECODE(A2.cod_localidad
                             ,99998
                             ,trn.nulo
                             ,A2.nom_localidad)       AS NOM_LOCALIDAD,
                       'COD_ESTADO'                   AS NOM_CAMPO_COD_ESTADO,
                       A4.COD_ESTADO                  AS COD_ESTADO,
                       'NOM_ESTADO'                   AS NOM_CAMPO_NOM_ESTADO,
                       A4.NOM_ESTADO                  AS NOM_ESTADO,
                       'ABR_ESTADO'                   AS NOM_CAMPO_ABR_ESTADO,
                       A4.ABR_ESTADO                  AS ABR_ESTADO,
                       'COD_PROV'                     AS NOM_CAMPO_COD_PROV,
                       A3.COD_PROV                    AS COD_PROV,
                       'NOM_CIDADE'                   AS NOM_CAMPO_NOM_CIDADE,
                       A0.NOM_PROV                    AS NOM_CIDADE,
                       'NOM_PAIS'                     AS NOM_CAMPO_NOM_PAIS,
                       A1.NOM_PAIS                    AS NOM_PAIS,
                       'NUM_CEP'                      AS NUM_CAMPO_CEP,
                       tab_a5.CEP                     AS CEP
                 FROM(
               SELECT a5.TLO_TX || ' ' || a5.LOG_NO AS NOM_DOMICILO1, a5.cep, a5.LOG_COMPLEMENTO
                 FROM log_logradouro a5
                WHERE CONTAINS (a5.LOG_NO, l_nom_logradouro_tratado) > trn.CERO) tab_a5, a1000100 a0, a1000104 a4, a1000103 a3,  a1000102 a2, a1000101 a1
                WHERE a0.cod_prov       = l_cod_cidade
                  AND a0.cod_estado     = l_cod_estado
                  AND a0.cod_pais       = l_cod_pais
                  AND a4.cod_pais       = a0.cod_pais
                  AND a4.cod_estado     = a0.cod_estado
                  AND a3.cod_postal     = tab_a5.cep
                  AND A3.COD_PAIS       = a0.cod_pais
                  AND A3.cod_prov       = a0.cod_prov
                  AND a2.cod_pais       = a3.cod_pais
                  AND a2.cod_localidad  = a3.cod_localidad
                  AND a2.cod_prov       = a3.cod_prov
                  AND a1.cod_pais       = a4.cod_pais
                  ) WHERE REGEXP_LIKE (UPPER(NOM_DOMICILO1),
                                         ''|| UPPER(l_nom_logradouro) || '');
          --
          p_gerar_xml_cep(l_retorno, p_xml);
          --

       END IF;

       --
       IF l_retorno%ROWCOUNT = trn.CERO THEN
          --
          l_reg_msg_erro := fp_trata_msg('COD_CEP',
                                         NULL,
                                         g_k_pre_msg_erro || '20098128' || g_k_sep_cod_msg);  --4.06
          --
          g_err_msg.EXTEND(1); -- 4.99
          g_err_msg(g_err_msg.LAST) := l_reg_msg_erro; -- 4.99
          --
          pp_processa_mensagem(g_err_msg, -- 4.99
                               l_retorno);
          --
          p_gerar_xml_mensagem(l_retorno, p_xml);
          --
          g_err_msg := NULL; -- 4.99
          --
       END IF;
       --
       l_reg_a2009710.fec_fim        := SYSDATE;
       l_reg_a2009710.desc_xml_out   := p_xml;
       --
       IF LENGTH(p_xml) = trn.CERO THEN
         --
         l_reg_a2009710.cod_retorno    := g_k_cod_retorno_erro;
         --
       ELSE
         --
         l_reg_a2009710.cod_retorno    := g_k_cod_retorno_suce;
         --
       END IF;
       --
       em_k_a2009710_vcr.p_trata_log_processo(l_reg_a2009710);
       --
       mx('F', 'p_ws_consulta_cep');
       --
    END p_ws_consulta_cep;

    --
    /* ------------------------------------------------------
    || Orquestrador Lista Valores Campo Armado (Lista Fixa e Dinamica)
    */ ------------------------------------------------------
    PROCEDURE p_ws_consultar_lista_valores (p_cod_cia         IN a2000030.cod_cia         %TYPE,
                                            p_cod_ramo        IN a2000030.cod_ramo        %TYPE,
                                            p_cod_campo       IN c2000020.cod_campo       %TYPE,
                                            p_xml_in          IN CLOB,
                                            p_xml             OUT CLOB)
    IS
       --
       l_txt_erro         VARCHAR2(250);
       --
       l_nom_tabla_valida g2000020.nom_tabla_valida%TYPE;
       l_cod_version      g2000020.cod_version%TYPE;
       l_nom_pgm_help     g2000020.nom_pgm_help%TYPE;
       l_cod_campo        c2000020.cod_campo%TYPE;
       --
       l_mca_cache              g1010107.txt_valor_variable%TYPE;
       l_cache_existe           BOOLEAN;
       l_cache_campo_reg        a2009021_vcr%ROWTYPE;
       l_xml_retorno            CLOB;
       --
       l_reg_a2009710           a2009710_vcr%ROWTYPE; -- 4.52
    --
  BEGIN
    --
    mx('I', 'p_ws_consultar_lista_valores');
    --
    -- 4.52 I
    --
    g_cod_agt        := trn_k_global.ref_f_global('COD_AGT');
    g_num_cotizacion := trn_k_global.ref_f_global('NUM_COTIZACION');
    g_tip_mvto_batch := trn_k_global.ref_f_global('TIP_MVTO_BATCH');
    g_num_paso       := trn_k_global.ref_f_global('NUM_PASO');
    --
    trn_k_global.borra_todas;
    --
    trn_k_global.asigna('COD_USR',g_cod_usr_automatico);
    --
       l_cod_campo :=   CASE
                 WHEN p_cod_campo like '%_CONDUCTOR' THEN
                  SUBSTR(p_cod_campo,trn.UNO,INSTR(p_cod_campo,'_CONDUCTOR',trn.UNO,trn.UNO)-trn.UNO)
                 WHEN p_cod_campo like '%_ASSEGURADO' THEN
                  SUBSTR(p_cod_campo,trn.UNO,INSTR(p_cod_campo,'_ASSEGURADO',trn.UNO,trn.UNO)-trn.UNO)
                 WHEN p_cod_campo like '%_TOMADOR' THEN
                  SUBSTR(p_cod_campo,trn.UNO,INSTR(p_cod_campo,'_TOMADOR',trn.UNO,trn.UNO)-trn.UNO)
                 WHEN p_cod_campo like '%_SEGURADO' THEN
                  SUBSTR(p_cod_campo,trn.UNO,INSTR(p_cod_campo,'_SEGURADO',trn.UNO,trn.UNO)-trn.UNO)
                 ELSE
                  p_cod_campo
                 END; --performance 22052019

       --
       -- Busca parametrizacao se cache esta habilitado para este campo
       BEGIN
         --
         ss_k_g1010107.p_lee(p_cod_usr             => trn_k_global.cod_usr
                            ,p_cod_grupo           => 'CACHE'
                            ,p_txt_nombre_variable => l_cod_campo );
         --
         l_mca_cache := ss_k_g1010107.f_txt_valor_variable;
         --
       EXCEPTION
         WHEN OTHERS THEN
           --
           l_mca_cache := trn.NO;
           --
       END;
       --
       -- Verifica se existe cache para este campo
       IF l_mca_cache = trn.SI THEN
         --
         em_k_a2009021_vcr.p_devolve_xml(p_cod_cia      => p_cod_cia
                                        ,p_cod_campo    => l_cod_campo
                                        ,p_fec_consulta => TRUNC(SYSDATE)
                                        ,p_existe_xml   => l_cache_existe
                                        ,p_xml          => l_xml_retorno     );
         --
       END IF;
       --
       -- Se nao existe cache ou o cache nao esta habilitado para este campo
       IF NOT l_cache_existe OR l_mca_cache = trn.NO THEN
         --
         BEGIN
            --
            SELECT g2000020.nom_tabla_valida, DECODE(l_cod_campo,'COD_NIVEL_BONUS_MALUS',g_k_cod_version_cod_nivel_bon,g2000020.cod_version) cod_version, g2000020.nom_pgm_help
              INTO l_nom_tabla_valida, l_cod_version, l_nom_pgm_help
              FROM g2000020
             WHERE g2000020.cod_cia   = p_cod_cia
               AND g2000020.cod_ramo  = p_cod_ramo
               AND g2000020.cod_campo = l_cod_campo;

          --
          EXCEPTION
             WHEN NO_DATA_FOUND THEN
             --
             BEGIN
                --
                SELECT g2000010.nom_tabla_valida, g2000010.cod_version, g2000010.nom_pgm_help
                  INTO l_nom_tabla_valida, l_cod_version, l_nom_pgm_help
                  FROM g2000010
                 WHERE g2000010.cod_cia   = p_cod_cia
                   AND g2000010.cod_campo = l_cod_campo;

                --
             EXCEPTION
                WHEN OTHERS THEN
                   --
                   NULL;
                   --

             END;

             --

         END;
         --
         IF l_nom_pgm_help = g_k_nom_pgm_help_fixo THEN
            --
            p_devuelve_lista_valores(p_cod_cia,
                                     p_cod_ramo,
                                     l_cod_campo,
                                     l_xml_retorno);
            --
         ELSIF l_nom_pgm_help = g_k_nom_pgm_help_dinamico THEN
            --
            p_devuelve_lista_dinamica(p_cod_cia,
                                      p_cod_ramo,
                                      l_cod_campo,
                                      l_nom_tabla_valida,
                                      l_cod_version,
                                      p_xml_in,
                                      l_xml_retorno);
            --
         END IF;
         --
         -- Carregar tabela de cache
         IF NOT l_cache_existe THEN
           --
           l_cache_campo_reg.cod_cia        := p_cod_cia      ;
           l_cache_campo_reg.cod_campo      := l_cod_campo    ;
           l_cache_campo_reg.fec_consulta   := TRUNC(SYSDATE) ;
           l_cache_campo_reg.fec_validez    := TRUNC(SYSDATE) ;
           l_cache_campo_reg.desc_xml_envio := l_xml_retorno  ;
           --
           em_k_a2009021_vcr.p_carrega_xml(p_reg_a2009021 => l_cache_campo_reg);
           --
         END IF;
         --
       END IF;
       --
       p_xml := l_xml_retorno;
       --
       mx('F', 'p_ws_consultar_lista_valores');
       --
       trn_k_global.borra_todas;
       --
    EXCEPTION
       WHEN OTHERS THEN
          --
          l_txt_erro := SQLERRM;
          --
          trn_k_global.borra_todas;
          --
          mx('F', 'p_ws_consultar_lista_valores - EXCEPTION');
          --
    END p_ws_consultar_lista_valores;
    --
    /* ------------------------------------------------------
    || Retorno da lista de formas de pagamento
    */ ------------------------------------------------------
    PROCEDURE p_ws_consultar_formas_pagto(p_cod_cia                 IN  a2000030.cod_cia%TYPE,
                                          p_cod_ramo                IN  a2000030.cod_ramo%TYPE,
                                          p_cod_agt                 IN  a2000030.cod_agt%TYPE,
                                          p_num_cotizacion          IN  c2000000.num_cotizacion %TYPE,
                                          p_num_cotizacion_grupo    IN  C2009030_vcr.num_poliza_grupo%TYPE,
                                          p_num_poliza_grupo        IN  A2000500.num_poliza_grupo%TYPE,
                                          p_num_contrato            IN  A2000500.num_contrato%TYPE,
                                          p_num_subcontrato         IN  A2000500.num_contrato%TYPE,
                                          p_tip_mvto_batch          IN  A2000500.tip_mvto_batch%TYPE,
                                          p_xml                     OUT CLOB)
    IS
       --
       l_cod_nivel1         g2109040_vcr.cod_nivel1%TYPE;
       l_cod_nivel2         g2109040_vcr.cod_nivel2%TYPE;
       l_cod_nivel3         g2109040_vcr.cod_nivel3%TYPE;
       l_cod_canal1         g2109040_vcr.cod_canal1%TYPE;
       l_cod_canal2         g2109040_vcr.cod_canal2%TYPE;
       l_cod_canal3         g2109040_vcr.cod_canal3%TYPE;
       l_num_poliza_grupo   g2109040_vcr.num_poliza_grupo%TYPE;
       l_num_contrato       g2109040_vcr.num_contrato%TYPE;
       l_num_subcontrato    g2109040_vcr.num_subcontrato%TYPE;
       l_num_poliza_cliente g2109040_vcr.num_poliza_cliente%TYPE;
       l_num_poliza         g2109040_vcr.num_poliza%TYPE;
       l_cod_modalidad      g2109040_vcr.cod_modalidad%TYPE;
       l_fec_validez_tarifa g2109040_vcr.fec_validez%TYPE;
       l_tip_mvto_batch     A2000500.tip_mvto_batch%TYPE;
       --
       l_cod_cia            a2000500.cod_cia           %TYPE;
       l_cod_ramo           a2000500.cod_ramo          %TYPE;
       l_cod_estructura     a0009030_vcr.cod_estructura%TYPE;
       l_num_proceso        a0009030_vcr.num_proceso   %TYPE;
       -- I 1.54
       l_cod_forma_pago     g2990006.nom_valor         %TYPE;
       l_count              a1009215_vcr.cod_forma_pago%TYPE;
       --
       l_eh_3_pacotes           BOOLEAN ; -- 2.16

       CURSOR c_forma_pago IS
       SELECT distinct(cod_forma_pago) AS cod_forma_pago
         FROM a1009215_vcr
        WHERE cod_cia = p_cod_cia
          AND cod_ramo = p_cod_ramo
          AND cod_agt = p_cod_agt;

       l_reg_c_forma_pago c_forma_pago%ROWTYPE;
       -- F 1.54
       l_retorno        ref_cursor;
       l_num_cotizacion c2000000.num_cotizacion    %TYPE;
       l_cod_agt        c2009030_vcr.cod_agt       %type;
       l_cod_forma_pago_boleto a1009213_vcr.cod_forma_pago%TYPE;
       --
       l_num_simulacion_tmp c2990700.num_simulacion%TYPE; --2.16
       l_num_cotizacion_tmp c2000000.num_cotizacion%TYPE; --2.16
       --
       l_tip_produto     g2109142_vcr.tip_produto       %TYPE ; --2.17
       --
       l_reg_a2009710      a2009710_vcr%ROWTYPE; -- 4.50
       --
    BEGIN
       --
       mx('I', 'p_ws_consultar_formar_pagto');
       --
       l_tip_mvto_batch := NVL(p_tip_mvto_batch, g_k_tip_mvto_batch_cotacao);
       --
       -- I 1.54
       l_cod_forma_pago := NULL;
       -- I 2.16
       trn_k_global.asigna('cod_cia'         ,p_cod_cia);
       trn_k_global.asigna('cod_ramo'        ,p_cod_ramo);
       trn_k_global.asigna('num_cotizacion'  ,p_num_cotizacion);
       trn_k_global.asigna('num_poliza_grupo',p_num_poliza_grupo);
       trn_k_global.asigna('num_contrato'    ,p_num_contrato);
       trn_k_global.asigna('num_subcontrato' ,p_num_subcontrato);
       trn_k_global.asigna('tip_mvto_batch'  ,l_tip_mvto_batch); --v3.75
       trn_k_global.asigna('cod_agt'         ,p_cod_agt);
       trn_k_global.asigna('cod_tarifa'      ,NVL(trn_k_global.ref_f_global('cod_tarifa')
                                                 ,g_k_cod_tarifa_generico)); --v3.75
       --
       g_num_paso := trn_k_global.ref_f_global('NUM_PASO'); -- 4.50
       --
       IF l_tip_mvto_batch = g_k_tip_mvto_batch_cotacao
       THEN
         --
         g_mca_valida := 'N';
         pp_asigna_globales_defecto;
         g_mca_valida := NULL;
         --
       ELSE
         trn_k_global.asigna('num_propuesta' , p_num_cotizacion );
         pp_asgina_globales_spto;
       END IF;
       --
       IF l_tip_mvto_batch = g_k_tip_mvto_batch_cotacao THEN -- 2.20
         --
         ea_k_231_utils.p_devuelve_dato_cotizacion(p_nom_tabla   => ea_k_231_utils.g_k_tabla_dv,
                                                   p_nom_columna => 'TIP_PRODUTO'              ,
                                                   p_val_campo   => l_tip_produto);
         --
       ELSE
         --
         l_tip_produto := ea_k_231_utils.f_valor_dv('tip_produto'); --2.17
         --
       END IF;   -- 2.20
       --
       IF NVL(trn_k_global.ref_f_global('MCA_POLIZA_GRUPO'),'N') = 'S' or
          NVL(trn_k_global.ref_f_global('COD_SERVICIO'),-1) = g_k_cod_srv_flotas THEN
         --
         l_eh_3_pacotes := FALSE;
         --
       ELSE
         --
         l_eh_3_pacotes := ea_k_g2109142_vcr.f_eh_3_pacotes(p_cod_cia, --2.70
                                                            p_cod_ramo,
                                                            p_cod_agt,
                                                            l_tip_produto); -- 2.17
        -- I 3.47
        IF l_eh_3_pacotes THEN
         --
         pp_asigna('tres_pacotes',1);
         --
        ELSE
         --
         pp_asigna('tres_pacotes',0);
         --
        END IF;
        -- F 3.47
       --
       END IF ;
       -- F 2.16
       OPEN c_forma_pago;
       l_count := 0;
       --
       LOOP
         FETCH c_forma_pago
           INTO l_reg_c_forma_pago;
         IF c_forma_pago%NOTFOUND then
           EXIT;
         ELSE
           l_count := l_count + 1;
         END IF;
       END LOOP;
       --
       IF l_count = 1 THEN
         l_cod_forma_pago := l_reg_c_forma_pago.cod_forma_pago;
       ELSE
         l_cod_forma_pago := null;
       END IF;
       --
       CLOSE c_forma_pago;
       -- F 1.54
       --
       IF l_tip_mvto_batch = g_k_tip_mvto_batch_cotacao THEN
          --
          -- Cotacao
          --
          l_cod_cia  := p_cod_cia;
          l_cod_ramo := p_cod_ramo;
          --
      -- i 1.48
      /*
          IF   p_num_cotizacion_grupo IS NOT NULL
             AND (   l_cod_cia  IS NULL
                  OR l_cod_ramo IS NULL)
          THEN
             --
             ea_k_231_coti_ws.p_devuelve_pk(p_num_poliza_grupo    => p_num_cotizacion_grupo,
                                            p_cod_cia             => l_cod_cia             ,
                                            p_cod_ramo            => l_cod_ramo            ,
                                            p_cod_estructura      => l_cod_estructura      ,
                                            p_num_proceso         => l_num_proceso         ,
                                            p_tip_mvto_batch      => l_tip_mvto_batch      );
             --
          END IF;
      */
      -- F 1.48
          --
          l_num_cotizacion := p_num_cotizacion;
          l_cod_forma_pago_boleto := NULL;
          --
          IF p_num_cotizacion_grupo IS NOT NULL
          THEN
             --
             l_cod_forma_pago_boleto := trn.UNO; -- BOLETO (unica forma para flota)
             --
             IF gc_c2009030_vcr%ISOPEN
             THEN
                --
                CLOSE gc_c2009030_vcr;
                --
             END IF;
             --
             OPEN gc_c2009030_vcr(pc_cod_cia          => p_cod_cia             ,
                                  pc_cod_ramo         => p_cod_ramo            ,
                                  pc_num_poliza_grupo => p_num_cotizacion_grupo);
             --
             FETCH gc_c2009030_vcr INTO l_num_cotizacion, l_cod_agt;
             --
             CLOSE gc_c2009030_vcr;
             --
          END IF;
          --I 2.16
          IF l_eh_3_pacotes THEN
          --
            ea_k_231_utils.p_devuelve_dato_cotizacion(ea_k_231_coti.g_k_tabla_simulacion,
                                                     'NUM_SIMULACION',
                                                      l_num_simulacion_tmp);
            -- I 2.23
            IF l_num_simulacion_tmp IS NULL THEN
              --
              l_num_simulacion_tmp := trn.UNO;
              --
            END IF;
            --F 2.23
            ea_k_231_utils.p_devuelve_dato_cotizacion(ea_k_231_coti.g_k_tabla_simulacion,
                                                     'NUM_SIMULACION#'||l_num_simulacion_tmp,
                                                      l_num_cotizacion_tmp);
            --
          ELSE
            --
            l_num_cotizacion_tmp := l_num_cotizacion ; -- 2.16
            --
          END IF;
          --F 2.16
          -- 5.38
          IF gc_k_a5029634_vcr.f_forma_pagto_gateway_agt(
             l_cod_cia, l_cod_ramo, l_tip_produto, p_cod_agt, g_k_tip_gestor_px ) THEN

            --F 2.16
            OPEN l_retorno
            FOR
               --
               SELECT k.val_campo_de_vcr                 AS cod_forma_pago -- v2.02
                     ,g.nom_valor                        AS nom_forma_pago -- v2.02
                      -- I 1.56
                     /*,(CASE
                          WHEN k.val_campo_de_vcr = l_cod_forma_pago
                          THEN trn.SI
                          ELSE trn.NO
                       END)                              AS mca_defecto*/
                      -- F 1.60
                 FROM c2990700     c
                     ,g2990006     g
                     ,g9999021_vcr k                                       -- v1.95
                     ,g9999021_vcr i                                       -- v2.02
                WHERE c.cod_cia            = l_cod_cia
                  AND c.cod_ramo           = l_cod_ramo
                  AND c.num_cotizacion     = l_num_cotizacion_tmp          -- v2.16
                  AND c.num_cuota          = trn.UNO                       -- v1.95
                  AND g.cod_cia            = c.cod_cia
                  AND g.cod_ramo           = em.COD_RAMO_GEN
                  AND g.cod_campo          = 'COD_FORMA_PAGO'
                  AND g.cod_valor          = k.val_campo_de_vcr            -- v1.95
                  -- v1.95 ini
                  AND c.cod_cia            = k.cod_cia
                  AND c.num_simulacion     = k.val_campo_para_vcr
                  AND k.cod_ramo           = em.COD_RAMO_GEN
                  AND k.cod_campo          = 'COD_FORMA_PAGTO'
                  -- v1.95 fim
                  -- v2.02 ini
                  AND c.cod_cia            = i.cod_cia
                  AND k.val_campo_de_vcr   = i.val_campo_de_vcr
                  AND i.cod_ramo           = em.COD_RAMO_GEN
                  AND i.cod_campo          = 'COD_FORMA_PAGO'
                  -- v2.02 fim
                ORDER BY DECODE(k.val_campo_de_vcr  --v2.02
                               ,5
                               ,1.5
                               ,7
                               ,3.5
                               ,k.val_campo_de_vcr);--v1.79
      ELSE
          --F 2.16
            OPEN l_retorno
            FOR
               --
               SELECT k.val_campo_de_vcr                 AS cod_forma_pago -- v2.02
                     ,g.nom_valor                        AS nom_forma_pago -- v2.02
                 FROM c2990700     c
                     ,g2990006     g
                     ,g9999021_vcr k                                       -- v1.95
                     ,g9999021_vcr i                                       -- v2.02
                WHERE c.cod_cia            = l_cod_cia
                  AND c.cod_ramo           = l_cod_ramo
                  AND c.num_cotizacion     = l_num_cotizacion_tmp          -- v2.16
                  AND c.num_cuota          = trn.UNO                       -- v1.95
                  AND g.cod_cia            = c.cod_cia
                  AND g.cod_ramo           = em.COD_RAMO_GEN
                  AND g.cod_campo          = 'COD_FORMA_PAGO'
                  AND g.cod_valor          = k.val_campo_de_vcr            -- v1.95
                  -- v1.95 ini
                  AND c.cod_cia            = k.cod_cia
                  AND c.num_simulacion     = k.val_campo_para_vcr
                  AND k.cod_ramo           = em.COD_RAMO_GEN
                  AND k.cod_campo          = 'COD_FORMA_PAGTO'
                  -- v1.95 fim
                  -- v2.02 ini
                  AND c.cod_cia            = i.cod_cia
                  AND k.val_campo_de_vcr   = i.val_campo_de_vcr
                  AND i.cod_ramo           = em.COD_RAMO_GEN
                  AND i.cod_campo          = 'COD_FORMA_PAGO'
                  AND k.val_campo_de_vcr NOT IN ( g_k_cod_de_para_forma_pxpx,
                                  g_k_cod_de_para_forma_pxba,
                                  g_k_cod_de_para_forma_pxdb )
                  -- v2.02 fim
                ORDER BY DECODE(k.val_campo_de_vcr  --v2.02
                               ,5
                               ,1.5
                               ,7
                               ,3.5
                               ,k.val_campo_de_vcr);--v1.79

      END IF;

          --
       ELSIF l_tip_mvto_batch = g_k_tip_mvto_batch_endosso THEN
          --
          -- Endosso
          OPEN l_retorno
          FOR
             SELECT k.val_campo_de_vcr                 AS cod_forma_pago -- v2.02
                   ,g.nom_valor                        AS nom_forma_pago -- v2.02
                    -- I 1.56
                   /*,(CASE
                        WHEN k.val_campo_de_vcr = l_cod_forma_pago
                        THEN trn.SI
                        ELSE trn.NO
                    END)                               AS mca_defecto*/
                    -- F 1.60
               FROM c2990700     a                                       -- v1.95
                   ,a2000560     c
                   ,g2990006     g
                   ,g9999021_vcr k                                       -- v1.95
                   ,g9999021_vcr i                                       -- v2.02
              WHERE a.cod_cia        = p_cod_cia
                AND a.cod_ramo       = p_cod_ramo
                AND a.num_cuota      = trn.UNO
                AND a.num_cotizacion = c.val_campo
                AND c.cod_cia        = a.cod_cia
                AND c.cod_campo      = 'DFNUM_PRESUPUESTO'
                AND c.num_propuesta  = p_num_cotizacion
                AND g.cod_cia        = a.cod_cia
                AND g.cod_ramo       = em.COD_RAMO_GEN
                AND g.cod_campo      = 'COD_FORMA_PAGO'
                AND g.cod_valor      = k.val_campo_de_vcr                -- v1.95
                -- v1.95 ini
                AND a.cod_cia        = k.cod_cia
                AND a.num_simulacion = k.val_campo_para_vcr
                AND k.cod_ramo       = em.COD_RAMO_GEN
                AND k.cod_campo      = 'COD_FORMA_PAGTO'
                -- v1.95 fim
                -- v2.02 ini
                AND c.cod_cia            = i.cod_cia
                AND k.val_campo_de_vcr   = i.val_campo_de_vcr
                AND i.cod_ramo           = em.COD_RAMO_GEN
                AND i.cod_campo          = 'COD_FORMA_PAGO'
                AND k.val_campo_de_vcr NOT IN ( g_k_cod_de_para_forma_pxpx,
                                  g_k_cod_de_para_forma_pxba,
                                  g_k_cod_de_para_forma_pxdb )
              ORDER BY DECODE(k.val_campo_de_vcr  --v2.02
                             ,5
                             ,1.5
                             ,7
                             ,3.5
                             ,k.val_campo_de_vcr);--v1.79

          --
       END IF;
       --
       -- 4.50 I
       --
       l_reg_a2009710.cod_cia        := NVL(p_cod_cia, g_cod_cia)  ;
       l_reg_a2009710.cod_ramo       := NVL(p_cod_ramo, g_cod_ramo);
       l_reg_a2009710.cod_agt        := NVL(p_cod_agt,g_cod_agt)   ;
       l_reg_a2009710.num_cotizacion := NVL(p_num_cotizacion,'9999999999999');
       l_reg_a2009710.tip_mvto_batch := NVL(l_tip_mvto_batch,NVL(g_tip_mvto_batch,9));
       l_reg_a2009710.num_paso       := NVL(g_num_paso,99)  ;
       l_reg_a2009710.txt_processo   := 'consultarFormaPagamento';
       l_reg_a2009710.fec_ini        := SYSDATE             ;
       l_reg_a2009710.fec_fim        := NULL                ;
       l_reg_a2009710.cod_retorno    := NULL                ;
       l_reg_a2009710.desc_xml_in    := NULL                ; -- p_xml_in
       l_reg_a2009710.desc_xml_out   := NULL                ;
       --
       trn_k_global.asigna('COD_USR',g_cod_usr_automatico); -- 4.50
       --
       p_gerar_xml_campo_unico(l_retorno, p_xml);
       --
       -- 4.50 I
       --
       l_reg_a2009710.fec_fim        := SYSDATE;
       l_reg_a2009710.desc_xml_out   := p_xml;
       --
       IF LENGTH(p_xml) = trn.CERO THEN
         --
         l_reg_a2009710.cod_retorno    := g_k_cod_retorno_erro;
         --
       ELSE
         --
         l_reg_a2009710.cod_retorno    := g_k_cod_retorno_suce;
         --
       END IF;
       --
       em_k_a2009710_vcr.p_trata_log_processo(l_reg_a2009710); -- 4.50
       --
       mx('F', 'p_ws_consultar_formar_pagto');
       --
    END p_ws_consultar_formas_pagto;

    --
    /* ------------------------------------------------------
    || Devolve Planos de Pagamento
    */ ------------------------------------------------------
    PROCEDURE p_ws_consultar_planos_pagto (p_cod_cia                IN  a2000030.cod_cia%TYPE,
                                           p_cod_ramo               IN  a2000030.cod_ramo%TYPE,
                                           p_num_cotizacion         IN  c2000000.num_cotizacion%TYPE,
                                           p_num_cotizacion_grupo   IN  C2009030_vcr.num_poliza_grupo%TYPE,
                                           p_num_poliza_grupo       IN  A2000500.num_poliza_grupo%TYPE,
                                           p_num_contrato           IN  A2000500.num_contrato%TYPE,
                                           p_num_subcontrato        IN  A2000500.num_contrato%TYPE,
                                           p_tip_mvto_batch         IN  A2000500.tip_mvto_batch%TYPE,
                                           p_xml_in                 IN  CLOB,
                                           p_xml                    OUT CLOB)
    IS
       --
       l_retorno            ref_cursor;
       --
       l_num_simulacion     c2990700.num_simulacion%TYPE;
       l_cod_forma_pago     a1009213_vcr.cod_forma_pago%TYPE;
       l_fec_validez_tarifa a1009213_vcr.fec_validez%TYPE;
       l_tip_mvto_batch     A2000500.tip_mvto_batch%TYPE;
       l_cod_fracc_pago     A2000030.cod_fracc_pago%TYPE;
       l_num_spto           A2000030.num_spto%TYPE;
       --
       l_num_cotizacion     c2990700.num_cotizacion%TYPE; --SLEIVA
       l_cod_agt            c2009030_vcr.cod_agt%type;
       --
       l_eh_3_pacotes           BOOLEAN ; -- 2.21
       l_num_simulacion_tmp c2990700.num_simulacion%TYPE; --2.21
       l_num_cotizacion_tmp c2000000.num_cotizacion%TYPE; --2.21
       l_tip_produto     g2109142_vcr.tip_produto       %TYPE ; --2.21
       --
       l_reg_a2009710      a2009710_vcr%ROWTYPE; -- 4.50
       --
    BEGIN
       --
       mx('I', 'p_ws_consultar_planos_pagto');
       --
       DBMS_SESSION.RESET_PACKAGE; -- 4.23
       --
       g_num_paso       := trn_k_global.ref_f_global('NUM_PASO'); -- 4.50
       --
       l_tip_mvto_batch          := NVL(p_tip_mvto_batch, g_k_tip_mvto_batch_cotacao);
       --
       trn_k_global.asigna('cod_cia'         ,p_cod_cia);
       trn_k_global.asigna('cod_ramo'        ,p_cod_ramo);
       trn_k_global.asigna('num_cotizacion'  ,p_num_cotizacion);
       trn_k_global.asigna('num_poliza_grupo',p_num_poliza_grupo);
       trn_k_global.asigna('num_contrato'    ,p_num_contrato);
       trn_k_global.asigna('num_subcontrato' ,p_num_subcontrato);
       trn_k_global.asigna('tip_mvto_batch'  ,l_tip_mvto_batch);

       IF l_tip_mvto_batch = g_k_tip_mvto_batch_cotacao THEN -- 2.21
         --
         ea_k_231_utils.p_devuelve_dato_cotizacion(p_nom_tabla   => ea_k_231_utils.g_k_tabla_dv,
                                                   p_nom_columna => 'TIP_PRODUTO'              ,
                                                   p_val_campo   => l_tip_produto);
         --
         ea_k_231_utils.p_devuelve_dato_cotizacion(p_nom_tabla   => ea_k_231_utils.g_k_tabla_df,
                                                   p_nom_columna => 'COD_AGT'              ,
                                                   p_val_campo   => l_cod_agt);
         --
       ELSE
         --
         l_tip_produto := ea_k_231_utils.f_valor_dv('tip_produto');
         l_cod_agt := ea_k_231_utils.f_valor_dv('COD_AGT');
         --
       END IF;   -- 2.21
       --
       trn_k_global.asigna('cod_agt',l_cod_agt); -- 4.23
       --
       IF NVL(trn_k_global.ref_f_global('MCA_POLIZA_GRUPO'),'N') = 'S' or
          NVL(trn_k_global.ref_f_global('COD_SERVICIO'),-1) = g_k_cod_srv_flotas THEN
         --
         l_eh_3_pacotes := FALSE;
         --
       ELSE
         --
         l_eh_3_pacotes := ea_k_g2109142_vcr.f_eh_3_pacotes(p_cod_cia, --2.70
                                                            p_cod_ramo,
                                                            l_cod_agt,
                                                            l_tip_produto);
      --
        -- I 3.47
        IF l_eh_3_pacotes THEN
         --
         pp_asigna('tres_pacotes',1);
         --
        ELSE
         --
         pp_asigna('tres_pacotes',0);
         --
        END IF;
       -- F 3.47
      --
       END IF ;
       -- F 2.21
       l_num_simulacion          := NVL(fp_recupera_valor (p_xml_in, 'NUM_SIMULACION'), trn.UNO); --2.23
       l_cod_forma_pago          := fp_recupera_valor (p_xml_in, 'COD_FORMA_PAGO');
       --l_fec_validez_tarifa      := ea_k_231_utils.f_valor_dv('fec_validez_TARIFA');
       --
       IF l_tip_mvto_batch = g_k_tip_mvto_batch_cotacao and p_num_cotizacion_grupo IS NOT NULL --SLEIVA (inicio)
       THEN
         --
         --l_num_cotizacion := p_num_cotizacion;
         --
         IF p_num_cotizacion_grupo IS NOT NULL
         THEN
            --
            IF gc_c2009030_vcr%ISOPEN
            THEN
               --
               CLOSE gc_c2009030_vcr;
               --
            END IF;
            --
            OPEN gc_c2009030_vcr(pc_cod_cia          => p_cod_cia             ,
                                 pc_cod_ramo         => p_cod_ramo            ,
                                 pc_num_poliza_grupo => p_num_cotizacion_grupo);
            --
            FETCH gc_c2009030_vcr INTO l_num_cotizacion, l_cod_agt;
            --
            CLOSE gc_c2009030_vcr;
            --
         END IF;
         --
         OPEN l_retorno
         FOR
         --v3.13 -- Retiramos o WITH
           SELECT a.cod_fracc_pago                                    cod_fracc_pago
                 ,a.num_cuota                                         qtd_parcelas
                 ,k.val_campo_para_vcr                                tip_gestor --v1.95
                 ,CASE
                  WHEN SUM(a.imp_interes) +
                       SUM(a.imp_imptos_interes) > 0 THEN
                    --
                   'com juros'
                    --
                  ELSE
                    --
                    'sem juros'
                    --
                  END                                                 nom_mca_juros
                 /*,ROUND(SUM(NVL(a.imp_recibo, 0) /
                  NVL(a.num_cuota, 0)), 2)                            primeira_parcela
                 ,SUM(a.imp_recibo)              -
                  ROUND(SUM(NVL(a.imp_recibo, 0) /
                  NVL(a.num_cuota, 0)), 2)                            demais*/
           -- I 3.05
                   ,--ROUND(SUM(NVL(a.imp_recibo, 0) / NVL(a.num_cuota, 0)), 2)                            primeira_parcela
                   (SUM(a.imp_recibo) -
                   ROUND(SUM(NVL(a.imp_recibo, 0) / NVL(a.num_cuota, 0)), 2) * NVL((a.num_cuota - 1), 0)) primeira_parcela
                   ,--SUM(a.imp_recibo) - ROUND(SUM(NVL(a.imp_recibo, 0) / NVL(a.num_cuota, 0)), 2)                            demais
                   CASE
                     WHEN a.num_cuota = 1 THEN
                       0
                     ELSE
                      ROUND(SUM(NVL(a.imp_recibo, 0) / NVL(a.num_cuota, 0)), 2)
                   END demais
                  -- F 3.05
                  ,SUM(a.imp_interes)                                  encargos
                  ,SUM(a.imp_recibo)                                   valor_total
                  ,SUM(a.imp_neta)                                     valor_liquido
                  ,SUM(a.imp_imptos)         +
                   SUM(a.imp_imptos_interes) valor_iof
                  ,CASE
                      WHEN (SELECT DISTINCT b.cod_plan_pago
                              FROM a1009215_vcr b
                             WHERE b.cod_agt        = l_cod_agt
                               AND b.cod_cia        = p_cod_cia
                               AND b.cod_plan_pago  = a.cod_fracc_pago
                               AND b.cod_forma_pago = l_cod_forma_pago
                               ) IS NOT NULL THEN
                      'S'
                      ELSE
                      'N'
                    END MCA_DEFECTO
              FROM c2990700     a
                  ,g9999021_vcr k --v1.95
                  ,g9999021_vcr j --v1.95
             WHERE a.cod_cia        = p_cod_cia
               AND a.cod_ramo       = p_cod_ramo
               AND a.num_cotizacion = p_num_cotizacion_grupo --v3.13
               -- v1.95
               AND a.cod_cia          = k.cod_cia
               AND l_cod_forma_pago   = k.val_campo_de_vcr
               AND k.cod_ramo         = em.COD_RAMO_GEN
               AND k.cod_campo        = 'COD_FORMA_PAGO'
               AND j.cod_cia          = k.cod_cia
               AND j.val_campo_de_vcr = k.val_campo_de_vcr
               AND j.cod_ramo         = k.cod_ramo
               AND j.cod_campo        = 'COD_FORMA_PAGTO'
               AND a.num_simulacion   = j.val_campo_para_vcr
               --v1.95
          GROUP BY a.cod_fracc_pago
                  ,a.num_cuota
                  ,k.val_campo_para_vcr
          ORDER BY a.cod_fracc_pago
                  ,a.num_cuota
                  ,k.val_campo_para_vcr;
         --
       ELSIF l_tip_mvto_batch = g_k_tip_mvto_batch_endosso THEN
          -- I 1.54
          OPEN l_retorno
          FOR
            WITH AGENCIA AS
             (SELECT a.val_campo     cod_agt,
                     a.num_propuesta num_propuesta,
                     b.val_campo     cod_tarifa,
                     d.val_campo     num_presupuesto
                FROM a2000560 a, a2000560 b, a2000560 d
               WHERE b.cod_cia = a.cod_cia --5.50
                 AND d.cod_cia = b.cod_cia --5.50
                 AND a.num_propuesta = p_num_cotizacion
                 AND a.cod_campo     = 'DFCOD_AGT'
                 AND b.num_propuesta = a.num_propuesta
                 AND b.cod_campo     = 'COD_TARIFA'
                 AND d.num_propuesta = a.num_propuesta
                 AND d.cod_campo     = 'DFNUM_PRESUPUESTO')
            SELECT distinct a.cod_fracc_pago                              cod_fracc_pago
                  ,a.num_cuota                                            qtd_parcelas
                  ,k.val_campo_para_vcr                                   tip_gestor --v1.95
                  ,CASE
                   WHEN a.imp_interes +
                        a.imp_imptos_interes > 0 THEN
                     --
                     'com juros'
                     --
                   ELSE
                     --
                     'sem juros'
                     --
                   END                                                    nom_mca_juros
                  /*,ROUND(a.imp_recibo / a.num_cuota, 2)                   primeira_parcela
                  ,a.imp_recibo - ROUND((a.imp_recibo / a.num_cuota ), 2) demais*/
                  -- I 3.05
                  ,--ROUND(a.imp_recibo / a.num_cuota, 2)                   primeira_parcela
                  (a.imp_recibo -
                   ROUND(NVL(a.imp_recibo, 0) / NVL(a.num_cuota, 0), 2) * NVL((a.num_cuota - 1), 0)) primeira_parcela
                  ,--a.imp_recibo - ROUND((a.imp_recibo / a.num_cuota ), 2) demais
                  CASE
                     WHEN a.num_cuota = 1 THEN
                       0
                     ELSE
                       ROUND(NVL(a.imp_recibo, 0) / NVL(a.num_cuota, 0), 2)
                   END demais
                  -- F 3.05
                  ,a.imp_interes                                          encargos
                  ,a.imp_recibo                                           valor_total
                  ,a.imp_neta                                             valor_liquido
                  ,a.imp_imptos         +
                   a.imp_imptos_interes                                   valor_iof
                  ,CASE
                     WHEN (SELECT DISTINCT avcr.cod_plan_pago
                             FROM a1009215_vcr avcr
                            WHERE avcr.cod_agt        = c.cod_agt
                              AND avcr.cod_cia        = a.cod_cia
                              AND avcr.cod_plan_pago  = a.cod_fracc_pago
                              AND avcr.cod_forma_pago = l_cod_forma_pago
                               ) IS NOT NULL
                     THEN
                       trn.SI
                     ELSE
                       trn.NO
                   END                                                    mca_defecto
              FROM c2990700     a
                  ,AGENCIA      c
                  ,g9999021_vcr k --v1.95
                  ,g9999021_vcr j --v1.95
              WHERE a.cod_cia         = p_cod_cia
              AND a.cod_ramo          = p_cod_ramo
              AND c.num_propuesta     = p_num_cotizacion --, a.num_cotizacion)--FF
              AND a.num_cotizacion    = c.num_presupuesto
               -- v1.95 ini
               AND a.cod_cia          = k.cod_cia
               AND l_cod_forma_pago   = k.val_campo_de_vcr
               AND k.cod_ramo         = em.COD_RAMO_GEN
               AND k.cod_campo        = 'COD_FORMA_PAGO'
               AND j.cod_cia          = k.cod_cia
               AND j.val_campo_de_vcr = k.val_campo_de_vcr
               AND j.cod_ramo         = k.cod_ramo
               AND j.cod_campo        = 'COD_FORMA_PAGTO'
               AND a.num_simulacion   = j.val_campo_para_vcr
               -- v1.95 fim
          ORDER BY a.num_cuota;

         --
       ELSE
         --
          IF l_eh_3_pacotes THEN
          --
            ea_k_231_utils.p_devuelve_dato_cotizacion(ea_k_231_coti.g_k_tabla_simulacion,
                                                     'NUM_SIMULACION',
                                                      l_num_simulacion_tmp);
            --I 2.23
            IF l_num_simulacion_tmp IS NULL THEN
              --
              l_num_simulacion_tmp := l_num_simulacion ;
              --
            END IF;
            --F 2.23
            ea_k_231_utils.p_devuelve_dato_cotizacion(ea_k_231_coti.g_k_tabla_simulacion,
                                                     'NUM_SIMULACION#'||l_num_simulacion_tmp,
                                                      l_num_cotizacion_tmp);
            --
          ELSE
            --
            l_num_cotizacion_tmp := l_num_cotizacion ; -- 2.16
            --
          END IF;


         IF  not l_eh_3_pacotes THEN  -- 2.21
         --
         OPEN l_retorno
         FOR
           SELECT a.cod_fracc_pago                                      cod_fracc_pago
                 ,a.num_cuota                                           qtd_parcelas
                 ,k.val_campo_para_vcr                                  tip_gestor --v1.95
                 ,CASE
                    WHEN a.imp_interes + a.imp_imptos_interes > 0 THEN 'com juros'
                    ELSE 'sem juros'
                  END                                                   nom_mca_juros
                 /*,ROUND(a.imp_recibo / a.num_cuota, 2)                  primeira_parcela
                 ,a.imp_recibo - ROUND((a.imp_recibo / a.num_cuota), 2) demais*/
                 -- I 3.05
                 ,--ROUND(a.imp_recibo / a.num_cuota, 2)                  primeira_parcela
                 (a.imp_recibo -
                  ROUND(NVL(a.imp_recibo, 0) / NVL(a.num_cuota, 0), 2) * NVL((a.num_cuota - 1), 0)) primeira_parcela
                 ,--a.imp_recibo - ROUND((a.imp_recibo / a.num_cuota), 2) demais
                 CASE
                    WHEN a.num_cuota = 1 THEN
                      0
                    ELSE
                     ROUND(NVL(a.imp_recibo, 0) / NVL(a.num_cuota, 0), 2)
                 END demais
                  -- F 3.05
                 ,a.imp_interes                                         encargos
                 ,a.imp_recibo                                          valor_total
                 ,a.imp_neta                                            valor_liquido
                 ,a.imp_imptos + a.imp_imptos_interes                   valor_iof
                 ,CASE
                    WHEN (SELECT avcr.cod_plan_pago
                            FROM a1009215_vcr avcr
                           WHERE avcr.cod_cia        = b.cod_cia
                             AND avcr.cod_ramo       = b.cod_ramo
                             AND avcr.cod_agt        = b.cod_agt
                             AND avcr.cod_plan_pago  = a.cod_fracc_pago
                             AND avcr.cod_forma_pago = l_cod_forma_pago
                         ) IS NOT NULL
                    THEN
                      --
                      trn.SI
                      --
                    ELSE
                      --
                      trn.NO
                      --
                  END                                                mca_defecto
             FROM c2990700     a
                 ,c2009030_vcr b
                 ,g9999021_vcr k --v1.95
                 ,g9999021_vcr j --v1.95
            WHERE a.cod_cia          = b.cod_cia
              AND a.cod_ramo         = b.cod_ramo
              AND a.num_cotizacion   = b.num_cotizacion
              AND a.cod_cia          = p_cod_cia
              AND a.cod_ramo         = p_cod_ramo
              AND a.num_cotizacion   = p_num_cotizacion
              AND b.cod_cia          = p_cod_cia
              -- v1.95
              AND a.cod_cia          = k.cod_cia
              AND l_cod_forma_pago   = k.val_campo_de_vcr
              AND k.cod_ramo         = em.COD_RAMO_GEN
              AND k.cod_campo        = 'COD_FORMA_PAGO'
              AND j.cod_cia          = k.cod_cia
              AND j.val_campo_de_vcr = k.val_campo_de_vcr
              AND j.cod_ramo         = k.cod_ramo
              AND j.cod_campo        = 'COD_FORMA_PAGTO'
              AND a.num_simulacion   = j.val_campo_para_vcr
         ORDER BY a.cod_fracc_pago
                 ,a.num_cuota
                 ,k.val_campo_para_vcr;
         ELSE
         --
         OPEN l_retorno
             FOR
               SELECT distinct a.cod_fracc_pago                             cod_fracc_pago
                     ,a.num_cuota                                           qtd_parcelas
                     ,k.val_campo_para_vcr                                  tip_gestor --v1.95
                     ,CASE
                        WHEN a.imp_interes + a.imp_imptos_interes > 0 THEN 'com juros'
                        ELSE 'sem juros'
                      END                                                   nom_mca_juros
                     /*,ROUND(a.imp_recibo / a.num_cuota, 2)                  primeira_parcela
                     ,a.imp_recibo - ROUND((a.imp_recibo / a.num_cuota), 2) demais*/
                     -- I 3.05
                     ,--ROUND(a.imp_recibo / a.num_cuota, 2)                  primeira_parcela
                     (a.imp_recibo -
                      ROUND(NVL(a.imp_recibo, 0) / NVL(a.num_cuota, 0), 2) * NVL((a.num_cuota - 1), 0)) primeira_parcela
                     ,--a.imp_recibo - ROUND((a.imp_recibo / a.num_cuota), 2) demais
                     CASE
                        WHEN a.num_cuota = 1 THEN
                          0
                        ELSE
                         ROUND(NVL(a.imp_recibo, 0) / NVL(a.num_cuota, 0), 2)
                     END demais
                     -- F 3.05
                     ,a.imp_interes                                         encargos
                     ,a.imp_recibo                                          valor_total
                     ,a.imp_neta                                            valor_liquido
                     ,a.imp_imptos + a.imp_imptos_interes                   valor_iof
                     ,CASE
                        WHEN (SELECT avcr.cod_plan_pago
                                FROM a1009215_vcr avcr
                               WHERE avcr.cod_cia        = b.cod_cia
                                 AND avcr.cod_ramo       = b.cod_ramo
                                 AND avcr.cod_agt        = b.cod_agt
                                 AND avcr.cod_plan_pago  = a.cod_fracc_pago
                                 AND avcr.cod_forma_pago = l_cod_forma_pago
                             ) IS NOT NULL
                        THEN
                          --
                          trn.SI
                          --
                        ELSE
                          --
                          trn.NO
                          --
                      END                                                mca_defecto
                 FROM c2990700     a
                     ,c2009030_vcr b
                     ,g9999021_vcr k --v1.95
                     ,g9999021_vcr j --v1.95
                     ,C2000000 C  --2.21
                WHERE a.cod_cia          = b.cod_cia
                  AND a.cod_ramo         = b.cod_ramo
                  AND c.num_cotizacion   = b.num_cotizacion
                  AND a.cod_cia          = p_cod_cia
                  AND a.cod_ramo         = p_cod_ramo
                  AND a.num_cotizacion   = l_num_cotizacion_tmp
                  AND b.cod_cia          = p_cod_cia
                  AND c.num_cotizacion   = b.num_cotizacion
                  AND c.num_cotizacion   = p_num_cotizacion
                  AND c.cod_cia          = b.cod_cia
                  AND c.cod_ramo         = b.cod_ramo
                  -- v1.95
                  AND a.cod_cia          = k.cod_cia
                  AND l_cod_forma_pago   = k.val_campo_de_vcr
                  AND k.cod_ramo         = em.COD_RAMO_GEN
                  AND k.cod_campo        = 'COD_FORMA_PAGO'
                  AND j.cod_cia          = k.cod_cia
                  AND j.val_campo_de_vcr = k.val_campo_de_vcr
                  AND j.cod_ramo         = k.cod_ramo
                  AND j.cod_campo        = 'COD_FORMA_PAGTO'
                  AND a.num_simulacion   = j.val_campo_para_vcr
             ORDER BY a.cod_fracc_pago
                     ,a.num_cuota
                     ,k.val_campo_para_vcr;
             --
             END IF; -- 2.21
         --
       END IF;
       --
       -- 4.50 I
       --
       l_reg_a2009710.cod_cia        := NVL(p_cod_cia, g_cod_cia)  ;
       l_reg_a2009710.cod_ramo       := NVL(p_cod_ramo, g_cod_ramo);
       l_reg_a2009710.cod_agt        := NVL(l_cod_agt,g_cod_agt)   ;
       l_reg_a2009710.num_cotizacion := NVL(p_num_cotizacion,'9999999999999');
       l_reg_a2009710.tip_mvto_batch := NVL(l_tip_mvto_batch,NVL(g_tip_mvto_batch,9));
       l_reg_a2009710.num_paso       := NVL(g_num_paso,99);
       l_reg_a2009710.txt_processo   := 'consultarCalculoParcelasPlanoPagto';
       l_reg_a2009710.fec_ini        := SYSDATE             ;
       l_reg_a2009710.fec_fim        := NULL                ;
       l_reg_a2009710.cod_retorno    := NULL                ;
       l_reg_a2009710.desc_xml_in    := p_xml_in            ;
       l_reg_a2009710.desc_xml_out   := NULL                ;
       --
       trn_k_global.asigna('COD_USR',g_cod_usr_automatico); -- 4.50
       --
       p_gerar_xml_dados_plano_pagto(l_retorno,
                                     p_xml);
       --
       -- 4.50 I
       --
       l_reg_a2009710.fec_fim        := SYSDATE;
       l_reg_a2009710.desc_xml_out   := p_xml;
       --
       IF LENGTH(p_xml) = trn.CERO THEN
         --
         l_reg_a2009710.cod_retorno    := g_k_cod_retorno_erro;
         --
       ELSE
         --
         l_reg_a2009710.cod_retorno    := g_k_cod_retorno_suce;
         --
       END IF;
       --
       em_k_a2009710_vcr.p_trata_log_processo(l_reg_a2009710); -- 4.50
       --
       mx('F', 'p_ws_consultar_planos_pagto');
       --
    -- I 4.54
    EXCEPTION
      WHEN OTHERS THEN
         --
         g_txt_error      := substr(SQLERRM,1,2000);
         g_txt_ruta_error := substr('EM_K_GEN_WS.p_ws_consultar_planos_pagto'|| dbms_utility.format_error_backtrace,1,2000);
         --
         pp_processa_mensagem(g_err_msg, -- 4.99
                              l_retorno);
         --
         l_reg_a2009710.cod_cia        := NVL(p_cod_cia, g_cod_cia)  ;
         l_reg_a2009710.cod_ramo       := NVL(p_cod_ramo, g_cod_ramo);
         l_reg_a2009710.cod_agt        := NVL(l_cod_agt,g_cod_agt)   ;
         l_reg_a2009710.num_cotizacion := NVL(p_num_cotizacion,'9999999999999');
         l_reg_a2009710.tip_mvto_batch := NVL(l_tip_mvto_batch,NVL(g_tip_mvto_batch,9));
         l_reg_a2009710.num_paso       := NVL(g_num_paso,99);
         l_reg_a2009710.txt_processo   := 'consultarCalculoParcelasPlanoPagto';
         l_reg_a2009710.fec_ini        := SYSDATE             ;
         l_reg_a2009710.fec_fim        := SYSDATE             ;
         l_reg_a2009710.cod_retorno    := g_k_cod_retorno_erro;
         l_reg_a2009710.desc_xml_in    := p_xml_in            ;
         l_reg_a2009710.desc_xml_out   := p_xml               ;
         --
         em_k_a2009710_vcr.p_trata_log_processo(l_reg_a2009710);
         --
         pp_log_erro(p_num_cotizacion ,
                     g_txt_error      ,
                     g_txt_ruta_error );
         --
         COMMIT;
         --
         g_err_msg:= NULL; -- 4.99
         trn_k_global.borra_todas;
         --
         g_cod_mensaje    := g_k_cod_error_gen;
         g_anx_mensaje    := SQLERRM;
         --
         mx('F', 'p_ws_consultar_planos_pagto - EXCEPTION');
         --
      -- F 4.54
     --
    END p_ws_consultar_planos_pagto;
    -- Inicio v 5.49
    /* ------------------------------------------------------
    || Retorno forma de pagamento cartao recorrente
    */ ------------------------------------------------------
    PROCEDURE p_ws_agt_cartao_recorrente(p_cod_cia                 IN  a2000030.cod_cia%TYPE,
                                         p_cod_ramo                IN  a2000030.cod_ramo%TYPE,
                                         p_cod_agt                 IN  a2000030.cod_agt%TYPE,
                                         p_num_cotizacion          IN  c2000000.num_cotizacion %TYPE,
                                         p_num_cotizacion_grupo    IN  C2009030_vcr.num_poliza_grupo%TYPE,
                                         p_num_poliza_grupo        IN  A2000500.num_poliza_grupo%TYPE,
                                         p_num_contrato            IN  A2000500.num_contrato%TYPE,
                                         p_num_subcontrato         IN  A2000500.num_contrato%TYPE,
                                         p_tip_mvto_batch          IN  A2000500.tip_mvto_batch%TYPE,
                                         p_xml                     OUT CLOB)
    IS
       --
       l_habiletado         BOOLEAN;
       l_nom_forma_pago     a2000020.val_campo %TYPE;
       l_tip_mvto_batch     A2000500.tip_mvto_batch%TYPE;
       --
       l_cod_cia            a2000500.cod_cia           %TYPE;
       l_cod_ramo           a2000500.cod_ramo          %TYPE;
       -- I 1.54
       l_cod_forma_pago     g2990006.nom_valor         %TYPE;
       --
       l_retorno        ref_cursor;
       l_cod_agt        c2009030_vcr.cod_agt           %type;
       --
       l_tip_produto     g2109142_vcr.tip_produto      %TYPE ; --2.17
       --
       l_reg_a2009710      a2009710_vcr%ROWTYPE; -- 4.50
       --
    BEGIN
       --
       mx('I', 'p_ws_agt_cartao_recorrente');
       --
       l_tip_mvto_batch := NVL(p_tip_mvto_batch, g_k_tip_mvto_batch_cotacao);
       --
       -- I 1.54
       l_cod_forma_pago := NULL;
       -- I 2.16
       trn_k_global.asigna('cod_cia'         ,p_cod_cia);
       trn_k_global.asigna('cod_ramo'        ,p_cod_ramo);
       trn_k_global.asigna('num_cotizacion'  ,p_num_cotizacion);
       trn_k_global.asigna('num_poliza_grupo',p_num_poliza_grupo);
       trn_k_global.asigna('num_contrato'    ,p_num_contrato);
       trn_k_global.asigna('num_subcontrato' ,p_num_subcontrato);
       trn_k_global.asigna('tip_mvto_batch'  ,l_tip_mvto_batch); --v3.75
       trn_k_global.asigna('cod_agt'         ,p_cod_agt);
       trn_k_global.asigna('cod_tarifa'      ,NVL(trn_k_global.ref_f_global('cod_tarifa')
                                                 ,g_k_cod_tarifa_generico)); --v3.75
       --
       g_num_paso := trn_k_global.ref_f_global('NUM_PASO'); -- 4.50
       --
       IF l_tip_mvto_batch = g_k_tip_mvto_batch_cotacao
       THEN
         --
         g_mca_valida := 'N';
         pp_asigna_globales_defecto;
         g_mca_valida := NULL;
         --
       ELSE
         trn_k_global.asigna('num_propuesta' , p_num_cotizacion );
         pp_asgina_globales_spto;
       END IF;
       --
       IF l_tip_mvto_batch = g_k_tip_mvto_batch_cotacao THEN -- 2.20
         --
         ea_k_231_utils.p_devuelve_dato_cotizacion(p_nom_tabla   => ea_k_231_utils.g_k_tabla_dv,
                                                   p_nom_columna => 'TIP_PRODUTO'              ,
                                                   p_val_campo   => l_tip_produto);
         --
       ELSE
         --
         l_tip_produto := ea_k_231_utils.f_valor_dv('tip_produto'); --2.17
         --
       END IF;   -- 2.20
       --
       l_cod_cia  := p_cod_cia;
       l_cod_ramo := p_cod_ramo;
       l_cod_agt  := p_cod_agt;
       --
       l_habiletado := gc_k_a5029634_vcr.f_forma_pagto_gateway_agt(
                       l_cod_cia, l_cod_ramo, l_tip_produto, l_cod_agt, g_k_tip_gestor_ta );
       --
       IF l_habiletado
         THEN
           --
           l_nom_forma_pago := trn.SI;
           --
       ELSE
         --
         l_nom_forma_pago := trn.NO;
         --
       END IF;
       --
       OPEN l_retorno
       FOR
          --
          SELECT  'forma_pagto'       AS cod_forma_pago -- v2.02
                 ,l_nom_forma_pago    AS nom_forma_pago -- v2.02
            FROM DUAL
           WHERE ROWNUM = 1;
       --
       l_reg_a2009710.cod_cia        := NVL(p_cod_cia, g_cod_cia)  ;
       l_reg_a2009710.cod_ramo       := NVL(p_cod_ramo, g_cod_ramo);
       l_reg_a2009710.cod_agt        := NVL(p_cod_agt,g_cod_agt)   ;
       l_reg_a2009710.num_cotizacion := NVL(p_num_cotizacion,'9999999999999');
       l_reg_a2009710.tip_mvto_batch := NVL(l_tip_mvto_batch,NVL(g_tip_mvto_batch,9));
       l_reg_a2009710.num_paso       := NVL(g_num_paso,99)  ;
       l_reg_a2009710.txt_processo   := 'consultarFormaPagamentogateway';
       l_reg_a2009710.fec_ini        := SYSDATE             ;
       l_reg_a2009710.fec_fim        := NULL                ;
       l_reg_a2009710.cod_retorno    := NULL                ;
       l_reg_a2009710.desc_xml_in    := NULL                ; -- p_xml_in
       l_reg_a2009710.desc_xml_out   := NULL                ;
       --
       trn_k_global.asigna('COD_USR',g_cod_usr_automatico); -- 4.50
       --
       p_gerar_xml_campo_unico(l_retorno, p_xml);
       --
       l_reg_a2009710.fec_fim        := SYSDATE;
       l_reg_a2009710.desc_xml_out   := p_xml;
       --
       IF LENGTH(p_xml) = trn.CERO THEN
         --
         l_reg_a2009710.cod_retorno    := g_k_cod_retorno_erro;
         --
       ELSE
         --
         l_reg_a2009710.cod_retorno    := g_k_cod_retorno_suce;
         --
       END IF;
       --
       em_k_a2009710_vcr.p_trata_log_processo(l_reg_a2009710); -- 4.50
       --
       mx('F', 'p_ws_agt_cartao_recorrente');
       --
    END p_ws_agt_cartao_recorrente;
    -- Fim v 5.49
    /* ------------------------------------------------------
    || Devolve para o webmethods parametro CLOB: p_xml
    */ ------------------------------------------------------
    --
    PROCEDURE p_devuelve_lista_valores (p_cod_cia        IN a2000030.cod_cia%TYPE,
                                        p_cod_ramo       IN a2000030.cod_ramo%TYPE,
                                        p_cod_campo      IN c2000020.cod_campo%TYPE,
                                        p_xml            OUT CLOB)
    IS
       --
       l_erro    ref_cursor;
       l_retorno ref_cursor;
       --
    BEGIN
       --
       mx('I', 'p_devuelve_lista_valores');
       --
       /**
       || Busca a lista de valores e retorna na variavel : l_retorno
       */

       p_lee_lista_valores(p_cod_cia,p_cod_ramo,p_cod_campo,l_retorno,l_erro);
       --
       /**
       || Geral o XML com a lista de valores e retorna na variavel : p_xml
       */
       IF l_erro IS NULL THEN
          --
          p_gerar_xml_lista_campos(l_retorno, p_xml);
          --
       ELSE
         --
         p_gerar_xml_mensagem(l_erro,p_xml);
         --
       END IF;
       --
       mx('F', 'p_devuelve_lista_valores');
       --
    END p_devuelve_lista_valores;

    --
    /* ------------------------------------------------------
    || Devolve o valor da lista na coluna : p_xml
    */ ------------------------------------------------------
    PROCEDURE p_devuelve_lista_dinamica (p_cod_cia          IN a2000030.cod_cia%TYPE,
                                         p_cod_ramo         IN a2000030.cod_ramo%TYPE,
                                         p_cod_campo        IN c2000020.cod_campo%TYPE,
                                         p_nom_tabla_valida IN g2000020.nom_tabla_valida%TYPE,
                                         p_cod_version      IN g2000020.cod_version%TYPE,
                                         p_xml_in           IN CLOB,
                                         p_xml              OUT CLOB)
    IS
       --
       l_retorno ref_cursor;
       l_erro    ref_cursor;
       --
    BEGIN
       --
       mx('I', 'p_devuelve_lista_dinamica');
       --
       /**
       || Efetua asigna dos parametros do xml de entrada (xml_in)
       || Executa query dinamica
       || Retorna xml
       */

       p_lee_lista_dinamica(p_cod_cia,p_cod_ramo,p_cod_campo,p_nom_tabla_valida,p_cod_version,p_xml_in,l_retorno,l_erro);
       /**
       || Geral o XML com a lista de valores e retorna na variavel : p_xml
       */
       IF l_erro IS NULL THEN
          --
          p_gerar_xml_lista_campos(l_retorno, p_xml);
          --
       ELSE
          --
          p_gerar_xml_mensagem(l_erro,p_xml);
          --
       END IF;
       --
       mx('F', 'p_devuelve_lista_dinamica');
       --
    END p_devuelve_lista_dinamica;
    --
    /* ------------------------------------------------------
    || Devolve para o webmethods parametro CLOB: p_xml
    */ ------------------------------------------------------
    --
    PROCEDURE pp_ws_consulta_cotacao (p_cod_cia          IN  a2000030.cod_cia          %TYPE,
                                      p_cod_ramo         IN  a2000030.cod_ramo         %TYPE,
                                      p_cod_agt          IN  a2000030.cod_agt          %TYPE,
                                      p_num_poliza_grupo IN  A2000500.num_poliza_grupo %TYPE,
                                      p_num_contrato     IN  A2000500.num_contrato     %TYPE,
                                      p_num_subcontrato  IN  A2000500.num_contrato     %TYPE,
                                      p_tip_mvto_batch   IN  A2000500.tip_mvto_batch   %TYPE,
                                      p_xml_in           IN                             CLOB,
                                      p_xml              OUT                            CLOB)
    IS
       --
       l_retorno           ref_cursor;
       --
       l_tip_docum         a2000030.tip_docum     %TYPE;
       l_cod_docum         a2000030.cod_docum     %TYPE;
       l_num_serie         a2009018_vcr.num_chassi%TYPE;
       l_num_matricula     a2000020.val_campo     %TYPE;
       l_num_poliza        a2000030.num_poliza    %TYPE;
       l_tip_mvto_batch    A2000500.tip_mvto_batch%TYPE;
       l_cod_servico       G9999991.cod_servicio  %TYPE;
       l_cod_sistema       NUMBER                      ; -- V 1.73
       --
       l_mca_renovacion    VARCHAR2(1)                 ;
       -- v2.25 ini
       l_cod_fipe          a2000020.val_campo     %TYPE;
       l_cod_marca         a2000020.val_campo     %TYPE;
       l_cod_modelo        a2000020.val_campo     %TYPE;
       l_cod_sub_modelo    a2000020.val_campo     %TYPE;
       l_anio_sub_modelo   a2000020.val_campo     %TYPE;
       -- v2.25 fim
       l_nom_tercero       a2000020.val_campo     %TYPE; -- v 4.33
    BEGIN
       --
       mx('I', 'pp_ws_consulta_cotacao');
       --
       g_err_msg := TYPTAB_MSG_WS(); -- 4.99
       --
       l_tip_mvto_batch  := NVL(p_tip_mvto_batch, g_k_tip_mvto_batch_cotacao);
       --
       l_tip_docum       := fp_recupera_valor (p_xml_in, 'TIP_DOCUM'        );
       l_cod_docum       := fp_recupera_valor (p_xml_in, 'COD_DOCUM'        );
       l_num_serie       := fp_recupera_valor (p_xml_in, 'NUM_SERIE'        );
       l_num_matricula   := fp_recupera_valor (p_xml_in, 'NUM_MATRICULA'    );
       l_num_poliza      := fp_recupera_valor (p_xml_in, 'NUM_POLIZA'       );
       l_cod_sistema     := fp_recupera_valor (p_xml_in, 'COD_SISTEMA'      ); -- V 1.73
       l_mca_renovacion  := fp_recupera_valor (p_xml_in, 'MCA_RENOVACION'   );
       -- v2.25 ini
       l_cod_fipe        := fp_recupera_valor (p_xml_in, 'COD_MARCA_REF'    );
       l_cod_marca       := fp_recupera_valor (p_xml_in, 'COD_MARCA'        );
       l_cod_modelo      := fp_recupera_valor (p_xml_in, 'COD_MODELO'       );
       l_cod_sub_modelo  := fp_recupera_valor (p_xml_in, 'COD_SUB_MODELO'   );
       l_anio_sub_modelo := fp_recupera_valor (p_xml_in, 'ANIO_SUB_MODELO'  );
       -- v2.25 fim
       l_nom_tercero     := fp_recupera_valor (p_xml_in, 'NOM_TERCERO'      ); -- v 4.33
       g_xml_in         := p_xml_in;
       --
       -- { jwolff
       l_cod_servico := fp_devuelve_cod_servicio(p_tip_servicio         => 'C'             , -- Consulta
                                                 p_tip_mvto_batch       => l_tip_mvto_batch,
                                                 p_num_cotizacion_grupo => NULL            ,
                                                 p_mca_poliza_grupo     => NULL            );
       -- } jwolff
       --
       trn_k_global.asigna('COD_CIA'        ,p_cod_cia              );
       trn_k_global.asigna('COD_RAMO'       ,p_cod_ramo             );
       trn_k_global.asigna('COD_TARIFA'     ,g_k_cod_tarifa_generico);
       trn_k_global.asigna('TIP_MVTO_BATCH' ,l_tip_mvto_batch       );
       trn_k_global.asigna('COD_AGT'        ,p_cod_agt              );
       trn_k_global.asigna('COD_SERVICIO'   ,l_cod_servico          );
       trn_k_global.asigna('TIP_DOCUM'      ,l_tip_docum            );
       trn_k_global.asigna('COD_DOCUM'      ,l_cod_docum            );
       trn_k_global.asigna('NUM_SERIE'      ,l_num_serie            );
       trn_k_global.asigna('NUM_MATRICULA'  ,l_num_matricula        );
       trn_k_global.asigna('NUM_POLIZA'     ,l_num_poliza           );
       trn_k_global.asigna('COD_SISTEMA'    ,l_cod_sistema          ); -- V 1.73
       trn_k_global.asigna('MCA_RENOVACION' ,l_mca_renovacion       ); -- v2.25
       -- v2.25 ini
       trn_k_global.asigna('COD_FIPE'       ,l_cod_fipe             );
       trn_k_global.asigna('COD_MARCA'      ,l_cod_marca            );
       trn_k_global.asigna('COD_MODELO'     ,l_cod_modelo           );
       trn_k_global.asigna('COD_SUB_MODELO' ,l_cod_sub_modelo       );
       trn_k_global.asigna('ANIO_SUB_MODELO',l_anio_sub_modelo      );
       -- v2.25 fim
       trn_k_global.asigna('NOM_TERCERO'    ,l_nom_tercero          ); -- v 4.33
       p_busca_procedimento;
       --
       p_xml := g_xml;
       --
       mx('F', 'pp_ws_consulta_cotacao');
       --
    END pp_ws_consulta_cotacao;
    --
    /* ------------------------------------------------------
    || Devolve para o webmethods parametro CLOB: p_xml
    */ ------------------------------------------------------
    --
    PROCEDURE p_ws_consulta_cotacao (p_cod_cia          IN  a2000030.cod_cia%TYPE,
                                     p_cod_ramo         IN  a2000030.cod_ramo%TYPE,
                                     p_cod_agt          IN  a2000030.cod_agt%TYPE,
                                     p_num_poliza_grupo IN  A2000500.num_poliza_grupo%TYPE,
                                     p_num_contrato     IN  A2000500.num_contrato%TYPE,
                                     p_num_subcontrato  IN  A2000500.num_contrato%TYPE,
                                     p_tip_mvto_batch   IN  A2000500.tip_mvto_batch%TYPE,
                                     p_xml_in           IN  CLOB,
                                     p_xml              OUT CLOB)
    IS
       --
       l_retorno           ref_cursor;
       --
       l_tip_docum         a2000030.tip_docum%TYPE;
       l_cod_docum         a2000030.cod_docum%TYPE;
       l_num_serie         a2009018_vcr.num_chassi%TYPE;
       l_num_matricula     a2000020.val_campo%TYPE;
       l_num_poliza        a2000030.num_poliza%TYPE;
       l_tip_mvto_batch    A2000500.tip_mvto_batch%TYPE;
       l_cod_servico       G9999991.cod_servicio%TYPE;
       --
       l_reg_a2009710      a2009710_vcr%ROWTYPE; -- 4.52
       --

    BEGIN
       --
       mx('I', 'p_ws_consulta_cotacao');
       --
       -- 4.52 I
       --
       g_num_cotizacion       := trn_k_global.ref_f_global('NUM_COTIZACION');
       g_num_paso             := trn_k_global.ref_f_global('NUM_PASO');
       --
       -- 4.52 F
       --
       trn_k_global.borra_todas;
       --
       -- 4.52 I
       --
       l_reg_a2009710.cod_cia        := p_cod_cia           ;
       l_reg_a2009710.cod_ramo       := p_cod_ramo          ;
       l_reg_a2009710.cod_agt        := NVL(p_cod_agt, em.COD_AGT_GEN)          ;
       l_reg_a2009710.num_cotizacion := NVL(g_num_cotizacion, em.NUM_POLIZA_GEN);
       l_reg_a2009710.tip_mvto_batch := NVL(p_tip_mvto_batch,9);
       l_reg_a2009710.num_paso       := NVL(g_num_paso,99)     ;
       l_reg_a2009710.txt_processo   := 'consultarCotacao'     ;
       l_reg_a2009710.fec_ini        := SYSDATE                ;
       l_reg_a2009710.fec_fim        := NULL                   ;
       l_reg_a2009710.cod_retorno    := NULL                   ;
       l_reg_a2009710.desc_xml_in    := p_xml_in               ;
       l_reg_a2009710.desc_xml_out   := NULL                   ;
       --
       trn_k_global.asigna('COD_USR',g_cod_usr_automatico);
       --
       pp_ws_consulta_cotacao (p_cod_cia         ,
                               p_cod_ramo        ,
                               p_cod_agt         ,
                               p_num_poliza_grupo,
                               p_num_contrato    ,
                               p_num_subcontrato ,
                               p_tip_mvto_batch  ,
                               p_xml_in          ,
                               p_xml             );
       --
       l_reg_a2009710.fec_fim        := SYSDATE;
       l_reg_a2009710.desc_xml_out   := p_xml;
       --
       IF LENGTH(p_xml) = trn.CERO THEN
         --
         l_reg_a2009710.cod_retorno    := g_k_cod_retorno_erro;
         --
       ELSE
         --
         l_reg_a2009710.cod_retorno    := g_k_cod_retorno_suce;
         --
       END IF;
       --
       em_k_a2009710_vcr.p_trata_log_processo(l_reg_a2009710);
       --
       mx('F', 'p_ws_consulta_cotacao');
       --
    END p_ws_consulta_cotacao;
    --
    /* ------------------------------------------------------
    || Devolve para o webmethods parametro CLOB: p_xml
    */ ------------------------------------------------------
    -- I 1.61
    --
    PROCEDURE p_ws_consulta_cotacao_mcc (p_cod_cia                 IN  a2000030.cod_cia%TYPE,
                                         p_cod_ramo                 IN  a2000030.cod_ramo%TYPE,
                                         p_cod_agt                  IN  a2000030.cod_agt%TYPE,
                                         p_num_cotizacion_grupo     IN  C2009030_vcr.num_poliza_grupo%TYPE,
                                         p_num_poliza_grupo         IN  A2000500.num_poliza_grupo%TYPE,
                                         p_num_contrato             IN  A2000500.num_contrato%TYPE,
                                         p_num_subcontrato          IN  A2000500.num_contrato%TYPE,
                                         p_tip_mvto_batch           IN  A2000500.tip_mvto_batch%TYPE,
                                         p_xml_in                   IN  CLOB,
                                         p_xml                      OUT CLOB)
    IS
      --
      l_retorno           ref_cursor;
      --cursor y registros auxiliares
      l_comprobar_coti ref_cursor;
      l_lista_aux      rec_lista_cotacao_mcc_aux;
    --}amarco
      --
      l_num_cotizacion    c2000000.num_cotizacion %TYPE;
      l_tip_docum         a2000030.tip_docum      %TYPE;
      l_cod_docum         a2000030.cod_docum      %TYPE;
      l_nom_tercero       a1001399.nom_tercero    %TYPE;
      l_tip_mvto_batch    A2000500.tip_mvto_batch %TYPE;
      -- {jwolff
      l_mca_flota             VARCHAR2(1);
      l_num_cotizacion_grupo  c2000000.num_cotizacion%TYPE;
      l_cod_situacion         c2000000.val_columna   %TYPE;
      --}jwolff
      l_cod_sistema           number(1);                  -- 1.51
      l_num_poliza            a2000030.num_poliza %TYPE;  -- 1.51
      --

      -- I v 2.15
      l_tip_produto          NUMBER(3);
      l_limite_ini           NUMBER(3);
      l_limite_fim           NUMBER(3);
      l_range_dias           VARCHAR2(5);
      l_mca_proposta         VARCHAR2(1);
      -- F v 2.15
      --
      l_tip_produto_alt g2109142_vcr.tip_produto %TYPE; -- 2.43
      l_eh_3_pacotes    BOOLEAN := FALSE; -- 2.43
      --
      --amarco{
      l_num_paso_compr      c2000000.val_columna %TYPE;
      l_nom_tercero_compr   c2000000.val_columna %TYPE;
      l_tip_docum_compr     c2000000.val_columna %TYPE;
      l_cod_docum_compr     c2000000.val_columna %TYPE;
      l_cod_situacion_compr c2000000.val_columna %TYPE;
      l_tip_produto_compr   c2000000.val_columna %TYPE;
      --
      l_dias_renov_neg    df_cmn_nwt_xx_cnn.vrb_nam_val%TYPE; -- 4.77 I
      l_dias_renov_min    df_cmn_nwt_xx_cnn.vrb_nam_val%TYPE;
      l_fec_efec_poliza   c2000000.val_columna%TYPE;
      l_mca_renov_outras  c2000000.val_columna%TYPE;
      l_qtde_dias         NUMBER;
      l_busca_renov       VARCHAR(1) := trn.SI;
      l_tip_seguro_mapfre NUMBER(2);
      l_tip_seguro_bb     NUMBER(2); -- 4.77 F
      l_num_poliza_renov  a2000030.num_poliza%TYPE; -- 4.78
      l_tip_situ          a2009540_vcr.tip_situ%TYPE; -- 4.78
      l_tip_renov         c2000000.val_columna %TYPE := NULL; -- 4.80
      l_cod_susep_agt              a2000020.val_campo             %TYPE; -- v5.51
      l_tip_classificacao_corretor a2000020.val_campo             %TYPE; -- v5.51
      l_num_dias_vigencia          g2109013_vcr.num_dias_vigencia %TYPE; -- v5.51
      l_cod_sector                 a2000030.cod_sector            %TYPE; -- v5.51
      l_fec_emision                c2009030_vcr.fec_emision       %TYPE; -- v5.51
      l_fec_primeiro_calculo       c2000000.val_columna           %TYPE; -- v5.27
      --
      l_habilita_calc_renov        df_cmn_nwt_xx_cnn.vrb_nam_val%TYPE;  --v5.53
	  -- I 5.69
      l_mca_fec_bo                 c2000000.val_columna           %TYPE;
      l_num_dias_vigencia_bo       g2109013_vcr.num_dias_vigencia %TYPE;
      -- F 5.69
      l_existe_9030 NUMBER;
      --
      e_cotacao_MCC EXCEPTION;
      --
      CURSOR lc_existe_9030(pc_cod_cia             IN a2000030.cod_cia%TYPE,
                           pc_cod_ramo             IN a2000030.cod_ramo%TYPE,
                           pc_num_cotizacion_grupo IN C2009030_vcr.num_poliza_grupo%TYPE) IS
        SELECT COUNT(*)
            FROM c2009030_vcr
        WHERE cod_cia = pc_cod_cia
            AND cod_ramo = pc_cod_ramo
            AND num_poliza_grupo = pc_num_cotizacion_grupo;
        --
        l_cod_docum_aux a2000030.cod_docum %TYPE;
    -- I 4.78
    CURSOR lc_renovacion_otimizada(p_num_poliza_renov a2000030.num_poliza%TYPE) IS
    --
      SELECT a.*
        FROM a2009540_vcr a
       WHERE a.cod_cia = p_cod_cia
         AND a.tip_mvto_batch = l_tip_mvto_batch
         AND a.num_cotizacion = l_num_cotizacion
         AND a.num_poliza_anterior = p_num_poliza_renov
         AND a.cod_ramo_destino = p_cod_ramo
         AND a.cod_agt = p_cod_agt
         AND a.FEC_CALCULO_COTIZACION =
             (SELECT max(b.FEC_CALCULO_COTIZACION)
                FROM a2009540_vcr b
               WHERE b.cod_cia = a.cod_cia
                 AND b.cod_ramo_destino = a.cod_ramo_destino
                 AND b.tip_mvto_batch = a.tip_mvto_batch
                 AND b.num_poliza_anterior = a.num_poliza_anterior
                 AND b.num_cotizacion = a.num_cotizacion
                 AND b.cod_agt = a.cod_agt);
    --
    lreg_renovacion_otimizada lc_renovacion_otimizada%ROWTYPE;
    -- F 4.78
      BEGIN
        --
        mx('I', 'p_ws_consulta_cotacao_mcc');
        --
        trn_k_global.p_asigna('cod_cia',p_cod_cia); -- v5.57
        --
        --trn_k_global.borra_todas;
        --
        l_tip_mvto_batch := NVL(p_tip_mvto_batch, g_k_tip_mvto_batch_cotacao);
        --
        IF P_COD_RAMO = g_k_residencial AND
           LENGTH(fp_recupera_valor (p_xml_in, 'NUM_COTIZACION')) > 13 THEN
          RAISE e_cotacao_MCC;
        END IF;
        --
        l_num_cotizacion:= fp_recupera_valor (p_xml_in, 'NUM_COTIZACION');
        l_tip_docum     := fp_recupera_valor (p_xml_in, 'TIP_DOCUM');
        l_cod_docum     := fp_recupera_valor (p_xml_in, 'COD_DOCUM');
        l_nom_tercero   := fp_recupera_valor (p_xml_in, 'NOM_TERCERO');
        l_cod_sistema   := fp_recupera_valor (p_xml_in, 'COD_SISTEMA'); -- 1.51
        l_num_poliza    := fp_recupera_valor (p_xml_in, 'NUM_POLIZA');  -- 1.51
        -- {jwolff
        l_mca_flota            := NVL(fp_recupera_valor (p_xml_in, 'MCA_FROTA'), trn.NO);
        trn_k_global.asigna('mca_frota', l_mca_flota);
        l_num_cotizacion_grupo := p_num_cotizacion_grupo;
        l_cod_situacion        := fp_recupera_valor (p_xml_in, 'COD_SITUACAO');
        -- I v 2.15
        l_tip_produto   := fp_recupera_valor (p_xml_in, 'TIP_PRODUTO');
        l_limite_ini    := fp_recupera_valor (p_xml_in, 'LIMITE_INI');
        l_limite_fim    := fp_recupera_valor (p_xml_in, 'LIMITE_FIM');
        --
        g_cod_ramo      := p_cod_ramo;
        --
        l_mca_proposta  := 0;
        -- F v 2.15
        --
        -- I 2.43
        BEGIN
        --
           SELECT c.val_columna
                INTO l_tip_produto_alt
                FROM c2000000 c
           WHERE c.cod_cia = p_cod_cia
                 AND c.cod_ramo = p_cod_ramo
                 AND c.num_cotizacion = l_num_cotizacion
                 AND c.nom_tabla = 'A2000020' -- 4.65
                 AND c.nom_columna = 'TIP_PRODUTO';
        --
        EXCEPTION
         WHEN OTHERS THEN
           --
           l_tip_produto_alt := NULL;
           --
        END;
        --
        l_eh_3_pacotes := ea_k_g2109142_vcr.f_eh_3_pacotes(p_cod_cia, --2.70
                                                           p_cod_ramo,
                                                           p_cod_agt,
                                                           l_tip_produto_alt);
        -- I 3.47
        IF l_eh_3_pacotes THEN
         --
         pp_asigna('tres_pacotes',1);
         --
        ELSE
         --
         pp_asigna('tres_pacotes',0);
         --
        END IF;
        -- F 3.47
        trn_k_global.asigna('COD_AGT', p_cod_agt);
        trn_k_global.asigna('TIP_PRODUTO', l_tip_produto_alt);
        -- F 2.43
        --
        mx('l_num_cotizacion',l_num_cotizacion);
        mx('l_num_cotizacion_grupo',l_num_cotizacion_grupo);
        mx('l_mca_flota',l_mca_flota);
        mx('l_cod_sistema',l_cod_sistema);
        mx('l_cod_docum',l_cod_docum);
        mx('l_nom_tercero',SUBSTR(l_nom_tercero, 1, 50));
        --}jwolff
        --
        IF p_cod_ramo = ea_k_231_utils.g_k_ramo_motor THEN -- 4.77 I
         --
         trn_k_global.p_asigna('fec_validez', TRUNC(SYSDATE));
         --
         l_tip_seguro_mapfre := ea_k_231_utils.f_recupera_constante(p_cod_cia   => p_cod_cia,
                                                                    p_cod_campo => 'TIP_SEGU_RENOV_MAPFRE');
         l_tip_seguro_bb     := ea_k_231_utils.f_recupera_constante(p_cod_cia   => p_cod_cia,
                                                                    p_cod_campo => 'TIP_SEGU_RENOV_BB');
         --
         l_dias_renov_neg := ea_k_231_utils.f_recupera_constante(p_cod_cia   => p_cod_cia,
                                                                 p_cod_campo => 'DIAS_RENOV_NEG');
         l_dias_renov_min := ea_k_231_utils.f_recupera_constante(p_cod_cia   => p_cod_cia,
                                                                 p_cod_campo => 'DIAS_RENOV_MIN');
         --
         IF l_num_cotizacion IS NOT NULL THEN
           --
           em_k_c2000000.p_lee(p_cod_cia        => p_cod_cia,
                               p_cod_ramo       => p_cod_ramo,
                               p_num_cotizacion => l_num_cotizacion,
                               p_nom_tabla      => ea_k_231_coti.g_k_tabla_dv,
                               p_nom_columna    => 'MCA_RENOV_OUTRAS',
                               p_cod_fila       => 99999);
           --
           l_mca_renov_outras := em_k_c2000000.f_val_columna;
           --
           IF l_mca_renov_outras IS NOT NULL AND
              l_mca_renov_outras IN (l_tip_seguro_mapfre, l_tip_seguro_bb) THEN -- 4.78
             --
             em_k_c2000000.p_lee(p_cod_cia        => p_cod_cia,
                                 p_cod_ramo       => p_cod_ramo,
                                 p_num_cotizacion => l_num_cotizacion,
                                 p_nom_tabla      => ea_k_231_coti.g_k_tabla_dv,
                                 p_nom_columna    => 'TIP_RENOV',
                                 p_cod_fila       => 99999);  -- 4.80
             --
             l_tip_renov := em_k_c2000000.f_val_columna;      -- 4.80
             --
        em_k_c2000000.p_lee(p_cod_cia        => p_cod_cia,
                            p_cod_ramo       => p_cod_ramo,
                            p_num_cotizacion => l_num_cotizacion,
                            p_nom_tabla      => ea_k_231_utils.g_k_tabla_dv,
                            p_nom_columna    => 'NUM_POLIZA_RENOV',
                            p_cod_fila       => 99999);
        --
        l_num_poliza_renov := em_k_c2000000.f_val_columna;
        --
        IF lc_renovacion_otimizada%ISOPEN THEN
          --
          CLOSE lc_renovacion_otimizada;
             --
        END IF;
        --
        OPEN lc_renovacion_otimizada(l_num_poliza_renov);
        --
        FETCH lc_renovacion_otimizada
          INTO lreg_renovacion_otimizada;
             --
        CLOSE lc_renovacion_otimizada;
        -- F 4.78
             em_k_c2000000.p_lee(p_cod_cia        => p_cod_cia,
                                 p_cod_ramo       => p_cod_ramo,
                                 p_num_cotizacion => l_num_cotizacion,
                                 p_nom_tabla      => ea_k_231_coti.g_k_tabla_dv,
                                 p_nom_columna    => 'FEC_VCTO_POLIZA_CONGENERE',
                                 p_cod_fila       => 99999);
             --
             l_fec_efec_poliza := em_k_c2000000.f_val_columna;
             --
             l_qtde_dias := TO_DATE(l_fec_efec_poliza, trn.FORMATO_FECHA) - trn_k_tiempo.f_fec_actu;
             --
             IF l_tip_renov IS NOT NULL THEN -- 4.88 I
               --
               IF NOT ((l_qtde_dias BETWEEN l_dias_renov_neg AND l_dias_renov_min) AND
                 lreg_renovacion_otimizada.TIP_SITU IN (em_k_migracion_polizas_vcr.g_k_otimizada_recalculada, g_k_flex)) THEN -- 4.83
                 --
                 l_busca_renov := trn.NO;
                 --
               END IF;
               --
             END IF; -- 4.88 F
             --
           END IF;
           --
         END IF;
         --
        END IF; -- 4.77 F
        --
        -- {v5.51
        BEGIN
          --
          dc_k_a1001332.p_lee(p_cod_cia     => p_cod_cia
                             ,p_cod_agt     => p_cod_agt
                             ,p_fec_validez => TRUNC(SYSDATE));
          --
          l_cod_susep_agt := dc_k_a1001332.f_cod_agt_colegio;
          --
          EXCEPTION WHEN OTHERS THEN
            --
            l_cod_susep_agt := ea_k_231_utils.g_k_cod_susep_gen_2;
            --
        END;
        --
        l_cod_sector      := dc_f_cod_sector_a1001800(p_cod_cia  => p_cod_cia
                                                     ,p_cod_ramo => p_cod_ramo);
        --
        BEGIN
          --
          em_k_c2009030_vcr.p_lee(p_cod_cia        => p_cod_cia
                                 ,p_cod_ramo       => p_cod_ramo
                                 ,p_num_cotizacion => l_num_cotizacion);
          --
          l_fec_emision   := trunc(em_k_c2009030.f_fec_emision);
          --
          EXCEPTION WHEN OTHERS THEN
            --
            l_fec_emision   := trunc(SYSDATE);
            --
        END;
        --
        BEGIN
          --
          em_k_c2000000.p_lee(p_cod_cia        => p_cod_cia
                             ,p_cod_ramo       => p_cod_ramo
                             ,p_num_cotizacion => l_num_cotizacion
                             ,p_nom_tabla      => ea_k_231_coti.g_k_tabla_dv
                             ,p_nom_columna    => 'FEC_PRIMEIRO_CALCULO'
                             ,p_cod_fila       => 99999);
          --
          l_fec_primeiro_calculo := em_k_c2000000.f_val_columna;
          --
          EXCEPTION WHEN OTHERS THEN
            --
            l_fec_primeiro_calculo  := to_char(l_fec_emision,'DDMMYYYY');
            --
        END;
        --
        BEGIN
          --
          dc_k_g1001332_vcr.p_lee_vigente(p_cod_cia
                                         ,l_cod_sector
                                         ,p_cod_ramo
                                         ,l_tip_produto_alt
                                         ,dc.COD_NIVEL1_GEN
                                         ,dc.COD_NIVEL2_GEN
                                         ,dc.COD_NIVEL3_GEN
                                         ,dc.COD_CANAL1_GEN
                                         ,dc.COD_CANAL2_GEN
                                         ,dc.COD_CANAL3_GEN
                                         ,p_cod_agt
                                         ,l_cod_susep_agt
                                         ,em.NUM_POLIZA_GRUPO_GEN
                                         ,em.NUM_CONTRATO_GEN
                                         ,em.NUM_SUBCONTRATO_GEN
                                         ,em.NUM_POLIZA_GEN
                                         ,em.NUM_POLIZA_GEN
                                         ,em.COD_MODALIDAD_GEN
                                         ,ea_k_231_utils.g_k_tip_segmento_gen
                                         ,TRUNC(SYSDATE));
          --
          l_tip_classificacao_corretor := dc_k_g1001332_vcr.f_tip_classificacao_corretor;
          --
          EXCEPTION WHEN OTHERS THEN
            --
            l_tip_classificacao_corretor := 'ZZ';
            --
        END;
        --
        BEGIN
          --
          ea_k_g2109013.p_lee_vigente(p_cod_cia
                                     ,p_cod_ramo
                                     ,p_cod_agt
                                     ,dc.COD_NIVEL1_GEN
                                     ,dc.COD_NIVEL2_GEN
                                     ,dc.COD_NIVEL3_GEN
                                     ,dc.COD_CANAL1_GEN
                                     ,dc.COD_CANAL2_GEN
                                     ,dc.COD_CANAL3_GEN
                                     ,em.NUM_POLIZA_GRUPO_GEN
                                     ,em.NUM_CONTRATO_GEN
                                     ,em.NUM_SUBCONTRATO_GEN
                                     ,em.NUM_POLIZA_GEN
                                     ,em.NUM_POLIZA_GEN
                                     ,l_mca_renov_outras
                                     ,NVL(to_date(l_fec_primeiro_calculo,'DDMMYYYY'),
                                                  l_fec_emision)
                                     ,em.COD_MODALIDAD_GEN
                                     ,g_k_tip_mvto_batch
                                     ,l_cod_susep_agt
                                     ,l_tip_classificacao_corretor
                                     ,g_k_cod_canal_origen_gen
                                     ,g_k_cod_canal_comerc_entrada
                                     ,g_k_cod_canal_comerc_calculo
                                     ,g_k_mca_zero_km
                                     ,g_k_mca_sini_ult_vigencia
                                     ,g_k_cod_afinidade);
          --
          l_num_dias_vigencia    := ea_k_g2109013.f_num_dias_vigencia;
          --
          EXCEPTION WHEN OTHERS THEN
            --
            IF l_mca_renov_outras IN ('1','4','5') THEN
              --
              l_num_dias_vigencia  := 15;
              --
            ELSE
              --
              l_num_dias_vigencia  := 5;
              --
            END IF;
            --
        END;
        --
        IF l_num_dias_vigencia IS NULL THEN
          --
          IF l_mca_renov_outras IN ('1','4','5') THEN
            --
            l_num_dias_vigencia  := 15;
            --
          ELSE
            --
            l_num_dias_vigencia  := 5;
            --
          END IF;
          --
        END IF;
        -- v5.51}
        -- I 5.69
        IF  l_mca_renov_outras IN ('2','6') THEN
         --
         em_k_c2000000.p_lee(p_cod_cia        => p_cod_cia,
                             p_cod_ramo       => p_cod_ramo,
                             p_num_cotizacion => l_num_cotizacion,
                             p_nom_tabla      => 'A0000000',
                             p_nom_columna    => 'MCA_FEC_BO',
                             p_cod_fila       => 99999);
        --
        l_mca_fec_bo := em_k_c2000000.f_val_columna;
        --
        IF NVL(l_mca_fec_bo, trn.NO) = trn.SI THEN
           --
           em_k_c2000000.p_lee(p_cod_cia        => p_cod_cia,
                               p_cod_ramo       => p_cod_ramo,
                               p_num_cotizacion => l_num_cotizacion,
                               p_nom_tabla      => 'A1000000',
                               p_nom_columna    => 'NUM_DIAS_VALIDEZ',
                               p_cod_fila       => 99999);
           --
           l_num_dias_vigencia_bo := em_k_c2000000.f_val_columna;
           --
           l_num_dias_vigencia := l_num_dias_vigencia_bo;
		   --
        END IF;
        --
       END IF;
       -- F 5.69
        --
        -- {v5.32
       /* IF l_mca_renov_outras IN ('2','6') AND
           to_date(l_fec_efec_poliza, trn.FORMATO_FECHA) >= (trunc(sysdate) - l_num_dias_vigencia) THEN
          --
          l_num_dias_vigencia  := to_date(l_fec_efec_poliza, trn.FORMATO_FECHA) - l_fec_emision + l_num_dias_vigencia;
          --
        END IF;*/
        --  v5.32} v5.53 I {
        l_habilita_calc_renov := ea_k_231_utils_vcr.f_busca_constante(vrb_nam     => 'HABILITA.CALC.DIAS.RENOV'
                                                                    , vrb_nam_val => trn.SI
                                                                    , asigna      => false);
        --
        mx('l_habilita_calc_renov', l_habilita_calc_renov);
        -- } F v5.53
        IF l_retorno%ISOPEN THEN
        --
          CLOSE l_retorno;
        --
        END IF;
        --
        IF l_cod_sistema = 1 THEN -- 1.51 - Fluxo do Covergencia / Interatividade
           --
           OPEN l_retorno FOR
             -- {v5.51
             WITH C_FILTRO AS
                  (SELECT C2009030_VCR.NUM_COTIZACION,
                          C2009030_VCR.COD_DOCUM,
                          C2009030_VCR.NOM_TERCERO,
                          C2009030_VCR.COD_AGT,
                          C2009030_VCR.FEC_EMISION,
                          C2009030_VCR.NUM_PASO_ATUAL,
                          C2009030_VCR.COD_RAMO,
                          C2009030_VCR.COD_CIA
                     FROM C2009030_VCR
                    WHERE C2009030_VCR.COD_CIA            =  NVL(p_cod_cia, C2009030_VCR.COD_CIA)
                      AND C2009030_VCR.COD_RAMO           =  NVL(p_cod_ramo, C2009030_VCR.COD_RAMO)
                      AND C2009030_VCR.NUM_COTIZACION     =  NVL(l_num_cotizacion, C2009030_VCR.NUM_COTIZACION)
                      AND C2009030_VCR.COD_AGT            =  NVL(p_cod_agt, C2009030_VCR.COD_AGT)
                      AND C2009030_VCR.TIP_DOCUM          =  NVL(l_tip_docum, C2009030_VCR.TIP_DOCUM)
                      AND C2009030_VCR.COD_DOCUM          =  NVL(l_cod_docum, C2009030_VCR.COD_DOCUM)
                      AND TRUNC(C2009030_VCR.FEC_EMISION) >= TRUNC(SYSDATE) - 7
                      AND ROWNUM <= 150
                  ),
                  --
                  C_DADOS AS
                   (SELECT *
                      FROM (SELECT C2000000.NUM_COTIZACION,
                                   C2000000.NOM_COLUMNA,
                                   C2000000.VAL_COLUMNA
                              FROM C2000000, C_FILTRO
                             WHERE C2000000.COD_CIA = C_FILTRO.COD_CIA
                               AND C2000000.COD_RAMO = C_FILTRO.COD_RAMO
                               AND C2000000.NUM_COTIZACION = C_FILTRO.NUM_COTIZACION
                               AND C2000000.COD_FILA = 99999
                               AND C2000000.NOM_COLUMNA IN ('NUM_PASO_ATUAL', 'TIP_PRODUTO', 'NOM_TERCERO', 'NUM_DIAS_VALIDEZ', 'NUM_SIMULACION')
                           ) PIVOT(MAX(VAL_COLUMNA) FOR NOM_COLUMNA IN('NUM_PASO_ATUAL'   AS NUM_PASO_ATUAL,
                                                                       'TIP_PRODUTO'      AS TIP_PRODUTO,
                                                                       'NOM_TERCERO'      AS NOM_TERCERO,
                                                                       'NUM_DIAS_VALIDEZ' AS NUM_DIAS_VALIDEZ,
                                                                       'NUM_SIMULACION'   AS NUM_SIMULACION))
                   ),
                  --
                  C_APOLICE AS
                   (SELECT A2000500.COD_CIA,
                           A2000500.COD_RAMO,
                           A2000500.NUM_POLIZA_DEFINITIVO,
                           A2000500.NUM_SPTO,
                           C_FILTRO.NUM_COTIZACION,
                           A2000030.NUM_POLIZA
                      FROM A2000500, C_FILTRO, A2000030
                     WHERE A2000500.COD_CIA    = C_FILTRO.COD_CIA
                       AND A2000500.COD_RAMO   = C_FILTRO.COD_RAMO
                       AND A2000500.NUM_POLIZA = C_FILTRO.NUM_COTIZACION
                       AND A2000500.COD_CIA    = A2000030.COD_CIA
                       AND A2000500.COD_RAMO   = A2000030.COD_RAMO
                       AND A2000500.NUM_POLIZA_DEFINITIVO = A2000030.NUM_PRESUPUESTO
                       AND A2000500.NUM_SPTO   = A2000030.NUM_SPTO
                       AND A2000500.NUM_POLIZA = NVL(l_num_cotizacion, A2000500.NUM_POLIZA)
                       AND A2000030.NUM_POLIZA = NVL(l_num_poliza, A2000030.NUM_POLIZA)
                   )
                  --
                  SELECT C_FILTRO.NUM_COTIZACION                   AS NUM_COTIZACION,
                         C_APOLICE.NUM_POLIZA                      AS NUM_POLIZA,
                         C_FILTRO.NOM_TERCERO                      AS NOM_TERCERO,
                         C_FILTRO.COD_DOCUM                        AS COD_DOCUM,
                         C_FILTRO.NUM_PASO_ATUAL                   AS NUM_PASO_ATUAL,
                         C_FILTRO.COD_AGT                          AS COD_AGT,
                         TO_CHAR(C_FILTRO.FEC_EMISION, 'DDMMYYYY') AS FEC_EMISION,
                         CASE WHEN C_FILTRO.NUM_PASO_ATUAL BETWEEN 2 AND 5 THEN '0' ELSE '1' END AS MCA_CALCULADO,
                         CASE WHEN C_FILTRO.NUM_PASO_ATUAL BETWEEN 2 AND 10 THEN 'Cota' || CHR(231) || CHR(227) || 'o' ELSE 'Proposta' END AS NOM_NIVEL_COTACAO,
                         TO_CHAR(SYSDATE, 'DDMMYYYY')              AS FEC_ENVIO,
                         C_DADOS.TIP_PRODUTO                       AS TIP_PRODUTO,
                         C_FILTRO.COD_RAMO                         AS PRODUTO,
                         NVL(C_DADOS.NUM_DIAS_VALIDEZ, l_num_dias_vigencia)  AS NUM_DIAS_VALIDEZ
                    FROM C_FILTRO, C_APOLICE, C_DADOS
                   WHERE C_FILTRO.NUM_COTIZACION = C_APOLICE.NUM_COTIZACION
                     AND C_FILTRO.NUM_COTIZACION = C_DADOS.NUM_COTIZACION;
                  -- v5.51}
            --
            IF l_retorno%ISOPEN THEN
            --
              p_gerar_xml_lista_campos_intv(l_retorno,p_xml); --1.61 - Chamada do XML para CVG
            --
            END IF;
            --
           --
        ELSE -- 1.51 - Fluxo do MCC
           --
           IF l_mca_flota = trn.NO THEN
       -- I v 2.15

            IF l_cod_sistema = 2 THEN
               -- consulta de Cotacao

               l_mca_proposta := 0;
               l_range_dias   := fp_recupera_config_G1010031('RANGE_DIAS',g_k_cod_ramo_generico, g_k_cod_idioma,'1'); -- v 2.08

              IF l_num_cotizacion IS NOT NULL THEN
                  --
                  -- 4.78 - Nueva condicion, ramo  VI
                  IF g_cod_ramo = g_k_vida_individual
                  THEN
                    --
                    ev_k_gen_ws.p_ws_consulta_mcc(p_cod_cia          => p_cod_cia,
                                                  p_cod_ramo         => p_cod_ramo,
                                                  p_cod_agt          => p_cod_agt,
                                                  p_ran_dias         => l_range_dias,
                                                  p_num_cotizacion   => l_num_cotizacion,
                                                  p_mca_proposta     => l_mca_proposta,
                                                  p_tip_produto      => l_tip_produto,
              p_xml_in           => p_xml_in,-- v5.06
                                                  p_cursor_cotiza    => l_retorno);
                   --
                   -- v 4.98 Nueva condicion, ramo Residencial
                  ELSIF g_cod_ramo = g_k_residencial
                  THEN
                     --
                     trn_k_global.asigna('COD_CIA' ,trn.UNO);
                     trn_k_global.asigna('COD_RAMO',g_k_residencial);
                     --
                     pp_asigna_globales_cmn;
                     --
                     l_range_dias := em_k_ptd_atr.f_pre_constante(g_k_range_dias);
                     --v 4.98
                     em_k_ptd_qte_vcr.p_val_cotacao_expirada (p_cod_cia  => p_cod_cia   ,
                                                              p_cod_ramo => p_cod_ramo  ,
                                                              p_ran_dias => l_range_dias);
                     --
                     l_range_dias := fp_recupera_config_G1010031('RANGE_DIAS',g_k_cod_ramo_generico, g_k_cod_idioma,'1');
                     --
                     ed_k_gen_ws.p_ws_consulta_mcc (p_cod_cia        => p_cod_cia       ,
                                                    p_cod_ramo       => p_cod_ramo      ,
                                                    p_cod_agt        => p_cod_agt       ,
                                                    p_ran_dias       => l_range_dias    ,
                                                    p_num_cotizacion => l_num_cotizacion,
                                                    p_mca_proposta   => l_mca_proposta  ,
                                                    p_xml_in         => p_xml_in        ,
                                                    p_tip_produto    => l_tip_produto   ,
                                                    p_cursor_cotiza  => l_retorno       );
                   --
                  ELSIF g_cod_ramo != ea_k_231_utils.g_k_ramo_motor
                  THEN
                    --
                    OPEN l_retorno FOR
                      --
                      SELECT uni.num_cotizacion,
                        uni.nom_tercero,
                        uni.cod_docum,
                        uni.num_paso_atual,
                        uni.cod_agt,
                        uni.fec_emision,
                        uni.mca_calculado,
                        uni.nom_nivel_cotacao,
                        uni.fec_envio,
                        uni.tip_produto,
                        uni.produto,
                        uni.tot_registro,
                        nvl(uni.num_simulacion, 1) --2.55
                        ,NULL as tip_renov,  -- 4.81
                        uni.tip_situ_bo, -- 5.19
                        nvl(uni.num_dias_validez, l_num_dias_vigencia)  --v5.51
                      FROM (SELECT topn.*, ROWNUM rnum
                          FROM (SELECT a.num_cotizacion num_cotizacion,
                                a.nom_tercero nom_tercero,
                                a.cod_docum cod_docum,
                                a.num_paso_atual num_paso_atual,
                                a.cod_agt cod_agt,
                                to_char(a.fec_emision, 'DDMMYYYY') fec_emision,
                                CASE
                                  WHEN a.num_paso_atual BETWEEN 2 AND 5 THEN
                                  '0'
                                  ELSE
                                  '1'
                                END AS mca_calculado,
                                  ( select 'Cota' || chr(231) || chr(227) || 'o'  ||
                                        NVL(
                                            (
                                              SELECT  ' ' ||  tb1.nom_valor
                                              FROM g1010031 tb1
                                              RIGHT JOIN c2000000 b ON   b.nom_columna    = tb1.cod_campo
                                                        AND   b.cod_cia        = p_cod_cia -- v 2.78
                                                        AND   b.cod_ramo       = p_cod_ramo -- v 2.78
                                                        AND   b.nom_columna    = 'TIP_SITU_BO'
                                              WHERE  tb1.cod_valor  =  b.val_columna AND  b.num_cotizacion =  a.num_cotizacion
                                              and tb1.cod_ramo = (CASE  WHEN (p_cod_ramo = 231) THEN g_k_cod_ramo_generico -- v 2.86
                                                        ELSE p_cod_ramo  END) -- v 2.86
                                              AND   tb1.cod_cia = p_cod_cia -- v 4.66
                                            )
                                          , decode( CASE  WHEN ((a.num_paso_atual BETWEEN 6 AND 8) AND (a.cod_ramo <> g_k_bien_vivir))  THEN '1' END, 1, ' Aprovada') ) -- v 2.78
                                    FROM dual
                                  )nom_nivel_cotacao,  -- v3.45

                                to_char(sysdate, 'DDMMYYYY') fec_envio,
                                a.tip_produto tip_produto,
                                a.cod_ramo produto,
                                count(1) OVER() as tot_registro,
                                (SELECT a.val_columna num_simulacion
                                  FROM c2000000 a
                                  WHERE a.cod_cia = p_cod_cia
                                  AND a.cod_ramo = p_cod_ramo
                                  AND a.num_cotizacion =
                                    l_num_cotizacion
                                  AND a.nom_tabla = 'G2000000'
                                  AND a.nom_columna = 'NUM_SIMULACION') num_simulacion, -- 2.55
                                  -- I 5.29
                                  (SELECT a.val_columna tip_situ_bo
                                        FROM c2000000 a
                                        WHERE a.cod_cia = p_cod_cia
                                        AND a.cod_ramo = p_cod_ramo
                                        AND a.num_cotizacion =
                                          l_num_cotizacion
                                        AND a.nom_tabla = 'A0000000'
                                        AND a.nom_columna = 'TIP_SITU_BO') tip_situ_bo,
                                  -- F 5.29
                                  -- {v5.35
                                (SELECT NVL((SELECT a.val_columna num_dias_validez
                                               FROM c2000000 a
                                              WHERE a.cod_cia        = p_cod_cia
                                                AND a.cod_ramo       = p_cod_ramo
                                                AND a.num_cotizacion = l_num_cotizacion
                                                AND a.nom_tabla      = 'A1000000'
                                                AND a.nom_columna    = 'NUM_DIAS_VALIDEZ'), l_num_dias_vigencia) num_dias_validez  -- v5.51
                                    FROM dual) num_dias_validez
                                -- v5.35}
                              FROM c2009030_vcr a

                              WHERE a.cod_cia = p_cod_cia
                              AND a.cod_ramo = p_cod_ramo
                              AND a.cod_agt = p_cod_agt
                              AND a.fec_emision >=
                                (sysdate - To_Number(l_range_dias))
                              AND a.num_cotizacion = l_num_cotizacion
                              AND (a.tip_situ_proposta = l_mca_proposta OR
                                (a.tip_situ_proposta is NULL AND
                                a.cod_ramo = g_k_bien_vivir)) -- v 2.78
                              AND NVL(a.tip_produto, 999) IN
                                (CASE WHEN l_tip_produto is null THEN
                                  Nvl(a.tip_produto, 999) ELSE
                                  l_tip_produto END)
                              AND a.num_poliza_grupo = '9999999999999'
                              AND a.num_cotrato = '99999'
                              -- and rownum <101
                              ORDER BY a.fec_emision DESC) topn
                          WHERE ROWNUM <= l_limite_fim) uni
                      WHERE uni.rnum >= l_limite_ini;
                    --
                  ELSE
                    --
                    OPEN l_retorno FOR
                      --
                      SELECT  uni.num_cotizacion  ,
                          uni.nom_tercero  ,
                          uni.cod_docum  ,
                          uni.num_paso_atual  ,
                          uni.cod_agt ,
                          uni.fec_emision,
                          uni.mca_calculado,
                          uni.nom_nivel_cotacao,
                          uni.fec_envio,
                          uni.tip_produto,
                          uni.produto,
                          uni.tot_registro,
                          nvl(uni.num_simulacion,1), --2.55
                          l_tip_renov as tip_renov, -- 4.80
                          uni.tip_situ_bo, --5.29
                          CASE WHEN l_tip_renov IS NOT NULL AND l_habilita_calc_renov = trn.SI THEN uni.fec_efec_poliza - to_date(uni.fec_emision, trn.FORMATO_FECHA) + TO_NUMBER(nvl(uni.num_dias_validez, l_num_dias_vigencia))
                          ELSE TO_NUMBER(nvl(uni.num_dias_validez, l_num_dias_vigencia)) END  --v5.27 --v5.53
                      FROM  (
                          SELECT   topn.*,  ROWNUM rnum
                          FROM  (
                              SELECT
                                a.num_cotizacion   num_cotizacion,
                                a.nom_tercero      nom_tercero,
                                a.cod_docum        cod_docum,
                                a.num_paso_atual   num_paso_atual,
                                a.cod_agt          cod_agt,
                                a.fec_efec_poliza  fec_efec_poliza, --v5.53
                                to_char(a.fec_emision, 'DDMMYYYY') fec_emision,
                                CASE   WHEN a.num_paso_atual BETWEEN 2 AND 5 THEN  '0'  ELSE  '1' END AS mca_calculado,
                                  ( select
                                      NVL(
                                          (SELECT
                                            CASE
                                            WHEN a.num_paso_atual BETWEEN 2 AND 4 AND
                                              b.val_columna IS NULL THEN
                                            'Cota' || chr(231) || chr(227) || 'o'
                                            WHEN a.num_paso_atual BETWEEN 6 AND 8 AND
                                              b.val_columna IS NULL THEN
                                            'Cota' || chr(231) || chr(227) ||
                                            'o Calculada'
                                            WHEN a.num_paso_atual BETWEEN 2 AND 8 AND
                                              b.val_columna IS NOT NULL THEN
                                            --'Cota' || chr(231) || chr(227) || 'o ' ||
                                            b.val_columna
                                            ELSE
                                            'Proposta'
                                            END AS status
                                            FROM DUAL d LEFT OUTER JOIN c2000000 b
                                            ON b.cod_cia        = p_cod_cia
                                            AND b.cod_ramo       = p_cod_ramo
                                            AND b.nom_columna    = 'TXT_STATUS_MCC'
                                            AND b.num_cotizacion = a.num_cotizacion),
                                            /*SELECT  ' ' ||  tb1.nom_valor
                                              FROM g1010031 tb1
                                            RIGHT JOIN c2000000 b ON   b.nom_columna    = tb1.cod_campo
                                                        AND   b.cod_cia        = p_cod_cia -- v 2.78
                                                        AND   b.cod_ramo       = p_cod_ramo -- v 2.78
                                                        AND   b.nom_columna    = 'TIP_SITU_BO'
                                              WHERE  tb1.cod_valor  =  b.val_columna AND  b.num_cotizacion =  a.num_cotizacion
                                              and tb1.cod_ramo = (CASE  WHEN (p_cod_ramo = 231) THEN g_k_cod_ramo_generico -- v 2.86
                                                        ELSE p_cod_ramo  END) -- v 2.86
                                          )*/
                                          'Cota' || chr(231) || chr(227) || 'o' ||
                                          decode( CASE  WHEN ((a.num_paso_atual BETWEEN 6 AND 8) AND (a.cod_ramo <> g_k_bien_vivir))  THEN '1' END, 1, ' Aprovada') ) -- v 2.78
                                  FROM dual
                                )nom_nivel_cotacao,

                                to_char(sysdate, 'DDMMYYYY') fec_envio,
                                a.tip_produto      tip_produto,
                                a.cod_ramo         produto,
                                count(1) OVER() as tot_registro,
                                (SELECT a.val_columna  num_simulacion
                                FROM c2000000 a
                                WHERE a.cod_cia = p_cod_cia
                                  AND a.cod_ramo = p_cod_ramo
                                  AND a.num_cotizacion = l_num_cotizacion
                                  AND a.nom_tabla = 'G2000000'
                                  AND a.nom_columna = 'NUM_SIMULACION') num_simulacion  -- 2.55
                                ,(SELECT a.val_columna  tip_situ_bo
                                FROM c2000000 a
                                WHERE a.cod_cia = p_cod_cia
                                  AND a.cod_ramo = p_cod_ramo
                                  AND a.num_cotizacion = l_num_cotizacion
                                  AND a.nom_tabla = 'A0000000'
                                  AND a.nom_columna = 'TIP_SITU_BO') tip_situ_bo  -- 5.29
                                  -- { v5.35
                                ,(SELECT NVL((SELECT a.val_columna num_dias_validez
                                               FROM c2000000 a
                                              WHERE a.cod_cia        = p_cod_cia
                                                AND a.cod_ramo       = p_cod_ramo
                                                AND a.num_cotizacion = l_num_cotizacion
                                                AND a.nom_tabla      = 'A1000000'
                                                AND a.nom_columna    = 'NUM_DIAS_VALIDEZ'), l_num_dias_vigencia) num_dias_validez  -- v5.51
                                   FROM dual) num_dias_validez
                                  -- v5.35}
                              FROM
                                c2009030_vcr a

                              WHERE
                                a.cod_cia              = p_cod_cia
                                AND a.cod_ramo         = p_cod_ramo
                                AND a.cod_agt          = p_cod_agt
                                AND a.fec_emision      >= ( sysdate - To_Number(l_range_dias) )
                                AND a.num_cotizacion   = l_num_cotizacion
                                AND (a.tip_situ_proposta  = l_mca_proposta OR (a.tip_situ_proposta is NULL AND a.cod_ramo = g_k_bien_vivir)) -- v 2.78
                                AND NVL(a.tip_produto, 999) IN ( CASE WHEN l_tip_produto is null THEN Nvl(a.tip_produto, 999) ELSE l_tip_produto END)
                                AND a.num_poliza_grupo = '9999999999999'
                                AND a.num_cotrato      = '99999'
                                -- and rownum <101
                              ORDER BY a.fec_emision DESC
                            ) topn
                          WHERE  ROWNUM <= l_limite_fim
                        ) uni
                      WHERE  uni.rnum >= l_limite_ini
                        AND l_busca_renov = trn.SI; -- 4.77
                    --
                  END IF;
                  --
              ELSIF l_cod_docum IS NOT NULL AND g_cod_ramo <> g_k_vida_individual THEN -- v5.19
                mx('-', 'opcion 03');
                OPEN l_retorno FOR

               SELECT  uni.num_cotizacion  ,
                        uni.nom_tercero  ,
                        uni.cod_docum  ,
                        uni.num_paso_atual  ,
                        uni.cod_agt ,
                        uni.fec_emision,
                        uni.mca_calculado,
                        uni.nom_nivel_cotacao,
                        uni.fec_envio,
                        uni.tip_produto,
                        uni.produto,
                        uni.tot_registro,
                        nvl(uni.num_simulacion,1), --2.55
                        uni.tip_renov,  -- 4.80
                        uni.tip_situ_bo, -- 5.29
                        CASE WHEN uni.tip_renov IS NOT NULL AND l_habilita_calc_renov = trn.SI THEN uni.fec_efec_poliza - to_date(uni.fec_emision, trn.FORMATO_FECHA) + TO_NUMBER(nvl(uni.num_dias_validez, l_num_dias_vigencia))
                        ELSE TO_NUMBER(nvl(uni.num_dias_validez, l_num_dias_vigencia)) END  --v5.27 --v5.53
                FROM  (
                        SELECT   topn.*,  ROWNUM rnum
                        FROM  (
                                SELECT
                                    a.num_cotizacion   num_cotizacion,
                                    a.nom_tercero      nom_tercero,
                                    a.cod_docum        cod_docum,
                                    a.num_paso_atual   num_paso_atual,
                                    a.cod_agt          cod_agt,
                                    a.fec_efec_poliza  fec_efec_poliza, --v5.53
                                    to_char(a.fec_emision, 'DDMMYYYY') fec_emision,
                                    CASE   WHEN a.num_paso_atual BETWEEN 2 AND 5 THEN  '0'  ELSE  '1' END AS mca_calculado,
                                               DECODE(p_cod_ramo,231,( select
                                                         NVL(
                                                               (SELECT
                                                                  CASE
                                                                  WHEN a.num_paso_atual BETWEEN 2 AND 4 AND
                                                                     b.val_columna IS NULL THEN
                                                                  'Cota' || chr(231) || chr(227) || 'o'
                                                                  WHEN a.num_paso_atual BETWEEN 6 AND 8 AND
                                                                     b.val_columna IS NULL THEN
                                                                  'Cota' || chr(231) || chr(227) ||
                                                                  'o Calculada'
                                                                  WHEN a.num_paso_atual BETWEEN 2 AND 8 AND
                                                                     b.val_columna IS NOT NULL THEN
                                                                  b.val_columna
                                                                  ELSE
                                                                  'Proposta'
                                                                  END AS status
                                                                  FROM DUAL d LEFT OUTER JOIN c2000000 b
                                                                  ON b.cod_cia        = p_cod_cia
                                                                  AND b.cod_ramo       = p_cod_ramo
                                                                  AND b.nom_columna    = 'TXT_STATUS_MCC'
                                                                  AND b.num_cotizacion = a.num_cotizacion),
                                                               'Cota' || chr(231) || chr(227) || 'o' ||    --v 4.27
                                                               decode( CASE  WHEN ((a.num_paso_atual BETWEEN 6 AND 8) AND (a.cod_ramo <> g_k_bien_vivir))  THEN '1' END, 1, ' Aprovada') ) -- v 2.78
                                                   FROM dual
                                                ),( select 'Cota' || chr(231) || chr(227) || 'o'  ||
                                                  NVL(
                                                          (
                                                             SELECT  ' ' ||  tb1.nom_valor
                                                               FROM g1010031 tb1
                                                              RIGHT JOIN c2000000 b ON   b.nom_columna    = tb1.cod_campo
                                                                                   AND   b.cod_cia        = p_cod_cia -- v2.78
                                                                                   AND   b.cod_ramo       = p_cod_ramo -- v 2.78
                                                                                   AND   b.nom_columna    = 'TIP_SITU_BO'
                                                               WHERE  tb1.cod_valor  =  b.val_columna AND  b.num_cotizacion =  a.num_cotizacion
                                                                 and tb1.cod_ramo = (CASE  WHEN (p_cod_ramo = 231) THEN g_k_cod_ramo_generico -- v 2.86
                                                                                     ELSE p_cod_ramo  END) -- v 2.86
                                                          )
                                                      , decode( CASE  WHEN ((a.num_paso_atual BETWEEN 6 AND 8) AND (a.cod_ramo <> g_k_bien_vivir))  THEN '1' END, 1, ' Aprovada') ) -- v 2.78
                                          FROM dual
                                      ))nom_nivel_cotacao, --4.31
                                    to_char(sysdate, 'DDMMYYYY') fec_envio,
                                    a.tip_produto tip_produto,
                                    a.cod_ramo         produto,
                                    count(1) OVER() as tot_registro,
                                     (SELECT b.val_columna  num_simulacion
                                        FROM c2000000 b
                                       WHERE b.cod_cia = p_cod_cia
                                         AND b.cod_ramo = p_cod_ramo
                                         AND b.num_cotizacion = a.num_cotizacion
                                         AND b.nom_tabla = 'G2000000'
                                         AND b.nom_columna = 'NUM_SIMULACION') num_simulacion, -- 2.55
                                     (SELECT b.val_columna
                                        FROM C2000000 b
                                       WHERE b.cod_cia = p_cod_cia
                                         AND b.cod_ramo = p_cod_ramo
                                         AND b.num_cotizacion =
                                             a.num_cotizacion
                                         AND b.nom_columna =
                                             'MCA_RENOV_OUTRAS') tipo_seguro, -- 4.77
                                     (SELECT b.val_columna
                                        FROM C2000000 b
                                       WHERE b.cod_cia = p_cod_cia
                                         AND b.cod_ramo = p_cod_ramo
                                         AND b.num_cotizacion =
                                             a.num_cotizacion
                                         AND b.nom_columna =
                                             'FEC_VCTO_POLIZA_CONGENERE') fec_vcto_cong, -- 4.77
                  (SELECT b.val_columna -- I 4.78
                                        FROM C2000000 b
                                       WHERE b.cod_cia = p_cod_cia
                                         AND b.cod_ramo = p_cod_ramo
                                         AND b.num_cotizacion =
                                             a.num_cotizacion
                                         AND b.nom_tabla =
                                             ea_k_231_utils.g_k_tabla_dv
                                         AND b.nom_columna =
                                             'NUM_POLIZA_RENOV') poliza_renov,   -- F 4.78
                                    (SELECT b.val_columna
                                       FROM C2000000 b
                                      WHERE b.cod_cia = p_cod_cia
                                        AND b.cod_ramo = p_cod_ramo
                                        AND b.num_cotizacion = a.num_cotizacion
                                        AND b.nom_columna = 'TIP_RENOV') tip_renov  -- 4.80
                                     ,(SELECT b.val_columna
                                       FROM C2000000 b
                                      WHERE b.cod_cia = p_cod_cia
                                        AND b.cod_ramo = p_cod_ramo
                                        AND b.num_cotizacion = a.num_cotizacion
                                        AND b.nom_tabla = 'A0000000'
                                        AND b.nom_columna = 'TIP_SITU_BO') tip_situ_bo -- 5.29
                                     -- { v5.35
                                     ,(SELECT NVL((SELECT b.val_columna num_dias_validez
                                                    FROM c2000000 b
                                                   WHERE b.cod_cia        = p_cod_cia
                                                     AND b.cod_ramo       = p_cod_ramo
                                                     AND b.num_cotizacion = a.num_cotizacion
                                                     AND b.nom_tabla      = 'A1000000'
                                                     AND b.nom_columna    = 'NUM_DIAS_VALIDEZ'), l_num_dias_vigencia) num_dias_validez  -- v5.51
                                        FROM dual) num_dias_validez
                                     --  v5.35}
                                FROM
                                    c2009030_vcr a

                                WHERE
                                    a.cod_cia          = p_cod_cia
                                    AND a.cod_ramo     = p_cod_ramo
                                    AND a.cod_agt      = p_cod_agt
                                    AND a.fec_emision >= ( sysdate - To_Number(l_range_dias) )
                                    AND a.cod_docum    = l_cod_docum
                                    AND (a.tip_situ_proposta     = l_mca_proposta OR (a.tip_situ_proposta is NULL AND a.cod_ramo = g_k_bien_vivir)) -- v 2.78
                                    AND NVL(a.tip_produto,999) IN ( CASE WHEN l_tip_produto is null THEN Nvl(a.tip_produto, 999) ELSE l_tip_produto END)
                                    AND a.tip_docum    = l_tip_docum
                                    AND a.num_poliza_grupo = '9999999999999'
                                    AND a.num_cotrato      = '99999'
                                   -- and rownum <101
                                ORDER BY a.fec_emision DESC
                            ) topn
                        WHERE  ROWNUM <= l_limite_fim
                    ) uni
               WHERE ((p_cod_ramo = 231 AND -- 4.81
               (tipo_seguro IN (l_tip_seguro_mapfre, l_tip_seguro_bb) AND
                 tip_renov IS NOT NULL AND -- 4.88
              -- I 4.78
                     (SELECT  distinct(tip_situ)
                         FROM a2009540_vcr b
                        WHERE b.cod_cia = p_cod_cia
                          AND b.tip_mvto_batch = l_tip_mvto_batch
                          AND b.num_poliza_anterior = poliza_renov
                          AND b.num_cotizacion = uni.num_cotizacion
                          AND b.cod_ramo_destino = p_cod_ramo
                          AND b.cod_agt = p_cod_agt
                          AND b.FEC_CALCULO_COTIZACION =
                              (SELECT max(c.FEC_CALCULO_COTIZACION)
                                 FROM a2009540_vcr c
                                WHERE c.cod_cia = b.cod_cia
                                  AND c.cod_ramo_destino = b.cod_ramo_destino
                                  AND c.tip_mvto_batch = b.tip_mvto_batch
                                  AND c.num_poliza_anterior =
                                      b.num_poliza_anterior
                                  AND c.num_cotizacion = b.num_cotizacion
                                  AND c.cod_agt = b.cod_agt))
                     IN (em_k_migracion_polizas_vcr.g_k_otimizada_recalculada, g_k_flex) -- 4.83
                     AND TO_DATE(fec_vcto_cong, trn.FORMATO_FECHA) -
                     TRUNC(SYSDATE) BETWEEN l_dias_renov_neg AND
                     l_dias_renov_min) OR (tipo_seguro NOT IN (l_tip_seguro_mapfre, l_tip_seguro_bb))
                                         OR (tipo_seguro IN (l_tip_seguro_mapfre, l_tip_seguro_bb) AND tip_renov IS NULL) -- 4.88
                     )  -- 4.77
                     OR p_cod_ramo <> 231) -- 4.81
                AND uni.rnum >= l_limite_ini;

           --
              ELSIF l_nom_tercero IS NOT NULL THEN
                -- vers??a????A?o 5.45
                IF g_cod_ramo = g_k_vida_individual THEN
                    --
                    ev_k_gen_ws.p_ws_consulta_mcc(p_cod_cia          => p_cod_cia,
                                                  p_cod_ramo         => p_cod_ramo,
                                                  p_cod_agt          => p_cod_agt,
                                                  p_ran_dias         => l_range_dias,
                                                  p_num_cotizacion   => l_num_cotizacion,
                                                  p_mca_proposta     => l_mca_proposta,
                                                  p_tip_produto      => l_tip_produto,
                                                  p_xml_in           => p_xml_in,-- v5.06
                                                  p_cursor_cotiza    => l_retorno);
                   --
                   -- v 4.98 Nueva condicion, ramo Residencial
                ELSE -- vers??a????A?o 5.45 fim
                  -- Cotacao
                  OPEN l_retorno FOR

                SELECT  uni.num_cotizacion  ,
                        uni.nom_tercero  ,
                        uni.cod_docum  ,
                        uni.num_paso_atual  ,
                        uni.cod_agt ,
                        uni.fec_emision,
                        uni.mca_calculado,
                        uni.nom_nivel_cotacao,
                        uni.fec_envio,
                        uni.tip_produto,
                        uni.produto,
                        uni.tot_registro,
                        nvl(uni.num_simulacion,1), --2.55
                        uni.tip_renov, -- 4.80
                        uni.tip_situ_bo, -- 5.29
                        CASE WHEN uni.tip_renov IS NOT NULL AND l_habilita_calc_renov = trn.SI THEN uni.fec_efec_poliza - to_date(uni.fec_emision, trn.FORMATO_FECHA) + TO_NUMBER(nvl(uni.num_dias_validez, l_num_dias_vigencia))
                        ELSE TO_NUMBER(nvl(uni.num_dias_validez, l_num_dias_vigencia)) END  --v5.27 --v5.53
                FROM  (
                        SELECT   topn.*,  ROWNUM rnum
                        FROM  (
                                SELECT
                                    a.num_cotizacion   num_cotizacion,
                                    a.nom_tercero      nom_tercero,
                                    a.cod_docum        cod_docum,
                                    a.num_paso_atual   num_paso_atual,
                                    a.cod_agt          cod_agt,
                                    a.fec_efec_poliza  fec_efec_poliza, --v5.53
                                    to_char(a.fec_emision, 'DDMMYYYY') fec_emision,
                                    CASE   WHEN a.num_paso_atual BETWEEN 2 AND 5 THEN  '0'  ELSE  '1' END AS mca_calculado,
                                               DECODE(p_cod_ramo,231,( select
                                                         NVL(
                                                               (SELECT
                                                                  CASE
                                                                  WHEN a.num_paso_atual BETWEEN 2 AND 4 AND
                                                                     b.val_columna IS NULL THEN
                                                                  'Cota' || chr(231) || chr(227) || 'o'
                                                                  WHEN a.num_paso_atual BETWEEN 6 AND 8 AND
                                                                     b.val_columna IS NULL THEN
                                                                  'Cota' || chr(231) || chr(227) ||
                                                                  'o Calculada'
                                                                  WHEN a.num_paso_atual BETWEEN 2 AND 8 AND
                                                                     b.val_columna IS NOT NULL THEN
                                                                  b.val_columna
                                                                  ELSE
                                                                  'Proposta'
                                                                  END AS status
                                                                  FROM DUAL d LEFT OUTER JOIN c2000000 b
                                                                  ON b.cod_cia        = p_cod_cia
                                                                  AND b.cod_ramo       = p_cod_ramo
                                                                  AND b.nom_columna    = 'TXT_STATUS_MCC'
                                                                  AND b.num_cotizacion = a.num_cotizacion),
                                                               'Cota' || chr(231) || chr(227) || 'o' ||    --v 4.27
                                                               decode( CASE  WHEN ((a.num_paso_atual BETWEEN 6 AND 8) AND (a.cod_ramo <> g_k_bien_vivir))  THEN '1' END, 1, ' Aprovada') ) -- v 2.78
                                                   FROM dual
                                                ),( select 'Cota' || chr(231) || chr(227) || 'o'  ||
                                                  NVL(
                                                          (
                                                             SELECT  ' ' ||  tb1.nom_valor
                                                               FROM g1010031 tb1
                                                              RIGHT JOIN c2000000 b ON   b.nom_columna    = tb1.cod_campo
                                                                                   AND   b.cod_cia        = p_cod_cia -- v2.78
                                                                                   AND   b.cod_ramo       = p_cod_ramo -- v 2.78
                                                                                   AND   b.nom_columna    = 'TIP_SITU_BO'
                                                               WHERE
                                                                    tb1.cod_cia = p_cod_cia -- 4.69
                                                                and tb1.cod_valor  =  b.val_columna AND  b.num_cotizacion =  a.num_cotizacion
                                                                 and tb1.cod_ramo = (CASE  WHEN (p_cod_ramo = 231) THEN g_k_cod_ramo_generico -- v 2.86
                                                                                     ELSE p_cod_ramo  END) -- v 2.86
                                                          )
                                                      , decode( CASE  WHEN ((a.num_paso_atual BETWEEN 6 AND 8) AND (a.cod_ramo <> g_k_bien_vivir))  THEN '1' END, 1, ' Aprovada') ) -- v 2.78
                                          FROM dual
                                      ))nom_nivel_cotacao, --4.31
                                    to_char(sysdate, 'DDMMYYYY') fec_envio,
                                    a.tip_produto      tip_produto,
                                    a.cod_ramo         produto,
                                    count(1) OVER() as tot_registro,
                                    (SELECT b.val_columna  num_simulacion
                                       FROM c2000000 b
                                      WHERE b.cod_cia = p_cod_cia
                                        AND b.cod_ramo = p_cod_ramo
                                        AND b.num_cotizacion = a.num_cotizacion
                                        AND b.nom_tabla = 'G2000000'
                                        AND b.nom_columna = 'NUM_SIMULACION') num_simulacion, -- 2.55
                                     (SELECT b.val_columna
                                        FROM C2000000 b
                                       WHERE b.cod_cia = p_cod_cia
                                         AND b.cod_ramo = p_cod_ramo
                                         AND b.num_cotizacion =
                                             a.num_cotizacion
                                         AND b.nom_columna =
                                             'MCA_RENOV_OUTRAS') tipo_seguro, -- 4.77
                                     (SELECT b.val_columna
                                        FROM C2000000 b
                                       WHERE b.cod_cia = p_cod_cia
                                         AND b.cod_ramo = p_cod_ramo
                                         AND b.num_cotizacion =
                                             a.num_cotizacion
                                         AND b.nom_columna =
                                             'FEC_VCTO_POLIZA_CONGENERE') fec_vcto_cong, -- 4.77
                    (SELECT b.val_columna -- I 4.78
                                                FROM C2000000 b
                                               WHERE b.cod_cia = p_cod_cia
                                                 AND b.cod_ramo = p_cod_ramo
                                                 AND b.num_cotizacion =
                                                     a.num_cotizacion
                                                 AND b.nom_tabla =
                                                     ea_k_231_utils.g_k_tabla_dv
                                                 AND b.nom_columna =
                                 'NUM_POLIZA_RENOV') poliza_renov, -- F 4.78
                                     (SELECT b.val_columna
                                       FROM C2000000 b
                                      WHERE b.cod_cia = p_cod_cia
                                        AND b.cod_ramo = p_cod_ramo
                                        AND b.num_cotizacion = a.num_cotizacion
                                        AND b.nom_columna = 'TIP_RENOV') tip_renov,  -- 4.80
                                        -- I 5.29
                                     (SELECT b.val_columna
                                       FROM C2000000 b
                                      WHERE b.cod_cia = p_cod_cia
                                        AND b.cod_ramo = p_cod_ramo
                                        AND b.num_cotizacion = a.num_cotizacion
                                        AND b.nom_tabla = 'A0000000'
                                        AND b.nom_columna = 'TIP_SITU_BO') tip_situ_bo,  --
                                        -- F 5.29
                                        -- { v5.35
                                     (SELECT NVL((SELECT b.val_columna num_dias_validez
                                                    FROM c2000000 b
                                                   WHERE b.cod_cia        = p_cod_cia
                                                     AND b.cod_ramo       = p_cod_ramo
                                                     AND b.num_cotizacion = a.num_cotizacion
                                                     AND b.nom_tabla      = 'A1000000'
                                                     AND b.nom_columna    = 'NUM_DIAS_VALIDEZ'), l_num_dias_vigencia) num_dias_validez  -- v5.51
                                        FROM dual) num_dias_validez
                                        -- v5.35}
                                FROM
                                    c2009030_vcr a

                                WHERE
                                    a.cod_cia              = p_cod_cia
                                    AND a.cod_ramo         = p_cod_ramo
                                    AND a.cod_agt          = p_cod_agt
                                    AND a.fec_emision      >= ( sysdate - To_Number(l_range_dias) )
                                    AND a.nom_tercero LIKE ( Upper( l_nom_tercero ) || '%')
                                    AND (a.tip_situ_proposta     = l_mca_proposta OR (a.tip_situ_proposta is NULL AND a.cod_ramo = g_k_bien_vivir)) -- v 2.78
                                    AND NVL(a.tip_produto,999) IN ( CASE WHEN l_tip_produto is null THEN Nvl(a.tip_produto, 999) ELSE l_tip_produto END)
                                    AND a.num_poliza_grupo = '9999999999999'
                                    AND a.num_cotrato      = '99999'
                                   -- and rownum <101
                                ORDER BY a.fec_emision DESC
                            ) topn
                        WHERE  ROWNUM <= l_limite_fim
                    ) uni
               WHERE  ((p_cod_ramo = 231 AND -- 4.81
               (tipo_seguro IN (l_tip_seguro_mapfre, l_tip_seguro_bb) AND
              -- I 4.78
                 tip_renov IS NOT NULL AND -- 4.88
                     (SELECT  distinct(tip_situ)
                         FROM a2009540_vcr b
                        WHERE b.cod_cia = p_cod_cia
                          AND b.tip_mvto_batch = l_tip_mvto_batch
                          AND b.num_poliza_anterior = poliza_renov
                          AND b.num_cotizacion = uni.num_cotizacion
                          AND b.cod_ramo_destino = p_cod_ramo
                          AND b.cod_agt = p_cod_agt
                          AND b.FEC_CALCULO_COTIZACION =
                              (SELECT max(c.FEC_CALCULO_COTIZACION)
                                 FROM a2009540_vcr c
                                WHERE c.cod_cia = b.cod_cia
                                  AND c.cod_ramo_destino = b.cod_ramo_destino
                                  AND c.tip_mvto_batch = b.tip_mvto_batch
                                  AND c.num_poliza_anterior =
                                      b.num_poliza_anterior
                                  AND c.num_cotizacion = b.num_cotizacion
                                  AND c.cod_agt = b.cod_agt))
                     IN (em_k_migracion_polizas_vcr.g_k_otimizada_recalculada, g_k_flex) -- 4.83
                     AND TO_DATE(fec_vcto_cong, trn.FORMATO_FECHA) - TRUNC(SYSDATE) BETWEEN l_dias_renov_neg AND
                     l_dias_renov_min) OR (tipo_seguro NOT IN (l_tip_seguro_mapfre, l_tip_seguro_bb))
                     OR (tipo_seguro IN (l_tip_seguro_mapfre, l_tip_seguro_bb) AND tip_renov IS NULL) -- 4.88
                     )  -- F 4.78
                     OR p_cod_ramo <> 231) -- 4.81
                AND uni.rnum >= l_limite_ini;
              END IF; -- vers??a????A?o 5.45
              --
              ELSE
        -- produto
                 -- 4.78 - Nueva condicion, ramo VI
                 IF g_cod_ramo = g_k_vida_individual
                 THEN
                    --
                    ev_k_gen_ws.p_ws_consulta_mcc(p_cod_cia          => p_cod_cia,
                                                  p_cod_ramo         => p_cod_ramo,
                                                  p_cod_agt          => p_cod_agt,
                                                  p_ran_dias         => l_range_dias,
                                                  p_num_cotizacion   => l_num_cotizacion,
                                                  p_mca_proposta     => l_mca_proposta,
                                                  p_tip_produto      => l_tip_produto,
              p_xml_in           => p_xml_in,-- v5.06
                                                  p_cursor_cotiza    => l_retorno);
                    --
                    -- v 4.98 Nueva condicion, ramo Residencial
                  ELSIF g_cod_ramo = g_k_residencial
                  THEN
                     --
                     trn_k_global.asigna('COD_CIA' ,trn.UNO);
                     trn_k_global.asigna('COD_RAMO',g_k_residencial);
                     --
                     pp_asigna_globales_cmn;
                     --
                     l_range_dias := em_k_ptd_atr.f_pre_constante(g_k_range_dias);
                     --v 4.98
                     em_k_ptd_qte_vcr.p_val_cotacao_expirada (p_cod_cia  => p_cod_cia   ,
                                                              p_cod_ramo => p_cod_ramo  ,
                                                              p_ran_dias => l_range_dias);
                     --
                     l_range_dias := fp_recupera_config_G1010031('RANGE_DIAS',g_k_cod_ramo_generico, g_k_cod_idioma,'1');
                     --
                     ed_k_gen_ws.p_ws_consulta_mcc (p_cod_cia        => p_cod_cia       ,
                                                    p_cod_ramo       => p_cod_ramo      ,
                                                    p_cod_agt        => p_cod_agt       ,
                                                    p_ran_dias       => l_range_dias    ,
                                                    p_num_cotizacion => l_num_cotizacion,
                                                    p_mca_proposta   => l_mca_proposta  ,
                                                    p_xml_in         => p_xml_in        ,
                                                    p_tip_produto    => l_tip_produto   ,
                                                    p_cursor_cotiza  => l_retorno       );
                    --
                  ELSE
                     -- 4.83
                    OPEN l_retorno FOR

                    SELECT  uni.num_cotizacion  ,
                            uni.nom_tercero  ,
                            uni.cod_docum  ,
                            uni.num_paso_atual  ,
                            uni.cod_agt ,
                            uni.fec_emision,
                            uni.mca_calculado,
                            uni.nom_nivel_cotacao,
                            uni.fec_envio,
                            uni.tip_produto,
                            uni.produto,
                            uni.tot_registro,
                            nvl(uni.num_simulacion,1), --2.55
                            uni.tip_renov, -- 4.80
                            uni.tip_situ_bo, -- 5.29
                            CASE WHEN uni.tip_renov IS NOT NULL AND l_habilita_calc_renov = trn.SI THEN uni.fec_efec_poliza - to_date(uni.fec_emision, trn.FORMATO_FECHA) + TO_NUMBER(nvl(uni.num_dias_validez, l_num_dias_vigencia))
                            ELSE TO_NUMBER(nvl(uni.num_dias_validez, l_num_dias_vigencia)) END  --v5.27 --v5.53
                    FROM  (
                            SELECT   topn.*,  ROWNUM rnum
                            FROM  (
                                    SELECT
                                        a.num_cotizacion   num_cotizacion,
                                        a.nom_tercero      nom_tercero,
                                        a.cod_docum        cod_docum,
                                        a.num_paso_atual   num_paso_atual,
                                        a.cod_agt          cod_agt,
                                        a.fec_efec_poliza  fec_efec_poliza, --v5.53
                                        to_char(a.fec_emision, 'DDMMYYYY') fec_emision,
                                        CASE   WHEN a.num_paso_atual BETWEEN 2 AND 5 THEN  '0'  ELSE  '1' END AS mca_calculado,
                                                   DECODE(p_cod_ramo,231,( select
                                                         NVL(
                                                               (SELECT
                                                                  CASE
                                                                  WHEN a.num_paso_atual BETWEEN 2 AND 4 AND
                                                                     b.val_columna IS NULL THEN
                                                                  'Cota' || chr(231) || chr(227) || 'o'
                                                                  WHEN a.num_paso_atual BETWEEN 6 AND 8 AND
                                                                     b.val_columna IS NULL THEN
                                                                  'Cota' || chr(231) || chr(227) ||
                                                                  'o Calculada'
                                                                  WHEN a.num_paso_atual BETWEEN 2 AND 8 AND
                                                                     b.val_columna IS NOT NULL THEN
                                                                  b.val_columna
                                                                  ELSE
                                                                  'Proposta'
                                                                  END AS status
                                                                  FROM DUAL d LEFT OUTER JOIN c2000000 b
                                                                  ON b.cod_cia        = p_cod_cia
                                                                  AND b.cod_ramo       = p_cod_ramo
                                                                  AND b.nom_columna    = 'TXT_STATUS_MCC'
                                                                  AND b.num_cotizacion = a.num_cotizacion),
                                                               'Cota' || chr(231) || chr(227) || 'o' ||    --v 4.27
                                                               decode( CASE  WHEN ((a.num_paso_atual BETWEEN 6 AND 8) AND (a.cod_ramo <> g_k_bien_vivir))  THEN '1' END, 1, ' Aprovada') ) -- v 2.78
                                                   FROM dual
                                                ),( select 'Cota' || chr(231) || chr(227) || 'o'  ||
                                                  NVL(
                                                          (
                                                             SELECT  ' ' ||  tb1.nom_valor
                                                               FROM g1010031 tb1
                                                              RIGHT JOIN c2000000 b ON   b.nom_columna    = tb1.cod_campo
                                                                                   AND   b.cod_cia        = p_cod_cia -- v2.78
                                                                                   AND   b.cod_ramo       = p_cod_ramo -- v 2.78
                                                                                   AND   b.nom_columna    = 'TIP_SITU_BO'
                                                               WHERE  tb1.cod_valor  =  b.val_columna AND  b.num_cotizacion =  a.num_cotizacion
                                                                 and tb1.cod_ramo = (CASE  WHEN (p_cod_ramo = 231) THEN g_k_cod_ramo_generico -- v 2.86
                                                                                     ELSE p_cod_ramo  END) -- v 2.86
                                                          )
                                                      , decode( CASE  WHEN ((a.num_paso_atual BETWEEN 6 AND 8) AND (a.cod_ramo <> g_k_bien_vivir))  THEN '1' END, 1, ' Aprovada') ) -- v 2.78
                                          FROM dual
                                      ))nom_nivel_cotacao,

                                        to_char(sysdate, 'DDMMYYYY') fec_envio,
                                        a.tip_produto tip_produto,
                                        a.cod_ramo         produto,
                                        count(1) OVER() as tot_registro,
                                        (SELECT b.val_columna  num_simulacion
                                           FROM c2000000 b
                                          WHERE b.cod_cia = p_cod_cia
                                            AND b.cod_ramo = p_cod_ramo
                                            AND b.num_cotizacion = a.num_cotizacion
                                            AND b.nom_tabla = 'G2000000'
                                            AND b.nom_columna = 'NUM_SIMULACION') num_simulacion, -- 2.55
                                     (SELECT b.val_columna
                                        FROM C2000000 b
                                       WHERE b.cod_cia = p_cod_cia
                                         AND b.cod_ramo = p_cod_ramo
                                         AND b.num_cotizacion =
                                             a.num_cotizacion
                                         AND b.nom_columna =
                                             'MCA_RENOV_OUTRAS') tipo_seguro, -- 4.77
                                     (SELECT b.val_columna
                                        FROM C2000000 b
                                       WHERE b.cod_cia = p_cod_cia
                                         AND b.cod_ramo = p_cod_ramo
                                         AND b.num_cotizacion =
                                             a.num_cotizacion
                                         AND b.nom_columna =
                                             'FEC_VCTO_POLIZA_CONGENERE') fec_vcto_cong, -- 4.77
                  (SELECT b.val_columna -- I 4.78
                                        FROM C2000000 b
                                       WHERE b.cod_cia = p_cod_cia
                                         AND b.cod_ramo = p_cod_ramo
                                         AND b.num_cotizacion =
                                             a.num_cotizacion
                                         AND b.nom_tabla =
                                             ea_k_231_utils.g_k_tabla_dv
                                         AND b.nom_columna =
                                             'NUM_POLIZA_RENOV') poliza_renov, -- F 4.78
                                     (SELECT b.val_columna
                                       FROM C2000000 b
                                      WHERE b.cod_cia = p_cod_cia
                                        AND b.cod_ramo = p_cod_ramo
                                        AND b.num_cotizacion = a.num_cotizacion
                                        AND b.nom_columna = 'TIP_RENOV') tip_renov,  -- 4.80
                                        -- I 5.16
                                     (SELECT b.val_columna
                                       FROM C2000000 b
                                      WHERE b.cod_cia = p_cod_cia
                                        AND b.cod_ramo = p_cod_ramo
                                        AND b.num_cotizacion = a.num_cotizacion
                                        AND b.nom_columna = 'TIP_SITU_BO') tip_situ_bo
                                        -- F 5.29
                                        -- { v5.35
                                     ,(SELECT NVL((SELECT b.val_columna num_dias_validez
                                                    FROM c2000000 b
                                                   WHERE b.cod_cia        = p_cod_cia
                                                     AND b.cod_ramo       = p_cod_ramo
                                                     AND b.num_cotizacion = a.num_cotizacion
                                                     AND b.nom_tabla      = 'A1000000'
                                                     AND b.nom_columna    = 'NUM_DIAS_VALIDEZ'), l_num_dias_vigencia) num_dias_validez  -- v5.51
                                        FROM dual) num_dias_validez
                                        -- v5.35}
                                    FROM
                                        c2009030_vcr a

                                    WHERE
                                        a.cod_cia = p_cod_cia
                                        AND a.cod_ramo         = p_cod_ramo
                                        AND a.cod_agt          = p_cod_agt
                                        AND a.fec_emision      >= ( sysdate - To_Number(l_range_dias) )
                                        AND (a.tip_situ_proposta     = l_mca_proposta OR (a.tip_situ_proposta is NULL AND a.cod_ramo = g_k_bien_vivir)) -- v 2.78
                                        AND NVL(a.tip_produto,999) IN ( CASE WHEN l_tip_produto is null THEN Nvl(a.tip_produto, 999) ELSE l_tip_produto END)
                                        AND a.num_poliza_grupo = '9999999999999'
                                        AND a.num_cotrato      = '99999'
                                      -- and rownum <101
                                    ORDER BY a.fec_emision DESC
                                ) topn
                            WHERE  ROWNUM <= l_limite_fim
                        ) uni
             -- I 4.78
               WHERE  ((p_cod_ramo = 231  AND -- 4.81
               (tipo_seguro IN (l_tip_seguro_mapfre, l_tip_seguro_bb) AND
              -- I 4.78
                 tip_renov IS NOT NULL AND -- 4.88
                     (SELECT  distinct(tip_situ)
                         FROM a2009540_vcr b
                        WHERE b.cod_cia = p_cod_cia
                          AND b.tip_mvto_batch = l_tip_mvto_batch
                          AND b.num_poliza_anterior = poliza_renov
                          AND b.num_cotizacion = uni.num_cotizacion
                          AND b.cod_ramo_destino = p_cod_ramo
                          AND b.cod_agt = p_cod_agt
                          AND b.FEC_CALCULO_COTIZACION =
                              (SELECT max(c.FEC_CALCULO_COTIZACION)
                                 FROM a2009540_vcr c
                                WHERE c.cod_cia = b.cod_cia
                                  AND c.cod_ramo_destino = b.cod_ramo_destino
                                  AND c.tip_mvto_batch = b.tip_mvto_batch
                                  AND c.num_poliza_anterior =
                                      b.num_poliza_anterior
                                  AND c.num_cotizacion = b.num_cotizacion
                                  AND c.cod_agt = b.cod_agt))
                     IN (em_k_migracion_polizas_vcr.g_k_otimizada_recalculada, g_k_flex) -- 4.83
                     AND TO_DATE(fec_vcto_cong, trn.FORMATO_FECHA) -
                     TRUNC(SYSDATE) BETWEEN l_dias_renov_neg AND
                     l_dias_renov_min) OR (tipo_seguro NOT IN (l_tip_seguro_mapfre, l_tip_seguro_bb))
                     OR (tipo_seguro IN (l_tip_seguro_mapfre, l_tip_seguro_bb) AND tip_renov IS NULL) -- 4.88
                     )  -- 4.77
                     OR p_cod_ramo <> 231) -- 4.81
                AND uni.rnum >= l_limite_ini;

                  END IF; -- 4.98
             END IF;
            ELSIF l_cod_sistema = 3 THEN
               -- Consulta proposta
              l_mca_proposta  := 1;
              l_range_dias    := fp_recupera_config_G1010031('RANGE_DIAS',g_k_cod_ramo_generico, g_k_cod_idioma,'2');

              IF l_num_cotizacion IS NOT NULL THEN

                OPEN l_retorno FOR

                    SELECT  uni.num_cotizacion  ,
                            uni.nom_tercero  ,
                            uni.cod_docum  ,
                            uni.num_paso_atual  ,
                            uni.cod_agt ,
                            uni.fec_emision,
                            uni.mca_calculado,
                            uni.nom_nivel_cotacao,
                            uni.fec_envio,
                            uni.tip_produto,
                            uni.produto,
                            uni.tot_registro,
                            nvl(uni.num_simulacion,1) --2.55
                            ,NULL as tip_renov,  -- 4.81
                            uni.tip_situ_bo -- 5.29
                            ,nvl(uni.num_dias_validez,l_num_dias_vigencia)  --  v5.51
                    FROM  (
                            SELECT  topn.*,  ROWNUM rnum
                            FROM  (
                                    SELECT
                                        a.num_cotizacion   num_cotizacion,
                                        a.nom_tercero      nom_tercero,
                                        a.cod_docum        cod_docum,
                                        a.num_paso_atual   num_paso_atual,
                                        a.cod_agt          cod_agt,
                                        to_char(a.fec_emision, 'DDMMYYYY') fec_emision,
                                        CASE   WHEN a.num_paso_atual BETWEEN 2 AND 5 THEN  '0'  ELSE  '1' END AS mca_calculado,
                                        'Proposta' nom_nivel_cotacao,
                                        to_char(sysdate, 'DDMMYYYY') fec_envio,
                                        a.tip_produto tip_produto,
                                        a.cod_ramo         produto,
                                        count(1) OVER() as tot_registro,
                                       (SELECT a.val_columna  num_simulacion
                                          FROM c2000000 a
                                         WHERE a.cod_cia = p_cod_cia
                                           AND a.cod_ramo = p_cod_ramo
                                           AND a.num_cotizacion = l_num_cotizacion
                                           AND a.nom_tabla = 'G2000000'
                                           AND a.nom_columna = 'NUM_SIMULACION') num_simulacion,  -- 2.55
                                       (SELECT a.val_columna  tip_situ_bo
                                          FROM c2000000 a
                                         WHERE a.cod_cia = p_cod_cia
                                           AND a.cod_ramo = p_cod_ramo
                                           AND a.num_cotizacion = l_num_cotizacion
                                           AND a.nom_tabla = 'A0000000'
                                           AND a.nom_columna = 'TIP_SITU_BO') tip_situ_bo  -- 5.29
                                       -- { v5.35
                                       ,(SELECT NVL((SELECT a.val_columna num_dias_validez
                                                       FROM c2000000 a
                                                      WHERE a.cod_cia        = p_cod_cia
                                                        AND a.cod_ramo       = p_cod_ramo
                                                        AND a.num_cotizacion = l_num_cotizacion
                                                        AND a.nom_tabla      = 'A1000000'
                                                        AND a.nom_columna    = 'NUM_DIAS_VALIDEZ'), l_num_dias_vigencia) num_dias_validez  -- v5.51
                                           FROM dual) num_dias_validez
                                       -- v5.35}
                                    FROM
                                        c2009030_vcr a

                                    WHERE
                                        a.cod_cia              = p_cod_cia
                                        AND a.cod_ramo         = p_cod_ramo
                                        AND a.cod_agt          = p_cod_agt
                                        AND a.fec_emision      >= ( sysdate - To_Number(l_range_dias) )
                                        AND a.num_cotizacion   = l_num_cotizacion
                                        AND a.tip_situ_proposta     = l_mca_proposta
                                        AND NVL(a.tip_produto,999) IN ( CASE WHEN l_tip_produto is null THEN Nvl(a.tip_produto, 999) ELSE l_tip_produto END)
                                        AND a.num_poliza_grupo = '9999999999999'
                                        AND a.num_cotrato      = '99999'
                                       -- and rownum <101
                                    ORDER BY a.fec_emision DESC
                                ) topn
                            WHERE  ROWNUM <= l_limite_fim
                        ) uni
                    WHERE  uni.rnum >= l_limite_ini;
           --
              ELSIF l_cod_docum IS NOT NULL THEN

                    OPEN l_retorno FOR

                    SELECT  uni.num_cotizacion  ,
                            uni.nom_tercero  ,
                            uni.cod_docum  ,
                            uni.num_paso_atual  ,
                            uni.cod_agt ,
                            uni.fec_emision,
                            uni.mca_calculado,
                          uni.nom_nivel_cotacao,
                            uni.fec_envio,
                          uni.tip_produto,
                          uni.produto,
                          uni.tot_registro,
                          nvl(uni.num_simulacion,1) --2.55
                          ,NULL as tip_renov  -- 4.81
                          ,uni.tip_situ_bo -- 5.29
                          ,nvl(uni.num_dias_validez, l_num_dias_vigencia)  -- v5.51
                       FROM  (
                            SELECT   topn.*,  ROWNUM rnum
                              FROM  (
                                       SELECT
                                              a.num_cotizacion   num_cotizacion,
                                              a.nom_tercero      nom_tercero,
                                              a.cod_docum        cod_docum,
                                              a.num_paso_atual   num_paso_atual,
                                              a.cod_agt          cod_agt,
                                              to_char(a.fec_emision, 'DDMMYYYY') fec_emision,
                                              CASE   WHEN a.num_paso_atual BETWEEN 2 AND 5 THEN  '0'  ELSE  '1' END AS mca_calculado,
                                               'Proposta' nom_nivel_cotacao,
                                               to_char(sysdate, 'DDMMYYYY') fec_envio,
                                              a.tip_produto      tip_produto,
                                              a.cod_ramo         produto,
                                              count(1) OVER() as tot_registro,
                                             (SELECT b.val_columna  num_simulacion
                                                FROM c2000000 b
                                               WHERE b.cod_cia = p_cod_cia
                                                 AND b.cod_ramo = p_cod_ramo
                                                 AND b.num_cotizacion = a.num_cotizacion
                                                 AND b.nom_tabla = 'G2000000'
                                                 AND b.nom_columna = 'NUM_SIMULACION') num_simulacion,  -- 2.55
                                              (SELECT b.val_columna  tip_situ_bo
                                                FROM c2000000 b
                                               WHERE b.cod_cia = p_cod_cia
                                                 AND b.cod_ramo = p_cod_ramo
                                                 AND b.num_cotizacion = a.num_cotizacion
                                                 AND b.nom_tabla = 'A0000000'
                                                 AND b.nom_columna = 'TIP_SITU_BO') tip_situ_bo  -- 5.29
                                             -- {v5.35
                                             ,(SELECT NVL((SELECT b.val_columna num_dias_validez
                                                            FROM c2000000 b
                                                           WHERE b.cod_cia        = p_cod_cia
                                                             AND b.cod_ramo       = p_cod_ramo
                                                             AND b.num_cotizacion = a.num_cotizacion
                                                             AND b.nom_tabla      = 'A1000000'
                                                             AND b.nom_columna    = 'NUM_DIAS_VALIDEZ'), l_num_dias_vigencia) num_dias_validez  -- v5.51
                                                FROM dual) num_dias_validez
                                             -- v5.35}
                                        FROM
                                              c2009030_vcr a

                                       WHERE
                                              a.cod_cia              = p_cod_cia
                                              AND a.cod_ramo         = p_cod_ramo
                                               AND a.cod_agt          = p_cod_agt
                                              AND a.fec_emision      >= ( sysdate - To_Number(l_range_dias) )
                                              AND a.cod_docum        = l_cod_docum
                                              AND a.tip_docum        = l_tip_docum
                                              AND a.tip_situ_proposta     = l_mca_proposta
                                              AND NVL(a.tip_produto,999) IN ( CASE WHEN l_tip_produto is null THEN Nvl(a.tip_produto, 999) ELSE l_tip_produto END)
                                              AND a.num_poliza_grupo = '9999999999999'
                                              AND a.num_cotrato      = '99999'
                                             -- and rownum <101
                                       ORDER BY a.fec_emision DESC
                                     ) topn
                               WHERE  ROWNUM <= l_limite_fim
                              ) uni
                  WHERE  uni.rnum >= l_limite_ini;
         --
              ELSIF l_nom_tercero IS NOT NULL THEN

                   OPEN l_retorno FOR

                  SELECT  uni.num_cotizacion  ,
                        uni.nom_tercero  ,
                          uni.cod_docum  ,
                        uni.num_paso_atual  ,
                          uni.cod_agt ,
                          uni.fec_emision,
                        uni.mca_calculado,
                          uni.nom_nivel_cotacao,
                        uni.fec_envio,
                          uni.tip_produto,
                        uni.produto,
                        uni.tot_registro,
                        nvl(uni.num_simulacion,1) --2.55
                        ,NULL as tip_renov  -- 4.81
                        ,uni.tip_situ_bo -- 5.29
                        ,nvl(uni.num_dias_validez, l_num_dias_vigencia)  -- v5.51
                 FROM  (
                         SELECT   topn.*,  ROWNUM rnum
                           FROM  (
                                   SELECT
                                          a.num_cotizacion   num_cotizacion,
                                          a.nom_tercero      nom_tercero,
                                          a.cod_docum        cod_docum,
                                        a.num_paso_atual   num_paso_atual,
                                          a.cod_agt          cod_agt,
                                        to_char(a.fec_emision, 'DDMMYYYY') fec_emision,
                                        CASE   WHEN a.num_paso_atual BETWEEN 2 AND 5 THEN  '0'  ELSE  '1' END AS mca_calculado,
                                        'Proposta' nom_nivel_cotacao,
                                          to_char(sysdate, 'DDMMYYYY') fec_envio,
                                        a.tip_produto tip_produto,
                                          a.cod_ramo         produto,
                                        count(1) OVER() as tot_registro,
                                        (SELECT b.val_columna  num_simulacion
                                           FROM c2000000 b
                                          WHERE b.cod_cia = p_cod_cia
                                            AND b.cod_ramo = p_cod_ramo
                                            AND b.num_cotizacion = a.num_cotizacion
                                            AND b.nom_tabla = 'G2000000'
                                            AND b.nom_columna = 'NUM_SIMULACION') num_simulacion,  -- 2.55
                                        -- I 5.29
                                        (SELECT b.val_columna  tip_situ_bo
                                           FROM c2000000 b
                                          WHERE b.cod_cia = p_cod_cia
                                            AND b.cod_ramo = p_cod_ramo
                                            AND b.num_cotizacion = a.num_cotizacion
                                            AND b.nom_tabla = 'A0000000'
                                            AND b.nom_columna = 'TIP_SITU_BO') tip_situ_bo
                                        -- F 5.29
                                        -- {v5.35
                                        ,(SELECT NVL((SELECT b.val_columna num_dias_validez
                                                       FROM c2000000 b
                                                      WHERE b.cod_cia        = p_cod_cia
                                                        AND b.cod_ramo       = p_cod_ramo
                                                        AND b.num_cotizacion = a.num_cotizacion
                                                        AND b.nom_tabla      = 'A1000000'
                                                        AND b.nom_columna    = 'NUM_DIAS_VALIDEZ'), l_num_dias_vigencia) num_dias_validez  -- v5.51
                                           FROM dual) num_dias_validez
                                        -- v5.35}
                                  FROM
                                          c2009030_vcr a

                                  WHERE
                                          a.cod_cia = p_cod_cia
                                        AND a.cod_ramo = p_cod_ramo
                                        AND a.cod_agt = p_cod_agt
                                        AND a.fec_emision >= ( sysdate - To_Number(l_range_dias) )
                                        AND a.nom_tercero LIKE ( Upper( l_nom_tercero ) || '%')
                                        AND a.tip_situ_proposta = l_mca_proposta
                                        AND NVL(a.tip_produto,999) IN ( CASE WHEN l_tip_produto is null THEN Nvl(a.tip_produto, 999) ELSE l_tip_produto END)
                                        AND a.num_poliza_grupo = '9999999999999'
                                        AND a.num_cotrato      = '99999'
                                    -- and rownum <101
                                    ORDER BY a.fec_emision DESC
                                ) topn
                        WHERE  ROWNUM <= l_limite_fim
                    ) uni
                  WHERE  uni.rnum >= l_limite_ini;

           --
            ELSE -- produto

           OPEN l_retorno FOR

             SELECT  uni.num_cotizacion  ,
                uni.nom_tercero  ,
                uni.cod_docum  ,
                uni.num_paso_atual  ,
                uni.cod_agt ,
                uni.fec_emision,
                uni.mca_calculado,
                uni.nom_nivel_cotacao,
                uni.fec_envio,
                uni.tip_produto,
                uni.produto,
                uni.tot_registro,
                nvl(uni.num_simulacion,1) --2.55
                ,NULL as tip_renov  -- 4.81
                ,uni.tip_situ_bo -- 5.29
                ,nvl(uni.num_dias_validez, l_num_dias_vigencia)  -- v5.51
            FROM  (
                SELECT   topn.*,  ROWNUM rnum
                FROM  (
                    SELECT
                      a.num_cotizacion   num_cotizacion,
                      a.nom_tercero      nom_tercero,
                      a.cod_docum        cod_docum,
                                            a.num_paso_atual   num_paso_atual,
                      a.cod_agt          cod_agt,
                      to_char(a.fec_emision, 'DDMMYYYY') fec_emision,
                      CASE   WHEN a.num_paso_atual BETWEEN 2 AND 5 THEN  '0'  ELSE  '1' END AS mca_calculado,
                      'Proposta'         nom_nivel_cotacao,
                      to_char(sysdate, 'DDMMYYYY') fec_envio,
                      a.tip_produto      tip_produto,
                      a.cod_ramo         produto,
                      count(1) OVER() as tot_registro,
                      (SELECT b.val_columna  num_simulacion
                         FROM c2000000 b
                        WHERE b.cod_cia = p_cod_cia
                          AND b.cod_ramo = p_cod_ramo
                          AND b.num_cotizacion = a.num_cotizacion
                          AND b.nom_tabla = 'G2000000'
                          AND b.nom_columna = 'NUM_SIMULACION') num_simulacion,  -- 2.55
                      -- I 5.29
                      (SELECT b.val_columna  tip_situ_bo
                         FROM c2000000 b
                        WHERE b.cod_cia = p_cod_cia
                          AND b.cod_ramo = p_cod_ramo
                          AND b.num_cotizacion = a.num_cotizacion
                          AND b.nom_tabla = 'A0000000'
                          AND b.nom_columna = 'TIP_SITU_BO') tip_situ_bo
                      -- F 5.299
                      -- {v5.35
                      ,(SELECT NVL((SELECT b.val_columna num_dias_validez
                                      FROM c2000000 b
                                     WHERE b.cod_cia        = p_cod_cia
                                       AND b.cod_ramo       = p_cod_ramo
                                       AND b.num_cotizacion = a.num_cotizacion
                                       AND b.nom_tabla      = 'A1000000'
                                       AND b.nom_columna    = 'NUM_DIAS_VALIDEZ'), l_num_dias_vigencia) num_dias_validez  -- v5.51
                          FROM dual) num_dias_validez
                      -- v5.35}
                    FROM
                      c2009030_vcr a

                    WHERE
                      a.cod_cia          = p_cod_cia
                      AND a.cod_ramo     = p_cod_ramo
                      AND a.cod_agt      = p_cod_agt
                      AND a.fec_emision  >= ( sysdate - To_Number(l_range_dias) )
                      AND a.tip_situ_proposta =l_mca_proposta
                                            AND NVL(a.tip_produto,999) IN ( CASE WHEN l_tip_produto is null THEN Nvl(a.tip_produto, 999) ELSE l_tip_produto END)
                                            AND a.num_poliza_grupo = '9999999999999'
                                            AND a.num_cotrato      = '99999'
                       -- and rownum <101
                    ORDER BY a.fec_emision DESC
                  ) topn
                WHERE  ROWNUM <= l_limite_fim
              ) uni
            WHERE  uni.rnum >= l_limite_ini;

              END IF;

         ELSE
            IF (l_num_cotizacion IS NOT NULL OR l_cod_docum IS NOT NULL OR l_nom_tercero IS NOT NULL) THEN
            IF l_eh_3_pacotes THEN
              --
              OPEN l_retorno FOR
              --
                WITH c_FILTRO AS (
                  SELECT a.num_cotizacion,
                         a.cod_ramo,
                         a.tip_docum,
                         a.cod_docum,
                         a.cod_agt,
                         a.fec_emision
                    FROM tron2000.c2009030_vcr a
                  WHERE a.cod_cia         = p_cod_cia
                    AND a.cod_ramo        = NVL(p_cod_ramo, a.cod_ramo)
                    AND a.cod_agt         = p_cod_agt
                    AND a.num_cotizacion  = NVL(l_num_cotizacion, a.num_cotizacion)
                    AND a.tip_docum       = NVL(l_tip_docum, a.tip_docum)
                    AND a.cod_docum      = NVL(l_cod_docum, a.cod_docum)
                     AND a.num_cotizacion = NVL(l_num_cotizacion, a.num_cotizacion)
                     AND a.tip_docum      = NVL(l_tip_docum, a.tip_docum)
                     AND a.cod_docum      = NVL(l_cod_docum, a.cod_docum) -- C_FILTRO a,
                  ),
                c_tip_situ_bo AS
                 (SELECT b.num_cotizacion, x.nom_columna, x.val_columna --, y.nom_valor
                    FROM C_FILTRO b
                    LEFT OUTER JOIN (SELECT num_cotizacion,
                                           cod_ramo,
                                           nom_columna,
                                           val_columna
                                      FROM c2000000
                                     WHERE cod_cia = 1
                                       AND nom_columna = 'TXT_STATUS_MCC') x
                      ON x.cod_ramo = b.cod_ramo
                     AND x.num_cotizacion = b.num_cotizacion
                  /*LEFT OUTER JOIN (SELECT nom_valor, cod_valor
                                  FROM g1010031
                                 WHERE cod_campo = 'TIP_SITU_BO') y
                  ON x.val_columna = y.cod_valor*/
                  )
                SELECT C_CONSULTA.*
                  FROM (SELECT a.num_cotizacion num_cotizacion,
                               b.nom_tercero nom_tercero,
                               a.cod_docum cod_docum,
                               c.num_paso_atual num_paso_atual,
                               a.cod_agt cod_agt,
                               TO_CHAR(a.fec_emision, 'DDMMYYYY') fec_emision,
                               CASE
                                 WHEN c.num_paso_atual BETWEEN 2 AND 5 THEN
                                  '0'
                                 ELSE
                                  '1'
                               END AS mca_calculado,
                               CASE
                                 WHEN c.num_paso_atual BETWEEN 2 AND 4 AND
                                      t.val_columna IS NULL THEN
                                  'Cota' || chr(231) || chr(227) || 'o'
                                 WHEN c.num_paso_atual BETWEEN 6 AND 8 AND
                                      t.val_columna IS NULL THEN
                                  'Cota' || chr(231) || chr(227) ||
                                  'o Calculada'
                                 WHEN c.num_paso_atual BETWEEN 2 AND 8 AND
                                      t.val_columna IS NOT NULL THEN
                                 --'Cota' || chr(231) || chr(227) || 'o ' ||
                                  t.val_columna
                                 ELSE
                                  'Proposta'
                               END AS nom_nivel_cotacao,
                               TO_CHAR(SYSDATE, 'DDMMYYYY') fec_envio,
                               NVL(d.tip_produto, '224') tip_produto,
                               a.cod_ramo produto,
                               0 TOT_REGISTRO,
                               nvl(num_simulacion,1) -- 2.55
                               ,NULL as tip_renov  -- 4.81
                               ,tip_situ_bo -- 5.29
                               ,NVL(g.num_dias_validez, l_num_dias_vigencia) num_dias_validez -- v5.51
                          FROM C_FILTRO      a,
                               c_tip_situ_bo t,
                               --Terceiro
                               (SELECT a.num_cotizacion,
                                       a.val_columna nom_tercero
                                  FROM c2000000 a, C_FILTRO b
                                 WHERE a.cod_cia = p_cod_cia
                                   AND a.cod_ramo = b.cod_ramo
                                   AND a.num_cotizacion = b.num_cotizacion
                                   AND a.nom_tabla = 'A1001331'
                                   AND a.nom_columna = 'NOM_TERCERO'
                                   AND a.val_columna LIKE
                                       (Nvl('%' || l_nom_tercero || '%',
                                            a.val_columna))) b,
                               -- Numero_passo
                               (SELECT a.num_cotizacion,
                                       a.val_columna num_paso_atual
                                  FROM c2000000 a, C_FILTRO b
                                 WHERE a.cod_cia = p_cod_cia
                                   AND a.cod_ramo = b.cod_ramo
                                   AND a.num_cotizacion = b.num_cotizacion
                                   AND a.nom_tabla = 'G9999994'
                                   AND a.nom_columna = 'NUM_PASO_ATUAL') c,
                               -- Tipo Produto
                               (SELECT a.num_cotizacion,
                                       a.val_columna tip_produto
                                  FROM c2000000 a, C_FILTRO b
                                 WHERE a.cod_cia = p_cod_cia
                                   AND a.cod_ramo = b.cod_ramo
                                   AND a.num_cotizacion = b.num_cotizacion
                                   AND a.nom_tabla = 'A2000020'
                                   AND a.nom_columna = 'TIP_PRODUTO') d,
                               -- Numero_simulacao
                               (SELECT a.num_cotizacion,
                                       a.val_columna num_simulacion
                                  FROM c2000000 a, C_FILTRO b
                                 WHERE a.cod_cia = p_cod_cia
                                   AND a.cod_ramo = b.cod_ramo
                                   AND a.num_cotizacion = b.num_cotizacion
                                   AND a.nom_tabla = 'G2000000'
                                   AND a.nom_columna = 'NUM_SIMULACION') e
                                -- I 5.29
                               ,(SELECT a.num_cotizacion,
                                       a.val_columna tip_situ_bo
                                  FROM c2000000 a, C_FILTRO b
                                 WHERE a.cod_cia = p_cod_cia
                                   AND a.cod_ramo = b.cod_ramo
                                   AND a.num_cotizacion = b.num_cotizacion
                                   AND a.nom_tabla = 'A0000000'
                                   AND a.nom_columna = 'TIP_SITU_BO') f
                                -- F 5.29
                                -- {v5.35
                                -- dias de validade da cotacao
                               ,(SELECT a.num_cotizacion,
                                        (SELECT NVL((SELECT a.val_columna
                                                       FROM c2000000 a, C_FILTRO b
                                                      WHERE a.cod_cia        = p_cod_cia
                                                        AND a.cod_ramo       = b.cod_ramo
                                                        AND a.num_cotizacion = b.num_cotizacion
                                                        AND a.nom_tabla      = 'A1000000'
                                                        AND a.nom_columna    = 'NUM_DIAS_VALIDEZ'), l_num_dias_vigencia)  -- v5.51
                                           FROM dual) num_dias_validez
                                   FROM c2000000 a, C_FILTRO b
                                  WHERE a.cod_cia        = p_cod_cia
                                    AND a.cod_ramo       = b.cod_ramo
                                    AND a.num_cotizacion = b.num_cotizacion
                                    AND a.nom_tabla      = 'G2000000'
                                    AND a.nom_columna    = 'NUM_SIMULACION') g
                                -- v5.35}
                         WHERE a.num_cotizacion = b.num_cotizacion
                           AND a.num_cotizacion = c.num_cotizacion
                           AND a.num_cotizacion = d.num_cotizacion
                           AND a.num_cotizacion = e.num_cotizacion(+) -- 2.55
                           AND a.num_cotizacion = g.num_cotizacion(+) -- v5.35
                           AND t.num_cotizacion = d.num_cotizacion
                         ORDER BY a.fec_emision DESC, a.num_cotizacion) C_CONSULTA
                 WHERE rownum <= 150;
              --
            ELSE
              -- 1.50
              OPEN l_retorno FOR
              --
                WITH c_FILTRO AS
                 (SELECT a.num_cotizacion,
                         a.cod_ramo,
                         a.tip_docum,
                         a.cod_docum,
                         a.cod_agt,
                         a.fec_emision
                    FROM tron2000.c2009030_vcr a
                   WHERE a.cod_cia = p_cod_cia
                     AND a.cod_ramo = NVL(p_cod_ramo, a.cod_ramo)
                     AND a.cod_agt = p_cod_agt
                     AND a.num_cotizacion =
                         NVL(l_num_cotizacion, a.num_cotizacion)
                     AND a.tip_docum = NVL(l_tip_docum, a.tip_docum)
                     AND a.cod_docum = NVL(l_cod_docum, a.cod_docum)
                     AND a.num_cotizacion =
                         NVL(l_num_cotizacion, a.num_cotizacion)
                     AND a.tip_docum = NVL(l_tip_docum, a.tip_docum)
                     AND a.cod_docum = NVL(l_cod_docum, a.cod_docum) -- C_FILTRO a,
                  ),
                c_tip_situ_bo AS
                 (SELECT b.num_cotizacion,
                         x.nom_columna,
                         x.val_columna,
                         y.nom_valor
                    FROM C_FILTRO b
                    LEFT OUTER JOIN (SELECT num_cotizacion, cod_ramo, nom_columna, val_columna
                                      FROM c2000000
                                     WHERE cod_cia     = 1
                                       AND nom_columna = 'TIP_SITU_BO') x ON x.cod_ramo = b.cod_ramo
                                       AND x.num_cotizacion = b.num_cotizacion
                    LEFT OUTER JOIN (SELECT nom_valor, cod_valor
                                      FROM g1010031
                                     WHERE cod_campo = 'TIP_SITU_BO') y ON x.val_columna = y.cod_valor
                                     )
                SELECT C_CONSULTA.*
                  FROM (
                     SELECT
                            a.num_cotizacion                  num_cotizacion,
                            b.nom_tercero                     nom_tercero,
                            a.cod_docum                       cod_docum,
                            c.num_paso_atual                  num_paso_atual,
                            a.cod_agt                         cod_agt,
                            TO_CHAR(a.fec_emision,'DDMMYYYY') fec_emision,
                               CASE WHEN c.num_paso_atual BETWEEN 2 AND 5 THEN '0' ELSE '1' END AS mca_calculado,
                               CASE WHEN c.num_paso_atual BETWEEN 2 AND 4 AND t.nom_valor IS NULL THEN 'Cota' || chr(231) || chr(227) || 'o'
                                 WHEN c.num_paso_atual BETWEEN 6 AND 8 AND t.nom_valor IS NULL THEN 'Cota' || chr(231) || chr(227) || 'o Calculada'
                                 WHEN c.num_paso_atual BETWEEN 2 AND 8 AND t.nom_valor IS NOT NULL THEN 'Cota' || chr(231) || chr(227) || 'o ' || t.nom_valor
                                 ELSE 'Proposta' END AS nom_nivel_cotacao,
                               TO_CHAR(SYSDATE,'DDMMYYYY')       fec_envio,
                               NVL(d.tip_produto, '224')         tip_produto,
                               a.cod_ramo                        produto,
                               0                                 TOT_REGISTRO,
                               (SELECT nvl(a.val_columna,1)  num_simulacion
                                        FROM c2000000 a
                                       WHERE a.cod_cia = p_cod_cia
                                         AND a.cod_ramo = p_cod_ramo
                                         AND a.num_cotizacion = l_num_cotizacion
                                         AND a.nom_tabla = 'G2000000'
                                         AND a.nom_columna = 'NUM_SIMULACION') num_simulacion  -- 2.55
                               ,NULL as tip_renov  -- 4.81
                                 -- {v5.35
                               -- dias de validade da cotacao
                               ,(SELECT NVL((SELECT nvl(g.val_columna, l_num_dias_vigencia) num_dias_validez  -- v5.51
                                              FROM c2000000 g
                                             WHERE g.cod_cia        = p_cod_cia
                                               AND g.cod_ramo       = p_cod_ramo
                                               AND g.num_cotizacion = l_num_cotizacion
                                               AND g.nom_tabla      = 'A1000000'
                                               AND g.nom_columna    = 'NUM_DIAS_VALIDEZ'),7) num_dias_validez
                                  FROM dual) num_dias_validez
                                 -- v5.35}
                          FROM
                           C_FILTRO              a,
                           c_tip_situ_bo         t,
                               --Terceiro
                               (SELECT a.num_cotizacion, a.val_columna nom_tercero
                                  FROM c2000000 a  , C_FILTRO b
                                 WHERE a.cod_cia        = p_cod_cia
                                   AND a.cod_ramo       = b.cod_ramo
                                   AND a.num_cotizacion = b.num_cotizacion
                                   AND a.nom_tabla      = 'A1001331'
                                   AND a.nom_columna    = 'NOM_TERCERO'
                                   AND a.val_columna    LIKE (Nvl('%'||l_nom_tercero||'%',a.val_columna) ) ) b,
                               -- Numero_passo
                               (SELECT a.num_cotizacion, a.val_columna num_paso_atual
                                  FROM c2000000 a , C_FILTRO b
                                 WHERE a.cod_cia        = p_cod_cia
                                   AND a.cod_ramo       = b.cod_ramo
                                   AND a.num_cotizacion = b.num_cotizacion
                                   AND a.nom_tabla      = 'G9999994'
                                   AND a.nom_columna    = 'NUM_PASO_ATUAL' ) c,
                               -- Tipo Produto
                               (SELECT a.num_cotizacion, a.val_columna tip_produto
                                  FROM c2000000 a, C_FILTRO b
                                 WHERE a.cod_cia        = p_cod_cia
                                   AND a.cod_ramo       = b.cod_ramo
                                   AND a.num_cotizacion = b.num_cotizacion
                                   AND a.nom_tabla      = 'A2000020'
                                   AND a.nom_columna    = 'TIP_PRODUTO' ) d
                         WHERE a.num_cotizacion  = b.num_cotizacion
                           AND a.num_cotizacion  = c.num_cotizacion
                           AND a.num_cotizacion  = d.num_cotizacion
                           AND t.num_cotizacion  = d.num_cotizacion
                         ORDER BY
                         a.fec_emision DESC,
                         a.num_cotizacion
                         ) C_CONSULTA
                 WHERE rownum <= 150;
              --
            END IF;
            -- 1.50
          END IF;
          -- F 2.43
        END IF;
        -- v 2.15

           ELSE
        -- amarco{
        IF l_cod_situacion IS NOT NULL AND l_num_cotizacion_grupo IS NULL --Busqueda por tip_situ
         THEN
          OPEN l_retorno FOR
            WITH c_num_coti AS
             (SELECT NUM_COTIZACION
                FROM C2000000
               WHERE COD_CIA = p_cod_cia
                 AND COD_RAMO = p_cod_ramo
                 AND NOM_COLUMNA = 'TIP_SITU_COTI_GRP'
                 AND VAL_COLUMNA = l_cod_situacion),
            c_c2000000 AS
             (SELECT c_filtro.*
                FROM (SELECT *
                        FROM (SELECT cod_cia,
                                     cod_ramo,
                                     num_cotizacion,
                                     nom_columna,
                                     val_columna
                                FROM (SELECT c2000000.*
                                        FROM c2000000
                                       INNER JOIN c_num_coti
                                          ON c2000000.num_cotizacion =
                                             c_num_coti.num_cotizacion
                                       WHERE cod_cia = p_cod_cia
                                         AND cod_ramo = p_cod_ramo
                                         AND ((val_columna LIKE
                                             NVL('%' || l_nom_tercero || '%',
                                                   val_columna) AND
                                             nom_columna = 'NOM_TERCERO_ASEG') OR
                                             nom_columna = 'TIP_SITU_COTI_GRP' OR
                                             nom_columna = 'TIP_DOCUM_ASEG'    OR
                                             nom_columna = 'COD_DOCUM_ASEG'    OR
                                             nom_columna = 'NUM_PASO_ACTUAL'   OR
                                             nom_columna = 'TIP_PRODUCTO'      OR
                                             nom_columna = 'NUM_DIAS_VALIDEZ'))  -- v5.35
                               ORDER BY num_cotizacion) PIVOT(MAX(val_columna) FOR nom_columna IN('TIP_DOCUM_ASEG' AS
                                                                                                  tip_docum,
                                                                                                  'COD_DOCUM_ASEG' AS
                                                                                                  cod_docum,
                                                                                                  'NOM_TERCERO_ASEG' AS
                                                                                                  nom_tercero,
                                                                                                  'NUM_PASO_ACTUAL' AS
                                                                                                  num_paso_actual,
                                                                                                  'TIP_PRODUCTO' AS
                                                                                                  tip_producto,
                                                                                                  'TIP_SITU_COTI_GRP' AS
                                                                                                  tip_situ,
                                                                                                  'NUM_DIAS_VALIDEZ' AS        -- v5.35
                                                                                                  num_dias_validez))) c_filtro -- v5.35
               WHERE NVL(c_filtro.tip_docum, 'ZZ') =
                     NVL(NULL, NVL(c_filtro.tip_docum, 'ZZ'))
                 AND NVL(c_filtro.cod_docum, '-1') =
                     NVL(NULL, NVL(c_filtro.cod_docum, '-1'))
                 AND NVL(c_filtro.nom_tercero, 'ZZ') LIKE
                     '%' || l_nom_tercero || '%'
                 AND ((l_cod_situacion IS NOT NULL AND
                      NVL(c_filtro.tip_situ, '-99') = l_cod_situacion) OR
                      (l_cod_situacion IS NULL))
                 AND ((l_tip_produto IS NOT NULL AND
                      NVL(c_filtro.tip_producto, '-99') = l_tip_produto) OR
                      (l_tip_produto IS NULL)))
            --
            SELECT DISTINCT c_c2000000.num_cotizacion num_cotizacion_grupo, --v 3.02
                   c_c2000000.nom_tercero nom_tercero,
                   c_c2000000.cod_docum cod_docum,
                   NVL(c_c2000000.num_paso_actual, '1') num_paso_actual,
                   c2009030_vcr.cod_agt cod_agt,
                   TO_CHAR(c2009030_vcr.fec_emision, 'DDMMYYYY hh24:mi:ss') fec_emision,--v 3.21
                   --c2009030_vcr.fec_emision fec_emision,
                   CASE
                     WHEN NVL(TO_NUMBER(c_c2000000.num_paso_actual), 1) BETWEEN 1 AND 5 THEN
                      '0'
                     ELSE
                      '1'
                   END mca_calculado,
                   (CASE
                     WHEN NVL(TO_NUMBER(c_c2000000.num_paso_actual), 1) BETWEEN 1 AND 5
                       AND c_c2000000.tip_situ IN (4,13,15) --v4.01
                      THEN
                         --
                         (SELECT INITCAP (b.val_columna)
                            FROM c2000000 b
                            WHERE b.cod_cia        = p_cod_cia
                              AND b.cod_ramo       = p_cod_ramo
                              AND b.nom_columna    = 'TXT_STATUS_MCC'
                              AND b.num_cotizacion = c_c2000000.num_cotizacion)
                      --
                       WHEN NVL(TO_NUMBER(c_c2000000.num_paso_actual), 1) BETWEEN 1 AND 5
                       THEN
                         --
                         (SELECT INITCAP (g.nom_valor)
                            FROM g2990006 g
                           WHERE g.cod_cia   = p_cod_cia
                             AND g.cod_ramo  = p_cod_ramo
                             AND g.cod_valor = c_c2000000.tip_situ
                             AND g.cod_campo = 'TIP_SITU_COTI_GRP')
                         --
                      ELSE
                        'Proposta'
                     END
                     ) nom_nivel_cotacao,
                   TO_CHAR(SYSDATE, 'DDMMYYYY hh24:mi:ss') fec_envio, ----v 3.21
                   NVL(c_c2000000.tip_producto, c_c2000000.cod_ramo) tip_producto,
                   c_c2000000.cod_ramo cod_ramo,
                   0 as TOT_REGISTRO,
                   1 as num_simulacion -- 2.55
                   ,NULL as tip_renov  -- 4.81
                   ,NVL(c_c2000000.num_dias_validez, l_num_dias_vigencia) AS num_dias_validez  -- v5.51
              FROM c_c2000000
              INNER JOIN  c2009030_vcr
                            ON c2009030_vcr.num_poliza_grupo = c_c2000000.num_cotizacion
               AND c2009030_vcr.cod_cia = c_c2000000.cod_cia
               AND c2009030_vcr.cod_ramo = c_c2000000.cod_ramo
             WHERE c2009030_vcr.num_cotizacion IN (SELECT MAX (c2009030_vcr.num_cotizacion) num_cotizacion FROM c_c2000000
                                               INNER JOIN c2009030_vcr
                                                       ON c2009030_vcr.num_poliza_grupo = c_c2000000.num_cotizacion
                                                      AND c2009030_vcr.cod_cia = c_c2000000.cod_cia
                                                      AND c2009030_vcr.cod_ramo = c_c2000000.cod_ramo
                                                    WHERE c_c2000000.num_cotizacion <> '9999999999999'
                                                 GROUP BY c2009030_vcr.num_poliza_grupo) -- v 3.50
                     AND((c_c2000000.tip_situ='1'  AND trunc(c2009030_vcr.fec_emision) BETWEEN trunc(SYSDATE - 90)  AND trunc(SYSDATE))
                      OR(c_c2000000.tip_situ='11' AND trunc(c2009030_vcr.fec_emision) BETWEEN trunc(SYSDATE - 366) AND trunc(SYSDATE))
                      OR(c_c2000000.tip_situ='13' AND trunc(c2009030_vcr.fec_emision) BETWEEN trunc(SYSDATE - 90)  AND trunc(SYSDATE))
                      OR(c_c2000000.tip_situ='12' AND trunc(c2009030_vcr.fec_emision) BETWEEN trunc(SYSDATE - 90)  AND trunc(SYSDATE))
                      OR(c_c2000000.tip_situ='7'  AND trunc(c2009030_vcr.fec_emision) BETWEEN trunc(SYSDATE - 90)  AND trunc(SYSDATE))
                      OR(c_c2000000.tip_situ='14' AND trunc(c2009030_vcr.fec_emision) BETWEEN trunc(SYSDATE - 30)  AND trunc(SYSDATE))
                      OR(c_c2000000.tip_situ='15' AND trunc(c2009030_vcr.fec_emision) BETWEEN trunc(SYSDATE - 30)  AND trunc(SYSDATE))
                      OR(c_c2000000.tip_situ='2'  AND trunc(c2009030_vcr.fec_emision) BETWEEN trunc(SYSDATE - 30)  AND trunc(SYSDATE)) --v 3.00
                      OR(c_c2000000.tip_situ='8'  AND trunc(c2009030_vcr.fec_emision) BETWEEN trunc(SYSDATE - 30)  AND trunc(SYSDATE)) --v 3.00
                      OR(c_c2000000.tip_situ='9'  AND trunc(c2009030_vcr.fec_emision) BETWEEN trunc(SYSDATE - 30)  AND trunc(SYSDATE)) --v 3.00
                      OR(c_c2000000.tip_situ<>'1'
                         AND c_c2000000.tip_situ<>'11'
                         AND c_c2000000.tip_situ<>'2' --v 3.03
                         AND c_c2000000.tip_situ<>'8' --v 3.03
                         AND c_c2000000.tip_situ<>'9' --v 3.03
                         AND c_c2000000.tip_situ<>'13'
                         AND c_c2000000.tip_situ<>'12'
                         AND c_c2000000.tip_situ<>'7'
                         AND c_c2000000.tip_situ<>'14'
                         AND c_c2000000.tip_situ<>'15')
                     )
              AND c2009030_vcr.cod_agt = p_cod_agt;--v 2.96
          --
        ELSIF l_tip_docum IS NOT NULL AND l_cod_docum IS NOT NULL AND
              l_num_cotizacion_grupo IS NULL --Busqueda por documento --v 2.96
         THEN
           --
           BEGIN --v 3.04
              l_cod_docum_aux :=  to_char(to_number(l_cod_docum)); --v 3.04
           EXCEPTION
              WHEN OTHERS THEN
                 l_cod_docum_aux := l_cod_docum; --v 3.04
           END;
           --
          OPEN l_retorno FOR --v 2.991
           WITH c_c2000000 AS
             (SELECT c_filtro.*
                FROM (SELECT *
                        FROM (SELECT cod_cia,
                                     cod_ramo,
                                     num_cotizacion,
                                     nom_columna,
                                     val_columna
                                FROM (SELECT c2000000.*
                                        FROM c2000000
                                       WHERE cod_cia = p_cod_cia
                                         AND cod_ramo = p_cod_ramo
                                         AND ((val_columna LIKE
                                             NVL('%' || l_nom_tercero || '%',
                                                   val_columna) AND
                                             nom_columna = 'NOM_TERCERO_ASEG') OR
                                             (val_columna LIKE
                                             NVL('%' || l_nom_tercero || '%',
                                                   val_columna) AND
                                             nom_columna = 'NOM_TERCERO_TOMA') OR--v 3.15
                                             nom_columna = 'TIP_SITU_COTI_GRP' OR
                                             nom_columna = 'TIP_DOCUM_ASEG'    OR
                                             nom_columna = 'COD_DOCUM_ASEG'    OR
                                             nom_columna = 'NUM_PASO_ACTUAL'   OR
                                             nom_columna = 'TIP_PRODUCTO'      OR
                                             nom_columna = 'NUM_DIAS_VALIDEZ'))  -- v5.35
                               ORDER BY num_cotizacion) PIVOT(MAX(val_columna) FOR nom_columna IN('TIP_DOCUM_ASEG' AS
                                                                                                  tip_docum,
                                                                                                  'COD_DOCUM_ASEG' AS
                                                                                                  cod_docum,
                                                                                                  'NOM_TERCERO_ASEG' AS
                                                                                                  nom_tercero,
                                                                                                  'NOM_TERCERO_TOMA' AS--v 3.15
                                                                                                  nom_tercero_toma,--v 3.15
                                                                                                  'NUM_PASO_ACTUAL' AS
                                                                                                  num_paso_actual,
                                                                                                  'TIP_PRODUCTO' AS
                                                                                                  tip_producto,
                                                                                                  'TIP_SITU_COTI_GRP' AS
                                                                                                  tip_situ,
                                                                                                  'NUM_DIAS_VALIDEZ' AS        -- v5.35
                                                                                                  num_dias_validez))) c_filtro -- v5.35
               WHERE NVL(c_filtro.tip_docum, 'ZZ') =
                     NVL(NULL, NVL(c_filtro.tip_docum, 'ZZ'))
                 AND NVL(c_filtro.cod_docum, '-1') =
                     NVL(NULL, NVL(c_filtro.cod_docum, '-1'))
                 AND NVL(c_filtro.nom_tercero, 'ZZ') LIKE
                     '%' || l_nom_tercero || '%'
                 AND ((l_cod_situacion IS NOT NULL AND
                      NVL(c_filtro.tip_situ, '-99') = l_cod_situacion) OR
                      (l_cod_situacion IS NULL))
                 AND ((l_tip_produto IS NOT NULL AND
                      NVL(c_filtro.tip_producto, '-99') = l_tip_produto) OR
                      (l_tip_produto IS NULL))
                 AND ((l_cod_docum_aux IS NOT NULL AND --v 3.04
                      NVL(c_filtro.cod_docum, '-99') = l_cod_docum_aux) OR --v 3.04
                      (l_cod_docum_aux IS NULL)) --v 3.04
                 AND ((l_tip_docum IS NOT NULL AND
                      NVL(c_filtro.tip_docum, '-99') = l_tip_docum) OR
                      (l_tip_docum IS NULL)))
            SELECT DISTINCT c_c2000000.num_cotizacion num_cotizacion_grupo, --v 3.02
                     CASE
                     WHEN c_c2000000.nom_tercero IS NOT NULL THEN
                      c_c2000000.nom_tercero
                     ELSE
                      c_c2000000.nom_tercero_toma
                   END nom_tercero, --v 3.15
                   --c_c2000000.nom_tercero nom_tercero,
                   c_c2000000.cod_docum cod_docum,
                   NVL(c_c2000000.num_paso_actual, '1') num_paso_actual,
                   c2009030_vcr.cod_agt cod_agt,
                   TO_CHAR(c2009030_vcr.fec_emision, 'DDMMYYYY hh24:mi:ss') fec_emision,----v 3.21
                   CASE
                     WHEN NVL(TO_NUMBER(c_c2000000.num_paso_actual), 1) BETWEEN 1 AND 5 THEN
                      '0'
                     ELSE
                      '1'
                   END mca_calculado,
                            (CASE
                              WHEN NVL(TO_NUMBER(c_c2000000.num_paso_actual),1) BETWEEN 1 AND 5
                                     AND c_c2000000.tip_situ IN (4,13,15)--v4.01
                       THEN
                         --
                         (SELECT INITCAP (b.val_columna)
                            FROM c2000000 b
                            WHERE b.cod_cia        = p_cod_cia
                              AND b.cod_ramo       = p_cod_ramo
                              AND b.nom_columna    = 'TXT_STATUS_MCC'
                              AND b.num_cotizacion = c_c2000000.num_cotizacion)
                         --
                       WHEN NVL(TO_NUMBER(c_c2000000.num_paso_actual), 1) BETWEEN 1 AND 5
                      THEN
                         --
                         (SELECT INITCAP (g.nom_valor)
                           FROM g2990006 g
                          WHERE g.cod_cia   = p_cod_cia
                            AND g.cod_ramo  = p_cod_ramo
                            AND g.cod_valor = c_c2000000.tip_situ
                            AND g.cod_campo = 'TIP_SITU_COTI_GRP')
                          --
                      ELSE
                        'Proposta'
                     END
                     )nom_nivel_cotacao,
                   TO_CHAR(SYSDATE, 'DDMMYYYY hh24:mi:ss') fec_envio,----v 3.21
                   NVL(c_c2000000.tip_producto, c_c2000000.cod_ramo) tip_producto,
                   c_c2000000.cod_ramo cod_ramo,
                   0 as TOT_REGISTRO,
                   1 as num_simulacion -- 2.55
                   ,NULL as tip_renov  -- 4.81
                   ,NVL(c_c2000000.num_dias_validez, l_num_dias_vigencia) AS num_dias_validez  -- v5.51
              FROM c_c2000000
             INNER JOIN c2009030_vcr
                ON c2009030_vcr.num_poliza_grupo =
                   c_c2000000.num_cotizacion
               AND c2009030_vcr.cod_cia = c_c2000000.cod_cia
               AND c2009030_vcr.cod_ramo = c_c2000000.cod_ramo
             WHERE c_c2000000.num_cotizacion <> '9999999999999'
               AND c2009030_vcr.cod_agt = p_cod_agt;
          --
          --
        ELSIF l_nom_tercero IS NOT NULL AND l_num_cotizacion_grupo IS NULL --Busqueda por nom_tercero --v 2.96
         THEN
          OPEN l_retorno FOR
            WITH c_num_coti AS
             (SELECT NUM_COTIZACION
                FROM C2000000
               WHERE COD_CIA = p_cod_cia
                 AND COD_RAMO = p_cod_ramo
                 AND NOM_COLUMNA = 'NOM_TERCERO_ASEG'
                 AND VAL_COLUMNA LIKE '%' || l_nom_tercero || '%'),
            c_c2000000 AS
             (SELECT c_filtro.*
                FROM (SELECT *
                        FROM (SELECT cod_cia,
                                     cod_ramo,
                                     num_cotizacion,
                                     nom_columna,
                                     val_columna
                                FROM (SELECT c2000000.*
                                        FROM c2000000
                                       INNER JOIN c_num_coti
                                          ON c2000000.num_cotizacion =
                                             c_num_coti.num_cotizacion
                                       WHERE cod_cia = p_cod_cia
                                         AND cod_ramo = p_cod_ramo
                                         AND ((val_columna LIKE
                                             NVL('%' || l_nom_tercero || '%',
                                                   val_columna) AND
                                             nom_columna = 'NOM_TERCERO_ASEG') OR
                                             nom_columna = 'TIP_SITU_COTI_GRP' OR
                                             nom_columna = 'TIP_DOCUM_ASEG'    OR
                                             nom_columna = 'COD_DOCUM_ASEG'    OR
                                             nom_columna = 'NUM_PASO_ACTUAL'   OR
                                             nom_columna = 'TIP_PRODUCTO'      OR
                                             nom_columna = 'NUM_DIAS_VALIDEZ'))  -- v5.35
                               ORDER BY num_cotizacion) PIVOT(MAX(val_columna) FOR nom_columna IN('TIP_DOCUM_ASEG' AS
                                                                                                  tip_docum,
                                                                                                  'COD_DOCUM_ASEG' AS
                                                                                                  cod_docum,
                                                                                                  'NOM_TERCERO_ASEG' AS
                                                                                                  nom_tercero,
                                                                                                  'NUM_PASO_ACTUAL' AS
                                                                                                  num_paso_actual,
                                                                                                  'TIP_PRODUCTO' AS
                                                                                                  tip_producto,
                                                                                                  'TIP_SITU_COTI_GRP' AS
                                                                                                  tip_situ,
                                                                                                  'NUM_DIAS_VALIDEZ' AS        -- v5.35
                                                                                                  num_dias_validez))) c_filtro -- v5.35
               WHERE NVL(c_filtro.tip_docum, 'ZZ') =
                     NVL(NULL, NVL(c_filtro.tip_docum, 'ZZ'))
                 AND NVL(c_filtro.cod_docum, '-1') =
                     NVL(NULL, NVL(c_filtro.cod_docum, '-1'))
                 AND NVL(c_filtro.nom_tercero, 'ZZ') LIKE
                     '%' || l_nom_tercero || '%'
                 AND ((l_cod_situacion IS NOT NULL AND
                      NVL(c_filtro.tip_situ, '-99') = l_cod_situacion) OR
                      (l_cod_situacion IS NULL))
                 AND ((l_tip_produto IS NOT NULL AND
                      NVL(c_filtro.tip_producto, '-99') = l_tip_produto) OR
                      (l_tip_produto IS NULL)))
            SELECT DISTINCT c_c2000000.num_cotizacion num_cotizacion_grupo, --v 3.02
                   c_c2000000.nom_tercero nom_tercero,
                   c_c2000000.cod_docum cod_docum,
                   NVL(c_c2000000.num_paso_actual, '1') num_paso_actual,
                   c2009030_vcr.cod_agt cod_agt,
                   TO_CHAR(c2009030_vcr.fec_emision, 'DDMMYYYY hh24:mi:ss') fec_emision,----v 3.21
                   CASE
                     WHEN NVL(TO_NUMBER(c_c2000000.num_paso_actual), 1) BETWEEN 1 AND 5 THEN
                      '0'
                     ELSE
                      '1'
                   END mca_calculado,
                            (CASE
                              WHEN NVL(TO_NUMBER(c_c2000000.num_paso_actual),1) BETWEEN 1 AND 5
                              AND c_c2000000.tip_situ IN (4,13,15) --v4.01
                        THEN
                         --
                         (SELECT INITCAP (b.val_columna)
                            FROM c2000000 b
                            WHERE b.cod_cia        = p_cod_cia
                              AND b.cod_ramo       = p_cod_ramo
                              AND b.nom_columna    = 'TXT_STATUS_MCC'
                              AND b.num_cotizacion = c_c2000000.num_cotizacion)
                      --
                              WHEN NVL(TO_NUMBER(c_c2000000.num_paso_actual), 1) BETWEEN 1 AND 5
                      THEN
                         --
                         (SELECT INITCAP (g.nom_valor)
                           FROM g2990006 g
                          WHERE g.cod_cia   = p_cod_cia
                            AND g.cod_ramo  = p_cod_ramo
                            AND g.cod_valor = c_c2000000.tip_situ
                            AND g.cod_campo = 'TIP_SITU_COTI_GRP')
                         --
                      ELSE
                        'Proposta'
                     END
                     ) nom_nivel_cotacao,
                   TO_CHAR(SYSDATE, 'DDMMYYYY hh24:mi:ss') fec_envio,--v 3.21
                   NVL(c_c2000000.tip_producto, c_c2000000.cod_ramo) tip_producto,
                   c_c2000000.cod_ramo cod_ramo,
                   0 as TOT_REGISTRO,
                   1 as num_simulacion -- 2.55
                   ,NULL as tip_renov  -- 4.81
                   ,NVL(c_c2000000.num_dias_validez, l_num_dias_vigencia) AS num_dias_validez  -- v5.51
              FROM c_c2000000
             INNER JOIN c2009030_vcr
                ON c2009030_vcr.num_poliza_grupo =
                   c_c2000000.num_cotizacion
               AND c2009030_vcr.cod_cia = c_c2000000.cod_cia
               AND c2009030_vcr.cod_ramo = c_c2000000.cod_ramo
             WHERE c_c2000000.num_cotizacion <> '9999999999999'
               AND c2009030_vcr.cod_agt = p_cod_agt;--v 2.96
          --
        ELSE
          --v 2.96
          --
          OPEN l_comprobar_coti FOR
            SELECT c_filtro.*
              FROM (SELECT *
                      FROM (SELECT cod_cia,
                                   cod_ramo,
                                   num_cotizacion,
                                   nom_columna,
                                   val_columna
                              FROM (SELECT *
                                      FROM c2000000
                                     WHERE cod_cia = p_cod_cia
                                       AND cod_ramo = p_cod_ramo
                                       AND num_cotizacion =
                                           NVL(l_num_cotizacion_grupo,
                                               num_cotizacion)
                                       AND ((val_columna LIKE
                                           NVL('%' || l_nom_tercero || '%',
                                                 val_columna) AND
                                           nom_columna = 'NOM_TERCERO_ASEG') OR
                                           nom_columna = 'TIP_SITU_COTI_GRP' OR
                                           nom_columna = 'TIP_DOCUM_ASEG'    OR
                                           nom_columna = 'COD_DOCUM_ASEG'    OR
                                           nom_columna = 'NUM_PASO_ACTUAL'   OR
                                           nom_columna = 'TIP_PRODUCTO'      OR
                                           nom_columna = 'NUM_DIAS_VALIDEZ')) -- v5.35
                             ORDER BY num_cotizacion) PIVOT(MAX(val_columna) FOR nom_columna IN('TIP_DOCUM_ASEG' AS
                                                                                                tip_docum,
                                                                                                'COD_DOCUM_ASEG' AS
                                                                                                cod_docum,
                                                                                                'NOM_TERCERO_ASEG' AS
                                                                                                nom_tercero,
                                                                                                'NUM_PASO_ACTUAL' AS
                                                                                                num_paso_actual,
                                                                                                'TIP_PRODUCTO' AS
                                                                                                tip_producto,
                                                                                                'TIP_SITU_COTI_GRP' AS
                                                                                                tip_situ,
                                                                                                'NUM_DIAS_VALIDEZ' AS         -- v5.35
                                                                                                num_dias_validez))) c_filtro -- v5.35
             WHERE NVL(c_filtro.tip_docum, 'ZZ') =
                   NVL(NULL, NVL(c_filtro.tip_docum, 'ZZ'))
               AND NVL(c_filtro.cod_docum, '-1') =
                   NVL(NULL, NVL(c_filtro.cod_docum, '-1'))
               AND NVL(c_filtro.nom_tercero, 'ZZ') LIKE
                   '%' || l_nom_tercero || '%'
               AND ((l_cod_situacion IS NOT NULL AND
                    NVL(c_filtro.tip_situ, '-99') = l_cod_situacion) OR
                    (l_cod_situacion IS NULL))
               AND ((l_tip_produto IS NOT NULL AND
                    NVL(c_filtro.tip_producto, '-99') = l_tip_produto) OR
                    (l_tip_produto IS NULL));
          --amarco{
          FETCH l_comprobar_coti
            INTO l_lista_aux;--v 2.96
          --
          l_num_paso_compr      := l_lista_aux.num_paso;
          l_nom_tercero_compr   := l_lista_aux.nom_tercero;
          l_tip_docum_compr     := l_lista_aux.tip_docum;
          l_cod_docum_compr     := l_lista_aux.cod_docum;
          l_cod_situacion_compr := l_lista_aux.tip_situ;
          l_tip_produto_compr   := l_lista_aux.tip_produto;
          --
          IF lc_existe_9030%ISOPEN THEN
            --
            CLOSE lc_existe_9030;
            --
          END IF;
          --
          OPEN lc_existe_9030(pc_cod_cia              => p_cod_cia,
                              pc_cod_ramo             => p_cod_ramo,
                              pc_num_cotizacion_grupo => p_num_cotizacion_grupo);
          FETCH lc_existe_9030
            INTO l_existe_9030;
          CLOSE lc_existe_9030;
          --
          IF (l_nom_tercero_compr IS NULL AND l_tip_docum_compr IS NULL AND
             l_cod_docum_compr IS NULL AND l_cod_situacion_compr IS NULL AND
             l_num_paso_compr IS NULL AND l_tip_produto_compr IS NULL) OR
             l_existe_9030 <= trn.CERO
          --}amarco
           THEN
            --
            OPEN l_retorno FOR
              WITH c_c2000000 AS
               (SELECT c_filtro.*
                  FROM (SELECT *
                          FROM (SELECT cod_cia,
                                       cod_ramo,
                                       num_cotizacion,
                                       nom_columna,
                                       val_columna
                                  FROM (SELECT *
                                          FROM c2000000
                                         WHERE cod_cia = p_cod_cia
                                           AND cod_ramo = p_cod_ramo
                                              --AND num_cotizacion = NVL(l_num_cotizacion_grupo, num_cotizacion)
                                           AND (num_cotizacion =
                                               NVL(l_num_cotizacion_grupo,
                                                    num_cotizacion) OR
                                               (val_columna LIKE
                                               NVL('%' || l_nom_tercero || '%',
                                                     val_columna) AND
                                               nom_columna =
                                               'NOM_TERCERO_ASEG') OR
                                               nom_columna =
                                               'TIP_SITU_COTI_GRP' OR
                                               nom_columna = 'TIP_DOCUM_ASEG'  OR
                                               nom_columna = 'COD_DOCUM_ASEG'  OR
                                               nom_columna = 'NUM_PASO_ACTUAL' OR
                                               nom_columna = 'TIP_PRODUCTO'    OR
                                               nom_columna = 'NUM_DIAS_VALIDEZ')) -- v5.35
                                 ORDER BY num_cotizacion) PIVOT(MAX(val_columna) FOR nom_columna IN('TIP_DOCUM_ASEG' AS
                                                                                                    tip_docum,
                                                                                                    'COD_DOCUM_ASEG' AS
                                                                                                    cod_docum,
                                                                                                    'NOM_TERCERO_ASEG' AS
                                                                                                    nom_tercero,
                                                                                                    'NUM_PASO_ACTUAL' AS
                                                                                                    num_paso_actual,
                                                                                                    'TIP_PRODUCTO' AS
                                                                                                    tip_producto,
                                                                                                    'TIP_SITU_COTI_GRP' AS
                                                                                                    tip_situ,
                                                                                                    'NUM_DIAS_VALIDEZ' AS  -- v5.35
                                                                                                    num_dias_validez))     -- v5.35
                         WHERE num_cotizacion =
                               NVL(l_num_cotizacion_grupo, num_cotizacion)) c_filtro
                 WHERE NVL(c_filtro.tip_docum, 'ZZ') =
                       NVL(NULL, NVL(c_filtro.tip_docum, 'ZZ'))
                   AND NVL(c_filtro.cod_docum, '-1') =
                       NVL(NULL, NVL(c_filtro.cod_docum, '-1'))
                   AND NVL(c_filtro.nom_tercero, 'ZZ') LIKE
                       '%' || l_nom_tercero || '%'
                   AND ((l_cod_situacion IS NOT NULL AND
                        NVL(c_filtro.tip_situ, '-99') = l_cod_situacion) OR
                        (l_cod_situacion IS NULL))
                   AND ((l_tip_produto IS NOT NULL AND
                        NVL(c_filtro.tip_producto, '-99') = l_tip_produto) OR
                        (l_tip_produto IS NULL)))
              SELECT c_c2000000.num_cotizacion num_cotizacion_grupo,
                     c_c2000000.nom_tercero nom_tercero,
                     c_c2000000.cod_docum cod_docum,
                     NVL(c_c2000000.num_paso_actual, '1') num_paso_actual,
                     p_cod_agt cod_agt,
                     TO_CHAR(SYSDATE, 'DDMMYYYY hh24:mi:ss') fec_emision,--v 3.21
                     CASE
                       WHEN NVL(TO_NUMBER(c_c2000000.num_paso_actual), 1) BETWEEN 1 AND 5 THEN
                        '0'
                       ELSE
                        '1'
                     END mca_calculado,
                     (CASE
                       WHEN NVL(TO_NUMBER(c_c2000000.num_paso_actual), 1) BETWEEN 1 AND 5
                       AND c_c2000000.tip_situ IN (4,13,15) --v4.01
                        THEN
                          --
                         (SELECT INITCAP (b.val_columna)
                            FROM c2000000 b
                            WHERE b.cod_cia        = p_cod_cia
                              AND b.cod_ramo       = p_cod_ramo
                              AND b.nom_columna    = 'TXT_STATUS_MCC'
                              AND b.num_cotizacion = c_c2000000.num_cotizacion)
                      --
                       WHEN NVL(TO_NUMBER(c_c2000000.num_paso_actual), 1) BETWEEN 1 AND 5
                      THEN
                         --
                         (SELECT INITCAP (g.nom_valor)
                           FROM g2990006 g
                          WHERE g.cod_cia   = p_cod_cia
                            AND g.cod_ramo  = p_cod_ramo
                            AND g.cod_valor = c_c2000000.tip_situ
                            AND g.cod_campo = 'TIP_SITU_COTI_GRP')

                       ELSE
                        'Proposta'
                     END )nom_nivel_cotacao,
                     TO_CHAR(SYSDATE, 'DDMMYYYY hh24:mi:ss') fec_envio, --v 3.12
                     NVL(c_c2000000.tip_producto, c_c2000000.cod_ramo) tip_producto,
                     c_c2000000.cod_ramo cod_ramo,
                     0 as TOT_REGISTRO,
                     1 as num_simulacion -- 2.55
                     ,NULL as tip_renov  -- 4.81
                     ,NVL(c_c2000000.num_dias_validez, l_num_dias_vigencia) AS num_dias_validez  -- v5.51
                FROM c_c2000000
               WHERE c_c2000000.num_cotizacion <> '9999999999999';
          ELSE
            --
            OPEN l_retorno FOR
              WITH c_c2000000 AS
               (SELECT c_filtro.*
                  FROM (SELECT *
                          FROM (SELECT cod_cia,
                                       cod_ramo,
                                       num_cotizacion,
                                       nom_columna,
                                       val_columna
                                  FROM (SELECT *
                                          FROM c2000000
                                         WHERE cod_cia = p_cod_cia
                                           AND cod_ramo = p_cod_ramo
                                           AND num_cotizacion =
                                               NVL(l_num_cotizacion_grupo,
                                                   num_cotizacion)
                                           AND ((val_columna LIKE
                                               NVL('%' || l_nom_tercero || '%',
                                                     val_columna) AND
                                               nom_columna =
                                               'NOM_TERCERO_ASEG') OR
                                                (val_columna LIKE
                                               NVL('%' || l_nom_tercero || '%',
                                                   val_columna) AND
                                               nom_columna = 'NOM_TERCERO_TOMA') OR --v 3.15
                                               nom_columna = 'TIP_SITU_COTI_GRP' OR
                                               nom_columna = 'TIP_DOCUM_ASEG'    OR
                                               nom_columna = 'COD_DOCUM_ASEG'    OR
                                               nom_columna = 'NUM_PASO_ACTUAL'   OR
                                               nom_columna = 'TIP_PRODUCTO'      OR
                                               nom_columna = 'NUM_DIAS_VALIDEZ')) -- v5.35
                                 ORDER BY num_cotizacion) PIVOT(MAX(val_columna) FOR nom_columna IN('TIP_DOCUM_ASEG' AS
                                                                                                    tip_docum,
                                                                                                    'COD_DOCUM_ASEG' AS
                                                                                                    cod_docum,
                                                                                                    'NOM_TERCERO_ASEG' AS
                                                                                                    nom_tercero,
                                                                                                    'NOM_TERCERO_TOMA' AS
                                                                                                    nom_tercero_toma, --v 3.15
                                                                                                    'NUM_PASO_ACTUAL' AS
                                                                                                    num_paso_actual,
                                                                                                    'TIP_PRODUCTO' AS
                                                                                                    tip_producto,
                                                                                                    'TIP_SITU_COTI_GRP' AS
                                                                                                    tip_situ,
                                                                                                    'NUM_DIAS_VALIDEZ' AS         -- v5.35
                                                                                                    num_dias_validez))) c_filtro  -- v5.35
                 WHERE NVL(c_filtro.tip_docum, 'ZZ') =
                       NVL(NULL, NVL(c_filtro.tip_docum, 'ZZ'))
                   AND NVL(c_filtro.cod_docum, '-1') =
                       NVL(NULL, NVL(c_filtro.cod_docum, '-1'))
                   AND NVL(c_filtro.nom_tercero, 'ZZ') LIKE
                       '%' || l_nom_tercero || '%'
                   AND ((l_cod_situacion IS NOT NULL AND
                        NVL(c_filtro.tip_situ, '-99') = l_cod_situacion) OR
                        (l_cod_situacion IS NULL))
                   AND ((l_tip_produto IS NOT NULL AND
                        NVL(c_filtro.tip_producto, '-99') = l_tip_produto) OR
                        (l_tip_produto IS NULL)))
              SELECT c_c2000000.num_cotizacion num_cotizacion_grupo,
                      CASE
                     WHEN c_c2000000.nom_tercero IS NOT NULL THEN
                      c_c2000000.nom_tercero
                     ELSE
                      c_c2000000.nom_tercero_toma
                     END nom_tercero, --v 3.15
                     --c_c2000000.nom_tercero nom_tercero,
                     c_c2000000.cod_docum cod_docum,
                     NVL(c_c2000000.num_paso_actual, '1') num_paso_actual,
                     c2009030_vcr.cod_agt cod_agt,
                     TO_CHAR(fec_emision, 'DDMMYYYY hh24:mi:ss') fec_emision,--v 3.21
                     CASE
                       WHEN NVL(TO_NUMBER(c_c2000000.num_paso_actual), 1) BETWEEN 1 AND 5 THEN
                        '0'
                       ELSE
                        '1'
                     END mca_calculado,
                     (CASE
                       WHEN NVL(TO_NUMBER(c_c2000000.num_paso_actual), 1) BETWEEN 1 AND 5
                          AND c_c2000000.tip_situ IN (4,13,15)  --v4.01
                      THEN
                         --
                         (SELECT INITCAP (b.val_columna)
                            FROM c2000000 b
                            WHERE b.cod_cia        = p_cod_cia
                              AND b.cod_ramo       = p_cod_ramo
                              AND b.nom_columna    = 'TXT_STATUS_MCC'
                              AND b.num_cotizacion = c_c2000000.num_cotizacion)
                      --
                       WHEN NVL(TO_NUMBER(c_c2000000.num_paso_actual), 1) BETWEEN 1 AND 5
                      THEN
                         --
                         (SELECT INITCAP (g.nom_valor)
                           FROM g2990006 g
                          WHERE g.cod_cia   = p_cod_cia
                            AND g.cod_ramo  = p_cod_ramo
                            AND g.cod_valor = c_c2000000.tip_situ
                            AND g.cod_campo = 'TIP_SITU_COTI_GRP')

                      ELSE
                        'Proposta'
                     END
                     ) nom_nivel_cotacao,
                     TO_CHAR(SYSDATE, 'DDMMYYYY hh24:mi:ss') fec_envio, --v 3.12
                     NVL(c_c2000000.tip_producto, c_c2000000.cod_ramo) tip_producto,
                     c_c2000000.cod_ramo cod_ramo,
                     0 as TOT_REGISTRO,
                     1 as num_simulacion -- 2.55
                     ,NVL(c_c2000000.num_dias_validez, l_num_dias_vigencia) AS num_dias_validez -- v5.51
                FROM c_c2000000
               INNER JOIN c2009030_vcr
                  ON c2009030_vcr.num_poliza_grupo =
                     c_c2000000.num_cotizacion
                 AND c2009030_vcr.cod_cia = c_c2000000.cod_cia
                 AND c2009030_vcr.cod_ramo = c_c2000000.cod_ramo
               WHERE c_c2000000.num_cotizacion <> '9999999999999'
                 AND c2009030_vcr.num_poliza_grupo != c2009030_vcr.num_cotizacion
                 AND c2009030_vcr.cod_agt = p_cod_agt
                 AND ROWNUM = 1;--v 2.96
            -- }amarco
            g_flag_coti := 'TRUE';--v 2.96
          END IF;
        END IF;
      END IF;
      --
      --
      mx('g_flag_coti', g_flag_coti);--v 2.96
           --
      --
      IF l_retorno%ISOPEN THEN
      --
        p_gerar_xml_lista_campos_mcc(l_retorno, p_cod_cia, p_cod_ramo, p_xml); -- jwolff
      --
      END IF;
      --
           --
         --
        END IF; -- 1.51
        --
        mx('F', 'p_ws_consulta_cotacao_mcc');
        --
        EXCEPTION  -- 3.66 I
         WHEN OTHERS THEN
           --
           dbms_output.put_line(p_xml_in);
           dbms_output.put_line(SQLERRM);
           RAISE_APPLICATION_ERROR(-20001,'p_cod_cia='||p_cod_cia||' - p_cod_ramo='||
              p_cod_ramo||' - p_cod_agt='||p_cod_agt||' - p_num_cotizacion_grupo='||
              p_num_cotizacion_grupo||' - p_num_poliza_grupo='||p_num_poliza_grupo||' - p_num_contrato='||
              p_num_contrato||' - p_num_subcontrato='||p_num_subcontrato||' - p_tip_mvto_batch='||
              p_tip_mvto_batch||' - '||p_xml_in||' - '||SQLERRM); -- 3.66 F
           --
    END p_ws_consulta_cotacao_mcc;
    -- F 1.61
    --
    /* -----------------------------------------------------------
    || Retorna os Controles Tecnicos dos riscos da Apolice Grupo
    */ -----------------------------------------------------------
    --
    PROCEDURE p_ws_consulta_cts_riscos (p_cod_cia          IN a2000030.cod_cia%TYPE,
                                        p_cod_ramo         IN a2000030.cod_ramo%TYPE,
                                        p_cod_tarifa       IN G9999992.cod_tarifa%TYPE,
                                        p_cod_agt          IN a2000030.cod_agt%TYPE,
                                        p_num_cotizacion   IN C2009030_vcr.num_cotizacion%TYPE,
                                        p_num_poliza_grupo IN A2000500.num_poliza_grupo%TYPE,
                                        p_num_contrato     IN A2000500.num_contrato%TYPE,
                                        p_num_subcontrato  IN A2000500.num_contrato%TYPE,
                                        p_tip_mvto_batch   IN A2000500.tip_mvto_batch%TYPE,
                                        p_xml_in           IN CLOB,
                                        p_cursor_cts      OUT SYS_REFCURSOR)IS
    --
    BEGIN
      --
      trn_k_global.borra_todas;
      --
      mx('I', 'p_ws_consulta_cts_riscos');
      --
      OPEN p_cursor_cts
       FOR  SELECT a.num_poliza                               AS "numApolice",
                   '[' || a.cod_error ||'] '|| a.nom_error    AS "desControleTecnico",
                   a.cod_ano_fabr || '/' || a.anio_sub_modelo AS "anoModelo",
                   a.cod_categoria                            AS "desTipoUso",
                   a.cod_marca || ' - ' || a.cod_sub_modelo   AS "nomMarcaModelo",
                   a.num_matricula                            AS "desPlaca"
              FROM ( SELECT b.num_poliza,
                            c.cod_error,
                            c.nom_error,
                            d.cod_campo,
                            NVL(d.txt_campo,d.val_campo) AS val_campo
                       FROM p2000221 b,
                            g2000211 c,
                            p2000020 d
                      WHERE (b.cod_cia, b.num_poliza, b.num_spto, b.num_apli, b.num_spto_apli) IN (
                              SELECT cod_cia, num_poliza, num_spto, num_apli, num_spto_apli
                                 FROM p2000030 a
                                WHERE a.cod_cia          = p_cod_cia
                                  AND a.cod_ramo         = p_cod_ramo
                                  AND a.num_poliza_grupo = p_num_poliza_grupo)
                        AND c.cod_cia    = b.cod_cia
                        AND c.cod_error  = b.cod_error
                        AND c.cod_idioma = 'PT'
                        AND d.cod_cia    = b.cod_cia
                        AND d.num_poliza = b.num_poliza
                        AND d.num_spto   = b.num_spto
                        AND d.num_apli   = b.num_apli
                        AND d.num_spto_apli = b.num_spto_apli
                        AND d.cod_campo IN ('ANIO_SUB_MODELO'
                                           ,'COD_ANO_FABR'
                                           ,'COD_CATEGORIA'
                                           ,'COD_MARCA'
                                           ,'COD_SUB_MODELO'
                                           ,'COD_USO_VEHI'
                                           ,'NUM_MATRICULA'))
              PIVOT(MAX(val_campo) FOR cod_campo IN('ANIO_SUB_MODELO' AS ANIO_SUB_MODELO,
                                                    'COD_ANO_FABR'    AS COD_ANO_FABR,
                                                    'COD_CATEGORIA'   AS COD_CATEGORIA,
                                                    'COD_MARCA'       AS COD_MARCA,
                                                    'COD_SUB_MODELO'  AS COD_SUB_MODELO,
                                                    'COD_USO_VEHI'    AS COD_USO_VEHI,
                                                    'NUM_MATRICULA'   AS NUM_MATRICULA
                                                      )) a
              ORDER BY a.num_poliza;
      --
      trn_k_global.borra_todas;
      --
      mx('F', 'p_ws_consulta_cts_riscos');
      --
    END p_ws_consulta_cts_riscos;
 --
    PROCEDURE p_ws_csn_consultar(p_cod_cia          IN  G9999992.cod_cia%TYPE,
                                 p_cod_ramo         IN  G9999992.cod_ramo%TYPE,
                                 p_cod_tarifa       IN  G9999992.cod_tarifa%TYPE,
                                 p_cod_agt          IN  G9999992.cod_agt%TYPE,
                                 p_num_cotizacion   IN  C2009030_vcr.num_cotizacion%TYPE,
                                 p_num_poliza_grupo IN  A2000500.num_poliza_grupo%TYPE,
                                 p_num_contrato     IN  A2000500.num_contrato%TYPE,
                                 p_num_subcontrato  IN  A2000500.num_contrato%TYPE,
                                 p_tip_mvto_batch   IN  A2000500.tip_mvto_batch%TYPE,
                                 p_xml_in           IN  CLOB,
                                 p_xml              OUT CLOB)
    IS
      --
      l_tip_desconto                 c2000000.val_columna   %TYPE                ;
      l_consulta_csn                 BOOLEAN                      := FALSE       ;
      l_consulta_ok                  BOOLEAN                      := FALSE       ;
      l_status_ret                   VARCHAR2(5)                                 ;
      l_saldo_pontos                 VARCHAR2(50)                                ;
      l_saldo_reservado              VARCHAR2(50)                                ; --I 1.53
      l_temp                         VARCHAR2(50)                                ; --I 1.53
      l_retorno                      REF_CURSOR                                  ;
      --
      l_num_serie                    VARCHAR2(50)                                ; --I 1.53
      l_num_propuesta                A2000560.num_propuesta %TYPE                ; --i 1.53
      l_tip_mvto_batch               A2000500.tip_mvto_batch%TYPE                ; --I 1.53
      l_consulta_reserva_ok          BOOLEAN                      := FALSE       ; --I 1.53
      l_k_num_serie         CONSTANT VARCHAR(11)                  := 'NUM_SERIE' ;
      --
      l_num_max_spto                 a2000500.num_spto      %TYPE                ; --v2.07
      l_num_riesgo                   a2000500.num_riesgos   %TYPE                ; --v2.07
      l_eh_3_pacotes                 BOOLEAN                       := FALSE      ; -- 2.47
      l_tip_produto                  g2109142_vcr.tip_produto %TYPE              ; -- 2.47
      l_num_simulacion               c2000000.val_columna   %TYPE                ; -- 2.47
      --
      l_reg_a2009710                 a2009710_vcr%ROWTYPE; -- 4.52

      --
    BEGIN
      --
      mx('I', 'p_ws_csn_consultar');
      --
      g_num_paso       := trn_k_global.ref_f_global('NUM_PASO'); -- 4.52
      --
      l_tip_desconto := fp_recupera_valor (p_xml       => p_xml_in,
                                           p_cod_campo => 'TIP_DESCONTO');
      --
      --I 1.53
      l_tip_mvto_batch := NVL(p_tip_mvto_batch, g_k_tip_mvto_batch_cotacao);
      --
      trn_k_global.asigna('COD_USR',g_cod_usr_automatico);
      --
      trn_k_global.asigna('COD_CIA'       , p_cod_cia       );
      trn_k_global.asigna('COD_RAMO'      , p_cod_ramo      );
      trn_k_global.asigna('TIP_MVTO_BATCH', l_tip_mvto_batch);
      trn_k_global.asigna('COD_TARIFA'    , p_cod_tarifa    );
      trn_k_global.asigna('COD_AGT'       , p_cod_agt       );
      trn_k_global.asigna('COD_IDIOMA'    , g_k_cod_idioma  );
      trn_k_global.asigna('NUM_COTIZACION', p_num_cotizacion);
      trn_k_global.asigna('NUM_PROPUESTA' , p_num_cotizacion);

      ea_k_231_utils.p_devuelve_dato_cotizacion(p_nom_tabla   =>  ea_k_231_utils.g_k_tabla_dv
                                                  ,p_nom_columna =>  'TIP_PRODUTO'
                                                  ,p_val_campo   =>  l_tip_produto);
       --
       l_eh_3_pacotes := ea_k_g2109142_vcr.f_eh_3_pacotes(p_cod_cia, --2.70
                                                          p_cod_ramo,
                                                          p_cod_agt,
                                                          l_tip_produto); -- 2.43
       -- I 3.47
       IF l_eh_3_pacotes THEN
        --
        pp_asigna('tres_pacotes',1);
        --
       ELSE
        --
        pp_asigna('tres_pacotes',0);
        --
       END IF;
       -- F 3.47
       --
       IF l_eh_3_pacotes THEN
         ea_k_231_utils.p_devuelve_dato_cotizacion(p_nom_tabla   =>  'G2000000'
                                                  ,p_nom_columna =>  'NUM_SIMULACION'
                                                  ,p_val_campo   =>  l_num_simulacion);
       ELSE
         l_num_simulacion := trn.UNO;
       END IF;
      -- F 2.47

      IF  l_tip_mvto_batch = g_k_tip_mvto_batch_endosso THEN
        --

        l_num_propuesta := trn_k_global.devuelve('NUM_PROPUESTA');
        --
        em_k_a2000560.p_lee(p_cod_cia        => p_cod_cia          ,
                             p_num_propuesta => l_num_propuesta    ,
                             p_cod_campo     => l_k_num_serie);
        --
        l_num_serie := em_k_a2000560.f_val_campo;
        --
        l_num_max_spto := em_f_max_spto(p_cod_cia    => p_cod_cia
                                       ,p_num_poliza => l_num_propuesta
                                       ,p_num_spto   => trn.NULO); --v2.07
        --
        l_num_riesgo   := ea_k_231_utils.f_devuelve_val_campo_spto(p_cod_campo => em_k_gen_spto_batch.g_k_pf_datos_generales_riesgo || 'NUM_RIESGO'); --v1.81
        --
      ELSE
        --
        ea_k_231_utils.p_devuelve_dato_cotizacion(p_nom_tabla   =>  ea_k_231_utils.g_k_tabla_dv
                                                 ,p_nom_columna =>  'NUM_SERIE'
                                                 ,p_val_campo   =>  l_num_serie);
        --
      END IF;
      --F 1.53
      CASE l_tip_desconto
        --
        WHEN em_k_csn.g_k_tip_desconto_csn THEN
          --
          l_consulta_csn := TRUE;
          --
        WHEN em_k_csn.g_k_tip_desconto_rc  THEN
          --
          l_consulta_csn := TRUE;
          --
        ELSE
          --
          l_consulta_csn := FALSE;
          --
      END CASE;
      --
      IF l_consulta_csn
      THEN
        --
        BEGIN
          --
          em_k_csn.p_consulta_pontos(p_cod_cia        => p_cod_cia        ,
                                     p_cod_ramo       => p_cod_ramo       ,
                                     p_cod_agt        => p_cod_agt        ,
                                     p_tip_desconto   => l_tip_desconto   ,
                                     p_status_retorno => l_status_ret     ,
                                     p_saldo_pontos   => l_saldo_pontos   );
          --
          CASE l_status_ret
            --
            WHEN em_k_csn.g_k_retorno_ok
            THEN
              --
              l_consulta_ok := TRUE;
              --
            ELSE
              --
              l_consulta_ok := FALSE;
              --
          END CASE;
          --
        EXCEPTION
          WHEN OTHERS
          THEN
            --
            l_consulta_ok := FALSE;
            --
        END;
        --
        --I 1.53
        IF l_consulta_ok
        THEN
          --
          BEGIN
            --
            em_k_csn.p_consulta_pontos_reservado(p_cod_cia        => p_cod_cia        ,
                                                 p_cod_ramo       => p_cod_ramo       ,
                                                 p_cod_agt        => p_cod_agt        ,
                                                 p_tip_desconto   => l_tip_desconto   ,
                                                 p_status_retorno => l_status_ret     ,
                                                 p_saldo_pontos   => l_saldo_reservado);
            --
            CASE l_status_ret
              --
              WHEN em_k_csn.g_k_retorno_ok
              THEN
                --
                l_consulta_reserva_ok := TRUE;
                --
              ELSE
                --
                l_consulta_reserva_ok := FALSE;
                --
            END CASE;
            --
          EXCEPTION
            WHEN OTHERS
            THEN
              --
              l_consulta_reserva_ok := FALSE;
              --
          END;
          --
        END IF;
        --F 1.53
        IF l_consulta_ok         AND
           l_consulta_reserva_ok
        THEN --I 1.53
          --
          OPEN l_retorno FOR
            --v2.07 ini
            WITH c_apolice AS (SELECT SUM(DECODE(c170.cod_desglose
                                                ,g_k_cod_desglose_iof
                                                ,trn.CERO
                                                ,imp_spto))            AS "VAL_PREMIO_LIQUIDO"
                                     ,SUM(DECODE(c170.cod_desglose
                                                ,g_k_cod_desglose_iof
                                                ,imp_spto))            AS "VAL_IOF"
                                     ,SUM(imp_spto)                    AS "VAL_PREMIO_TOTAL"
                                     ,ea_k_231_utils.g_k_cotiza_batch  AS "TIP_MVTO_BATCH"
                                 FROM c2109170_vcr c170
                                WHERE c170.cod_cia        = p_cod_cia
                                  AND c170.cod_ramo       = p_cod_ramo
                                  AND c170.num_cotizacion = (CASE
                                                               WHEN p_num_poliza_grupo IS NOT NULL
                                                               THEN
                                                                 p_num_poliza_grupo
                                                               ELSE
                                                                 p_num_cotizacion
                                                             END)
                                  AND C170.NUM_SIMULACION = NVL(l_num_simulacion,trn.UNO)), -- 2.47
                 c_endosso AS (SELECT SUM(DECODE(a170.cod_desglose
                                                ,g_k_cod_desglose_iof
                                                ,trn.CERO
                                                ,imp_spto))            AS "VAL_PREMIO_LIQUIDO"
                                     ,SUM(DECODE(a170.cod_desglose
                                                ,g_k_cod_desglose_iof
                                                ,imp_spto))            AS "VAL_IOF"
                                     ,SUM(imp_spto)                    AS "VAL_PREMIO_TOTAL"
                                     ,ea_k_231_utils.g_k_spto_batch    AS "TIP_MVTO_BATCH"
                                 FROM a2100170 a170
                                WHERE a170.cod_cia    = p_cod_cia
                                  AND a170.cod_ramo   = p_cod_ramo
                                  AND a170.num_spto   = l_num_max_spto
                                  AND a170.num_riesgo = l_num_riesgo
                                  AND a170.num_poliza = p_num_cotizacion),
                 c_premio  AS (SELECT val_premio_liquido
                                     ,val_iof
                                     ,val_premio_total
                                 FROM c_apolice
                                WHERE tip_mvto_batch = l_tip_mvto_batch
                                UNION
                               SELECT val_premio_liquido
                                     ,val_iof
                                     ,val_premio_total
                                 FROM c_endosso
                                WHERE tip_mvto_batch = l_tip_mvto_batch)
            --v2.07 fim
            SELECT 'SALDO_PONTOS'                     AS codCampo,
                   TO_CHAR(l_saldo_pontos)            AS valCampo
              FROM dual
             UNION                                                      --I 1.53
            SELECT 'PONTOS_RESERVADOS'                AS codCampo,      --I 1.53
                   TO_CHAR(l_saldo_reservado)         AS valCampo       --I 1.53
              FROM dual                                                 --I 1.53
             UNION                                                      --I 1.53
            SELECT 'CHASSI'                           AS codCampo,      --I 1.53
                   TO_CHAR(l_num_serie)               AS valCampo       --I 1.53
              FROM dual                                                 --I 1.53
             UNION                                                      --I 1.53
            --
            SELECT 'VAL_PREMIO_LIQUIDO'               AS codCampo,      --v2.07
                   TO_CHAR(val_premio_liquido)        AS valCampo
              FROM c_premio
             UNION
            SELECT 'VAL_IOF'                          AS codCampo,      --v2.07
                   TO_CHAR(val_iof)                   AS valCampo
              FROM c_premio
             UNION
            SELECT 'VAL_PREMIO_TOTAL'                 AS codCampo,      --v2.07
                   TO_CHAR(val_premio_total)          AS valCampo
              FROM c_premio;
          --
          p_gerar_xml_campo_unico(l_retorno, p_xml);
          --
        ELSE
          --
          OPEN l_retorno FOR
              SELECT 'SALDO_PONTOS'                      AS cod_Campo   ,
                     'Erro ao consultar CRM'             AS des_Mensagem,
                     'ERR'                               AS tip_Mensagem
                FROM dual;
          --
          p_gerar_xml_mensagem(l_retorno, p_xml);
          --
           OPEN l_retorno FOR
             SELECT 'SALDO_PONTOS'                      AS cod_Campo   ,
                    'Erro ao consultar CRM'             AS des_Mensagem,
                    'ERR'                               AS tip_Mensagem
               FROM dual;
          --
          p_gerar_xml_mensagem(l_retorno, p_xml);
          --
        END IF;
        --
      ELSE
        --
        OPEN l_retorno FOR
          SELECT
               'TIP_DESCONTO'                      AS cod_Campo   ,
               'Opcao invalida'                    AS des_Mensagem,
               'ATN'                               AS tip_Mensagem
            FROM
               dual;
        --
        p_gerar_xml_mensagem(l_retorno, p_xml);
        --
      END IF;
      --
      mx('F', 'p_ws_csn_consultar');
      --
    END p_ws_csn_consultar;
    --
    PROCEDURE p_ws_csn_baixar(p_cod_cia          IN  G9999992.cod_cia%TYPE,
                              p_cod_ramo         IN  G9999992.cod_ramo%TYPE,
                              p_cod_tarifa       IN  G9999992.cod_tarifa%TYPE,
                              p_cod_agt          IN  G9999992.cod_agt%TYPE,
                              p_num_cotizacion   IN  C2009030_vcr.num_cotizacion%TYPE,
                              p_num_poliza_grupo IN  A2000500.num_poliza_grupo%TYPE,
                              p_num_contrato     IN  A2000500.num_contrato%TYPE,
                              p_num_subcontrato  IN  A2000500.num_contrato%TYPE,
                              p_tip_mvto_batch   IN  A2000500.tip_mvto_batch%TYPE,
                              p_xml_in           IN  CLOB,
                              p_xml              OUT CLOB)
    IS
      --
      l_imp_desconto    c2000000.val_columna%TYPE;
      l_status_ret      VARCHAR2(5);
      l_msg_ret         VARCHAR2(1000);
      l_nro_voucher     c2000000.val_columna%TYPE;
      l_ret_servico_ok  BOOLEAN;
      l_retorno         REF_CURSOR;
      --
      l_data_validade   c2000000.val_columna%TYPE; --I 1.53
      l_num_serie       a2009018_vcr.num_chassi           %TYPE := NULL; --I 1.53
      l_num_serie_ori   a2009018_vcr.num_chassi           %TYPE := NULL; --I 1.53
      l_cod_error       g1010020.cod_mensaje%TYPE; --I 1.53
      l_exception       EXCEPTION;                 --I 1.53
      l_exception2       EXCEPTION;                 --I 1.53
      l_tip_mvto_batch    A2000500.tip_mvto_batch %TYPE;--I 1.53
      l_num_cotizacion  C2009030_vcr.num_cotizacion %TYPE;
      l_reg_a2000560   a2000560%ROWTYPE; --I 1.53
     -- l_ano_modelo        a2100430.anio_sub_modelo%TYPE;                      --I 1.53
     -- l_ano_fabricacao    a2009018_VCR.ano_Fabricacao%TYPE;                   --I 1.53
     -- l_cod_fipe          a2009018_vcr.cod_fipe%TYPE := NULL;                 --I 1.53
     -- l_cod_sub_modelo    g2109042_vcr.cod_sub_modelo%TYPE := NULL;           --I 1.53
     -- l_cod_modelo        g2109042_vcr.cod_modelo%TYPE := NULL;               --I 1.53
     -- l_cod_marca         g2109042_vcr.cod_marca%TYPE := NULL;                --I 1.53
     -- l_nom_sub_modelo    g2109042_vcr.nom_modelo_submodelo%TYPE := NULL;     --I 1.53
     -- l_mca_zero_km       a2000020.val_Campo%TYPE;                            --I 1.53
     -- l_ano_atual         A2009018_VCR.ano_fabricacao%TYPE;                   --I 1.53
     --
     l_reg_a2009710      a2009710_vcr%ROWTYPE; -- 4.52
     --
    BEGIN
      --
      mx('I', 'p_ws_csn_baixar');
      --
      g_num_paso       := trn_k_global.ref_f_global('NUM_PASO'); -- 4.52
      --
      --
      g_err_msg :=  TYPTAB_MSG_WS(); --I 1.53 -- 4.99
      --
      l_tip_mvto_batch := NVL(p_tip_mvto_batch, g_k_tip_mvto_batch_cotacao); --I 1.53
      --
      l_imp_desconto := fp_recupera_valor (p_xml       => p_xml_in         ,
                                           p_cod_campo => 'IMP_DESCONTO'   );
      --
      --I 1.53
      trn_k_global.asigna('COD_CIA',    p_cod_cia);
      trn_k_global.asigna('COD_RAMO',   p_cod_ramo);
      trn_k_global.asigna('COD_TARIFA', p_cod_tarifa);
      trn_k_global.asigna('COD_AGT',    p_cod_agt);
      trn_k_global.asigna('COD_IDIOMA', g_k_cod_idioma);
      trn_k_global.asigna('TIP_MVTO_BATCH',l_tip_mvto_batch       );
      --
      IF l_tip_mvto_batch = g_k_tip_mvto_batch_endosso THEN
         --
         pp_asgina_globales_spto;
         --
      ELSE
         --
         pp_asigna_globales_defecto ;
         --
      END IF;
      --
      IF p_num_cotizacion IS NOT NULL THEN
         --
         l_num_cotizacion := p_num_cotizacion;
         --
         trn_k_global.asigna('NUM_COTIZACION', l_num_cotizacion);
         trn_k_global.asigna('NUM_PROPUESTA', l_num_cotizacion);
      END IF;

      --
      l_num_serie := fp_recupera_valor (p_xml       => p_xml_in         ,
                                           p_cod_campo => 'CHASSI'   );
      IF l_num_serie is null THEN
         --
         l_cod_error := '20099319';
         --
         RAISE l_exception;
         --
      END IF;
      IF l_tip_mvto_batch = g_k_tip_mvto_batch_endosso THEN
        --
        l_num_serie_ori := ea_k_231_utils.f_valor_dv('NUM_SERIE');
        --
        IF  l_num_serie_ori <>  l_num_serie THEN
          --
        l_reg_a2000560.cod_cia       := trn_k_global.devuelve('COD_CIA');
        l_reg_a2000560.num_propuesta := trn_k_global.devuelve('NUM_PROPUESTA');
        l_reg_a2000560.cod_campo     := 'NUM_SERIE';
        l_reg_a2000560.val_campo     := l_num_serie;
        --
        pp_inserta_a2000560(l_reg_a2000560);
        --
        END IF;
        --
      END IF;

      --
      trn_k_global.asigna('DVNUM_SERIE',l_num_serie);
      trn_k_global.asigna('NUM_SERIE'  ,l_num_serie);
      trn_k_global.asigna('NUM_SERIE_CSN', l_num_serie); -- 3.29
      --
      BEGIN
         ea_k_231_dv.p_ws_v_num_serie;
      EXCEPTION
        WHEN OTHERS THEN
          --
          IF l_tip_mvto_batch = g_k_tip_mvto_batch_endosso THEN
          --
             IF  l_num_serie_ori <>  l_num_serie THEN
                --
                l_reg_a2000560.cod_campo     := 'NUM_SERIE';
                l_reg_a2000560.val_campo     := l_num_serie_ori;
                --
                pp_inserta_a2000560(l_reg_a2000560);
                --
             END IF;
          --
          END IF;




          g_err_msg.EXTEND(1); -- 4.99
          g_err_msg(g_err_msg.LAST) := fp_trata_msg('CHASSI', -- 4.99
                                                                                    SQLCODE,
                                                                                    SQLERRM);
          --
          pp_processa_mensagem(g_err_msg, -- 4.99
                               l_retorno);
          --
          p_gerar_xml_mensagem(l_retorno, p_xml);
          --
          g_err_msg := NULL; -- 4.99
          --
          return;
      END ;
      --
      trn_k_global.asigna('COD_USR',g_cod_usr_automatico);
      --F 1.53
      em_k_csn.p_gera_nro_lancamento(p_cod_cia         => p_cod_cia        ,
                                     p_cod_ramo        => p_cod_ramo       ,
                                     p_cod_agt         => p_cod_agt        ,
                                     p_num_cotizacion  => p_num_cotizacion ,
                                     p_imp_desconto    => l_imp_desconto   ,
                                     p_tip_mvto_batch  => p_tip_mvto_batch ,
                                     p_status_retorno  => l_status_ret     ,
                                     p_desc_retorno    => l_msg_ret        ,
                                     p_nro_lancamento  => l_nro_voucher    ,
                                     p_data_vencimento => l_data_validade);  --I 1.53
      --
   SELECT CONVERT(l_msg_ret,'WE8MSWIN1252','UTF8') INTO l_msg_ret FROM dual;
   --
      CASE l_status_ret
        --
        WHEN em_k_csn.g_k_retorno_ok THEN
          --
          l_ret_servico_ok := TRUE;
          --
        ELSE
          --
          l_ret_servico_ok := FALSE;
          --
      END CASE;
      --
      IF l_ret_servico_ok THEN
        --
        OPEN l_retorno FOR
            SELECT
                 'VOUCHER'                      AS codCampo,
                 TO_CHAR(l_nro_voucher)         AS valCampo
              FROM
                 dual
            UNION  --I 1.53
            SELECT --I 1.53
                 'VALIDADE'                      AS codCampo, --I 1.53
                 TO_CHAR(l_data_validade)        AS valCampo  --I 1.53
              FROM   --I 1.53
                 dual   ;  --I  1.53
        --
        p_gerar_xml_campo_unico(l_retorno, p_xml);
        --
      ELSE
        --
        OPEN l_retorno FOR
            SELECT
                 'IMP_DESCONTO'                      AS cod_Campo,
                 l_msg_ret                           AS des_Mensagem,
                 'ATN'                               AS tip_Mensagem
              FROM
                 dual;
        --
        p_gerar_xml_mensagem(l_retorno, p_xml);
        --
      END IF;
      --
      mx('F', 'p_ws_csn_baixar');
      --
    EXCEPTION
     --I 1.53
     WHEN l_exception THEN
       --
       g_err_msg.EXTEND(1); -- 4.99
       g_err_msg(g_err_msg.LAST) := fp_trata_msg('CHASSI', -- 4.99
                                                                                 NULL,
                                                                                 g_k_pre_msg_erro || l_cod_error || g_k_sep_cod_msg        );
       --
       pp_processa_mensagem(g_err_msg, -- 4.99
                            l_retorno);
       --
       p_gerar_xml_mensagem(l_retorno, p_xml);
       --
       g_err_msg := NULL; -- 4.99
       --

      --F 1.53
      WHEN OTHERS THEN
        --
        l_msg_ret := TO_CHAR(SQLERRM,1,1000);
        --
        OPEN l_retorno FOR
            SELECT
                 'IMP_DESCONTO'                      AS cod_Campo,
                 l_msg_ret                           AS des_Mensagem,
                 'ERR'                               AS tip_Mensagem
              FROM
                 dual;
        --
        p_gerar_xml_mensagem(l_retorno, p_xml);
        --
    END p_ws_csn_baixar;
  --
  /* ------------------------------------------------------
  || Busca cotacoes e gera XML
  */ ------------------------------------------------------
  --
  PROCEDURE p_lee_cotacao
  IS
    l_retorno           ref_cursor;
    l_cod_cia           c2009030_vcr.cod_cia  %TYPE;
    l_cod_ramo          c2009030_vcr.cod_ramo %TYPE;
    l_cod_agt           c2009030_vcr.cod_agt  %TYPE;
    l_tip_docum         c2009030_vcr.tip_docum%TYPE;
    l_cod_docum         c2009030_vcr.cod_docum%TYPE;
    l_num_poliza        c2009030_vcr.num_cotizacion%TYPE; -- 5.67
    l_xml               CLOB;
    --
    l_mca_renovacion    VARCHAR2(1)                ;
    -- v2.25 ini
    l_num_serie         a2000020.val_campo    %TYPE;
    l_num_matricula     a2000020.val_campo    %TYPE;
    l_cod_fipe          a2000020.val_campo    %TYPE;
    l_cod_marca         a2000020.val_campo    %TYPE;
    l_cod_modelo        a2000020.val_campo    %TYPE;
    l_cod_sub_modelo    a2000020.val_campo    %TYPE;
    l_anio_sub_modelo   a2000020.val_campo    %TYPE;
    -- v2.25 fim
    l_dias_renov_neg df_cmn_nwt_xx_cnn.vrb_nam_val%TYPE;
    l_dias_renov_min df_cmn_nwt_xx_cnn.vrb_nam_val%TYPE;
    --
  BEGIN
    --
    mx('I', 'p_lee_cotacao');
    --
    l_cod_cia         := trn_k_global.devuelve('COD_CIA'        );
    l_cod_ramo        := trn_k_global.devuelve('COD_RAMO'       );
    l_cod_agt         := trn_k_global.devuelve('COD_AGT'        );
    l_tip_docum       := trn_k_global.devuelve('TIP_DOCUM'      );
    l_cod_docum       := trn_k_global.devuelve('COD_DOCUM'      );
    l_num_poliza      := trn_k_global.devuelve('NUM_POLIZA'     ); -- 5.67
    --
    l_mca_renovacion  := trn_k_global.devuelve('MCA_RENOVACION' );
    -- v2.25 ini
    l_num_serie       := trn_k_global.devuelve('NUM_SERIE'      );
    l_cod_marca       := trn_k_global.devuelve('COD_MARCA'      );
    l_cod_modelo      := trn_k_global.devuelve('COD_MODELO'     );
    l_cod_sub_modelo  := trn_k_global.devuelve('COD_SUB_MODELO' );
    l_anio_sub_modelo := trn_k_global.devuelve('ANIO_SUB_MODELO');
    --
    IF l_tip_docum = g_k_tip_docum_cpf THEN
      --
      l_cod_docum := LPAD(l_cod_docum, 11, '0');
      --
    ELSE
      --
      l_cod_docum := LPAD(l_cod_docum, 14, '0');
      --
    END IF;
    --
    trn_k_global.p_asigna('fec_validez',trn_k_tiempo.f_fec_actu);
    --
    l_dias_renov_neg := ea_k_231_utils.f_recupera_constante(p_cod_cia   => l_cod_cia,
                                                            p_cod_campo => 'DIAS_RENOV_NEG');
    l_dias_renov_min := ea_k_231_utils.f_recupera_constante(p_cod_cia   => l_cod_cia,
                                                            p_cod_campo => 'DIAS_RENOV_MIN');
    --
    IF l_num_serie IS NOT NULL
    THEN
      --
      OPEN l_retorno
       FOR WITH c_cotacoes AS (SELECT cod_cia
                                     ,cod_ramo
                                     ,num_cotizacion
                                 FROM c2000000 a
                                WHERE a.cod_cia     = l_cod_cia
                                  AND a.cod_ramo    = l_cod_ramo
                                  AND a.nom_columna = 'COD_DOCUM'
                                  AND a.val_columna = l_cod_docum
                                GROUP BY a.cod_cia
                                        ,a.cod_ramo
                                        ,a.num_cotizacion
                                        ,a.val_columna)
               ,c_dados AS (SELECT cod_cia
                                  ,cod_ramo
                                  ,cod_agt
                                  ,num_cotizacion
                                  ,fec_efec_poliza
                                  ,cod_docum
                                  ,nom_tercero
                                  ,num_serie
                                  ,num_matricula
                                  ,cod_marca
                                  ,cod_modelo
                                  ,cod_sub_modelo
                                  ,anio_sub_modelo
                                  ,mca_renovacion
                                  ,num_poliza_renov
                                  ,mca_renov_outras
                                  ,cod_tip_renov
                                  ,fec_vcto_poliza_congenere
                                  ,tip_situ_coti_ind_renov
                                  ,num_paso_atual
                              FROM (SELECT cod_cia
                                          ,cod_ramo
                                          ,num_cotizacion
                                          ,nom_columna
                                          ,val_columna
                                      FROM (SELECT a.*
                                             FROM c2000000   a
                                                , c_cotacoes b
                                            WHERE a.cod_cia        = b.cod_cia
                                              AND a.cod_ramo       = b.cod_ramo
                                              AND a.num_cotizacion = b.num_cotizacion
                                              AND (nom_columna = 'NUM_SERIE'                 OR
                                                   nom_columna = 'NUM_MATRICULA'             OR
                                                   nom_columna = 'COD_MARCA'                 OR
                                                   nom_columna = 'COD_MODELO'                OR
                                                   nom_columna = 'COD_SUB_MODELO'            OR
                                                   nom_columna = 'ANIO_SUB_MODELO'           OR
                                                   nom_columna = 'NOM_TERCERO'               OR
                                                   nom_columna = 'COD_DOCUM'                 OR
                                                   nom_columna = 'NUM_PASO_ATUAL'            OR
                                                   nom_columna = 'FEC_EFEC_POLIZA'           OR
                                                   nom_columna = 'COD_AGT'                   OR
                                                   nom_columna = 'MCA_RENOVACION'            OR
                                                   nom_columna = 'NUM_POLIZA_RENOV'          OR
                                                   nom_columna = 'TIP_SITU_COTI_IND_RENOV'   OR
                                                   nom_columna = 'COD_TIP_RENOV'             OR
                                                   nom_columna = 'FEC_VCTO_POLIZA_CONGENERE' OR
                                                   nom_columna = 'MCA_RENOV_OUTRAS'))
                                     ORDER BY num_cotizacion) PIVOT (MAX(val_columna) FOR nom_columna IN('NUM_SERIE'                 AS num_serie
                                                                                                        ,'NUM_MATRICULA'             AS num_matricula
                                                                                                        ,'COD_MARCA'                 AS cod_marca
                                                                                                        ,'COD_MODELO'                AS cod_modelo
                                                                                                        ,'COD_SUB_MODELO'            AS cod_sub_modelo
                                                                                                        ,'ANIO_SUB_MODELO'           AS anio_sub_modelo
                                                                                                        ,'NOM_TERCERO'               AS nom_tercero
                                                                                                        ,'COD_DOCUM'                 AS cod_docum
                                                                                                        ,'NUM_PASO_ATUAL'            AS num_paso_atual
                                                                                                        ,'FEC_EFEC_POLIZA'           AS fec_efec_poliza
                                                                                                        ,'COD_AGT'                   AS cod_agt
                                                                                                        ,'MCA_RENOVACION'            AS mca_renovacion
                                                                                                        ,'NUM_POLIZA_RENOV'          AS num_poliza_renov
                                                                                                        ,'TIP_SITU_COTI_IND_RENOV'   AS tip_situ_coti_ind_renov
                                                                                                        ,'COD_TIP_RENOV'             AS cod_tip_renov
                                                                                                        ,'FEC_VCTO_POLIZA_CONGENERE' AS fec_vcto_poliza_congenere
                                                                                                        ,'MCA_RENOV_OUTRAS'          AS mca_renov_outras))
                     WHERE cod_agt             = l_cod_agt
                       AND cod_marca          <> 'NULL'
                       AND cod_modelo         <> 'NULL'
                       AND cod_sub_modelo     <> 'NULL'
                       AND num_serie          <> 'NULL'
                       AND NVL(mca_renovacion
                              ,trn.NO)         = NVL(l_mca_renovacion
                                                    ,NVL(mca_renovacion
                                                        ,trn.NO)) -- v 2.22
                       AND (   (    NVL(mca_renovacion, trn.NO) = trn.SI
                                AND TO_DATE(fec_vcto_poliza_congenere,'ddmmyyyy') BETWEEN trn_k_tiempo.f_fec_actu + TO_NUMBER(l_dias_renov_neg)
                                                                                      AND trn_k_tiempo.f_fec_actu + TO_NUMBER(l_dias_renov_min))
                                AND tip_situ_coti_ind_renov IS NOT NULL
                            OR NVL(mca_renovacion, trn.NO) = trn.NO                                                                             ))
               ,c_veiculos AS (SELECT v.cod_cia,
                                      v.nom_modelo_submodelo,
                                      v.cod_marca,
                                      v.cod_modelo,
                                      v.cod_sub_modelo,
                                      v.fec_validez
                                 FROM tron2000.g2109042_vcr v
                                WHERE v.cod_cia = 1
                                  AND v.cod_marca = l_cod_marca --5.50
                  AND v.cod_modelo = l_cod_modelo --5.50
                  AND v.cod_sub_modelo = l_cod_sub_modelo --5.50
                                  AND v.fec_validez = (SELECT MAX(vv.fec_validez)
                                                         FROM tron2000.g2109042_vcr vv
                                                        WHERE vv.cod_cia        = v.cod_cia
                                                          AND vv.cod_marca      = v.cod_marca
                                                          AND vv.cod_modelo     = v.cod_modelo
                                                          AND vv.cod_sub_modelo = v.cod_sub_modelo))

                   SELECT *
                     FROM (SELECT 'COD_CIA'                       AS nom_cod_cia
                                 ,d.cod_cia                       AS cod_cia
                                 ,'NUM_COTIZACION'                AS nom_num_cotizacion
                                 ,d.num_cotizacion                AS num_cotizacion
                                 ,'NUM_POLIZA_RENOV'              AS nom_num_poliza_renov
                                 ,d.num_poliza_renov              AS num_poliza_renov
                                 ,'NOM_TERCERO'                   AS nom_nom_tercero
                                 ,d.nom_tercero                   AS nom_tercero
                                 ,'NUM_SERIE'                     AS nom_num_serie
                                 ,d.num_serie                     AS num_serie
                                 ,'NUM_MATRICULA'                 AS nom_num_matricula
                                 ,d.num_matricula                 AS num_matricula
                                 ,'TXT_SUB_MODELO'                AS nom_txt_sub_modelo
                                 ,v.nom_modelo_submodelo          AS txt_sub_modelo
                                 ,'MCA_RENOVACION'                AS nom_mca_renovacion
                                 ,NVL(d.mca_renovacion
                                     ,trn.NO)                     AS mca_renovacion
                                 ,'MCA_RENOV_OUTRAS'              AS nom_mca_renov_outras
                                 ,d.mca_renov_outras              AS mca_renov_outras
                                 ,'COD_TIP_RENOV'                 AS nom_cod_tip_renov
                                 ,DECODE(d.mca_renov_outras
                                        ,'2'
                                        ,NVL(d.cod_tip_renov
                                            ,'1')
                                        ,'6'
                                        ,NVL(d.cod_tip_renov
                                            ,'1')
                                        ,NULL)                    AS cod_tip_renov
                                 ,'FEC_VCTO_POLIZA_CONGENERE'     AS nom_fec_vcto_poliza_congenere
                                 ,d.fec_vcto_poliza_congenere     AS fec_vcto_poliza_congenere
                                 ,'TIP_SITU_COTI_IND_RENOV'       AS nom_tip_situ_coti_ind_renov
                                 ,d.tip_situ_coti_ind_renov       AS tip_situ_coti_ind_renov
                                 ,'NUM_PASO_ATUAL'                AS nom_num_paso_atual
                                 ,d.num_paso_atual                AS num_paso_atual
                             FROM c_dados    d
                                 ,c_veiculos v
                            WHERE d.cod_marca       = v.cod_marca
                              AND d.cod_modelo      = v.cod_modelo
                              AND d.cod_sub_modelo  = v.cod_sub_modelo
                              AND v.fec_validez    <= TO_DATE(d.fec_efec_poliza, 'DD/MM/YYYY')
                              AND d.num_serie       = l_num_serie
                            ORDER by d.num_cotizacion desc) c_consulta
                    WHERE ROWNUM <= 10;
      --
    ELSIF l_cod_marca       IS NOT NULL AND
          l_cod_modelo      IS NOT NULL AND
          l_cod_sub_modelo  IS NOT NULL AND
          l_anio_sub_modelo IS NOT NULL
    THEN
      --
      OPEN l_retorno
       FOR WITH c_cotacoes AS (SELECT cod_cia
                                     ,cod_ramo
                                     ,num_cotizacion
                                 FROM c2000000 a
                                WHERE a.cod_cia     = l_cod_cia
                                  AND a.cod_ramo    = l_cod_ramo
                                  AND a.nom_columna = 'COD_DOCUM'
                                  AND a.val_columna = l_cod_docum
                                GROUP BY a.cod_cia
                                        ,a.cod_ramo
                                        ,a.num_cotizacion
                                        ,a.val_columna)
               ,c_dados AS (SELECT cod_cia
                                  ,cod_ramo
                                  ,cod_agt
                                  ,num_cotizacion
                                  ,fec_efec_poliza
                                  ,cod_docum
                                  ,nom_tercero
                                  ,num_serie
                                  ,num_matricula
                                  ,cod_marca
                                  ,cod_modelo
                                  ,cod_sub_modelo
                                  ,anio_sub_modelo
                                  ,mca_renovacion
                                  ,num_poliza_renov
                                  ,mca_renov_outras
                                  ,cod_tip_renov
                                  ,fec_vcto_poliza_congenere
                                  ,tip_situ_coti_ind_renov
                                  ,num_paso_atual
                              FROM (SELECT cod_cia
                                          ,cod_ramo
                                          ,num_cotizacion
                                          ,nom_columna
                                          ,val_columna
                                      FROM (SELECT a.*
                                             FROM c2000000   a
                                                , c_cotacoes b
                                            WHERE a.cod_cia        = b.cod_cia
                                              AND a.cod_ramo       = b.cod_ramo
                                              AND a.num_cotizacion = b.num_cotizacion
                                              AND (nom_columna = 'NUM_SERIE'                 OR
                                                   nom_columna = 'NUM_MATRICULA'             OR
                                                   nom_columna = 'COD_MARCA'                 OR
                                                   nom_columna = 'COD_MODELO'                OR
                                                   nom_columna = 'COD_SUB_MODELO'            OR
                                                   nom_columna = 'ANIO_SUB_MODELO'           OR
                                                   nom_columna = 'NOM_TERCERO'               OR
                                                   nom_columna = 'COD_DOCUM'                 OR
                                                   nom_columna = 'NUM_PASO_ATUAL'            OR
                                                   nom_columna = 'FEC_EFEC_POLIZA'           OR
                                                   nom_columna = 'COD_AGT'                   OR
                                                   nom_columna = 'MCA_RENOVACION'            OR
                                                   nom_columna = 'NUM_POLIZA_RENOV'          OR
                                                   nom_columna = 'TIP_SITU_COTI_IND_RENOV'   OR
                                                   nom_columna = 'COD_TIP_RENOV'             OR
                                                   nom_columna = 'FEC_VCTO_POLIZA_CONGENERE' OR
                                                   nom_columna = 'MCA_RENOV_OUTRAS'))
                                     ORDER BY num_cotizacion) PIVOT (MAX(val_columna) FOR nom_columna IN('NUM_SERIE'                 AS num_serie
                                                                                                        ,'NUM_MATRICULA'             AS num_matricula
                                                                                                        ,'COD_MARCA'                 AS cod_marca
                                                                                                        ,'COD_MODELO'                AS cod_modelo
                                                                                                        ,'COD_SUB_MODELO'            AS cod_sub_modelo
                                                                                                        ,'ANIO_SUB_MODELO'           AS anio_sub_modelo
                                                                                                        ,'NOM_TERCERO'               AS nom_tercero
                                                                                                        ,'COD_DOCUM'                 AS cod_docum
                                                                                                        ,'NUM_PASO_ATUAL'            AS num_paso_atual
                                                                                                        ,'FEC_EFEC_POLIZA'           AS fec_efec_poliza
                                                                                                        ,'COD_AGT'                   AS cod_agt
                                                                                                        ,'MCA_RENOVACION'            AS mca_renovacion
                                                                                                        ,'NUM_POLIZA_RENOV'          AS num_poliza_renov
                                                                                                        ,'TIP_SITU_COTI_IND_RENOV'   AS tip_situ_coti_ind_renov
                                                                                                        ,'COD_TIP_RENOV'             AS cod_tip_renov
                                                                                                        ,'FEC_VCTO_POLIZA_CONGENERE' AS fec_vcto_poliza_congenere
                                                                                                        ,'MCA_RENOV_OUTRAS'          AS mca_renov_outras))
                     WHERE cod_agt             = l_cod_agt
                       AND cod_marca          <> 'NULL'
                       AND cod_modelo         <> 'NULL'
                       AND cod_sub_modelo     <> 'NULL'
                       AND anio_sub_modelo    <> 'NULL'
                       AND NVL(mca_renovacion
                              ,trn.NO)         = NVL(l_mca_renovacion
                                                    ,NVL(mca_renovacion
                                                        ,trn.NO)) -- v 2.22
                       AND (   (    NVL(mca_renovacion, trn.NO) = trn.SI
                                AND TO_DATE(fec_vcto_poliza_congenere,'ddmmyyyy') BETWEEN trn_k_tiempo.f_fec_actu + TO_NUMBER(l_dias_renov_neg)
                                                                                      AND trn_k_tiempo.f_fec_actu + TO_NUMBER(l_dias_renov_min))
                                AND tip_situ_coti_ind_renov IS NOT NULL
                            OR NVL(mca_renovacion, trn.NO) = trn.NO                                                                             ))
               ,c_veiculos AS (SELECT v.cod_cia,
                                      v.nom_modelo_submodelo,
                                      v.cod_marca,
                                      v.cod_modelo,
                                      v.cod_sub_modelo,
                                      v.fec_validez
                                 FROM tron2000.g2109042_vcr v
                                WHERE v.cod_cia = 1
                                  AND v.cod_marca = l_cod_marca --5.50
                  AND v.cod_modelo = l_cod_modelo --5.50
                  AND v.cod_sub_modelo = l_cod_sub_modelo --5.50
                                  AND v.fec_validez = (SELECT MAX(vv.fec_validez)
                                                         FROM tron2000.g2109042_vcr vv
                                                        WHERE vv.cod_cia        = v.cod_cia
                                                          AND vv.cod_marca      = v.cod_marca
                                                          AND vv.cod_modelo     = v.cod_modelo
                                                          AND vv.cod_sub_modelo = v.cod_sub_modelo))

                   SELECT *
                     FROM (SELECT 'COD_CIA'                       AS nom_cod_cia
                                 ,d.cod_cia                       AS cod_cia
                                 ,'NUM_COTIZACION'                AS nom_num_cotizacion
                                 ,d.num_cotizacion                AS num_cotizacion
                                 ,'NUM_POLIZA_RENOV'              AS nom_num_poliza_renov
                                 ,d.num_poliza_renov              AS num_poliza_renov
                                 ,'NOM_TERCERO'                   AS nom_nom_tercero
                                 ,d.nom_tercero                   AS nom_tercero
                                 ,'NUM_SERIE'                     AS nom_num_serie
                                 ,d.num_serie                     AS num_serie
                                 ,'NUM_MATRICULA'                 AS nom_num_matricula
                                 ,d.num_matricula                 AS num_matricula
                                 ,'TXT_SUB_MODELO'                AS nom_txt_sub_modelo
                                 ,v.nom_modelo_submodelo          AS txt_sub_modelo
                                 ,'MCA_RENOVACION'                AS nom_mca_renovacion
                                 ,NVL(d.mca_renovacion
                                     ,trn.NO)                     AS mca_renovacion
                                 ,'MCA_RENOV_OUTRAS'              AS nom_mca_renov_outras
                                 ,d.mca_renov_outras              AS mca_renov_outras
                                 ,'COD_TIP_RENOV'                 AS nom_cod_tip_renov
                                 ,DECODE(d.mca_renov_outras
                                        ,2
                                        ,NVL(d.cod_tip_renov
                                            ,1)
                                        ,6
                                        ,NVL(d.cod_tip_renov
                                            ,1)
                                        ,NULL)                    AS cod_tip_renov
                                 ,'FEC_VCTO_POLIZA_CONGENERE'     AS nom_fec_vcto_poliza_congenere
                                 ,d.fec_vcto_poliza_congenere     AS fec_vcto_poliza_congenere
                                 ,'TIP_SITU_COTI_IND_RENOV'       AS nom_tip_situ_coti_ind_renov
                                 ,d.tip_situ_coti_ind_renov       AS tip_situ_coti_ind_renov
                                 ,'NUM_PASO_ATUAL'                AS nom_num_paso_atual
                                 ,d.num_paso_atual                AS num_paso_atual
                             FROM c_dados    d
                                 ,c_veiculos v
                            WHERE d.cod_marca       = v.cod_marca
                              AND d.cod_modelo      = v.cod_modelo
                              AND d.cod_sub_modelo  = v.cod_sub_modelo
                              AND v.fec_validez    <= TO_DATE(d.fec_efec_poliza, 'DD/MM/YYYY')
                              AND d.cod_marca       = l_cod_marca
                              AND d.cod_modelo      = l_cod_modelo
                              AND d.cod_sub_modelo  = l_cod_sub_modelo
                              AND d.anio_sub_modelo = l_anio_sub_modelo
                            ORDER by d.num_cotizacion desc) c_consulta
                    WHERE ROWNUM <= 10;
    -- 5.67 ini
  ELSIF
    l_num_poliza      IS NOT NULL

    THEN
      OPEN l_retorno
      FOR
      WITH C_COTACOES AS
       (SELECT *
           FROM (SELECT COD_CIA,
                       COD_RAMO,
                       NUM_COTIZACION,
                       NOM_TERCERO,
                       COD_DOCUM,
                       NUM_PASO_ATUAL,
                       COD_AGT,
             FEC_EFEC_POLIZA,
             FEC_EMISION,
             NUM_COTRATO,
             NUM_SUBCONTRATO,
             COD_NIVEL1,
             COD_NIVEL2,
             COD_NIVEL3
                   FROM C2009030_VCR
                 WHERE COD_CIA          = l_cod_cia
                   AND COD_RAMO         = l_cod_ramo
                   AND COD_AGT          = l_cod_agt
                   AND NUM_COTIZACION   = l_num_poliza
                   AND NUM_POLIZA_GRUPO = '9999999999999'
                   AND NUM_COTRATO      = 99999
                 ORDER BY NUM_COTIZACION DESC)
         WHERE ROWNUM <= 10),
       C_DADOS AS
       (SELECT COD_CIA,
               COD_RAMO,
               NUM_COTIZACION,
               NUM_SERIE,
               NUM_MATRICULA,
               COD_MARCA,
               COD_MODELO,
               COD_SUB_MODELO,
               ANIO_SUB_MODELO,
               TXT_SUB_MODELO,
               MCA_RENOVACION,
               NUM_POLIZA_RENOV,
               MCA_RENOV_OUTRAS,
               COD_TIP_RENOV,
               FEC_VCTO_POLIZA_CONGENERE,
         TIP_SITU_COTI_IND_RENOV,
         NUM_POLIZA_GRUPO,
         TIP_MVTO_BATCH,
         COD_MODALIDAD,
         COD_CANAL_ORIGEM,
         COD_CANAL_COMERC_ENTRADA,
         COD_CANAL_COMERC_CALCULO,
         MCA_ZERO_KM,
         MCA_SINI_ULT_VIGENCIA,
         FEC_PRIMEIRO_CALCULO,   -- v.35
         CASE WHEN MCA_RENOV_OUTRAS = '1'
           THEN
                nvl(to_char(to_date(FEC_PRIMEIRO_CALCULO, 'DDMMYYYY'), 'DD/MM/YYYY'),    -- v5.46
                    to_char(trunc(FEC_EMISION  ) , 'DD/MM/YYYY'))
           ELSE
                to_char(to_date(FEC_EFEC_POLIZA , 'DDMMYYYY'), 'DD/MM/YYYY')
         END AS FEC_EMISION, --V 5.26
         COD_AGT,
         NUM_COTRATO,
         NUM_SUBCONTRATO,
         COD_NIVEL1,
         COD_NIVEL2,
         COD_NIVEL3
           FROM ((SELECT A.COD_CIA,
                         A.COD_RAMO,
                         A.NUM_COTIZACION,
                         A.NOM_COLUMNA,
               A.VAL_COLUMNA,
               B.FEC_EMISION,
               B.COD_AGT,
               B.NUM_COTRATO,
               B.NUM_SUBCONTRATO,
               B.COD_NIVEL1,
               B.COD_NIVEL2,
               B.COD_NIVEL3
                   FROM C2000000 A, C_COTACOES B
                   WHERE A.COD_CIA = B.COD_CIA
                     AND A.COD_RAMO = B.COD_RAMO
                     AND A.NUM_COTIZACION = B.NUM_COTIZACION
                     AND (A.NOM_COLUMNA = 'NUM_SERIE' OR
                         A.NOM_COLUMNA = 'NUM_MATRICULA' OR
                         A.NOM_COLUMNA = 'COD_MARCA' OR
                         A.NOM_COLUMNA = 'COD_MODELO' OR
                         A.NOM_COLUMNA = 'COD_SUB_MODELO' OR
                         A.NOM_COLUMNA = 'ANIO_SUB_MODELO' OR
                         A.NOM_COLUMNA = 'TXT_SUB_MODELO' OR
                         A.NOM_COLUMNA = 'MCA_RENOVACION' OR
                         A.NOM_COLUMNA = 'NUM_POLIZA_RENOV' OR
                         A.NOM_COLUMNA = 'TIP_SITU_COTI_IND_RENOV' OR
                         A.NOM_COLUMNA = 'COD_TIP_RENOV' OR
                         A.NOM_COLUMNA = 'FEC_VCTO_POLIZA_CONGENERE' OR
             A.NOM_COLUMNA = 'MCA_RENOV_OUTRAS'
             --i v5.26
             OR  A.NOM_COLUMNA = 'TIP_PRODUTO' OR
                 A.NOM_COLUMNA = 'COD_MODALIDAD' OR
                 A.NOM_COLUMNA = 'TIP_MVTO_BATCH' OR
                 A.NOM_COLUMNA = 'FEC_EFEC_POLIZA' OR
                 A.NOM_COLUMNA = 'COD_CANAL_ORIGEM' OR
                 A.NOM_COLUMNA = 'COD_CANAL_COMERC_ENTRADA' OR
                 A.NOM_COLUMNA = 'COD_CANAL_COMERC_CALCULO' OR
                 A.NOM_COLUMNA = 'MCA_ZERO_KM' OR
                 A.NOM_COLUMNA = 'MCA_SINI_ULT_VIGENCIA' OR
                 A.NOM_COLUMNA = 'NUM_POLIZA_GRUPO' OR
                 A.NOM_COLUMNA = 'TIP_CLIENTE_VCR' OR
                 A.NOM_COLUMNA = 'FEC_PRIMEIRO_CALCULO'   -- v5.35
             -- f v5.26
             )
                   ORDER BY A.NUM_COTIZACION)
                 PIVOT(MAX(VAL_COLUMNA) FOR
                       NOM_COLUMNA IN
                       ('NUM_SERIE'                AS NUM_SERIE,
                        'NUM_MATRICULA'             AS NUM_MATRICULA,
                        'COD_MARCA'                 AS COD_MARCA,
                        'COD_MODELO'                AS COD_MODELO,
                        'COD_SUB_MODELO'            AS COD_SUB_MODELO,
                        'ANIO_SUB_MODELO'           AS ANIO_SUB_MODELO,
                        'TXT_SUB_MODELO'            AS TXT_SUB_MODELO,
                        'MCA_RENOVACION'            AS MCA_RENOVACION,
                        'NUM_POLIZA_RENOV'          AS NUM_POLIZA_RENOV,
                        'TIP_SITU_COTI_IND_RENOV'   AS TIP_SITU_COTI_IND_RENOV,
                        'COD_TIP_RENOV'             AS COD_TIP_RENOV,
                        'FEC_VCTO_POLIZA_CONGENERE' AS FEC_VCTO_POLIZA_CONGENERE,
                        'MCA_RENOV_OUTRAS'          AS MCA_RENOV_OUTRAS
                        --i v5.16
                        ,'TIP_PRODUTO'              AS TIP_PRODUTO,
                        'COD_MODALIDAD'             AS COD_MODALIDAD,
                        'TIP_MVTO_BATCH'            AS TIP_MVTO_BATCH,
                        'FEC_EFEC_POLIZA'           AS FEC_EFEC_POLIZA,
                        'COD_CANAL_ORIGEM'          AS COD_CANAL_ORIGEM,
                        'COD_CANAL_COMERC_ENTRADA'  AS COD_CANAL_COMERC_ENTRADA,
                        'COD_CANAL_COMERC_CALCULO'  AS COD_CANAL_COMERC_CALCULO,
                        'MCA_ZERO_KM'               AS MCA_ZERO_KM,
                        'MCA_SINI_ULT_VIGENCIA'     AS MCA_SINI_ULT_VIGENCIA,
                        'NUM_POLIZA_GRUPO'          AS NUM_POLIZA_GRUPO,
                        'TIP_CLIENTE_VCR'           AS TIP_CLIENTE_VCR,
                        'FEC_PRIMEIRO_CALCULO'      AS FEC_PRIMEIRO_CALCULO   -- v5.35
                        --f v5.26
             )))
             -- I 5.56
             WHERE (   (    NVL(mca_renovacion, trn.NO) = trn.SI
                                AND TO_DATE(fec_vcto_poliza_congenere,'ddmmyyyy') BETWEEN trn_k_tiempo.f_fec_actu + TO_NUMBER(l_dias_renov_neg)
                                                                                      AND trn_k_tiempo.f_fec_actu + TO_NUMBER(l_dias_renov_min))
                                AND tip_situ_coti_ind_renov IS NOT NULL
                            OR NVL(mca_renovacion, trn.NO) = trn.NO
                           )
             -- F 5.56

       ),
       C_PRAZO AS (
                  SELECT DISTINCT C.NUM_DIAS_VIGENCIA AS NUM_DIAS_VALIDEZ ,  A.FEC_EMISION , C.COD_AGT, A.NUM_COTIZACION, C.FEC_VALIDEZ  -- v5.43
                  FROM G2109013_VCR C, C_DADOS A
                  WHERE C.COD_CIA                  = A.COD_CIA
                  AND C.COD_RAMO                   = A.COD_RAMO
                  AND C.TIP_SEGURO                 IN (A.MCA_RENOV_OUTRAS)
                  AND C.NUM_POLIZA_GRUPO           IN (A.NUM_POLIZA_GRUPO, '9999999999999')
                  AND C.COD_AGT                    IN (A.COD_AGT, '99999')
                  AND C.COD_NIVEL1                 IN (A.COD_NIVEL1                 , '99'              )
                  AND C.COD_NIVEL2                 IN (A.COD_NIVEL2                 , '999'             )
                  AND C.COD_NIVEL3                 IN (A.COD_NIVEL3                 , '9999'            )
                  AND C.COD_CANAL1                 IN ( 'ZZZZ'            ) -- (trn_k_global.ref_f_global('COD_COD_CANAL1')            , 'ZZZZ'            )
                  AND C.COD_CANAL2                 IN ( 'ZZZZ'            )-- (trn_k_global.ref_f_global('COD_COD_CANAL2')            , 'ZZZZ'            )
                  AND C.COD_CANAL3                 IN ( 'ZZZZ'            )-- (trn_k_global.ref_f_global('COD_COD_CANAL3')            , 'ZZZZ'            )
                  AND C.NUM_CONTRATO               IN (A.NUM_COTRATO               , '99999'           )
                  AND C.NUM_SUBCONTRATO            IN (A.NUM_SUBCONTRATO           , '99999'           )
                  AND C.NUM_POLIZA_CLIENTE         IN ( '9999999999999'   ) -- (trn_k_global.ref_f_global('NUM_POLIZA_CLIENTE')        , '9999999999999'   )
                  AND C.NUM_POLIZA                 IN (A.NUM_COTIZACION            , '9999999999999')
                  AND C.COD_MODALIDAD              IN (A.COD_MODALIDAD             , '99999')  -- v1.01
                  AND C.TIP_MVTO_BATCH             IN (A.TIP_MVTO_BATCH            , 'ZZ')  -- v1.01
                  AND C.COD_SUSEP_AGT              IN ('999999999999999'           , '999999999999999')  -- v1.01
                  AND C.TIP_CLASSIFICACAO_CORRETOR IN ('ZZ'                        , 'ZZ')  -- v1.01
                  AND C.COD_CANAL_ORIGEN           IN (A.COD_CANAL_ORIGEM          , '99999')  -- v1.01
                  AND C.COD_CANAL_COMERC_ENTRADA   IN (A.COD_CANAL_COMERC_ENTRADA  , '-1')  -- v1.01
                  AND C.COD_CANAL_COMERC_CALCULO   IN (A.COD_CANAL_COMERC_CALCULO  , '-1')  -- v1.01
                  AND C.MCA_ZERO_KM                IN (A.MCA_ZERO_KM               , 'Z')  -- v1.01
                  AND C.MCA_SINI_ULT_VIGENCIA      IN (A.MCA_SINI_ULT_VIGENCIA     , 'Z')  -- v1.01
                  AND C.COD_AFINIDADE              IN ('99999'                     , '99999')  -- v1.01
                  AND C.MCA_BAJA                   =  'N'
                  AND  C.FEC_VALIDEZ = (  SELECT max(D.FEC_VALIDEZ) -- V 5.26
                                  FROM G2109013_VCR D
                                  WHERE D.COD_CIA                    = C.COD_CIA
                                  AND D.COD_RAMO                   = C.COD_RAMO
                                  AND D.TIP_SEGURO                 = C.TIP_SEGURO
                                  AND D.NUM_POLIZA_GRUPO           = C.NUM_POLIZA_GRUPO
                                  AND D.COD_AGT                    = C.COD_AGT
                                  AND D.COD_NIVEL1                 = C.COD_NIVEL1
                                  AND D.COD_NIVEL2                 = C.COD_NIVEL2
                                  AND D.COD_NIVEL3                 = C.COD_NIVEL3
                                  AND D.COD_CANAL1                 = C.COD_CANAL1
                                  AND D.COD_CANAL2                 = C.COD_CANAL2
                                  AND D.COD_CANAL3                 = C.COD_CANAL3
                                  AND D.NUM_CONTRATO               = C.NUM_CONTRATO
                                  AND D.NUM_SUBCONTRATO            = C.NUM_SUBCONTRATO
                                  AND D.NUM_POLIZA_CLIENTE         = C.NUM_POLIZA_CLIENTE
                                  AND D.NUM_POLIZA                 = C.NUM_POLIZA
                                  AND D.COD_MODALIDAD              = C.COD_MODALIDAD
                                  AND D.TIP_MVTO_BATCH             = C.TIP_MVTO_BATCH
                                  AND D.COD_SUSEP_AGT              = C.COD_SUSEP_AGT
                                  AND D.TIP_CLASSIFICACAO_CORRETOR = C.TIP_CLASSIFICACAO_CORRETOR
                                  AND D.COD_CANAL_ORIGEN           = C.COD_CANAL_ORIGEN
                                  AND D.COD_CANAL_COMERC_ENTRADA   = C.COD_CANAL_COMERC_ENTRADA
                                  AND D.COD_CANAL_COMERC_CALCULO   = C.COD_CANAL_COMERC_CALCULO
                                  AND D.MCA_ZERO_KM                = C.MCA_ZERO_KM
                                  AND D.MCA_SINI_ULT_VIGENCIA      = C.MCA_SINI_ULT_VIGENCIA
                                  AND D.COD_AFINIDADE              = C.COD_AFINIDADE
                                  AND D.MCA_BAJA                   = C.MCA_BAJA
                                  AND D.FEC_VALIDEZ               <= NVL(to_date(A.FEC_PRIMEIRO_CALCULO, 'DD/MM/YYYY'),
                                                                         to_date(A.FEC_EMISION, 'DD/MM/YYYY'))
                             )

      )


       SELECT 'COD_CIA'                             AS NOM_COD_CIA,
             C_COTACOES.COD_CIA                    AS COD_CIA,
             'NUM_COTIZACION'                      AS NOM_NUM_COTIZACION,
             C_COTACOES.NUM_COTIZACION             AS NUM_COTIZACION,
             'NUM_POLIZA_RENOV'                    AS NOM_NUM_POLIZA_RENOV,
             C_DADOS.NUM_POLIZA_RENOV              AS NUM_POLIZA_RENOV,
             'NOM_TERCERO'                         AS NOM_NOM_TERCERO,
             C_COTACOES.NOM_TERCERO                AS NOM_TERCERO,
             'NUM_SERIE'                           AS NOM_NUM_SERIE,
             C_DADOS.NUM_SERIE                     AS NUM_SERIE,
             'NUM_MATRICULA'                       AS NOM_NUM_MATRICULA,
             C_DADOS.NUM_MATRICULA                 AS NUM_MATRICULA,
             'TXT_SUB_MODELO'                      AS NOM_TXT_SUB_MODELO,
             C_DADOS.TXT_SUB_MODELO                AS TXT_SUB_MODELO,
             'MCA_RENOVACION'                      AS NOM_MCA_RENOVACION,
             NVL(C_DADOS.MCA_RENOVACION, trn.NO)   AS MCA_RENOVACION,
             'MCA_RENOV_OUTRAS'                    AS NOM_MCA_RENOV_OUTRAS,
             C_DADOS.MCA_RENOV_OUTRAS              AS MCA_RENOV_OUTRAS,
             'COD_TIP_RENOV'                       AS NOM_COD_TIP_RENOV,
             DECODE(C_DADOS.MCA_RENOV_OUTRAS, '2', NVL(C_DADOS.COD_TIP_RENOV, '1'), '6', NVL(C_DADOS.COD_TIP_RENOV, '1'), NULL) AS COD_TIP_RENOV,
             'FEC_VCTO_POLIZA_CONGENERE'           AS NOM_FEC_VCTO_POLIZA_CONGENERE,
             C_DADOS.FEC_VCTO_POLIZA_CONGENERE     AS FEC_VCTO_POLIZA_CONGENERE,
             'TIP_SITU_COTI_IND_RENOV'             AS NOM_TIP_SITU_COTI_IND_RENOV,
             C_DADOS.TIP_SITU_COTI_IND_RENOV       AS TIP_SITU_COTI_IND_RENOV,
             'NUM_PASO_ATUAL'                      AS NOM_NUM_PASO_ATUAL,
             C_COTACOES.NUM_PASO_ATUAL             AS NUM_PASO_ATUAL,
             'FEC_PRAZO_VALIDADE'                  AS NOM_FEC_PRAZO_VALIDADE,
             to_char( to_date(C_DADOS.FEC_EMISION, 'DD/MM/YYYY') + DECODE(C_DADOS.MCA_RENOV_OUTRAS, '2', NVL(C_PRAZO.NUM_DIAS_VALIDEZ, '5'), '4', NVL(C_PRAZO.NUM_DIAS_VALIDEZ, '7'), '6', NVL(C_PRAZO.NUM_DIAS_VALIDEZ, '5'), NVL(C_PRAZO.NUM_DIAS_VALIDEZ, '7')), 'dd/mm/yyyy') AS FEC_PRAZO_VALIDADE  -- v5.35

       FROM C_COTACOES
         INNER JOIN  C_DADOS  on C_DADOS.COD_CIA = C_DADOS.COD_CIA   AND C_DADOS.COD_RAMO = C_DADOS.COD_RAMO  AND C_COTACOES.NUM_COTIZACION = C_DADOS.NUM_COTIZACION
         left JOIN ( select * from C_PRAZO where  C_PRAZO.COD_AGT =  (select min(COD_AGT) from C_PRAZO ) order by COD_AGT asc, FEC_VALIDEZ  desc) C_PRAZO ON  C_DADOS.NUM_COTIZACION = C_PRAZO.NUM_COTIZACION;
         -- F v 5.16
      -- 5.67 fim
  ELSE  -- I v 5.26
    --
    OPEN l_retorno
     FOR
       WITH C_COTACOES AS
       (SELECT *
           FROM (SELECT COD_CIA,
                       COD_RAMO,
                       NUM_COTIZACION,
                       NOM_TERCERO,
                       COD_DOCUM,
                       NUM_PASO_ATUAL,
                       COD_AGT,
                       FEC_EFEC_POLIZA,
                       FEC_EMISION,
                       NUM_COTRATO,
                       NUM_SUBCONTRATO,
                       COD_NIVEL1,
                       COD_NIVEL2,
                       COD_NIVEL3
                   FROM C2009030_VCR
                 WHERE COD_CIA          = l_cod_cia
                   AND COD_RAMO         = l_cod_ramo
                   AND TIP_DOCUM        = l_tip_docum
                   AND COD_DOCUM        = l_cod_docum
                   AND COD_AGT          = l_cod_agt
                   AND NUM_POLIZA_GRUPO = '9999999999999'
                   AND NUM_COTRATO      = 99999
                 ORDER BY NUM_COTIZACION DESC)
         WHERE ROWNUM <= 10),
       C_DADOS AS
       (SELECT COD_CIA,
               COD_RAMO,
               NUM_COTIZACION,
               NUM_SERIE,
               NUM_MATRICULA,
               COD_MARCA,
               COD_MODELO,
               COD_SUB_MODELO,
               ANIO_SUB_MODELO,
               TXT_SUB_MODELO,
               MCA_RENOVACION,
               NUM_POLIZA_RENOV,
               MCA_RENOV_OUTRAS,
               COD_TIP_RENOV,
               FEC_VCTO_POLIZA_CONGENERE,
               TIP_SITU_COTI_IND_RENOV,
               NUM_POLIZA_GRUPO,
               TIP_MVTO_BATCH,
               COD_MODALIDAD,
               COD_CANAL_ORIGEM,
               COD_CANAL_COMERC_ENTRADA,
               COD_CANAL_COMERC_CALCULO,
               MCA_ZERO_KM,
               MCA_SINI_ULT_VIGENCIA,
               FEC_PRIMEIRO_CALCULO,
               CASE WHEN MCA_RENOV_OUTRAS = '1'
           THEN
                nvl(to_char(to_date(FEC_PRIMEIRO_CALCULO, 'DDMMYYYY'), 'DD/MM/YYYY'),             -- V5.26
                    to_char(trunc(FEC_EMISION)   , 'DD/MM/YYYY'))
           ELSE
                to_char(to_date(FEC_EFEC_POLIZA , 'DDMMYYYY'), 'DD/MM/YYYY')
         END AS FEC_EMISION, --V 5.20
         COD_AGT,
         NUM_COTRATO,
         NUM_SUBCONTRATO,
         COD_NIVEL1,
         COD_NIVEL2,
         COD_NIVEL3
           FROM ((SELECT A.COD_CIA,
                         A.COD_RAMO,
                         A.NUM_COTIZACION,
                         A.NOM_COLUMNA,
                         A.VAL_COLUMNA,
                         B.FEC_EMISION,
                         B.COD_AGT,
                         B.NUM_COTRATO,
                         B.NUM_SUBCONTRATO,
                         B.COD_NIVEL1,
                         B.COD_NIVEL2,
                         B.COD_NIVEL3
                   FROM C2000000 A, C_COTACOES B
                   WHERE A.COD_CIA = B.COD_CIA
                     AND A.COD_RAMO = B.COD_RAMO
                     AND A.NUM_COTIZACION = B.NUM_COTIZACION
                     AND (A.NOM_COLUMNA = 'NUM_SERIE' OR
                          A.NOM_COLUMNA = 'NUM_MATRICULA' OR
                          A.NOM_COLUMNA = 'COD_MARCA' OR
                          A.NOM_COLUMNA = 'COD_MODELO' OR
                          A.NOM_COLUMNA = 'COD_SUB_MODELO' OR
                          A.NOM_COLUMNA = 'ANIO_SUB_MODELO' OR
                          A.NOM_COLUMNA = 'TXT_SUB_MODELO' OR
                          A.NOM_COLUMNA = 'MCA_RENOVACION' OR
                          A.NOM_COLUMNA = 'NUM_POLIZA_RENOV' OR
                          A.NOM_COLUMNA = 'TIP_SITU_COTI_IND_RENOV' OR
                          A.NOM_COLUMNA = 'COD_TIP_RENOV' OR
                          A.NOM_COLUMNA = 'FEC_VCTO_POLIZA_CONGENERE' OR
                          A.NOM_COLUMNA = 'MCA_RENOV_OUTRAS'
             --i v5.26
             OR  A.NOM_COLUMNA = 'TIP_PRODUTO' OR
                 A.NOM_COLUMNA = 'COD_MODALIDAD' OR
                 A.NOM_COLUMNA = 'TIP_MVTO_BATCH' OR
                 A.NOM_COLUMNA = 'FEC_EFEC_POLIZA' OR
                 A.NOM_COLUMNA = 'COD_CANAL_ORIGEM' OR
                 A.NOM_COLUMNA = 'COD_CANAL_COMERC_ENTRADA' OR
                 A.NOM_COLUMNA = 'COD_CANAL_COMERC_CALCULO' OR
                 A.NOM_COLUMNA = 'MCA_ZERO_KM' OR
                 A.NOM_COLUMNA = 'MCA_SINI_ULT_VIGENCIA' OR
                 A.NOM_COLUMNA = 'NUM_POLIZA_GRUPO' OR
                 A.NOM_COLUMNA = 'TIP_CLIENTE_VCR' OR
                 A.NOM_COLUMNA = 'FEC_PRIMEIRO_CALCULO'
             -- f v5.26
             )
                   ORDER BY A.NUM_COTIZACION)
                 PIVOT(MAX(VAL_COLUMNA) FOR
                       NOM_COLUMNA IN
                       ('NUM_SERIE'                 AS NUM_SERIE,
                        'NUM_MATRICULA'             AS NUM_MATRICULA,
                        'COD_MARCA'                 AS COD_MARCA,
                        'COD_MODELO'                AS COD_MODELO,
                        'COD_SUB_MODELO'            AS COD_SUB_MODELO,
                        'ANIO_SUB_MODELO'           AS ANIO_SUB_MODELO,
                        'TXT_SUB_MODELO'            AS TXT_SUB_MODELO,
                        'MCA_RENOVACION'            AS MCA_RENOVACION,
                        'NUM_POLIZA_RENOV'          AS NUM_POLIZA_RENOV,
                        'TIP_SITU_COTI_IND_RENOV'   AS TIP_SITU_COTI_IND_RENOV,
                        'COD_TIP_RENOV'             AS COD_TIP_RENOV,
                        'FEC_VCTO_POLIZA_CONGENERE' AS FEC_VCTO_POLIZA_CONGENERE,
                        'MCA_RENOV_OUTRAS'          AS MCA_RENOV_OUTRAS
                        --i v5.26
                        ,'TIP_PRODUTO'              AS TIP_PRODUTO,
                        'COD_MODALIDAD'             AS COD_MODALIDAD,
                        'TIP_MVTO_BATCH'            AS TIP_MVTO_BATCH,
                        'FEC_EFEC_POLIZA'           AS FEC_EFEC_POLIZA,
                        'COD_CANAL_ORIGEM'          AS COD_CANAL_ORIGEM,
                        'COD_CANAL_COMERC_ENTRADA'  AS COD_CANAL_COMERC_ENTRADA,
                        'COD_CANAL_COMERC_CALCULO'  AS COD_CANAL_COMERC_CALCULO,
                        'MCA_ZERO_KM'               AS MCA_ZERO_KM,
                        'MCA_SINI_ULT_VIGENCIA'     AS MCA_SINI_ULT_VIGENCIA,
                        'NUM_POLIZA_GRUPO'          AS NUM_POLIZA_GRUPO,
                        'TIP_CLIENTE_VCR'           AS TIP_CLIENTE_VCR,
                        'FEC_PRIMEIRO_CALCULO'      AS FEC_PRIMEIRO_CALCULO
                        --f v5.26
             )))
             -- I 5.38
             WHERE (   (    NVL(mca_renovacion, trn.NO) = trn.SI
                                AND TO_DATE(fec_vcto_poliza_congenere,'ddmmyyyy') BETWEEN trn_k_tiempo.f_fec_actu + TO_NUMBER(l_dias_renov_neg)
                                                                                      AND trn_k_tiempo.f_fec_actu + TO_NUMBER(l_dias_renov_min))
                                AND tip_situ_coti_ind_renov IS NOT NULL
                            OR NVL(mca_renovacion, trn.NO) = trn.NO
                           )
             -- F 5.38

       ),
       C_PRAZO AS (
                  SELECT DISTINCT C.NUM_DIAS_VIGENCIA AS NUM_DIAS_VALIDEZ ,  A.FEC_EMISION , C.COD_AGT, A.NUM_COTIZACION, C.FEC_VALIDEZ -- V5.24
                  FROM G2109013_VCR C, C_DADOS A
                  WHERE C.COD_CIA                  = A.COD_CIA
                  AND C.COD_RAMO                   = A.COD_RAMO
                  AND C.TIP_SEGURO                 IN (A.MCA_RENOV_OUTRAS)
                  AND C.NUM_POLIZA_GRUPO           IN (A.NUM_POLIZA_GRUPO, '9999999999999')
                  AND C.COD_AGT                    IN (A.COD_AGT, '99999')
                  AND C.COD_NIVEL1                 IN (A.COD_NIVEL1                 , '99'              )
                  AND C.COD_NIVEL2                 IN (A.COD_NIVEL2                 , '999'             )
                  AND C.COD_NIVEL3                 IN (A.COD_NIVEL3                 , '9999'            )
                  AND C.COD_CANAL1                 IN ( 'ZZZZ'            ) -- (trn_k_global.ref_f_global('COD_COD_CANAL1')            , 'ZZZZ'            )
                  AND C.COD_CANAL2                 IN ( 'ZZZZ'            )-- (trn_k_global.ref_f_global('COD_COD_CANAL2')            , 'ZZZZ'            )
                  AND C.COD_CANAL3                 IN ( 'ZZZZ'            )-- (trn_k_global.ref_f_global('COD_COD_CANAL3')            , 'ZZZZ'            )
                  AND C.NUM_CONTRATO               IN (A.NUM_COTRATO               , '99999'           )
                  AND C.NUM_SUBCONTRATO            IN (A.NUM_SUBCONTRATO           , '99999'           )
                  AND C.NUM_POLIZA_CLIENTE         IN ( '9999999999999'   ) -- (trn_k_global.ref_f_global('NUM_POLIZA_CLIENTE')        , '9999999999999'   )
                  AND C.NUM_POLIZA                 IN (A.NUM_COTIZACION            , '9999999999999')
                  AND C.COD_MODALIDAD              IN (A.COD_MODALIDAD             , '99999')  -- v1.01
                  AND C.TIP_MVTO_BATCH             IN (A.TIP_MVTO_BATCH            , 'ZZ')  -- v1.01
                  AND C.COD_SUSEP_AGT              IN ('999999999999999'           , '999999999999999')  -- v1.01
                  AND C.TIP_CLASSIFICACAO_CORRETOR IN ('ZZ'                        , 'ZZ')  -- v1.01
                  AND C.COD_CANAL_ORIGEN           IN (A.COD_CANAL_ORIGEM          , '99999')  -- v1.01
                  AND C.COD_CANAL_COMERC_ENTRADA   IN (A.COD_CANAL_COMERC_ENTRADA  , '-1')  -- v1.01
                  AND C.COD_CANAL_COMERC_CALCULO   IN (A.COD_CANAL_COMERC_CALCULO  , '-1')  -- v1.01
                  AND C.MCA_ZERO_KM                IN (A.MCA_ZERO_KM               , 'Z')  -- v1.01
                  AND C.MCA_SINI_ULT_VIGENCIA      IN (A.MCA_SINI_ULT_VIGENCIA     , 'Z')  -- v1.01
                  AND C.COD_AFINIDADE              IN ('99999'                     , '99999')  -- v1.01
                  AND C.MCA_BAJA                   =  'N'
                  AND  C.FEC_VALIDEZ = (  SELECT max(D.FEC_VALIDEZ) -- V 5.20
                                  FROM G2109013_VCR D
                                  WHERE D.COD_CIA                    = C.COD_CIA
                                  AND D.COD_RAMO                   = C.COD_RAMO
                                  AND D.TIP_SEGURO                 = C.TIP_SEGURO
                                  AND D.NUM_POLIZA_GRUPO           = C.NUM_POLIZA_GRUPO
                                  AND D.COD_AGT                    = C.COD_AGT
                                  AND D.COD_NIVEL1                 = C.COD_NIVEL1
                                  AND D.COD_NIVEL2                 = C.COD_NIVEL2
                                  AND D.COD_NIVEL3                 = C.COD_NIVEL3
                                  AND D.COD_CANAL1                 = C.COD_CANAL1
                                  AND D.COD_CANAL2                 = C.COD_CANAL2
                                  AND D.COD_CANAL3                 = C.COD_CANAL3
                                  AND D.NUM_CONTRATO               = C.NUM_CONTRATO
                                  AND D.NUM_SUBCONTRATO            = C.NUM_SUBCONTRATO
                                  AND D.NUM_POLIZA_CLIENTE         = C.NUM_POLIZA_CLIENTE
                                  AND D.NUM_POLIZA                 = C.NUM_POLIZA
                                  AND D.COD_MODALIDAD              = C.COD_MODALIDAD
                                  AND D.TIP_MVTO_BATCH             = C.TIP_MVTO_BATCH
                                  AND D.COD_SUSEP_AGT              = C.COD_SUSEP_AGT
                                  AND D.TIP_CLASSIFICACAO_CORRETOR = C.TIP_CLASSIFICACAO_CORRETOR
                                  AND D.COD_CANAL_ORIGEN           = C.COD_CANAL_ORIGEN
                                  AND D.COD_CANAL_COMERC_ENTRADA   = C.COD_CANAL_COMERC_ENTRADA
                                  AND D.COD_CANAL_COMERC_CALCULO   = C.COD_CANAL_COMERC_CALCULO
                                  AND D.MCA_ZERO_KM                = C.MCA_ZERO_KM
                                  AND D.MCA_SINI_ULT_VIGENCIA      = C.MCA_SINI_ULT_VIGENCIA
                                  AND D.COD_AFINIDADE              = C.COD_AFINIDADE
                                  AND D.MCA_BAJA                   = C.MCA_BAJA
                                  AND D.FEC_VALIDEZ               <= NVL(to_date(A.FEC_PRIMEIRO_CALCULO, 'DD/MM/YYYY'),
                                                                         to_date(A.FEC_EMISION, 'DD/MM/YYYY'))
                             )

      )


       SELECT 'COD_CIA'                             AS NOM_COD_CIA,
             C_COTACOES.COD_CIA                    AS COD_CIA,
             'NUM_COTIZACION'                      AS NOM_NUM_COTIZACION,
             C_COTACOES.NUM_COTIZACION             AS NUM_COTIZACION,
             'NUM_POLIZA_RENOV'                    AS NOM_NUM_POLIZA_RENOV,
             C_DADOS.NUM_POLIZA_RENOV              AS NUM_POLIZA_RENOV,
             'NOM_TERCERO'                         AS NOM_NOM_TERCERO,
             C_COTACOES.NOM_TERCERO                AS NOM_TERCERO,
             'NUM_SERIE'                           AS NOM_NUM_SERIE,
             C_DADOS.NUM_SERIE                     AS NUM_SERIE,
             'NUM_MATRICULA'                       AS NOM_NUM_MATRICULA,
             C_DADOS.NUM_MATRICULA                 AS NUM_MATRICULA,
             'TXT_SUB_MODELO'                      AS NOM_TXT_SUB_MODELO,
             C_DADOS.TXT_SUB_MODELO                AS TXT_SUB_MODELO,
             'MCA_RENOVACION'                      AS NOM_MCA_RENOVACION,
             NVL(C_DADOS.MCA_RENOVACION, trn.NO)   AS MCA_RENOVACION,
             'MCA_RENOV_OUTRAS'                    AS NOM_MCA_RENOV_OUTRAS,
             C_DADOS.MCA_RENOV_OUTRAS              AS MCA_RENOV_OUTRAS,
             'COD_TIP_RENOV'                       AS NOM_COD_TIP_RENOV,
             DECODE(C_DADOS.MCA_RENOV_OUTRAS, '2', NVL(C_DADOS.COD_TIP_RENOV, '1'), '6', NVL(C_DADOS.COD_TIP_RENOV, '1'), NULL) AS COD_TIP_RENOV,
             'FEC_VCTO_POLIZA_CONGENERE'           AS NOM_FEC_VCTO_POLIZA_CONGENERE,
             C_DADOS.FEC_VCTO_POLIZA_CONGENERE     AS FEC_VCTO_POLIZA_CONGENERE,
             'TIP_SITU_COTI_IND_RENOV'             AS NOM_TIP_SITU_COTI_IND_RENOV,
             C_DADOS.TIP_SITU_COTI_IND_RENOV       AS TIP_SITU_COTI_IND_RENOV,
             'NUM_PASO_ATUAL'                      AS NOM_NUM_PASO_ATUAL,
             C_COTACOES.NUM_PASO_ATUAL             AS NUM_PASO_ATUAL,
             'FEC_PRAZO_VALIDADE'                  AS NOM_FEC_PRAZO_VALIDADE,
             to_char( to_date(C_DADOS.FEC_EMISION, 'DD/MM/YYYY') + DECODE(C_DADOS.MCA_RENOV_OUTRAS, '2', NVL(C_PRAZO.NUM_DIAS_VALIDEZ, '5'), '4', NVL(C_PRAZO.NUM_DIAS_VALIDEZ, '7'), '6', NVL(C_PRAZO.NUM_DIAS_VALIDEZ, '5'), NVL(C_PRAZO.NUM_DIAS_VALIDEZ, '7')), 'dd/mm/yyyy') AS FEC_PRAZO_VALIDADE  -- v5.26

       FROM C_COTACOES
         INNER JOIN  C_DADOS  on C_DADOS.COD_CIA = C_DADOS.COD_CIA   AND C_DADOS.COD_RAMO = C_DADOS.COD_RAMO  AND C_COTACOES.NUM_COTIZACION = C_DADOS.NUM_COTIZACION
         left JOIN ( select * from C_PRAZO where  C_PRAZO.COD_AGT =  (select min(COD_AGT) from C_PRAZO ) order by COD_AGT asc, FEC_VALIDEZ  desc) C_PRAZO ON  C_DADOS.NUM_COTIZACION = C_PRAZO.NUM_COTIZACION;
         -- F v 5.20
     --
   END IF;
     --
     p_gerar_xml_cotacao(l_retorno, l_xml);
     g_xml := l_xml;
     --
     mx('F', 'p_lee_cotacao');
     --
  EXCEPTION
     WHEN OTHERS THEN
        --
        mx('F', 'p_lee_cotacao - EXCEPTION');
        --
  END p_lee_cotacao;
    --
    -- INICIO V 2.03
    --
    FUNCTION f_mca_provisional(p_cod_cia                A2000030.cod_cia         %TYPE,
                               p_num_poliza             A2000030.num_poliza      %TYPE
                               )
             RETURN A2000030.mca_provisional%TYPE IS
      --
      l_mca_provisional A2000030.mca_provisional%TYPE;
      --
    BEGIN
      --
      -- Verifica se existe alguma cotacao de endosso (nao efetivada) em andamento
      --
      SELECT mca_provisional
        INTO l_mca_provisional
        FROM a2000030 A30
       WHERE cod_cia = p_cod_cia
         AND num_poliza = p_num_poliza
         AND num_spto = (SELECT MAX(num_spto)
                           FROM a2000030
                          WHERE cod_cia = A30.cod_cia
                            AND num_poliza = A30.num_poliza);
      --
      RETURN l_mca_provisional;
      --
    END f_mca_provisional;
    --
    FUNCTION f_apolice_cancelada(p_cod_cia                A2000030.cod_cia         %TYPE,
                                 p_num_poliza             A2000030.num_poliza      %TYPE
                                )
             RETURN NUMBER IS
      --
      l_apolice_cancelada NUMBER;
      --
    BEGIN
      --
      -- Verifica se existe alguma cotacao de endosso (nao efetivada) em andamento
      --
      SELECT COUNT(1)
        INTO l_apolice_cancelada
        FROM a2000030
       WHERE cod_cia = p_cod_cia
         AND num_poliza = p_num_poliza
         AND mca_poliza_anulada = trn.SI;
      --
      RETURN l_apolice_cancelada;
      --
    END f_apolice_cancelada;
    --
    FUNCTION f_existe_cotacao_endosso(p_cod_cia                A2000030.cod_cia         %TYPE,
                                      p_num_poliza             A2000030.num_poliza      %TYPE
                                )
             RETURN NUMBER IS
      --
      l_existe_cotacao_endosso NUMBER;
      --
    BEGIN
      --
      -- Verifica se existe alguma cotacao de endosso (nao efetivada) em andamento
      --
      SELECT COUNT(1)
        INTO l_existe_cotacao_endosso
        FROM a2000221
       WHERE cod_cia = p_cod_cia
         AND num_poliza = p_num_poliza
         AND cod_error = g_k_error_cotacao;

      --
      RETURN l_existe_cotacao_endosso;
      --
    END f_existe_cotacao_endosso;
    --
    FUNCTION f_busca_chassi_mcc(p_cod_cia                A2000030.cod_cia         %TYPE,
                                p_num_poliza             A2000030.num_poliza      %TYPE,
                                p_cod_ramo               A2000030.cod_ramo        %TYPE,
                                p_chassi                 A2000020.val_campo       %TYPE,
                                p_existe_cotacao_endosso NUMBER
                                )
             RETURN VARCHAR2 IS
      --
      l_num_chassi A2000020.val_campo   %TYPE;
      --
    BEGIN
      --
      -- Se tem cotacao de endosso (nao efetivada) em andamento, nao pode pegar o ultimo spto
      -- Cotacao de endosso, ao alterar o chassi, cria um novo registro e o coloca como vigente
      --
      IF p_existe_cotacao_endosso > 0 THEN
        --
        SELECT val_campo
        INTO l_num_chassi
        FROM A2000020 a20
       WHERE cod_cia = p_cod_cia
         AND num_poliza    = p_num_poliza
         AND cod_ramo      = p_cod_ramo
         AND num_riesgo    = trn.UNO
         AND num_periodo   = trn.UNO
         AND cod_campo     = 'NUM_SERIE'
         AND val_campo     = NVL(to_char(p_chassi), val_campo)
         AND val_cor_campo = SUBSTR(to_char(NVL(p_chassi,val_campo)),1,10)
         AND num_spto = (SELECT MAX(num_spto)
                           FROM A2000020
                          WHERE cod_cia = a20.cod_cia
                            AND num_poliza = a20.num_poliza
                            AND cod_ramo = a20.cod_ramo
                            AND num_riesgo = trn.UNO
                            AND num_periodo   = trn.UNO
                            AND cod_campo     = 'NUM_SERIE'
                            AND num_spto < (SELECT MAX(num_spto)
                                              FROM a2000221
                                             WHERE cod_cia = a20.cod_cia
                                               AND num_poliza = a20.num_poliza
                                               AND cod_error = g_k_error_cotacao));
         --
      ELSE
        --
        SELECT val_campo
          INTO l_num_chassi
          FROM A2000020 a20
         WHERE cod_cia = p_cod_cia
           AND num_poliza    = p_num_poliza
           AND cod_ramo      = p_cod_ramo
           AND num_riesgo    = trn.UNO
           AND num_periodo   = trn.UNO
           AND cod_campo     = 'NUM_SERIE'
           AND val_campo     = NVL(to_char(p_chassi), val_campo)
           AND val_cor_campo = SUBSTR(to_char(NVL(p_chassi,val_campo)),1,10)
           AND num_spto = (SELECT MAX(num_spto)
                             FROM A2000020
                            WHERE cod_cia = a20.cod_cia
                              AND num_poliza = a20.num_poliza
                              AND cod_ramo = a20.cod_ramo
                              AND num_riesgo = trn.UNO
                              AND num_periodo   = trn.UNO
                              AND cod_campo     = 'NUM_SERIE');
      --
      END IF;
      --
      RETURN l_num_chassi;
      --
    END f_busca_chassi_mcc;
    --
    FUNCTION f_busca_placa_mcc (p_cod_cia       A2000030.cod_cia         %TYPE,
                                p_num_poliza    A2000030.num_poliza      %TYPE,
                                p_cod_ramo      A2000030.cod_ramo        %TYPE,
                                p_placa         A2000020.val_campo       %TYPE,
                                p_existe_cotacao_endosso NUMBER
                                )
             RETURN VARCHAR2 IS
      --
      l_num_placa A2000020.val_campo   %TYPE;
      --
    BEGIN
      --
      -- Se tem cotacao de endosso (nao efetivada) em andamento, nao pode pegar o ultimo spto
      -- Cotacao de endosso, ao alterar a placa, cria um novo registro e o coloca como vigente
      --
      BEGIN
      --
          IF p_existe_cotacao_endosso > 0 THEN
            --
            SELECT val_campo
              INTO l_num_placa
              FROM A2000020 a20
             WHERE cod_cia = p_cod_cia
               AND num_poliza    = p_num_poliza
               AND cod_ramo      = p_cod_ramo
               AND num_riesgo    = trn.UNO
               AND num_periodo   = trn.UNO
               AND cod_campo     = 'NUM_MATRICULA'
               AND val_campo     = NVL(to_char(p_placa), val_campo)
               AND val_cor_campo = SUBSTR(to_char(NVL(p_placa,val_campo)),1,10)
               AND num_spto = (SELECT MAX(num_spto)
                               FROM A2000020
                              WHERE cod_cia = a20.cod_cia
                                AND num_poliza = a20.num_poliza
                                AND cod_ramo = a20.cod_ramo
                                AND num_riesgo = trn.UNO
                                AND num_periodo   = trn.UNO
                                AND cod_campo     = 'NUM_MATRICULA'
                                AND num_spto < (SELECT MAX(num_spto)
                                                  FROM a2000221
                                                 WHERE cod_cia = a20.cod_cia
                                                   AND num_poliza = a20.num_poliza
                                                   AND cod_error = g_k_error_cotacao));
          --
          ELSE
            --
            SELECT val_campo
              INTO l_num_placa
              FROM A2000020 a20
             WHERE cod_cia = p_cod_cia
               AND num_poliza    = p_num_poliza
               AND cod_ramo      = p_cod_ramo
               AND num_riesgo    = trn.UNO
               AND num_periodo   = trn.UNO
               AND cod_campo     = 'NUM_MATRICULA'
               AND val_campo     = NVL(to_char(p_placa), val_campo)
               AND val_cor_campo = SUBSTR(to_char(NVL(p_placa,val_campo)),1,10)
               AND num_spto = (SELECT MAX(num_spto)
                                 FROM A2000020
                                WHERE cod_cia = a20.cod_cia
                                  AND num_poliza = a20.num_poliza
                                  AND cod_ramo = a20.cod_ramo
                                  AND num_riesgo = trn.UNO
                                  AND num_periodo   = trn.UNO
                                  AND cod_campo     = 'NUM_MATRICULA');
            --
          END IF;
          --
        --LSS - TRATAMENTO DE EXCECAO QUANDO A PLACA NAO FOR INFORMADA PARA VEICULO ZERO KM.
      EXCEPTION WHEN OTHERS THEN
            --
          l_num_placa:= NULL;
          --
      END;
      --
      RETURN l_num_placa;
      --
    END f_busca_placa_mcc;
    --
    FUNCTION f_busca_ano_fab_mcc (p_cod_cia       A2000030.cod_cia         %TYPE,
                                  p_num_poliza    A2000030.num_poliza      %TYPE,
                                  p_cod_ramo      A2000030.cod_ramo        %TYPE,
                                  p_existe_cotacao_endosso NUMBER
                                  )
             RETURN VARCHAR2 IS
      --
      l_ano_fab A2000020.val_campo   %TYPE;
      --
    BEGIN
      --
      -- Se tem cotacao de endosso (nao efetivada) em andamento, nao pode pegar o ultimo spto
      -- Cotacao de endosso, ao alterar o ano, cria um novo registro e o coloca como vigente
      --
      IF p_existe_cotacao_endosso > 0 THEN
        --
        SELECT val_campo
          INTO l_ano_fab
          FROM A2000020 a20
         WHERE cod_cia = p_cod_cia
           AND num_poliza    = p_num_poliza
           AND num_riesgo    = trn.UNO
           AND num_periodo   = trn.UNO
           AND cod_campo     = 'COD_ANO_FABR'
           AND cod_ramo      = p_cod_ramo
           AND num_spto      = (SELECT MAX(num_spto)
                                  FROM A2000020
                                 WHERE cod_cia = a20.cod_cia
                                   AND num_poliza = a20.num_poliza
                                   AND cod_ramo = a20.cod_ramo
                                   AND num_riesgo = trn.UNO
                                   AND num_periodo   = trn.UNO
                                   AND cod_campo     = 'COD_ANO_FABR'
                                   AND num_spto < (SELECT MAX(num_spto)
                                                     FROM a2000221
                                                    WHERE cod_cia = a20.cod_cia
                                                      AND num_poliza = a20.num_poliza
                                                      AND cod_error = g_k_error_cotacao));
        --
      ELSE
        --
        SELECT val_campo
          INTO l_ano_fab
          FROM A2000020 a20
         WHERE cod_cia = p_cod_cia
           AND num_poliza    = p_num_poliza
           AND num_riesgo    = trn.UNO
           AND num_periodo   = trn.UNO
           AND cod_campo     = 'COD_ANO_FABR'
           AND cod_ramo      = p_cod_ramo
           AND num_spto      = (SELECT MAX(num_spto)
                                  FROM A2000020
                                 WHERE cod_cia = a20.cod_cia
                                   AND num_poliza = a20.num_poliza
                                   AND cod_ramo = a20.cod_ramo
                                   AND num_riesgo = trn.UNO
                                   AND num_periodo   = trn.UNO
                                   AND cod_campo     = 'COD_ANO_FABR');
        --
      END IF;
      --
      RETURN l_ano_fab;
      --
    END f_busca_ano_fab_mcc;
    --
    FUNCTION f_busca_ano_mod_mcc (p_cod_cia       A2000030.cod_cia         %TYPE,
                                  p_num_poliza    A2000030.num_poliza      %TYPE,
                                  p_cod_ramo      A2000030.cod_ramo        %TYPE,
                                  p_existe_cotacao_endosso NUMBER
                                  )
             RETURN VARCHAR2 IS
      --
      l_ano_mod A2000020.val_campo   %TYPE;
      --
    BEGIN
      --
      -- Se tem cotacao de endosso (nao efetivada) em andamento, nao pode pegar o ultimo spto
      -- Cotacao de endosso, ao alterar o ano, cria um novo registro e o coloca como vigente
      --
      IF p_existe_cotacao_endosso > 0 THEN
        --
        SELECT val_campo
          INTO l_ano_mod
          FROM A2000020 a20
         WHERE cod_cia = p_cod_cia
           AND num_poliza    = p_num_poliza
           AND num_riesgo    = trn.UNO
           AND num_periodo   = trn.UNO
           AND cod_campo     = 'ANIO_SUB_MODELO'
           AND cod_ramo      = p_cod_ramo
           AND num_spto      = (SELECT MAX(num_spto)
                                  FROM A2000020
                                 WHERE cod_cia = a20.cod_cia
                                   AND num_poliza = a20.num_poliza
                                   AND cod_ramo = a20.cod_ramo
                                   AND num_riesgo = trn.UNO
                                   AND num_periodo   = trn.UNO
                                   AND cod_campo     = 'ANIO_SUB_MODELO'
                                   AND num_spto < (SELECT MAX(num_spto)
                                                     FROM a2000221
                                                    WHERE cod_cia = a20.cod_cia
                                                      AND num_poliza = a20.num_poliza
                                                      AND cod_error = g_k_error_cotacao));
      --
      ELSE
        --
        SELECT val_campo
          INTO l_ano_mod
          FROM A2000020 a20
         WHERE cod_cia = p_cod_cia
           AND num_poliza    = p_num_poliza
           AND num_riesgo    = trn.UNO
           AND num_periodo   = trn.UNO
           AND cod_campo     = 'ANIO_SUB_MODELO'
           AND cod_ramo      = p_cod_ramo
           AND num_spto      = (SELECT MAX(num_spto)
                                  FROM A2000020
                                 WHERE cod_cia = a20.cod_cia
                                   AND num_poliza = a20.num_poliza
                                   AND cod_ramo = a20.cod_ramo
                                   AND num_riesgo = trn.UNO
                                   AND num_periodo   = trn.UNO
                                   AND cod_campo     = 'ANIO_SUB_MODELO');
        --
      END IF;
      --
      RETURN l_ano_mod;
      --
    END f_busca_ano_mod_mcc;
    --
    FUNCTION f_busca_risco_mcc (p_cod_cia       A2000030.cod_cia         %TYPE,
                                p_num_poliza    A2000030.num_poliza      %TYPE,
                                p_existe_cotacao_endosso NUMBER
                                )
             RETURN VARCHAR2 IS
      --
      l_nom_riesgo A2000031.nom_riesgo   %TYPE;
      --
    BEGIN
      --
      -- Se tem cotacao de endosso (nao efetivada) em andamento, nao pode pegar o ultimo spto
      -- Cotacao de endosso, ao alterar o risco, cria um novo registro e o coloca como vigente
      --
      IF p_existe_cotacao_endosso > 0 THEN
        --
        SELECT LTRIM(substr(nom_riesgo,8))
          INTO l_nom_riesgo
          FROM A2000031 a31
         WHERE cod_cia = p_cod_cia
           AND num_poliza    = p_num_poliza
           AND num_riesgo    = trn.UNO
           AND num_spto      = (SELECT MAX(num_spto)
                                  FROM A2000031
                                 WHERE cod_cia = a31.cod_cia
                                   AND num_poliza = a31.num_poliza
                                   AND num_riesgo = trn.UNO
                                   AND num_spto < (SELECT MAX(num_spto)
                                                     FROM a2000221
                                                    WHERE cod_cia = a31.cod_cia
                                                      AND num_poliza = a31.num_poliza
                                                      AND cod_error = g_k_error_cotacao));
        --
      ELSE
        --
        SELECT LTRIM(substr(nom_riesgo,8))
          INTO l_nom_riesgo
          FROM A2000031 a31
         WHERE cod_cia = p_cod_cia
           AND num_poliza    = p_num_poliza
           AND num_riesgo    = trn.UNO
           AND num_spto      = (SELECT MAX(num_spto)
                                  FROM A2000031
                                 WHERE cod_cia = a31.cod_cia
                                   AND num_poliza = a31.num_poliza
                                   AND num_riesgo = trn.UNO);
        --
      END IF;
      --
      RETURN l_nom_riesgo;
      --
    END f_busca_risco_mcc;
    --
    FUNCTION f_busca_segurado_mcc (p_cod_cia       A2000030.cod_cia         %TYPE,
                                   p_num_poliza    A2000030.num_poliza      %TYPE,
                                   p_tip_docum     A2000060.tip_docum       %TYPE,
                                   p_cod_docum     A2000060.cod_docum       %TYPE

                               )
             RETURN VARCHAR2 IS
      --
      l_nom_segurado VARCHAR2(140);
      --
    BEGIN
      --
      SELECT RTRIM(doc.NOM_TERCERO ||' '||
                   doc.APE1_TERCERO||' '||
                   doc.APE2_TERCERO)
        INTO l_nom_segurado
        FROM A2000060 seg,
             A1001399 doc
       WHERE seg.cod_cia       = p_cod_cia
         AND seg.num_poliza    = p_num_poliza
         AND seg.tip_docum     = NVL(p_tip_docum, seg.tip_docum)
         AND seg.cod_docum     = NVL(p_cod_docum, seg.cod_docum)
         AND seg.tip_benef     = em.TIP_BENEF_ASEGURADO
         AND seg.num_riesgo    = trn.UNO
         AND seg.mca_baja   = trn.NO -- v5.54
         AND seg.num_spto = (SELECT MAX(num_spto)
                               FROM A2000060
                              WHERE cod_cia = seg.cod_cia
                                AND num_poliza = seg.num_poliza
                                AND tip_benef  = em.TIP_BENEF_ASEGURADO
                                AND num_riesgo = trn.UNO)
         AND seg.tip_docum     = doc.tip_docum
         AND seg.cod_docum     = doc.cod_docum
         AND seg.cod_cia       = doc.cod_cia;
      --
      RETURN l_nom_segurado;
      --
    END f_busca_segurado_mcc;
    --
    -- FIM V 2.03


  --v5.26
/* --------------------------------
||  pi_num_dias_validez :
*/ --------------------------------

    FUNCTION p_num_dias_validez (p_cod_cia    IN  G9999992.cod_cia %TYPE,
                    p_num_spto                IN   a2000030.num_spto %TYPE,
                    p_num_apli                IN   a2000030.num_apli %TYPE,
                    p_num_spto_apli           IN   a2000030.num_spto_apli  %TYPE,
                    p_num_cotizacion          IN  C2009030_vcr.num_cotizacion  %TYPE
                    )
    RETURN VARCHAR2 IS

    --
    l_cod_sector                 a1000200.cod_sector            %TYPE;
    l_tip_seguro                 c2000000.val_columna           %TYPE;
    l_fec_primeiro_calculo       c2000000.val_columna           %TYPE;
    l_cod_modalidad              c2000000.val_columna           %TYPE;
    l_tip_produto                c2000000.val_columna           %TYPE;
    l_cod_susep_agt              c2000000.val_columna           %TYPE;
    l_tip_classificacao_corretor c2000000.val_columna           %TYPE;
    l_cod_canal_origem           c2000000.val_columna           %TYPE;
    l_cod_canal_comerc_entrada   c2000000.val_columna           %TYPE;
    l_cod_canal_comerc_calculo   c2000000.val_columna           %TYPE;
    l_mca_zero_km                c2000000.val_columna           %TYPE;
    l_mca_sini_ult_vigencia      c2000000.val_columna           %TYPE;
    l_cod_afinidade              c2000000.val_columna           %TYPE;
    l_tip_segmento               c2000000.val_columna           %TYPE;
    l_reg_a2000030                                   a2000030%ROWTYPE;
    l_num_dias_vigencia          g2109013_vcr.num_dias_vigencia %TYPE; -- v1.58
    --
    BEGIN
    --
    mx('I', 'pi_num_dias_validez');
    --
    --
    BEGIN
      --
      em_k_a2000030.p_lee(p_cod_cia
                ,p_num_cotizacion
                ,p_num_spto
                ,p_num_apli
                ,p_num_spto_apli);
      --
      l_reg_a2000030   := em_k_a2000030.f_devuelve_reg;
      --
      EXCEPTION WHEN OTHERS THEN
      --
      l_reg_a2000030  := NULL;
      --
    END;
    --
    mx('l_reg_a2000030.cod_canal1        ', l_reg_a2000030.cod_canal1);
    mx('l_reg_a2000030.cod_canal3        ', l_reg_a2000030.cod_canal2);
    mx('l_reg_a2000030.cod_canal3        ', l_reg_a2000030.cod_canal3);
    mx('l_reg_a2000030.num_subcontrato   ', l_reg_a2000030.num_subcontrato   );
    mx('l_reg_a2000030.num_poliza_cliente', l_reg_a2000030.num_poliza_cliente);
    BEGIN
      --
      dc_k_a1001800.p_lee(l_reg_a2000030.cod_cia
                ,l_reg_a2000030.cod_ramo);
      --
      l_cod_sector   := dc_k_a1001800.f_cod_sector;
      --
      EXCEPTION WHEN OTHERS THEN
      --
      l_cod_sector   := dc.COD_SECTOR_GEN;
      --
    END;
    --
    mx('l_cod_sector', l_cod_sector);
    BEGIN
      --
      dc_k_a1001332.p_lee(l_reg_a2000030.cod_cia
                ,l_reg_a2000030.cod_agt
                ,to_date(l_reg_a2000030.fec_efec_spto,'DDMMYYYY'));
      --
      l_cod_susep_agt   := dc_k_a1001332.f_cod_agt_colegio;
      --
      EXCEPTION WHEN OTHERS THEN
      --
      l_cod_susep_agt  := ea_k_231_utils.g_k_cod_susep_gen_2;
      --
    END;
    --
    mx('l_cod_susep_agt', l_cod_susep_agt);
    BEGIN
      --
      dc_k_g1001332_vcr.p_lee_vigente(l_reg_a2000030.cod_cia
                      ,l_cod_sector
                      ,l_reg_a2000030.cod_ramo
                      ,l_tip_produto
                      ,l_reg_a2000030.cod_nivel1
                      ,l_reg_a2000030.cod_nivel2
                      ,l_reg_a2000030.cod_nivel3
                      ,l_reg_a2000030.cod_canal1
                      ,l_reg_a2000030.cod_canal2
                      ,l_reg_a2000030.cod_canal3
                      ,g_cod_agt
                      ,l_cod_susep_agt
                      ,l_reg_a2000030.num_poliza_grupo
                      ,l_reg_a2000030.num_contrato
                      ,l_reg_a2000030.num_subcontrato
                      ,l_reg_a2000030.num_poliza_cliente
                      ,l_reg_a2000030.num_poliza
                      ,l_cod_modalidad
                      ,l_tip_segmento
                      ,to_date(l_reg_a2000030.fec_efec_poliza,'DDMMYYYY'));
      --
      l_tip_classificacao_corretor := dc_k_g1001332_vcr.f_tip_classificacao_corretor;
      --
      EXCEPTION WHEN OTHERS THEN
      --
      l_tip_classificacao_corretor := 'ZZ';
      --
    END;
    --


    mx('l_tip_classificacao_corretor', l_tip_classificacao_corretor);
    BEGIN
      --
      ea_k_g2109013.p_lee_vigente(l_reg_a2000030.cod_cia
                    ,l_reg_a2000030.cod_ramo
                    ,g_cod_agt
                    ,l_reg_a2000030.cod_nivel1
                    ,l_reg_a2000030.cod_nivel2
                    ,l_reg_a2000030.cod_nivel3
                    ,l_reg_a2000030.cod_canal1
                    ,l_reg_a2000030.cod_canal2
                    ,l_reg_a2000030.cod_canal3
                    ,l_reg_a2000030.num_poliza_grupo
                    ,l_reg_a2000030.num_contrato
                    ,l_reg_a2000030.num_subcontrato
                    ,l_reg_a2000030.num_poliza_cliente
                    ,l_reg_a2000030.num_poliza
                    ,'1'
                    ,l_reg_a2000030.fec_efec_spto
                    ,l_tip_produto
                    ,l_reg_a2000030.tip_spto
                    ,l_cod_susep_agt
                    ,l_tip_classificacao_corretor
                    ,l_cod_canal_origem
                    ,l_cod_canal_comerc_entrada
                    ,l_cod_canal_comerc_calculo
                    ,l_mca_zero_km
                    ,l_mca_sini_ult_vigencia
                    ,l_cod_afinidade);
      --
      l_num_dias_vigencia    := ea_k_g2109013.f_num_dias_vigencia;
      --
      EXCEPTION WHEN OTHERS THEN
      --
      l_num_dias_vigencia  := '7';
      --
    END;
    --

    mx('l_num_dias_vigencia', l_num_dias_vigencia);
    mx('F', 'pi_num_dias_validez');
    return l_num_dias_vigencia;
    --
    EXCEPTION
      WHEN OTHERS THEN
        --
        mx('E', 'pi_num_dias_validez');
        --
        return '';
        --
END p_num_dias_validez;
 -- f v5.26

    --
    -- Inicio V 1.84 - Criacao de funcoes
    --
    /*FUNCTION f_busca_chassi(p_cod_cia       A2000030.cod_cia         %TYPE,
                            p_num_poliza    A2000030.num_poliza      %TYPE,
                            p_num_spto      A2000030.num_spto        %TYPE,
                            p_num_apli      A2000030.num_apli        %TYPE,
                            p_num_spto_apli A2000030.num_spto_apli   %TYPE,
                            p_cod_ramo      A2000030.cod_ramo        %TYPE,
                            pc_chassi       A2000020.val_campo       %TYPE
                            )
             RETURN VARCHAR2 IS
      --
      l_num_chassi A2000020.val_campo   %TYPE;
      --
    BEGIN
      --
      SELECT val_campo
        INTO l_num_chassi
        FROM A2000020
       WHERE cod_cia = p_cod_cia
         AND num_poliza    = p_num_poliza
         AND num_spto      = p_num_spto
         AND num_apli      = p_num_apli
         AND num_spto_apli = p_num_spto_apli
         AND cod_ramo      = p_cod_ramo
         AND num_riesgo    = trn.UNO
         AND num_periodo   = trn.UNO
         AND cod_campo     = 'NUM_SERIE'
         AND val_campo     = NVL(to_char(pc_chassi), val_campo)
         AND val_cor_campo = SUBSTR(to_char(NVL(pc_chassi,val_campo)),1,10);
      --
      RETURN l_num_chassi;
      --
    END f_busca_chassi;
    --
    FUNCTION f_busca_placa (p_cod_cia       A2000030.cod_cia         %TYPE,
                            p_num_poliza    A2000030.num_poliza      %TYPE,
                            p_num_spto      A2000030.num_spto        %TYPE,
                            p_num_apli      A2000030.num_apli        %TYPE,
                            p_num_spto_apli A2000030.num_spto_apli   %TYPE,
                            p_cod_ramo      A2000030.cod_ramo        %TYPE,
                            p_placa         A2000020.val_campo       %TYPE)
             RETURN VARCHAR2 IS
      --
      l_num_placa A2000020.val_campo   %TYPE;
      --
    BEGIN
      --
      SELECT val_campo
        INTO l_num_placa
        FROM A2000020
       WHERE cod_cia = p_cod_cia
         AND num_poliza    = p_num_poliza
         AND num_spto      = p_num_spto
         AND num_apli      = p_num_apli
         AND num_spto_apli = p_num_spto_apli
         AND cod_ramo      = p_cod_ramo
         AND num_riesgo    = trn.UNO
         AND num_periodo   = trn.UNO
         AND cod_campo     = 'NUM_MATRICULA'
         AND val_campo     = NVL(to_char(p_placa), val_campo)
         AND val_cor_campo = SUBSTR(to_char(NVL(p_placa,val_campo)),1,10);
      --
      RETURN l_num_placa;
      --
    END f_busca_placa;
    --
    FUNCTION f_busca_ano_fab (p_cod_cia       A2000030.cod_cia         %TYPE,
                              p_num_poliza    A2000030.num_poliza      %TYPE,
                              p_num_spto      A2000030.num_spto        %TYPE,
                              p_num_apli      A2000030.num_apli        %TYPE,
                              p_num_spto_apli A2000030.num_spto_apli   %TYPE,
                              p_cod_ramo      A2000030.cod_ramo        %TYPE
                              )
             RETURN VARCHAR2 IS
      --
      l_ano_fab A2000020.val_campo   %TYPE;
      --
    BEGIN
      --
      SELECT val_campo
        INTO l_ano_fab
        FROM A2000020
       WHERE cod_cia = p_cod_cia
         AND num_poliza    = p_num_poliza
         AND num_spto      = p_num_spto
         AND num_apli      = p_num_apli
         AND num_spto_apli = p_num_spto_apli
         AND num_riesgo    = trn.UNO
         AND num_periodo   = trn.UNO
         AND cod_campo     = 'COD_ANO_FABR'
         AND cod_ramo      = p_cod_ramo;
      --
      RETURN l_ano_fab;
      --
    END f_busca_ano_fab;
    --
    FUNCTION f_busca_ano_mod (p_cod_cia       A2000030.cod_cia         %TYPE,
                              p_num_poliza    A2000030.num_poliza      %TYPE,
                              p_num_spto      A2000030.num_spto        %TYPE,
                              p_num_apli      A2000030.num_apli        %TYPE,
                              p_num_spto_apli A2000030.num_spto_apli   %TYPE,
                              p_cod_ramo      A2000030.cod_ramo        %TYPE
                              )
             RETURN VARCHAR2 IS
      --
      l_ano_mod A2000020.val_campo   %TYPE;
      --
    BEGIN
      --
      SELECT val_campo
        INTO l_ano_mod
        FROM A2000020
       WHERE cod_cia = p_cod_cia
         AND num_poliza    = p_num_poliza
         AND num_spto      = p_num_spto
         AND num_apli      = p_num_apli
         AND num_spto_apli = p_num_spto_apli
         AND num_riesgo    = trn.UNO
         AND num_periodo   = trn.UNO
         AND cod_campo     = 'ANIO_SUB_MODELO'
         AND cod_ramo      = p_cod_ramo;
      --
      RETURN l_ano_mod;
      --
    END f_busca_ano_mod;
    --
    FUNCTION f_busca_risco   (p_cod_cia       A2000030.cod_cia         %TYPE,
                              p_num_poliza    A2000030.num_poliza      %TYPE,
                              p_num_spto      A2000030.num_spto        %TYPE,
                              p_num_apli      A2000030.num_apli        %TYPE,
                              p_num_spto_apli A2000030.num_spto_apli   %TYPE
                              )
             RETURN VARCHAR2 IS
      --
      l_nom_riesgo A2000031.nom_riesgo   %TYPE;
      --
    BEGIN
      --
      SELECT LTRIM(substr(nom_riesgo,8))
        INTO l_nom_riesgo
        FROM A2000031
       WHERE cod_cia = p_cod_cia
         AND num_poliza    = p_num_poliza
         AND num_spto      = p_num_spto
         AND num_apli      = p_num_apli
         AND num_spto_apli = p_num_spto_apli
         AND num_riesgo    = trn.UNO;
      --
      RETURN l_nom_riesgo;
      --
    END f_busca_risco;
    --
    FUNCTION f_busca_segurado (p_cod_cia       A2000030.cod_cia         %TYPE,
                               p_num_poliza    A2000030.num_poliza      %TYPE,
                               p_num_spto      A2000030.num_spto        %TYPE,
                               p_num_apli      A2000030.num_apli        %TYPE,
                               p_num_spto_apli A2000030.num_spto_apli   %TYPE,
                               p_tip_docum     A2000060.tip_docum       %TYPE,
                               p_cod_docum     A2000060.cod_docum       %TYPE
             )
             RETURN VARCHAR2 IS
      --
      l_nom_segurado VARCHAR2(140);
      --
    BEGIN
      --
      SELECT RTRIM(doc.NOM_TERCERO ||' '||
                   doc.APE1_TERCERO||' '||
                   doc.APE2_TERCERO)
        INTO l_nom_segurado
        FROM A2000060 seg,
             A1001399 doc
       WHERE seg.cod_cia       = p_cod_cia
         AND seg.num_poliza    = p_num_poliza
         AND seg.num_spto      = p_num_spto
         AND seg.num_apli      = p_num_apli
         AND seg.num_spto_apli = p_num_spto_apli
         AND seg.tip_docum     = NVL(p_tip_docum, seg.tip_docum)
         AND seg.cod_docum     = NVL(p_cod_docum, seg.cod_docum)
         AND seg.tip_benef     = em.TIP_BENEF_ASEGURADO
         AND seg.num_riesgo    = trn.UNO
         AND seg.tip_docum     = doc.tip_docum
         AND seg.cod_docum     = doc.cod_docum
         AND seg.cod_cia       = doc.cod_cia;
      --
      RETURN l_nom_segurado;
      --
    END f_busca_segurado;*/
    --
    -- fim V 1.84 - Criacao de funcoes
  --
    -- INICIO V 2.03
    /* ------------------------------------------------------
    || Busca apolices e gera XML
    */ ------------------------------------------------------
    --
    PROCEDURE p_lee_apolice
    IS
      l_retorno           ref_cursor;
      l_cod_cia           c2009030_vcr.cod_cia   %TYPE;
      l_cod_ramo          c2009030_vcr.cod_ramo  %TYPE;


      l_num_serie         a2009018_vcr.num_chassi%TYPE;

      l_num_matricula     a2000020.val_campo     %TYPE;
      l_num_poliza        a2000030.num_poliza    %TYPE;
      l_tip_docum         a2000030.tip_docum     %TYPE;
      l_cod_docum         a2000030.cod_docum     %TYPE;
      l_cod_agt           a2000030.cod_agt       %TYPE;
      l_cod_sistema       NUMBER; -- V 2.03

      l_encontradas       varchar2(1);
      l_xml               CLOB;
      --
      -- inicio V 1.84 - Criacao de variaveis e cursores
      --
      l_nom_tercero       VARCHAR2(150);
      l_txt_submodelo     VARCHAR2(100);
      l_num_serie_encontrado         a2000020.val_campo%TYPE;
      l_num_matricula_encontrado     a2000020.val_campo%TYPE;
      l_count             PLS_INTEGER;
      l_rec_lista         rec_tab_lista_apolice;
      e_cod_cia_inexistente     EXCEPTION;
      e_cod_ramo_inexistente    EXCEPTION;
      e_cod_agt_inexistente     EXCEPTION;
      e_apolice_provisoria      EXCEPTION; -- V 2.03
      --
      l_mca_poliza_anulada      a2000030.mca_poliza_anulada%TYPE; -- V 2.03
      l_mca_provisional         a2000030.mca_provisional%TYPE; -- V 2.03
      l_existe_cotacao_endosso  NUMBER; -- V 2.03
      l_apolice_cancelada       NUMBER; -- V 2.03
      l_nom_segurado            VARCHAR2(150)   ; -- v 4.33
      l_primeiro_nome           VARCHAR2(50)   ; -- v 4.33
      l_num_dias_validez        a2000030.fec_vcto_poliza  %TYPE; -- v5.26
      l_fec_primeiro_calculo    a2000030.fec_efec_poliza  %TYPE;  -- v5.35
      --
      -- INICIO V 1.88
      --
      -- CURSOR DE BUSCA POR NUMERO DE APOLICE MCC
      --
      CURSOR c_busca_apolice_mcc (pc_cod_cia     A2000030.cod_cia     %TYPE,
                                  pc_cod_ramo    A2000030.cod_ramo    %TYPE,
                                  pc_num_poliza  A2000030.num_poliza  %TYPE,
                                  pc_cod_agt     A2000030.cod_agt     %TYPE)
        IS
        --
          SELECT a.num_poliza,
                 a.num_spto,
                 a.num_apli,
                 a.num_spto_apli,
                 a.fec_vcto_poliza,
                 a.fec_efec_poliza   -- v5.26
            FROM a2000030 a
           WHERE a.cod_cia      = pc_cod_cia
             AND a.cod_ramo     = pc_cod_ramo
             AND a.num_poliza   = pc_num_poliza
             AND a.cod_agt      = pc_cod_agt
             AND a.num_poliza_grupo IS NULL
             AND a.num_spto     = (SELECT NVL(MAX(a30.num_spto),trn.CERO)
                                     FROM a2000030 a30
                                    WHERE a30.num_poliza      = a.num_poliza
                                      AND a30.num_apli        = a.num_apli
                                      AND a30.num_spto_apli   = a.num_spto_apli
                                      AND a30.cod_ramo        = a.cod_ramo
                                      AND a30.cod_cia         = a.cod_cia);
       --
       -- CURSOR DE BUSCA POR SEGURADO MCC
       --
       CURSOR c_busca_segurado_mcc (pc_cod_cia     A2000060.cod_cia     %TYPE,
                                    pc_cod_ramo    A2000030.cod_ramo    %TYPE,
                                    pc_tip_docum   A2000060.tip_docum   %TYPE,
                                    pc_cod_docum   A2000060.cod_docum   %TYPE,
                                    pc_cod_agt     A2000030.cod_agt     %TYPE)
        IS
        --
          SELECT a.num_poliza,
                 a.num_spto,
                 a.num_apli,
                 a.num_spto_apli,
                 a.fec_vcto_poliza
            FROM a2000030 a,
                 a2000060 seg
           WHERE a.cod_cia      = pc_cod_cia
             AND a.cod_ramo     = pc_cod_ramo
             AND a.cod_agt      = pc_cod_agt
             AND a.num_poliza_grupo IS NULL
             AND a.num_poliza   = seg.num_poliza
             AND a.cod_cia      = seg.cod_cia
             AND seg.num_spto   = a.num_spto
             AND seg.num_apli   = a.num_apli
             AND seg.num_spto_apli = a.num_spto_apli
             AND seg.tip_docum  = pc_tip_docum
             AND seg.cod_docum  = pc_cod_docum
             AND seg.tip_benef  = em.TIP_BENEF_ASEGURADO
             AND seg.num_riesgo = trn.UNO
             AND a.num_spto     = (SELECT NVL(MAX(a60.num_spto),trn.CERO)
                                     FROM a2000060 a60
                                    WHERE a60.num_poliza      = a.num_poliza
                                      AND a60.num_apli        = a.num_apli
                                      AND a60.num_spto_apli   = a.num_spto_apli
                                      AND a60.cod_cia         = a.cod_cia);
       --
       -- CURSOR DE BUSCA POR CHASSI MCC - pendente
       --
       CURSOR c_busca_chassi_mcc (pc_cod_cia     A2000020.cod_cia     %TYPE,
                                  pc_cod_ramo    A2000020.cod_ramo    %TYPE,
                                  pc_chassi      A2000020.val_campo   %TYPE,
                                  pc_cod_agt     A2000030.cod_agt     %TYPE)
        IS
        --
          SELECT DISTINCT a.num_poliza,
                          a.fec_vcto_poliza
            FROM a2000030 a,
                 a2000020 ch
           WHERE a.cod_cia      = pc_cod_cia
             AND a.cod_ramo     = pc_cod_ramo
             AND a.cod_agt      = pc_cod_agt
             AND a.num_poliza_grupo IS NULL
             AND ch.num_poliza  = a.num_poliza
             AND ch.cod_cia     = a.cod_cia
             AND ch.cod_ramo    = a.cod_ramo
             AND ch.num_riesgo  = trn.UNO
             AND ch.num_periodo = trn.UNO
             AND ch.cod_campo   = 'NUM_SERIE'
             AND ch.val_campo   = to_char(pc_chassi)
             AND ch.val_cor_campo = SUBSTR(to_char(pc_chassi),1,10);
       --
       -- CURSOR DE BUSCA POR PLACA MCC - pendente
       --
       CURSOR c_busca_placa_mcc (pc_cod_cia     A2000020.cod_cia     %TYPE,
                                 pc_cod_ramo    A2000020.cod_ramo    %TYPE,
                                 pc_placa       A2000020.val_campo   %TYPE,
                                 pc_cod_agt     A2000030.cod_agt     %TYPE)
        IS
        --
          SELECT DISTINCT a.num_poliza,
                          a.fec_vcto_poliza
            FROM a2000030 a,
                 a2000020 ch
           WHERE a.cod_cia      = pc_cod_cia
             AND a.cod_ramo     = pc_cod_ramo
             AND a.cod_agt      = pc_cod_agt
             AND a.num_poliza_grupo IS NULL
             AND ch.num_poliza  = a.num_poliza
             AND ch.cod_cia     = a.cod_cia
             AND ch.cod_ramo    = a.cod_ramo
             AND ch.num_riesgo  = trn.UNO
             AND ch.num_periodo = trn.UNO
             AND ch.cod_campo   = 'NUM_MATRICULA'
             AND ch.val_campo   = to_char(pc_placa)
             AND ch.val_cor_campo = SUBSTR(to_char(pc_placa),1,10);
      --
      -- FIM V 1.88
      --
      -- CURSOR DE BUSCA POR NUMERO DE APOLICE
      --
      CURSOR c_busca_apolice (pc_cod_cia     A2000030.cod_cia     %TYPE,
                              pc_cod_ramo    A2000030.cod_ramo    %TYPE,
                              pc_num_poliza  A2000030.num_poliza  %TYPE,
                              pc_cod_agt     A2000030.cod_agt     %TYPE)
        IS
        --
          SELECT a.num_poliza,
                 a.num_spto,
                 a.num_apli,
                 a.num_spto_apli,
                 a.fec_vcto_poliza,
                 a.fec_efec_poliza    -- v 5.26
            FROM a2000030 a
           WHERE a.cod_cia      = pc_cod_cia
             AND a.cod_ramo     = pc_cod_ramo
             AND a.num_poliza   = pc_num_poliza
             AND a.cod_agt      = pc_cod_agt
             AND a.num_poliza_grupo IS NULL
             AND a.num_spto     = (SELECT NVL(MAX(a30.num_spto),trn.CERO)
                                     FROM a2000030 a30
                                    WHERE a30.num_poliza      = a.num_poliza
                                      AND a30.num_apli        = a.num_apli
                                      AND a30.num_spto_apli   = a.num_spto_apli
                                      AND a30.cod_ramo        = a.cod_ramo
                                      AND a30.cod_cia         = a.cod_cia)
             --
             AND NOT EXISTS (SELECT 1
                               FROM a2000030 canc
                              WHERE canc.num_poliza           = a.num_poliza
                                AND canc.num_apli             = a.num_apli
                                AND canc.num_spto_apli        = a.num_spto_apli
                                AND canc.mca_poliza_anulada   = trn.SI
                                AND canc.cod_ramo             = a.cod_ramo
                                AND canc.cod_cia              = a.cod_cia);
       --
       -- CURSOR DE BUSCA POR SEGURADO
       --
       CURSOR c_busca_segurado (pc_cod_cia     A2000060.cod_cia     %TYPE,
                                pc_cod_ramo    A2000030.cod_ramo    %TYPE,
                                pc_tip_docum   A2000060.tip_docum   %TYPE,
                                pc_cod_docum   A2000060.cod_docum   %TYPE,
                                pc_cod_agt     A2000030.cod_agt     %TYPE)
        IS
        --
          SELECT a.num_poliza,
                 a.num_spto,
                 a.num_apli,
                 a.num_spto_apli,
                 a.fec_vcto_poliza
            FROM a2000030 a,
                 a2000060 seg
           WHERE a.cod_cia      = pc_cod_cia
             AND a.cod_ramo     = pc_cod_ramo
             AND a.cod_agt      = pc_cod_agt
             AND a.num_poliza_grupo IS NULL
             AND a.num_poliza   = seg.num_poliza
             AND a.cod_cia      = seg.cod_cia
             AND seg.num_spto   = a.num_spto
             AND seg.num_apli   = a.num_apli
             AND seg.num_spto_apli = a.num_spto_apli
             AND seg.tip_docum  = pc_tip_docum
             AND seg.cod_docum  = pc_cod_docum
             AND seg.tip_benef  = em.TIP_BENEF_ASEGURADO
             AND seg.num_riesgo = trn.UNO
             AND a.num_spto     = (SELECT NVL(MAX(a60.num_spto),trn.CERO)
                                     FROM a2000060 a60
                                    WHERE a60.num_poliza      = a.num_poliza
                                      AND a60.num_apli        = a.num_apli
                                      AND a60.num_spto_apli   = a.num_spto_apli
                                      AND a60.cod_cia         = a.cod_cia)
             --
             AND NOT EXISTS (SELECT 1
                               FROM a2000030 canc
                              WHERE canc.num_poliza           = a.num_poliza
                                AND canc.num_apli             = a.num_apli
                                AND canc.num_spto_apli        = a.num_spto_apli
                                AND canc.mca_poliza_anulada   = trn.SI
                                AND canc.cod_ramo             = a.cod_ramo
                                AND canc.cod_cia              = a.cod_cia);
       --
       -- CURSOR DE BUSCA POR CHASSI
       --
       CURSOR c_busca_chassi (pc_cod_cia     A2000020.cod_cia     %TYPE,
                              pc_cod_ramo    A2000020.cod_ramo    %TYPE,
                              pc_chassi      A2000020.val_campo   %TYPE,
                              pc_cod_agt     A2000030.cod_agt     %TYPE)
        IS
        --
         SELECT DISTINCT a.num_poliza,
                          a.fec_vcto_poliza
            FROM a2000030 a,
                 a2000020 ch
           WHERE a.cod_cia      = pc_cod_cia
             AND a.cod_ramo     = pc_cod_ramo
             AND a.cod_agt      = pc_cod_agt
             AND a.num_poliza_grupo IS NULL
             AND ch.num_poliza  = a.num_poliza
             AND ch.cod_cia     = a.cod_cia
             AND ch.cod_ramo    = a.cod_ramo
             AND ch.num_riesgo  = trn.UNO
             AND ch.num_periodo = trn.UNO
             AND ch.cod_campo   = 'NUM_SERIE'
             AND ch.val_campo   = to_char(pc_chassi)
             AND ch.val_cor_campo = SUBSTR(to_char(pc_chassi),1,10)
             --
             AND NOT EXISTS (SELECT 1
                               FROM a2000030 canc
                              WHERE canc.num_poliza           = a.num_poliza
                                AND canc.num_apli             = a.num_apli
                                AND canc.num_spto_apli        = a.num_spto_apli
                                AND canc.mca_poliza_anulada   = trn.SI
                                AND canc.cod_ramo             = a.cod_ramo
                                AND canc.cod_cia              = a.cod_cia);
       --
       -- CURSOR DE BUSCA POR PLACA
       --
       CURSOR c_busca_placa (pc_cod_cia     A2000020.cod_cia     %TYPE,
                             pc_cod_ramo    A2000020.cod_ramo    %TYPE,
                             pc_placa       A2000020.val_campo   %TYPE,
                             pc_cod_agt     A2000030.cod_agt     %TYPE)
        IS
        --
          SELECT DISTINCT a.num_poliza,
                          a.fec_vcto_poliza
            FROM a2000030 a,
                 a2000020 ch
           WHERE a.cod_cia      = pc_cod_cia
             AND a.cod_ramo     = pc_cod_ramo
             AND a.cod_agt      = pc_cod_agt
             AND a.num_poliza_grupo IS NULL
             AND ch.num_poliza  = a.num_poliza
             AND ch.cod_cia     = a.cod_cia
             AND ch.cod_ramo    = a.cod_ramo
             AND ch.num_riesgo  = trn.UNO
             AND ch.num_periodo = trn.UNO
             AND ch.cod_campo   = 'NUM_MATRICULA'
             AND ch.val_campo   = to_char(pc_placa)
             AND ch.val_cor_campo = SUBSTR(to_char(pc_placa),1,10)
             --
             AND NOT EXISTS (SELECT 1
                               FROM a2000030 canc
                              WHERE canc.num_poliza           = a.num_poliza
                                AND canc.num_apli             = a.num_apli
                                AND canc.num_spto_apli        = a.num_spto_apli
                                AND canc.mca_poliza_anulada   = trn.SI
                                AND canc.cod_ramo             = a.cod_ramo
                                AND canc.cod_cia              = a.cod_cia);
       --
       -- fim V 1.84 - Criacao de variaveis e cursores
       --
       -- CURSOR DE BUSCA POR NOME
       -- v 4.34
       CURSOR c_busca_nome  (pc_cod_cia     A2000020.cod_cia     %TYPE,
                             pc_cod_ramo    A2000020.cod_ramo    %TYPE,
                             pc_nome        A2000020.val_campo   %TYPE,
                             pc_primeiro_nome   A2000020.val_campo   %TYPE,
                             pc_cod_agt         A2000030.cod_agt     %TYPE )
        IS
        --
         with NOME_COMPLETO as
         (
            SELECT  COD_DOCUM, CONCAT(A.NOM_TERCERO  || ' ' , CONCAT( A.APE1_TERCERO, A.APE2_TERCERO)) NOME_COMPLETO
            FROM  A1001399 A WHERE COD_CIA = PC_COD_CIA    AND NOM_TERCERO LIKE PC_PRIMEIRO_NOME || '%'
          )

            SELECT A.cod_docum,
                   A.num_poliza,
                   A.num_spto,
                   A.num_apli,
                   A.num_spto_apli,
                   A.fec_vcto_poliza,
                   uni.nome_completo,
                   A.mca_provisional
            FROM  a2000030 A
                  INNER JOIN nome_completo uni ON A.cod_docum = uni.cod_docum AND  uni.nome_completo  LIKE  pc_nome || '%'
            WHERE  cod_cia = pc_cod_cia
            AND cod_ramo   = pc_cod_ramo
            AND a.cod_agt  = pc_cod_agt
            AND a.num_spto = trn. CERO
            AND FEC_VCTO_POLIZA >= TRUNC(SYSDATE)
            AND a.num_poliza_grupo IS NULL
            AND NOT EXISTS (SELECT 1
                            FROM a2000030 canc
                            WHERE canc.num_poliza         = A.num_poliza
                            AND canc.num_apli             = A.num_apli
                            AND canc.num_spto_apli        = A.num_spto_apli
                            AND canc.mca_poliza_anulada   = trn.SI
                            AND canc.cod_ramo             = A.cod_ramo
                            AND canc.cod_cia              = A.cod_cia);
                           --
        -- fim V 4.34
        --
    BEGIN
       --
       mx('I', 'p_lee_apolice');
       --
       l_cod_cia         := trn_k_global.devuelve('COD_CIA');
       l_cod_ramo        := trn_k_global.devuelve('COD_RAMO');

       l_num_serie       := trn_k_global.ref_f_global('NUM_SERIE');
       l_num_matricula   := trn_k_global.ref_f_global('NUM_MATRICULA');
       l_num_poliza      := trn_k_global.ref_f_global('NUM_POLIZA');
       l_tip_docum       := trn_k_global.ref_f_global('TIP_DOCUM');
       l_cod_docum       := trn_k_global.ref_f_global('COD_DOCUM');
       l_cod_agt         := trn_k_global.ref_f_global('COD_AGT');
       l_cod_sistema     := trn_k_global.ref_f_global('COD_SISTEMA'); -- V 2.03
       l_nom_segurado    := trn_k_global.ref_f_global('NOM_TERCERO'); -- v 4.33

       --
       mx('l_cod_cia'         , l_cod_cia        );
       mx('l_cod_ramo'        , l_cod_ramo       );

       mx('l_num_serie'       , l_num_serie      );
       mx('l_num_matricula'   , l_num_matricula  );
       mx('l_num_poliza'      , l_num_poliza     );
       mx('l_tip_docum'       , l_tip_docum      );
       mx('l_cod_docum'       , l_cod_docum      );
       mx('l_cod_agt'         , l_cod_agt        );
       mx('l_cod_sistema'     , l_cod_sistema    ); -- V 2.03
       --
       l_rec_lista     := rec_tab_lista_apolice(); -- V 1.84
       l_count         := 1; -- V 1.84
       --
       -- inicio V 1.84
       --
       IF l_cod_cia IS NULL THEN
         RAISE e_cod_cia_inexistente;
       END IF;
       --
       IF l_cod_ramo IS NULL THEN
         RAISE e_cod_ramo_inexistente;
       END IF;
       --
       IF l_cod_agt IS NULL THEN
         RAISE e_cod_agt_inexistente;
       END IF;
       --
       -- INICIO V 2.03
       --
       IF l_cod_sistema = 1 THEN
         --


         IF l_num_poliza IS NOT NULL THEN



           --
           FOR c_apolice IN c_busca_apolice_mcc(l_cod_cia,
                                                l_cod_ramo,
                                                l_num_poliza,
                                                l_cod_agt) LOOP
             --
             BEGIN
               --
               -- {v5.35
               BEGIN
                 --
                 em_k_a2000020.p_lee_vigente(p_cod_cia     => l_cod_cia
                                            ,p_num_poliza  => c_apolice.num_poliza
                                            ,p_num_apli    => c_apolice.num_apli
                                            ,p_num_riesgo  => trn.CERO
                                            ,p_num_periodo => trn.UNO
                                            ,p_cod_campo   => 'FEC_PRIMEIRO_CALCULO'
                                            ,p_cod_ramo    => l_cod_ramo);
                 --
                 l_fec_primeiro_calculo   := to_date(em_k_a2000020.f_val_campo,'DD/MM/YYYY');
                 --
                 IF l_fec_primeiro_calculo IS NULL THEN
                   --
                   l_fec_primeiro_calculo  := to_date(c_apolice.fec_efec_poliza, 'DD/MM/YYYY');
                   --
                 END IF;
                 --
                 EXCEPTION WHEN OTHERS THEN
                   --
                   l_fec_primeiro_calculo  := to_date(TRUNC(SYSDATE), 'DD/MM/YYYY');
                   --
               END;
               -- v5.35}
               --
               -- verifica se apolice e definitiva ou provisoria
               -- se existe cotacao de endosso (nao efetivada) em andamento, entao apolice e definitiva (spto anterior)
               --
               l_existe_cotacao_endosso := f_existe_cotacao_endosso(l_cod_cia,
                                                                    c_apolice.num_poliza);
               --
               IF(l_existe_cotacao_endosso > 0) THEN
                --
                l_mca_provisional := 'N';
                --
               ELSE
                l_mca_provisional := f_mca_provisional(l_cod_cia,
                                                       c_apolice.num_poliza);
                --
               END IF;
               --
               -- busca se a apolice esta cancelada ou nao
               --
               l_apolice_cancelada := f_apolice_cancelada(l_cod_cia,
                                                          c_apolice.num_poliza);
               --
               IF(l_apolice_cancelada > 0) THEN
                --
                l_mca_poliza_anulada := 'S';
               --
               ELSE
                l_mca_poliza_anulada := 'N';
                --
               END IF;
               --
               -- chassi
               --
               l_num_serie_encontrado := f_busca_chassi_mcc(l_cod_cia,
                                                            c_apolice.num_poliza,
                                                            l_cod_ramo,
                                                            l_num_serie,
                                                            l_existe_cotacao_endosso);
               --
               -- placa
               --
               l_num_matricula_encontrado := f_busca_placa_mcc(l_cod_cia,
                                                               c_apolice.num_poliza,
                                                               l_cod_ramo,
                                                               l_num_matricula,
                                                               l_existe_cotacao_endosso);
               --
               -- segurado
               --
               l_nom_tercero := f_busca_segurado_mcc(l_cod_cia,
                                                     c_apolice.num_poliza,
                                                     l_tip_docum,
                                                     l_cod_docum);
               --
               -- risco
               --
               l_txt_submodelo := f_busca_risco_mcc(l_cod_cia,
                                                    c_apolice.num_poliza,
                                                    l_existe_cotacao_endosso);
               --
               -- ano fabricacao
               --
               l_txt_submodelo := l_txt_submodelo || ' ' ||
                                  f_busca_ano_fab_mcc(l_cod_cia,
                                                      c_apolice.num_poliza,
                                                      l_cod_ramo,
                                                      l_existe_cotacao_endosso);
               --
               -- ano modelo
               --
               l_txt_submodelo := l_txt_submodelo || '/' ||
                               f_busca_ano_mod_mcc(l_cod_cia,
                                                   c_apolice.num_poliza,
                                                   l_cod_ramo,
                                                   l_existe_cotacao_endosso);
               --
               --i v5.26
               l_num_dias_validez :=   NVL(l_fec_primeiro_calculo,
                                           to_date(c_apolice.fec_efec_poliza, 'DD/MM/YYYY')) + p_num_dias_validez (l_cod_cia,
                                                                                                                   c_apolice.num_spto,
                                                                                                                   c_apolice.num_apli,
                                                                                                                   c_apolice.num_spto_apli ,
                                                                                                                   c_apolice.num_poliza);

               --f v5.26



               -- popula type
               --
               l_rec_lista.extend();
               l_rec_lista(l_count).nom_campo_nom_tercero     := 'NOM_TOMADOR';
               l_rec_lista(l_count).nom_tercero               := l_nom_tercero;
               l_rec_lista(l_count).nom_campo_num_poliza      := 'NUM_POLIZA';
               l_rec_lista(l_count).num_poliza                := l_num_poliza;
               l_rec_lista(l_count).nom_campo_num_item        := 'NUM_ITEM';
               l_rec_lista(l_count).num_item                  := trn.UNO;
               l_rec_lista(l_count).nom_campo_txt_sub_modelo  := 'TXT_SUB_MODELO';
               l_rec_lista(l_count).txt_sub_modelo            := l_txt_submodelo;
               l_rec_lista(l_count).nom_campo_num_matricula   := 'NUM_MATRICULA';
               l_rec_lista(l_count).num_matricula             := l_num_matricula_encontrado;
               l_rec_lista(l_count).nom_campo_num_serie       := 'NUM_SERIE';
               l_rec_lista(l_count).num_serie                 := l_num_serie_encontrado;
               l_rec_lista(l_count).nom_campo_mca_poliza_anulada := 'MCA_POLIZA_ANULADA'; -- V 1.88
               l_rec_lista(l_count).mca_poliza_anulada        := l_mca_poliza_anulada; -- V 1.88
               l_rec_lista(l_count).nom_campo_mca_provisional := 'MCA_PROVISIONAL'; -- V 1.88
               l_rec_lista(l_count).mca_provisional           := l_mca_provisional; -- V 1.88
               l_rec_lista(l_count).nom_campo_fec_vcto_poliza := 'FEC_VCTO_POLIZA'; -- V 1.88
               l_rec_lista(l_count).fec_vcto_poliza           := c_apolice.fec_vcto_poliza; -- V 1.88
               l_rec_lista(l_count).nom_fec_prazo_validade    := 'FEC_PRAZO_VALIDADE'; -- v5.16
               l_rec_lista(l_count).num_fec_prazo_validade    := to_date(l_num_dias_validez, 'DD/MM/YYYY' ); -- v5.26
               l_rec_lista(l_count).cod_agt                   := l_cod_agt;

               l_count := l_count + 1;
               --
               -- limpando variaveis
               --
               l_num_serie_encontrado     := NULL;
               l_num_matricula_encontrado := NULL;
               --
             --
             EXCEPTION
               WHEN OTHERS THEN
                 l_num_serie_encontrado     := NULL;
                 l_num_matricula_encontrado := NULL;
             END;
             --
           END LOOP;




           --
         ELSIF (l_tip_docum IS NOT NULL AND l_cod_docum IS NOT NULL) THEN








           --
           FOR c_apolice IN c_busca_segurado_mcc(l_cod_cia,
                                                 l_cod_ramo,
                                                 l_tip_docum,
                                                 l_cod_docum,
                                                 l_cod_agt) LOOP
             --
             BEGIN
               --
               -- verifica se apolice e definitiva ou provisoria
               -- se existe cotacao de endosso (nao efetivada) em andamento, entao apolice e definitiva (spto anterior)
               --
               l_existe_cotacao_endosso := f_existe_cotacao_endosso(l_cod_cia,
                                                                    c_apolice.num_poliza);
               --
               IF(l_existe_cotacao_endosso > 0) THEN
                --
                l_mca_provisional := 'N';
                --
               ELSE
                l_mca_provisional := f_mca_provisional(l_cod_cia,
                                                       c_apolice.num_poliza);
                --
               END IF;
               --
               -- busca se a apolice esta cancelada ou nao
               --
               l_apolice_cancelada := f_apolice_cancelada(l_cod_cia,
                                                          c_apolice.num_poliza);
               --
               IF(l_apolice_cancelada > 0) THEN
                --
                l_mca_poliza_anulada := 'S';
               --
               ELSE
                l_mca_poliza_anulada := 'N';
                --
               END IF;
               --
               -- chassi
               --
               l_num_serie_encontrado := f_busca_chassi_mcc(l_cod_cia,
                                                            c_apolice.num_poliza,
                                                            l_cod_ramo,
                                                            l_num_serie,
                                                            l_existe_cotacao_endosso);
               --
               -- placa
               --
               l_num_matricula_encontrado := f_busca_placa_mcc(l_cod_cia,
                                                               c_apolice.num_poliza,
                                                               l_cod_ramo,
                                                               l_num_matricula,
                                                               l_existe_cotacao_endosso);
               --
               -- segurado
               --
               l_nom_tercero := f_busca_segurado_mcc(l_cod_cia,
                                                     c_apolice.num_poliza,
                                                     l_tip_docum,
                                                     l_cod_docum);
               --
               -- risco
               --
               l_txt_submodelo := f_busca_risco_mcc(l_cod_cia,
                                                    c_apolice.num_poliza,
                                                    l_existe_cotacao_endosso);
               --
               -- ano fabricacao
               --
               l_txt_submodelo := l_txt_submodelo || ' ' ||
                                  f_busca_ano_fab_mcc(l_cod_cia,
                                                      c_apolice.num_poliza,



                                                      l_cod_ramo,
                                                      l_existe_cotacao_endosso);
               --
               -- ano modelo
               --
               l_txt_submodelo := l_txt_submodelo || '/' ||
                               f_busca_ano_mod_mcc(l_cod_cia,
                                                   c_apolice.num_poliza,
                                                   l_cod_ramo,
                                                   l_existe_cotacao_endosso);
               --
               -- popula type
               --
               l_rec_lista.extend();
               l_rec_lista(l_count).nom_campo_nom_tercero     := 'NOM_TOMADOR';
               l_rec_lista(l_count).nom_tercero               := l_nom_tercero;
               l_rec_lista(l_count).nom_campo_num_poliza      := 'NUM_POLIZA';
               l_rec_lista(l_count).num_poliza                := c_apolice.num_poliza;
               l_rec_lista(l_count).nom_campo_num_item        := 'NUM_ITEM';
               l_rec_lista(l_count).num_item                  := trn.UNO;
               l_rec_lista(l_count).nom_campo_txt_sub_modelo  := 'TXT_SUB_MODELO';
               l_rec_lista(l_count).txt_sub_modelo            := l_txt_submodelo;
               l_rec_lista(l_count).nom_campo_num_matricula   := 'NUM_MATRICULA';
               l_rec_lista(l_count).num_matricula             := l_num_matricula_encontrado;
               l_rec_lista(l_count).nom_campo_num_serie       := 'NUM_SERIE';
               l_rec_lista(l_count).num_serie                 := l_num_serie_encontrado;
               l_rec_lista(l_count).nom_campo_mca_poliza_anulada := 'MCA_POLIZA_ANULADA'; -- V 1.88
               l_rec_lista(l_count).mca_poliza_anulada        := l_mca_poliza_anulada; -- V 1.88
               l_rec_lista(l_count).nom_campo_mca_provisional := 'MCA_PROVISIONAL'; -- V 1.88
               l_rec_lista(l_count).mca_provisional           := l_mca_provisional; -- V 1.88
               l_rec_lista(l_count).nom_campo_fec_vcto_poliza := 'FEC_VCTO_POLIZA'; -- V 1.88
               l_rec_lista(l_count).fec_vcto_poliza           := c_apolice.fec_vcto_poliza; -- V 1.88
               l_rec_lista(l_count).nom_fec_prazo_validade    := 'FEC_PRAZO_VALIDADE'; -- v5.26
               l_rec_lista(l_count).num_fec_prazo_validade    := to_date(l_num_dias_validez, 'DD/MM/YYYY' ); -- v5.26

               l_rec_lista(l_count).cod_agt                   := l_cod_agt;

               l_count := l_count + 1;
               -- limpando variaveis
               --
               l_num_serie_encontrado     := NULL;
               l_num_matricula_encontrado := NULL;
               --
             --
             EXCEPTION
               WHEN OTHERS THEN
                 l_num_serie_encontrado     := NULL;
                 l_num_matricula_encontrado := NULL;
             END;
             --
           END LOOP;
           --
         ELSIF (l_num_serie IS NOT NULL) THEN
           --
           FOR c_apolice IN c_busca_chassi_MCC(l_cod_cia,
                                               l_cod_ramo,
                                               l_num_serie,
                                               l_cod_agt) LOOP


             --
             BEGIN
             --
               -- verifica se apolice e definitiva ou provisoria
               -- se existe cotacao de endosso (nao efetivada) em andamento, entao apolice e definitiva (spto anterior)
               --
               l_existe_cotacao_endosso := f_existe_cotacao_endosso(l_cod_cia,
                                                                    c_apolice.num_poliza);
               --
               IF(l_existe_cotacao_endosso > 0) THEN
                --
                l_mca_provisional := 'N';
                --
               ELSE
                l_mca_provisional := f_mca_provisional(l_cod_cia,
                                                       c_apolice.num_poliza);
                --
               END IF;
               --
               -- busca se a apolice esta cancelada ou nao
               --
               l_apolice_cancelada := f_apolice_cancelada(l_cod_cia,
                                                          c_apolice.num_poliza);
               --
               IF(l_apolice_cancelada > 0) THEN
                --
                l_mca_poliza_anulada := 'S';
               --
               ELSE
                l_mca_poliza_anulada := 'N';
                --
               END IF;
               --
               -- chassi
               --
               l_num_serie_encontrado := f_busca_chassi_mcc(l_cod_cia,
                                                            c_apolice.num_poliza,
                                                            l_cod_ramo,
                                                            l_num_serie,
                                                            l_existe_cotacao_endosso);
               --
               -- placa
               --
               l_num_matricula_encontrado := f_busca_placa_mcc(l_cod_cia,
                                                               c_apolice.num_poliza,
                                                               l_cod_ramo,
                                                               l_num_matricula,
                                                               l_existe_cotacao_endosso);
               --
               -- segurado
               --
               l_nom_tercero := f_busca_segurado_mcc(l_cod_cia,
                                                     c_apolice.num_poliza,
                                                     l_tip_docum,
                                                     l_cod_docum);
               --
               -- risco
               --
               l_txt_submodelo := f_busca_risco_mcc(l_cod_cia,
                                                    c_apolice.num_poliza,
                                                    l_existe_cotacao_endosso);
               --
               -- ano fabricacao
               --
               l_txt_submodelo := l_txt_submodelo || ' ' ||
                                  f_busca_ano_fab_mcc(l_cod_cia,
                                                      c_apolice.num_poliza,
                                                      l_cod_ramo,
                                                      l_existe_cotacao_endosso);
               --
               -- ano modelo
               --
               l_txt_submodelo := l_txt_submodelo || '/' ||
                               f_busca_ano_mod_mcc(l_cod_cia,
                                                   c_apolice.num_poliza,
                                                   l_cod_ramo,
                                                   l_existe_cotacao_endosso);
               --
               -- popula type
               l_rec_lista.extend();
               l_rec_lista(l_count).nom_campo_nom_tercero     := 'NOM_TOMADOR';
               l_rec_lista(l_count).nom_tercero               := l_nom_tercero;
               l_rec_lista(l_count).nom_campo_num_poliza      := 'NUM_POLIZA';
               l_rec_lista(l_count).num_poliza                := c_apolice.num_poliza;
               l_rec_lista(l_count).nom_campo_num_item        := 'NUM_ITEM';
               l_rec_lista(l_count).num_item                  := trn.UNO;
               l_rec_lista(l_count).nom_campo_txt_sub_modelo  := 'TXT_SUB_MODELO';
               l_rec_lista(l_count).txt_sub_modelo            := l_txt_submodelo;
               l_rec_lista(l_count).nom_campo_num_matricula   := 'NUM_MATRICULA';
               l_rec_lista(l_count).num_matricula             := l_num_matricula_encontrado;
               l_rec_lista(l_count).nom_campo_num_serie       := 'NUM_SERIE';
               l_rec_lista(l_count).num_serie                 := l_num_serie_encontrado;
               l_rec_lista(l_count).nom_campo_mca_poliza_anulada := 'MCA_POLIZA_ANULADA'; -- V 1.88
               l_rec_lista(l_count).mca_poliza_anulada        := l_mca_poliza_anulada; -- V 1.88
               l_rec_lista(l_count).nom_campo_mca_provisional := 'MCA_PROVISIONAL'; -- V 1.88
               l_rec_lista(l_count).mca_provisional           := l_mca_provisional; -- V 1.88
               l_rec_lista(l_count).nom_campo_fec_vcto_poliza := 'FEC_VCTO_POLIZA'; -- V 1.88
               l_rec_lista(l_count).fec_vcto_poliza           := c_apolice.fec_vcto_poliza; -- V 1.88
               l_rec_lista(l_count).nom_fec_prazo_validade    := 'FEC_PRAZO_VALIDADE'; -- v5.26
               l_rec_lista(l_count).num_fec_prazo_validade    := to_date(l_num_dias_validez, 'DD/MM/YYYY' ); -- v5.26
               l_rec_lista(l_count).cod_agt                   := l_cod_agt;

               l_count := l_count + 1;
               --
               -- limpando variaveis
               --
               l_num_matricula_encontrado := NULL;
               l_num_serie_encontrado := NULL;
               --
             --
             EXCEPTION
               WHEN OTHERS THEN
                 l_num_serie_encontrado     := NULL;
                 l_num_matricula_encontrado := NULL;
             END;
             --
           END LOOP;
         ELSIF (l_num_matricula IS NOT NULL) THEN
           --
           FOR c_apolice IN c_busca_placa_mcc(l_cod_cia,
                                              l_cod_ramo,
                                              l_num_matricula,


                                              l_cod_agt) LOOP
             --
             BEGIN
             --
               -- verifica se apolice e definitiva ou provisoria
               -- se existe cotacao de endosso (nao efetivada) em andamento, entao apolice e definitiva (spto anterior)
               --
               l_existe_cotacao_endosso := f_existe_cotacao_endosso(l_cod_cia,
                                                                    c_apolice.num_poliza);
               --
               IF(l_existe_cotacao_endosso > 0) THEN
                --
                l_mca_provisional := 'N';
                --
               ELSE
                l_mca_provisional := f_mca_provisional(l_cod_cia,
                                                       c_apolice.num_poliza);
                --
               END IF;
               --
               -- busca se a apolice esta cancelada ou nao
               --
               l_apolice_cancelada := f_apolice_cancelada(l_cod_cia,
                                                          c_apolice.num_poliza);
               --
               IF(l_apolice_cancelada > 0) THEN
                --
                l_mca_poliza_anulada := 'S';
               --
               ELSE
                l_mca_poliza_anulada := 'N';
                --
               END IF;
               --
               -- chassi
               --
               l_num_serie_encontrado := f_busca_chassi_mcc(l_cod_cia,
                                                            c_apolice.num_poliza,
                                                            l_cod_ramo,
                                                            l_num_serie,
                                                            l_existe_cotacao_endosso);
               --
               -- placa
               --
               l_num_matricula_encontrado := f_busca_placa_mcc(l_cod_cia,
                                                               c_apolice.num_poliza,
                                                               l_cod_ramo,
                                                               l_num_matricula,
                                                               l_existe_cotacao_endosso);
               --
               --
               -- segurado
               --
               l_nom_tercero := f_busca_segurado_mcc(l_cod_cia,
                                                     c_apolice.num_poliza,
                                                     l_tip_docum,
                                                     l_cod_docum);
               --
               -- risco
               --
               l_txt_submodelo := f_busca_risco_mcc(l_cod_cia,
                                                    c_apolice.num_poliza,
                                                    l_existe_cotacao_endosso);
               --
               -- ano fabricacao
               --
               l_txt_submodelo := l_txt_submodelo || ' ' ||
                                  f_busca_ano_fab_mcc(l_cod_cia,
                                                      c_apolice.num_poliza,
                                                      l_cod_ramo,
                                                      l_existe_cotacao_endosso);
               --
               -- ano modelo
               --
               l_txt_submodelo := l_txt_submodelo || '/' ||
                               f_busca_ano_mod_mcc(l_cod_cia,
                                                   c_apolice.num_poliza,
                                                   l_cod_ramo,
                                                   l_existe_cotacao_endosso);
               --
               -- popula type
               --
               l_rec_lista.extend();
               l_rec_lista(l_count).nom_campo_nom_tercero     := 'NOM_TOMADOR';
               l_rec_lista(l_count).nom_tercero               := l_nom_tercero;
               l_rec_lista(l_count).nom_campo_num_poliza      := 'NUM_POLIZA';
               l_rec_lista(l_count).num_poliza                := c_apolice.num_poliza;
               l_rec_lista(l_count).nom_campo_num_item        := 'NUM_ITEM';
               l_rec_lista(l_count).num_item                  := trn.UNO;
               l_rec_lista(l_count).nom_campo_txt_sub_modelo  := 'TXT_SUB_MODELO';
               l_rec_lista(l_count).txt_sub_modelo            := l_txt_submodelo;
               l_rec_lista(l_count).nom_campo_num_matricula   := 'NUM_MATRICULA';
               l_rec_lista(l_count).num_matricula             := l_num_matricula;
               l_rec_lista(l_count).nom_campo_num_serie       := 'NUM_SERIE';
               l_rec_lista(l_count).num_serie                 := l_num_serie_encontrado;
               l_rec_lista(l_count).nom_campo_mca_poliza_anulada := 'MCA_POLIZA_ANULADA'; -- V 1.88
               l_rec_lista(l_count).mca_poliza_anulada        := l_mca_poliza_anulada; -- V 1.88
               l_rec_lista(l_count).nom_campo_mca_provisional := 'MCA_PROVISIONAL'; -- V 1.88
               l_rec_lista(l_count).mca_provisional           := l_mca_provisional; -- V 1.88
               l_rec_lista(l_count).nom_campo_fec_vcto_poliza := 'FEC_VCTO_POLIZA'; -- V 1.88
               l_rec_lista(l_count).fec_vcto_poliza           := c_apolice.fec_vcto_poliza; -- V 1.88
               l_rec_lista(l_count).nom_fec_prazo_validade    := 'FEC_PRAZO_VALIDADE'; -- v5.26
               l_rec_lista(l_count).num_fec_prazo_validade    := to_date(l_num_dias_validez, 'DD/MM/YYYY' ); -- v5.26
               l_rec_lista(l_count).cod_agt                   := l_cod_agt;

               l_count := l_count + 1;
               --
               -- limpando variaveis
               --
               l_num_serie_encontrado := NULL;
               l_num_matricula_encontrado := NULL;
               --
             --
             EXCEPTION
               WHEN OTHERS THEN
                 l_num_serie_encontrado     := NULL;
                 l_num_matricula_encontrado := NULL;
             END;
             --
           END LOOP;
           --
                    --
         -- v 4.33
         ELSIF (l_nom_segurado IS NOT NULL) THEN

           -- pega primeiro nome
           l_primeiro_nome := TRIM (SUBSTR(l_nom_segurado,0, INSTR(l_nom_segurado,' ' )));
           --
           FOR c_apolice IN c_busca_nome ( l_cod_cia,
                                           l_cod_ramo,
                                           TRIM(l_nom_segurado),
                                           l_primeiro_nome,
                                           l_cod_agt) LOOP
             --
             BEGIN
               --
               -- verifica se apolice e definitiva ou provisoria
               -- se existe cotacao de endosso (nao efetivada) em andamento, entao apolice e definitiva (spto anterior)
               --
               l_existe_cotacao_endosso := f_existe_cotacao_endosso(l_cod_cia,
                                                                    c_apolice.num_poliza);
               --
               IF(l_existe_cotacao_endosso > 0) THEN
                  --
                  l_mca_provisional := 'N';
                  --
               ELSE
                  -- l_mca_provisional := f_mca_provisional(l_cod_cia, c_apolice.num_poliza);
                  l_mca_provisional := c_apolice.mca_provisional;
                --
               END IF;


               -- chassi
               --
               l_num_serie_encontrado := f_busca_chassi_mcc(l_cod_cia,
                                                            c_apolice.num_poliza,
                                                            l_cod_ramo,
                                                            l_num_serie,
                                                            l_existe_cotacao_endosso);
               --
               -- placa
               --
               l_num_matricula_encontrado := f_busca_placa_mcc(l_cod_cia,
                                                               c_apolice.num_poliza,
                                                               l_cod_ramo,
                                                               l_num_matricula,
                                                               l_existe_cotacao_endosso);
               --
               -- segurado
               --
               /*l_nom_tercero := f_busca_segurado_mcc(l_cod_cia,
                                                     c_apolice.num_poliza,
                                                     l_tip_docum,
                                                     l_cod_docum);*/

               l_nom_tercero := c_apolice.NOME_COMPLETO   ;


               --
               -- risco
               --
               l_txt_submodelo := f_busca_risco_mcc(l_cod_cia,
                                                    c_apolice.num_poliza,
                                                    l_existe_cotacao_endosso);
               --
               -- ano fabricacao
               --
               l_txt_submodelo := l_txt_submodelo || ' ' ||
                                  f_busca_ano_fab_mcc(l_cod_cia,
                                                      c_apolice.num_poliza,



                                                      l_cod_ramo,
                                                      l_existe_cotacao_endosso);
               --
               -- ano modelo
               --
               l_txt_submodelo := l_txt_submodelo || '/' ||
                               f_busca_ano_mod_mcc(l_cod_cia,
                                                   c_apolice.num_poliza,
                                                   l_cod_ramo,
                                                   l_existe_cotacao_endosso);
               --
               -- popula type
               --
               l_rec_lista.extend();
               l_rec_lista(l_count).nom_campo_nom_tercero     := 'NOM_TOMADOR';
               l_rec_lista(l_count).nom_tercero               := l_nom_tercero;
               l_rec_lista(l_count).nom_campo_num_poliza      := 'NUM_POLIZA';
               l_rec_lista(l_count).num_poliza                := c_apolice.num_poliza;
               l_rec_lista(l_count).nom_campo_num_item        := 'NUM_ITEM';
               l_rec_lista(l_count).num_item                  := trn.UNO;
               l_rec_lista(l_count).nom_campo_txt_sub_modelo  := 'TXT_SUB_MODELO';
               l_rec_lista(l_count).txt_sub_modelo            := l_txt_submodelo;
               l_rec_lista(l_count).nom_campo_num_matricula   := 'NUM_MATRICULA';
               l_rec_lista(l_count).num_matricula             := l_num_matricula_encontrado;
               l_rec_lista(l_count).nom_campo_num_serie       := 'NUM_SERIE';
               l_rec_lista(l_count).num_serie                 := l_num_serie_encontrado;
               l_rec_lista(l_count).nom_campo_mca_poliza_anulada := 'MCA_POLIZA_ANULADA';
               l_rec_lista(l_count).mca_poliza_anulada        := l_mca_poliza_anulada; -- V 1.88
               l_rec_lista(l_count).nom_campo_mca_provisional := 'MCA_PROVISIONAL'; -- V 1.88
               l_rec_lista(l_count).mca_provisional           := l_mca_provisional; -- V 1.88
               l_rec_lista(l_count).nom_campo_fec_vcto_poliza := 'FEC_VCTO_POLIZA'; -- V 1.88
               l_rec_lista(l_count).fec_vcto_poliza           := c_apolice.fec_vcto_poliza; -- V 1.88
               l_rec_lista(l_count).nom_fec_prazo_validade    := 'FEC_PRAZO_VALIDADE'; -- v5.26
               l_rec_lista(l_count).num_fec_prazo_validade    := to_date(l_num_dias_validez, 'DD/MM/YYYY' ); -- v5.26

               l_rec_lista(l_count).cod_agt                   := l_cod_agt;

               l_count := l_count + 1;
               -- limpando variaveis
               --
               l_num_serie_encontrado     := NULL;
               l_num_matricula_encontrado := NULL;
               --
             --
             EXCEPTION
               WHEN OTHERS THEN
                 l_num_serie_encontrado     := NULL;
                 l_num_matricula_encontrado := NULL;
             END;
             --
           END LOOP;
           -- f v4.33
         END IF;
         --
       ELSE
         --
         IF l_num_poliza IS NOT NULL THEN
           --
           FOR c_apolice IN c_busca_apolice(l_cod_cia,

                                            l_cod_ramo,
                                            l_num_poliza,
                                            l_cod_agt) LOOP
             --
             BEGIN
               --
               -- {v5.35
               BEGIN
                 --
                 em_k_a2000020.p_lee_vigente(p_cod_cia     => l_cod_cia
                                            ,p_num_poliza  => c_apolice.num_poliza
                                            ,p_num_apli    => c_apolice.num_apli
                                            ,p_num_riesgo  => trn.CERO
                                            ,p_num_periodo => trn.UNO
                                            ,p_cod_campo   => 'FEC_PRIMEIRO_CALCULO'
                                            ,p_cod_ramo    => l_cod_ramo);
                 --
                 l_fec_primeiro_calculo   := to_date(em_k_a2000020.f_val_campo,'DD/MM/YYYY');
                 --
                 IF l_fec_primeiro_calculo IS NULL THEN
                   --
                   l_fec_primeiro_calculo  := c_apolice.fec_efec_poliza;
                   --
                 END IF;
                 --
                 EXCEPTION WHEN OTHERS THEN
                   --
                   l_fec_primeiro_calculo  := TRUNC(SYSDATE);
                   --
               END;
               -- v5.35}
               --
               -- verifica se apolice e definitiva ou provisoria
               -- se existe cotacao de endosso (nao efetivada) em andamento, entao apolice e definitiva (spto anterior)
               --
               l_existe_cotacao_endosso := f_existe_cotacao_endosso(l_cod_cia,

                                                                    c_apolice.num_poliza);
               --
               IF(l_existe_cotacao_endosso = 0) THEN
                --
                l_mca_provisional := f_mca_provisional(l_cod_cia,
                                                       c_apolice.num_poliza);
                --
                IF(l_mca_provisional = 'S') THEN
                 --
                 RAISE e_apolice_provisoria;
                 --
                END IF;
                --
               END IF;
               --
               -- chassi
               --

               l_num_serie_encontrado := f_busca_chassi_mcc(l_cod_cia,
                                                            c_apolice.num_poliza,
                                                            l_cod_ramo,
                                                            l_num_serie,
                                                            l_existe_cotacao_endosso);
               --
               -- placa
               --
               l_num_matricula_encontrado := f_busca_placa_mcc(l_cod_cia,
                                                               c_apolice.num_poliza,
                                                               l_cod_ramo,
                                                               l_num_matricula,
                                                               l_existe_cotacao_endosso);
               --
               -- segurado
               --
               l_nom_tercero := f_busca_segurado_mcc(l_cod_cia,
                                                     c_apolice.num_poliza,
                                                     l_tip_docum,
                                                     l_cod_docum);
               --
               -- risco
               --
               l_txt_submodelo := f_busca_risco_mcc(l_cod_cia,
                                                    c_apolice.num_poliza,
                                                    l_existe_cotacao_endosso);
               --
               -- ano fabricacao
               --
               l_txt_submodelo := l_txt_submodelo || ' ' ||
                                  f_busca_ano_fab_mcc(l_cod_cia,
                                                      c_apolice.num_poliza,
                                                      l_cod_ramo,
                                                      l_existe_cotacao_endosso);
               --
               -- ano modelo
               --
               l_txt_submodelo := l_txt_submodelo || '/' ||
                               f_busca_ano_mod_mcc(l_cod_cia,
                                                   c_apolice.num_poliza,
                                                   l_cod_ramo,
                                                   l_existe_cotacao_endosso);
               --
               --i v5.26
               l_num_dias_validez :=   NVL(l_fec_primeiro_calculo,
                                           to_date(c_apolice.fec_efec_poliza, 'DD/MM/YYYY' )) + p_num_dias_validez (l_cod_cia,
                                                                                                                    c_apolice.num_spto,
                                                                                                                    c_apolice.num_apli,
                                                                                                                    c_apolice.num_spto_apli ,
                                                                                                                    c_apolice.num_poliza);

               --f v5.26
               -- popula type
               --
               l_rec_lista.extend();
               l_rec_lista(l_count).nom_campo_nom_tercero     := 'NOM_TOMADOR';
               l_rec_lista(l_count).nom_tercero               := l_nom_tercero;
               l_rec_lista(l_count).nom_campo_num_poliza      := 'NUM_POLIZA';
               l_rec_lista(l_count).num_poliza                := l_num_poliza;
               l_rec_lista(l_count).nom_campo_num_item        := 'NUM_ITEM';
               l_rec_lista(l_count).num_item                  := trn.UNO;
               l_rec_lista(l_count).nom_campo_txt_sub_modelo  := 'TXT_SUB_MODELO';
               l_rec_lista(l_count).txt_sub_modelo            := l_txt_submodelo;
               l_rec_lista(l_count).nom_campo_num_matricula   := 'NUM_MATRICULA';
               l_rec_lista(l_count).num_matricula             := l_num_matricula_encontrado;
               l_rec_lista(l_count).nom_campo_num_serie       := 'NUM_SERIE';
               l_rec_lista(l_count).num_serie                 := l_num_serie_encontrado;
               l_rec_lista(l_count).nom_fec_prazo_validade    := 'FEC_PRAZO_VALIDADE'; -- v5.26
               l_rec_lista(l_count).num_fec_prazo_validade    := to_date(l_num_dias_validez, 'DD/MM/YYYY' ); -- v5.26
               l_rec_lista(l_count).cod_agt                   := l_cod_agt;

               l_count := l_count + 1;
               --
               -- limpando variaveis
               --
               l_num_serie_encontrado     := NULL;
               l_num_matricula_encontrado := NULL;
               --
             --
             EXCEPTION
               WHEN OTHERS THEN
                 l_num_serie_encontrado     := NULL;
                 l_num_matricula_encontrado := NULL;
             END;
             --






           END LOOP;






           --
         ELSIF (l_tip_docum IS NOT NULL AND l_cod_docum IS NOT NULL) THEN
           --
           FOR c_apolice IN c_busca_segurado(l_cod_cia,
                                             l_cod_ramo,
                                             l_tip_docum,
                                             l_cod_docum,
                                             l_cod_agt) LOOP
             --
             BEGIN
               --
               -- verifica se apolice e definitiva ou provisoria
               -- se existe cotacao de endosso (nao efetivada) em andamento, entao apolice e definitiva (spto anterior)
               --
               l_existe_cotacao_endosso := f_existe_cotacao_endosso(l_cod_cia,
                                                                    c_apolice.num_poliza);
               --
               IF(l_existe_cotacao_endosso = 0) THEN
                --
                l_mca_provisional := f_mca_provisional(l_cod_cia,
                                                       c_apolice.num_poliza);
                --
                IF(l_mca_provisional = 'S') THEN
                 --
                 RAISE e_apolice_provisoria;
                 --
                END IF;
                --
               END IF;
               --
               -- chassi
               --
               l_num_serie_encontrado := f_busca_chassi_mcc(l_cod_cia,
                                                            c_apolice.num_poliza,
                                                            l_cod_ramo,
                                                            l_num_serie,
                                                            l_existe_cotacao_endosso);
               --
               -- placa
               --
               l_num_matricula_encontrado := f_busca_placa_mcc(l_cod_cia,
                                                               c_apolice.num_poliza,
                                                               l_cod_ramo,
                                                               l_num_matricula,
                                                               l_existe_cotacao_endosso);
               --
               -- segurado
               --
               l_nom_tercero := f_busca_segurado_mcc(l_cod_cia,
                                                     c_apolice.num_poliza,
                                                     l_tip_docum,
                                                     l_cod_docum);
               --
               -- risco
               --
               l_txt_submodelo := f_busca_risco_mcc(l_cod_cia,
                                                    c_apolice.num_poliza,
                                                    l_existe_cotacao_endosso);
               --
               -- ano fabricacao
               --
               l_txt_submodelo := l_txt_submodelo || ' ' ||
                                  f_busca_ano_fab_mcc(l_cod_cia,
                                                      c_apolice.num_poliza,





                                                      l_cod_ramo,
                                                      l_existe_cotacao_endosso);
               --
               -- ano modelo
               --
               l_txt_submodelo := l_txt_submodelo || '/' ||
                               f_busca_ano_mod_mcc(l_cod_cia,
                                                   c_apolice.num_poliza,
                                                   l_cod_ramo,
                                                   l_existe_cotacao_endosso);
               --
               -- popula type
               --
               l_rec_lista.extend();
               l_rec_lista(l_count).nom_campo_nom_tercero     := 'NOM_TOMADOR';
               l_rec_lista(l_count).nom_tercero               := l_nom_tercero;
               l_rec_lista(l_count).nom_campo_num_poliza      := 'NUM_POLIZA';
               l_rec_lista(l_count).num_poliza                := c_apolice.num_poliza;
               l_rec_lista(l_count).nom_campo_num_item        := 'NUM_ITEM';
               l_rec_lista(l_count).num_item                  := trn.UNO;
               l_rec_lista(l_count).nom_campo_txt_sub_modelo  := 'TXT_SUB_MODELO';
               l_rec_lista(l_count).txt_sub_modelo            := l_txt_submodelo;
               l_rec_lista(l_count).nom_campo_num_matricula   := 'NUM_MATRICULA';
               l_rec_lista(l_count).num_matricula             := l_num_matricula_encontrado;
               l_rec_lista(l_count).nom_campo_num_serie       := 'NUM_SERIE';
               l_rec_lista(l_count).num_serie                 := l_num_serie_encontrado;
               l_rec_lista(l_count).nom_fec_prazo_validade    := 'FEC_PRAZO_VALIDADE'; -- v5.26
               l_rec_lista(l_count).num_fec_prazo_validade    := to_date(l_num_dias_validez, 'DD/MM/YYYY' ); -- v5.26
               l_rec_lista(l_count).cod_agt                   := l_cod_agt;

               l_count := l_count + 1;
               -- limpando variaveis
               --
               l_num_serie_encontrado     := NULL;
               l_num_matricula_encontrado := NULL;
               --
             --
             EXCEPTION
               WHEN OTHERS THEN
                 l_num_serie_encontrado     := NULL;
                 l_num_matricula_encontrado := NULL;
             END;
             --
           END LOOP;
           --
         ELSIF (l_num_serie IS NOT NULL) THEN
           --
           FOR c_apolice IN c_busca_chassi(l_cod_cia,
                                           l_cod_ramo,
                                           l_num_serie,
                                           l_cod_agt) LOOP





             --
             BEGIN
             --
               -- verifica se apolice e definitiva ou provisoria
               -- se existe cotacao de endosso (nao efetivada) em andamento, entao apolice e definitiva (spto anterior)
               --
               l_existe_cotacao_endosso := f_existe_cotacao_endosso(l_cod_cia,
                                                                    c_apolice.num_poliza);
               --
               IF(l_existe_cotacao_endosso = 0) THEN
                --
                l_mca_provisional := f_mca_provisional(l_cod_cia,
                                                       c_apolice.num_poliza);
                --
                IF(l_mca_provisional = 'S') THEN
                 --
                 RAISE e_apolice_provisoria;
                 --
                END IF;
                --
               END IF;
               --
               -- chassi
               --
               l_num_serie_encontrado := f_busca_chassi_mcc(l_cod_cia,
                                                            c_apolice.num_poliza,
                                                            l_cod_ramo,
                                                            l_num_serie,
                                                            l_existe_cotacao_endosso);
               --
               -- placa
               --
               l_num_matricula_encontrado := f_busca_placa_mcc(l_cod_cia,
                                                               c_apolice.num_poliza,
                                                               l_cod_ramo,
                                                               l_num_matricula,
                                                               l_existe_cotacao_endosso);
               --
               -- segurado
               --
               l_nom_tercero := f_busca_segurado_mcc(l_cod_cia,
                                                     c_apolice.num_poliza,
                                                     l_tip_docum,
                                                     l_cod_docum);
               --
               -- risco
               --
               l_txt_submodelo := f_busca_risco_mcc(l_cod_cia,
                                                    c_apolice.num_poliza,
                                                    l_existe_cotacao_endosso);
               --
               -- ano fabricacao
               --
               l_txt_submodelo := l_txt_submodelo || ' ' ||
                                  f_busca_ano_fab_mcc(l_cod_cia,
                                                      c_apolice.num_poliza,
                                                      l_cod_ramo,
                                                      l_existe_cotacao_endosso);
               --
               -- ano modelo
               --
               l_txt_submodelo := l_txt_submodelo || '/' ||
                               f_busca_ano_mod_mcc(l_cod_cia,
                                                   c_apolice.num_poliza,
                                                   l_cod_ramo,
                                                   l_existe_cotacao_endosso);
               --
               -- popula type
               l_rec_lista.extend();
               l_rec_lista(l_count).nom_campo_nom_tercero     := 'NOM_TOMADOR';
               l_rec_lista(l_count).nom_tercero               := l_nom_tercero;
               l_rec_lista(l_count).nom_campo_num_poliza      := 'NUM_POLIZA';
               l_rec_lista(l_count).num_poliza                := c_apolice.num_poliza;
               l_rec_lista(l_count).nom_campo_num_item        := 'NUM_ITEM';
               l_rec_lista(l_count).num_item                  := trn.UNO;
               l_rec_lista(l_count).nom_campo_txt_sub_modelo  := 'TXT_SUB_MODELO';
               l_rec_lista(l_count).txt_sub_modelo            := l_txt_submodelo;
               l_rec_lista(l_count).nom_campo_num_matricula   := 'NUM_MATRICULA';
               l_rec_lista(l_count).num_matricula             := l_num_matricula_encontrado;
               l_rec_lista(l_count).nom_campo_num_serie       := 'NUM_SERIE';
               l_rec_lista(l_count).num_serie                 := l_num_serie_encontrado;
               l_rec_lista(l_count).nom_fec_prazo_validade    := 'FEC_PRAZO_VALIDADE'; -- v5.26
               l_rec_lista(l_count).num_fec_prazo_validade    := to_date(l_num_dias_validez, 'DD/MM/YYYY' ); -- v5.26
               l_rec_lista(l_count).cod_agt                   := l_cod_agt;

               l_count := l_count + 1;
               --
               -- limpando variaveis
               --
               l_num_matricula_encontrado := NULL;
               l_num_serie_encontrado := NULL;
               --
             --
             EXCEPTION
               WHEN OTHERS THEN
                 l_num_serie_encontrado     := NULL;
                 l_num_matricula_encontrado := NULL;
             END;



             --
           END LOOP;
         ELSIF (l_num_matricula IS NOT NULL) THEN
           --
           FOR c_apolice IN c_busca_placa(l_cod_cia,
                                          l_cod_ramo,
                                          l_num_matricula,
                                          l_cod_agt) LOOP
             --
             BEGIN









             --
               -- verifica se apolice e definitiva ou provisoria
               -- se existe cotacao de endosso (nao efetivada) em andamento, entao apolice e definitiva (spto anterior)
               --
               -- verifica se apolice e definitiva ou provisoria
               -- se existe cotacao de endosso (nao efetivada) em andamento, entao apolice e definitiva (spto anterior)
               --
               l_existe_cotacao_endosso := f_existe_cotacao_endosso(l_cod_cia,
                                                                    c_apolice.num_poliza);
               --
               IF(l_existe_cotacao_endosso = 0) THEN
                --
                l_mca_provisional := f_mca_provisional(l_cod_cia,
                                                       c_apolice.num_poliza);
                --
                IF(l_mca_provisional = 'S') THEN
                 --
                 RAISE e_apolice_provisoria;
                 --
                END IF;
                --
               END IF;
               --
               -- chassi
               --
               l_num_serie_encontrado := f_busca_chassi_mcc(l_cod_cia,
                                                            c_apolice.num_poliza,
                                                            l_cod_ramo,
                                                            l_num_serie,
                                                            l_existe_cotacao_endosso);
               --
               -- placa
               --
               l_num_matricula_encontrado := f_busca_placa_mcc(l_cod_cia,
                                                               c_apolice.num_poliza,
                                                               l_cod_ramo,
                                                               l_num_matricula,
                                                               l_existe_cotacao_endosso);
               --
               --
               -- segurado
               --
               l_nom_tercero := f_busca_segurado_mcc(l_cod_cia,
                                                     c_apolice.num_poliza,
                                                     l_tip_docum,
                                                     l_cod_docum);
               --
               -- risco
               --
               l_txt_submodelo := f_busca_risco_mcc(l_cod_cia,
                                                    c_apolice.num_poliza,
                                                    l_existe_cotacao_endosso);
               --
               -- ano fabricacao
               --
               l_txt_submodelo := l_txt_submodelo || ' ' ||
                                  f_busca_ano_fab_mcc(l_cod_cia,
                                                      c_apolice.num_poliza,
                                                      l_cod_ramo,
                                                      l_existe_cotacao_endosso);
               --
               -- ano modelo
               --
               l_txt_submodelo := l_txt_submodelo || '/' ||
                               f_busca_ano_mod_mcc(l_cod_cia,
                                                   c_apolice.num_poliza,
                                                   l_cod_ramo,
                                                   l_existe_cotacao_endosso);
               --
               -- popula type
               --
               l_rec_lista.extend();
               l_rec_lista(l_count).nom_campo_nom_tercero     := 'NOM_TOMADOR';
               l_rec_lista(l_count).nom_tercero               := l_nom_tercero;
               l_rec_lista(l_count).nom_campo_num_poliza      := 'NUM_POLIZA';
               l_rec_lista(l_count).num_poliza                := c_apolice.num_poliza;
               l_rec_lista(l_count).nom_campo_num_item        := 'NUM_ITEM';
               l_rec_lista(l_count).num_item                  := trn.UNO;
               l_rec_lista(l_count).nom_campo_txt_sub_modelo  := 'TXT_SUB_MODELO';
               l_rec_lista(l_count).txt_sub_modelo            := l_txt_submodelo;
               l_rec_lista(l_count).nom_campo_num_matricula   := 'NUM_MATRICULA';
               l_rec_lista(l_count).num_matricula             := l_num_matricula;
               l_rec_lista(l_count).nom_campo_num_serie       := 'NUM_SERIE';
               l_rec_lista(l_count).num_serie                 := l_num_serie_encontrado;
               l_rec_lista(l_count).nom_fec_prazo_validade    := 'FEC_PRAZO_VALIDADE'; -- v5.26
               l_rec_lista(l_count).num_fec_prazo_validade    := to_date(l_num_dias_validez, 'DD/MM/YYYY' ); -- v5.26
               l_rec_lista(l_count).cod_agt                   := l_cod_agt;

               l_count := l_count + 1;
               --
               -- limpando variaveis
               --
               l_num_serie_encontrado := NULL;
               l_num_matricula_encontrado := NULL;
               --
             --
             EXCEPTION
               WHEN OTHERS THEN
                 l_num_serie_encontrado     := NULL;
                 l_num_matricula_encontrado := NULL;
             END;
             --
           END LOOP;
         --
         -- v 4.33
         ELSIF (l_nom_segurado IS NOT NULL) THEN

           -- pega primeiro nome
           l_primeiro_nome := TRIM (SUBSTR(l_nom_segurado,0, INSTR(l_nom_segurado,' ' )));
           --
           FOR c_apolice IN c_busca_nome ( l_cod_cia,
                                           l_cod_ramo,
                                           TRIM(l_nom_segurado),
                                           l_primeiro_nome,
                                           l_cod_agt) LOOP
             --
             BEGIN
               --
               -- verifica se apolice e definitiva ou provisoria
               -- se existe cotacao de endosso (nao efetivada) em andamento, entao apolice e definitiva (spto anterior)
               --
               l_existe_cotacao_endosso := f_existe_cotacao_endosso(l_cod_cia,
                                                                    c_apolice.num_poliza);
               --
               IF(l_existe_cotacao_endosso > 0) THEN
                  --
                  l_mca_provisional := 'N';
                  --
               ELSE
                  -- l_mca_provisional := f_mca_provisional(l_cod_cia, c_apolice.num_poliza);
                  l_mca_provisional := c_apolice.mca_provisional;
                --
               END IF;


               -- chassi
               --
               l_num_serie_encontrado := f_busca_chassi_mcc(l_cod_cia,
                                                            c_apolice.num_poliza,
                                                            l_cod_ramo,
                                                            l_num_serie,
                                                            l_existe_cotacao_endosso);
               --
               -- placa
               --
               l_num_matricula_encontrado := f_busca_placa_mcc(l_cod_cia,
                                                               c_apolice.num_poliza,
                                                               l_cod_ramo,
                                                               l_num_matricula,
                                                               l_existe_cotacao_endosso);
               --
               -- segurado
               --
               /*l_nom_tercero := f_busca_segurado_mcc(l_cod_cia,
                                                     c_apolice.num_poliza,
                                                     l_tip_docum,
                                                     l_cod_docum);*/

               l_nom_tercero := c_apolice.NOME_COMPLETO   ;


               --
               -- risco
               --
               l_txt_submodelo := f_busca_risco_mcc(l_cod_cia,
                                                    c_apolice.num_poliza,
                                                    l_existe_cotacao_endosso);
               --
               -- ano fabricacao
               --
               l_txt_submodelo := l_txt_submodelo || ' ' ||
                                  f_busca_ano_fab_mcc(l_cod_cia,
                                                      c_apolice.num_poliza,



                                                      l_cod_ramo,
                                                      l_existe_cotacao_endosso);
               --
               -- ano modelo
               --
               l_txt_submodelo := l_txt_submodelo || '/' ||
                               f_busca_ano_mod_mcc(l_cod_cia,
                                                   c_apolice.num_poliza,
                                                   l_cod_ramo,
                                                   l_existe_cotacao_endosso);
               --
               -- popula type
               --
               l_rec_lista.extend();
               l_rec_lista(l_count).nom_campo_nom_tercero     := 'NOM_TOMADOR';
               l_rec_lista(l_count).nom_tercero               := l_nom_tercero;
               l_rec_lista(l_count).nom_campo_num_poliza      := 'NUM_POLIZA';
               l_rec_lista(l_count).num_poliza                := c_apolice.num_poliza;
               l_rec_lista(l_count).nom_campo_num_item        := 'NUM_ITEM';
               l_rec_lista(l_count).num_item                  := trn.UNO;
               l_rec_lista(l_count).nom_campo_txt_sub_modelo  := 'TXT_SUB_MODELO';
               l_rec_lista(l_count).txt_sub_modelo            := l_txt_submodelo;
               l_rec_lista(l_count).nom_campo_num_matricula   := 'NUM_MATRICULA';
               l_rec_lista(l_count).num_matricula             := l_num_matricula_encontrado;
               l_rec_lista(l_count).nom_campo_num_serie       := 'NUM_SERIE';
               l_rec_lista(l_count).num_serie                 := l_num_serie_encontrado;
               l_rec_lista(l_count).nom_campo_mca_poliza_anulada := 'MCA_POLIZA_ANULADA';
               l_rec_lista(l_count).mca_poliza_anulada        := l_mca_poliza_anulada; -- V 1.88
               l_rec_lista(l_count).nom_campo_mca_provisional := 'MCA_PROVISIONAL'; -- V 1.88
               l_rec_lista(l_count).mca_provisional           := l_mca_provisional; -- V 1.88
               l_rec_lista(l_count).nom_campo_fec_vcto_poliza := 'FEC_VCTO_POLIZA'; -- V 1.88
               l_rec_lista(l_count).fec_vcto_poliza           := c_apolice.fec_vcto_poliza; -- V 1.88
               l_rec_lista(l_count).nom_fec_prazo_validade    := 'FEC_PRAZO_VALIDADE'; -- v5.26
               l_rec_lista(l_count).num_fec_prazo_validade    := to_date(l_num_dias_validez, 'DD/MM/YYYY' ); -- v5.26

               l_rec_lista(l_count).cod_agt                   := l_cod_agt;

               l_count := l_count + 1;
               -- limpando variaveis
               --
               l_num_serie_encontrado     := NULL;
               l_num_matricula_encontrado := NULL;
               --
             --
             EXCEPTION
               WHEN OTHERS THEN
                 l_num_serie_encontrado     := NULL;
                 l_num_matricula_encontrado := NULL;
             END;
             --
           END LOOP;
           -- F V 4.33

           --
         END IF;
         --
       END IF;
       --
       -- FIM V 2.03
       --
       p_gerar_xml_apolice(l_rec_lista, l_xml);
       --
       -- fim V 1.84
       --
       l_encontradas := NVL(trn_k_global.ref_f_global('MCA_APOLICE_ENCONTRADA'), trn.NO);
       --
       IF l_encontradas = trn.SI THEN
         --
         IF l_cod_agt = g_cod_agt_consulta
         THEN
           --
           g_xml := l_xml;
           --
         ELSE
           --
           g_err_msg.EXTEND(1); -- 4.99
           g_err_msg(g_err_msg.LAST) := fp_trata_msg(NULL      , -- 4.99
                                                                                     '20098175',
                                                                                     NULL      );
           pp_processa_mensagem(g_err_msg, -- 4.99
                                l_retorno);
           --
           p_gerar_xml_mensagem(l_retorno, g_xml);
           --
         END IF;
         --
       ELSE
         --
         g_err_msg.EXTEND(1); -- 4.99
         g_err_msg(g_err_msg.LAST) := fp_trata_msg(NULL, -- 4.99
                                                                                   '20098174',
                                                                                   'Nenhuma apolice encontrada ou nao disponivel para endosso');
         pp_processa_mensagem(g_err_msg, -- 4.99
                              l_retorno);
         --
         p_gerar_xml_mensagem(l_retorno, g_xml);
         --
       END IF;
       --
       mx('F', 'p_lee_apolice');
       --
    EXCEPTION
      --
      -- inicio V 1.84
      --
      WHEN e_cod_cia_inexistente THEN
           mx('F', 'p_lee_apolice - EXCEPTION: COD_CIA nao informado.');
      --
      WHEN e_cod_ramo_inexistente THEN
           mx('F', 'p_lee_apolice - EXCEPTION: COD_RAMO nao informado.');
      --
      WHEN e_cod_agt_inexistente THEN
           mx('F', 'p_lee_apolice - EXCEPTION: COD_AGT nao informado.');
      --
      -- fim V 1.84
      --
       WHEN OTHERS THEN
          --
          DBMS_OUTPUT.PUT_LINE(SQLERRM);
          --
          mx('F', 'p_lee_apolice - EXCEPTION');
          --
    END p_lee_apolice;
    --
    -- FIM V 2.03
    /* ------------------------------------------------------
    || Processa chamada do webmethods, retorna um refCursor
    */ ------------------------------------------------------
    --
    PROCEDURE p_lee_detalhe_cotacao
    IS
       l_cod_cia                 a2000030.cod_cia%TYPE;
       l_cod_ramo                a2000030.cod_ramo%TYPE;
       l_num_cotizacion          c2000000.num_cotizacion%TYPE;
       l_num_coti_grp            c2000000.num_cotizacion%TYPE;
       l_retorno                 ref_cursor;
       l_tip_situ_coti_grp       c2000000.val_columna%TYPE;
       l_tip_situ_coti_grp_aux   c2000000.val_columna%TYPE;
       l_nom_situ_coti_grp       g2990006.nom_valor%TYPE;
       l_nom_producto            df_cmn_nwt_xx_cnn.vrb_nam_val%TYPE;
       --
       l_mca_vistoria            VARCHAR2(1);
       l_num_orden               a2000500.num_orden %TYPE;
       l_cantidad_total          BINARY_INTEGER;
       l_cantidad_erroneos       BINARY_INTEGER;
       l_cantidad_correctos      BINARY_INTEGER;
       l_hay_items_sin_efectivar VARCHAR2(1);
       l_eh_3_pacotes            BOOLEAN                       := FALSE      ; -- 2.49
       l_tip_produto             g2109142_vcr.tip_produto %TYPE              ; -- 2.49
       l_num_simulacion          c2000000.val_columna   %TYPE                ; -- 2.49
       l_cod_agt                 C2000000.val_columna   %type                ; -- 2.49
       --
       l_cod_rol_bo              c2000000.val_columna%TYPE := trn.NULO;        -- 2.78
       l_mensaje                 TYPREG_MSG_WS;                                --GGARLETTI.3.79
       --
       CURSOR lc_num_orden (pc_cod_cia          a2000500.cod_cia         %TYPE,
                            pc_cod_ramo         a2000500.cod_ramo        %TYPE,
                            pc_num_poliza_grupo a2000500.num_poliza_grupo%TYPE)
       IS
          SELECT b.num_orden, COUNT(1)
            FROM a2000500 b
           WHERE b.cod_cia          = pc_cod_cia
             AND b.cod_ramo         = pc_cod_ramo
             AND b.num_poliza_grupo = pc_num_poliza_grupo
             AND b.tip_mvto_batch   = em.PRESUP_BATCH
             AND b.fec_tratamiento  = (SELECT MAX(c.fec_tratamiento)
                                         FROM a2000500 c
                                        WHERE c.cod_cia          = pc_cod_cia
                                          AND c.cod_ramo         = pc_cod_ramo
                                          AND c.num_poliza_grupo = pc_num_poliza_grupo
                                          AND c.tip_mvto_batch   = em.PRESUP_BATCH)
        GROUP BY b.num_orden
        ORDER BY b.num_orden DESC;
       --
       CURSOR lc_a2000520 (pc_cod_cia          a2000500.cod_cia         %TYPE,
                           pc_cod_ramo         a2000500.cod_ramo        %TYPE,
                           pc_num_poliza_grupo a2000500.num_poliza_grupo%TYPE) --Obtiene los erroneos
       IS
          WITH as_polizas AS ( SELECT a.cod_cia        ,
                                      a.fec_tratamiento,
                                      a.tip_mvto_batch ,
                                      a.num_poliza     ,
                                      a.num_orden
                                 FROM a2000500 a
                                WHERE a.cod_cia          = pc_cod_cia
                                  AND a.cod_ramo         = pc_cod_ramo
                                  AND a.tip_mvto_batch   = em.PRESUP_BATCH
                                  AND a.num_poliza_grupo = pc_num_poliza_grupo
                                  AND a.fec_tratamiento  = (SELECT MAX(c.fec_tratamiento)
                                                              FROM a2000500 c
                                                             WHERE c.cod_cia          = pc_cod_cia
                                                               AND c.cod_ramo         = pc_cod_ramo
                                                               AND c.tip_mvto_batch   = em.PRESUP_BATCH
                                                               AND c.num_poliza_grupo = pc_num_poliza_grupo)
                               )
          SELECT COUNT(8)
            FROM a2000520 a
                 ,as_polizas b
           WHERE a.cod_cia         = pc_cod_cia
             AND a.fec_tratamiento = b.fec_tratamiento
             AND a.tip_mvto_batch  = b.tip_mvto_batch
             AND a.num_poliza      = b.num_poliza
             AND a.num_orden       = b.num_orden
        GROUP BY a.num_orden
        ORDER BY a.num_orden DESC;
       --
       l_num_veiculos        NUMBER;
       --
       l_num_poliza_grupo a2000500.num_poliza_grupo%TYPE;
       --
    BEGIN
       --
       mx('I', 'p_lee_detalhe_cotacao');
       --
       l_cod_cia  := trn_k_global.devuelve('COD_CIA');
       l_cod_ramo := trn_k_global.devuelve('COD_RAMO');
       l_num_cotizacion := trn_k_global.ref_f_global('NUM_COTIZACION');
       l_num_coti_grp   := trn_k_global.ref_f_global('NUM_POLIZA_GRUPO');
       --
       mx('l_cod_cia'       , l_cod_cia);
       mx('l_cod_ramo'      , l_cod_ramo);
       mx('l_num_cotizacion', l_num_cotizacion);
       mx('l_num_coti_grp'  , l_num_coti_grp);
       --
       -- I 2.49
       ea_k_231_utils.p_devuelve_dato_cotizacion(p_nom_tabla   =>  ea_k_231_utils.g_k_tabla_dv
                                                ,p_nom_columna =>  'TIP_PRODUTO'
                                                ,p_val_campo   =>  l_tip_produto);
       --
       ea_k_231_utils.p_devuelve_dato_cotizacion(p_nom_tabla   =>  'A2000500'
                                                ,p_nom_columna =>  'COD_AGT'
                                                ,p_val_campo   =>  l_cod_agt);
     --
       mx('l_tip_produto', l_tip_produto);
       mx('l_cod_agt'  , l_cod_agt);
       ---
       l_eh_3_pacotes := ea_k_g2109142_vcr.f_eh_3_pacotes(l_cod_cia, --2.70
                                                          l_cod_ramo,
                                                          l_cod_agt,
                                                          l_tip_produto); -- 2.43
        -- I 3.47
        IF l_eh_3_pacotes THEN
         --
         pp_asigna('tres_pacotes',1);
         --
        ELSE
         --
         pp_asigna('tres_pacotes',0);
         --
        END IF;
       -- F 3.47
       --
       IF l_eh_3_pacotes THEN
         ea_k_231_utils.p_devuelve_dato_cotizacion(p_nom_tabla   =>  'G2000000'
                                                  ,p_nom_columna =>  'NUM_SIMULACION'
                                                  ,p_val_campo   =>  l_num_simulacion);
         --I  2.78
         ea_k_231_utils.p_devuelve_dato_cotizacion(p_nom_tabla   => g_k_tabla_vg,
                                                   p_nom_columna => 'COD_ROL_BO',
                                                   p_val_campo   => l_cod_rol_bo);
         --
         IF l_cod_rol_bo IS NOT NULL AND l_num_simulacion IS NULL THEN
           --
           l_num_simulacion := trn.UNO;
           --
         END IF ;
         --F 2.78
       ELSE
         l_num_simulacion := trn.UNO;
       END IF;
       mx('l_num_simulacion'  , l_num_simulacion);
       -- F 2.49
       --
       IF l_num_coti_grp IS NOT NULL
       THEN
          --
          FOR j IN 1..5
          LOOP
             --
             mx('j', j);
             --
             l_tip_situ_coti_grp := f_recupera_val_dv(p_cod_cia          => l_cod_cia          ,
                                                      p_cod_ramo         => l_cod_ramo         ,
                                                      p_num_cotizacion   => l_num_coti_grp     ,
                                                      p_nom_columna      => 'TIP_SITU_COTI_GRP');
             --
             mx('l_tip_situ_coti_grp', l_tip_situ_coti_grp);
             --
             IF l_tip_situ_coti_grp IS NULL
             THEN
                --
                DBMS_LOCK.sleep(1);
                --
             ELSE
                --
                EXIT;
                --
             END IF;
             --
          END LOOP;
          --
          --
          --
          IF l_tip_situ_coti_grp IN (2, 8, 9, 11) -- 2 COTACAO PENDIENTE DE CALCULO, 8 PROSPOSTA EN ELABORACION, 9 PROPOSTA EN EFECTIVACAO, 11 PROPOSTA EFETIVADA
          THEN
             --
             -- La idea es intentar 60 veces obtener el numero de poliza de grupo generada
             -- dado que la efectivacion es asincrona.
             --
             FOR k IN 1..60
             LOOP
                --
                mx('k', k);
                --
                l_num_poliza_grupo := f_recupera_val_dv(p_cod_cia        => l_cod_cia,
                                                        p_cod_ramo       => l_cod_ramo,
                                                        p_num_cotizacion => l_num_coti_grp,
                                                        p_nom_tabla      => 'A2000500',
                                                        p_nom_columna    => 'NUM_POLIZA_GRUPO');
                --
                mx('l_num_poliza_grupo', l_num_poliza_grupo);
                --
                IF l_num_poliza_grupo IS NULL
                THEN
                   --
                   DBMS_LOCK.sleep(1);
                   --
                ELSE
                   --
                   EXIT;
                   --
                END IF;
                --
             END LOOP;
             --
             ELSE
             --
             l_num_poliza_grupo := f_recupera_val_dv(p_cod_cia        => l_cod_cia,
                                                     p_cod_ramo       => l_cod_ramo,
                                                     p_num_cotizacion => l_num_coti_grp,
                                                     p_nom_tabla      => 'A2000500',
                                                     p_nom_columna    => 'NUM_POLIZA_GRUPO');
             --
             mx('l_num_poliza_grupo', l_num_poliza_grupo);
             --
          END IF;
          --
          --<v 2.42>
          --
          IF l_tip_situ_coti_grp IS NOT NULL
          THEN
            --
            l_tip_situ_coti_grp_aux := l_tip_situ_coti_grp;
            --
          ELSE
            --
            IF ea_k_231_coti_ws_vcr.f_asegura_agente( p_cod_cia          => l_cod_cia          ,
                                                      p_cod_ramo         => l_cod_ramo         ,
                                                      p_num_coti_grupo   => l_num_coti_grp     ,
                                                      p_num_poliza_grupo => l_num_coti_grp )
            THEN
              --
              l_tip_situ_coti_grp_aux := ea_k_231_flota_batch_vcr.g_k_tip_situ_elaboracion; -- 1
              --
              mx('l_tip_situ_coti_grp_aux', 1);
              --
            ELSE
              --
              l_tip_situ_coti_grp_aux := ea_k_231_flota_batch_vcr.g_k_tip_situ_pend_nomi; -- 3
              --
              mx('l_tip_situ_coti_grp_aux', 3);
              --
            END IF;
            --
           END IF;
          --
          l_nom_situ_coti_grp := em_f_nom_valor(p_cod_cia       => l_cod_cia           ,
                                                p_cod_ramo      => l_cod_ramo          ,
                                                p_cod_modalidad => em.COD_MODALIDAD_GEN,
                                                p_fec_validez   => SYSDATE             ,
                                                p_cod_campo     => 'TIP_SITU_COTI_GRP' ,
                                                p_cod_valor     => l_tip_situ_coti_grp_aux);
          --
          --<v 2.42>
          --
          IF g_fec_validez IS NULL THEN
            --
            g_fec_validez := TRUNC(SYSDATE);
            --
          END IF;
          --
          trn_k_global.asigna('fec_validez', TO_CHAR(g_fec_validez, 'DDMMYYYY'));
          --
          l_nom_producto := ea_k_231_utils.f_recupera_constante(p_cod_cia      => l_cod_cia
                                                               ,p_cod_campo    => 'VAL_PRODUTO_FROTA');
          --
          IF gc_num_veiculos%ISOPEN
          THEN
             --
             CLOSE gc_num_veiculos;
             --
          END IF;
          --
          OPEN gc_num_veiculos(pc_cod_cia          => l_cod_cia        ,
                               pc_cod_ramo         => l_cod_ramo       ,
                               pc_num_coti_grupo   => l_num_coti_grp);
          --
          FETCH gc_num_veiculos INTO l_num_veiculos;
          --
          CLOSE gc_num_veiculos;
          --
          IF l_num_poliza_grupo IS NOT NULL
          THEN
             --
             l_mca_vistoria            :=ea_k_231_flota_batch.f_existe_vistoria(l_cod_cia         ,
                                                                                l_cod_ramo        ,
                                                                                l_num_poliza_grupo);
             --
             l_num_orden               := NULL;
             l_cantidad_total          := 0;
             l_cantidad_erroneos       := 0;
             l_hay_items_sin_efectivar := 'N';
             --
             IF NVL(l_tip_situ_coti_grp, '0') = ea_k_231_flota_batch.g_k_tip_situ_prop_pend
             THEN
                --
                ea_k_231_coti_ws.p_cuenta_totales_errores_prop( p_cod_cia      => l_cod_cia           ,
                                                                p_cod_ramo     => l_cod_ramo          ,
                                                                p_num_coti_grp => l_num_coti_grp      ,
                                                                p_num_total    => l_cantidad_total    ,
                                                                p_num_errores  => l_cantidad_erroneos );
                --
                l_cantidad_correctos := l_cantidad_total - l_cantidad_erroneos;
                --
               mx('l_cantidad_total', l_cantidad_total);
                --
                mx('l_cantidad_erroneos', l_cantidad_erroneos);
                --
                mx('l_cantidad_correctos', l_cantidad_correctos);
                --
             ELSE
                --
             IF lc_num_orden %ISOPEN
             THEN
                --
                CLOSE lc_num_orden;
                --
             END IF;
             --
             OPEN lc_num_orden (pc_cod_cia          => l_cod_cia         ,
                                pc_cod_ramo         => l_cod_ramo        ,
                                pc_num_poliza_grupo => l_num_poliza_grupo);
             --
             FETCH lc_num_orden INTO l_num_orden, l_cantidad_total;
             CLOSE lc_num_orden;
             --
             mx('l_num_orden', l_num_orden );
             --
             --
             mx('l_cantidad_total', l_cantidad_total );
             --
             IF NVL(l_cantidad_total, 0) > 0
             THEN
                --
                IF lc_a2000520 %ISOPEN
                THEN
                   --
                   CLOSE lc_a2000520;
                   --
                END IF;
                --
                OPEN lc_a2000520(pc_cod_cia          => l_cod_cia         ,
                                 pc_cod_ramo         => l_cod_ramo        ,
                                 pc_num_poliza_grupo => l_num_poliza_grupo);
                FETCH lc_a2000520 INTO l_cantidad_erroneos;
                CLOSE lc_a2000520;
                --
                mx('l_cantidad_erroneos', l_cantidad_erroneos );
                --
                l_cantidad_correctos:= l_cantidad_total - l_cantidad_erroneos;
                --
                mx('l_cantidad_correctos', l_cantidad_correctos);
                --
             ELSE
                --
                l_cantidad_erroneos := 0;
                mx('l_cantidad_erroneos', l_cantidad_erroneos );
                --
                l_cantidad_correctos := 0;
                mx('l_cantidad_correctos', l_cantidad_correctos);
                --
             END IF;
             --
          END IF;
          --
        END IF;
        --
        l_mensaje := fp_trata_msg('MSG_NUM_DIAS_COTI',20177,trn.NULO);    --GGARLETTI.3.79
        --
         OPEN l_retorno FOR
           WITH
              C_FILTRO AS
               (SELECT COD_CIA,
                       COD_RAMO,
                       NUM_POLIZA_GRUPO,
                       FEC_EMISION,
                       FEC_VAL_ATE,
                       SUM(VAL_PREMIO_TOTAL) AS "VAL_PREMIO_TOTAL",
                       SUM(VAL_PREMIO_LIQUIDO) AS "VAL_PREMIO_LIQUIDO",
                       SUM(VAL_IOF) AS "VAL_IOF"
                  FROM (SELECT A.COD_CIA,
                               A.COD_RAMO,
                               A.NUM_POLIZA_GRUPO,
                               TO_CHAR(A.FEC_EMISION, 'DDMMYYYY') AS "FEC_EMISION",
                               TO_CHAR(A.FEC_VCTO_POLIZA, 'DDMMYYYY') AS "FEC_VAL_ATE",
                               A.NUM_COTIZACION,
                        CASE
                          WHEN l_tip_situ_coti_grp= ea_k_231_flota_batch.g_k_tip_situ_recusada THEN
                            trn.CERO
                          ELSE
                            B.IMP_SPTO
                        END AS "VAL_PREMIO_TOTAL",
                        CASE
                          WHEN l_tip_situ_coti_grp = ea_k_231_flota_batch.g_k_tip_situ_recusada THEN
                            trn.CERO
                          ELSE
                        CASE B.COD_DESGLOSE
                          WHEN g_k_cod_desglose_iof THEN
                           0
                          ELSE
                           B.IMP_SPTO
                              END
                        END AS "VAL_PREMIO_LIQUIDO",
                        CASE
                          WHEN l_tip_situ_coti_grp = ea_k_231_flota_batch.g_k_tip_situ_recusada THEN
                            trn.CERO
                          ELSE
                        CASE B.COD_DESGLOSE
                          WHEN g_k_cod_desglose_iof THEN
                           B.IMP_SPTO
                          ELSE
                           0
                            END
                        END AS "VAL_IOF"
                          FROM C2009030_VCR A, C2109170_VCR B
                         WHERE A.COD_CIA = B.COD_CIA
                           AND A.COD_RAMO = B.COD_RAMO
                           AND A.NUM_COTIZACION = B.NUM_COTIZACION
                           AND A.COD_CIA = l_cod_cia
                           AND A.COD_RAMO = l_cod_ramo
                           AND A.NUM_POLIZA_GRUPO = l_num_coti_grp
                           AND B.NUM_SIMULACION   = TRN.UNO --Defecto FJD
                       )
               GROUP BY COD_CIA, COD_RAMO, NUM_POLIZA_GRUPO, FEC_EMISION, FEC_VAL_ATE),

     --       C_DADOS2 AS                                     -- AFIRMANI 3.46.I / ODSILVA 3.81 I
     --        (SELECT 'NUM_QTD_FROTA' AS NOM_COLUMNA
     --                ,COUNT(*) AS "NUM_RIESGOS"
     --           FROM C2009030_VCR A
     --          WHERE A.COD_CIA = l_cod_cia
     --            AND A.COD_RAMO = l_cod_ramo
     --            AND A.NUM_POLIZA_GRUPO = l_num_coti_grp),  -- AFIRMANI 3.46.F / ODSILVA 3.81 F

              C_DADOS AS
         (SELECT A.NUM_COTIZACION NUM_POLIZA_GRUPO,
                 A.NOM_COLUMNA,
                 A.VAL_COLUMNA
            FROM C2000000 A --, C_FILTRO B
           WHERE A.COD_CIA = l_cod_cia
             AND A.COD_RAMO = l_cod_ramo
             AND A.NUM_COTIZACION = l_num_coti_grp
             AND A.COD_FILA = g_k_cod_fila
             AND A.NOM_COLUMNA NOT IN ('FEC_EMISION','NUM_QTDE_RISCOS')),  -- ODSILVA 3.81

              C_NUM_PRESUPUESTO AS
               (SELECT A.NUM_POLIZA AS "NUM_COTIZACION", A.NUM_POLIZA_DEFINITIVO AS "NUM_PRESUPUESTO"
                  FROM A2000500 A--, C_FILTRO B
                 WHERE A.COD_CIA = l_cod_cia
                   AND A.COD_RAMO = l_cod_ramo
                   AND A.NUM_POLIZA_GRUPO = l_num_coti_grp)

              SELECT DISTINCT C_CONSULTA.*
                FROM (
                       SELECT 'FEC_EMISION' AS "NOM_COLUMNA", FEC_EMISION AS "VAL_COLUMNA" FROM C_FILTRO
                       UNION
                       SELECT 'FEC_VAL_ATE' AS "NOM_COLUMNA", FEC_VAL_ATE AS "VAL_COLUMNA" FROM C_FILTRO
                       UNION
                       SELECT 'NUM_ITEMS' AS "NOM_COLUMNA", TO_CHAR(l_num_veiculos) AS "VAL_COLUMNA" FROM DUAL
             --        UNION                                                                                           -- AFIRMANI 3.46.I / ODSILVA 3.81 I
             --        SELECT 'NUM_QTD_FROTA' AS "NOM_COLUMNA", TO_CHAR(NUM_RIESGOS) AS "VAL_COLUMNA" FROM C_DADOS2    -- AFIRMANI 3.80.F / ODSILVA 3.81 F
                       UNION
                       SELECT 'VAL_PREMIO_TOTAL' AS "NOM_COLUMNA", TO_CHAR(VAL_PREMIO_TOTAL) AS "VAL_COLUMNA" FROM C_FILTRO
                       UNION
                       SELECT 'VAL_PREMIO_LIQUIDO' AS "NOM_COLUMNA", TO_CHAR(VAL_PREMIO_LIQUIDO) AS "VAL_COLUMNA" FROM C_FILTRO
                       UNION
                       SELECT 'VAL_IOF' AS "NOM_COLUMNA", TO_CHAR(VAL_IOF) AS "VAL_COLUMNA" FROM C_FILTRO
                       UNION
                       SELECT NOM_COLUMNA, VAL_COLUMNA FROM C_DADOS
                       UNION
                       SELECT 'NUM_PRESUPUESTO' AS "NOM_COLUMNA", NUM_PRESUPUESTO AS "VAL_COLUMNA" FROM C_NUM_PRESUPUESTO
                       UNION
                       SELECT 'NOM_PRODUCTO' NOM_COLUMNA, l_nom_producto VAL_COLUMNA FROM DUAL
                       UNION
                       SELECT 'NOM_SITU_COTI_GRP' NOM_COLUMNA, l_nom_situ_coti_grp VAL_COLUMNA FROM DUAL
                       UNION
                     --SELECT 'NUM_POLIZAS_TOTALES' NOM_COLUMNA, TO_CHAR(l_cantidad_total) VAL_COLUMNA FROM DUAL
                     --UNION
                       SELECT 'NUM_POLIZAS_SUCESSO' NOM_COLUMNA, TO_CHAR(l_cantidad_correctos) AS "VAL_COLUMNA" FROM DUAL
                       UNION
                       SELECT 'NUM_POLIZAS_PENDIENTES' AS "NOM_COLUMNA", TO_CHAR(l_cantidad_erroneos) AS "VAL_COLUMNA" FROM DUAL
                       UNION                                                                           --GGARLETTI.3.79.I
                       SELECT 'NUM_DIAS_COTI'   AS "NOM_COLUMNA",
                              ( SELECT TO_CHAR(TRUNC(SYSDATE) - (SELECT TO_DATE(A.VAL_COLUMNA, 'DD/MM/YYYY') FROM C_DADOS a WHERE a.NOM_COLUMNA = 'FEC_CALCULO_HORA')) FROM DUAL a ) AS "VAL_COLUMNA"
                         FROM DUAL
                       UNION
                       SELECT 'MSG_NUM_DIAS_COTI' AS "NOM_COLUMNA",
                              CASE WHEN ( TRUNC(SYSDATE) - (SELECT TO_DATE(A.VAL_COLUMNA, 'DD/MM/YYYY') FROM C_DADOS a WHERE a.NOM_COLUMNA = 'FEC_CALCULO_HORA') > 30 ) AND
                                        ( nvl((SELECT '1'
                                                 FROM C_DADOS a
                                                WHERE a.NOM_COLUMNA  = 'TIP_SITU_COTI_GRP'
                                                  AND a.VAL_COLUMNA IN (ea_k_231_flota_batch_vcr.g_k_tip_situ_elaboracion                  -- (1) COTACAO EM ELABORACAO
                                                                       ,ea_k_231_flota_batch_vcr.g_k_tip_situ_calc_pend                    -- (2) COTACAO PENDENTE DE CALCULO
                                                                       ,ea_k_231_flota_batch_vcr.g_k_tip_situ_calc_ok                      -- (7) COTACAO CALCULADA
                                                                       ,ea_k_231_flota_batch_vcr.g_k_tip_situ_coti_libe)), 0) = 1 )  THEN  --(12) COTACAO LIBERADA
                                        l_mensaje.des_mensagem
                                   WHEN ( TRUNC(SYSDATE) - (SELECT TO_DATE(A.VAL_COLUMNA, 'DD/MM/YYYY') FROM C_DADOS a WHERE a.NOM_COLUMNA = 'FEC_CALCULO_HORA') > 30 ) AND
                                        ( nvl((SELECT '1'
                                                 FROM C_DADOS a
                                                WHERE a.NOM_COLUMNA  = 'TIP_SITU_COTI_GRP' ),0)  = 0 ) THEN
                                        l_mensaje.des_mensagem
                                   ELSE
                                        ''
                               END AS "VAL_COLUMNA"
                        FROM DUAL                                                                     --GGARLETTI.3.79.F
                        UNION
                        SELECT 'MCA_VISTORIA' NOM_COLUMNA, l_mca_vistoria AS "VAL_COLUMNA" FROM DUAL
                     ) C_CONSULTA;
       --
       ELSE
       -- v4.87 I {
          OPEN l_retorno
          FOR
            WITH
            C_FILTRO AS
             (SELECT A.COD_CIA,
                     A.COD_RAMO,
                     A.NUM_COTIZACION,
                     TO_CHAR(A.FEC_EMISION, 'DDMMYYYY') AS "FEC_EMISION",
                     TO_CHAR(A.FEC_VCTO_POLIZA, 'DDMMYYYY') AS "FEC_VAL_ATE"
                FROM C2009030_VCR A
               WHERE A.COD_CIA = l_cod_cia
                 AND A.COD_RAMO = l_cod_ramo
                 AND A.NUM_COTIZACION = l_num_cotizacion),

            C_DADOS AS
             (SELECT A.NUM_COTIZACION, A.NOM_COLUMNA, A.VAL_COLUMNA
                FROM C2000000 A
               WHERE A.COD_CIA = l_cod_cia
                 AND A.COD_RAMO = l_cod_ramo
                 AND A.NUM_COTIZACION = l_num_cotizacion
                 AND A.COD_FILA = g_k_cod_fila
                 AND A.NOM_COLUMNA <> 'FEC_EMISION'
                 AND A.NOM_COLUMNA != DECODE((SELECT trn.SI
                                                FROM c2000000 J
                                               WHERE j.cod_cia = a.cod_cia
                                                 AND j.cod_ramo = a.cod_ramo
                                                 AND j.num_cotizacion = a.num_cotizacion
                                                 AND j.nom_columna = 'COD_ROL_BO'
                                                 AND j.val_columna IS NOT NULL          ), trn.SI, 'NUM_COTIZACION_RG', '-')),

            C_VALORES AS
             (SELECT NUM_COTIZACION,
                     SUM(VAL_PREMIO_TOTAL) AS "VAL_PREMIO_TOTAL",
                     SUM(VAL_PREMIO_LIQUIDO) AS "VAL_PREMIO_LIQUIDO",
                     SUM(VAL_IOF) AS "VAL_IOF"
                FROM (SELECT A.NUM_COTIZACION,
                             A.IMP_SPTO AS "VAL_PREMIO_TOTAL",
                             CASE A.COD_DESGLOSE WHEN g_k_cod_desglose_iof THEN 0 ELSE A.IMP_SPTO END AS "VAL_PREMIO_LIQUIDO",
                             CASE A.COD_DESGLOSE WHEN g_k_cod_desglose_iof THEN A.IMP_SPTO ELSE 0 END AS "VAL_IOF"
                        FROM C2109170_VCR A
                       WHERE A.COD_CIA = l_cod_cia
                         AND A.COD_RAMO = l_cod_ramo
                         AND A.NUM_COTIZACION = l_num_cotizacion
                         AND A.NUM_SIMULACION = NVL(l_num_simulacion,A.NUM_SIMULACION)) -- 2.49
               GROUP BY NUM_COTIZACION),

            C_NUM_PRESUPUESTO AS
             (SELECT A.NUM_POLIZA AS "NUM_COTIZACION", A.NUM_POLIZA_DEFINITIVO AS "NUM_PRESUPUESTO"
                FROM A2000500 A
               WHERE A.COD_CIA = l_cod_cia
                 AND A.COD_RAMO = l_cod_ramo
                 AND A.NUM_POLIZA = l_num_cotizacion)

            SELECT DISTINCT C_CONSULTA.*
              FROM (
                         SELECT 'FEC_EMISION' AS "NOM_COLUMNA", FEC_EMISION AS "VAL_COLUMNA" FROM C_FILTRO
                     UNION
                     SELECT 'FEC_VAL_ATE' AS "NOM_COLUMNA", FEC_VAL_ATE AS "VAL_COLUMNA" FROM C_FILTRO
                     UNION
                     SELECT 'VAL_PREMIO_TOTAL' AS "NOM_COLUMNA", TO_CHAR(VAL_PREMIO_TOTAL) AS "VAL_COLUMNA" FROM C_VALORES
                     UNION
                     SELECT 'VAL_PREMIO_LIQUIDO' AS "NOM_COLUMNA", TO_CHAR(VAL_PREMIO_LIQUIDO) AS "VAL_COLUMNA" FROM C_VALORES
                     UNION
                     SELECT 'VAL_IOF' AS "NOM_COLUMNA", TO_CHAR(VAL_IOF) AS "VAL_COLUMNA" FROM C_VALORES
                     UNION
                     SELECT NOM_COLUMNA, VAL_COLUMNA FROM C_DADOS
                     UNION
                     SELECT 'NUM_PRESUPUESTO' AS "NOM_COLUMNA", NUM_PRESUPUESTO AS "VAL_COLUMNA" FROM C_NUM_PRESUPUESTO
                     UNION                                                                                          --ODSILVA 4.12.i
                     SELECT 'NOM_TIP_CATEGORIA'                                                 AS "NOM_COLUMNA"
                          , TO_CHAR((SELECT b.NOM_TIP_VEHI
                                FROM A2100100 B
                               WHERE B.COD_CIA     = l_cod_cia
                                 AND B.FEC_VALIDEZ = (SELECT MAX(C.FEC_VALIDEZ)
                                                        FROM A2100100  C
                                                       WHERE B.COD_CIA      = C.COD_CIA
                                                         AND B.COD_TIP_VEHI = C.COD_TIP_VEHI)
                                 AND B.COD_TIP_VEHI =(SELECT A.VAL_COLUMNA
                                                       FROM C_DADOS A
                                                      WHERE A.NOM_COLUMNA  = 'COD_TIP_VEHI'))) AS "VAL_COLUMNA"
                       FROM DUAL                                                                                    --ODSILVA 4.12.f
                   ) C_CONSULTA;
       -- } v4.87 F
       END IF;
       --
       p_gerar_xml_campos_cotacao(l_retorno,
                                  g_xml);
       --
       mx('F', 'p_lee_detalhe_cotacao');
       --
    EXCEPTION
       WHEN OTHERS THEN
          --
          mx('-', 'ERROR p_lee_detalhe_cotacao' || SQLERRM || ' - ' || dbms_utility.format_error_backtrace);
          --p_erro := SQLERRM;
          --
          mx('F', 'p_lee_detalhe_cotacao - EXCEPTION');
          --
    END p_lee_detalhe_cotacao;
    --
    /* ------------------------------------------------------
    || Processa chamada do webmethods, retorna um refCursor
    */ ------------------------------------------------------
    --
    PROCEDURE p_lee_detalhe_endosso
    IS
       l_cod_cia           a2000030.cod_cia%TYPE;
       l_cod_ramo          a2000030.cod_ramo%TYPE;
       l_num_propuesta     a2000560.num_propuesta%TYPE;
       l_retorno           ref_cursor;
       l_recarga_dados     VARCHAR2(1);
       l_numero_simulacao  VARCHAR2(2);
       l_nao_existe        EXCEPTION;
       PRAGMA EXCEPTION_INIT  (l_nao_existe, -20001);
       l_carga_dados       BOOLEAN := FALSE;
       --
       l_eh_3_pacotes      BOOLEAN; -- 2.85
       l_tip_produto       g2109142_vcr.tip_produto       %TYPE ; --2.85
       l_cod_agt           g2109142_vcr.cod_agt           %TYPE ; --2.85
       --
       l_num_spto          a2000030.num_spto              %TYPE;
       l_num_spto_apli     a2000030.num_spto_apli         %TYPE;
       --
    BEGIN
       --
       mx('I', 'p_lee_detalhe_endosso');
       --
       l_cod_cia  := trn_k_global.devuelve('COD_CIA');
       l_cod_ramo := trn_k_global.devuelve('COD_RAMO');
       l_num_propuesta := trn_k_global.devuelve('NUM_PROPUESTA');
       l_recarga_dados := trn_k_global.ref_f_global('MCA_RECARGA_DADOS');
       l_numero_simulacao := trn_k_global.ref_f_global('NUM_SIMULACAO');
       --
       l_num_spto      := fp_devuelve_val_coti('DFNUM_SPTO'     );
       l_num_spto_apli := fp_devuelve_val_coti('DFNUM_SPTO_APLI');
       --
       mx('l_num_spto',l_num_spto);
       mx('l_num_spto_apli',l_num_spto_apli);
       -- I 2.85
       IF NVL(trn_k_global.ref_f_global('MCA_POLIZA_GRUPO'),'N') = 'S' or NVL(trn_k_global.ref_f_global('COD_SERVICIO'),-1) = g_k_cod_srv_flotas THEN
         --
         l_eh_3_pacotes := FALSE;
         --
       ELSE
         --
         l_tip_produto := ea_k_231_utils.f_valor_dv('TIP_PRODUTO');
         l_cod_agt     := ea_k_231_utils.f_valor_dv( 'DFCOD_AGT' );
         --
         l_eh_3_pacotes := ea_k_g2109142_vcr.f_eh_3_pacotes(l_cod_cia,
                                                            l_cod_ramo,
                                                            l_cod_agt,
                                                            l_tip_produto);
        -- I 3.47
        IF l_eh_3_pacotes THEN
         --
         pp_asigna('tres_pacotes',1);
         --
        ELSE
         --
         pp_asigna('tres_pacotes',0);
         --
        END IF;
       -- F 3.47
       END IF;
       -- F 2.85
       --
       /* Comentado para sempre carregar os dados da apolice
       BEGIN
         --
         em_k_a2000560.p_lee(p_cod_cia       => l_cod_cia,
                             p_num_propuesta => l_num_propuesta,
                             p_cod_campo     => 'DFCOD_CIA');
         --
       EXCEPTION
         WHEN l_nao_existe THEN
              l_carga_dados := TRUE;
       END;
       --
       IF l_carga_dados THEN
         --
         p_carga_dados_endosso;
         --
       END IF;
       */
       --
       --p_carga_dados_endosso;
       --
       IF NOT l_eh_3_pacotes THEN
       --
         OPEN l_retorno
         FOR
         --
           /* SELECT NVL(g.COD_CAMPO_COTI,g.COD_CAMPO) AS COD_CAMPO,
                    a.VAL_CAMPO                      AS VAL_CAMPO
               FROM a2000560 a,
                    g9999992 g
              WHERE a.cod_cia = l_cod_cia
                AND a.num_propuesta = l_num_propuesta
                AND g.cod_cia    = a.cod_cia
                AND g.cod_campo  = a.cod_campo
                AND g.cod_ramo   = g_k_cod_ramo_generico
                AND g.cod_tarifa = g_k_cod_tarifa_generico
                AND g.cod_agt    = g_k_cod_agt_generico
                AND g.num_paso   = g_k_num_paso_generico
                AND g.tip_mvto_batch = g_k_tip_mvto_batch_endosso
                AND g.cod_servicio   = g_k_cod_srv_cons_det_apolice;*/
           --
           WITH C_NOM_MODALIDAD AS
            (SELECT g.nom_modalidad
               FROM g2990004 g
              WHERE COD_MODALIDAD =
                    (SELECT A.VAL_CAMPO
                       FROM a2000560 A
                      WHERE A.num_propuesta = l_num_propuesta
                        AND A.COD_CAMPO = 'COD_MODALIDAD'))
           SELECT COD_CAMPO, VAL_CAMPO
             FROM (SELECT NVL(g.COD_CAMPO_COTI, g.COD_CAMPO) AS COD_CAMPO,
                          a.VAL_CAMPO AS VAL_CAMPO,
                          g.NUM_ORDEN AS NUM_ORDEN
                     FROM a2000560 a, g9999992 g
                    WHERE a.cod_cia         = l_cod_cia
                      AND a.num_propuesta   = l_num_propuesta
                      AND g.cod_cia         = a.cod_cia
                      AND g.cod_campo       = a.cod_campo
                      AND g.cod_ramo        = g_k_cod_ramo_generico
                      AND g.cod_tarifa      = g_k_cod_tarifa_generico
                      AND g.cod_agt         = g_k_cod_agt_generico
                      AND g.num_paso        = g_k_num_paso_generico
                      AND g.tip_mvto_batch  = g_k_tip_mvto_batch_endosso
                      AND g.cod_servicio    = g_k_cod_srv_cons_det_apolice
                      AND g.mca_inh         = trn.NO
                   UNION
                   SELECT 'VAL_PREMIO_TOTAL'        AS COD_CAMPO,
                          TO_CHAR(SUM(a.imp_spto))  AS VAL_CAMPO,
                          996                       AS NUM_ORDEN
                   FROM a2100170 a
                   WHERE a.cod_cia       = l_cod_cia
                     AND a.num_poliza    = l_num_propuesta
                     AND a.num_spto      = l_num_spto
                     AND a.num_apli      = trn.CERO
                     AND a.num_spto_apli = l_num_spto_apli
                   UNION
                   SELECT 'VAL_PREMIO_LIQUIDO'      AS COD_CAMPO,
                          TO_CHAR(SUM(a.imp_spto))  AS VAL_CAMPO,
                          997                       AS NUM_ORDEN
                   FROM a2100170 a
                   WHERE a.cod_cia       = l_cod_cia
                     AND a.num_poliza    = l_num_propuesta
                     AND a.num_spto      = l_num_spto
                     AND a.num_apli      = trn.CERO
                     AND a.num_spto_apli = l_num_spto_apli
                     AND a.cod_desglose  <> g_k_cod_desglose_iof
                   UNION
                   SELECT 'VAL_IOF'                 AS COD_CAMPO,
                          TO_CHAR(SUM(a.imp_spto))  AS VAL_CAMPO,
                          998                       AS NUM_ORDEN
                   FROM a2100170 a
                   WHERE a.cod_cia       = l_cod_cia
                     AND a.num_poliza    = l_num_propuesta
                     AND a.num_spto      = l_num_spto
                     AND a.num_apli      = trn.CERO
                     AND a.num_spto_apli = l_num_spto_apli
                     AND a.cod_desglose  = g_k_cod_desglose_iof
                   UNION
                   SELECT 'NOM_MODALIDAD' AS COD_CAMPO,
                          NOM_MODALIDAD AS VAL_CAMPO,
                          999 AS NUM_ORDEN
                     FROM C_NOM_MODALIDAD
                    ORDER BY NUM_ORDEN);
       ELSE
         --
         OPEN l_retorno
         FOR
           WITH C_NOM_MODALIDAD AS
            (SELECT A.VAL_CAMPO
                       FROM a2000560 A
                      WHERE A.num_propuesta = l_num_propuesta
                        AND A.COD_CAMPO = 'CLAVE_FORMULA')
           SELECT COD_CAMPO, VAL_CAMPO
             FROM (SELECT NVL(g.COD_CAMPO_COTI, g.COD_CAMPO) AS COD_CAMPO,
                          a.VAL_CAMPO AS VAL_CAMPO,
                          g.NUM_ORDEN AS NUM_ORDEN
                     FROM a2000560 a, g9999992 g

                    WHERE a.cod_cia = l_cod_cia
                      AND a.num_propuesta = l_num_propuesta
                      AND g.cod_cia = a.cod_cia
                      AND g.cod_campo = a.cod_campo
                      AND g.cod_ramo = g_k_cod_ramo_generico
                      AND g.cod_tarifa = g_k_cod_tarifa_generico
                      AND g.cod_agt = g_k_cod_agt_generico
                      AND g.num_paso = g_k_num_paso_generico
                      AND g.tip_mvto_batch = g_k_tip_mvto_batch_endosso
                      AND g.cod_servicio = g_k_cod_srv_cons_det_apolice
                      AND g.mca_inh = trn.NO
                   UNION
                   SELECT 'VAL_PREMIO_TOTAL'        AS COD_CAMPO,
                          TO_CHAR(SUM(a.imp_spto))  AS VAL_CAMPO,
                          996                       AS NUM_ORDEN
                   FROM a2100170 a
                   WHERE a.cod_cia       = l_cod_cia
                     AND a.num_poliza    = l_num_propuesta
                     AND a.num_spto      = l_num_spto
                     AND a.num_apli      = trn.CERO
                     AND a.num_spto_apli = l_num_spto_apli
                   UNION
                   SELECT 'VAL_PREMIO_LIQUIDO'      AS COD_CAMPO,
                          TO_CHAR(SUM(a.imp_spto))  AS VAL_CAMPO,
                          997                       AS NUM_ORDEN
                   FROM a2100170 a
                   WHERE a.cod_cia       = l_cod_cia
                     AND a.num_poliza    = l_num_propuesta
                     AND a.num_spto      = l_num_spto
                     AND a.num_apli      = trn.CERO
                     AND a.num_spto_apli = l_num_spto_apli
                     AND a.cod_desglose  <> g_k_cod_desglose_iof
                   UNION
                   SELECT 'VAL_IOF'                 AS COD_CAMPO,
                          TO_CHAR(SUM(a.imp_spto))  AS VAL_CAMPO,
                          998                       AS NUM_ORDEN
                   FROM a2100170 a
                   WHERE a.cod_cia       = l_cod_cia
                     AND a.num_poliza    = l_num_propuesta
                     AND a.num_spto      = l_num_spto
                     AND a.num_apli      = trn.CERO
                     AND a.num_spto_apli = l_num_spto_apli
                     AND a.cod_desglose  = g_k_cod_desglose_iof
                   UNION
                   SELECT 'NOM_MODALIDAD' AS COD_CAMPO,
                          VAL_CAMPO       AS VAL_CAMPO,
                          999 AS NUM_ORDEN
                     FROM C_NOM_MODALIDAD
                    ORDER BY NUM_ORDEN);
         --
       END IF;
         --
       p_gerar_xml_campo_unico(l_retorno, g_xml);
       --
       mx('F', 'p_lee_detalhe_endosso');
       --
    EXCEPTION
       WHEN OTHERS THEN
          --
          --p_erro := ;
          mx('-',SUBSTR(SQLERRM,1,200));
          --
          mx('F', 'p_lee_detalhe_endosso - EXCEPTION');
          --
     END p_lee_detalhe_endosso;
     --
     /* ------------------------------------------------------
     || Processa chamada do webmethods, retorna vsalor calculado
     */ ------------------------------------------------------
     --
     PROCEDURE p_calcular_valor_ajustado (p_val_sub_modelo       IN  a2000031_vcr.val_sub_modelo%TYPE,
                                          p_pct_ajuste_tab_ref   IN  a2000031_vcr.pct_ajuste_tab_ref%TYPE,
                                          p_out_val_sub_modelo   OUT a2000031_vcr.val_sub_modelo%TYPE)
     IS
     BEGIN
        --
        mx('I', 'p_calcular_valor_ajustado');
        --
        p_out_val_sub_modelo := ROUND((p_val_sub_modelo * p_pct_ajuste_tab_ref)/g_k_num_divisor_porcentagem,
                                       g_k_num_arredondamento);
        --
        mx('F', 'p_calcular_valor_ajustado');
        --
     END p_calcular_valor_ajustado;
     --
     /* ------------------------------------------------------
     || Processa chamada do webmethods, retorna percentual calculado
     */ ------------------------------------------------------
     --
     PROCEDURE p_calcular_fator_ajustado (p_val_referencia IN  a2000031_vcr.val_sub_modelo%TYPE,
                                          p_val_sub_modelo IN  a2000031_vcr.val_sub_modelo%TYPE,
                                          p_pct_ajustado   OUT a2000031_vcr.pct_ajuste_tab_ref%TYPE)
     IS
     BEGIN
        --
        mx('I', 'p_calcular_fator_ajustado');
        --
        p_pct_ajustado := ROUND((p_val_sub_modelo * g_k_num_divisor_porcentagem / p_val_referencia)
                               ,6);
        --
        mx('F', 'p_calcular_fator_ajustado');
        --
     END p_calcular_fator_ajustado;

     --
     /* ------------------------------------------------------
     || Processa chamada do webmethods, retorna um refCursor
     */ ------------------------------------------------------
     --
     PROCEDURE p_lee_lista_ano_veiculo(p_cod_cia           IN a2109157_vcr.cod_cia      %TYPE,
                                       p_cod_ramo          IN a2000030.cod_ramo         %TYPE,
                                       p_cod_campo         IN c2000020.cod_campo        %TYPE,
                                       p_cod_marca         IN a2109157_vcr.cod_marca    %TYPE,
                                       p_cod_modelo        IN a2109157_vcr.cod_modelo   %TYPE,
                                       p_cod_submodelo     IN a2109157_vcr.cod_submodelo%TYPE,
                                       p_retorno          OUT ref_cursor,
                                       p_erro             OUT VARCHAR2) IS
     --
     l_ano_de  VARCHAR(4);
     l_ano_ate VARCHAR2(4);
     l_anos    VARCHAR2(4);
     --
      CURSOR l_c2109042_vcr IS
        SELECT a.num_ano_de, a.num_ano_ate
          FROM g2109042_vcr a
        WHERE a.cod_cia = p_cod_cia
          AND a.cod_marca = p_cod_marca
          AND a.cod_modelo = p_cod_modelo
          AND a.cod_sub_modelo = p_cod_submodelo
              /*               AND a.fec_validez    =(SELECT MAX(fec_validez)
              FROM g2109042_vcr b
              WHERE b.cod_cia           = a.cod_cia
                AND b.cod_marca         = a.cod_marca
                AND b.cod_modelo        = a.cod_modelo
                AND b.cod_sub_modelo    = a.cod_sub_modelo); */
          AND a.fec_validez =
              (SELECT MAX(v.fec_validez)
                  FROM g2109042_vcr v
                WHERE v.cod_cia = a.cod_cia
                  AND v.cod_marca = a.cod_marca
                  AND v.cod_modelo = a.cod_modelo
                  AND v.cod_sub_modelo = a.cod_sub_modelo
                  AND v.fec_validez <= g_k_data);

     --
     l_reg_2109042_vcr l_c2109042_vcr%ROWTYPE;
     --
     l_retorno ref_cursor;
     --
   BEGIN
     --
     mx('I', 'p_lee_lista_ano_veiculo');
     --
     IF l_c2109042_vcr%ISOPEN THEN
       --
       CLOSE l_c2109042_vcr;
       --
     END IF;
     --
     IF p_cod_marca = g_k_cod_marca_outro THEN
       --
       l_ano_de := g_k_ano_1930;
       --
       IF p_cod_campo = 'ANIO_MODELO' THEN
         --
         l_ano_ate := TO_CHAR(g_k_data, 'YYYY') + trn.UNO;
         --
       ELSE
         --
         l_ano_ate := TO_CHAR(g_k_data, 'YYYY');
         --
       END IF;
      --
    ELSIF p_cod_marca = em_k_backoffice_flotas.g_k_cod_marca_vot THEN              -- v 4.02.i
      --
      l_ano_de := g_k_ano_1950;
      --
      IF p_cod_campo = 'ANIO_MODELO' THEN
        --
        l_ano_ate := TO_CHAR(g_k_data, 'YYYY') + trn.UNO;
        --
      ELSE
        --
        l_ano_ate := TO_CHAR(g_k_data, 'YYYY');
        --
      END IF;                                                                      -- v 4.02.f
      --
    ELSE
      --
      OPEN l_c2109042_vcr;
      --
      FETCH l_c2109042_vcr
        INTO l_reg_2109042_vcr;
      --
      l_ano_de  := l_reg_2109042_vcr.num_ano_de;
      l_ano_ate := l_reg_2109042_vcr.num_ano_ate;
      --
      CLOSE l_c2109042_vcr;
      --
    END IF;
    --
    l_anos := l_ano_ate - l_ano_de;
    --
    l_anos := l_anos + trn.UNO;
    --
    g_cot_dados := TYPTAB_DADOS_COT();
    g_cot_reg   := TYPREG_DADOS_COT.autocreate;
    --
    FOR I IN trn.UNO .. l_anos LOOP
      --
      g_cot_reg.cod_campo := l_ano_de;
      g_cot_reg.val_campo := l_ano_de;
      --
      g_cot_dados.EXTEND(1);
      g_cot_dados(g_cot_dados.LAST) := g_cot_reg;
      --
      l_ano_de := l_ano_de + trn.UNO;
      --
    END LOOP;
    --
    IF p_retorno%ISOPEN THEN
      --
      CLOSE p_retorno;
      --
    END IF;
    --
    OPEN p_retorno FOR
      SELECT anio_modelo.cod_campo AS COD_CAMPO,
             anio_modelo.val_campo AS DES_MENSAGEM
        FROM TABLE(CAST(g_cot_dados AS TYPTAB_DADOS_COT)) anio_modelo
       ORDER BY 2 DESC;
    --
    mx('F', 'p_lee_lista_ano_veiculo');
    --
  EXCEPTION
    WHEN OTHERS THEN
      --
      p_erro := SQLERRM;
      --
      g_err_msg :=  TYPTAB_MSG_WS(); -- 4.99
      --
      g_err_msg.EXTEND(1); -- 4.99
      g_err_msg(g_err_msg.LAST) := fp_trata_msg('ANIO_MODELO', -- 4.99
                                                                                NULL,
                                                                                g_k_pre_msg_erro ||
                                                                                '20098557' ||
                                                                                g_k_sep_cod_msg);
      --
      pp_processa_mensagem(g_err_msg, -- 4.99
                           l_retorno);
      --
      g_err_msg := NULL; -- 4.99
      --
      mx('F', 'p_lee_lista_ano_veiculo - EXCEPTION');
      --
     END p_lee_lista_ano_veiculo;

     --
     /* ------------------------------------------------------
     || Processa chamada do webmethods, retorna um refCursor
     */ ------------------------------------------------------
     --
     PROCEDURE p_lee_lista_valores (p_cod_cia        IN a2000030.cod_cia%TYPE,
                                    p_cod_ramo       IN a2000030.cod_ramo%TYPE,
                                    p_cod_campo      IN c2000020.cod_campo%TYPE,
                                    p_retorno        OUT ref_cursor,
                                    p_erro           OUT ref_cursor)
     IS
        --
        l_val_retorno    df_cmn_nwt_xx_cnn.vrb_nam_val%TYPE;
        --
     BEGIN
        --
        mx('I', 'p_lee_lista_valores');
        --
        BEGIN
           --
           l_val_retorno := ea_k_231_utils.f_recupera_constante(p_cod_cia, p_cod_ramo || p_cod_campo);
           --
        EXCEPTION
           WHEN OTHERS THEN
             --
             l_val_retorno := TRN.NO;
             --
        END;
        --
        OPEN p_retorno
        FOR
           WITH c_lista_dv AS (SELECT cod_valor,
                                      DECODE(l_val_retorno, TRN.SI, cod_valor || ' - ' || nom_valor,
                                                            nom_valor) nom_valor
                                 FROM g2990006 g
                                WHERE g.cod_cia   = p_cod_cia
                                  AND g.cod_ramo  = p_cod_ramo
                                  AND g.cod_campo = P_cod_campo
                               ORDER BY cod_valor),
                c_lista AS (SELECT cod_valor,
                                   nom_valor
                              FROM g1010031 g
                             WHERE g.cod_campo  = p_cod_campo
                               AND g.cod_ramo   = p_cod_ramo
                               AND g.cod_idioma = g_k_cod_idioma
                            ORDER BY cod_valor)
           SELECT NVL(d.cod_valor, l.cod_valor)                      AS cod_valor,
                  NVL(g6.val_columna, NVL(d.nom_valor, l.nom_valor)) AS nom_valor
              FROM (g2000020 g
                   LEFT OUTER JOIN c_lista_dv d
                       ON 1=1
                   LEFT OUTER JOIN c_lista l
                       ON 1=1)
                   LEFT JOIN g2009017_vcr g6 -- I 4.94 Alteracao das descricoes das coberturas
                       ON g6.cod_cia     = p_cod_cia
                      AND g6.cod_ramo    = p_cod_ramo
                      AND g6.nom_columna = p_cod_campo
                      AND g6.cod_valor   = NVL(d.cod_valor, l.cod_valor)
                      AND g6.mca_baja    = 'N'
              WHERE
                    g.cod_cia   = p_cod_cia
                AND g.cod_ramo  = p_cod_ramo
                AND g.cod_campo = p_cod_campo
           ORDER BY cod_valor;
        --
        mx('F', 'p_lee_lista_valores');
        --
     EXCEPTION
        WHEN OTHERS THEN
           --
           g_err_msg :=  TYPTAB_MSG_WS(); -- 4.99
           --
           g_err_msg.EXTEND(1); -- 4.99
           g_err_msg(g_err_msg.LAST) := fp_trata_msg('ANIO_MODELO', -- 4.99
                                                                                     NULL,
                                                                                     g_k_pre_msg_erro || '20098557' || g_k_sep_cod_msg);
           --
           pp_processa_mensagem(g_err_msg, -- 4.99
                                p_erro);
           --
           g_err_msg := NULL; -- 4.99
           --
           mx('F', 'p_lee_lista_valores - EXCEPTION');
           --
     END p_lee_lista_valores;

     --
     /* ------------------------------------------------------
     || p_ws_usar_cotizacion
     */ ------------------------------------------------------
     --
     PROCEDURE p_ws_usar_cotacao
     IS
        --
        l_cod_cia            g9999992.cod_cia%TYPE;
        l_cod_ramo           g9999992.cod_ramo%TYPE;
        l_num_cotizacion     c2000000.num_cotizacion%TYPE;
        l_num_cotizacion_old c2000000.num_cotizacion%TYPE;
        l_num_simulacion     g2000000.num_simulacion   %TYPE := NULL; -- 3.26
        l_cod_tip_renov c2000000.val_columna%TYPE; --TEMPORAL SPARRA
        --
        l_count NUMBER; -- 4.85
        --
        CURSOR c_C2000000_2 --TEMPORAL SPARRA
        IS
           SELECT val_columna
             FROM C2000000
            WHERE cod_cia        = l_cod_cia
              AND cod_ramo       = l_cod_ramo
              AND num_cotizacion = l_num_cotizacion_old
              AND nom_columna    = 'COD_TIP_RENOV';
        --
        CURSOR c_C2000000
        IS
           SELECT  *
             FROM C2000000
            WHERE cod_cia        = l_cod_cia
              AND cod_ramo       = l_cod_ramo
              AND num_cotizacion = l_num_cotizacion_old;

        --
        CURSOR c_g9999992( p_nom_tabla g9999992.nom_tabla%TYPE
                          ,p_cod_campo g9999992.cod_campo%TYPE )
        IS
           SELECT COUNT(1)
             FROM g9999992
            WHERE cod_cia        = l_cod_cia
              AND cod_ramo       = l_cod_ramo
              AND cod_campo      = p_cod_campo
              AND nom_tabla      = p_nom_tabla;  -- 4.85
        --
        l_reg_C2000000       c_C2000000%ROWTYPE;
        --
        -- v1.97
        PROCEDURE pi_inserta_nacionalidad(p_cod_campo c2000000.nom_columna%TYPE
                                         ,p_sufijo    c2000000.nom_columna%TYPE
                                         ,p_nom_tabla c2000000.nom_tabla  %TYPE)
        IS
        --
        l_tip_docum c2000000.val_columna%TYPE := trn.NULO;
        l_val_campo c2000000.val_columna%TYPE := trn.NULO;
        --
        BEGIN
          --
          mx('I', 'pi_inserta_nacionalidad');
          --
          ea_k_231_utils.p_devuelve_dato_cotizacion(p_nom_tabla   => ea_k_231_utils.g_k_tabla_int
                                                   ,p_nom_columna => 'TIP_DOCUM' || p_sufijo
                                                   ,p_val_campo   => l_tip_docum);
          --
          IF l_tip_docum = ea_k_231_utils.f_recupera_constante(p_cod_cia   => l_cod_cia
                                                              ,p_cod_campo => 'TIP_DOCUM_CPF')
          THEN
            --
            ea_k_231_utils.p_devuelve_dato_cotizacion(p_nom_tabla   => ea_k_231_utils.g_k_tabla_int
                                                     ,p_nom_columna => 'COD_NACIONALIDAD' || p_sufijo
                                                     ,p_val_campo   => l_val_campo);
            --
          ELSIF l_tip_docum = ea_k_231_utils.f_recupera_constante(p_cod_cia   => l_cod_cia
                                                                 ,p_cod_campo => 'TIP_DOCUM_CGC')
          THEN
            --
            ea_k_231_utils.p_devuelve_dato_cotizacion(p_nom_tabla   => ea_k_231_utils.g_k_tabla_int_vcr
                                                     ,p_nom_columna => 'COD_PAIS_ORIGEN' || p_sufijo
                                                     ,p_val_campo   => l_val_campo);
            --
          END IF;
          --
          IF l_val_campo IS NOT NULL
          THEN
            --
            pp_inserta_c2000000(ea_k_231_utils.g_k_tabla_int
                               ,'COD_NACIONALIDAD' || p_sufijo
                               ,trn.NULO);
            --
            pp_inserta_c2000000(ea_k_231_utils.g_k_tabla_int_vcr
                               ,'COD_PAIS_ORIGEN' || p_sufijo
                               ,trn.NULO);
            --
            pp_inserta_c2000000(p_nom_tabla
                               ,p_cod_campo
                               ,l_val_campo);
            --
          END IF;
          --
          mx('F', 'pi_inserta_nacionalidad');
          --
        END pi_inserta_nacionalidad;
        --
    -- v1.97
        PROCEDURE pi_inserta_nacionalidad
        IS
    --
    l_tip_docum c2000000.val_columna%TYPE := trn.NULO;
    l_cod_campo c2000000.val_columna%TYPE := trn.NULO;
    l_nom_tabla c2000000.val_columna%TYPE := trn.NULO;
        --
        BEGIN
          --
          mx('I', 'pi_inserta_nacionalidad');
          --
          IF NVL(trn_k_global.ref_f_global('tip_mvto_batch')
                ,ea_k_231_utils.g_k_cotiza_batch) = ea_k_231_utils.g_k_cotiza_batch
          THEN
      --
      IF trn_k_global.devuelve('COD_TARIFA') = 23111 THEN
      --
            pi_inserta_nacionalidad('COD_PAIS_ORIGEN'
                                   ,trn.NULO
                                   ,ea_k_231_utils.g_k_tabla_int_vcr);
            --
      ELSE
      --
              ea_k_231_utils.p_devuelve_dato_cotizacion(p_nom_tabla   => ea_k_231_utils.g_k_tabla_int,
                                                p_nom_columna => 'TIP_DOCUM',
                                                p_val_campo   => l_tip_docum);
        --
        IF l_tip_docum = ea_k_231_utils.f_recupera_constante(p_cod_cia   => l_cod_cia
                                                                ,p_cod_campo => 'TIP_DOCUM_CPF')
        --
        THEN
        --
        l_cod_campo := 'COD_NACIONALIDAD';
        l_nom_tabla := ea_k_231_utils.g_k_tabla_int;
        --
        ELSIF l_tip_docum = ea_k_231_utils.f_recupera_constante(p_cod_cia   => l_cod_cia
                                                                 ,p_cod_campo => 'TIP_DOCUM_CGC')
        THEN
        --
        l_cod_campo := 'COD_PAIS_ORIGEN';
        l_nom_tabla := ea_k_231_utils.g_k_tabla_int_vcr;
        --
        END IF;
      --
      pi_inserta_nacionalidad(l_cod_campo
                                   ,trn.NULO
                                   ,l_nom_tabla);
      --
      END IF;
      --

            pi_inserta_nacionalidad('COD_NACIONALIDAD_RESP'
                                   ,ea_k_231_utils.g_k_tomador_resp
                                   ,ea_k_231_utils.g_k_tabla_int);
            --
          END IF;
          --
          mx('F', 'pi_inserta_nacionalidad');
          --
        END pi_inserta_nacionalidad;
        --
     BEGIN
        --
        mx('I', 'p_ws_usar_cotacao');
        --
        l_cod_cia             := trn_k_global.devuelve('cod_cia');
        l_cod_ramo            := trn_k_global.devuelve('cod_ramo');
        -- {v3.46
        --TEMPORAL SPARRA{
        l_num_cotizacion_old  := fp_recupera_valor (g_xml_in, 'NUM_COTIZACION');
        --
        OPEN c_C2000000_2;
        FETCH c_C2000000_2 INTO l_cod_tip_renov;
        CLOSE c_C2000000_2;
        --
        /*mx('l_cod_tip_renov', l_cod_tip_renov);
        IF nvl(l_cod_tip_renov,0) != 2 THEN
          --
          mx('SANTIAGO', 'NO ES');*/ -- 4.64
        --
        l_num_cotizacion      := trn_k_global.ref_f_global('num_cotizacion');
        --
        IF l_num_cotizacion IS NULL
        THEN
           --
           l_num_cotizacion := ea_k_231_coti.f_num_cotizacion(l_cod_cia, l_cod_ramo, g_cod_usr_automatico);
           --
           trn_k_global.asigna('num_cotizacion', l_num_cotizacion);
           --
        END IF;
        --
        --  }v3.46
        --
        --l_num_cotizacion_old  := fp_recupera_valor (g_xml_in, 'NUM_COTIZACION');
        --
        IF l_num_cotizacion_old IS NOT NULL THEN
           --
           OPEN c_C2000000;
           LOOP FETCH c_C2000000 INTO l_reg_C2000000;
              --
              EXIT WHEN  c_C2000000%NOTFOUND;
              --
              -- {v2.31
              IF l_reg_C2000000.nom_columna = 'COD_TIP_RENOV' AND
                 l_reg_C2000000.val_columna = '1' THEN
                --
                ea_k_231_coti.p_inserta_c2000000(l_num_cotizacion,
                                                 l_reg_C2000000.nom_tabla,
                                                 l_reg_C2000000.nom_Columna,
                                                 '2');
                --
                ea_k_231_coti.p_inserta_c2000000(l_num_cotizacion,
                                                 g_k_tabla_vg,
                                                 'NUM_COTIZACION_RG',
                                                 l_num_cotizacion_old);
                --
                trn_k_global.asigna('NUM_COTIZACION', l_num_cotizacion_old);
                --
                ea_k_231_coti.p_inserta_c2000000(l_num_cotizacion_old,
                                                 g_k_tabla_vg,
                                                 'NUM_COTIZACION_FLEX',
                                                 l_num_cotizacion);
                --
                trn_k_global.asigna('NUM_COTIZACION', l_num_cotizacion);
                --I 4.85
              ELSIF   l_reg_C2000000.nom_columna LIKE '%CONDUCTOR%' THEN
                --
                OPEN  c_g9999992(  l_reg_C2000000.Nom_Tabla, l_reg_C2000000.nom_columna);

                FETCH c_g9999992 into l_count ;
                CLOSE c_g9999992 ;
                IF l_count > 0 THEN
                --
                  ea_k_231_coti.p_inserta_c2000000(l_num_cotizacion,
                                                   l_reg_C2000000.nom_tabla,
                                                   l_reg_C2000000.nom_Columna,
                                                   l_reg_c2000000.cod_fila,    -- v3.50
                                                   l_reg_C2000000.val_columna);
                  --
                END IF;
                -- F 4.85
              ELSIF l_reg_C2000000.nom_columna not in ('IMP_CLUBE_SEG_NOVO'
                                                      ,'IMP_RENOVACAO_COMPETITIVA'
                                                      ,'FEC_VALIDEZ_TARIFA#1'
                                                      ,'FEC_VALIDEZ_TARIFA#2'
                                                      ,'FEC_VALIDEZ_TARIFA#3' --v3.78
                                                      -- I v5.20
                                                      ,'SUMA_ASEG'
                                                      ,'COD_FRANQUICIA'
                                                      ,'FEC_EFEC_POLIZA_ORIG'
                                                      ,'MCA_RECALCULO_CR'
                                                      ,'FEC_PRIMEIRO_CALCULO' -- v5.58
                                                      -- F v5.20
                                                      )
              THEN
                --
                ea_k_231_coti.p_inserta_c2000000(l_num_cotizacion,
                                                 l_reg_C2000000.nom_tabla,
                                                 l_reg_C2000000.nom_Columna,
                                                 l_reg_c2000000.cod_fila,    -- v3.50
                                                 l_reg_C2000000.val_columna);
                -- }v2.31
                --
              END IF;
              --
              -- I 3.26
             IF l_reg_C2000000.nom_columna like 'NUM_SIMULACION#%' THEN
             --
                ea_k_231_coti.p_inserta_c2000000(l_num_cotizacion,
                                                 'G2000000',
                                                 l_reg_C2000000.nom_Columna,
                                                 trn.NULO);
                --
             END IF;
             -- F 3.26
       -- Ini 3.50
       IF l_reg_C2000000.nom_columna = 'NUM_RENOVACIONES' THEN
                --
                ea_k_231_coti.p_inserta_c2000000(l_num_cotizacion,
                                                 g_k_tabla_dv,
                                                 'NUM_TEMPO_CASA',
                                                 l_reg_C2000000.val_columna);
                --
             END IF;
       -- Fin 3.50
           END LOOP;
           --
           CLOSE c_C2000000;
           --
           -- }v3.46
        END IF;
        --
        ea_k_231_coti.p_inserta_actualizando_df;
        --
        pi_inserta_nacionalidad; --v1.97
        --
        /*ELSE
          --
          trn_k_global.asigna('num_cotizacion', l_num_cotizacion_old);
          mx('SANTIAGO', 'ES FLEX');
          trn_k_global.p_asigna('MCA_EH_RF','S');
          --
        END IF; --TEMPORAL SPARRA*/ -- 4.64
        --
        mx('F', 'p_ws_usar_cotacao');
        --
     EXCEPTION
        WHEN OTHERS THEN
           --
           g_cod_mensaje    := g_k_cod_error_gen;
           g_anx_mensaje    := SQLERRM;
           --
           mx('F', 'p_ws_usar_cotacao - EXCEPTION');
           --
           pp_devuelve_error;
           --

     END p_ws_usar_cotacao;

     --
   /* ------------------------------------------------------
   || Le a lista de valores e retorna na variavel : p_retorno
   */ ------------------------------------------------------
   PROCEDURE p_lee_lista_dinamica (p_cod_cia          IN a2000030.cod_cia%TYPE,
                                   p_cod_ramo         IN a2000030.cod_ramo%TYPE,
                                   p_cod_campo        IN c2000020.cod_campo%TYPE,
                                   p_nom_tabla_valida IN g2000020.nom_tabla_valida%TYPE,
                                   p_cod_version      IN g2000020.cod_version%TYPE,
                                   p_xml_in           IN CLOB,
                                   p_retorno          OUT ref_cursor,
                                   p_erro             OUT ref_cursor)
   IS
      --
      l_xmldoc                DBMS_XMLDOM.DOMDOCUMENT;
      l_node_list             DBMS_XMLDOM.DOMNODELIST;
      l_node                  DBMS_XMLDOM.DOMNODE;
      --
      l_val_cod_campo         c2000000.nom_columna%TYPE;
      l_cod_campo             c2000000.nom_columna%TYPE;
      l_val_campo             c2000000.val_columna%TYPE;
      --
      l_len                   NUMBER;
      l_orden                 NUMBER := 1;
      --
      l_fila_dados            TYPTAB_DADOS_COT;
      l_fila_reg              TYPREG_DADOS_COT;
      --
      l_devuelve_fila         VARCHAR2(250);
      --
      l_position_separador    NUMBER;
      --
      l_prefixo               VARCHAR2(15) := NULL;
      --
      l_tamanho_fila          NUMBER;
      l_inicio_fila_servico   NUMBER;
      l_fila_servico          VARCHAR2(250);
      l_inicio_descricao_fila NUMBER;
      --
     BEGIN
      --
      mx('I', 'p_lee_lista_dinamica');
      --
      -- efetua asigna dos parametros de entrada genericos
      trn_k_global.asigna('COD_CIA', p_cod_cia);
      trn_k_global.asigna('COD_RAMO', p_cod_ramo);
      trn_k_global.asigna('COD_CAMPO', p_cod_campo);
      trn_k_global.asigna('DVCOD_CIA', p_cod_cia);
      trn_k_global.asigna('DVCOD_RAMO', p_cod_ramo);
      trn_k_global.asigna('DVDVCOD_CAMPO', p_cod_campo);
      --
      trn_k_global.asigna('COD_IDIOMA', g_k_cod_idioma);
      --
      -- tratamento especifico para ACESSORIO e OPCIONAL
      IF p_cod_campo IN ('ACESSORIO','OPCIONAL') THEN
         --
         l_prefixo := p_cod_campo || g_k_prefixo_cod_acessorio;
         --
      END IF;
      --
      -- busca dados do xml de entrada para efetuar asigna
      IF p_xml_in IS NOT NULL THEN
         --
         l_xmldoc        := fp_transforma_xml (p_xml_in);
         --
         l_node_list     := DBMS_XMLDOM.getElementsByTagName(l_xmldoc, trn.ASTERISCO);
         l_len           := DBMS_XMLDOM.getLength(l_node_list);
         --
         l_cod_campo     := NULL;
         l_val_campo     := NULL;
         --
         FOR i IN trn.CERO .. l_len - trn.UNO LOOP
            --
            l_node := DBMS_XMLDOM.item(l_node_list, i);
            l_val_cod_campo := DBMS_XMLDOM.getNodeName(l_node);
            --
            IF l_val_cod_campo = g_k_val_campo_codCampo THEN
               --
               l_cod_campo := DBMS_XMLDOM.getNodeValue(DBMS_XMLDOM.getFirstChild(l_node));
               --
            ELSIF l_val_cod_campo = g_k_val_campo_valCampo THEN
               --
               l_val_campo := DBMS_XMLDOM.getNodeValue(DBMS_XMLDOM.getFirstChild(l_node));
               --

            END IF;

            --
            IF l_val_campo IS NOT NULL AND l_cod_campo IS NOT NULL THEN
               --
               -- efetua asigna dos parametros de entrada para serem utilizados na query dinamica
               trn_k_global.asigna(upper(l_cod_campo), l_val_campo);
               trn_k_global.asigna(em.PREFIJO_DATOS_VARIABLES||upper(l_cod_campo), l_val_campo);
               --
               l_cod_campo   := NULL;
               l_val_campo   := NULL;
               --
            END IF;

            --
         END LOOP;

         --
      END IF;
      --
      IF p_nom_tabla_valida = 'X2990006_VCR' THEN
         --
         --RETORNA LISTA RELACIONADA AOS DADOS VARIAVEIS
         trn_k_global.asigna('COD_CIA'          , p_cod_cia                                                    );
         trn_k_global.asigna('COD_RAMO'         , p_cod_ramo                                                   );
         trn_k_global.asigna('NUM_RIESGO'       , trn.UNO                                                      );
         trn_k_global.asigna('DVCOD_MODALIDAD'  , '99999'                                                      );
         trn_k_global.asigna('NUM_POLIZA'       , '9999999999999'                                              );
         trn_k_global.asigna('NUM_COTIZACION'   , '9999999999999'                                              );
         trn_k_global.asigna('cod_tarifa'       , '999'                                                        );
         trn_k_global.asigna('num_poliza_grupo' , '9999999999999'                                              );
         trn_k_global.asigna('num_contrato'     , EM.num_contrato_gen                                          );
         trn_k_global.asigna('num_subcontrato'  , EM.num_subcontrato_gen                                       );
         trn_k_global.asigna('COD_MON'          , trn_k_global.cod_mon                                         );
         trn_k_global.asigna('COD_COB'          , '999'                                                        );
         trn_k_global.asigna('COD_NIVEL1'       , DC.cod_nivel1_gen                                            );
         trn_k_global.asigna('COD_NIVEL2'       , DC.cod_nivel2_gen                                            );
         trn_k_global.asigna('COD_NIVEL3'       , DC.cod_nivel3_gen                                            );
         trn_k_global.asigna('COD_CANAL1'       , dc.COD_CANAL1_GEN                                            );
         trn_k_global.asigna('COD_CANAL2'       , dc.COD_CANAL2_GEN                                            );
         trn_k_global.asigna('COD_CANAL3'       , dc.COD_CANAL3_GEN                                            );
         trn_k_global.asigna('COD_AGT'          , g_k_cod_agt_generico                                         );
         trn_k_global.asigna('FEC_VALIDEZ'      , to_char(trunc(sysdate),'ddmmrrrr')                           );
         trn_k_global.asigna('DVTIP_SEGMENTO'   , trn_k_df_cmn_nwt_xx_cnn.f_vrb_nam_val('DVTIP_SEGMENTO_DEFEC'));
         --
         em_p_lista_dinamica_dv;
         --
      END IF;
      --
      -- executa query dinamica
      trn_k_lv.p_query(p_nom_tabla_valida, p_cod_version);
      --
      -- type para guardar resultado da query dinamica
      l_fila_dados := TYPTAB_DADOS_COT();
      l_fila_reg   := TYPREG_DADOS_COT.autocreate;
      --
      LOOP
         --
         l_devuelve_fila := trn_k_lv.f_devuelve_fila(NULL);
         --
         EXIT WHEN l_devuelve_fila IS NULL;
         --
         l_fila_reg.cod_campo := l_orden;
         l_fila_reg.val_campo := l_devuelve_fila;
         l_fila_reg.nom_campo := l_devuelve_fila;
         --
         l_fila_dados.EXTEND(1);
         l_fila_dados(l_fila_dados.LAST) := l_fila_reg;
         l_orden                         := l_orden + 1;
         --
      END LOOP;
      --
      OPEN p_retorno
      FOR
         SELECT
            l_prefixo ||                  TRIM(substr(TRIM(substr(x0000000.nom_campo,INSTR(x0000000.nom_campo, '[*]') + 3, LENGTH(x0000000.nom_campo))), 0, INSTR(TRIM(substr(x0000000.nom_campo,INSTR(x0000000.nom_campo, '[*]') + 3, LENGTH(x0000000.nom_campo))), '~') - 1)) AS cod_campo,
            NVL(x0009016.val_columna,     TRIM(substr(TRIM(substr(x0000000.val_campo,INSTR(x0000000.val_campo, '[*]') + 3, LENGTH(x0000000.val_campo))),    INSTR(TRIM(substr(x0000000.val_campo,INSTR(x0000000.val_campo, '[*]') + 3, LENGTH(x0000000.val_campo))), '~') + 1, LENGTH(TRIM(substr(x0000000.val_campo,INSTR(x0000000.val_campo, '[*]') + 3, LENGTH(x0000000.val_campo))))))) AS val_campo
         FROM
           TABLE(CAST(l_fila_dados AS TYPTAB_DADOS_COT)) x0000000

           LEFT OUTER JOIN g2009017_vcr x0009016 ON  x0009016.cod_cia     = p_cod_cia -- I 4.94 Alteracao das descricoes das coberturas
                                                 AND x0009016.cod_ramo    = p_cod_ramo
                                                 AND x0009016.nom_columna = p_cod_campo
                                                 AND x0009016.cod_valor   = TRIM(substr(TRIM(substr(x0000000.nom_campo,INSTR(x0000000.nom_campo, '[*]') + 3, LENGTH(x0000000.nom_campo))), 0, INSTR(TRIM(substr(x0000000.nom_campo,INSTR(x0000000.nom_campo, '[*]') + 3, LENGTH(x0000000.nom_campo))), '~') - 1))
                                                 AND x0009016.mca_baja    = trn.NO
                                                 AND x0009016.fec_validez<=trunc(SYSDATE)
         ORDER BY to_number(x0000000.cod_campo);
      --
      trn_k_global.borra_todas;
      --
      mx('F', 'p_lee_lista_dinamica');
      --
   EXCEPTION
      WHEN OTHERS THEN
         --
         g_err_msg :=  TYPTAB_MSG_WS(); -- 4.99
         --
         g_err_msg.EXTEND(1); -- 4.99
         g_err_msg(g_err_msg.LAST) := fp_trata_msg(p_cod_campo, -- 4.99
                                                                                   NULL,
                                                                                   g_k_pre_msg_erro || '20098557' || g_k_sep_cod_msg);
         --
         pp_processa_mensagem(g_err_msg, -- 4.99
                              p_erro);
         --
         g_err_msg := NULL; -- 4.99
         --
         mx('F', 'p_lee_lista_dinamica - EXCEPTION');
         --
   END p_lee_lista_dinamica;

   --
   /* ------------------------------------------------------
   fp_genera_rastreador: Valida se deve processar as regras do rastreador
   */ ------------------------------------------------------
   FUNCTION fp_genera_rastreador
   RETURN BOOLEAN
   IS
   --
    l_cambio_num_serie           VARCHAR2(1) := trn.NO;
    l_cambio_num_matricula       VARCHAR2(1) := trn.NO;
    l_cambio_cod_marca           VARCHAR2(1) := trn.NO;
    l_cambio_cod_modelo          VARCHAR2(1) := trn.NO;
    l_cambio_cod_sub_modelo      VARCHAR2(1) := trn.NO;
    l_cambio_cod_marca_ref       VARCHAR2(1) := trn.NO;
    l_cambio_tip_merc_deter      VARCHAR2(1) := trn.NO;
    l_cambio_pct_ajuste_tab_ref  VARCHAR2(1) := trn.NO;
    l_cambio_val_sub_modelo      VARCHAR2(1) := trn.NO;
    l_cambio_txt_codigo_postal   VARCHAR2(1) := trn.NO;
    l_cambio_mca_blindagem       VARCHAR2(1) := trn.NO;
    l_cambio_num_nivel_blindagem VARCHAR2(1) := trn.NO;
    l_cambio_cod_ano_fabr        VARCHAR2(1) := trn.NO;
    l_cambio_anio_sub_modelo     VARCHAR2(1) := trn.NO;
    --
    l_retorno                    BOOLEAN := FALSE;
    --
    l_tip_emision                g1010031.cod_valor%TYPE := NULL;
    l_tip_mvto_batch             g1010031.cod_valor%TYPE := NULL;
    --
     CURSOR c_dv_mca_rastreador IS
         SELECT 'S'
           FROM a2000020
          WHERE cod_cia     = g_cod_cia
            AND num_poliza  = g_num_poliza
            AND num_riesgo  = g_num_riesgo
            AND cod_ramo    = g_cod_ramo
            AND mca_vigente = 'S'
            AND cod_campo   = 'MCA_RASTREADOR'
            AND val_campo   = 'S';
     --
     l_mca_rastreador            a2000020.val_campo%TYPE;
     --
  BEGIN
    --
    mx('I','fp_genera_rastreador');
    --
    l_tip_emision    := trn_k_global.ref_f_global('tip_emision'   );
    l_tip_mvto_batch := trn_k_global.ref_f_global('tip_mvto_batch');
    --
    mx('l_tip_emision'   , l_tip_emision   );
    mx('l_tip_mvto_batch', l_tip_mvto_batch);
    --
    IF l_tip_emision    = EM.tip_emision_spto OR
       l_tip_mvto_batch = 4
    THEN
       --
       l_cambio_num_serie          := fp_cambio_dv('NUM_SERIE');
       --
       l_cambio_num_matricula      := fp_cambio_dv('NUM_MATRICULA');
       --
       l_cambio_cod_marca          := fp_cambio_dv('COD_MARCA');
       --
       l_cambio_cod_modelo         := fp_cambio_dv('COD_MODELO');
       --
       l_cambio_cod_sub_modelo     := fp_cambio_dv('COD_SUB_MODELO');
       --
       l_cambio_cod_marca_ref      := fp_cambio_dv('COD_MARCA_REF');
       --
       mx('l_cambio_num_serie'         , l_cambio_num_serie         );
       mx('l_cambio_num_matricula'     , l_cambio_num_matricula     );
       mx('l_cambio_cod_marca'         , l_cambio_cod_marca         );
       mx('l_cambio_cod_modelo'        , l_cambio_cod_modelo        );
       mx('l_cambio_cod_sub_modelo'    , l_cambio_cod_sub_modelo    );
       mx('l_cambio_cod_marca_ref'     , l_cambio_cod_marca_ref     );
       --
       l_retorno := l_cambio_num_serie          = trn.SI OR
                    l_cambio_num_matricula      = trn.SI OR
                    l_cambio_cod_marca          = trn.SI OR
                    l_cambio_cod_modelo         = trn.SI OR
                    l_cambio_cod_sub_modelo     = trn.SI OR
                    l_cambio_cod_marca_ref      = trn.SI;
       --
       IF NOT l_retorno THEN
          --
          IF c_dv_mca_rastreador%ISOPEN THEN
             --
             CLOSE c_dv_mca_rastreador;
             --
          END IF;
          --
          OPEN  c_dv_mca_rastreador;
          --
          FETCH c_dv_mca_rastreador INTO l_mca_rastreador;
          --
          CLOSE c_dv_mca_rastreador;
          --
          mx('l_mca_rastreador', l_mca_rastreador);
          --
          IF NVL(l_mca_rastreador, trn.NO) = trn.NO THEN
             --
             l_cambio_tip_merc_deter      := fp_cambio_dv('TIP_MERC_DETER');
             --
             l_cambio_pct_ajuste_tab_ref  := fp_cambio_dv('PCT_AJUSTE_TAB_REF');
             --
             l_cambio_val_sub_modelo      := fp_cambio_dv('VAL_SUB_MODELO');
             --
             l_cambio_txt_codigo_postal   := fp_cambio_dv('TXT_CODIGO_POSTAL');
             --
             l_cambio_mca_blindagem       := fp_cambio_dv('MCA_BLINDAGEM');
             --
             l_cambio_num_nivel_blindagem := fp_cambio_dv('NUM_NIVEL_BLINDAGEM');
             --
             l_cambio_cod_ano_fabr        := fp_cambio_dv('COD_ANO_FABR');
             --
             l_cambio_anio_sub_modelo     := fp_cambio_dv('ANIO_SUB_MODELO');
             --
             mx('l_cambio_tip_merc_deter'      , l_cambio_tip_merc_deter     );
             mx('l_cambio_pct_ajuste_tab_ref'  , l_cambio_pct_ajuste_tab_ref );
             mx('l_cambio_val_sub_modelo'      , l_cambio_val_sub_modelo     );
             mx('l_cambio_txt_codigo_postal'   , l_cambio_txt_codigo_postal  );
             mx('l_cambio_mca_blindagem'       , l_cambio_mca_blindagem      );
             mx('l_cambio_num_nivel_blindagem' , l_cambio_num_nivel_blindagem);
             mx('l_cambio_cod_ano_fabr'        , l_cambio_cod_ano_fabr       );
             mx('l_cambio_anio_sub_modelo'     , l_cambio_anio_sub_modelo    );
             --
             l_retorno := l_cambio_txt_codigo_postal  = trn.SI OR
             l_cambio_tip_merc_deter    = trn.SI OR
             l_cambio_pct_ajuste_tab_ref  = trn.SI OR
             l_cambio_val_sub_modelo    = trn.SI OR
             l_cambio_mca_blindagem    = trn.SI OR
             l_cambio_num_nivel_blindagem  = trn.SI OR
             l_cambio_cod_ano_fabr    = trn.SI OR
             l_cambio_anio_sub_modelo  = trn.SI   ;
             --
          END IF;
          --
       END IF;
       --
    ELSE
       --
       l_retorno := TRUE;
       --
    END IF;
    --
    mx('l_retorno',CASE l_retorno WHEN TRUE THEN 'TRUE' WHEN FALSE THEN 'FALSE' ELSE 'NULO' END);
    --
    mx('F','fp_genera_rastreador');
    --
    RETURN l_retorno;
    --
   END fp_genera_rastreador;
   --
  /* -------------------------------
  || p_ws_processa_mca_rast_obrig
  */ -------------------------------
  --
  PROCEDURE p_ws_processa_mca_rast_obrig
  IS
     --
     l_num_cotizacion                  C2000000.num_cotizacion%TYPE;
     l_qtde_simulacion                 C2990700.num_simulacion%TYPE;
     l_num_simulacion                  C2990700.num_simulacion%TYPE;
     l_mca_rastreador                  C2000000.val_columna%TYPE;
     l_cod_equipamento                 C2000000.val_columna%TYPE;
     l_propriedade_rastreador          C2000000.val_columna%TYPE;
     l_k_rastreador_proprio            C2000000.val_columna%TYPE := '3';
     l_fec_efec_poliza                 C2000000.val_columna%TYPE;
     l_fec_vcto_poliza                 C2000000.val_columna%TYPE;
     l_qtd_fec_poliza                  C2000000.val_columna%TYPE;
     l_rol_bo                          C2000000.val_columna%TYPE;
     --
     l_mca_motor_subs                  df_cmn_nwt_xx_cnn.vrb_nam_val %TYPE; -- MOTORSUBS 3.84
     l_dados_motor                     ea_k_ws_motor_subscr.rec_dados_motor; -- MOTORSUBS 3.84
     l_usa_motor                       boolean := FALSE; -- MOTORSUBS 3.84
     --
  BEGIN
     --
     mx('I','p_ws_processa_mca_rast_obrig');
     --
     l_num_cotizacion         := trn_k_global.devuelve('NUM_COTIZACION');
     --
     ea_k_231_utils.p_devuelve_dato_cotizacion(ea_k_231_coti.g_k_tabla_df,
                                               'FEC_EFEC_POLIZA',
                                               l_fec_efec_poliza);
     --
     ea_k_231_utils.p_devuelve_dato_cotizacion(ea_k_231_coti.g_k_tabla_df,
                                               'FEC_VCTO_POLIZA',
                                               l_fec_vcto_poliza);
     --
     l_qtd_fec_poliza := TO_DATE(l_fec_vcto_poliza,'DDMMYYYY') - TO_DATE(l_fec_efec_poliza,'DDMMYYYY');
     --
     ea_k_231_utils.p_devuelve_dato_cotizacion(ea_k_231_coti.g_k_tabla_dv,
                                               'MCA_RASTREADOR',
                                               l_mca_rastreador);
     --
     ea_k_231_utils.p_devuelve_dato_cotizacion('A0000000',
                                               'COD_ROL_BO',
                                               l_rol_bo);
     --
     ea_k_231_utils.p_devuelve_dato_cotizacion(ea_k_231_coti.g_k_tabla_simulacion,
                                               'VAL_QTD_PACOTES',
                                               l_qtde_simulacion);
    -- I MOTORSUBS 3.84
    l_mca_motor_subs := nvl(trn_k_global.ref_f_global('HAB_MOTOR_RASTREADOR'),
                            'N');
     --

    IF ea_k_ws_motor_subscr.f_retorna_motor_subscr(trn_k_global.devuelve('COD_CIA'),
                                                   trn_k_global.devuelve('COD_RAMO'),
                                                   l_mca_motor_subs) AND l_rol_bo IS NULL THEN
     --
      ea_k_ws_motor_subscr.p_consulta_motor_rastr(l_mca_rastreador,
                                                  l_cod_equipamento);
      l_usa_motor := true;
     --
    END IF;
    -- F MOTORSUBS 3.84
    IF NVL(ea_k_231_utils.f_valor_dv('TIP_MERC_DETER'),'x') <>  'R'  THEN   -- v 3.20
      --
      -- v 4.08 - Substituicao da Obrigatoriedade do Rastreador do Passo 6 para o Passo 4;
      --{ IM03093233/IM03096240/IM03096001 - v 4.06
      BEGIN
      ea_k_g2109142_vcr.p_lee_vigente(p_cod_cia            => g_cod_cia,
                                      p_cod_agt            => g_cod_agt,
                                      p_cod_ramo           => g_cod_ramo,
                                      p_cod_nivel1         => dc.COD_NIVEL1_GEN,
                                      p_cod_nivel2         => dc.COD_NIVEL2_GEN,
                                      p_cod_nivel3         => dc.COD_NIVEL3_GEN,
                                      p_cod_canal1         => dc.COD_CANAL1_GEN,
                                      p_cod_canal2         => dc.COD_CANAL2_GEN,
                                      p_cod_canal3         => dc.COD_CANAL3_GEN,
                                      p_num_poliza_grupo   => em.NUM_POLIZA_GRUPO_GEN,
                                      p_num_contrato       => em.NUM_CONTRATO_GEN,
                                      p_num_subcontrato    => em.NUM_SUBCONTRATO_GEN,
                                      p_num_poliza_cliente => em.NUM_POLIZA_GEN,
                                      p_num_poliza         => em.NUM_POLIZA_GEN,
                                      p_tip_produto        => ea_k_231_utils.f_valor_dv('tip_produto'),
                                      p_tip_segmento       => ea_k_231_utils.f_valor_dv('tip_segmento'),
                                      p_fec_validez        => TO_DATE(ea_k_231_utils.f_valor_dv('fec_validez_tarifa'), trn.FORMATO_FECHA));
      --
      l_qtde_simulacion := ea_k_g2109142_vcr.f_num_qtd_pacotes;
      --
      EXCEPTION
        WHEN OTHERS THEN
        --
          l_qtde_simulacion := 3 ;
        --
      END ;
      --IM03093233/IM03096240/IM03096001 - v 4.06  }
      --
      mx('l_qtde_simulacion', l_qtde_simulacion);
     IF l_qtde_simulacion IS NOT NULL THEN
        --
        FOR l_num_simulacion IN trn.UNO .. (l_qtde_simulacion) LOOP
           --
           IF NOT l_usa_motor AND l_rol_bo IS NOT NULL THEN -- MOTORSUBS 3.84 -- v 5.55
             --
           l_mca_rastreador := em_k_rastreador_obrigato_vcr.fp_mca_rastreador;
           --
           MX('l_mca_rastreador', l_mca_rastreador);
           END IF;  -- MOTORSUBS 3.84
           --
           ea_k_231_coti.p_inserta_c2000000(p_num_cotizacion => l_num_cotizacion,
                                            p_nom_tabla      => ea_k_231_coti.g_k_tabla_simulacion,
                                            p_nom_columna    => 'MCA_RASTREADOR'|| g_k_prefixo_simulacion ||l_num_simulacion,
                                            p_val_columna    => l_mca_rastreador
                                            );
           --
           IF l_mca_rastreador = trn.SI THEN
             --
             --g_err_msg.EXTEND(1);
             -- Mensagem de obrigatoriedade de instalacao do rastreador
             IF l_qtd_fec_poliza > g_k_qtde_prazo_curto THEN
                --
                g_err_msg.EXTEND(1); -- 4.99
                g_err_msg(g_err_msg.LAST) := fp_trata_msg('MCA_RASTREADOR', -- 4.99
                                                                                          g_k_cod_error_gen,
                                                                                          g_k_pre_msg_erro || '20176' || g_k_sep_cod_msg);
                --
             END IF;
             --
             ea_k_231_coti.p_inserta_c2000000(p_num_cotizacion => l_num_cotizacion,
                                              p_nom_tabla      => ea_k_231_coti.g_k_tabla_simulacion,
                                              p_nom_columna    => 'COD_STATUS_RASTREADOR',
                                              p_val_columna    => trn.UNO);

             --
             IF NOT l_usa_motor THEN -- MOTORSUBS 3.84
               --
             l_cod_equipamento := em_k_rastreador_obrigato_vcr.fp_devolve_cod_equipamento;
             --
             END IF;  -- MOTORSUBS 3.84
             --
             ea_k_231_coti.p_inserta_c2000000(p_num_cotizacion => l_num_cotizacion,
                                              p_nom_tabla      => ea_k_231_coti.g_k_tabla_simulacion,
                                              p_nom_columna    => 'COD_EQUIPAMENTO',
                                              p_val_columna    => l_cod_equipamento
                                              );
             --
           END IF;
           --
           l_propriedade_rastreador := ea_k_231_utils.f_valor_dv(p_cod_campo => 'COD_PROPRIE_RASTREADOR');
           --
           IF l_propriedade_rastreador = l_k_rastreador_proprio THEN
             --
             g_err_msg.EXTEND(1); -- 4.99
             -- Mensagem de aviso sobre sinistro e rastreador proprio
             g_err_msg(g_err_msg.LAST) := fp_trata_msg('COD_PROPRIE_RASTREADOR', -- 4.99
                                                                                       g_k_cod_error_gen,
                                                                                       g_k_pre_msg_erro || '20098556' || g_k_sep_cod_msg);
             --
           END IF;
           --
        END LOOP;
        --
     END IF;
     --
    END IF;   -- v 3.20
    --
     mx('F','p_ws_processa_mca_rast_obrig');
     --
  END p_ws_processa_mca_rast_obrig;
  --
  -- I 4.15
  /* -------------------------------
  || p_ws_processa_rast_obrig_spto
  */ -------------------------------
  --
  PROCEDURE p_ws_processa_rast_obrig_spto
  IS
     --
     l_cod_cia                  a2000560.cod_cia           %TYPE;
     l_num_cotizacion           a2000560.num_propuesta     %TYPE;
     l_mca_rastreador           a2000560.val_campo         %TYPE;
     l_reg_a2000560             a2000560                   %ROWTYPE;
     l_cod_equipamento          a2000560.val_campo         %TYPE;
     l_propriedade_rastreador   a2000560.val_campo         %TYPE;
     l_k_rastreador_proprio     a2000560.val_campo         %TYPE := '3';
     l_mca_motor_subs           df_cmn_nwt_xx_cnn.vrb_nam_val %TYPE;  -- MOTORSUBS 3.84
     l_dados_motor              ea_k_ws_motor_subscr.rec_dados_motor; -- MOTORSUBS 3.84
     l_usa_motor                boolean := FALSE;                     -- MOTORSUBS 3.84
     l_tip_rastreador_inspec    a2000560.val_campo         %TYPE;     -- v4.08
     --
  BEGIN
     --
     mx('I','p_ws_processa_rast_obrig_spto');
     --
     l_cod_cia                := trn_k_global.devuelve('COD_CIA');
     l_num_cotizacion         := trn_k_global.devuelve('NUM_COTIZACION');
     --
     -- I MOTORSUBS 3.84
     l_mca_motor_subs := nvl(trn_k_global.ref_f_global('HAB_MOTOR_RASTREADOR'),
                             'N');
     --
     l_tip_rastreador_inspec  := NVL(trn_k_global.devuelve('TIP_RASTREADOR_INSPEC'),
                                     ea_k_231_utils.f_valor_dv('TIP_RASTREADOR_INSPEC'));  -- v4.08
     --
     IF l_tip_rastreador_inspec IS NULL THEN -- {v4.08
        --
        IF ea_k_ws_motor_subscr.f_retorna_motor_subscr(trn_k_global.devuelve('COD_CIA'),
                                                       trn_k_global.devuelve('COD_RAMO'),
                                                       l_mca_motor_subs) THEN
          --
          ea_k_ws_motor_subscr.p_consulta_motor_rastr(l_mca_rastreador,
                                                      l_cod_equipamento);
          l_usa_motor := true;
          --
        END IF;
        -- F MOTORSUBS 3.84
        --
        IF NOT l_usa_motor THEN -- MOTORSUBS 3.84
          --
          l_mca_rastreador  := em_k_rastreador_obrigato_vcr.fp_mca_rastreador;
          --
          l_cod_equipamento := em_k_rastreador_obrigato_vcr.fp_devolve_cod_equipamento;
          --
        END IF;  -- MOTORSUBS 3.84
        --
        l_reg_a2000560.cod_cia              := l_cod_cia;
        l_reg_a2000560.num_propuesta        := l_num_cotizacion;

        l_reg_a2000560.cod_campo            := 'MCA_RASTREADOR'; -- 5.21
        l_reg_a2000560.val_campo            := l_mca_rastreador;
        --
        pp_inserta_a2000560(l_reg_a2000560); -- 5.21

        l_reg_a2000560.cod_campo            := 'MCA_RASTREADOR'|| g_k_prefixo_simulacion ||trn.uno;
        l_reg_a2000560.val_campo            := l_mca_rastreador;
        --
        pp_inserta_a2000560(l_reg_a2000560);
        --
        IF l_mca_rastreador = trn.SI THEN
          --
          l_reg_a2000560.cod_campo            := 'COD_STATUS_RASTREADOR'; -- I 4.43
          l_reg_a2000560.val_campo            := trn.UNO;
          --
          pp_inserta_a2000560(l_reg_a2000560);
          --
          l_reg_a2000560.cod_campo            := 'COD_EQUIPAMENTO';
          l_reg_a2000560.val_campo            := l_cod_equipamento;
          --
          pp_inserta_a2000560(l_reg_a2000560); --  F 4.43
          --
          g_err_msg.EXTEND(1); -- 4.99
          --
          -- Mensagem de obrigatoriedade de instalacao do rastreador
          g_err_msg(g_err_msg.LAST) := fp_trata_msg('MCA_RASTREADOR', -- 4.99
                                                                                    g_k_cod_error_gen,
                                                                                    g_k_pre_msg_erro || '20176' || g_k_sep_cod_msg);
          --
        ELSE -- I 4.43
          --
          l_reg_a2000560.cod_campo            := 'COD_STATUS_RASTREADOR';
          l_reg_a2000560.val_campo            := trn.CERO;
          --
          pp_inserta_a2000560(l_reg_a2000560); --  F 4.43
          --
        END IF;
        --
        l_propriedade_rastreador := ea_k_231_utils.f_valor_dv('COD_PROPRIE_RASTREADOR');
        --
        IF l_propriedade_rastreador = l_k_rastreador_proprio THEN
          --
          g_err_msg.EXTEND(1); -- 4.99
          -- Mensagem de aviso sobre sinistro e rastreador proprio
          g_err_msg(g_err_msg.LAST) := fp_trata_msg('COD_PROPRIE_RASTREADOR', -- 4.99
                                                                                    g_k_cod_error_gen,
                                                                                    g_k_pre_msg_erro || '20098556' || g_k_sep_cod_msg);
          --
        END IF;
        --
     END IF; -- v4.08}
     --
     mx('F','p_ws_processa_rast_obrig_spto');
     --
   END p_ws_processa_rast_obrig_spto;
   -- F 4.15
   --
   /* -------------------------------
   || p_ws_calcula_restituicao
   */ -------------------------------
   --
   PROCEDURE p_ws_calcula_restituicao(p_cod_cia   IN  a2000030.cod_cia%TYPE ,
                                      p_cod_ramo  IN  a2000030.cod_ramo%TYPE,
                                      p_cod_agt   IN  a2000030.cod_agt%TYPE ,
                                      p_xml_in    IN  CLOB,
                                      p_xml       OUT CLOB) IS
      --
      l_imp_premio_pago      a2990700.imp_neta%TYPE := trn.CERO;
      l_imp_premio_total     a2990700.imp_neta%TYPE := trn.CERO;
      l_imp_restituicao      a2990700.imp_neta%TYPE := trn.CERO;
      --
      l_num_poliza           a2000030.num_poliza%TYPE;
      l_cod_spto             a2000030.cod_spto%TYPE;
      l_sub_cod_spto         a2000030.sub_cod_spto%TYPE;
      --
      l_mca_prorrata         a2991800.mca_prorrata%TYPE;
      --
      l_retorno              ref_cursor;
      --
   BEGIN
      --
      mx('I','p_ws_calcula_restituicao');
      --
      trn_k_global.borra_todas;
      --
      l_num_poliza   := fp_recupera_valor (p_xml_in, 'NUM_POLIZA');
      l_cod_spto     := fp_recupera_valor (p_xml_in, 'COD_SPTO');
      l_sub_cod_spto := fp_recupera_valor (p_xml_in, 'SUB_COD_SPTO');
      --
      mx('l_num_poliza'  , l_num_poliza);
      mx('l_cod_spto'    , l_cod_spto);
      mx('l_sub_cod_spto', l_sub_cod_spto);
      --
      pp_asigna('COD_CIA'    ,p_cod_cia);
      pp_asigna('COD_RAMO'   ,p_cod_ramo);
      pp_asigna('COD_AGT'    ,p_cod_agt);
      pp_asigna('COD_TARIFA' ,g_k_cod_tarifa_generico);
      --
      pp_asigna_globales_defecto;
      --
      pp_asigna('num_poliza'     ,l_num_poliza);
      pp_asigna('fec_efec_poliza',CAST(NULL AS DATE));
      pp_asigna('fec_vcto_poliza',CAST(NULL AS DATE));
      pp_asigna('fec_efec_spto'  ,g_k_data);
      pp_asigna('fec_vcto_spto'  ,CAST(NULL AS DATE));
      --
      pp_calcula_restituicao(p_cod_cia         ,
                             l_cod_spto        ,
                             l_sub_cod_spto    ,
                             l_imp_premio_pago ,
                             l_imp_premio_total,
                             l_imp_restituicao);
      --
      OPEN l_retorno FOR
          SELECT 'NUM_POLIZA'                   AS NOM_CAMPO_NUM_POLIZA,
                 l_num_poliza                   AS NUM_POLIZA,
                 'IMP_RESTITUICAO'              AS NOM_CAMPO_IMP_RESTITUICAO,
                 (l_imp_restituicao * -trn.UNO) AS IMP_RESTITUICAO
            FROM DUAL;
      --
      p_gerar_xml_calc_restituicao(l_retorno,
                                   p_xml);
      --
      mx('F','p_ws_calcula_restituicao');
      --
   EXCEPTION
      WHEN OTHERS THEN
         --
         g_err_msg :=  TYPTAB_MSG_WS(); -- 4.99
         --
         g_err_msg.EXTEND(1); -- 4.99
         g_err_msg(g_err_msg.LAST) := fp_trata_msg('COD_ERROR', -- 4.99
                                                                                   SQLCODE,
                                                                                   SQLERRM);
         --
         pp_processa_mensagem(g_err_msg, -- 4.99
                              l_retorno);
         --
         p_gerar_xml_mensagem(l_retorno, p_xml);
         --
         g_err_msg := NULL; -- 4.99
         --
         mx('SQLCODE',SQLCODE);
         mx('SQLERRM',SQLERRM);
         --
         mx('F','EXCEPTION - p_ws_calcula_restituicao');
         --
   END p_ws_calcula_restituicao;
   --
   /* -------------------------------
   || p_ws_verifica_vistoria
   */ -------------------------------
   --
   PROCEDURE p_ws_verifica_vistoria IS
   --
   l_num_vistoria          c2000000.val_columna %TYPE := trn.NULO;
   l_mca_vistoria_especial c2000000.val_columna %TYPE := trn.NULO;
   l_tip_vistoria          c2000000.val_columna %TYPE := trn.NULO;
   --
   BEGIN
      --
      mx('I','p_ws_verifica_vistoria');
      --
      pp_inicializa_variables;
      --
      em_k_vistoria_previa.p_devuelve_vistoria(p_cod_cia => g_cod_cia
                                      ,p_cod_ramo        => g_cod_ramo
                                      ,p_num_poliza      => g_num_poliza
                                      ,p_num_presupuesto => g_num_presupuesto
                                      ,p_num_spto        => g_num_spto
                                      ,p_num_apli        => g_num_apli
                                      ,p_num_spto_apli   => g_num_spto_apli
                                      ,p_num_riesgo      => g_num_riesgo
                                      ,p_num_periodo     => g_num_periodo
                                      ,p_num_insp        => l_num_vistoria);
      --
      mx('-', 'l_num_vistoria: ' || l_num_vistoria);
      --
      IF l_num_vistoria IS NOT NULL
      THEN
        --
        em_k_vistoria_previa.p_devuelve_dato_vistoria(p_cod_cia => g_cod_cia
                                             ,p_num_poliza      => g_num_poliza
                                             ,p_num_presupuesto => g_num_presupuesto
                                             ,p_num_spto        => g_num_spto
                                             ,p_num_apli        => g_num_apli
                                             ,p_num_spto_apli   => g_num_spto_apli
                                             ,p_num_riesgo      => g_num_riesgo
                                             ,p_num_insp        => l_num_vistoria
                                             ,p_cod_campo       => g_k_tip_vistoria
                                             ,p_val_campo       => l_tip_vistoria);
        --
        em_k_vistoria_previa.p_devuelve_dato_vistoria(p_cod_cia => g_cod_cia
                                             ,p_num_poliza      => g_num_poliza
                                             ,p_num_presupuesto => g_num_presupuesto
                                             ,p_num_spto        => g_num_spto
                                             ,p_num_apli        => g_num_apli
                                             ,p_num_spto_apli   => g_num_spto_apli
                                             ,p_num_riesgo      => g_num_riesgo
                                             ,p_num_insp        => l_num_vistoria
                                             ,p_cod_campo       => g_k_mca_vistoria_especial
                                             ,p_val_campo       => l_mca_vistoria_especial);
        --
      END IF;
      --
      pp_inserta_c2000000(g_k_tabla_vg
                         ,g_k_num_vistoria
                         ,l_num_vistoria);
      --
      pp_inserta_c2000000(g_k_tabla_vg
                         ,g_k_tip_vistoria
                         ,l_tip_vistoria);
      --
      pp_inserta_c2000000(g_k_tabla_vg
                         ,g_k_mca_vistoria_especial
                         ,l_mca_vistoria_especial);
      --
      mx('F','p_ws_verifica_vistoria');
      --
   END p_ws_verifica_vistoria;
   --
   /* ------------------------------------------------------
   || Devolve para o webmethods parametro CLOB: p_xml
   */ ------------------------------------------------------
   --
   PROCEDURE p_tron_processar_passo (p_cod_cia              IN  G9999992.cod_cia%TYPE,
                                     p_cod_ramo             IN  G9999992.cod_ramo%TYPE,
                                     p_cod_tarifa           IN  G9999992.cod_tarifa%TYPE,
                                     p_cod_agt              IN  G9999992.cod_agt%TYPE,
                                     p_num_cotizacion       IN  C2009030_vcr.num_cotizacion%TYPE,
                                     p_num_cotizacion_grupo IN  c2009030_vcr.num_poliza_grupo %TYPE,-- 20200723 jwolff
                                     p_num_poliza_grupo     IN  A2000500.num_poliza_grupo%TYPE,
                                     p_num_contrato         IN  A2000500.num_contrato%TYPE,
                                     p_num_subcontrato      IN  A2000500.num_contrato%TYPE,
                                     p_num_paso             IN  G9999992.num_paso%TYPE,
                                     p_tip_mvto_batch       IN  A2000500.tip_mvto_batch%TYPE,
                                     p_xml_in               IN  CLOB,
                                     p_xml                  OUT CLOB)
   IS
      --
      l_calculo           NUMBER := trn.CERO;
      --
      l_tip_mvto_batch    A2000500.tip_mvto_batch%TYPE;
      --
      l_reg_msg_erro      TYPREG_MSG_WS;
      l_retorno           ref_cursor;
      --
      l_reg_a2009700      a2009700_vcr%ROWTYPE;
      --
   BEGIN
      --
      mx('I', 'p_tron_processar_passo');
      --
      mx('p_num_paso', p_num_paso);
      --
      trn_k_global.asigna('MCA_COTI_SIMULADOR', trn.SI);
      trn_k_global.asigna('MCA_COTI_COMROUND', trn.NO);
      --
      pp_ws_processar_passo(p_cod_cia
                           ,p_cod_ramo
                           ,p_cod_tarifa
                           ,p_cod_agt
                           ,p_num_cotizacion
                           ,p_num_cotizacion_grupo -- 20200723 jwolff
                           ,p_num_poliza_grupo
                           ,p_num_contrato
                           ,p_num_subcontrato
                           ,p_num_paso
                           ,p_tip_mvto_batch
                           ,p_xml_in
                           ,p_xml              );
      --
      COMMIT;
      --
      mx('F', 'p_tron_processar_passo');
      --
   EXCEPTION
      WHEN OTHERS THEN
         --
         ROLLBACK;
         --
         g_txt_error      := substr(SQLERRM,1,2000);
         g_txt_ruta_error := substr('EM_K_GEN_WS.P_WS_PROCESSAR_PASSO'|| dbms_utility.format_error_backtrace,1,2000);
         --
         g_err_msg.EXTEND(1); -- 4.99
         g_err_msg(g_err_msg.LAST) := fp_trata_msg('COD_RETORNO', -- 4.99
                                                                                   NULL,
                                                                                   g_k_pre_msg_erro || '20098400' || g_k_sep_cod_msg || g_txt_error);
         pp_processa_mensagem(g_err_msg, -- 4.99
                              l_retorno);
         --
         p_gerar_xml_mensagem(l_retorno, p_xml);
         --
         l_reg_a2009700.fec_fim        := SYSDATE             ;
         l_reg_a2009700.cod_retorno    := g_k_cod_retorno_erro;
         l_reg_a2009700.desc_xml_out   := p_xml               ;
         --
         pp_trata_log_processo (l_reg_a2009700);
         --
         pp_log_erro('9999999999999',--p_num_cotizacion ,
                     g_txt_error      ,
                     g_txt_ruta_error );
         --
         COMMIT;
         --
         g_err_msg:= NULL; -- 4.99
         --
         g_cod_mensaje    := g_k_cod_error_gen;
         g_anx_mensaje    := SQLERRM;
         --
         mx('F', 'p_tron_processar_passo - EXCEPTION');
         --
   END p_tron_processar_passo;
   --
   /* ------------------------------------------------------
   || Devolve para o webmethods parametro CLOB: p_xml
   */ ------------------------------------------------------
   --
   PROCEDURE p_tron_consulta_dados_segurado (p_cod_cia   IN a2000030.cod_cia%TYPE ,
                                             p_cod_ramo  IN a2000030.cod_ramo%TYPE,
                                             p_cod_agt   IN a2000030.cod_agt%TYPE ,
                                             p_xml_in    IN CLOB                  ,
                                             p_xml       OUT CLOB                 )
   IS
      --
   BEGIN
      --
      mx('I', 'p_tron_consulta_dados_segurado');
      --
      pp_ws_consulta_dados_segurado(p_cod_cia
                                   ,p_cod_ramo
                                   ,p_cod_agt
                                   ,p_xml_in
                                   ,p_xml     );
      --
      mx('F', 'p_tron_consulta_dados_segurado');
      --
   END p_tron_consulta_dados_segurado;
   --
   /* ------------------------------------------------------
   || Devolve para o webmethods parametro CLOB: p_xml
   */ ------------------------------------------------------
   --
   PROCEDURE p_tron_consulta_dados_veiculo (p_cod_cia         IN  G9999992.cod_cia%TYPE,
                                            p_cod_ramo        IN  G9999992.cod_ramo%TYPE,
                                            p_cod_tarifa      IN  G9999992.cod_tarifa%TYPE,
                                            p_cod_agt         IN  G9999992.cod_agt%TYPE,
                                            p_num_cotizacion  IN  C2009030_vcr.num_cotizacion%TYPE,
                                            p_xml_in          IN  CLOB,
                                            p_xml             OUT CLOB)
   IS
   --
   BEGIN
      --
      mx('I', 'p_tron_consulta_dados_veiculo');
      --
      pp_ws_consulta_dados_veiculo (p_cod_cia       ,
                                    p_cod_ramo      ,
                                    p_cod_tarifa    ,
                                    p_cod_agt       ,
                                    p_num_cotizacion,
                                    p_xml_in        ,
                                    p_xml           );
      --
      mx('F', 'p_tron_consulta_dados_veiculo');
      --
   END p_tron_consulta_dados_veiculo;
   --
    /* ---------------------------------------------------------------- *
    || Devolve um CLOB contendo uma lista de dados XML : p_xml
    */ ----------------------------------------------------------------
    --
    PROCEDURE p_tron_detalhe_pacote_cob(p_cod_cia          IN  G9999992.cod_cia%TYPE,
                                        p_cod_ramo         IN  G9999992.cod_ramo%TYPE,
                                        p_cod_tarifa       IN  G9999992.cod_tarifa%TYPE,
                                        p_cod_agt          IN  G9999992.cod_agt%TYPE,
                                        p_num_cotizacion   IN  C2009030_vcr.num_cotizacion%TYPE,
                                        p_num_poliza_grupo IN  A2000500.num_poliza_grupo%TYPE,
                                        p_num_contrato     IN  A2000500.num_contrato%TYPE,
                                        p_num_subcontrato  IN  A2000500.num_contrato%TYPE,
                                        p_num_paso         IN  G9999992.num_paso%TYPE,
                                        p_tip_mvto_batch   IN  A2000500.tip_mvto_batch%TYPE,
                                        p_xml_in           IN  CLOB,
                                        p_xml              OUT CLOB)
    IS
       --
    BEGIN
       --
       mx('I', 'p_tron_detalhe_pacote_cob');
       --
       g_tip_mvto_batch := NVL(p_tip_mvto_batch, g_k_tip_mvto_batch_endosso);
       --
       trn_k_global.asigna('MCA_COTI_SIMULADOR', trn.SI);
       trn_k_global.asigna('MCA_COTI_COMROUND' , trn.NO);
       trn_k_global.asigna('TIP_MVTO_BATCH'    , g_tip_mvto_batch);
       --
       --
       pp_ws_detalhe_pacote_cobertura(p_cod_cia         ,
                                      p_cod_ramo        ,
                                      p_cod_tarifa      ,
                                      p_cod_agt         ,
                                      p_num_cotizacion  ,
                                      p_num_poliza_grupo,
                                      p_num_contrato    ,
                                      p_num_subcontrato ,
                                      p_num_paso        ,
                                      p_tip_mvto_batch  ,
                                      p_xml_in          ,
                                      p_xml             );
       --
       mx('F', 'p_tron_detalhe_pacote_cob');
       --
    END p_tron_detalhe_pacote_cob;
    --
   /* -------------------------------
  || p_analisar_tipologia_spto
  */ -------------------------------
  --
  PROCEDURE p_analisar_tipologia_spto IS
  --
  l_tip_mvto_batch  g9999992.tip_mvto_batch%TYPE;
  l_cod_cia         a2000560.cod_cia%TYPE;
  l_cod_ramo        g9999992.cod_ramo%TYPE;
  l_num_propuesta   a2000560.num_propuesta%TYPE;
  l_fec_tratamiento a2000030.fec_emision_spto%TYPE;
  l_num_paso        g9999992.num_paso%TYPE;
  l_cod_retorno     NUMBER;
  l_msg_erro        a2000520.txt_error%TYPE;
  l_cod_agt         g9999992.cod_agt%TYPE; -- 2.18
  --
  BEGIN
    --
    mx('I','p_analisar_tipologia_spto');
    --
    l_tip_mvto_batch         := trn_k_global.devuelve('TIP_MVTO_BATCH'        );
    l_cod_cia                := trn_k_global.devuelve('COD_CIA'               );
    l_num_propuesta          := trn_k_global.devuelve('NUM_PROPUESTA'         );
    l_cod_ramo               := trn_k_global.devuelve('COD_RAMO'              );
    l_num_paso               := trn_k_global.devuelve('NUM_PASO'              );
    l_cod_agt                := ea_k_231_utils.f_valor_dv('DFCOD_AGT'         ); -- 2.18
    --
    l_fec_tratamiento        := g_fec_tratamiento;
    --
    trn_k_global.asigna('COD_AGT', l_cod_agt); -- 2.18
    --
    em_k_gen_spto_tipologia_vcr.p_verificar_dados_apol(p_tip_mvto_batch => l_tip_mvto_batch,
                                                       p_cod_cia => l_cod_cia,
                                                       p_cod_ramo => l_cod_ramo,
                                                       p_num_poliza => l_num_propuesta,
                                                       p_fec_tratamiento => l_fec_tratamiento,
                                                       p_num_paso => l_num_paso,
                                                       p_cod_retorno => l_cod_retorno,
                                                       p_msg_erro => l_msg_erro);
    --
    mx('F','p_analisar_tipologia_spto');
    --
   END p_analisar_tipologia_spto;
   --
   /* ------------------------------------------------------
   || Grava e valida dados dos opcionais
   */ ------------------------------------------------------
   PROCEDURE p_grava_dados_opcionais
   IS
     --
     l_cod_opcional          NUMBER;
     l_num_cotizacion        c2009030_vcr.num_cotizacion%TYPE;
     --
     l_cursor_dados_grav_opc ref_cursor;
     --
     l_rec_dados_grav_opc    rec_dados_grav;
     --
     l_tip_mvto_batch        G9999992.tip_mvto_batch     %TYPE;
     l_num_propuesta         A2000560.num_propuesta      %TYPE;
     l_num_opcional          NUMBER;
     l_nom_opcional          a2100600.nom_accesorio      %TYPE;
     l_mca_selec_ac          a2000560.val_campo          %TYPE;
     l_reg_a2000560          A2000560                 %ROWTYPE;
     --
     /* ------------------------------------------------------
     || Verifica se opcional e valido
     */ ------------------------------------------------------
     FUNCTION fp_val_opcional (p_cod_accesorio a2100600.cod_accesorio%TYPE)
        RETURN NUMBER
     IS
        --
        l_existe NUMBER;
        --
     BEGIN
        --
        mx('I', 'fp_val_opcional');
        --
        BEGIN
           --
           SELECT trn.UNO
             INTO l_existe
             FROM a2100600 b
            WHERE b.cod_cia = trn_k_global.cod_cia
              AND b.cod_accesorio = p_cod_accesorio
              AND b.cod_accesorio IN
                  (SELECT TO_NUMBER(CNC_VRB_VAL)
                     FROM df_cmn_nwt_xx_vrb_cnc a
                    WHERE a.cmp_val = trn_k_global.cod_cia
                      AND a.lob_val = TO_NUMBER(trn_k_global.devuelve('COD_RAMO'))
                      AND a.vrb_nam = 'OPCIONAL'
                      AND a.mdt_val = EM.cod_modalidad_gen
                      AND a.crn_val = DC.cod_mon_gen
                      AND a.cvr_val = EM.cod_cob_gen
                      AND a.frs_lvl_val = DC.cod_nivel1_gen
                      AND a.scn_lvl_val = DC.cod_nivel2_gen
                      AND a.thr_lvl_val = DC.cod_nivel3_gen
                      AND a.frs_dst_hnl_val = DC.cod_canal1_gen
                      AND a.scn_dst_hnl_val = DC.cod_canal2_gen
                      AND a.thr_dst_hnl_val = DC.cod_canal3_gen
                      AND a.agn_val = TRN.cod_tercero_gen
                      AND a.gpp_val = 'ZZZZZZZZZZZZZ'
                      AND a.del_val = EM.num_contrato_gen
                      AND a.sbl_val = EM.num_subcontrato_gen
                      AND a.ply_val = 'ZZZZZZZZZZZZZ'
                      AND a.vld_dat =
                          (SELECT MAX(c.vld_dat)
                             FROM df_cmn_nwt_xx_vrb_cnc c
                            WHERE c.cmp_val = a.cmp_val
                              AND c.lob_val = a.lob_val
                              AND c.mdt_val = a.mdt_val
                              AND c.crn_val = a.crn_val
                              AND c.cvr_val = a.cvr_val
                              AND c.frs_lvl_val = a.frs_lvl_val
                              AND c.scn_lvl_val = a.scn_lvl_val
                              AND c.thr_lvl_val = a.thr_lvl_val
                              AND c.frs_dst_hnl_val = a.frs_dst_hnl_val
                              AND c.scn_dst_hnl_val = a.scn_dst_hnl_val
                              AND c.thr_dst_hnl_val = a.thr_dst_hnl_val
                              AND c.gpp_val = a.gpp_val
                              AND c.del_val = a.del_val
                              AND c.sbl_val = a.sbl_val
                              AND c.ply_val = a.ply_val
                              AND c.agn_val = a.agn_val
                              AND c.vrb_nam = a.vrb_nam
                              AND c.cnc_vrb_val = a.cnc_vrb_val
                              AND c.vld_dat <= TRUNC(SYSDATE)));
           --
        EXCEPTION
           WHEN OTHERS THEN
              --
              l_existe := trn.CERO;
              --
        END;
        --
        mx('F', 'fp_val_opcional');
        --
        RETURN l_existe;
        --
     END fp_val_opcional;
     --
     /* ------------------------------------------------------
     || fp_busca_num_opcional
     */ ------------------------------------------------------
     FUNCTION fp_busca_num_opcional(p_num_propuesta  a2000560.num_propuesta%TYPE,
                                    p_cod_opcional   a2000560.val_campo    %TYPE)
       RETURN NUMBER IS
       --
       l_num_opcional  NUMBER := trn.CERO;
       --
       CURSOR c_num_opcionais IS
       SELECT TO_NUMBER(SUBSTR(cod_campo,16,2))
         FROM A2000560
        WHERE cod_cia       = trn_k_global.cod_cia
          AND num_propuesta = p_num_propuesta
          AND cod_campo     LIKE g_k_prf_cod_accesorio ||'%'
          AND val_campo     = p_cod_opcional;
       --
       CURSOR c_num_opcionais_1 IS
       SELECT MIN(TO_NUMBER(SUBSTR(cod_campo,16,2)))
         FROM A2000560
        WHERE cod_cia       = trn_k_global.cod_cia
          AND num_propuesta = p_num_propuesta
          AND cod_campo     LIKE g_k_prf_cod_accesorio ||'%'
          AND val_campo     IS NULL;
       --
     BEGIN
       --
       mx('I', 'fp_busca_num_opcional');
       --
       IF c_num_opcionais%ISOPEN THEN
        --
        CLOSE c_num_opcionais;
        --
       END IF;
       --
       OPEN c_num_opcionais;
       --
       FETCH c_num_opcionais INTO l_num_opcional;
       --
       CLOSE c_num_opcionais;
       --
       IF l_num_opcional = trn.CERO THEN
         --
         IF c_num_opcionais_1%ISOPEN THEN
          --
          CLOSE c_num_opcionais_1;
          --
         END IF;
         --
         OPEN c_num_opcionais_1;
         --
         FETCH c_num_opcionais_1 INTO l_num_opcional;
         --
         CLOSE c_num_opcionais_1;
         --
       END IF;
       --
       mx('F', 'fp_busca_num_opcional');
       --
       RETURN l_num_opcional;
       --
     END fp_busca_num_opcional;
     --
     /* ------------------------------------------------------
     || fp_nom_opcional
     */ ------------------------------------------------------
     FUNCTION fp_nom_opcional(p_cod_opcional   a2100600.cod_accesorio%TYPE)
       RETURN VARCHAR2 IS
       --
       l_nom_opcional  a2100600.nom_accesorio%TYPE := trn.NULO;
       --
     BEGIN
       --
       mx('I', 'fp_nom_opcional');
       --
       em_k_a2100600.p_lee(trn_k_global.cod_cia,
                           p_cod_opcional      );
       --
       l_nom_opcional   := em_k_a2100600.f_nom_accesorio;
       --
       mx('F', 'fp_nom_opcional');
       --
       RETURN l_nom_opcional;
       --
     END fp_nom_opcional;
     --
     /* ------------------------------------------------------
     || Borra dados dos opcionais
     */ ------------------------------------------------------
     PROCEDURE pp_borra_opcionais (p_num_cotizacion C2000000.num_cotizacion%TYPE)
     IS
     BEGIN
        --
        mx('I', 'pp_borra_opcionais');
        --
        BEGIN
           --
           DELETE FROM C2000000
            WHERE cod_cia = trn_k_global.cod_cia
              AND cod_ramo = trn_k_global.devuelve('COD_RAMO')
              AND num_cotizacion = p_num_cotizacion
              AND nom_columna LIKE g_k_prefixo_opcionais || '%';
           --
           --COMMIT;
           --
        EXCEPTION
           WHEN OTHERS THEN
              --
              mx('--', 'EXCEPTION: ' || SQLERRM);
              --ROLLBACK;
              --
        END;
        --
        mx('F', 'pp_borra_opcionais');
        --
     END pp_borra_opcionais;
     --
     /* -------------------------------
     ||  Busca se aquele opcional da lista
     ||  esta selecionado
     */ -------------------------------
     --
     PROCEDURE pp_selec_opcional(p_cod_cia        IN  a2000030.cod_cia   %TYPE,
                                 p_num_cotizacion IN  a2000030.num_poliza%TYPE,
                                 p_cod_campo      IN  g2990006.cod_campo %TYPE,
                                 p_mca_selecion   OUT a2000560.val_campo %TYPE)
      IS
     --
     BEGIN
       --
       mx('I', 'pp_selec_opcional');
       --
       em_k_a2000560.p_lee(p_cod_cia       ,
                           p_num_cotizacion,
                           p_cod_campo     );
       --
       p_mca_selecion  := em_k_a2000560.f_val_campo;
       --
       mx('F', 'pp_selec_opcional');
       --
       EXCEPTION
         WHEN OTHERS THEN
           --
           mx('F', 'EXCEPTION - pp_selec_opcional');
           --
           p_mca_selecion  := trn.NO;
           --
     END pp_selec_opcional;
     --
   BEGIN
     --
     mx('I', 'p_grava_dados_opcionais');
     --
     l_tip_mvto_batch  := trn_k_global.devuelve('TIP_MVTO_BATCH');
     l_num_cotizacion  := trn_k_global.devuelve('NUM_COTIZACION');
     l_num_propuesta   := trn_k_global.ref_f_global('NUM_PROPUESTA');
     --
     mx('l_tip_mvto_batch', l_tip_mvto_batch);
     mx('l_num_cotizacion', l_num_cotizacion);
     mx('l_num_propuesta' , l_num_propuesta );
     --
     -- COTACAO
     IF l_tip_mvto_batch = g_k_tip_mvto_batch_cotacao THEN
       --
       pp_borra_opcionais(l_num_cotizacion);
       --
       OPEN l_cursor_dados_grav_opc
           FOR
              SELECT X2000000.cod_campo,
                     X2000000.val_campo,
                     g_k_nom_tabla_accesorios,
                     NULL
                FROM TABLE(CAST(g_cot_dados AS TYPTAB_DADOS_COT)) X2000000
               WHERE X2000000.COD_CAMPO LIKE g_k_prefixo_opcionais || '%'
               ORDER BY X2000000.cod_campo;
       --
       LOOP
          FETCH l_cursor_dados_grav_opc
          INTO  l_rec_dados_grav_opc;
          --
          EXIT WHEN l_cursor_dados_grav_opc%NOTFOUND;
          --
          l_cod_opcional := TO_NUMBER(SUBSTR(l_rec_dados_grav_opc.cod_campo,
                                             INSTR(l_rec_dados_grav_opc.cod_campo,
                                                   g_k_prefixo_cod_acessorio) + trn.UNO));
          --
          IF fp_val_opcional(l_cod_opcional) = trn.CERO THEN
             --
             g_err_msg.EXTEND(1); -- 4.99
             g_err_msg(g_err_msg.LAST) := fp_trata_msg(l_rec_dados_grav_opc.cod_campo, -- 4.99
                                                                                       NULL,
                                                                                       g_k_pre_msg_erro || 20098560 || g_k_sep_cod_msg);
             --
          ELSE
             --
             IF l_rec_dados_grav_opc.val_campo NOT IN (trn.SI,trn.NO) THEN
                --
                g_err_msg.EXTEND(1); -- 4.99
                g_err_msg(g_err_msg.LAST) := fp_trata_msg(l_rec_dados_grav_opc.cod_campo, -- 4.99
                                                                                          NULL,
                                                                                          g_k_pre_msg_erro || 20098561 || g_k_sep_cod_msg);
                --
             ELSE
                --
                ea_k_231_coti.p_inserta_c2000000(p_num_cotizacion => l_num_cotizacion,
                                                 p_nom_tabla      => l_rec_dados_grav_opc.nom_tabla,
                                                 p_nom_columna    => l_rec_dados_grav_opc.cod_campo,
                                                 p_val_columna    => l_rec_dados_grav_opc.val_campo);
                --
             END IF;
             --
          END IF;
          --
       END LOOP;
       --
     END IF;
     --
     -- ENDOSSO
     IF l_tip_mvto_batch = g_k_tip_mvto_batch_endosso THEN
       --
       mx('-' , 'ENDOSSO');
       OPEN l_cursor_dados_grav_opc
           FOR
              SELECT X2000000.cod_campo,
                     X2000000.val_campo,
                     g_k_nom_tabla_accesorios,
                     NULL
                FROM TABLE(CAST(g_cot_dados AS TYPTAB_DADOS_COT)) X2000000
               WHERE X2000000.COD_CAMPO LIKE g_k_prefixo_opcionais || '%'
               ORDER BY X2000000.cod_campo;
       --
       LOOP
         --
         FETCH l_cursor_dados_grav_opc
         INTO  l_rec_dados_grav_opc;
         --
         EXIT WHEN l_cursor_dados_grav_opc%NOTFOUND;
         --
         l_cod_opcional := TO_NUMBER(SUBSTR(l_rec_dados_grav_opc.cod_campo,
                                            INSTR(l_rec_dados_grav_opc.cod_campo,
                                                  g_k_prefixo_cod_acessorio) + trn.UNO));
         mx('l_cod_opcional', l_cod_opcional);
         --
         IF fp_val_opcional(l_cod_opcional) = trn.CERO THEN
           --
           g_err_msg.EXTEND(1); -- 4.99
           g_err_msg(g_err_msg.LAST) := fp_trata_msg(l_rec_dados_grav_opc.cod_campo, -- 4.99
                                                                                     NULL,
                                                                                     g_k_pre_msg_erro || 20098560 || g_k_sep_cod_msg);
           --
         ELSE
           --
           IF l_rec_dados_grav_opc.val_campo NOT IN (trn.SI,trn.NO) THEN
             --
             g_err_msg.EXTEND(1); -- 4.99
             g_err_msg(g_err_msg.LAST) := fp_trata_msg(l_rec_dados_grav_opc.cod_campo, -- 4.99
                                                                                       NULL,
                                                                                       g_k_pre_msg_erro || 20098561 || g_k_sep_cod_msg);
             --
           ELSE
             --
             pp_selec_opcional(trn_k_global.cod_cia          ,
                               l_num_propuesta               ,
                               l_rec_dados_grav_opc.cod_campo,
                               l_mca_selec_ac                );
             --
             IF l_rec_dados_grav_opc.val_campo <> l_mca_selec_ac THEN
               --
               l_num_opcional   := fp_busca_num_opcional(l_num_propuesta, l_cod_opcional);
               l_nom_opcional   := fp_nom_opcional(l_cod_opcional);
               --
               l_reg_a2000560.cod_cia       := trn_k_global.cod_cia;
               l_reg_a2000560.num_propuesta := l_num_propuesta;
               l_reg_a2000560.cod_campo     := l_rec_dados_grav_opc.cod_campo;
               l_reg_a2000560.val_campo     := l_rec_dados_grav_opc.val_campo;
               --
               pp_inserta_a2000560(l_reg_a2000560);
               --
               l_reg_a2000560.cod_cia       := trn_k_global.cod_cia;
               l_reg_a2000560.num_propuesta := l_num_propuesta;
               l_reg_a2000560.cod_campo     := g_k_prf_cod_accesorio||l_num_opcional;
               l_reg_a2000560.val_campo     := l_cod_opcional;
               --
               pp_inserta_a2000560(l_reg_a2000560);
               --
               l_reg_a2000560.cod_cia       := trn_k_global.cod_cia;
               l_reg_a2000560.num_propuesta := l_num_propuesta;
               l_reg_a2000560.cod_campo     := g_k_prf_mca_seleccion||l_num_opcional;
               l_reg_a2000560.val_campo     := trn.SI;
               --
               pp_inserta_a2000560(l_reg_a2000560);
               --
               IF l_rec_dados_grav_opc.val_campo = trn.NO THEN
                 --
                 l_reg_a2000560.cod_cia       := trn_k_global.cod_cia;
                 l_reg_a2000560.num_propuesta := l_num_propuesta;
                 l_reg_a2000560.cod_campo     := g_k_prf_mca_baja||l_num_opcional;
                 l_reg_a2000560.val_campo     := trn.SI;
                 --
                 pp_inserta_a2000560(l_reg_a2000560);
                 --
               ELSE
                 --
                 l_reg_a2000560.cod_cia       := trn_k_global.cod_cia;
                 l_reg_a2000560.num_propuesta := l_num_propuesta;
                 l_reg_a2000560.cod_campo     := g_k_prf_mca_baja||l_num_opcional;
                 l_reg_a2000560.val_campo     := trn.NO;
                 --
                 pp_inserta_a2000560(l_reg_a2000560);
                 --
               END IF;
               --
               l_reg_a2000560.cod_cia       := trn_k_global.cod_cia;
               l_reg_a2000560.num_propuesta := l_num_propuesta;
               l_reg_a2000560.cod_campo     := g_k_prf_imp_accesorio||l_num_opcional;
               l_reg_a2000560.val_campo     := trn.CERO;
               --
               pp_inserta_a2000560(l_reg_a2000560);
               --
               l_reg_a2000560.cod_cia       := trn_k_global.cod_cia;
               l_reg_a2000560.num_propuesta := l_num_propuesta;
               l_reg_a2000560.cod_campo     := g_k_prf_nom_accesorio||l_num_opcional;
               l_reg_a2000560.val_campo     := l_nom_opcional;
               --
               pp_inserta_a2000560(l_reg_a2000560);
               --
             END IF;
             --
           END IF;
           --
         END IF;
         --
       END LOOP;
       --
     END IF;
     --
     mx('F', 'p_grava_dados_opcionais');
     --
   END p_grava_dados_opcionais;
   --
   /* ------------------------------------------------------
   || Grava e valida dados dos acessorios
   */ ------------------------------------------------------
   PROCEDURE p_grava_dados_acessorios
   IS
     --
     l_cod_acessorio          NUMBER;
     --
     l_cursor_dados_grav_ac ref_cursor;
     --
     l_rec_dados_grav_ac    rec_dados_grav;
     --
     l_tip_mvto_batch        G9999992.tip_mvto_batch     %TYPE;
     l_num_propuesta         A2000560.num_propuesta      %TYPE;
     l_num_acessorio         NUMBER;
     l_nom_acessorio         a2100600.nom_accesorio      %TYPE;
     l_imp_acessorio         a2000560.val_campo          %TYPE;
     l_suma_aseg_ac          a2000040.suma_aseg_spto     %TYPE := trn.CERO;
     l_reg_a2000560          A2000560                 %ROWTYPE;
     --
     l_mca_selec_214         a2000560.val_campo          %TYPE := trn.NO; --v1.71
     l_mca_seleccion         a2100610.mca_vigente        %TYPE := trn.NO; --v1.71
     --
     /* ------------------------------------------------------
     || fp_busca_acessorio
     */ ------------------------------------------------------
     FUNCTION fp_busca_acessorio(p_num_propuesta  a2000560.num_propuesta%TYPE,
                                 p_cod_acessorio  a2000560.val_campo    %TYPE)
       RETURN BOOLEAN IS
       --
       l_mca_existe  VARCHAR2(1) := 'N';
       --
       CURSOR c_acessorio IS
       SELECT 'S'
         FROM A2000560
        WHERE cod_cia       = trn_k_global.cod_cia
          AND num_propuesta = p_num_propuesta
          AND cod_campo     LIKE g_k_prf_cod_accesorio ||'%'
          AND val_campo     = p_cod_acessorio;
       --
     BEGIN
       --
       mx('I', 'fp_busca_acessorio');
       --
       IF c_acessorio%ISOPEN THEN
        --
        CLOSE c_acessorio;
        --
       END IF;
       --
       OPEN c_acessorio;
       --
       FETCH c_acessorio INTO l_mca_existe;
       --
       CLOSE c_acessorio;
       --
       IF l_mca_existe = trn.SI THEN
         --
         mx('F', 'fp_busca_acessorio - TRUE');
         --
         RETURN TRUE;
         --
       ELSE
         --
         mx('F', 'fp_busca_acessorio - FALSE');
         --
         RETURN FALSE;
         --
       END IF;
       --
     END fp_busca_acessorio;
     --
     /* ------------------------------------------------------
     || fp_busca_num_acessorio
     */ ------------------------------------------------------
     FUNCTION fp_busca_num_acessorio(p_num_propuesta  a2000560.num_propuesta%TYPE,
                                     p_cod_acessorio  a2000560.val_campo    %TYPE)
       RETURN NUMBER IS
       --
       l_num_acessorio  NUMBER := trn.CERO;
       --
       CURSOR c_num_acessorio IS
       SELECT TO_NUMBER(SUBSTR(cod_campo,16,2))
         FROM A2000560
        WHERE cod_cia       = trn_k_global.cod_cia
          AND num_propuesta = p_num_propuesta
          AND cod_campo     LIKE g_k_prf_cod_accesorio ||'%'
          AND val_campo     = p_cod_acessorio;
       --
       CURSOR c_num_acessorio_1 IS
       SELECT MIN(TO_NUMBER(SUBSTR(cod_campo,16,2)))
         FROM A2000560
        WHERE cod_cia       = trn_k_global.cod_cia
          AND num_propuesta = p_num_propuesta
          AND cod_campo     LIKE g_k_prf_cod_accesorio ||'%'
          AND val_campo     IS NULL;
       --
     BEGIN
       --
       mx('I', 'fp_busca_num_acessorio');
       --
       IF c_num_acessorio%ISOPEN THEN
        --
        CLOSE c_num_acessorio;
        --
       END IF;
       --
       OPEN c_num_acessorio;
       --
       FETCH c_num_acessorio INTO l_num_acessorio;
       --
       CLOSE c_num_acessorio;
       --
       IF l_num_acessorio = trn.CERO THEN
         --
         IF c_num_acessorio_1%ISOPEN THEN
          --
          CLOSE c_num_acessorio_1;
          --
         END IF;
         --
         OPEN c_num_acessorio_1;
         --
         FETCH c_num_acessorio_1 INTO l_num_acessorio;
         --
         CLOSE c_num_acessorio_1;
         --
       END IF;
       --
       mx('l_num_acessorio', l_num_acessorio);
       --
       mx('F', 'fp_busca_num_acessorio');
       --
       RETURN l_num_acessorio;
       --
     END fp_busca_num_acessorio;
     --
     /* ------------------------------------------------------
     || fp_nom_acessorio
     */ ------------------------------------------------------
     FUNCTION fp_nom_acessorio(p_cod_acessorio   a2100600.cod_accesorio%TYPE)
       RETURN VARCHAR2 IS
       --
       l_nom_acessorio  a2100600.nom_accesorio%TYPE := trn.NULO;
       --
     BEGIN
       --
       mx('I', 'fp_nom_acessorio');
       --
       em_k_a2100600.p_lee(trn_k_global.cod_cia,
                           p_cod_acessorio     );
       --
       l_nom_acessorio   := em_k_a2100600.f_nom_accesorio;
       --
       mx('l_nom_acessorio', l_nom_acessorio);
       --
       mx('F', 'fp_nom_acessorio');
       --
       RETURN l_nom_acessorio;
       --
     END fp_nom_acessorio;
     --
     /* -------------------------------
     ||  Verifica se existe valor para
     ||  o acessorio selecionado
     */ -------------------------------
     --
     FUNCTION fp_imp_acessorio(p_num_cotizacion  a2000030.num_poliza%TYPE,
                               p_cod_campo       A2000560.cod_campo %TYPE)
      RETURN BOOLEAN IS
      --
      l_existe      BOOLEAN := FALSE;
      l_val_campo   a2000560.val_campo%TYPE  := trn.NULO;
      --
      CURSOR c_acessorio IS
       SELECT trn.SI
         FROM A2000560
        WHERE cod_cia       = trn_k_global.cod_cia
          AND num_propuesta = p_num_cotizacion
          AND cod_campo     = p_cod_campo
          AND val_campo     IS NOT NULL;
       --
     BEGIN
       --
       mx('I', 'fp_imp_acessorio');
       --
       IF c_acessorio%ISOPEN THEN
        --
        CLOSE c_acessorio;
        --
       END IF;
       --
       OPEN c_acessorio;
       --
       FETCH c_acessorio INTO l_val_campo;
       --
       l_existe   := c_acessorio%FOUND;
       --
       CLOSE c_acessorio;
       --
       mx('F', 'fp_imp_acessorio');
       --
       RETURN l_existe;
       --
     END fp_imp_acessorio;
     --
     /* -------------------------------
     ||  Atualiza IS da cobertura de
     ||  acessorios
     */ -------------------------------
     --
     PROCEDURE pp_actu_is_acessorio(p_num_cotizacion  IN a2000030.num_poliza%TYPE,
                                    p_cod_campo       IN g2990006.cod_campo %TYPE,
                                    p_val_campo       IN a2000560.val_campo %TYPE)
      IS
     --
     BEGIN
       --
       mx('I', 'pp_actu_is_acessorio');
       --
       l_reg_a2000560.cod_cia       := trn_k_global.cod_cia;
       l_reg_a2000560.num_propuesta := p_num_cotizacion;
       l_reg_a2000560.cod_campo     := p_cod_campo;
       l_reg_a2000560.val_campo     := p_val_campo;
       --
       pp_inserta_a2000560(l_reg_a2000560);
       --
       mx('F', 'pp_actu_is_acessorio');
       --
     END pp_actu_is_acessorio;
     --
     -- v1.71
     /* -------------------------------
     ||  fp_mca_selec
     */ -------------------------------
     --
     FUNCTION fp_mca_selec(p_val_campo   IN OUT a2000560.val_campo%TYPE
                          ,p_val_defecto IN     a2000560.val_campo%TYPE DEFAULT NULL)
     RETURN a2000560.val_campo%TYPE AS
     --
     BEGIN
       --
       IF NVL(l_mca_selec_214, trn.NO) = trn.NO AND
          p_val_campo IS NOT NULL
       THEN
         --
         IF p_val_defecto IS NOT NULL
         THEN
           --
           p_val_campo := p_val_defecto;
           --
         ELSE
           --
           p_val_campo := trn.CERO;
           --
         END IF;
         --
       END IF;
       --
       RETURN p_val_campo;
       --
       mx('F', 'fp_mca_selec');
       --
     END fp_mca_selec;
     --
   BEGIN
     --
     trn_k_dinamico.p_ejecuta_sentencia('alter session set nls_numeric_characters=".,"');
     --
     mx('I', 'p_grava_dados_acessorios');
     --
     l_tip_mvto_batch  := trn_k_global.devuelve('TIP_MVTO_BATCH');
     l_num_propuesta   := trn_k_global.ref_f_global('NUM_PROPUESTA');
     --
     mx('l_tip_mvto_batch', l_tip_mvto_batch);
     mx('l_num_propuesta' , l_num_propuesta );
     --
     -- ENDOSSO
     IF l_tip_mvto_batch = g_k_tip_mvto_batch_endosso THEN
       --
       mx('-' , 'ENDOSSO');
       -- v1.71
       l_mca_selec_214 := fp_devuelve_val_coti(em_k_gen_spto_batch.g_k_pf_Coberturas || 'MCA_SELECCION' || g_k_cod_fila_accesorios);
       --
       OPEN l_cursor_dados_grav_ac
           FOR
              SELECT X2000000.cod_campo,
                     X2000000.val_campo,
                     g_k_nom_tabla_accesorios,
                     NULL
                FROM TABLE(CAST(g_cob_dados AS TYPTAB_DADOS_COB)) X2000000
               WHERE X2000000.COD_CAMPO LIKE g_k_prefixo_acessorio || '%'
               ORDER BY X2000000.cod_campo;
       --
       LOOP
         --
         FETCH l_cursor_dados_grav_ac
         INTO  l_rec_dados_grav_ac;
         --
         EXIT WHEN l_cursor_dados_grav_ac%NOTFOUND;
         --
         mx('cod_campo', l_rec_dados_grav_ac.cod_campo);
         mx('val_campo', l_rec_dados_grav_ac.val_campo);
         --
         l_rec_dados_grav_ac.val_campo := fp_mca_selec(l_rec_dados_grav_ac.val_campo); --v1.71
         --
         l_suma_aseg_ac  := l_suma_aseg_ac + l_rec_dados_grav_ac.val_campo;
         --
         mx('l_suma_aseg_ac', l_suma_aseg_ac);
         --
         l_cod_acessorio := TO_NUMBER(SUBSTR(l_rec_dados_grav_ac.cod_campo,
                                       INSTR(l_rec_dados_grav_ac.cod_campo,
                                             g_k_prefixo_cod_acessorio) + trn.UNO));
         mx('l_cod_acessorio', l_cod_acessorio);
         --
         IF fp_imp_acessorio(l_num_propuesta, l_rec_dados_grav_ac.cod_campo) OR
            fp_busca_acessorio(l_num_propuesta,l_cod_acessorio) THEN
           --
           l_num_acessorio   := fp_busca_num_acessorio(l_num_propuesta, l_cod_acessorio);
           l_nom_acessorio   := fp_nom_acessorio(l_cod_acessorio);
           --
           mx('l_num_acessorio', l_num_acessorio);
           mx('l_nom_acessorio', l_nom_acessorio);
           --
           l_reg_a2000560.cod_cia       := trn_k_global.cod_cia;
           l_reg_a2000560.num_propuesta := l_num_propuesta;
           l_reg_a2000560.cod_campo     := l_rec_dados_grav_ac.cod_campo;
           l_reg_a2000560.val_campo     := l_rec_dados_grav_ac.val_campo;
           --
           pp_inserta_a2000560(l_reg_a2000560);
           --
           l_reg_a2000560.cod_cia       := trn_k_global.cod_cia;
           l_reg_a2000560.num_propuesta := l_num_propuesta;
           l_reg_a2000560.cod_campo     := g_k_prf_cod_accesorio||l_num_acessorio;
           l_reg_a2000560.val_campo     := l_cod_acessorio;
           --
           pp_inserta_a2000560(l_reg_a2000560);
           --
           l_reg_a2000560.cod_cia       := trn_k_global.cod_cia;
           l_reg_a2000560.num_propuesta := l_num_propuesta;
           l_reg_a2000560.cod_campo     := g_k_prf_imp_accesorio||l_num_acessorio;
           l_reg_a2000560.val_campo     := fp_mca_selec(l_rec_dados_grav_ac.val_campo); --v1.71
           --
           pp_inserta_a2000560(l_reg_a2000560);
           --
           l_reg_a2000560.cod_cia       := trn_k_global.cod_cia;
           l_reg_a2000560.num_propuesta := l_num_propuesta;
           l_reg_a2000560.cod_campo     := g_k_prf_mca_seleccion||l_num_acessorio;
           l_mca_seleccion              := trn.SI;
           l_reg_a2000560.val_campo     := fp_mca_selec(l_mca_seleccion
                                                       ,trn.NO); --v1.71
           --
           pp_inserta_a2000560(l_reg_a2000560);
           --
           IF l_rec_dados_grav_ac.val_campo = trn.CERO THEN
             --
             l_reg_a2000560.cod_cia       := trn_k_global.cod_cia;
             l_reg_a2000560.num_propuesta := l_num_propuesta;
             l_reg_a2000560.cod_campo     := g_k_prf_mca_baja||l_num_acessorio;
             l_reg_a2000560.val_campo     := trn.SI;
             --
             pp_inserta_a2000560(l_reg_a2000560);
             --
           ELSE
             --
             l_reg_a2000560.cod_cia       := trn_k_global.cod_cia;
             l_reg_a2000560.num_propuesta := l_num_propuesta;
             l_reg_a2000560.cod_campo     := g_k_prf_mca_baja||l_num_acessorio;
             l_reg_a2000560.val_campo     := trn.NO;
             --
             pp_inserta_a2000560(l_reg_a2000560);
             --
           END IF;
           --
           l_reg_a2000560.cod_cia       := trn_k_global.cod_cia;
           l_reg_a2000560.num_propuesta := l_num_propuesta;
           l_reg_a2000560.cod_campo     := g_k_prf_nom_accesorio||l_num_acessorio;
           l_reg_a2000560.val_campo     := l_nom_acessorio;
           --
           pp_inserta_a2000560(l_reg_a2000560);
           --
         END IF;
         --
       END LOOP;
       --
       pp_actu_is_acessorio(l_num_propuesta, g_k_suma_aseg214, l_suma_aseg_ac);
       --
     END IF;
     --
     mx('F', 'p_grava_dados_acessorios');
     --
   END p_grava_dados_acessorios;
  -------------------------------------------------------------------------------
  -- p_gerar_xml_detalhe_pkt_auto3
  -------------------------------------------------------------------------------
  PROCEDURE p_gerar_xml_detalhe_pkt_auto3 (p_retorno_pacote    IN  ref_cursor,
                                             p_clob_lista        OUT CLOB      )
    IS
      --
      l_retorno_xml_pac ref_cursor;
      l_rec_lista_pac   rec_detalhe_pacote;
      l_xml_lista       XMLTYPE;
      ------------------------------
      l_document            DBMS_XMLDOM.DOMDOCUMENT;
      l_node_dados_pacote   DBMS_XMLDOM.DOMNODE;--> l_node_lista finado l_node_lista
      l_node_desc_pacotes   DBMS_XMLDOM.DOMNODE;--> descPacotes l_node_dados
      l_node_colvalcobespkt DBMS_XMLDOM.DOMNODE;--> colValoresCoberturasPacotes -- talvez desnecessario, revisar cabecalho
      ------------------------------
      -- macro agrupamentos
      l_node_cobs_agrup DBMS_XMLDOM.DOMNODE;-- LISTA colCoberturasAgrupadas
      l_node_cobs_adi   DBMS_XMLDOM.DOMNODE;-- LISTA colCoberturasAdicionais
      l_node_cobs_serv  DBMS_XMLDOM.DOMNODE;-- LISTA colCoberturasServicos
      ------------------------------
      -- especifico Casco
      l_node_casco_col_coberturas  DBMS_XMLDOM.DOMNODE;-- colCoberturasCasco
      --
      l_node_casco                 DBMS_XMLDOM.DOMNODE;-- coberturasCasco
      l_cod_casco                  DBMS_XMLDOM.DOMNODE;-- coberturasCasco
      l_val_casco                  DBMS_XMLDOM.DOMNODE;-- coberturasCasco
      --
      l_node_casco_indenizacao     DBMS_XMLDOM.DOMNODE;--valLimiteMaxIndenizacao
      l_cod_casco_indenizacao      DBMS_XMLDOM.DOMNODE;--valLimiteMaxIndenizacao
      l_val_casco_indenizacao      DBMS_XMLDOM.DOMNODE;--valLimiteMaxIndenizacao
      --
      l_node_casco_col_atrib_lista DBMS_XMLDOM.DOMNODE;--colAtributosLista
      l_cod_casco_col_atrib_lista  DBMS_XMLDOM.DOMNODE;--colAtributosLista
      l_val_casco_col_atrib_lista  DBMS_XMLDOM.DOMNODE;--colAtributosLista
      --
      l_node_casco_tip_atrib_cob   DBMS_XMLDOM.DOMNODE;--tipAtributoCob
      l_cod_casco_tip_atrib_cob    DBMS_XMLDOM.DOMNODE;--tipAtributoCob
      l_val_casco_tip_atrib_cob    DBMS_XMLDOM.DOMNODE;--tipAtributoCob
      --
      l_node_casco_val_franq       DBMS_XMLDOM.DOMNODE;--valFranquia
      l_cod_casco_val_franq        DBMS_XMLDOM.DOMNODE;--valFranquia
      l_val_casco_val_franq        DBMS_XMLDOM.DOMNODE;--valFranquia
      --
      l_node_casco_val_premio      DBMS_XMLDOM.DOMNODE;--valPremio
      l_cod_casco_val_premio       DBMS_XMLDOM.DOMNODE;--valPremio
      l_val_casco_val_premio       DBMS_XMLDOM.DOMNODE;--valPremio
      ------------------------------
      -- BASICAS
      l_node_basic_col_coberturas  DBMS_XMLDOM.DOMNODE;-- colCoberturasCasco
      --
      l_node_basic                 DBMS_XMLDOM.DOMNODE;-- coberturasCasco
      l_cod_basic                  DBMS_XMLDOM.DOMNODE;-- coberturasCasco
      l_val_basic                  DBMS_XMLDOM.DOMNODE;-- coberturasCasco
      --
      l_node_basic_indenizacao     DBMS_XMLDOM.DOMNODE;--valLimiteMaxIndenizacao
      l_cod_basic_indenizacao      DBMS_XMLDOM.DOMNODE;--valLimiteMaxIndenizacao
      l_val_basic_indenizacao      DBMS_XMLDOM.DOMNODE;--valLimiteMaxIndenizacao
      --
      l_node_basic_col_atrib_lista DBMS_XMLDOM.DOMNODE;--colAtributosLista
      l_cod_basic_col_atrib_lista  DBMS_XMLDOM.DOMNODE;--colAtributosLista
      l_val_basic_col_atrib_lista  DBMS_XMLDOM.DOMNODE;--colAtributosLista
      --
      l_node_basic_tip_atrib_cob   DBMS_XMLDOM.DOMNODE;--tipAtributoCob
      l_cod_basic_tip_atrib_cob    DBMS_XMLDOM.DOMNODE;--tipAtributoCob
      l_val_basic_tip_atrib_cob    DBMS_XMLDOM.DOMNODE;--tipAtributoCob
      --
      l_node_basic_val_franq       DBMS_XMLDOM.DOMNODE;--valFranquia
      l_cod_basic_val_franq        DBMS_XMLDOM.DOMNODE;--valFranquia
      l_val_basic_val_franq        DBMS_XMLDOM.DOMNODE;--valFranquia
      --
      l_node_basic_val_premio      DBMS_XMLDOM.DOMNODE;--valPremio
      l_cod_basic_val_premio       DBMS_XMLDOM.DOMNODE;--valPremio
      l_val_basic_val_premio       DBMS_XMLDOM.DOMNODE;--valPremio
      ------------------------------
      -- Servicos e Adicionais
      l_node_adi_col_coberturas    DBMS_XMLDOM.DOMNODE;--colCoberturas
      l_node_serv_col_coberturas   DBMS_XMLDOM.DOMNODE;--colCoberturas
      -- INDENICACAO
      l_node_adi_indenizacao       DBMS_XMLDOM.DOMNODE;--valLimiteMaxIndenizacao
      l_cod_node_adi_indenizacao   DBMS_XMLDOM.DOMNODE;--valLimiteMaxIndenizacao
      l_val_node_adi_indenizacao   DBMS_XMLDOM.DOMNODE;--valLimiteMaxIndenizacao
      --
      l_node_serv_indenizacao      DBMS_XMLDOM.DOMNODE;--valLimiteMaxIndenizacao
      l_cod_node_serv_indenizacao  DBMS_XMLDOM.DOMNODE;--valLimiteMaxIndenizacao
      l_val_node_serv_indenizacao  DBMS_XMLDOM.DOMNODE;--valLimiteMaxIndenizacao
      -- ATRIBUTOS LISTA
      l_node_adi_col_atrib_lista   DBMS_XMLDOM.DOMNODE;--colAtributosLista
      l_cod_adi_col_atrib_lista    DBMS_XMLDOM.DOMNODE;--colAtributosLista
      l_val_adi_col_atrib_lista    DBMS_XMLDOM.DOMNODE;--colAtributosLista
      --
      l_node_serv_col_atrib_lista  DBMS_XMLDOM.DOMNODE;--colAtributosLista
      l_cod_serv_col_atrib_lista   DBMS_XMLDOM.DOMNODE;--colAtributosLista
      l_val_serv_col_atrib_lista   DBMS_XMLDOM.DOMNODE;--colAtributosLista
      -- ATRIBUTO COB
      l_node_adi_tip_atrib_cob     DBMS_XMLDOM.DOMNODE;--tipAtributoCob
      l_cod_adi_tip_atrib_cob      DBMS_XMLDOM.DOMNODE;--tipAtributoCob
      l_val_adi_tip_atrib_cob      DBMS_XMLDOM.DOMNODE;--tipAtributoCob
      --
      l_node_serv_tip_atrib_cob    DBMS_XMLDOM.DOMNODE;--tipAtributoCob
      l_cod_serv_tip_atrib_cob     DBMS_XMLDOM.DOMNODE;--tipAtributoCob
      l_val_serv_tip_atrib_cob     DBMS_XMLDOM.DOMNODE;--tipAtributoCob
      -- FRANQUIA
      l_node_adi_val_franq         DBMS_XMLDOM.DOMNODE;--valFranquia
      l_cod_adi_val_franq          DBMS_XMLDOM.DOMNODE;--valFranquia
      l_val_adi_val_franq          DBMS_XMLDOM.DOMNODE;--valFranquia
      --
      l_node_serv_val_franq        DBMS_XMLDOM.DOMNODE;--valFranquia
      l_cod_serv_val_franq         DBMS_XMLDOM.DOMNODE;--valFranquia
      l_val_serv_val_franq         DBMS_XMLDOM.DOMNODE;--valFranquia
      -- PREMIO
      l_node_adi_val_premio        DBMS_XMLDOM.DOMNODE;--valPremio
      l_node_serv_val_premio       DBMS_XMLDOM.DOMNODE;--valPremio
      --
      -- COD_CAMPO(s) e VAL_CAMPO(s)
      l_node_cod_campo_header      DBMS_XMLDOM.DOMNODE;-- dinamico codigo -- substitui l_node_colvalcobespkt, revisar cabecalho
      l_node_val_campo_header      DBMS_XMLDOM.DOMNODE;-- dinamico codigo -- substitui l_node_colvalcobespkt, revisar cabecalho
      --
      l_node_cod_campo_adi         DBMS_XMLDOM.DOMNODE;-- dinamico codigo
      l_node_val_campo_adi         DBMS_XMLDOM.DOMNODE;-- dinamico valor
      --
      l_node_cod_campo_serv        DBMS_XMLDOM.DOMNODE;-- dinamico codigo
      l_node_val_campo_serv        DBMS_XMLDOM.DOMNODE;-- dinamico valor
      --
      l_cod_campo_basic            DBMS_XMLDOM.DOMNODE;-- dinamico codigo
      l_val_campo_basic            DBMS_XMLDOM.DOMNODE;-- dinamico valor
      --
      l_txt_cod_campo_adi          DBMS_XMLDOM.DOMTEXT;-- dinamico codigo
      l_txt_val_campo_adi          DBMS_XMLDOM.DOMTEXT;-- dinamico valor
      --
      l_txt_cod_campo_serv         DBMS_XMLDOM.DOMTEXT;-- dinamico codigo
      l_txt_val_campo_serv         DBMS_XMLDOM.DOMTEXT;-- dinamico valor
      --
      -- TYPEs
      l_tab_cob          rec_tab_det_cob      := NULL;
      l_tab_cob_cas      rec_tab_det_cob      := NULL;
      l_tab_cob_cas_val  rec_tab_det_cob      := NULL;
      l_tab_val_lim_inde rec_tab_val_lim_inde := NULL;
      l_tab_atri_lista   rec_tab_atri_lista   := NULL;
      l_tab_atri_cob     rec_tab_atri_cob     := NULL;
      l_tab_val_franq    rec_tab_val_franq    := NULL;
      --
      l_eh_3_pacotes BOOLEAN; -- 2.14
      l_cod_agt      a1001332.cod_agt%TYPE; -- 2.84
      --
      -- CONSTANTES
      l_k_descPacotes             CONSTANT VARCHAR2(30) := 'descPacotes';
      l_k_codPacote               CONSTANT VARCHAR2(30) := 'codPacote';
      l_k_colCoberturasAgrupadas  CONSTANT VARCHAR2(30) := 'colCoberturasAgrupadas';
      l_k_nomPacote               CONSTANT VARCHAR2(30) := 'nomPacote';
      l_k_valTotal                CONSTANT VARCHAR2(30) := 'valTotal';
      l_k_pctAjuste               CONSTANT VARCHAR2(30) := 'pctAjuste';
      l_k_pctAgtNpr               CONSTANT VARCHAR2(30) := 'pctAgtNpr';
      l_k_valSubModelo            CONSTANT VARCHAR2(30) := 'valSubModelo';
      l_k_tipMercDeter            CONSTANT VARCHAR2(30) := 'tipMercDeter';
      l_k_codCobertura            CONSTANT VARCHAR2(30) := 'codCobertura';
      l_k_nomCobertura            CONSTANT VARCHAR2(30) := 'nomCobertura';
      l_k_mcaSeleccionCob         CONSTANT VARCHAR2(30) := 'mcaSeleccionCob';
      l_k_mcaModificaCapital      CONSTANT VARCHAR2(30) := 'mcaModificaCapital';
      l_k_codCampo                CONSTANT VARCHAR2(30) := 'codCampo';
      l_k_valCampo                CONSTANT VARCHAR2(30) := 'valCampo';
      l_k_mcaValDefecto           CONSTANT VARCHAR2(30) := 'mcaValDefecto';
      l_k_colAtributosLista       CONSTANT VARCHAR2(30) := 'colAtributosLista';
      l_k_tipAtributoCob          CONSTANT VARCHAR2(30) := 'tipAtributoCob';
      l_k_txtCampo                CONSTANT VARCHAR2(30) := 'txtCampo';
      l_k_mcaSeleccionAtributo    CONSTANT VARCHAR2(30) := 'mcaSeleccionAtributo';
      l_k_valFranquia             CONSTANT VARCHAR2(30) := 'valFranquia';
      l_k_valPremio               CONSTANT VARCHAR2(30) := 'valPremio';
      l_k_colCoberturas           CONSTANT VARCHAR2(30) := 'colCoberturas';
      l_k_valLimiteMaxIndenizacao CONSTANT VARCHAR2(30) := 'valLimiteMaxIndenizacao';
      l_k_coberturasCasco         CONSTANT VARCHAR2(30) := 'coberturasCasco';
      l_k_colValCobsPacotes       CONSTANT VARCHAR2(30) := 'colValoresCoberturasPacotes';
      l_k_colValCobsAdi           CONSTANT VARCHAR2(30) := 'colValoresCoberturasAdicionais';
      l_k_colValCobsServ          CONSTANT VARCHAR2(30) := 'colValoresCoberturasServicos';
      l_k_colCoberturasCasco      CONSTANT VARCHAR2(30) := 'colCoberturasCasco';
      --
      -------------------------------------------------------------------------------
      -- fi_devuelve_seleccion_cob
      -------------------------------------------------------------------------------
      FUNCTION fi_devuelve_seleccion_cob (p_cod_cia        c2000000.cod_cia       %TYPE,
                                          p_cod_ramo       c2000000.cod_ramo      %TYPE,
                                          p_num_cotizacion c2000000.num_cotizacion%TYPE,
                                          p_cod_cob        g2109040_vcr.cod_cob   %TYPE,
                                          p_cod_tip_vehi   a2100100.cod_tip_vehi  %TYPE)
      RETURN VARCHAR2
      IS
        --
        l_k_mca_seleccion VARCHAR2 (20) := '_MCA_SELECCION_';
        --
        v_val_columna c2000000.val_columna%TYPE;
        --
        CURSOR c_devuelve_seleccion_cob (pc_cod_cia        c2000000.cod_cia       %TYPE,
                                         pc_cod_ramo       c2000000.cod_ramo      %TYPE,
                                         pc_num_cotizacion c2000000.num_cotizacion%TYPE,
                                         pc_nom_columna    c2000000.nom_columna   %TYPE)
        IS
          --
          SELECT val_columna
            FROM c2000000 a
           WHERE a.cod_cia        = pc_cod_cia
             AND a.cod_ramo       = pc_cod_ramo
             AND a.num_cotizacion = pc_num_cotizacion
             AND a.nom_columna    = pc_nom_columna;
          --
        --
      BEGIN
        --
        mx('I', 'fi_devuelve_seleccion_cob');
        --
        IF c_devuelve_seleccion_cob%ISOPEN
        THEN
          --
          CLOSE c_devuelve_seleccion_cob;
          --
        END IF;
        --
        OPEN c_devuelve_seleccion_cob (p_cod_cia       ,
                                       p_cod_ramo      ,
                                       p_num_cotizacion,
                                       p_cod_tip_vehi || l_k_mca_seleccion || p_cod_cob);
        --
        mx('p_cod_cia'         , p_cod_cia);
        mx('p_cod_ramo'        , p_cod_ramo);
        mx('p_num_cotizacion'  , p_num_cotizacion);
        mx('p_cod_tip_vehi'    , p_cod_tip_vehi);
        mx('l_k_mca_seleccion' , l_k_mca_seleccion);
        mx('p_cod_cob'         , p_cod_cob);
        --
        --
        FETCH c_devuelve_seleccion_cob INTO v_val_columna;
        --
        mx('v_val_columna',v_val_columna);
        --
        mx('F', 'fi_devuelve_seleccion_cob');
        --
        IF v_val_columna IS NOT NULL
        THEN
          --
          RETURN v_val_columna;
        ELSE
          --
          RETURN trn.NO;
          --
        END IF;
        --
      EXCEPTION
        WHEN OTHERS THEN
          mx('F', 'fi_devuelve_seleccion_cob - EXCEPTION');
        --
      END fi_devuelve_seleccion_cob;
      ------------------------------------------------------------------------------
      -- fi_devuelve_seleccion_val_cob
      ------------------------------------------------------------------------------
      FUNCTION fi_devuelve_seleccion_val_cob (p_cod_cia        c2000000.cod_cia       %TYPE,

                                              p_cod_ramo       c2000000.cod_ramo      %TYPE,
                                              p_num_cotizacion c2000000.num_cotizacion%TYPE,
                                              p_cod_cob        g2109040_vcr.cod_cob   %TYPE,
                                              p_cod_tip_vehi   a2100100.cod_tip_vehi  %TYPE)
      RETURN VARCHAR2
      IS
        --
        l_k_VAL_CAMPO VARCHAR2 (20) := '_VAL_CAMPO_';
        --
        v_val_columna c2000000.val_columna%TYPE := NULL;
        --
        CURSOR c_devuelve_seleccion_val_cob (pc_cod_cia        c2000000.cod_cia       %TYPE,
                                             pc_cod_ramo       c2000000.cod_ramo      %TYPE,
                                             pc_num_cotizacion c2000000.num_cotizacion%TYPE,
                                             pc_nom_columna    c2000000.nom_columna   %TYPE)
        IS
          --
          SELECT val_columna
            FROM c2000000 a
           WHERE a.cod_cia        = pc_cod_cia
             AND a.cod_ramo       = pc_cod_ramo
             AND a.num_cotizacion = pc_num_cotizacion
             AND a.nom_columna    = pc_nom_columna;
          --
        --
      BEGIN
        --
        mx('I', 'fi_devuelve_seleccion_val_cob');
        --
        IF c_devuelve_seleccion_val_cob%ISOPEN
        THEN
          --
          CLOSE c_devuelve_seleccion_val_cob;
          --
        END IF;
        --
        OPEN c_devuelve_seleccion_val_cob (p_cod_cia       ,
                                           p_cod_ramo      ,
                                           p_num_cotizacion,
                                           p_cod_tip_vehi || l_k_VAL_CAMPO || p_cod_cob);
        --
        --IF (NOT c_devuelve_seleccion_val_cob%NOTFOUND)
        --THEN
        --
        FETCH c_devuelve_seleccion_val_cob INTO v_val_columna;
        --
        --END IF;
        --
        mx('F', 'fi_devuelve_seleccion_val_cob');
        --
        IF v_val_columna IS NOT NULL
        THEN
          --
          RETURN v_val_columna;--trn.SI;
        ELSE
          --
          RETURN trn.NO;
          --
        END IF;
        --
        EXCEPTION
        WHEN OTHERS THEN
          mx('F', 'fi_devuelve_seleccion_val_cob - EXCEPTION');
      END fi_devuelve_seleccion_val_cob;
      --
      /* ------------------------------------------------------
      || fi_valida_agrupamento_cob
      */ ------------------------------------------------------
      --
      FUNCTION fi_valida_agrupamento_cob (p_cod_cob  df_cmn_nwt_xx_vrb_cnc.CNC_VRB_VAL%TYPE,
                                          p_cod_cia  df_cmn_nwt_xx_vrb_cnc.CMP_VAL%TYPE,
                                          p_cod_ramo df_cmn_nwt_xx_vrb_cnc.LOB_VAL%TYPE)
      RETURN VARCHAR2 IS
        --
        li_row_val_val    df_cmn_nwt_xx_vrb_cnc.row_val_val%TYPE := NULL;
        --
        li_k_vrb_nam      df_cmn_nwt_xx_vrb_cnc.VRB_NAM%TYPE := 'BATCH_COB_GRUPO';
        --
      BEGIN
        --
        mx('I'           ,'fi_valida_agrupamento_cob');
        mx('p_cod_cia'   , p_cod_cia                 );
        mx('p_cod_ramo'  , p_cod_ramo                );
        mx('p_cod_cob'   , p_cod_cob                 );
        mx('li_k_vrb_nam', li_k_vrb_nam              );
        --
        SELECT row_val_val
          INTO li_row_val_val
          FROM df_cmn_nwt_xx_vrb_cnc a
         WHERE cmp_val = p_cod_cia
           AND lob_val = p_cod_ramo
           AND cnc_vrb_val = p_cod_cob
           AND vrb_nam = li_k_vrb_nam;
        --
        mx('AGRUPAMENTO DA COBERTURA: ', li_row_val_val);
        mx('F','fi_valida_agrupamento_cob');
        --
        RETURN li_row_val_val;
        --
      EXCEPTION
        WHEN OTHERS THEN
          mx('F','fi_valida_agrupamento_cob excecao');
          return 'A'; -- devolve a cobertura como adicional caso nao encontre na lista. Basta ajustar o cadastro na tabela
      END fi_valida_agrupamento_cob;
      --
      /* ------------------------------------------------------
      || fi_devuelve_mca_contrata_spto
      */ ------------------------------------------------------
      --
      FUNCTION fi_devuelve_mca_contrata_spto(p_cod_cob          c2000000.val_columna         %TYPE,
                                             p_cod_cob_agrupada df_cmn_nwt_xx_vrb_cnc.vrb_nam%TYPE,
                                             p_mca_selec        c2000000.val_columna         %TYPE)
      RETURN C2000000.val_columna%TYPE
      IS
        --
        l_mca_selec c2000000.val_columna%TYPE := p_mca_selec;
        l_cod_cob   a1002150.cod_cob    %TYPE;
        --
        CURSOR c_df_cmn_nwt_xx_vrb_cnc IS
          SELECT *
            FROM df_cmn_nwt_xx_vrb_cnc a
           WHERE a.cmp_val = g_cod_cia
             AND a.lob_val = g_cod_ramo
             AND a.vrb_nam = p_cod_cob_agrupada     ||
                             g_k_prefixo_simulacion ||
                             p_cod_cob;
        --
        reg_df_cmn_nwt_xx_vrb_cnc c_df_cmn_nwt_xx_vrb_cnc%ROWTYPE;
        --
      BEGIN
        --
        mx('I', 'fi_devuelve_mca_contrata_spto');
        --
        pp_inicializa_variables;
        --
        IF g_tip_mvto_batch = ea_k_231_utils.g_k_spto_batch AND
           fp_cambio_riesgo
        THEN
          --
          l_cod_agt := ea_k_231_utils.f_valor_dv('DFCOD_AGT'); -- 3.08
          trn_k_global.asigna('COD_AGT', l_cod_agt); -- 3.08
          --
          IF c_df_cmn_nwt_xx_vrb_cnc%ISOPEN
          THEN
            --
            CLOSE c_df_cmn_nwt_xx_vrb_cnc;
            --
          END IF;
          --
          OPEN c_df_cmn_nwt_xx_vrb_cnc;
          --
          LOOP
            --
            FETCH c_df_cmn_nwt_xx_vrb_cnc
              INTO reg_df_cmn_nwt_xx_vrb_cnc;
            --
            l_cod_cob := NVL(reg_df_cmn_nwt_xx_vrb_cnc.cnc_vrb_val, p_cod_cob);
            --
            pp_asigna('cod_cob', l_cod_cob);
            --
            pp_lee_config_cob;
            --
            IF ea_k_g2109040.f_mca_contrata = trn.SI
            THEN
              --
              l_mca_selec := trn.SI;
              --
            ELSE
              --
              l_mca_selec := p_mca_selec;
              --
            END IF;
            --
            EXIT WHEN c_df_cmn_nwt_xx_vrb_cnc%NOTFOUND OR
                      l_mca_selec = trn.SI;
            --
          END LOOP;
          --
          CLOSE c_df_cmn_nwt_xx_vrb_cnc;
          --
        END IF;
        --
        mx('F', 'fi_devuelve_mca_contrata_spto');
        --
        RETURN NVL(l_mca_selec, p_mca_selec);
        --
      END fi_devuelve_mca_contrata_spto;
      --
      /* ------------------------------------------------------
      || fi_xml_create_element
      */ ------------------------------------------------------
      --
      FUNCTION fi_xml_text_node (p_document DBMS_XMLDOM.DOMDOCUMENT,
                                 p_texto    VARCHAR2)
      RETURN DBMS_XMLDOM.DOMTEXT
      IS
        --
        --
      BEGIN
        --
        --@mx('I', 'fi_xml_text_node');
        --
        --@mx('F', 'fi_xml_text_node');
        RETURN DBMS_XMLDOM.createtextnode(p_document,
                                          p_texto);
        --
      END fi_xml_text_node;
      --
      /* ------------------------------------------------------
      || fi_xml_create_element
      */ ------------------------------------------------------
      --
      FUNCTION fi_xml_create_element (p_document     DBMS_XMLDOM.DOMDOCUMENT,
                                      p_nome_element VARCHAR2)
      RETURN DBMS_XMLDOM.DOMELEMENT
      IS
        --
        --
      BEGIN
        --
        --@mx('I', 'fi_xml_create_element');
        --
        --@mx('F', 'fi_xml_create_element');
        RETURN DBMS_XMLDOM.createelement(p_document,
                                         p_nome_element);
        --
      END fi_xml_create_element;
      --
      /* ------------------------------------------------------
      || fi_xml_make_node
      */ ------------------------------------------------------
      --
      FUNCTION fi_xml_make_node (p_xml_element DBMS_XMLDOM.DOMDOCUMENT)
      RETURN DBMS_XMLDOM.DOMNODE
      IS
        --
        --
      BEGIN
        --
        --@mx('I', 'fi_xml_make_node');
        --
        --@mx('F', 'fi_xml_make_node');
        RETURN DBMS_XMLDOM.makenode(p_xml_element);
        --
      END fi_xml_make_node;
      --
      /* ------------------------------------------------------
      || fi_xml_make_node
      */ ------------------------------------------------------
      --
      FUNCTION fi_xml_make_node (p_xml_element DBMS_XMLDOM.DOMTEXT)
      RETURN DBMS_XMLDOM.DOMNODE
      IS
        --
        --
      BEGIN
        --
        --@mx('I', 'fi_xml_make_node');
        --
        --@mx('F', 'fi_xml_make_node');
        RETURN DBMS_XMLDOM.makenode(p_xml_element);
        --
      END fi_xml_make_node;
      --
      /* ------------------------------------------------------
      || fi_xml_make_node
      */ ------------------------------------------------------
      --
      FUNCTION fi_xml_make_node (p_xml_element DBMS_XMLDOM.DOMELEMENT)
      RETURN DBMS_XMLDOM.DOMNODE
      IS
        --
        --
      BEGIN
        --
        --@mx('I', 'fi_xml_make_node');
        --
        --@mx('F', 'fi_xml_make_node');
        RETURN DBMS_XMLDOM.makenode(p_xml_element);
        --
      END fi_xml_make_node;
      --
      /* ------------------------------------------------------
      || fi_xml_append_child
      */ ------------------------------------------------------
      --
      FUNCTION fi_xml_append_child (p_node_pai   DBMS_XMLDOM.DOMNode,
                                    p_node_filho DBMS_XMLDOM.DOMNode)
      RETURN DBMS_XMLDOM.DOMNODE
      IS
        --
        --
      BEGIN
        --
        --@mx('I', 'fi_xml_append_child');
        --
        --@mx('F', 'fi_xml_append_child');
        RETURN DBMS_XMLDOM.appendchild(p_node_pai, p_node_filho);
        --
      END fi_xml_append_child;
      --
      /* ------------------------------------------------------
      || fi_xml_append_child
      */ ------------------------------------------------------
      --
      FUNCTION fi_xml_node_completo (p_node_pai     DBMS_XMLDOM.DOMNode    ,
                                     p_document     DBMS_XMLDOM.DOMDOCUMENT,
                                     p_nome_element VARCHAR2)
      RETURN DBMS_XMLDOM.DOMNODE
      IS
        --
        --
      BEGIN
        --
        --@mx('I', 'fi_xml_node_completo');
        --
        --@mx('F', 'fi_xml_node_completo');
        RETURN fi_xml_append_child(p_node_pai,
                                   fi_xml_make_node (p_xml_element => fi_xml_create_element (p_document     => p_document,
                                                                                             p_nome_element => p_nome_element)));
        --
      END fi_xml_node_completo;
      --
      /* ------------------------------------------------------
      || fi_xml_append_child
      */ ------------------------------------------------------
      --
      FUNCTION fi_xml_node_completo (p_node_pai     DBMS_XMLDOM.DOMNode    ,
                                     p_document     DBMS_XMLDOM.DOMDOCUMENT,
                                     p_nome_element NUMBER)
      RETURN DBMS_XMLDOM.DOMNODE
      IS
        --
        --
      BEGIN
        --
        --@mx('I', 'fi_xml_node_completo');
        --
        --@mx('F', 'fi_xml_node_completo');
        RETURN fi_xml_append_child(p_node_pai,
                                   fi_xml_make_node (p_xml_element => fi_xml_create_element (p_document     => p_document,
                                                                                             p_nome_element => TO_CHAR(p_nome_element))));
        --
      END fi_xml_node_completo;
      --
      /* ------------------------------------------------------
      || fi_xml_append_child
      */ ------------------------------------------------------
      --
      FUNCTION fi_xml_node_completo (p_node_pai     DBMS_XMLDOM.DOMNode    ,
                                     p_document     DBMS_XMLDOM.DOMDOCUMENT,
                                     p_nome_element DATE)
      RETURN DBMS_XMLDOM.DOMNODE
      IS
        --
        --
      BEGIN
        --
        --@mx('I', 'fi_xml_node_completo');
        --
        --@mx('F', 'fi_xml_node_completo');
        RETURN fi_xml_append_child(p_node_pai,
                                   fi_xml_make_node (p_xml_element => fi_xml_create_element (p_document     => p_document,
                                                                                             p_nome_element => TO_CHAR(p_nome_element))));
        --
      END fi_xml_node_completo;
      --
      /* ------------------------------------------------------
      || fi_xml_append_child
      */ ------------------------------------------------------
      --
      FUNCTION fi_xml_node_completo (p_node_pai     DBMS_XMLDOM.DOMNode    ,
                                     p_document     DBMS_XMLDOM.DOMDOCUMENT,
                                     p_nome_element BOOLEAN)
      RETURN DBMS_XMLDOM.DOMNODE
      IS
        --
        l_bool_to_text VARCHAR2(1) := NULL;
        --
      BEGIN
        --
        --@mx('I', 'fi_xml_node_completo');
        --
        IF p_nome_element = TRUE
        THEN
          --
          l_bool_to_text := trn.SI;
          --
        ELSE
          --
          l_bool_to_text := trn.NO;
          --
        END IF;
        --
        --@mx('F', 'fi_xml_node_completo');
        RETURN fi_xml_append_child(p_node_pai,
                                   fi_xml_make_node (p_xml_element => fi_xml_create_element (p_document     => p_document,
                                                                                             p_nome_element => l_bool_to_text)));
        --
      END fi_xml_node_completo;
      --
      /* ------------------------------------------------------
      || fi_xml_append_child
      */ ------------------------------------------------------
      --
      FUNCTION fi_xml_txt_node_completo (p_node_pai     DBMS_XMLDOM.DOMNode    ,
                                         p_document     DBMS_XMLDOM.DOMDOCUMENT,
                                         p_texto        VARCHAR2)
      RETURN DBMS_XMLDOM.DOMNODE
      IS
        --
        --
      BEGIN
        --
        --@mx('I', 'fi_xml_txt_node_completo');
        --
        --@mx('F', 'fi_xml_txt_node_completo');
        RETURN fi_xml_append_child(p_node_pai,
                                   fi_xml_make_node (p_xml_element => fi_xml_text_node (p_document => p_document,
                                                                                        p_texto    => p_texto)));
        --
      END fi_xml_txt_node_completo;
      --
      /* ------------------------------------------------------
      || fi_xml_append_child
      */ ------------------------------------------------------
      --
      FUNCTION fi_xml_txt_node_completo (p_node_pai     DBMS_XMLDOM.DOMNode    ,
                                         p_document     DBMS_XMLDOM.DOMDOCUMENT,
                                         p_texto        NUMBER)
      RETURN DBMS_XMLDOM.DOMNODE
      IS
        --
        --
      BEGIN
        --
        --@mx('I', 'fi_xml_txt_node_completo');
        --
        --@mx('F', 'fi_xml_txt_node_completo');
        RETURN fi_xml_append_child(p_node_pai,
                                   fi_xml_make_node (p_xml_element => fi_xml_text_node (p_document => p_document,
                                                                                        p_texto    => TO_CHAR(p_texto))));
        --
      END fi_xml_txt_node_completo;
      --
      /* ------------------------------------------------------
      || fi_xml_append_child
      */ ------------------------------------------------------
      --
      FUNCTION fi_xml_txt_node_completo (p_node_pai     DBMS_XMLDOM.DOMNode    ,
                                         p_document     DBMS_XMLDOM.DOMDOCUMENT,
                                         p_texto        DATE)
      RETURN DBMS_XMLDOM.DOMNODE
      IS
        --
        --
      BEGIN
        --
        --@mx('I', 'fi_xml_txt_node_completo');
        --
        --@mx('F', 'fi_xml_txt_node_completo');
        RETURN fi_xml_append_child(p_node_pai,
                                   fi_xml_make_node (p_xml_element => fi_xml_text_node (p_document => p_document,
                                                                                        p_texto    => TO_CHAR(p_texto))));
        --
      END fi_xml_txt_node_completo;
      --
      /* ------------------------------------------------------
      || fi_xml_append_child
      */ ------------------------------------------------------
      --
      FUNCTION fi_xml_txt_node_completo (p_node_pai     DBMS_XMLDOM.DOMNode    ,
                                         p_document     DBMS_XMLDOM.DOMDOCUMENT,
                                         p_texto        BOOLEAN)
      RETURN DBMS_XMLDOM.DOMNODE
      IS
        --
        l_bool_to_text VARCHAR2(1) := NULL;
        --
      BEGIN
        --
        --@mx('I', 'fi_xml_txt_node_completo');
        --
        IF p_texto = TRUE
        THEN
          --
          l_bool_to_text := trn.SI;
          --
        ELSE
          --
          l_bool_to_text := trn.NO;
          --
        END IF;
        --
        --@mx('F', 'fi_xml_txt_node_completo');
        RETURN fi_xml_append_child(p_node_pai,
                                   fi_xml_make_node (p_xml_element => fi_xml_text_node (p_document => p_document,
                                                                                        p_texto    => l_bool_to_text)));
        --
      END fi_xml_txt_node_completo;
      --
      /* ------------------------------------------------------
      || pi_xml_monta_header
      */ ------------------------------------------------------
      --
      PROCEDURE pi_xml_monta_header --(p_node_dados_pacote     OUT DBMS_XMLDOM.DOMNode
                                    -- p_node_desc_pacotes     OUT DBMS_XMLDOM.DOMNode
                                    -- p_node_cod_campo_header OUT DBMS_XMLDOM.DOMNode
                                    -- p_node_desc_pacotes     OUT DBMS_XMLDOM.DOMNode)
      IS
        --
        --SECAO DE DECLARACAO DE VARIAVEIS
        --
      BEGIN
        --
        mx('I', 'pi_xml_monta_header');
        l_node_dados_pacote := fi_xml_make_node (p_xml_element => l_document);
        --
        l_node_desc_pacotes := fi_xml_node_completo (p_node_pai     => l_node_dados_pacote,
                                                     p_document     => l_document         ,
                                                     p_nome_element => l_k_descPacotes    ); -- descPacotes
        ------------------------------
        -- campo l_node_colvalcobespkt
        l_node_cod_campo_header := fi_xml_node_completo (p_node_pai     => l_node_desc_pacotes,
                                                         p_document     => l_document         ,
                                                         p_nome_element => l_k_codPacote      ); -- codPacote
        --
        --l_node_cod_campo_header := l_node_colvalcobespkt; -- VER ISSO AQUI
        --
        l_node_cod_campo_header := fi_xml_txt_node_completo (p_node_pai => l_node_cod_campo_header       ,
                                                             p_document => l_document                    ,
                                                             p_texto    => l_rec_lista_pac.NUM_SIMULACION);
        ------------------------------
        -- campo
        l_node_cod_campo_header := fi_xml_node_completo (p_node_pai     => l_node_desc_pacotes,
                                                         p_document     => l_document         ,
                                                         p_nome_element => l_k_nomPacote        ); -- nomPacote
        --
        l_node_cod_campo_header := fi_xml_txt_node_completo (p_node_pai => l_node_cod_campo_header   ,
                                                             p_document => l_document                ,
                                                             p_texto    => l_rec_lista_pac.NOM_PACOTE);
        ------------------------------
        -- campo
        l_node_cod_campo_header := fi_xml_node_completo (p_node_pai     => l_node_desc_pacotes,
                                                         p_document     => l_document         ,
                                                         p_nome_element => l_k_valTotal        ); -- valTotal
        --
        l_node_cod_campo_header := fi_xml_txt_node_completo (p_node_pai => l_node_cod_campo_header  ,
                                                             p_document => l_document               ,
                                                             p_texto    => l_rec_lista_pac.VAL_TOTAL);
        ------------------------------
        -- campo
        l_node_cod_campo_header := fi_xml_node_completo (p_node_pai     => l_node_desc_pacotes,
                                                         p_document     => l_document         ,
                                                         p_nome_element => l_k_pctAjuste        ); -- pctAjuste
        --
        l_node_cod_campo_header := fi_xml_txt_node_completo (p_node_pai => l_node_cod_campo_header         ,
                                                             p_document => l_document                      ,
                                                             p_texto    => l_rec_lista_pac.PCT_FATOR_AJUSTE);
        ------------------------------
        -- campo
        l_node_cod_campo_header := fi_xml_node_completo (p_node_pai     => l_node_desc_pacotes,
                                                         p_document     => l_document         ,
                                                         p_nome_element => l_k_pctAgtNpr        ); -- pctAgtNpr
        --
        l_node_cod_campo_header := fi_xml_txt_node_completo (p_node_pai => l_node_cod_campo_header    ,
                                                             p_document => l_document                 ,
                                                             p_texto    => l_rec_lista_pac.PCT_AGT_NPR);
        ------------------------------
        -- campo
        l_node_cod_campo_header := fi_xml_node_completo (p_node_pai     => l_node_desc_pacotes,
                                                         p_document     => l_document         ,
                                                         p_nome_element => l_k_valSubModelo     ); -- valSubModelo
        --
        l_node_cod_campo_header := fi_xml_txt_node_completo (p_node_pai => l_node_cod_campo_header    ,
                                                             p_document => l_document                 ,
                                                             p_texto    => l_rec_lista_pac.VAL_VEICULO);
        ------------------------------
        -- campo
        l_node_cod_campo_header := fi_xml_node_completo (p_node_pai     => l_node_desc_pacotes,
                                                         p_document     => l_document         ,
                                                         p_nome_element => l_k_tipMercDeter     ); -- tipMercDeter
        --
        l_node_cod_campo_header := fi_xml_txt_node_completo (p_node_pai => l_node_cod_campo_header       ,
                                                             p_document => l_document                    ,
                                                             p_texto    => l_rec_lista_pac.TIP_MERC_DETER);
        ------------------------------
        -- campo -- colValoresCoberturasPacotes
        l_node_cod_campo_header := fi_xml_node_completo (p_node_pai     => l_node_desc_pacotes          ,
                                                         p_document     => l_document                   ,
                                                         p_nome_element => l_k_colValCobsPacotes); -- colValoresCoberturasPacotes
        --
        mx('F', 'pi_xml_monta_header');
      END pi_xml_monta_header;
      --
      /* ------------------------------------------------------
      || pi_xml_header_cobs_adi
      */ ------------------------------------------------------
      --
      PROCEDURE pi_xml_header_cobs_adi
      IS
        --
        --
      BEGIN
        --
        mx('I', 'pi_xml_header_cobs_adi');
        --
        l_node_cobs_adi := fi_xml_node_completo (p_node_pai     => l_node_desc_pacotes ,--l_node_desc_pacotes -- revisar
                                                 p_document     => l_document          ,
                                                 p_nome_element => l_k_colValCobsAdi   ); -- colValoresCoberturasAdicionais
        --
        mx('F', 'pi_xml_header_cobs_adi');
        --
      END pi_xml_header_cobs_adi;
      --
      /* ------------------------------------------------------
      || pi_xml_header_cobs_serv
      */ ------------------------------------------------------
      --
      PROCEDURE pi_xml_header_cobs_serv
      IS
        --
        --
      BEGIN
        --
        mx('I', 'pi_xml_header_cobs_serv');
        --
        l_node_cobs_serv := fi_xml_node_completo (p_node_pai     => l_node_desc_pacotes           ,--l_node_desc_pacotes -- revisar
                                                  p_document     => l_document                    ,
                                                  p_nome_element => l_k_colValCobsServ); -- colValoresCoberturasServicos
        --
        mx('F', 'pi_xml_header_cobs_serv');
        --
      END pi_xml_header_cobs_serv;
      --
      /* ------------------------------------------------------
      || pi_xml_header_cobs_agrup
      */ ------------------------------------------------------
      --
      PROCEDURE pi_xml_header_cobs_agrup
      IS
        --
        --
      BEGIN
        --
        mx('I', 'pi_xml_header_cobs_agrup');
        --
        l_node_cobs_agrup := fi_xml_node_completo (p_node_pai     => l_node_cod_campo_header        ,
                                                   p_document     => l_document                     ,
                                                   p_nome_element => l_k_colCoberturasAgrupadas     ); -- colCoberturasAgrupadas
        --
        mx('F', 'pi_xml_header_cobs_agrup');
        --
      END pi_xml_header_cobs_agrup;
      --
      /* ------------------------------------------------------
      || pi_xml_header_cobs_agrup
      */ ------------------------------------------------------
      --
      PROCEDURE pi_xml_header_cobs_basic
      IS
        --
        --
      BEGIN
        --
        mx('I', 'pi_xml_header_cobs_basic');
        --
        NULL;
        --
        mx('F', 'pi_xml_header_cobs_basic');
        --
      END pi_xml_header_cobs_basic;
      --
      /* ------------------------------------------------------
      || pi_xml_corpo_cobs_adi
      */ ------------------------------------------------------
      --
      PROCEDURE pi_xml_corpo_cobs_adi
      IS
        --
        --
      BEGIN
        --
        mx('I', 'pi_xml_corpo_cobs_adi');
        --
        IF l_tab_cob.EXISTS(1) THEN
          --
          --l_node_cobs_adi := fi_xml_node_completo (p_node_pai     => l_node_cod_campo_header         ,--l_node_desc_pacotes -- revisar
          --                                         p_document     => l_document                      ,
          --                                         p_nome_element => 'colValoresCoberturasAdicionais'); --> movido para pi_xml_header_cobs_adi
          -- chama somente uma vez no codigo
          --
          --
          FOR cob_index IN l_tab_cob.FIRST .. l_tab_cob.LAST LOOP
            --
            IF  'A' = fi_valida_agrupamento_cob (p_cod_cob  => l_tab_cob(cob_index).COD_COB,
                                                 p_cod_cia  => 1                           , -- constante ou variavel
                                                 p_cod_ramo => 231                         ) -- constante ou variavel
            THEN
              --
              mx('l_tab_cob(cob_index).NOM_COB', l_tab_cob(cob_index).NOM_COB);
              mx('l_tab_cob(cob_index).COD_COB', l_tab_cob(cob_index).COD_COB);
              --
              --l_node_adi_col_coberturas := NULL;
              l_node_adi_col_coberturas := fi_xml_node_completo (p_node_pai     => l_node_cobs_adi,
                                                                 p_document     => l_document     ,
                                                                 p_nome_element => l_k_colCoberturas); -- colCoberturas
              ------------------------------
              -- CAMPO
              l_node_cod_campo_adi := fi_xml_node_completo (p_node_pai     => l_node_adi_col_coberturas,
                                                            p_document     => l_document               ,
                                                            p_nome_element => l_k_codCobertura           ); -- codCobertura
              --
              l_node_val_campo_adi := fi_xml_txt_node_completo (p_node_pai => l_node_cod_campo_adi        ,
                                                                p_document => l_document                  ,
                                                                p_texto    => l_tab_cob(cob_index).COD_COB);
              ------------------------------
              -- CAMPO
              l_node_cod_campo_adi := fi_xml_node_completo (p_node_pai     => l_node_adi_col_coberturas,
                                                            p_document     => l_document               ,
                                                            p_nome_element => l_k_nomCobertura           ); -- nomCobertura
              --
              l_node_val_campo_adi := fi_xml_txt_node_completo (p_node_pai => l_node_cod_campo_adi,
                                                                p_document => l_document          ,
                                                                p_texto    => fp_valores_lista (1                           ,
                                                                                                'NOM_COB'                   ,
                                                                                                l_tab_cob(cob_index).NOM_COB,
                                                                                                l_tab_cob(cob_index).COD_COB));
              ------------------------------
              -- CAMPO
              l_node_cod_campo_adi := fi_xml_node_completo (p_node_pai     => l_node_adi_col_coberturas,
                                                            p_document     => l_document               ,
                                                            p_nome_element => l_k_mcaSeleccionCob        ); -- mcaSeleccionCob
              --
              IF trn_k_global.ref_f_global('MCA_FLOTA_BATCH') = trn.SI
              THEN
                --
                l_node_val_campo_adi := fi_xml_txt_node_completo (p_node_pai => l_node_cod_campo_adi      ,
                                                                  p_document => l_document                ,
                                                                  p_texto    => fi_devuelve_seleccion_cob (p_cod_cia        => trn_k_global.ref_f_global('COD_CIA')         ,
                                                                                                           p_cod_ramo       => trn_k_global.ref_f_global('COD_RAMO')        ,
                                                                                                           p_num_cotizacion => trn_k_global.ref_f_global('NUM_POLIZA_GRUPO'),
                                                                                                           p_cod_cob        => l_tab_cob(cob_index).COD_COB                 ,
                                                                                                           p_cod_tip_vehi   => trn_k_global.ref_f_global('DVCOD_TIP_VEHI')));
                --
              ELSE
                --
                l_node_val_campo_adi := fi_xml_txt_node_completo (p_node_pai => l_node_cod_campo_adi              ,
                                                                  p_document => l_document                        ,
                                                                  p_texto    => l_tab_cob(cob_index).MCA_SELEC_COB);
                --
              END IF;
              ------------------------------
              -- CAMPO
              l_node_cod_campo_adi := fi_xml_node_completo (p_node_pai     => l_node_adi_col_coberturas,
                                                            p_document     => l_document               ,
                                                            p_nome_element => l_k_mcaModificaCapital     ); -- mcaModificaCapital
              --
              l_node_val_campo_adi := fi_xml_txt_node_completo (p_node_pai => l_node_cod_campo_adi              ,
                                                                p_document => l_document                        ,
                                                                p_texto    => l_tab_cob(cob_index).MCA_MODIF_CAP);
              ------------------------------
              -- TRATA INFORMACOES DO LIMITE DE INDENIZACAO
              --
              l_tab_val_lim_inde := l_tab_cob(cob_index).TAB_VAL_LIM_INDE;
              --
              -- valida se existe registros com limite de indenizacao
              IF l_tab_val_lim_inde.COUNT = trn.CERO THEN
                --
                ------------------------------
                -- CAMPO
                l_node_adi_indenizacao := fi_xml_node_completo (p_node_pai     => l_node_adi_col_coberturas,
                                                                p_document     => l_document               ,
                                                                p_nome_element => l_k_valLimiteMaxIndenizacao); -- valLimiteMaxIndenizacao
                --
              ELSE
                --
                FOR inde_index IN l_tab_val_lim_inde.FIRST .. l_tab_val_lim_inde.LAST LOOP
                  --
                  ------------------------------
                  -- NODE
                  l_node_adi_indenizacao := fi_xml_node_completo (p_node_pai     => l_node_adi_col_coberturas,
                                                                  p_document     => l_document               ,
                                                                  p_nome_element => l_k_valLimiteMaxIndenizacao); -- valLimiteMaxIndenizacao
                  ------------------------------
                  -- CAMPO
                  l_cod_node_adi_indenizacao := fi_xml_node_completo (p_node_pai     => l_node_adi_indenizacao,
                                                                      p_document     => l_document            ,
                                                                      p_nome_element => l_k_codCampo            ); -- codCampo
                  --
                  l_val_node_adi_indenizacao := fi_xml_txt_node_completo (p_node_pai => l_cod_node_adi_indenizacao              ,
                                                                          p_document => l_document                              ,
                                                                          p_texto    => l_tab_val_lim_inde(inde_index).COD_CAMPO);
                  ------------------------------
                  -- CAMPO
                  l_cod_node_adi_indenizacao := fi_xml_node_completo (p_node_pai     => l_node_adi_indenizacao,
                                                                      p_document     => l_document            ,
                                                                      p_nome_element => l_k_valCampo            ); -- valCampo
                  --
                  l_val_node_adi_indenizacao := fi_xml_txt_node_completo (p_node_pai => l_cod_node_adi_indenizacao              ,
                                                                          p_document => l_document                              ,
                                                                          p_texto    => l_tab_val_lim_inde(inde_index).VAL_CAMPO);
                  ------------------------------
                  -- CAMPO
                  l_cod_node_adi_indenizacao := fi_xml_node_completo (p_node_pai     => l_node_adi_indenizacao,
                                                                      p_document     => l_document            ,
                                                                      p_nome_element => l_k_mcaValDefecto       ); -- mcaValDefecto
                  --
                  IF trn_k_global.ref_f_global('MCA_FLOTA_BATCH') = trn.SI
                  THEN
                    --
                    IF fi_devuelve_seleccion_cob (p_cod_cia        => trn_k_global.ref_f_global('COD_CIA')         ,
                                                  p_cod_ramo       => trn_k_global.ref_f_global('COD_RAMO')        ,
                                                  p_num_cotizacion => trn_k_global.ref_f_global('NUM_POLIZA_GRUPO'),
                                                  p_cod_cob        => l_tab_cob(cob_index).COD_COB                 ,
                                                  p_cod_tip_vehi   => trn_k_global.ref_f_global('DVCOD_TIP_VEHI')) = trn.SI
                    --
                    AND
                    --
                    fi_devuelve_seleccion_val_cob (p_cod_cia        => trn_k_global.ref_f_global('COD_CIA')         ,
                                                   p_cod_ramo       => trn_k_global.ref_f_global('COD_RAMO')        ,
                                                   p_num_cotizacion => trn_k_global.ref_f_global('NUM_POLIZA_GRUPO'),
                                                   p_cod_cob        => l_tab_cob(cob_index).COD_COB                 ,
                                                   p_cod_tip_vehi   => trn_k_global.ref_f_global('DVCOD_TIP_VEHI')) = l_tab_val_lim_inde(inde_index).VAL_CAMPO
                    --
                    THEN
                      --
                      l_val_node_adi_indenizacao := fi_xml_txt_node_completo (p_node_pai => l_cod_node_adi_indenizacao,
                                                                              p_document => l_document                ,
                                                                              p_texto    => trn.SI                    );
                      --
                    ELSE
                      --
                      l_val_node_adi_indenizacao := fi_xml_txt_node_completo (p_node_pai => l_cod_node_adi_indenizacao,
                                                                              p_document => l_document                ,
                                                                              p_texto    => trn.NO                    );
                      --
                    END IF;
                    --
                  ELSE
                    --
                    l_val_node_adi_indenizacao := fi_xml_txt_node_completo (p_node_pai => l_cod_node_adi_indenizacao                  ,
                                                                            p_document => l_document                                  ,
                                                                            p_texto    => l_tab_val_lim_inde(inde_index).MCA_VAL_DEFEC);
                    --
                  END IF;
                  --
                END LOOP;
                --
              END IF;
              ------------------------------
              -- TRATA LISTA DE ATRIBUTOS DA LISTA DA COBERTURA (DV) - LISTA DE LISTA
              --
              l_tab_atri_lista := l_tab_cob(cob_index).TAB_ATRI_LISTA;
              --
              ------------------------------
              -- CAMPO
              l_node_adi_col_atrib_lista := fi_xml_node_completo (p_node_pai     => l_node_adi_col_coberturas,
                                                                  p_document     => l_document               ,
                                                                  p_nome_element => l_k_colAtributosLista      ); -- colAtributosLista
              --
              -- TRATA LISTA DE ATRIBUTOS DA LISTA DA COBERTURA (DV) - LISTA DE LISTA
              IF l_tab_atri_lista.EXISTS(1) THEN
                --
                FOR atri_lis_index IN l_tab_atri_lista.FIRST .. l_tab_atri_lista.LAST LOOP
                  --
                  l_tab_atri_cob := l_tab_atri_lista(atri_lis_index);
                  --
                  -- TRATA LISTA DA LISTA DA COBERTURA (LISTA DO DV)
                  IF l_tab_atri_cob.EXISTS(1) THEN
                    --
                    FOR atri_cob_index IN l_tab_atri_cob.FIRST .. l_tab_atri_cob.LAST LOOP
                      --
                      ------------------------------
                      -- NODE
                      l_node_adi_tip_atrib_cob := fi_xml_node_completo (p_node_pai     => l_node_adi_col_atrib_lista,
                                                                        p_document     => l_document                 ,
                                                                        p_nome_element => l_k_tipAtributoCob           ); -- tipAtributoCob
                      ------------------------------
                      -- CAMPO
                      l_cod_adi_tip_atrib_cob := fi_xml_node_completo (p_node_pai     => l_node_adi_tip_atrib_cob,
                                                                       p_document     => l_document              ,
                                                                       p_nome_element => l_k_codCampo              ); -- codCampo
                      --
                      l_val_adi_tip_atrib_cob := fi_xml_txt_node_completo (p_node_pai => l_cod_adi_tip_atrib_cob                 ,
                                                                           p_document => l_document                              ,
                                                                           p_texto    => l_tab_atri_cob(atri_cob_index).COD_CAMPO);
                      ------------------------------
                      -- CAMPO
                      l_cod_adi_tip_atrib_cob := fi_xml_node_completo (p_node_pai     => l_node_adi_tip_atrib_cob,
                                                                       p_document     => l_document              ,
                                                                       p_nome_element => l_k_valCampo              ); -- valCampo
                      --
                      l_val_adi_tip_atrib_cob := fi_xml_txt_node_completo (p_node_pai => l_cod_adi_tip_atrib_cob                 ,
                                                                           p_document => l_document                              ,
                                                                           p_texto    => l_tab_atri_cob(atri_cob_index).VAL_CAMPO);
                      ------------------------------
                      -- CAMPO
                      l_cod_adi_tip_atrib_cob := fi_xml_node_completo (p_node_pai     => l_node_adi_tip_atrib_cob,
                                                                       p_document     => l_document              ,
                                                                       p_nome_element => l_k_txtCampo              ); -- txtCampo
                      --
                      l_val_adi_tip_atrib_cob := fi_xml_txt_node_completo (p_node_pai => l_cod_adi_tip_atrib_cob                 ,
                                                                           p_document => l_document                              ,
                                                                           p_texto    => l_tab_atri_cob(atri_cob_index).TXT_CAMPO);
                      ------------------------------
                      -- CAMPO
                      l_cod_adi_tip_atrib_cob := fi_xml_node_completo (p_node_pai     => l_node_adi_tip_atrib_cob,
                                                                       p_document     => l_document              ,
                                                                       p_nome_element => 'mcaSeleccionAtributo'  );
                      --
                      l_val_adi_tip_atrib_cob := fi_xml_txt_node_completo (p_node_pai => l_cod_adi_tip_atrib_cob                 ,
                                                                           p_document => l_document                              ,
                                                                           p_texto    => l_tab_atri_cob(atri_cob_index).MCA_SELEC);
                      --
                    END LOOP;
                    --
                  END IF;
                  --
                END LOOP;
                --
              END IF;
              --
              ------------------------------
              -- TRATA LISTA DE FRANQUIA DA COBERTURA - LISTA DE LISTA
              l_tab_val_franq := l_tab_cob(cob_index).TAB_VAL_FRANQ;
              --
              -- TRATA LISTA DE FRANQUIA DA COBERTURA
              IF l_tab_val_franq.COUNT = trn.CERO THEN
                --
                ------------------------------
                -- CAMPO
                l_node_adi_val_franq := fi_xml_node_completo (p_node_pai     => l_node_adi_col_coberturas,
                                                              p_document     => l_document               ,
                                                              p_nome_element => l_k_valFranquia            ); -- valFranquia

              ELSE
                --
                FOR val_franq_index IN l_tab_val_franq.FIRST .. l_tab_val_franq.LAST LOOP
                  --
                  ------------------------------
                  -- NODE
                  l_node_adi_val_franq := fi_xml_node_completo (p_node_pai     => l_node_adi_col_coberturas,
                                                               p_document     => l_document          ,
                                                               p_nome_element => l_k_valFranquia       ); -- valFranquia
                  ------------------------------
                  -- CAMPO
                  l_cod_adi_val_franq := fi_xml_node_completo (p_node_pai     => l_node_adi_val_franq,
                                                               p_document     => l_document              ,
                                                               p_nome_element => l_k_codCampo  ); -- codCampo
                  --
                  l_val_adi_val_franq := fi_xml_txt_node_completo (p_node_pai => l_cod_adi_val_franq                       ,
                                                                   p_document => l_document                                ,
                                                                   p_texto    => l_tab_val_franq(val_franq_index).COD_CAMPO);
                  --
                  IF l_tab_val_franq(val_franq_index).TXT_CAMPO IS NOT NULL THEN
                    --
                    ------------------------------
                    -- CAMPO
                    l_cod_adi_val_franq := fi_xml_node_completo (p_node_pai     => l_node_adi_val_franq,
                                                                 p_document     => l_document              ,
                                                                 p_nome_element => l_k_txtCampo  ); -- txtCampo
                    --
                    l_val_adi_val_franq := fi_xml_txt_node_completo (p_node_pai => l_cod_adi_val_franq                       ,
                                                                     p_document => l_document                                ,
                                                                     p_texto    => l_tab_val_franq(val_franq_index).TXT_CAMPO);
                    --
                  END IF;
                  --
                  ------------------------------
                  -- CAMPO
                  l_cod_adi_val_franq := fi_xml_node_completo (p_node_pai     => l_node_adi_val_franq,
                                                               p_document     => l_document              ,
                                                               p_nome_element => l_k_valCampo  ); -- valCampo
                  --
                  l_val_adi_val_franq := fi_xml_txt_node_completo (p_node_pai => l_cod_adi_val_franq                       ,
                                                                   p_document => l_document                                ,
                                                                   p_texto    => l_tab_val_franq(val_franq_index).VAL_CAMPO);
                  --
                END LOOP;
                --
              END IF;
              --
              ------------------------------
              -- CAMPO
              l_node_cod_campo_adi := fi_xml_node_completo (p_node_pai     => l_node_adi_col_coberturas,
                                                            p_document     => l_document               ,
                                                            p_nome_element => l_k_valPremio               ); -- valPremio
              --
              l_node_val_campo_adi := fi_xml_txt_node_completo (p_node_pai => l_node_cod_campo_adi                     ,
                                                               p_document => l_document                                ,
                                                               p_texto    => l_tab_cob(cob_index).VAL_PREMIO);
              --
            END IF;
            --
          END LOOP;
          --
        END IF;
        --
        mx('F', 'pi_xml_corpo_cobs_adi');
        --
      END pi_xml_corpo_cobs_adi;
      --
      /* ------------------------------------------------------
      || pi_xml_corpo_cobs_adi
      */ ------------------------------------------------------
      --
      PROCEDURE pi_xml_corpo_cobs_serv
      IS
        --
        --
      BEGIN
        --
        mx('I', 'pi_xml_corpo_cobs_serv');
        --
        IF l_tab_cob.EXISTS(1) THEN
          --
          mx('-', 'd0'); -- mbaruch
          --
          --l_node_cobs_serv := fi_xml_node_completo (p_node_pai     => l_node_cod_campo_header         ,--l_node_desc_pacotes -- revisar
          --                                         p_document     => l_document                      ,
          --                                         p_nome_element => 'colValoresCoberturasservcionais'); --> movido para pi_xml_header_cobs_serv
          -- chama somente uma vez no codigo
          --
          --
          FOR cob_index IN l_tab_cob.FIRST .. l_tab_cob.LAST LOOP
            --
            IF  'S' = fi_valida_agrupamento_cob (p_cod_cob  => l_tab_cob(cob_index).COD_COB,
                                                 p_cod_cia  => 1                           , -- constante ou variavel
                                                 p_cod_ramo => 231                         ) -- constante ou variavel
            THEN
              --
              mx('l_tab_cob(cob_index).NOM_COB', l_tab_cob(cob_index).NOM_COB);
              mx('l_tab_cob(cob_index).COD_COB', l_tab_cob(cob_index).COD_COB);
              --
              mx('l_tab_cob(cob_index).MCA_SELEC_COB', l_tab_cob(cob_index).MCA_SELEC_COB);
              mx('l_tab_cob(cob_index).MCA_MODIF_CAP', l_tab_cob(cob_index).MCA_MODIF_CAP);
              mx('l_tab_cob(cob_index).VAL_PREMIO'   , l_tab_cob(cob_index).VAL_PREMIO   );
              --
              l_node_serv_col_coberturas := NULL;
              l_node_serv_col_coberturas := fi_xml_node_completo (p_node_pai     => l_node_cobs_serv,
                                                                  p_document     => l_document      ,
                                                                  p_nome_element => l_k_colCoberturas ); -- colCoberturas
              ------------------------------
              -- CAMPO
              l_node_cod_campo_serv := fi_xml_node_completo (p_node_pai     => l_node_serv_col_coberturas,
                                                             p_document     => l_document                ,
                                                             p_nome_element => l_k_codCobertura            ); -- codCobertura
              --
              l_node_val_campo_serv := fi_xml_txt_node_completo (p_node_pai => l_node_cod_campo_serv       ,
                                                                 p_document => l_document                  ,
                                                                 p_texto    => l_tab_cob(cob_index).COD_COB);
              ------------------------------
              -- CAMPO
              l_node_cod_campo_serv := fi_xml_node_completo (p_node_pai     => l_node_serv_col_coberturas,
                                                             p_document     => l_document                ,
                                                             p_nome_element => l_k_nomCobertura            ); -- nomCobertura
              --
              l_node_val_campo_serv := fi_xml_txt_node_completo (p_node_pai => l_node_cod_campo_serv,
                                                                 p_document => l_document           ,
                                                                 p_texto    => fp_valores_lista(1                           ,
                                                                                                'NOM_COB'                   ,
                                                                                                l_tab_cob(cob_index).NOM_COB,
                                                                                                l_tab_cob(cob_index).COD_COB));
              ------------------------------
              -- CAMPO
              l_node_cod_campo_serv := fi_xml_node_completo (p_node_pai     => l_node_serv_col_coberturas,
                                                             p_document     => l_document                ,
                                                             p_nome_element => l_k_mcaSeleccionCob         ); -- mcaSeleccionCob
              --
              IF trn_k_global.ref_f_global('MCA_FLOTA_BATCH') = trn.SI
              THEN
                --
                l_node_val_campo_serv := fi_xml_txt_node_completo (p_node_pai => l_node_cod_campo_serv     ,
                                                                   p_document => l_document                ,
                                                                   p_texto    => fi_devuelve_seleccion_cob (p_cod_cia        => trn_k_global.ref_f_global('COD_CIA')         ,
                                                                                                            p_cod_ramo       => trn_k_global.ref_f_global('COD_RAMO')        ,
                                                                                                            p_num_cotizacion => trn_k_global.ref_f_global('NUM_POLIZA_GRUPO'),
                                                                                                            p_cod_cob        => l_tab_cob(cob_index).COD_COB             ,
                                                                                                            p_cod_tip_vehi   => trn_k_global.ref_f_global('DVCOD_TIP_VEHI')));
                --
              ELSE
                --
                l_node_val_campo_serv := fi_xml_txt_node_completo (p_node_pai => l_node_cod_campo_serv             ,
                                                                   p_document => l_document                        ,
                                                                   p_texto    => l_tab_cob(cob_index).MCA_SELEC_COB);
                --
              END IF;
              ------------------------------
              -- CAMPO
              l_node_cod_campo_serv := fi_xml_node_completo (p_node_pai     => l_node_serv_col_coberturas,
                                                             p_document     => l_document                ,
                                                             p_nome_element => l_k_mcaModificaCapital      ); -- mcaModificaCapital
              --
              l_node_val_campo_serv := fi_xml_txt_node_completo (p_node_pai => l_node_cod_campo_serv             ,
                                                                 p_document => l_document                        ,
                                                                 p_texto    => l_tab_cob(cob_index).MCA_MODIF_CAP);
              ------------------------------
              -- TRATA INFORMACOES DO LIMITE DE INDENIZACAO
              --
              l_tab_val_lim_inde := l_tab_cob(cob_index).TAB_VAL_LIM_INDE;
              --
              -- valida se existe registros com limite de indenizacao
              IF l_tab_val_lim_inde.COUNT = trn.CERO THEN
                --
                ------------------------------
                -- CAMPO
                l_node_serv_indenizacao := fi_xml_node_completo (p_node_pai     => l_node_serv_col_coberturas,
                                                                 p_document     => l_document                ,
                                                                 p_nome_element => l_k_valLimiteMaxIndenizacao ); -- valLimiteMaxIndenizacao
                --
                --l_node_lim_max_inde := DBMS_XMLDOM.appendchild(l_node_col_cob,
                --                                                DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,
                --                                                                                                'valLimiteMaxIndenizacao')));
                --
              ELSE
                --
                FOR inde_index IN l_tab_val_lim_inde.FIRST .. l_tab_val_lim_inde.LAST LOOP
                  --
                  mx('l_tab_val_lim_inde(inde_index).COD_CAMPO'    , l_tab_val_lim_inde(inde_index).COD_CAMPO    );
                  mx('l_tab_val_lim_inde(inde_index).VAL_CAMPO'    , l_tab_val_lim_inde(inde_index).VAL_CAMPO    );
                  mx('l_tab_val_lim_inde(inde_index).MCA_VAL_DEFEC', l_tab_val_lim_inde(inde_index).MCA_VAL_DEFEC);
                  --
                  ------------------------------
                  -- NODE
                  l_node_serv_indenizacao := fi_xml_node_completo (p_node_pai     => l_node_serv_col_coberturas,
                                                                   p_document     => l_document                ,
                                                                   p_nome_element => l_k_valLimiteMaxIndenizacao ); -- valLimiteMaxIndenizacao
                  ------------------------------
                  -- CAMPO
                  l_cod_node_serv_indenizacao := fi_xml_node_completo (p_node_pai     => l_node_serv_indenizacao,
                                                                       p_document     => l_document             ,
                                                                       p_nome_element => l_k_codCampo             ); -- codCampo
                  --
                  l_val_node_serv_indenizacao := fi_xml_txt_node_completo (p_node_pai => l_cod_node_serv_indenizacao             ,
                                                                           p_document => l_document                              ,
                                                                           p_texto    => l_tab_val_lim_inde(inde_index).COD_CAMPO);
                  ------------------------------
                  -- CAMPO
                  l_cod_node_serv_indenizacao := fi_xml_node_completo (p_node_pai     => l_node_serv_indenizacao,
                                                                       p_document     => l_document             ,
                                                                       p_nome_element => l_k_valCampo             ); -- valCampo
                  --
                  l_val_node_serv_indenizacao := fi_xml_txt_node_completo (p_node_pai => l_cod_node_serv_indenizacao             ,
                                                                           p_document => l_document                              ,
                                                                           p_texto    => l_tab_val_lim_inde(inde_index).VAL_CAMPO);
                  ------------------------------
                  -- CAMPO
                  l_cod_node_serv_indenizacao := fi_xml_node_completo (p_node_pai     => l_node_serv_indenizacao,
                                                                       p_document     => l_document             ,
                                                                       p_nome_element => l_k_mcaValDefecto        ); -- mcaValDefecto
                  --
                  IF trn_k_global.ref_f_global('MCA_FLOTA_BATCH') = trn.SI
                  THEN
                    --
                    IF fi_devuelve_seleccion_cob (p_cod_cia        => trn_k_global.ref_f_global('COD_CIA')         ,
                                                  p_cod_ramo       => trn_k_global.ref_f_global('COD_RAMO')        ,
                                                  p_num_cotizacion => trn_k_global.ref_f_global('NUM_POLIZA_GRUPO'),
                                                  p_cod_cob        => l_tab_cob(cob_index).COD_COB                 ,
                                                  p_cod_tip_vehi   => trn_k_global.ref_f_global('DVCOD_TIP_VEHI')) = trn.SI
                    --
                    AND
                    --
                    fi_devuelve_seleccion_val_cob (p_cod_cia        => trn_k_global.ref_f_global('COD_CIA')         ,
                                                   p_cod_ramo       => trn_k_global.ref_f_global('COD_RAMO')        ,
                                                   p_num_cotizacion => trn_k_global.ref_f_global('NUM_POLIZA_GRUPO'),
                                                   p_cod_cob        => l_tab_cob(cob_index).COD_COB                 ,
                                                   p_cod_tip_vehi   => trn_k_global.ref_f_global('DVCOD_TIP_VEHI')) = l_tab_val_lim_inde(inde_index).VAL_CAMPO
                    --
                    THEN
                      --
                      l_val_node_serv_indenizacao := fi_xml_txt_node_completo (p_node_pai => l_cod_node_serv_indenizacao,
                                                                               p_document => l_document                 ,
                                                                               p_texto    => trn.SI                     );
                      --
                    ELSE
                      --
                      l_val_node_serv_indenizacao := fi_xml_txt_node_completo (p_node_pai => l_cod_node_serv_indenizacao,
                                                                               p_document => l_document                 ,
                                                                               p_texto    => trn.NO                     );
                      --
                    END IF;
                    --
                  ELSE
                    --
                    l_val_node_serv_indenizacao := fi_xml_txt_node_completo (p_node_pai => l_cod_node_serv_indenizacao                 ,
                                                                             p_document => l_document                                  ,
                                                                             p_texto    => l_tab_val_lim_inde(inde_index).MCA_VAL_DEFEC);
                    --
                  END IF;
                  --
                END LOOP;
                --
              END IF;
              ------------------------------
              -- TRATA LISTA DE ATRIBUTOS DA LISTA DA COBERTURA (DV) - LISTA DE LISTA
              --
              l_tab_atri_lista := l_tab_cob(cob_index).TAB_ATRI_LISTA;
              --
              ------------------------------
              -- CAMPO
              l_node_serv_col_atrib_lista := NULL;
              l_node_serv_col_atrib_lista := fi_xml_node_completo (p_node_pai     => l_node_serv_col_coberturas,
                                                                   p_document     => l_document                ,
                                                                   p_nome_element => l_k_colAtributosLista       ); -- colAtributosLista
              --
              -- TRATA LISTA DE ATRIBUTOS DA LISTA DA COBERTURA (DV) - LISTA DE LISTA
              IF l_tab_atri_lista.EXISTS(1) THEN
                --
                FOR atri_lis_index IN l_tab_atri_lista.FIRST .. l_tab_atri_lista.LAST LOOP
                  --
                  l_tab_atri_cob := l_tab_atri_lista(atri_lis_index);
                  --
                  -- TRATA LISTA DA LISTA DA COBERTURA (LISTA DO DV)
                  IF l_tab_atri_cob.EXISTS(1) THEN
                    --
                    FOR atri_cob_index IN l_tab_atri_cob.FIRST .. l_tab_atri_cob.LAST LOOP
                      --
                      mx('l_tab_atri_cob(atri_cob_index).COD_CAMPO', l_tab_atri_cob(atri_cob_index).COD_CAMPO);
                      mx('l_tab_atri_cob(atri_cob_index).VAL_CAMPO', l_tab_atri_cob(atri_cob_index).VAL_CAMPO);
                      mx('l_tab_atri_cob(atri_cob_index).TXT_CAMPO', l_tab_atri_cob(atri_cob_index).TXT_CAMPO);
                      mx('l_tab_atri_cob(atri_cob_index).MCA_SELEC', l_tab_atri_cob(atri_cob_index).MCA_SELEC);
                      --
                      l_node_serv_tip_atrib_cob := NULL;
                      ------------------------------
                      -- NODE
                      l_node_serv_tip_atrib_cob := fi_xml_node_completo (p_node_pai     => l_node_serv_col_atrib_lista,
                                                                         p_document     => l_document                 ,
                                                                         p_nome_element => l_k_tipAtributoCob           ); -- tipAtributoCob
                      ------------------------------
                      -- CAMPO
                      l_cod_serv_tip_atrib_cob := fi_xml_node_completo (p_node_pai     => l_node_serv_tip_atrib_cob,
                                                                        p_document     => l_document               ,
                                                                        p_nome_element => l_k_codCampo               ); -- codCampo
                      --
                      l_val_serv_tip_atrib_cob := fi_xml_txt_node_completo (p_node_pai => l_cod_serv_tip_atrib_cob                ,
                                                                            p_document => l_document                              ,
                                                                            p_texto    => l_tab_atri_cob(atri_cob_index).COD_CAMPO);
                      ------------------------------
                      -- CAMPO
                      l_cod_serv_tip_atrib_cob := fi_xml_node_completo (p_node_pai     => l_node_serv_tip_atrib_cob,
                                                                        p_document     => l_document               ,
                                                                        p_nome_element => l_k_valCampo               ); -- valCampo
                      --
                      l_val_serv_tip_atrib_cob := fi_xml_txt_node_completo (p_node_pai => l_cod_serv_tip_atrib_cob                ,
                                                                            p_document => l_document                              ,
                                                                            p_texto    => l_tab_atri_cob(atri_cob_index).VAL_CAMPO);
                      ------------------------------
                      -- CAMPO
                      l_cod_serv_tip_atrib_cob := fi_xml_node_completo (p_node_pai     => l_node_serv_tip_atrib_cob,
                                                                        p_document     => l_document               ,
                                                                        p_nome_element => l_k_txtCampo               ); -- txtCampo
                      --
                      l_val_serv_tip_atrib_cob := fi_xml_txt_node_completo (p_node_pai => l_cod_serv_tip_atrib_cob                ,
                                                                            p_document => l_document                              ,
                                                                            p_texto    => l_tab_atri_cob(atri_cob_index).TXT_CAMPO);
                      ------------------------------
                      -- CAMPO
                      l_cod_serv_tip_atrib_cob := fi_xml_node_completo (p_node_pai     => l_node_serv_tip_atrib_cob,
                                                                        p_document     => l_document               ,
                                                                        p_nome_element => l_k_mcaSeleccionAtributo   ); -- mcaSeleccionAtributo
                      --
                      l_val_serv_tip_atrib_cob := fi_xml_txt_node_completo (p_node_pai => l_cod_serv_tip_atrib_cob                ,
                                                                            p_document => l_document                              ,
                                                                            p_texto    => l_tab_atri_cob(atri_cob_index).MCA_SELEC);
                      --
                    END LOOP;
                    --
                  END IF;
                  --
                END LOOP;
                --
              END IF;
              --
              ------------------------------
              -- TRATA LISTA DE FRANQUIA DA COBERTURA - LISTA DE LISTA
              l_tab_val_franq := l_tab_cob(cob_index).TAB_VAL_FRANQ;
              --
              -- TRATA LISTA DE FRANQUIA DA COBERTURA
              IF l_tab_val_franq.COUNT = trn.CERO THEN
                --
                ------------------------------
                -- CAMPO
                l_node_serv_val_franq := fi_xml_node_completo (p_node_pai     => l_node_serv_col_coberturas,
                                                               p_document     => l_document                ,
                                                               p_nome_element => l_k_valFranquia             ); -- valFranquia
                --
              ELSE
                --
                FOR val_franq_index IN l_tab_val_franq.FIRST .. l_tab_val_franq.LAST LOOP
                  --
                  mx('l_tab_val_franq(val_franq_index).COD_CAMPO', l_tab_val_franq(val_franq_index).COD_CAMPO);
                  mx('l_tab_val_franq(val_franq_index).TXT_CAMPO', l_tab_val_franq(val_franq_index).TXT_CAMPO);
                  mx('l_tab_val_franq(val_franq_index).VAL_CAMPO', l_tab_val_franq(val_franq_index).VAL_CAMPO);
                  --
                  ------------------------------
                  -- NODE
                  l_node_serv_val_franq := fi_xml_node_completo (p_node_pai     => l_node_serv_col_coberturas,
                                                                p_document     => l_document                ,
                                                                p_nome_element => l_k_valFranquia             ); -- valFranquia
                  ------------------------------
                  -- CAMPO
                  l_cod_serv_val_franq := fi_xml_node_completo (p_node_pai     => l_node_serv_val_franq,
                                                                p_document     => l_document           ,
                                                                p_nome_element => l_k_codCampo           ); -- codCampo
                  --
                  l_val_serv_val_franq := fi_xml_txt_node_completo (p_node_pai => l_cod_serv_val_franq                      ,
                                                                    p_document => l_document                                ,
                                                                    p_texto    => l_tab_val_franq(val_franq_index).COD_CAMPO);
                  --
                  IF l_tab_val_franq(val_franq_index).TXT_CAMPO IS NOT NULL THEN
                    --
                    ------------------------------
                    -- CAMPO
                    l_cod_serv_val_franq := fi_xml_node_completo (p_node_pai     => l_node_serv_val_franq,
                                                                  p_document     => l_document           ,
                                                                  p_nome_element => l_k_txtCampo           ); -- txtCampo
                    --
                    l_val_serv_val_franq := fi_xml_txt_node_completo (p_node_pai => l_cod_serv_val_franq                      ,
                                                                      p_document => l_document                                ,
                                                                      p_texto    => l_tab_val_franq(val_franq_index).TXT_CAMPO);
                    --
                  END IF;
                  --
                  ------------------------------
                  -- CAMPO
                  l_cod_serv_val_franq := fi_xml_node_completo (p_node_pai     => l_node_serv_val_franq,
                                                                p_document     => l_document           ,
                                                                p_nome_element => l_k_valCampo           ); -- valCampo
                  --
                  l_val_serv_val_franq := fi_xml_txt_node_completo (p_node_pai => l_cod_serv_val_franq                      ,
                                                                    p_document => l_document                                ,
                                                                    p_texto    => l_tab_val_franq(val_franq_index).VAL_CAMPO);
                  --
                END LOOP;
                --
              END IF;
              --
              ------------------------------
              -- CAMPO
              l_node_cod_campo_serv := fi_xml_node_completo (p_node_pai     => l_node_serv_col_coberturas,
                                                             p_document     => l_document                ,
                                                             p_nome_element => l_k_valPremio               ); -- valPremio
              --
              l_node_val_campo_serv := fi_xml_txt_node_completo (p_node_pai => l_node_cod_campo_serv          ,
                                                                 p_document => l_document                     ,
                                                                 p_texto    => l_tab_cob(cob_index).VAL_PREMIO);
              --
            END IF;
            --
          END LOOP;
          --
        END IF;
        --
        mx('F', 'pi_xml_corpo_cobs_serv');
        --
      END pi_xml_corpo_cobs_serv;
      --
      /* ------------------------------------------------------
      || pi_xml_corpo_cobs_basic
      */ ------------------------------------------------------
      --
      PROCEDURE pi_xml_corpo_cobs_basic
      IS
        --
        --
      BEGIN
        --
        mx('I', 'pi_xml_corpo_cobs_basic');
        --
        IF l_tab_cob.EXISTS(1) THEN
          --
          --l_node_cobs_basic := fi_xml_node_completo (p_node_pai     => l_node_cod_campo_header         ,--l_node_desc_pacotes -- revisar
          --                                         p_document     => l_document                      ,
          --                                         p_nome_element => 'colValoresCoberturasbasiccionais'); --> movido para pi_xml_header_cobs_basic
          -- chama somente uma vez no codigo
          --
          --
          FOR cob_index IN l_tab_cob.FIRST .. l_tab_cob.LAST LOOP
            --
            IF  'B' = fi_valida_agrupamento_cob (p_cod_cob  => l_tab_cob(cob_index).COD_COB,
                                                 p_cod_cia  => 1                           , -- constante ou variavel
                                                 p_cod_ramo => 231                         ) -- constante ou variavel
            THEN
              --
              mx('l_tab_cob(cob_index).NOM_COB', l_tab_cob(cob_index).NOM_COB);
              mx('l_tab_cob(cob_index).COD_COB', l_tab_cob(cob_index).COD_COB);
              --
              l_node_basic_col_coberturas := fi_xml_node_completo (p_node_pai     => l_node_cod_campo_header, --l_node_basic   ,
                                                                   p_document     => l_document             ,
                                                                   p_nome_element => l_k_colCoberturas        ); -- colCoberturas
              ------------------------------
              -- CAMPO
              l_cod_campo_basic := fi_xml_node_completo (p_node_pai     => l_node_basic_col_coberturas,
                                                         p_document     => l_document                 ,
                                                         p_nome_element => l_k_codCobertura             ); -- codCobertura
              --
              l_val_campo_basic := fi_xml_txt_node_completo (p_node_pai => l_cod_campo_basic           ,
                                                             p_document => l_document                  ,
                                                             p_texto    => l_tab_cob(cob_index).COD_COB);
              ------------------------------
              -- CAMPO
              l_cod_campo_basic := fi_xml_node_completo (p_node_pai     => l_node_basic_col_coberturas,
                                                         p_document     => l_document                 ,
                                                         p_nome_element => l_k_nomCobertura             ); -- nomCobertura
              --
              l_val_campo_basic := fi_xml_txt_node_completo (p_node_pai => l_cod_campo_basic,
                                                             p_document => l_document       ,
                                                             p_texto    => fp_valores_lista (1                          ,
                                                                                             'NOM_COB'                   ,
                                                                                             l_tab_cob(cob_index).NOM_COB,
                                                                                             l_tab_cob(cob_index).COD_COB));
              ------------------------------
              -- CAMPO
              l_cod_campo_basic := fi_xml_node_completo (p_node_pai     => l_node_basic_col_coberturas,
                                                         p_document     => l_document                 ,
                                                         p_nome_element => l_k_mcaSeleccionCob          ); -- mcaSeleccionCob
              --
              IF trn_k_global.ref_f_global('MCA_FLOTA_BATCH') = trn.SI
              THEN
                --
                l_val_campo_basic := fi_xml_txt_node_completo (p_node_pai => l_cod_campo_basic                 ,
                                                               p_document => l_document                        ,
                                                               p_texto    => fi_devuelve_seleccion_cob (p_cod_cia        => trn_k_global.ref_f_global('COD_CIA')         ,
                                                                                                        p_cod_ramo       => trn_k_global.ref_f_global('COD_RAMO')        ,
                                                                                                        p_num_cotizacion => trn_k_global.ref_f_global('NUM_POLIZA_GRUPO'),
                                                                                                        p_cod_cob        => l_tab_cob(cob_index).COD_COB                 ,
                                                                                                        p_cod_tip_vehi   => trn_k_global.ref_f_global('DVCOD_TIP_VEHI')));
                --
              ELSE
                --
                l_val_campo_basic := fi_xml_txt_node_completo (p_node_pai => l_cod_campo_basic                 ,
                                                               p_document => l_document                        ,
                                                               p_texto    => l_tab_cob(cob_index).MCA_SELEC_COB);
                --
              END IF;
              ------------------------------
              -- CAMPO
              l_cod_campo_basic := fi_xml_node_completo (p_node_pai     => l_node_basic_col_coberturas,
                                                         p_document     => l_document                 ,
                                                         p_nome_element => l_k_mcaModificaCapital       ); -- mcaModificaCapital
              --
              l_val_campo_basic := fi_xml_txt_node_completo (p_node_pai => l_cod_campo_basic                 ,
                                                             p_document => l_document                        ,
                                                             p_texto    => l_tab_cob(cob_index).MCA_MODIF_CAP);
              ------------------------------
              -- TRATA INFORMACOES DO LIMITE DE INDENIZACAO
              --
              l_tab_val_lim_inde := l_tab_cob(cob_index).TAB_VAL_LIM_INDE;
              --
              -- valida se existe registros com limite de indenizacao
              IF l_tab_val_lim_inde.COUNT = trn.CERO THEN
                --
                ------------------------------
                -- CAMPO
                l_node_basic_indenizacao := fi_xml_node_completo (p_node_pai     => l_node_basic_col_coberturas,
                                                                  p_document     => l_document                 ,
                                                                  p_nome_element => l_k_valLimiteMaxIndenizacao  ); -- valLimiteMaxIndenizacao
                --
                --l_node_lim_max_inde := DBMS_XMLDOM.appendchild(l_node_col_cob,
                --                                                DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,
                --                                                                                                'valLimiteMaxIndenizacao')));
                --
              ELSE
                --
                FOR inde_index IN l_tab_val_lim_inde.FIRST .. l_tab_val_lim_inde.LAST LOOP
                  --
                  ------------------------------
                  -- NODE
                  l_node_basic_indenizacao := fi_xml_node_completo (p_node_pai     => l_node_basic_col_coberturas,
                                                                    p_document     => l_document                 ,
                                                                    p_nome_element => l_k_valLimiteMaxIndenizacao  ); -- valLimiteMaxIndenizacao
                  ------------------------------
                  -- CAMPO
                  l_cod_basic_indenizacao := fi_xml_node_completo (p_node_pai     => l_node_basic_indenizacao,
                                                                   p_document     => l_document              ,
                                                                   p_nome_element => l_k_codCampo              ); -- codCampo
                  --
                  l_val_basic_indenizacao := fi_xml_txt_node_completo (p_node_pai => l_cod_basic_indenizacao                 ,
                                                                       p_document => l_document                              ,
                                                                       p_texto    => l_tab_val_lim_inde(inde_index).COD_CAMPO);
                  ------------------------------
                  -- CAMPO
                  l_cod_basic_indenizacao := fi_xml_node_completo (p_node_pai     => l_node_basic_indenizacao,
                                                                   p_document     => l_document              ,
                                                                   p_nome_element => l_k_valCampo              ); -- valCampo
                  --
                  l_val_basic_indenizacao := fi_xml_txt_node_completo (p_node_pai => l_cod_basic_indenizacao                 ,
                                                                       p_document => l_document                              ,
                                                                       p_texto    => l_tab_val_lim_inde(inde_index).VAL_CAMPO);
                  ------------------------------
                  -- CAMPO
                  l_cod_basic_indenizacao := fi_xml_node_completo (p_node_pai     => l_node_basic_indenizacao,
                                                                   p_document     => l_document              ,
                                                                   p_nome_element => l_k_mcaValDefecto         ); -- mcaValDefecto
                  --
                  IF trn_k_global.ref_f_global('MCA_FLOTA_BATCH') = trn.SI
                  THEN
                    --
                    IF fi_devuelve_seleccion_cob (p_cod_cia        => trn_k_global.ref_f_global('COD_CIA')         ,
                                                  p_cod_ramo       => trn_k_global.ref_f_global('COD_RAMO')        ,
                                                  p_num_cotizacion => trn_k_global.ref_f_global('NUM_POLIZA_GRUPO'),
                                                  p_cod_cob        => l_tab_cob(cob_index).COD_COB                 ,
                                                  p_cod_tip_vehi   => trn_k_global.ref_f_global('DVCOD_TIP_VEHI')) = trn.SI
                       --
                       AND
                       --
                       fi_devuelve_seleccion_val_cob (p_cod_cia        => trn_k_global.ref_f_global('COD_CIA')         ,
                                                      p_cod_ramo       => trn_k_global.ref_f_global('COD_RAMO')        ,
                                                      p_num_cotizacion => trn_k_global.ref_f_global('NUM_POLIZA_GRUPO'),
                                                      p_cod_cob        => l_tab_cob(cob_index).COD_COB                 ,
                                                      p_cod_tip_vehi   => trn_k_global.ref_f_global('DVCOD_TIP_VEHI')) = l_tab_val_lim_inde(inde_index).VAL_CAMPO
                       --
                    THEN
                      --
                      l_val_basic_indenizacao := fi_xml_txt_node_completo (p_node_pai => l_cod_basic_indenizacao,
                                                                           p_document => l_document             ,
                                                                           p_texto    => trn.SI                 );
                      --
                    ELSE
                      --
                      l_val_basic_indenizacao := fi_xml_txt_node_completo (p_node_pai => l_cod_basic_indenizacao,
                                                                           p_document => l_document             ,
                                                                           p_texto    => trn.NO                 );
                    END IF;
                    --
                  ELSE
                    --
                    l_val_basic_indenizacao := fi_xml_txt_node_completo (p_node_pai => l_cod_basic_indenizacao                     ,
                                                                         p_document => l_document                                  ,
                                                                         p_texto    => l_tab_val_lim_inde(inde_index).MCA_VAL_DEFEC);
                    --
                  END IF;
                  --
                END LOOP;
                --
              END IF;
              ------------------------------
              -- TRATA LISTA DE ATRIBUTOS DA LISTA DA COBERTURA (DV) - LISTA DE LISTA
              --
              l_tab_atri_lista := l_tab_cob(cob_index).TAB_ATRI_LISTA;
              --
              ------------------------------
              -- CAMPO
              l_node_basic_col_atrib_lista := fi_xml_node_completo (p_node_pai     => l_node_basic_col_coberturas,
                                                                    p_document     => l_document                 ,
                                                                    p_nome_element => l_k_colAtributosLista        ); -- colAtributosLista
              --
              -- TRATA LISTA DE ATRIBUTOS DA LISTA DA COBERTURA (DV) - LISTA DE LISTA
              IF l_tab_atri_lista.EXISTS(1) THEN
                --
                FOR atri_lis_index IN l_tab_atri_lista.FIRST .. l_tab_atri_lista.LAST LOOP
                  --
                  l_tab_atri_cob := l_tab_atri_lista(atri_lis_index);
                  --
                  -- TRATA LISTA DA LISTA DA COBERTURA (LISTA DO DV)
                  IF l_tab_atri_cob.EXISTS(1) THEN
                    --
                    FOR atri_cob_index IN l_tab_atri_cob.FIRST .. l_tab_atri_cob.LAST LOOP
                      --
                      ------------------------------
                      -- NODE
                      l_node_basic_tip_atrib_cob := fi_xml_node_completo (p_node_pai     => l_node_basic_col_atrib_lista,
                                                                          p_document     => l_document                  ,
                                                                          p_nome_element => l_k_tipAtributoCob            ); -- tipAtributoCob
                      ------------------------------
                      -- CAMPO
                      l_cod_basic_tip_atrib_cob := fi_xml_node_completo (p_node_pai     => l_node_basic_tip_atrib_cob,
                                                                         p_document     => l_document                ,
                                                                         p_nome_element => l_k_codCampo                ); -- codCampo
                      --
                      l_val_basic_tip_atrib_cob := fi_xml_txt_node_completo (p_node_pai => l_cod_basic_tip_atrib_cob               ,
                                                                             p_document => l_document                              ,
                                                                             p_texto    => l_tab_atri_cob(atri_cob_index).COD_CAMPO);
                      ------------------------------
                      -- CAMPO
                      l_cod_basic_tip_atrib_cob := fi_xml_node_completo (p_node_pai     => l_node_basic_tip_atrib_cob,
                                                                         p_document     => l_document                ,
                                                                         p_nome_element => l_k_valCampo                ); -- valCampo
                      --
                      l_val_basic_tip_atrib_cob := fi_xml_txt_node_completo (p_node_pai => l_cod_basic_tip_atrib_cob               ,
                                                                             p_document => l_document                              ,
                                                                             p_texto    => l_tab_atri_cob(atri_cob_index).VAL_CAMPO);
                      ------------------------------
                      -- CAMPO
                      l_cod_basic_tip_atrib_cob := fi_xml_node_completo (p_node_pai     => l_node_basic_tip_atrib_cob,
                                                                         p_document     => l_document                ,
                                                                         p_nome_element => l_k_txtCampo                ); -- txtCampo
                      --
                      l_val_basic_tip_atrib_cob := fi_xml_txt_node_completo (p_node_pai => l_cod_basic_tip_atrib_cob               ,
                                                                             p_document => l_document                              ,
                                                                             p_texto    => l_tab_atri_cob(atri_cob_index).TXT_CAMPO);
                      ------------------------------
                      -- CAMPO
                      l_cod_basic_tip_atrib_cob := fi_xml_node_completo (p_node_pai     => l_node_basic_tip_atrib_cob,
                                                                         p_document     => l_document                ,
                                                                         p_nome_element => l_k_mcaSeleccionAtributo    ); -- mcaSeleccionAtributo -- mcaSeleccionAtributo
                      --
                      l_val_basic_tip_atrib_cob := fi_xml_txt_node_completo (p_node_pai => l_cod_basic_tip_atrib_cob               ,
                                                                             p_document => l_document                              ,
                                                                             p_texto    => l_tab_atri_cob(atri_cob_index).MCA_SELEC);
                      --
                    END LOOP;
                    --
                  END IF;
                  --
                END LOOP;
                --
              END IF;
              --
              ------------------------------
              -- TRATA LISTA DE FRANQUIA DA COBERTURA - LISTA DE LISTA
              l_tab_val_franq := l_tab_cob(cob_index).TAB_VAL_FRANQ;
              --
              -- TRATA LISTA DE FRANQUIA DA COBERTURA
              IF l_tab_val_franq.COUNT = trn.CERO THEN
                --
                ------------------------------
                -- CAMPO
                l_node_basic_val_franq := fi_xml_node_completo (p_node_pai     => l_node_basic_col_coberturas,
                                                                p_document     => l_document                 ,
                                                                p_nome_element => l_k_valFranquia              ); -- valFranquia
                --
              ELSE
                --
                FOR val_franq_index IN l_tab_val_franq.FIRST .. l_tab_val_franq.LAST LOOP
                  --
                  ------------------------------
                  -- NODE
                  l_cod_basic_val_franq := fi_xml_node_completo (p_node_pai     => l_node_basic_val_franq,
                                                                 p_document     => l_document            ,
                                                                 p_nome_element => l_k_valFranquia         ); -- valFranquia
                  ------------------------------
                  -- CAMPO
                  l_cod_basic_val_franq := fi_xml_node_completo (p_node_pai     => l_node_basic_tip_atrib_cob,
                                                                 p_document     => l_document                ,
                                                                 p_nome_element => l_k_codCampo                ); -- codCampo
                  --
                  l_val_basic_val_franq := fi_xml_txt_node_completo (p_node_pai => l_cod_basic_val_franq                     ,
                                                                     p_document => l_document                                ,
                                                                     p_texto    => l_tab_val_franq(val_franq_index).COD_CAMPO);
                  --
                  IF l_tab_val_franq(val_franq_index).TXT_CAMPO IS NOT NULL THEN
                    --
                    ------------------------------
                    -- CAMPO
                    l_cod_basic_val_franq := fi_xml_node_completo (p_node_pai     => l_node_basic_tip_atrib_cob,
                                                                   p_document     => l_document                ,
                                                                   p_nome_element => l_k_txtCampo                ); -- txtCampo
                    --
                    l_val_basic_val_franq := fi_xml_txt_node_completo (p_node_pai => l_cod_basic_val_franq                     ,
                                                                       p_document => l_document                                ,
                                                                       p_texto    => l_tab_val_franq(val_franq_index).TXT_CAMPO);
                    --
                  END IF;
                  --
                  ------------------------------
                  -- CAMPO
                  l_cod_basic_val_franq := fi_xml_node_completo (p_node_pai     => l_node_basic_tip_atrib_cob,
                                                                 p_document     => l_document                ,
                                                                 p_nome_element => l_k_valCampo                ); -- valCampo
                  --
                  l_val_basic_val_franq := fi_xml_txt_node_completo (p_node_pai => l_cod_basic_val_franq                     ,
                                                                     p_document => l_document                                ,
                                                                     p_texto    => l_tab_val_franq(val_franq_index).VAL_CAMPO);
                  --
                END LOOP;
                --
              END IF;
              --
              ------------------------------
              -- CAMPO
              l_cod_campo_basic := fi_xml_node_completo (p_node_pai     => l_node_basic_col_coberturas,
                                                         p_document     => l_document                 ,
                                                         p_nome_element => l_k_valPremio                ); -- valPremio
              --
              l_val_campo_basic := fi_xml_txt_node_completo (p_node_pai => l_cod_campo_basic              ,
                                                             p_document => l_document                     ,
                                                             p_texto    => l_tab_cob(cob_index).VAL_PREMIO);
              --
            END IF;
            --
          END LOOP;
          --
        END IF;
        --
        mx('F', 'pi_xml_corpo_cobs_basic');
        --
      END pi_xml_corpo_cobs_basic;
      --
      /* ------------------------------------------------------
      || pi_xml_casco
      */ ------------------------------------------------------
      --
      PROCEDURE pi_xml_casco
      IS
        --
        --
      BEGIN
        --
        mx('I','pi_xml_casco');
        --
        IF l_tab_cob_cas.EXISTS(1) THEN
          --
          ------------------------------
          -- NODE
          l_node_casco_col_coberturas := fi_xml_node_completo (p_node_pai     => l_node_cobs_agrup   ,
                                                               p_document     => l_document          ,
                                                               p_nome_element => l_k_colCoberturasCasco); -- colCoberturasCasco
          --
          FOR cob_index IN l_tab_cob_cas.FIRST .. l_tab_cob_cas.LAST LOOP
            --
            --
            mx('l_tab_cob_cas(cob_index).NOM_COB', l_tab_cob_cas(cob_index).NOM_COB);
            mx('l_tab_cob_cas(cob_index).COD_COB', l_tab_cob_cas(cob_index).COD_COB);
            --
            mx('l_tab_cob_cas(cob_index).MCA_SELEC_COB', l_tab_cob_cas(cob_index).MCA_SELEC_COB);
            mx('l_tab_cob_cas(cob_index).MCA_MODIF_CAP', l_tab_cob_cas(cob_index).MCA_MODIF_CAP);
            mx('l_tab_cob_cas(cob_index).VAL_PREMIO'   , l_tab_cob_cas(cob_index).VAL_PREMIO   );
            --
            ------------------------------
            -- NODE
            l_node_casco := fi_xml_node_completo (p_node_pai     => l_node_casco_col_coberturas,
                                                  p_document     => l_document                 ,
                                                  p_nome_element => l_k_coberturasCasco          ); -- coberturasCasco

            ------------------------------
            -- CAMPO
            l_cod_casco := fi_xml_node_completo (p_node_pai     => l_node_casco  ,
                                                 p_document     => l_document    ,
                                                 p_nome_element => l_k_codCobertura); -- codCobertura
            --
            l_val_casco := fi_xml_txt_node_completo (p_node_pai => l_cod_casco                     ,
                                                     p_document => l_document                      ,
                                                     p_texto    => l_tab_cob_cas(cob_index).COD_COB);
            ------------------------------
            -- CAMPO
            l_cod_casco := fi_xml_node_completo (p_node_pai     => l_node_casco  ,
                                                 p_document     => l_document    ,
                                                 p_nome_element => l_k_nomCobertura); -- nomCobertura
            --
            l_val_casco := fi_xml_txt_node_completo (p_node_pai => l_cod_casco,
                                                     p_document => l_document ,
                                                     p_texto    => fp_valores_lista(l_rec_lista_pac.COD_CIA         ,
                                                                                    'NOM_COB'                       ,
                                                                                    l_tab_cob_cas(cob_index).nom_cob,
                                                                                    l_tab_cob_cas(cob_index).COD_COB));
            ------------------------------
            -- CAMPO
            l_cod_casco := fi_xml_node_completo (p_node_pai     => l_node_casco     ,
                                                 p_document     => l_document       ,
                                                 p_nome_element => l_k_mcaSeleccionCob); -- mcaSeleccionCob
            --
            IF trn_k_global.ref_f_global('MCA_FLOTA_BATCH') = trn.SI
            THEN
            --

              --
              --@mx('fi_devuelve_seleccion_cob', fi_devuelve_seleccion_cob (p_cod_cia        => trn_k_global.ref_f_global('COD_CIA')         ,
              --@                                                           p_cod_ramo       => trn_k_global.ref_f_global('COD_RAMO')        ,
              --@                                                           p_num_cotizacion => trn_k_global.ref_f_global('NUM_POLIZA_GRUPO'),
              --@                                                           p_cod_cob        => l_tab_cob_cas(cob_index).COD_COB             ,
              --@                                                           p_cod_tip_vehi   => trn_k_global.ref_f_global('DVCOD_TIP_VEHI')));
              --
              l_val_casco := fi_xml_txt_node_completo (p_node_pai => l_cod_casco               ,
                                                       p_document => l_document                ,
                                                       p_texto    => fi_devuelve_seleccion_cob (p_cod_cia        => trn_k_global.ref_f_global('COD_CIA')         ,
                                                                                                p_cod_ramo       => trn_k_global.ref_f_global('COD_RAMO')        ,
                                                                                                p_num_cotizacion => trn_k_global.ref_f_global('NUM_POLIZA_GRUPO'),
                                                                                                p_cod_cob        => l_tab_cob_cas(cob_index).COD_COB             ,
                                                                                                p_cod_tip_vehi   => trn_k_global.ref_f_global('DVCOD_TIP_VEHI')));
            ELSE
              --
              l_val_casco := fi_xml_txt_node_completo (p_node_pai => l_cod_casco                           ,
                                                       p_document => l_document                            ,
                                                       p_texto    => l_tab_cob_cas(cob_index).MCA_SELEC_COB);
              --
            END IF;
            ------------------------------
            -- CAMPO
            l_cod_casco := fi_xml_node_completo (p_node_pai     => l_node_casco        ,
                                                 p_document     => l_document          ,
                                                 p_nome_element => l_k_mcaModificaCapital); -- mcaModificaCapital
            --
            l_val_casco := fi_xml_txt_node_completo (p_node_pai => l_cod_casco                           ,
                                                     p_document => l_document                            ,
                                                     p_texto    => l_tab_cob_cas(cob_index).MCA_MODIF_CAP);
            --
          END LOOP;
          --
          -- TRATA INFORMACOES DO LIMITE DE INDENIZACAO
          --
          ------------------------------
          -- NODE
          l_node_casco_indenizacao := NULL;
          --
          l_node_casco_indenizacao := fi_xml_node_completo (p_node_pai     => l_node_cobs_agrup          , --l_node_casco_col_coberturas,
                                                            p_document     => l_document                 ,
                                                            p_nome_element => l_k_valLimiteMaxIndenizacao  ); -- valLimiteMaxIndenizacao
          --
          FOR cob_index IN l_tab_cob_cas.FIRST .. l_tab_cob_cas.LAST LOOP
            --
            mx('-','cob_index 2'); -- mbaruch
            l_tab_val_lim_inde := NULL;
            --
            l_tab_val_lim_inde := l_tab_cob_cas(cob_index).TAB_VAL_LIM_INDE;
            --
            IF l_tab_cob_cas(cob_index).MCA_SELEC_COB = trn.SI THEN
              --
              FOR inde_index IN l_tab_val_lim_inde.FIRST .. l_tab_val_lim_inde.LAST LOOP
                --
                mx('-', l_tab_val_lim_inde(inde_index).VAL_CAMPO); -- mbaruch
                ------------------------------
                -- CAMPO
                l_cod_casco_indenizacao := fi_xml_node_completo (p_node_pai     => l_node_casco_indenizacao,
                                                                 p_document     => l_document              ,
                                                                 p_nome_element => l_k_codCampo              ); -- codCampo
                --
                l_val_casco_indenizacao := fi_xml_txt_node_completo (p_node_pai => l_cod_casco_indenizacao                 ,
                                                                     p_document => l_document                              ,
                                                                     p_texto    => l_tab_val_lim_inde(inde_index).COD_CAMPO);
                ------------------------------
                ---- CAMPO
                --l_cod_casco_indenizacao := fi_xml_node_completo (p_node_pai     => l_node_casco_indenizacao,
                --                                                 p_document     => l_document              ,
                --                                                 p_nome_element => 'codCampo'              );
                ----
                --l_val_casco_indenizacao := fi_xml_txt_node_completo (p_node_pai => l_cod_casco_indenizacao                 ,
                --                                                     p_document => l_document                              ,
                --                                                     p_texto    => l_tab_val_lim_inde(inde_index).COD_CAMPO);
                ------------------------------
                -- CAMPO
                l_cod_casco_indenizacao := fi_xml_node_completo (p_node_pai     => l_node_casco_indenizacao,
                                                                 p_document     => l_document              ,
                                                                 p_nome_element => l_k_valCampo              ); -- valCampo
                --
                l_val_casco_indenizacao := fi_xml_txt_node_completo (p_node_pai => l_cod_casco_indenizacao                 ,
                                                                     p_document => l_document                              ,
                                                                     p_texto    => l_tab_val_lim_inde(inde_index).VAL_CAMPO);
                ------------------------------
                -- CAMPO
                l_cod_casco_indenizacao := fi_xml_node_completo (p_node_pai     => l_node_casco_indenizacao,
                                                                 p_document     => l_document              ,
                                                                 p_nome_element => l_k_mcaValDefecto         ); -- mcaValDefecto
                --
                IF trn_k_global.ref_f_global('MCA_FLOTA_BATCH') = trn.SI
                THEN
                  --
                  IF fi_devuelve_seleccion_cob (p_cod_cia        => trn_k_global.ref_f_global('COD_CIA')         ,
                                                p_cod_ramo       => trn_k_global.ref_f_global('COD_RAMO')        ,
                                                p_num_cotizacion => trn_k_global.ref_f_global('NUM_POLIZA_GRUPO'),
                                                p_cod_cob        => l_tab_cob_cas(cob_index).COD_COB                 ,
                                                p_cod_tip_vehi   => trn_k_global.ref_f_global('DVCOD_TIP_VEHI')) = trn.SI
                  --
                  AND
                  --
                  fi_devuelve_seleccion_val_cob (p_cod_cia        => trn_k_global.ref_f_global('COD_CIA')         ,
                                                 p_cod_ramo       => trn_k_global.ref_f_global('COD_RAMO')        ,
                                                 p_num_cotizacion => trn_k_global.ref_f_global('NUM_POLIZA_GRUPO'),
                                                 p_cod_cob        => l_tab_cob_cas(cob_index).COD_COB                 ,
                                                 p_cod_tip_vehi   => trn_k_global.ref_f_global('DVCOD_TIP_VEHI')) = l_tab_val_lim_inde(inde_index).VAL_CAMPO
                  --
                  THEN
                    --
                    l_val_casco_indenizacao := fi_xml_txt_node_completo (p_node_pai => l_cod_casco_indenizacao,
                                                                         p_document => l_document             ,
                                                                         p_texto    => trn.SI                 );
                    --
                  ELSE
                    --
                    l_val_casco_indenizacao := fi_xml_txt_node_completo (p_node_pai => l_cod_casco_indenizacao,
                                                                         p_document => l_document             ,
                                                                         p_texto    => trn.NO                 );
                    --
                  END IF;
                  --
                ELSE
                  --
                  l_val_casco_indenizacao := fi_xml_txt_node_completo (p_node_pai => l_cod_casco_indenizacao                     ,
                                                                       p_document => l_document                                  ,
                                                                       p_texto    => l_tab_val_lim_inde(inde_index).MCA_VAL_DEFEC);
                  --
                END IF;
                --
              END LOOP;
              --
            END IF;
            --
          END LOOP;
          --
          -- TRATA LISTA DE ATRIBUTOS DA LISTA DA COBERTURA
          --
          ------------------------------
          -- NODE
          l_node_casco_col_atrib_lista := fi_xml_node_completo (p_node_pai     => l_node_cobs_agrup          , --l_node_casco_col_coberturas,
                                                                p_document     => l_document                 ,
                                                                p_nome_element => l_k_colAtributosLista        ); -- colAtributosLista
          --
          FOR cob_index IN l_tab_cob_cas.FIRST .. l_tab_cob_cas.LAST LOOP
            --
            l_tab_atri_lista := l_tab_cob_cas(cob_index).TAB_ATRI_LISTA;
            --
            IF l_tab_cob_cas(cob_index).MCA_SELEC_COB = trn.SI AND
               l_tab_atri_lista.COUNT <> trn.CERO
            THEN
              --
              FOR atri_lis_index IN l_tab_atri_lista.FIRST .. l_tab_atri_lista.LAST LOOP
                --
                l_tab_atri_cob := l_tab_atri_lista(atri_lis_index);
                --
                -- TRATA LISTA DA LISTA DA COBERTURA (LISTA DO DV)
                IF l_tab_atri_cob.EXISTS(1) THEN
                  --
                  FOR atri_cob_index IN l_tab_atri_cob.FIRST .. l_tab_atri_cob.LAST LOOP
                    ------------------------------
                    -- NODE
                    l_node_casco_tip_atrib_cob := fi_xml_node_completo (p_node_pai     => l_node_casco_col_atrib_lista,
                                                                        p_document     => l_document                  ,
                                                                        p_nome_element => l_k_tipAtributoCob            ); -- tipAtributoCob
                    ------------------------------
                    -- CAMPO
                    l_cod_casco_tip_atrib_cob := fi_xml_node_completo (p_node_pai     => l_node_casco_tip_atrib_cob,
                                                                       p_document     => l_document                ,
                                                                       p_nome_element => l_k_codCampo                ); -- codCampo
                    --
                    l_val_casco_tip_atrib_cob := fi_xml_txt_node_completo (p_node_pai => l_cod_casco_tip_atrib_cob               ,
                                                                           p_document => l_document                              ,
                                                                           p_texto    => l_tab_atri_cob(atri_cob_index).COD_CAMPO);
                    ------------------------------
                    -- CAMPO
                    l_cod_casco_tip_atrib_cob := fi_xml_node_completo (p_node_pai     => l_node_casco_tip_atrib_cob,
                                                                       p_document     => l_document                ,
                                                                       p_nome_element => l_k_valCampo                ); -- valCampo
                    --
                    l_val_casco_tip_atrib_cob := fi_xml_txt_node_completo (p_node_pai => l_cod_casco_tip_atrib_cob               ,
                                                                           p_document => l_document                              ,
                                                                           p_texto    => l_tab_atri_cob(atri_cob_index).VAL_CAMPO);
                    ------------------------------
                    -- CAMPO
                    l_cod_casco_tip_atrib_cob := fi_xml_node_completo (p_node_pai     => l_node_casco_tip_atrib_cob,
                                                                       p_document     => l_document                ,
                                                                       p_nome_element => l_k_txtCampo                ); -- txtCampo
                    --
                    l_val_casco_tip_atrib_cob := fi_xml_txt_node_completo (p_node_pai => l_cod_casco_tip_atrib_cob               ,
                                                                           p_document => l_document                              ,
                                                                           p_texto    => l_tab_atri_cob(atri_cob_index).TXT_CAMPO);
                    ------------------------------
                    -- CAMPO
                    l_cod_casco_tip_atrib_cob := fi_xml_node_completo (p_node_pai     => l_node_casco_tip_atrib_cob,
                                                                       p_document     => l_document                ,
                                                                       p_nome_element => l_k_mcaSeleccionAtributo    ); -- mcaSeleccionAtributo
                    --
                    IF trn_k_global.ref_f_global('MCA_FLOTA_BATCH') = trn.SI
                    THEN
                    --
                      --@mx('fi_devuelve_seleccion_cob', fi_devuelve_seleccion_cob (p_cod_cia        => trn_k_global.ref_f_global('COD_CIA')         ,
                      --@                                                                   p_cod_ramo       => trn_k_global.ref_f_global('COD_RAMO')        ,
                      --@                                                                   p_num_cotizacion => trn_k_global.ref_f_global('NUM_POLIZA_GRUPO'),
                      --@                                                                   p_cod_cob        => l_tab_cob_cas(cob_index).COD_COB             ,
                      --@                                                                   p_cod_tip_vehi   => trn_k_global.ref_f_global('DVCOD_TIP_VEHI')));
                      --
                      IF fi_devuelve_seleccion_cob (p_cod_cia        => trn_k_global.ref_f_global('COD_CIA')         ,
                                                    p_cod_ramo       => trn_k_global.ref_f_global('COD_RAMO')        ,
                                                    p_num_cotizacion => trn_k_global.ref_f_global('NUM_POLIZA_GRUPO'),
                                                    p_cod_cob        => l_tab_cob_cas(cob_index).COD_COB             ,
                                                    p_cod_tip_vehi   => trn_k_global.ref_f_global('DVCOD_TIP_VEHI')) = trn.SI
                        --
                        AND
                        --
                        fi_devuelve_seleccion_val_cob (p_cod_cia        => trn_k_global.ref_f_global('COD_CIA')         ,
                                                       p_cod_ramo       => trn_k_global.ref_f_global('COD_RAMO')        ,
                                                       p_num_cotizacion => trn_k_global.ref_f_global('NUM_POLIZA_GRUPO'),
                                                       p_cod_cob        => l_tab_cob_cas(cob_index).COD_COB             ,
                                                       p_cod_tip_vehi   => trn_k_global.ref_f_global('DVCOD_TIP_VEHI')) = l_tab_atri_cob(atri_cob_index).VAL_CAMPO
                        --
                      THEN
                        --
                        l_val_casco_tip_atrib_cob := fi_xml_txt_node_completo (p_node_pai => l_cod_casco_tip_atrib_cob,
                                                                               p_document => l_document               ,
                                                                               p_texto    => trn.SI                   );
                        --
                      ELSE
                        --
                        l_val_casco_tip_atrib_cob := fi_xml_txt_node_completo (p_node_pai => l_cod_casco_tip_atrib_cob,
                                                                               p_document => l_document               ,
                                                                               p_texto    => trn.NO                   );
                        --
                      END IF;
                      --
                    ELSE
                      --
                      l_val_casco_tip_atrib_cob := fi_xml_txt_node_completo (p_node_pai => l_cod_casco_tip_atrib_cob               ,
                                                                             p_document => l_document                              ,
                                                                             p_texto    => l_tab_atri_cob(atri_cob_index).MCA_SELEC);
                      --
                    END IF;
                    --
                  END LOOP;
                  --
                END IF;
                --
              END LOOP;
              --
            END IF;
            --
          END LOOP;
          --
          -- TRATA LISTA DE FRANQUIA DA COBERTURA
          --
          ------------------------------
          -- NODE
          l_node_casco_val_franq := fi_xml_node_completo (p_node_pai     => l_node_cobs_agrup          , --l_node_casco_col_coberturas,
                                                          p_document     => l_document                 ,
                                                          p_nome_element => l_k_valFranquia              ); -- valFranquia
          --
          FOR cob_index IN l_tab_cob_cas.FIRST .. l_tab_cob_cas.LAST LOOP
            --
            l_tab_val_franq := l_tab_cob_cas(cob_index).TAB_VAL_FRANQ;
            --
            -- TRATA LISTA DE FRANQUIA DA COBERTURA
            --
            IF l_tab_cob_cas(cob_index).MCA_SELEC_COB  = trn.SI      AND
               l_tab_val_franq.COUNT                  <> trn.CERO
            THEN
              --
              FOR val_franq_index IN l_tab_val_franq.FIRST .. l_tab_val_franq.LAST LOOP
                --
                ------------------------------
                -- CAMPO
                l_cod_casco_val_franq := fi_xml_node_completo (p_node_pai     => l_node_casco_val_franq,
                                                               p_document     => l_document            ,
                                                               p_nome_element => l_k_codCampo            ); -- codCampo
                --
                l_val_casco_val_franq := fi_xml_txt_node_completo (p_node_pai => l_cod_casco_val_franq                     ,
                                                                   p_document => l_document                                ,
                                                                   p_texto    => l_tab_val_franq(val_franq_index).COD_CAMPO);

                --
                IF l_tab_val_franq(val_franq_index).TXT_CAMPO IS NOT NULL
                THEN
                  --
                  ------------------------------
                  -- CAMPO
                  l_cod_casco_val_franq := fi_xml_node_completo (p_node_pai     => l_node_casco_val_franq,
                                                                 p_document     => l_document            ,
                                                                 p_nome_element => l_k_txtCampo            ); -- txtCampo
                  --
                  l_val_casco_val_franq := fi_xml_txt_node_completo (p_node_pai => l_cod_casco_val_franq                     ,
                                                                     p_document => l_document                                ,
                                                                     p_texto    => l_tab_val_franq(val_franq_index).TXT_CAMPO);
                  --
                END IF;
                --
                ------------------------------
                -- CAMPO
                l_cod_casco_val_franq := fi_xml_node_completo (p_node_pai     => l_node_casco_val_franq,
                                                               p_document     => l_document            ,
                                                               p_nome_element => l_k_valCampo            ); -- valCampo
                --
                l_val_casco_val_franq := fi_xml_txt_node_completo (p_node_pai => l_cod_casco_val_franq                     ,
                                                                   p_document => l_document                                ,
                                                                   p_texto    => l_tab_val_franq(val_franq_index).VAL_CAMPO);
                --
              END LOOP;
              --
            END IF;
            --
          END LOOP;
          --
          -- TRATA VALOR DO PREMIO
          --
          ------------------------------
          -- NODE
          l_node_casco_val_premio := fi_xml_node_completo (p_node_pai     => l_node_cobs_agrup, --l_node_casco_col_coberturas,
                                                           p_document     => l_document       ,
                                                           p_nome_element => l_k_valPremio      ); -- valPremio
          --
          FOR cob_index IN l_tab_cob_cas.FIRST .. l_tab_cob_cas.LAST LOOP
            --
            IF l_tab_cob_cas(cob_index).MCA_SELEC_COB = trn.SI THEN
              --
              ------------------------------
              -- CAMPO
              --l_cod_casco_val_franq := fi_xml_node_completo (p_node_pai     => l_node_casco_val_premio,
              --                                               p_document     => l_document             ,
              --                                               p_nome_element => 'valCampo'             );
              --
              l_val_casco_val_premio := fi_xml_txt_node_completo (p_node_pai => l_node_casco_val_premio            ,
                                                                  p_document => l_document                         ,
                                                                  p_texto    => l_tab_cob_cas(cob_index).VAL_PREMIO);
              --
            END IF;
            --
          END LOOP;
          --
        END IF;
        --
        mx('F','pi_xml_casco');
        --
      END pi_xml_casco;
      --
    BEGIN
      --
      mx('I','p_gerar_xml_detalhe_pkt_auto3');
      --
      l_retorno_xml_pac   := p_retorno_pacote;
      l_document          := DBMS_XMLDOM.newdomdocument;
      l_node_desc_pacotes := fi_xml_make_node(p_xml_element => l_document);
      --
      l_eh_3_pacotes := NVL(fp_devuelve_n('tres_pacotes'), 0) > 0;
      l_cod_agt      := trn_k_global.ref_f_global('cod_agt'); -- 2.84
      --
      LOOP
        FETCH l_retorno_xml_pac
         INTO l_rec_lista_pac;
        --
        EXIT WHEN l_retorno_xml_pac%NOTFOUND;
        --abre dados
        --
        g_val_clave_formula := l_rec_lista_pac.VAL_CLAVE_FORMULA;
        --
        IF l_eh_3_pacotes THEN
          -- 2.14
          pp_asigna('cod_agt', l_cod_agt); -- 2.84
          --
          ea_k_definicion_pacote.p_carga_coberturas(l_rec_lista_pac.NUM_SIMULACION); --2.14
          --
        END IF; --2.14
        --
        mx('g_val_clave_formula', g_val_clave_formula);
        --
        -- MONTA OS HEADERS
        --
        mx('I', 'MONTA XML COBS ADICIONAIS E SERVICOS');
          --
          pi_xml_monta_header; -- montar o header fixo
          pi_xml_header_cobs_adi;
          pi_xml_header_cobs_serv;
          pi_xml_header_cobs_agrup;
          pi_xml_header_cobs_basic;
          --
        mx('F', 'MONTA XML COBS ADICIONAIS E SERVICOS');
        --
        -- BUSCA TYPE DE COBERTURAS AGRUPADAS DE CASCO
        --
        mx('I', 'TRATA INFORMACEOS DAS COBERTURAS AGRUPADAS DE CASCO');
        --
        l_tab_cob_cas := NULL;
        --
        l_tab_cob_cas := fp_bus_coberturas_agrupadas(l_rec_lista_pac.COD_CIA,
                                                     l_rec_lista_pac.COD_RAMO,
                                                     l_rec_lista_pac.NUM_COTIZACION,
                                                     l_rec_lista_pac.NUM_SIMULACION,
                                                     l_rec_lista_pac.COD_PACOTE,
                                                     l_rec_lista_pac.VAL_VEICULO,
                                                     l_rec_lista_pac.FEC_VALIDEZ_TARIFA,
                                                     l_rec_lista_pac.VAL_CLAVE_FORMULA,
                                                     g_k_cod_campo_cob_casco,
                                                     trn.NO,
                                                     'P');
        --
        -- TRATA INFORMACEOS DAS COBERTURAS AGRUPADAS DE CASCO
        pi_xml_casco;
        --
        --
        pi_xml_corpo_cobs_adi;
        pi_xml_corpo_cobs_serv;
        pi_xml_corpo_cobs_basic;
        --
        mx('F', 'TRATA INFORMACEOS DAS COBERTURAS AGRUPADAS DE CASCO');
        --

        --
        -- BUSCA TYPE DE COBERTURAS AGRUPADAS GRATUITAS
        --
        --
        mx('I', 'TRATA INFORMACEOS DAS COBERTURAS AGRUPADAS GRATUITAS - SECAO B');
        --
        l_tab_cob := NULL;
        --
        pp_asigna('cod_agt', l_cod_agt); -- 2.84
        l_tab_cob := fp_bus_coberturas_agrupadas(l_rec_lista_pac.COD_CIA,
                                                 l_rec_lista_pac.COD_RAMO,
                                                 l_rec_lista_pac.NUM_COTIZACION,
                                                 l_rec_lista_pac.NUM_SIMULACION,
                                                 l_rec_lista_pac.COD_PACOTE,
                                                 l_rec_lista_pac.VAL_VEICULO,
                                                 l_rec_lista_pac.FEC_VALIDEZ_TARIFA,
                                                 l_rec_lista_pac.VAL_CLAVE_FORMULA,
                                                 g_k_cod_campo_cob_agrupada,
                                                 trn.SI,
                                                 'P');
        pi_xml_corpo_cobs_adi;
        pi_xml_corpo_cobs_serv;
        pi_xml_corpo_cobs_basic;
        --
        mx('F', 'TRATA INFORMACEOS DAS COBERTURAS AGRUPADAS GRATUITAS - SECAO B');
        --
        -- BUSCA TYPE DE COBERTURAS AGRUPADAS - v1.63 - ini
        --
        mx('I', 'TRATA INFORMACEOS DAS COBERTURAS AGRUPADAS CONTRATADAS - SECAO C');
        --
        pp_asigna('cod_agt', l_cod_agt); -- 2.84
        l_tab_cob := fp_bus_coberturas_agrupadas(l_rec_lista_pac.COD_CIA,
                                                 l_rec_lista_pac.COD_RAMO,
                                                 l_rec_lista_pac.NUM_COTIZACION,
                                                 l_rec_lista_pac.NUM_SIMULACION,
                                                 l_rec_lista_pac.COD_PACOTE,
                                                 l_rec_lista_pac.VAL_VEICULO,
                                                 l_rec_lista_pac.FEC_VALIDEZ_TARIFA,
                                                 l_rec_lista_pac.VAL_CLAVE_FORMULA,
                                                 g_k_cod_campo_cob_agrupada,
                                                 trn.NO,
                                                 'P');
        pi_xml_corpo_cobs_adi; -- xml corpo
        pi_xml_corpo_cobs_serv;
        pi_xml_corpo_cobs_basic;
        --
        mx('F', 'TRATA INFORMACEOS DAS COBERTURAS AGRUPADAS CONTRATADAS - SECAO C'); -- v1.63 fim
        --
        -- BUSCA TYPE DE COBERTURAS CONTRATADAS
        --
        mx('I', 'TRATA INFORMACEOS DAS COBERTURAS CONTRATADAS - SECAO D');
        --
        l_tab_cob := fp_bus_coberturas(l_rec_lista_pac.COD_CIA,
                                       l_rec_lista_pac.COD_RAMO,
                                       l_rec_lista_pac.NUM_COTIZACION,
                                       l_rec_lista_pac.NUM_SIMULACION,
                                       l_rec_lista_pac.COD_PACOTE,
                                       l_rec_lista_pac.COD_TARIFA,
                                       l_rec_lista_pac.VAL_CLAVE_FORMULA,
                                       'P');
        pi_xml_corpo_cobs_adi; -- xml corpo
        pi_xml_corpo_cobs_serv;
        pi_xml_corpo_cobs_basic;
        --
        mx('F', 'TRATA INFORMACEOS DAS COBERTURAS CONTRATADAS - SECAO D');
        --
        -- BUSCA TYPE DE COBERTURAS ADICIONAIS
        --
        --mx('I', 'TRATA INFORMACEOS DAS COBERTURAS SERVICOS 1302 1301 1304 - SECAO E');
        ----
        --l_tab_cob := fp_bus_coberturas(l_rec_lista_pac.COD_CIA,
        --                               l_rec_lista_pac.COD_RAMO,
        --                               l_rec_lista_pac.NUM_COTIZACION,
        --                               l_rec_lista_pac.NUM_SIMULACION,
        --                               l_rec_lista_pac.COD_PACOTE,
        --                               l_rec_lista_pac.COD_TARIFA,
        --                               l_rec_lista_pac.VAL_CLAVE_FORMULA,
        --                               'A');
        --pi_xml_corpo_cobs_adi;
        --pi_xml_corpo_cobs_serv;
        --pi_xml_corpo_cobs_basic;
        ----
        --mx('F', 'TRATA INFORMACEOS DAS COBERTURAS SERVICOS 1302 1301 1304 - SECAO E');
        --
        -- BUSCA TYPE DE COBERTURAS CONTRATADAS
        --
        --mx('I', 'TRATA INFORMACEOS DAS COBERTURAS CONTRATADAS - SECAO F');
        ----
        --l_tab_cob := fp_bus_coberturas(l_rec_lista_pac.COD_CIA,
        --                               l_rec_lista_pac.COD_RAMO,
        --                               l_rec_lista_pac.NUM_COTIZACION,
        --                               l_rec_lista_pac.NUM_SIMULACION,
        --                               l_rec_lista_pac.COD_PACOTE,
        --                               l_rec_lista_pac.COD_TARIFA,
        --                               l_rec_lista_pac.VAL_CLAVE_FORMULA,
        --                               'P');
        --pi_xml_corpo_cobs_adi; -- xml corpo
        --pi_xml_corpo_cobs_serv;
        --pi_xml_corpo_cobs_basic;
        ----
        --mx('F', 'TRATA INFORMACEOS DAS COBERTURAS CONTRATADAS - SECAO F');
        --
        -- BUSCA TYPE DE COBERTURAS ADICIONAIS
        --
        mx('I', 'TRATA INFORMACEOS DAS COBERTURAS ADICIONAIS - SECAO G');
        --
        l_tab_cob := fp_bus_coberturas(l_rec_lista_pac.COD_CIA,
                                       l_rec_lista_pac.COD_RAMO,
                                       l_rec_lista_pac.NUM_COTIZACION,
                                       l_rec_lista_pac.NUM_SIMULACION,
                                       l_rec_lista_pac.COD_PACOTE,
                                       l_rec_lista_pac.COD_TARIFA,
                                       l_rec_lista_pac.VAL_CLAVE_FORMULA,
                                       'A');
        pi_xml_corpo_cobs_adi; -- xml corpo
        pi_xml_corpo_cobs_serv;
        pi_xml_corpo_cobs_basic;
        --
        mx('F', 'TRATA INFORMACEOS DAS COBERTURAS ADICIONAIS - SECAO G');
        --
        --TRATAMENTO PARA COBERTURAS AGRUPADAS ADICIONAIS PARA ENDOSSO
        --
        mx('I', 'TRATAMENTO PARA COBERTURAS AGRUPADAS ADICIONAIS PARA ENDOSSO - SECAO H');
        --
        IF g_tip_mvto_batch = g_k_tip_mvto_batch_endosso THEN
          --
          mx('I', 'TRATA INFORMACEOS DAS COBERTURAS AGRUPADAS DE CASCO ADICIONAIS PARA ENDOSSO - SECAO H');
          --
          -- BUSCA TYPE DE COBERTURAS AGRUPADAS DE CASCO ADICIONAIS PARA ENDOSSO
          --
          l_tab_cob_cas := fp_bus_coberturas_agrupadas(l_rec_lista_pac.COD_CIA,
                                                       l_rec_lista_pac.COD_RAMO,
                                                       l_rec_lista_pac.NUM_COTIZACION,
                                                       l_rec_lista_pac.NUM_SIMULACION,
                                                       l_rec_lista_pac.COD_PACOTE,
                                                       l_rec_lista_pac.VAL_VEICULO,
                                                       l_rec_lista_pac.FEC_VALIDEZ_TARIFA,
                                                       l_rec_lista_pac.VAL_CLAVE_FORMULA,
                                                       g_k_cod_campo_cob_casco,
                                                       trn.NO,
                                                       'A');
          --
          pi_xml_corpo_cobs_adi; -- xml corpo
          pi_xml_corpo_cobs_serv;
          pi_xml_corpo_cobs_basic;
          --
        END IF;
        --
        mx('F', 'TRATA INFORMACEOS DAS COBERTURAS AGRUPADAS DE CASCO ADICIONAIS PARA ENDOSSO - SECAO H');
        --
        -- BUSCA TYPE DE COBERTURAS AGRUPADAS GRATUITAS ADICIONAIS PARA ENDOSSO
        --
        mx('I', 'TRATA INFORMACEOS DAS COBERTURAS AGRUPADAS GRATUITAS ADICIONAIS PARA ENDOSSO - SECAO I');
        --
        l_tab_cob := NULL;
        --
        l_tab_cob := fp_bus_coberturas_agrupadas(l_rec_lista_pac.COD_CIA,
                                                 l_rec_lista_pac.COD_RAMO,
                                                 l_rec_lista_pac.NUM_COTIZACION,
                                                 l_rec_lista_pac.NUM_SIMULACION,
                                                 l_rec_lista_pac.COD_PACOTE,
                                                 l_rec_lista_pac.VAL_VEICULO,
                                                 l_rec_lista_pac.FEC_VALIDEZ_TARIFA,
                                                 l_rec_lista_pac.VAL_CLAVE_FORMULA,
                                                 g_k_cod_campo_cob_agrupada,
                                                 trn.SI,
                                                 'A');
        --
        pi_xml_corpo_cobs_adi; -- xml corpo
        pi_xml_corpo_cobs_serv;
        pi_xml_corpo_cobs_basic;
        --
        mx('F', 'TRATA INFORMACEOS DAS COBERTURAS AGRUPADAS GRATUITAS ADICIONAIS PARA ENDOSSO - SECAO I');
        --
        -- BUSCA TYPE DE COBERTURAS AGRUPADAS
        --
        mx('I', 'TRATA INFORMACEOS DAS COBERTURAS AGRUPADAS ADICIONAIS - SECAO J');
        --
        pp_asigna('cod_agt', l_cod_agt); -- 2.84
        l_tab_cob := fp_bus_coberturas_agrupadas(l_rec_lista_pac.COD_CIA,
                                                 l_rec_lista_pac.COD_RAMO,
                                                 l_rec_lista_pac.NUM_COTIZACION,
                                                 l_rec_lista_pac.NUM_SIMULACION,
                                                 l_rec_lista_pac.COD_PACOTE,
                                                 l_rec_lista_pac.VAL_VEICULO,
                                                 l_rec_lista_pac.FEC_VALIDEZ_TARIFA,
                                                 l_rec_lista_pac.VAL_CLAVE_FORMULA,
                                                 g_k_cod_campo_cob_agrupada,
                                                 trn.NO,
                                                 'A');
        --
        pi_xml_corpo_cobs_adi; -- xml corpo
        pi_xml_corpo_cobs_serv;
        pi_xml_corpo_cobs_basic;
        --
        mx('F', 'TRATA INFORMACEOS DAS COBERTURAS AGRUPADAS ADICIONAIS - SECAO J');
        --
        -- BUSCA TYPE DE COBERTURAS AGRUPADAS GRATUITAS BLOQUEADAS PARA ENDOSSO
        --
        mx('I', 'TRATA INFORMACEOS DAS COBERTURAS AGRUPADAS BLOQUEADAS - SECAO K');
        --
        l_tab_cob := fp_bus_coberturas_agrupadas(l_rec_lista_pac.COD_CIA,
                                                 l_rec_lista_pac.COD_RAMO,
                                                 l_rec_lista_pac.NUM_COTIZACION,
                                                 l_rec_lista_pac.NUM_SIMULACION,
                                                 l_rec_lista_pac.COD_PACOTE,
                                                 l_rec_lista_pac.VAL_VEICULO,
                                                 l_rec_lista_pac.FEC_VALIDEZ_TARIFA,
                                                 l_rec_lista_pac.VAL_CLAVE_FORMULA,
                                                 g_k_cod_campo_cob_agrupada,
                                                 trn.SI,
                                                 'B');
        pi_xml_corpo_cobs_adi; -- xml corpo
        pi_xml_corpo_cobs_serv;
        pi_xml_corpo_cobs_basic;
        --
        mx('F', 'TRATA INFORMACEOS DAS COBERTURAS AGRUPADAS BLOQUEADAS - SECAO K');
        --
        -- BUSCA TYPE DE COBERTURAS BLOQUEADAS
        --
        mx('I', 'TRATAMENTO PARA COBERTURAS BLOQUEADAS PARA ENDOSSO - SECAO L');
        --
        l_tab_cob := fp_bus_coberturas(l_rec_lista_pac.COD_CIA,
                                       l_rec_lista_pac.COD_RAMO,
                                       l_rec_lista_pac.NUM_COTIZACION,
                                       l_rec_lista_pac.NUM_SIMULACION,
                                       l_rec_lista_pac.COD_PACOTE,
                                       l_rec_lista_pac.COD_TARIFA,
                                       l_rec_lista_pac.VAL_CLAVE_FORMULA,
                                       'B');
        pi_xml_corpo_cobs_adi; -- xml corpo
        pi_xml_corpo_cobs_serv;
        pi_xml_corpo_cobs_basic;
        --
        mx('F', 'TRATAMENTO PARA COBERTURAS BLOQUEADAS PARA ENDOSSO - SECAO L');
        --
      END LOOP;
      --
      l_xml_lista := DBMS_XMLDOM.getxmltype(l_document);
      DBMS_XMLDOM.freedocument(l_document);
      p_clob_lista := l_xml_lista.getclobval;
      --
      --
      mx('F','p_gerar_xml_detalhe_pkt_auto3');
      --
    END p_gerar_xml_detalhe_pkt_auto3;
   --
   /* ------------------------------------------------------
   || transforma resultado do processamento em CLOB de XML
   */ ------------------------------------------------------
   --
   PROCEDURE p_gerar_xml_pacote_cobertura (p_retorno_pacote        IN ref_cursor,
                                           p_clob_lista            OUT CLOB)
   IS
      --
      l_retorno_xml_pac  ref_cursor;
      l_retorno_xml_cob  ref_cursor;
      l_rec_lista_Pac    rec_pacote;
      l_rec_lista_Cob    rec_coberturas_pacote;
      l_xml_lista        XMLTYPE;
      l_document         DBMS_XMLDOM.DOMDOCUMENT;
      l_node_dados       DBMS_XMLDOM.DOMNODE;
      l_node_lista       DBMS_XMLDOM.DOMNODE;
      l_node_codigo      DBMS_XMLDOM.DOMNODE;
      l_node_valor       DBMS_XMLDOM.DOMNODE;
      l_text_campo       DBMS_XMLDOM.DOMTEXT;
      l_node_cob         DBMS_XMLDOM.DOMNODE;
      -- v2.73 ini
      l_tip_produto     a2000020.val_campo%TYPE;
      l_eh_3_pacotes    BOOLEAN := FALSE;
      l_nom_cob         g2009016_vcr.val_columna%TYPE;
      --
      l_cod_cia         c2009030_vcr.cod_cia %TYPE;
      l_cod_ramo        c2009030_vcr.cod_ramo%TYPE;
      l_cod_agt         c2009030_vcr.cod_agt %TYPE;
      -- v2.73 fim
   BEGIN
      --
      mx('I', 'p_gerar_xml_pacote_cobertura');
      --
      l_retorno_xml_pac  := p_retorno_pacote;
      l_document         := DBMS_XMLDOM.newdomdocument;
      l_node_lista       := DBMS_XMLDOM.makenode(l_document);
      --
      mx('I', 'Antes do loop l_retorno_xml_pac'); -- 3.92
      --
      LOOP FETCH l_retorno_xml_pac INTO l_rec_lista_Pac;
         --
         EXIT WHEN l_retorno_xml_pac%NOTFOUND;
         --
         mx('I', 'Dentro do loop l_retorno_xml_pac'); -- 3.92
         --abre dados
         l_node_lista := DBMS_XMLDOM.makenode(l_document);
         l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colSimulacoes')));
         --
         l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'codPacote')));
         l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_Pac.COD_PACOTE );
         l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
         --
         l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'namPacote')));
         l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_Pac.NOM_PACOTE );
         l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
         --
         l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'desPacote')));
         l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_Pac.DES_PACOTE );
         l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
         --
         l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'desFranquiaTotal')));
         l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_Pac.DES_FRANQUIA_TOTAL );
         l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
         --
         l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'desPremioTotal')));
         l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_Pac.DES_PREMIO_TOTAL );
         l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
         --
         l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'desParcelamento')));
         l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_Pac.DES_PARCELAMENTO );
         l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
         --
         l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'desRastreadorObrigatorio')));
         l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_Pac.DES_RASTREADOR_OBRIGATORIO );
         l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
         --
         l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'codNroSimulacao')));
         l_text_campo := DBMS_XMLDOM.createtextnode(l_document, SUBSTR(l_rec_lista_Pac.COD_NRO_SIMULACAO,0,14) );--2.39
         l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
         --
         l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'desNroSimulacao')));
         l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_Pac.DES_NRO_SIMULACAO );
         l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
         --
         l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'tipDesconto')));
         l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_Pac.tip_desconto);
         l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
         --
         l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'desListaCobGratuita')));
         l_text_campo := DBMS_XMLDOM.createtextnode(l_document, ''); --v2.73 'COBERTURAS GRATUITAS');
         l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
         --
         --
         -- v2.73 ini
         BEGIN
           --
           IF NVL(trn_k_global.ref_f_global('MCA_POLIZA_GRUPO'), trn.NO) = trn.SI            OR
              NVL(trn_k_global.ref_f_global('COD_SERVICIO'), -trn.UNO)   = g_k_cod_srv_flotas
           THEN
             --
             l_eh_3_pacotes := FALSE;
             --
           ELSE
             --
             IF trn_k_global.ref_f_global('tip_mvto_batch') = g_k_tip_mvto_batch_cotacao THEN
               --
               --
               ea_k_231_utils.p_devuelve_dato_cotizacion(p_nom_tabla   => ea_k_231_utils.g_k_tabla_dv,
                                                         p_nom_columna => 'TIP_PRODUTO',
                                                         p_val_campo   => l_tip_produto);
               --
             ELSE
               --
               l_tip_produto := ea_k_231_utils.f_valor_dv('tip_produto');
               --
             END IF;
             --
             l_cod_cia  := trn_k_global.ref_f_global('cod_cia');
             l_cod_ramo := trn_k_global.ref_f_global('cod_ramo');
             l_cod_agt  := trn_k_global.ref_f_global('cod_agt');
             --
             l_eh_3_pacotes := NVL(fp_devuelve_n('tres_pacotes'), 0) > 0; -- 3.47
           --
           END IF;
           --
         EXCEPTION
           WHEN OTHERS
           THEN
             --
             l_eh_3_pacotes := FALSE;
             --
         END;
         -- v2.73 fim
         --
         IF l_eh_3_pacotes
         THEN
           --
           l_retorno_xml_cob := fp_bus_coberturas_pacote(l_rec_lista_Pac.COD_NRO_SIMULACAO);--v2.73
           --
           mx('I', 'Dentro fp_bus_coberturas_pacote'); -- 3.92
           --
         ELSE
           --
           --l_retorno_xml_cob := fp_bus_coberturas_gratuitas(l_rec_lista_Pac.COD_NRO_SIMULACAO);
         --
         l_retorno_xml_cob := fp_bus_coberturas_pacote(l_rec_lista_Pac.COD_NRO_SIMULACAO);
           --
           mx('I', 'Dentro fp_bus_coberturas_gratuitas'); -- 3.92
           --
         END IF;
         --
         mx('I', 'Antes do loop l_retorno_xml_cob'); -- 3.92
         --
         LOOP FETCH  l_retorno_xml_cob INTO l_rec_lista_Cob;
            --
            EXIT WHEN l_retorno_xml_cob%NOTFOUND;
            --
            mx('I', 'Dentro do loop l_retorno_xml_cob'); -- 3.92
            --
            l_node_cob   := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colCobGratuitas')));
            --
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'codCobertura')));
            l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_Cob.COD_COB );
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
            --
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'desCobertura')));
            --
            l_nom_cob := l_rec_lista_Cob.des_cob;
            --
            IF l_eh_3_pacotes
            THEN --v2.73
              --
              l_nom_cob := l_nom_cob || fp_bus_coberturas_dv(l_rec_lista_Pac.COD_NRO_SIMULACAO
                                                            ,l_rec_lista_Cob.COD_COB);
              --
            END IF;
            --
            l_text_campo := DBMS_XMLDOM.createtextnode(l_document,
                                                       l_nom_cob);
            --
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
            --
        END LOOP;
        --
        mx('I', 'Fora do loop l_retorno_xml_cob'); -- 3.92
        --
      END LOOP;

      --
      l_xml_lista := DBMS_XMLDOM.getxmltype(l_document);
      DBMS_XMLDOM.freedocument(l_document);
      p_clob_lista := l_xml_lista.getclobval;
      --
      mx('F', 'p_gerar_xml_pacote_cobertura');
      --
   END p_gerar_xml_pacote_cobertura;
   --
   /* ------------------------------------------------------
   || transforma resultado do processamento em CLOB de XML
   */ ------------------------------------------------------
   --
   PROCEDURE p_gerar_xml_pacote_cob_spto (p_retorno_pacote        IN ref_cursor,
                                          p_clob_lista            OUT CLOB)
   IS
      --
      l_retorno_xml_pac  ref_cursor;
      l_retorno_xml_cob  ref_cursor;
      l_rec_lista_Pac    rec_pacote;
      l_rec_lista_Cob    rec_coberturas_pacote;
      l_xml_lista        XMLTYPE;
      l_document         DBMS_XMLDOM.DOMDOCUMENT;
      l_node_dados       DBMS_XMLDOM.DOMNODE;
      l_node_lista       DBMS_XMLDOM.DOMNODE;
      l_node_codigo      DBMS_XMLDOM.DOMNODE;
      l_node_valor       DBMS_XMLDOM.DOMNODE;
      l_text_campo       DBMS_XMLDOM.DOMTEXT;
      l_node_cob         DBMS_XMLDOM.DOMNODE;
      --

   BEGIN
      --
      mx('I', 'p_gerar_xml_pacote_cob_spto');
      --
      l_retorno_xml_pac  := p_retorno_pacote;
      l_document         := DBMS_XMLDOM.newdomdocument;
      l_node_lista       := DBMS_XMLDOM.makenode(l_document);
      --
      LOOP FETCH l_retorno_xml_pac INTO l_rec_lista_Pac;
         --
         EXIT WHEN l_retorno_xml_pac%NOTFOUND;
         --
         --abre dados
         l_node_lista := DBMS_XMLDOM.makenode(l_document);
         l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colSimulacoes')));
         --
         l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'codPacote')));
         l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_Pac.COD_PACOTE );
         l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
         --
         l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'namPacote')));
         l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_Pac.NOM_PACOTE );
         l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
         --
         l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'desPacote')));
         l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_Pac.DES_PACOTE );
         l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
         --
         l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'desFranquiaTotal')));
         l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_Pac.DES_FRANQUIA_TOTAL );
         l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
         --
         l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'desPremioTotal')));
         l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_Pac.DES_PREMIO_TOTAL );
         l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
         --
         l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'desParcelamento')));
         l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_Pac.DES_PARCELAMENTO );
         l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
         --
         l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'desRastreadorObrigatorio')));
         l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_Pac.DES_RASTREADOR_OBRIGATORIO );
         l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
         --
         l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'codNroSimulacao')));
         l_text_campo := DBMS_XMLDOM.createtextnode(l_document, substr(l_rec_lista_Pac.COD_NRO_SIMULACAO,0,13) );
         l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
         --
         l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'desNroSimulacao')));
         l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_Pac.DES_NRO_SIMULACAO );
         l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
         --
         l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'tipDesconto')));
         l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_Pac.tip_desconto);
         l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
         --
         l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'desListaCobGratuita')));
         l_text_campo := DBMS_XMLDOM.createtextnode(l_document, 'COBERTURAS GRATUITAS');
         l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
         --
         l_retorno_xml_cob := fp_bus_cob_gratuitas_spto(l_rec_lista_Pac.COD_NRO_SIMULACAO);
         --
         LOOP FETCH  l_retorno_xml_cob INTO l_rec_lista_Cob;
            --
            EXIT WHEN l_retorno_xml_cob%NOTFOUND;
            --
            l_node_cob   := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colCobGratuitas')));
            --
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'codCobertura')));
            l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_Cob.COD_COB );
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
            --
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'desCobertura')));
            l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_Cob.DES_COB );
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
            --
        END LOOP;

        --
      END LOOP;

      --
      l_xml_lista := DBMS_XMLDOM.getxmltype(l_document);
      DBMS_XMLDOM.freedocument(l_document);
      p_clob_lista := l_xml_lista.getclobval;
      --
      mx('F', 'p_gerar_xml_pacote_cob_spto');
      --
   END p_gerar_xml_pacote_cob_spto;
   --
   /* ---------------------------------------------------------------- *
   || Devolve um CLOB contendo uma lista de dados XML : p_xml
   */ ----------------------------------------------------------------
   --
   PROCEDURE p_gerar_xml_coberturas      (p_retorno          IN  ref_cursor,
                                          p_clob_lista       OUT CLOB)
   IS
      --
      l_retorno_xml    ref_cursor;
      l_xml_lista      XMLTYPE;
      l_rec_lista_Cobs rec_coberturas;
      l_document       DBMS_XMLDOM.DOMDOCUMENT;
      l_node_dados     DBMS_XMLDOM.DOMNODE;
      l_node_lista     DBMS_XMLDOM.DOMNODE;
      l_node_codigo    DBMS_XMLDOM.DOMNODE;
      l_node_valor     DBMS_XMLDOM.DOMNODE;
      l_text_campo     DBMS_XMLDOM.DOMTEXT;
      l_node_cob       DBMS_XMLDOM.DOMNODE;
      l_nom_pacote     C2000000.val_columna%TYPE := ' ';
      --

   BEGIN
      --
      mx('I', 'p_gerar_xml_coberturas');
      --
      l_retorno_xml := p_retorno;
      l_document    := DBMS_XMLDOM.newdomdocument;
      l_node_lista  := DBMS_XMLDOM.makenode(l_document);
      --
      l_node_lista := DBMS_XMLDOM.makenode(l_document);
      l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'descPacotes')));
      --
      LOOP
           FETCH l_retorno_xml
           INTO l_rec_lista_Cobs;
           EXIT WHEN l_retorno_xml%NOTFOUND;
              --
              IF l_nom_pacote <> l_rec_lista_Cobs.NOM_PACOTE THEN
                 --
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'nomPacote')));
                 l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_Cobs.NOM_PACOTE );
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                 --
                 l_nom_pacote := l_rec_lista_Cobs.NOM_PACOTE;
                 --
              END IF;

              --
              IF l_rec_lista_Cobs.MCA_TIP_COBERTURA = 'C' THEN
                 --
                 l_node_cob   := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCoberturasPacotes')));
                 --
              ELSE
                 --
                 l_node_cob   := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCoberturasAdicionais')));
                 --

              END IF;

                 --
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'codCobertura')));
                 l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_Cobs.COD_COB );
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                 --
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'nomCobertura')));
                 l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_Cobs.NOM_COB );
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                 --
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valLimiteMaxIndenizacao')));
                 l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_Cobs.VAL_INDENIZACAO );
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                 --
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valFranquia')));
                 l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_Cobs.VAL_FRANQUIA );
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                 --
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valPremio')));
                 l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_Cobs.VAL_PREMIO );
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                 --
      END LOOP;

      --
      l_xml_lista := DBMS_XMLDOM.getxmltype(l_document);
      DBMS_XMLDOM.freedocument(l_document);
      p_clob_lista := l_xml_lista.getclobval;
        --
      mx('F', 'p_gerar_xml_coberturas');
      --
   END p_gerar_xml_coberturas;
   --
   /* ---------------------------------------------------------------- *
   || Devolve um CLOB contendo uma lista de dados XML : p_xml
   */ ----------------------------------------------------------------
   --
   PROCEDURE p_gerar_xml_coti_spto (p_retorno          IN  ref_cursor,
                                    p_clob_lista       OUT CLOB)
   IS
      --
      l_retorno_xml         ref_cursor;
      l_rec_lista_coti_spto rec_dados_coti_spto;
      l_xml_lista           XMLTYPE;
      l_document            DBMS_XMLDOM.DOMDOCUMENT;
      l_node_dados          DBMS_XMLDOM.DOMNODE;
      l_node_lista          DBMS_XMLDOM.DOMNODE;
      l_node_codigo         DBMS_XMLDOM.DOMNODE;
      l_node_valor          DBMS_XMLDOM.DOMNODE;
      l_text_campo          DBMS_XMLDOM.DOMTEXT;
      --
     BEGIN
        --
        mx('I', 'p_gerar_xml_coti_spto');
        --
        l_retorno_xml := p_retorno;
        l_document   := DBMS_XMLDOM.newdomdocument;
        l_node_lista := DBMS_XMLDOM.makenode(l_document);
        --
        LOOP FETCH l_retorno_xml INTO l_rec_lista_coti_spto;
           --
           EXIT WHEN l_retorno_xml%NOTFOUND;
           --
           --abre dados
           l_node_lista := DBMS_XMLDOM.makenode(l_document);
           l_node_lista := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresLista')));
           --abre dados
           l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
           --monta codigo
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
           l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_coti_spto.NOM_CAMPO_NUM_COTIZACION);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
           --monta valor
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_coti_spto.NUM_COITIZACION);
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
           --abre dados
           l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
           --monta codigo
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
           l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_coti_spto.NOM_CAMPO_NUM_SIMULACION);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
           --monta valor
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_coti_spto.NUM_SIMULACION );
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
           --abre dados
           l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
           --monta codigo
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
           l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_coti_spto.NOM_CAMPO_COD_RAMO);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
           --monta valor
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_coti_spto.COD_RAMO );
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
           --abre dados
           l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
           --monta codigo
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
           l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_coti_spto.NOM_CAMPO_FEC_CALCULO);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
           --monta valor
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_coti_spto.FEC_CALCULO);
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
           --abre dados
           l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
           --monta codigo
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
           l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_coti_spto.NOM_CAMPO_NUM_POLIZA);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
           --monta valor
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_coti_spto.NUM_POLIZA);
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
           --abre dados
           l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
           --monta codigo
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
           l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_coti_spto.NOM_CAMPO_NUM_SPTO);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
           --monta valor
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_coti_spto.NUM_SPTO);
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
           --monta codigo
           l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
           --monta codigo
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
           l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_coti_spto.NOM_CAMPO_FEC_EFEC_SPTO);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
           --monta valor
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_coti_spto.FEC_EFEC_SPTO);
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
           --monta codigo
           l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
           --monta codigo
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
           l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_coti_spto.NOM_CAMPO_FEC_VCTO_SPTO);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
           --monta valor
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_coti_spto.FEC_VCTO_SPTO);
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
           --monta codigo
           l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
           --monta codigo
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
           l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_coti_spto.NOM_CAMPO_TIP_DOCUM);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
           --monta valor
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_coti_spto.TIP_DOCUM);
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
           --monta codigo
           l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
           --monta codigo
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
           l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_coti_spto.NOM_CAMPO_COD_DOCUM);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
           --monta valor
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_coti_spto.COD_DOCUM);
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
           --monta codigo
           l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
           --monta codigo
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
           l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_coti_spto.NOM_CAMPO_NOM_COMPLETO);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
           --monta valor
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_coti_spto.NOM_COMPLETO);
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
           --monta codigo
           l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
           --monta codigo
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
           l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_coti_spto.NOM_CAMPO_TIP_SPTO);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
           --monta valor
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_coti_spto.TIP_SPTO);
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
           --
           l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
           --monta codigo
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
           l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_coti_spto.NOM_CAMPO_NOM_RIESGO);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
           --monta valor
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_coti_spto.NOM_RIESGO);
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
           --
           l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
           --monta codigo
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
           l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_coti_spto.NOM_CAMPO_NUM_MATRICULA);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
           --monta valor
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_coti_spto.NUM_MATRICULA);
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
           --
           l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
           --monta codigo
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
           l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_coti_spto.NOM_CAMPO_NUM_SERIE);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
           --monta valor
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_coti_spto.NUM_SERIE);
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
           --
           l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
           --monta codigo
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
           l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_coti_spto.NOM_CAMPO_NUM_VISTORIA);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
           --monta valor
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_coti_spto.NUM_VISTORIA);
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
           --
           l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
           --monta codigo
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
           l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_coti_spto.NOM_CAMPO_IMP_RECIBO);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
           --monta valor
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_coti_spto.IMP_RECIBO);
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
           --
           l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
           --monta codigo
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
           l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_coti_spto.NOM_CAMPO_IMP_NETA);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
           --monta valor
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_coti_spto.IMP_NETA);
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
           --
           l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
           --monta codigo
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
           l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_coti_spto.NOM_CAMPO_STATUS);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
           --monta valor
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_coti_spto.STATUS);
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
           --
        END LOOP;
        --
        l_xml_lista := DBMS_XMLDOM.getxmltype(l_document);
        DBMS_XMLDOM.freedocument(l_document);
        p_clob_lista := l_xml_lista.getclobval;
        --
        mx('F', 'p_gerar_xml_coti_spto');
        --
   END p_gerar_xml_coti_spto;
   --
   /* ---------------------------------------------------------------- *
   || Devolve um CLOB contendo uma lista de dados XML : p_xml
   */ ----------------------------------------------------------------
   --
    PROCEDURE p_gerar_xml_detalhe_pacote   (p_retorno_pacote        IN ref_cursor,
                                           p_clob_lista            OUT CLOB)
   IS
      --
      l_retorno_xml_pac   ref_cursor;
      l_rec_lista_pac     rec_detalhe_pacote;
      l_xml_lista         XMLTYPE;
      l_document          DBMS_XMLDOM.DOMDOCUMENT;
      l_node_dados        DBMS_XMLDOM.DOMNODE;
      l_node_lista        DBMS_XMLDOM.DOMNODE;
      l_node_valor        DBMS_XMLDOM.DOMNODE;
      l_text_campo        DBMS_XMLDOM.DOMTEXT;
      --
      l_node_val_cob_pac      DBMS_XMLDOM.DOMNODE;
      l_node_val_cob_blo      DBMS_XMLDOM.DOMNODE;
      l_node_val_cob_adi      DBMS_XMLDOM.DOMNODE;
      l_node_val_cobs_adi     DBMS_XMLDOM.DOMNODE;
      l_node_val_cobs_blo     DBMS_XMLDOM.DOMNODE;
      l_node_val_cobs_agr     DBMS_XMLDOM.DOMNODE;
      l_node_col_cobs_cas     DBMS_XMLDOM.DOMNODE;
      l_node_col_cob_cas      DBMS_XMLDOM.DOMNODE;
      l_node_col_cob          DBMS_XMLDOM.DOMNODE;
      l_node_col_cobs         DBMS_XMLDOM.DOMNODE;
      l_node_lim_max_inde     DBMS_XMLDOM.DOMNODE;
      l_node_col_lim_max_inde DBMS_XMLDOM.DOMNODE;
      l_node_col_atri_lis     DBMS_XMLDOM.DOMNODE;
      l_node_tip_atri_cob     DBMS_XMLDOM.DOMNODE;
      l_node_col_tip_atri_cob DBMS_XMLDOM.DOMNODE;
      l_node_val_franq        DBMS_XMLDOM.DOMNODE;
      l_node_col_val_franq    DBMS_XMLDOM.DOMNODE;
      l_node_val_lista_pago   DBMS_XMLDOM.DOMNODE; -- 4.37
      l_node_col_val_pago     DBMS_XMLDOM.DOMNODE; -- 4.37
      l_node_codigo           DBMS_XMLDOM.DOMNODE; -- 4.37
      --
      l_tab_cob           rec_tab_det_cob      := NULL;
      l_tab_cob_cas       rec_tab_det_cob      := NULL;
      l_tab_cob_cas_val   rec_tab_det_cob      := NULL;
      l_tab_val_lim_inde  rec_tab_val_lim_inde := NULL;
      l_tab_atri_lista    rec_tab_atri_lista   := NULL;
      l_tab_atri_cob      rec_tab_atri_cob     := NULL;
      l_tab_val_franq     rec_tab_val_franq    := NULL;
      --
      l_eh_3_pacotes   BOOLEAN; -- 2.14
      l_num_simulacion C2990700.num_simulacion%TYPE; -- 3.16
      l_cod_agt        a1001332.cod_agt %TYPE; -- 2.84
      l_mca_defecto_forma_pago   VARCHAR2(1) := NULL; -- 4.37
      l_mca_defecto_parcela_pago VARCHAR2(1) := NULL; -- 4.37
      l_pct_agt_npr_pref         NUMBER := NULL; -- 4.37
      --
      l_retorno_forma_pago     ref_cursor; -- 4.37
      l_rec_pref_forma_pago    rec_pref_forma_pago; -- 4.37
      l_retorno_parcelas_pago  ref_cursor; -- 4.37
      l_rec_pref_parcelas_pago rec_pref_parcelas_pago; -- 4.37
      --
      l_clave_formula             a2000560.val_campo%TYPE; --v5.47
      l_reg_a2000560              A2000560%ROWTYPE;--v5.47
      --
      FUNCTION fp_devuelve_mca_contrata_spto (p_cod_cob                 c2000000.val_columna           %TYPE,
                                              p_cod_cob_agrupada        df_cmn_nwt_xx_vrb_cnc.vrb_nam  %TYPE,
                                              p_mca_selec               c2000000.val_columna           %TYPE)
      RETURN   C2000000.val_columna%TYPE IS
        --
        l_mca_selec c2000000.val_columna%TYPE := p_mca_selec;
        l_cod_cob   a1002150.cod_cob    %TYPE               ;
        --
      l_k_cod_cob_106         a2000040.cod_cob%TYPE := 106; -- 3.16
      l_mca_pre_contrata_pref g2109040_vcr.mca_contrata %TYPE; -- 3.16
      l_mca_contrata_cob_pref g2109041_vcr.mca_contrata_cob%TYPE; -- 3.16
      l_mca_pre_contrata      g2109040_vcr.mca_contrata %TYPE; -- 3.16
      l_mca_contrata_cob      g2109041_vcr.mca_contrata_cob%TYPE; -- 3.16
      --
      l_clave_formula             a2000560.val_campo%TYPE; --v5.47
      l_endosso_calculo_cobertura BOOLEAN                 := FALSE; --v5.23
      l_manter_cob_endosso        DF_CMN_NWT_XX_CNN.VRB_NAM_VAL%TYPE := trn.SI; --v5.52
      --
        CURSOR c_df_cmn_nwt_xx_vrb_cnc IS
          SELECT *
            FROM df_cmn_nwt_xx_vrb_cnc a
           WHERE a.cmp_val = g_cod_cia
             AND a.lob_val = g_cod_ramo
             AND a.vrb_nam = p_cod_cob_agrupada || g_k_prefixo_simulacion || p_cod_cob;
        --
        reg_df_cmn_nwt_xx_vrb_cnc c_df_cmn_nwt_xx_vrb_cnc%ROWTYPE;
        --
    BEGIN
        --
        mx('I', 'fp_devuelve_mca_contrata_spto');
        --
        pp_inicializa_variables;
        --
        IF g_tip_mvto_batch = ea_k_231_utils.g_k_spto_batch AND
           fp_cambio_riesgo
        THEN
          --
          l_cod_agt  :=  ea_k_231_utils.f_valor_dv('DFCOD_AGT'); -- 3.08
          trn_k_global.asigna('COD_AGT', l_cod_agt); -- 3.08
          --
          IF c_df_cmn_nwt_xx_vrb_cnc%ISOPEN
          THEN
            --
            CLOSE c_df_cmn_nwt_xx_vrb_cnc;
            --
          END IF;
          --
          OPEN c_df_cmn_nwt_xx_vrb_cnc;
          --
          LOOP
            --
            FETCH c_df_cmn_nwt_xx_vrb_cnc INTO reg_df_cmn_nwt_xx_vrb_cnc;
            --
            l_cod_cob := NVL(reg_df_cmn_nwt_xx_vrb_cnc.cnc_vrb_val
                            ,p_cod_cob);
          --v5.47 I {
          l_clave_formula := ea_k_231_utils.f_valor_dv('VAL_CLAVE_FORMULA');
          --
          IF NVL(trn_k_global.ref_f_global(g_habilita_stop_loop_endosso), trn.NO) = trn.SI THEN
            --
            l_manter_cob_endosso        := ea_k_231_utils_vcr.f_busca_constante(vrb_nam     => 'HABILITA.MANTER.COB.SPTO'
                                                                              , vrb_nam_val => trn.SI
                                                                              , asigna      => false); --v5.52
            --
            mx('l_manter_cob_endosso', l_manter_cob_endosso); --v5.52
            --
            l_endosso_calculo_cobertura := g_tip_mvto_batch = ea_k_231_utils.g_k_spto_batch AND l_clave_formula LIKE g_clave_calc_cobertura;
            --
          END IF;
          -- } F v5.47
          -- I 3.16
          IF NVL(trn_k_global.ref_f_global('mca_concessionaria'), trn.NO) =
             trn.NO AND l_cod_cob = l_k_cod_cob_106
             AND NOT l_endosso_calculo_cobertura THEN --v5.47
            --
            CONTINUE;
            --
          END IF;
          -- F 3.16
            pp_asigna('cod_cob'
                     ,l_cod_cob);
            --
            pp_lee_config_cob;
          -- I 3.16
          IF l_eh_3_pacotes THEN
               --
            BEGIN -- 3.17
               --
            ea_k_definicion_pacote_vcr.p_status_contrata(l_num_simulacion - 1,
                                                         l_cod_cob,
                                                         l_mca_contrata_cob_pref,
                                                         l_mca_contrata_cob,
                                                         l_mca_pre_contrata,
                                                         l_mca_pre_contrata_pref);
            --v5.47
            IF l_endosso_calculo_cobertura AND NVL(l_manter_cob_endosso, trn.SI) = trn.SI THEN
              -- v5.52 I {
              IF l_mca_pre_contrata = trn.SI AND l_mca_contrata_cob = trn.SI THEN
                --
                mx(l_cod_cob, 'COMPULSORIA NO PACOTE');
                --
                RETURN trn.SI;
                --
              END IF;
              -- } F v5.52
              RETURN p_mca_selec;
              --
            END IF;
            --v5.47
            IF l_mca_pre_contrata = trn.SI AND l_mca_contrata_cob = trn.SI AND
               l_mca_pre_contrata_pref = TRN.NO THEN
            --
              l_mca_selec := trn.SI;

            ELSIF ea_k_g2109040.f_mca_contrata = trn.SI THEN
              --
              l_mca_selec := trn.SI;
              --
            ELSE
              --
              l_mca_selec := p_mca_selec;
              --
            END IF;
              -- I 3.17
            EXCEPTION
              WHEN OTHERS
              THEN
                --
                l_mca_selec := trn.NO;
                --
            END;
            -- F 3.17
          ELSE
            --
            IF ea_k_g2109040.f_mca_contrata = trn.SI THEN
              --
              l_mca_selec := trn.SI;
              --
            ELSE
              --
              l_mca_selec := p_mca_selec;
            --
            END IF;
          END IF;
          -- F 3.16
            EXIT WHEN c_df_cmn_nwt_xx_vrb_cnc%NOTFOUND OR l_mca_selec = trn.SI;
            --
          END LOOP;
          --
          CLOSE c_df_cmn_nwt_xx_vrb_cnc;
          --
        END IF;
        --
        mx('F', 'fp_devuelve_mca_contrata_spto');
        --
        RETURN NVL(l_mca_selec
                  ,p_mca_selec);
        --
      END fp_devuelve_mca_contrata_spto;
      --
    BEGIN
        --
        mx('I', 'p_gerar_xml_detalhe_pacote');
        --
        l_retorno_xml_pac   := p_retorno_pacote;
        l_document          := DBMS_XMLDOM.newdomdocument;
        l_node_lista        := DBMS_XMLDOM.makenode(l_document);
        --v5.47 I {
        mx(g_habilita_stop_loop_endosso , ea_k_231_utils_vcr.f_busca_constante(vrb_nam     => g_habilita_stop_loop_endosso
                                                                            , vrb_nam_val => trn.SI)); --v5.47
        --
        mx(g_habilita_pacote_gen_endosso, ea_k_231_utils_vcr.f_busca_constante(vrb_nam     => g_habilita_pacote_gen_endosso
                                                                            , vrb_nam_val => trn.SI)); --v5.47
        l_clave_formula := ea_k_231_utils.f_valor_dv('VAL_CLAVE_FORMULA');
        --
        IF NVL(trn_k_global.ref_f_global(g_habilita_pacote_gen_endosso), trn.NO) = trn.SI
          AND NVL(trn_k_global.ref_f_global('cod_cia'), trn.CERO)                <> trn.CERO
          AND NVL(trn_k_global.ref_f_global('num_cotizacion'), trn.CERO)         <> trn.CERO
          AND g_tip_mvto_batch                                                   = ea_k_231_utils.g_k_spto_batch
          AND l_clave_formula                                                    LIKE g_clave_calc_cobertura THEN
          --
          trn_k_global.asigna('tres_pacotes', '1');
          --
          l_eh_3_pacotes := true;
          --
          l_reg_a2000560.cod_cia       := trn_k_global.ref_f_global('cod_cia');
          l_reg_a2000560.num_propuesta := trn_k_global.ref_f_global('num_cotizacion');
          l_reg_a2000560.cod_campo     := 'TIP_PACOTE';
          l_reg_a2000560.val_Campo     := ea_k_231_utils_vcr.f_busca_constante(vrb_nam     => g_pacote_gen_endosso
                                                                             , vrb_nam_val => '80');
          --
          pp_inserta_a2000560(l_reg_a2000560);
          --
        END IF;
        -- } F v5.47
        --
        l_eh_3_pacotes := nvl(fp_devuelve_n('tres_pacotes'),0) > 0 ;
        l_cod_agt  := trn_k_global.ref_f_global('cod_agt'); -- 2.84
    g_cod_cia      := trn_k_global.ref_f_global('COD_CIA'); -- 4.37
        g_cod_ramo     := trn_k_global.ref_f_global('COD_RAMO'); -- 4.37
        --
  OPEN l_retorno_forma_pago FOR -- I 4.37
        --
      WITH CTIPO AS
       (SELECT 1 AS NUM_SIMULACION
          FROM DUAL
        UNION
        SELECT 99 AS NUM_SIMULACION
          FROM DUAL
        UNION
        SELECT 98 AS NUM_SIMULACION
          FROM DUAL
        UNION
        SELECT 97 AS NUM_SIMULACION
          FROM DUAL
        UNION
        SELECT 96 AS NUM_SIMULACION
          FROM DUAL
        UNION
        SELECT 94 AS NUM_SIMULACION
          FROM DUAL)
      SELECT K.VAL_CAMPO_DE_VCR AS COD_FORMA_PAGO,
             G.NOM_VALOR        AS NOM_FORMA_PAGO
        FROM G2990006 G, G9999021_VCR K, G9999021_VCR I, CTIPO C
       WHERE G.COD_CIA IN (1, 52)
         AND G.COD_RAMO = 999
         AND G.COD_CAMPO = 'COD_FORMA_PAGO'
         AND G.COD_VALOR = K.VAL_CAMPO_DE_VCR
         AND G.COD_CIA = K.COD_CIA
         AND C.NUM_SIMULACION = K.VAL_CAMPO_PARA_VCR
         AND K.COD_RAMO = 999
         AND K.COD_CAMPO = 'COD_FORMA_PAGTO'
         AND G.COD_CIA = I.COD_CIA
         AND K.VAL_CAMPO_DE_VCR = I.VAL_CAMPO_DE_VCR
         AND I.COD_RAMO = 999
         AND I.COD_CAMPO = 'COD_FORMA_PAGO'
       ORDER BY DECODE(K.VAL_CAMPO_DE_VCR,
                       5,
                       1.5,
                       7,
                       3.5,
                       K.VAL_CAMPO_DE_VCR); -- F 4.37
    --
    OPEN l_retorno_parcelas_pago FOR -- I 4.37
      SELECT cod_forma_pago AS COD_FORMA_PAGO,
             cod_plan_pago  AS COD_PARCELAS_PAGO
        FROM a1009213_vcr a
       WHERE a.cod_cia IN (1, 52)
         AND a.cod_ramo = ea_k_231_utils.g_k_ramo_motor
         AND a.tip_cliente_vcr = ea_k_231_utils.g_k_tip_cliente_gen
         AND a.tip_duracion = trn.UNO
         AND a.cod_modalidad = em.COD_MODALIDAD_GEN
         AND a.cod_agt = em.COD_AGT_GEN
       ORDER BY COD_FORMA_PAGO, COD_PARCELAS_PAGO; -- F 4.37
    --
        LOOP FETCH l_retorno_xml_pac INTO l_rec_lista_pac;
           --
           EXIT WHEN l_retorno_xml_pac%NOTFOUND;
           --abre dados
           --
           g_val_clave_formula := l_rec_lista_pac.VAL_CLAVE_FORMULA;
           --
           IF l_eh_3_pacotes THEN -- 2.14
             pp_asigna('cod_agt', l_cod_agt); -- 2.84
             l_num_simulacion := l_rec_lista_pac.NUM_SIMULACION; -- 3.16
             --
             ea_k_definicion_pacote.p_carga_coberturas(l_rec_lista_pac.NUM_SIMULACION);--2.14
             --
           END IF; --2.14
           --
           mx('g_val_clave_formula', g_val_clave_formula);
           --
           dbms_output.put_line('g_val_clave_formula' || g_val_clave_formula);
           --
           l_node_lista := DBMS_XMLDOM.makenode(l_document);
           l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'descPacotes')));
           --
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'codPacote')));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_pac.NUM_SIMULACION );
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
           --
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'nomPacote')));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_pac.NOM_PACOTE );
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
           --
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valTotal')));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_pac.VAL_TOTAL );
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
           --
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'pctAjuste')));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_pac.PCT_FATOR_AJUSTE );
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
           --
           IF trn_k_global.devuelve('MCA_PREFERENCIA') = 'S' THEN -- I 4.38
             --
             l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados,
                                                     DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,
                                                                                                    'pctAgtNpr')));
             --
             l_pct_agt_npr_pref := fp_bus_comissao_pref(g_cod_cia,
                                                        g_cod_ramo,
                                                        l_cod_agt);
             --
             l_text_campo := DBMS_XMLDOM.createtextnode(l_document,
                                                        l_pct_agt_npr_pref);
             --
             l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor,
                                                     DBMS_XMLDOM.makenode(l_text_campo));
             --
           ELSE
             --
             -- v3.36 ini
             l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados,
                                                     DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,
                                                                                                    'pctAgtNpr')));
             l_text_campo := DBMS_XMLDOM.createtextnode(l_document,
                                                        l_rec_lista_pac.PCT_AGT_NPR);
             l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor,
                                                     DBMS_XMLDOM.makenode(l_text_campo));
             -- v3.36 fim
             --
           END IF; -- I 4.38
           --
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valSubModelo')));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_pac.VAL_VEICULO );
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
           --
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'tipMercDeter')));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_pac.TIP_MERC_DETER );
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
           --
           l_node_val_cob_pac := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCoberturasPacotes')));
           --
           -- BUSCA TYPE DE COBERTURAS AGRUPADAS DE CASCO
           --
           mx('I', 'TRATA INFORMACEOS DAS COBERTURAS AGRUPADAS DE CASCO');
           --
           l_tab_cob_cas := NULL;
           --
           l_tab_cob_cas := fp_bus_coberturas_agrupadas(l_rec_lista_pac.COD_CIA,
                                                l_rec_lista_pac.COD_RAMO,
                                                l_rec_lista_pac.NUM_COTIZACION,
                                                l_rec_lista_pac.NUM_SIMULACION,
                                                l_rec_lista_pac.COD_PACOTE,
                                                l_rec_lista_pac.VAL_VEICULO,
                                                l_rec_lista_pac.FEC_VALIDEZ_TARIFA,
                                                l_rec_lista_pac.VAL_CLAVE_FORMULA,
                                                g_k_cod_campo_cob_casco,
                                                trn.NO,
                                                'P') ;
           --
           -- TRATA INFORMACEOS DAS COBERTURAS AGRUPADAS DE CASCO
           --
           IF l_tab_cob_cas.EXISTS(1) THEN
              --
              l_node_val_cobs_agr := DBMS_XMLDOM.appendchild(l_node_val_cob_pac, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colCoberturasAgrupadas')));
              --
              l_node_col_cobs_cas := DBMS_XMLDOM.appendchild(l_node_val_cobs_agr, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colCoberturasCasco')));
              --
              FOR cob_index IN l_tab_cob_cas.FIRST..l_tab_cob_cas.LAST
              LOOP
                 --
                 l_node_col_cob := DBMS_XMLDOM.appendchild(l_node_col_cobs_cas, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'coberturasCasco')));
                 --
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'codCobertura')));
                 l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_cob_cas(cob_index).COD_COB );
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                 --
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'nomCobertura')));
                 l_text_campo := DBMS_XMLDOM.createtextnode(l_document, fp_valores_lista (l_rec_lista_pac.COD_CIA
                                                                                         ,'NOM_COB'
                                                                                         ,l_tab_cob_cas(cob_index).nom_cob
                                                                                         ,l_tab_cob_cas(cob_index).COD_COB));
                 --
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                 --
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'mcaSeleccionCob')));
                 l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_cob_cas(cob_index).MCA_SELEC_COB );
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                 --
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'mcaModificaCapital')));
                 l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_cob_cas(cob_index).MCA_MODIF_CAP );
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                 --
              END LOOP;
              --
              -- TRATA INFORMACOES DO LIMITE DE INDENIZACAO
              --
              l_node_lim_max_inde := NULL;
              --
              l_node_lim_max_inde := DBMS_XMLDOM.appendchild(l_node_val_cobs_agr, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valLimiteMaxIndenizacao')));
              --
              FOR cob_index IN l_tab_cob_cas.FIRST..l_tab_cob_cas.LAST
              LOOP
                 --
                 l_tab_val_lim_inde := NULL;
                 --
                 l_tab_val_lim_inde := l_tab_cob_cas(cob_index).TAB_VAL_LIM_INDE;
                 --
                 IF l_tab_cob_cas(cob_index).MCA_SELEC_COB = 'S' THEN
                 --
                 FOR inde_index IN l_tab_val_lim_inde.FIRST..l_tab_val_lim_inde.LAST
                 LOOP
                       --
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_lim_max_inde, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'codCampo')));
                       l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_lim_inde(inde_index).COD_CAMPO );
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                       --
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_lim_max_inde, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valCampo')));
                       l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_lim_inde(inde_index).VAL_CAMPO );
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                       --
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_lim_max_inde, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'mcaValDefecto')));
                       l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_lim_inde(inde_index).MCA_VAL_DEFEC );
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                       --
                 END LOOP;
                 --
                 END IF;
                 --
              END LOOP;
              --
              -- TRATA LISTA DE ATRIBUTOS DA LISTA DA COBERTURA
              --
              l_node_col_atri_lis := DBMS_XMLDOM.appendchild(l_node_val_cobs_agr, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colAtributosLista')));
              --
              FOR cob_index IN l_tab_cob_cas.FIRST..l_tab_cob_cas.LAST
              LOOP
                 --
                 l_tab_atri_lista := l_tab_cob_cas(cob_index).TAB_ATRI_LISTA;
                 --
                 IF l_tab_cob_cas(cob_index).MCA_SELEC_COB = 'S' AND l_tab_atri_lista.COUNT <> trn.CERO THEN
                    --
                    FOR atri_lis_index IN l_tab_atri_lista.FIRST..l_tab_atri_lista.LAST
                    LOOP
                       --
                       l_tab_atri_cob := l_tab_atri_lista(atri_lis_index);
                       --
                       -- TRATA LISTA DA LISTA DA COBERTURA (LISTA DO DV)
                       IF l_tab_atri_cob.EXISTS(1) THEN
                          --
                          FOR atri_cob_index IN l_tab_atri_cob.FIRST..l_tab_atri_cob.LAST
                          LOOP
                             --
                             l_node_tip_atri_cob := DBMS_XMLDOM.appendchild(l_node_col_atri_lis, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'tipAtributoCob')));
                             --
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_tip_atri_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'codCampo')));
                             l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_atri_cob(atri_cob_index).COD_CAMPO );
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                             --
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_tip_atri_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valCampo')));
                             l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_atri_cob(atri_cob_index).VAL_CAMPO );
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                             --
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_tip_atri_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'txtCampo')));
                             l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_atri_cob(atri_cob_index).TXT_CAMPO );
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                             --
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_tip_atri_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'mcaSeleccionAtributo')));
                             l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_atri_cob(atri_cob_index).MCA_SELEC );
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                             --
                          END LOOP;
                          --
                       END IF;
                       --
                    END LOOP;
                    --
                 END IF;
                 --
              END LOOP;
              --
              -- TRATA LISTA DE FRANQUIA DA COBERTURA
              --
              l_node_val_franq := DBMS_XMLDOM.appendchild(l_node_val_cobs_agr, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valFranquia')));
              --
              FOR cob_index IN l_tab_cob_cas.FIRST..l_tab_cob_cas.LAST
              LOOP
                 --
                 l_tab_val_franq := l_tab_cob_cas(cob_index).TAB_VAL_FRANQ;
                 --
                 -- TRATA LISTA DE FRANQUIA DA COBERTURA
                 --
                 IF l_tab_cob_cas(cob_index).MCA_SELEC_COB = 'S' AND l_tab_val_franq.COUNT <> trn.CERO THEN
                    --
                    FOR val_franq_index IN l_tab_val_franq.FIRST..l_tab_val_franq.LAST
                    LOOP
                       --
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_val_franq, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'codCampo')));
                       l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_franq(val_franq_index).COD_CAMPO );
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                       --
                       IF l_tab_val_franq(val_franq_index).TXT_CAMPO IS NOT NULL THEN
                          --
                          l_node_valor := DBMS_XMLDOM.appendchild(l_node_val_franq, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'txtCampo')));
                          l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_franq(val_franq_index).TXT_CAMPO );
                          l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                          --
                       END IF;
                       --
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_val_franq, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valCampo')));
                       l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_franq(val_franq_index).VAL_CAMPO );
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                       --
                    END LOOP;
                    --
                 END IF;
                 --
              END LOOP;
              --
              -- TRATA VALOR DO PREMIO
              --
              l_node_valor := DBMS_XMLDOM.appendchild(l_node_val_cobs_agr, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valPremio')));
              --
              FOR cob_index IN l_tab_cob_cas.FIRST..l_tab_cob_cas.LAST
              LOOP
                 --
                 IF l_tab_cob_cas(cob_index).MCA_SELEC_COB = 'S' THEN
                    --
                    l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_cob_cas(cob_index).VAL_PREMIO );
                    l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                    --
                 END IF;
                 --
              END LOOP;
              --
           END IF;
           --
           mx('F', 'TRATA INFORMACEOS DAS COBERTURAS AGRUPADAS DE CASCO');
           --
           -- BUSCA TYPE DE COBERTURAS AGRUPADAS GRATUITAS
           --
           mx('I', 'TRATA INFORMACEOS DAS COBERTURAS AGRUPADAS GRATUITAS');
           --
           l_tab_cob := NULL;
           --
           pp_asigna('cod_agt', l_cod_agt); -- 2.84
           l_tab_cob := fp_bus_coberturas_agrupadas(l_rec_lista_pac.COD_CIA,
                                                l_rec_lista_pac.COD_RAMO,
                                                l_rec_lista_pac.NUM_COTIZACION,
                                                l_rec_lista_pac.NUM_SIMULACION,
                                                l_rec_lista_pac.COD_PACOTE,
                                                l_rec_lista_pac.VAL_VEICULO,
                                                l_rec_lista_pac.FEC_VALIDEZ_TARIFA,
                                                l_rec_lista_pac.VAL_CLAVE_FORMULA,
                                                g_k_cod_campo_cob_agrupada,
                                                trn.SI,
                                                'P') ;
           --
           -- TRATA INFORMACEOS DAS COBERTURAS AGRUPADAS GRATUITAS
           --
           IF l_tab_cob.EXISTS(1) THEN
              --
              FOR cob_index IN l_tab_cob.FIRST..l_tab_cob.LAST
              LOOP
                 --
                 l_node_col_cob := DBMS_XMLDOM.appendchild(l_node_val_cob_pac, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colCoberturasAgrupadas')));
                 --
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'codCobertura')));
                 l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_cob(cob_index).COD_COB );
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                 --
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'nomCobertura')));
                 l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_cob(cob_index).NOM_COB );
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                 --
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'mcaSeleccionCob')));
                 l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_cob(cob_index).MCA_SELEC_COB );
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                 --
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'mcaModificaCapital')));
                 l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_cob(cob_index).MCA_MODIF_CAP );
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                 --
                 l_tab_val_lim_inde := NULL;
                 --
                 l_tab_val_lim_inde := l_tab_cob(cob_index).TAB_VAL_LIM_INDE;
                 --
                 -- TRATA INFORMACOES DO LIMITE DE INDENIZACAO
                 --
                 FOR inde_index IN l_tab_val_lim_inde.FIRST..l_tab_val_lim_inde.LAST
                 LOOP
                       --
                       l_node_lim_max_inde := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valLimiteMaxIndenizacao')));
                       --
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_lim_max_inde, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'codCampo')));
                       l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_lim_inde(inde_index).COD_CAMPO );
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                       --
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_lim_max_inde, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valCampo')));
                       l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_lim_inde(inde_index).VAL_CAMPO );
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                       --
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_lim_max_inde, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'mcaValDefecto')));
                       l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_lim_inde(inde_index).MCA_VAL_DEFEC );
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                       --
                 END LOOP;
                 --
                 l_tab_atri_lista := l_tab_cob(cob_index).TAB_ATRI_LISTA;
                 --
                 l_node_col_atri_lis := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colCoberturas')));
                 --
                 -- TRATA LISTA DE COBERTURAS
                 IF l_tab_atri_lista.EXISTS(1) THEN
                    --
                    FOR atri_lis_index IN l_tab_atri_lista.FIRST..l_tab_atri_lista.LAST
                    LOOP
                       --
                       l_tab_atri_cob := l_tab_atri_lista(atri_lis_index);
                       --
                       -- TRATA LISTA DA LISTA DE COBERTURAS
                       IF l_tab_atri_cob.EXISTS(1) THEN
                          --
                          FOR atri_cob_index IN l_tab_atri_cob.FIRST..l_tab_atri_cob.LAST
                          LOOP
                             --
                             l_node_tip_atri_cob := DBMS_XMLDOM.appendchild(l_node_col_atri_lis, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'coberturas')));
                             --
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_tip_atri_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'codCobertura')));
                             l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_atri_cob(atri_cob_index).VAL_CAMPO );
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                             --
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_tip_atri_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'codCampo')));
                             l_text_campo := DBMS_XMLDOM.createtextnode(l_document, 'SUMA_ASEG_' || l_tab_atri_cob(atri_cob_index).VAL_CAMPO );
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                             --
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_tip_atri_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valCampo')));
                             l_text_campo := DBMS_XMLDOM.createtextnode(l_document, trn.CERO );
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                             --
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_tip_atri_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'txtCampo')));
                             l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_atri_cob(atri_cob_index).TXT_CAMPO );
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                             --
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_tip_atri_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'mcaSeleccionCob')));
                             l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_atri_cob(atri_cob_index).MCA_SELEC );
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                             --
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_tip_atri_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'mcaValDefecto')));
                             l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_atri_cob(atri_cob_index).MCA_SELEC );
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                             --
                          END LOOP;
                          --
                       END IF;
                       --
                    END LOOP;
                    --
                 END IF;
                 --
                 l_tab_val_franq := l_tab_cob(cob_index).TAB_VAL_FRANQ;
                 --
                 -- TRATA LISTA DE FRANQUIA DA COBERTURA
                 IF l_tab_val_franq.COUNT = trn.CERO THEN
                    --
                    l_node_val_franq := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valFranquia')));
                    --
                 ELSE
                    --
                    FOR val_franq_index IN l_tab_val_franq.FIRST..l_tab_val_franq.LAST
                    LOOP
                       --
                       l_node_val_franq := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valFranquia')));
                       --
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_val_franq, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'codCampo')));
                       l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_franq(val_franq_index).COD_CAMPO );
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                       --
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_val_franq, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valCampo')));
                       l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_franq(val_franq_index).VAL_CAMPO );
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                       --
                    END LOOP;
                    --
                 END IF;
                 --
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valPremio')));
                 l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_cob(cob_index).VAL_PREMIO );
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                 --
              END LOOP;
              --
           END IF;
           --
           mx('F', 'TRATA INFORMACEOS DAS COBERTURAS AGRUPADAS GRATUITAS');
           --
           -- BUSCA TYPE DE COBERTURAS AGRUPADAS - v1.63 - ini
           --
           mx('I', 'TRATA INFORMACEOS DAS COBERTURAS AGRUPADAS CONTRATADAS');
           --
           pp_asigna('cod_agt', l_cod_agt); -- 2.84
           l_tab_cob := fp_bus_coberturas_agrupadas(l_rec_lista_pac.COD_CIA,
                                                l_rec_lista_pac.COD_RAMO,
                                                l_rec_lista_pac.NUM_COTIZACION,
                                                l_rec_lista_pac.NUM_SIMULACION,
                                                l_rec_lista_pac.COD_PACOTE,
                                                l_rec_lista_pac.VAL_VEICULO,
                                                l_rec_lista_pac.FEC_VALIDEZ_TARIFA,
                                                l_rec_lista_pac.VAL_CLAVE_FORMULA,
                                                g_k_cod_campo_cob_agrupada,
                                                trn.NO,
                                                'P') ;
           --
           -- TRATA INFORMACEOS DAS COBERTURAS AGRUPADAS ADICIONAIS
           --
           IF l_tab_cob.EXISTS(1) THEN
              --
              FOR cob_index IN l_tab_cob.FIRST..l_tab_cob.LAST
              LOOP
                 --
                 --IF (l_tab_cob(cob_index).COD_COB <> '92' )THEN  --1.85
                 --
                 l_node_col_cob := DBMS_XMLDOM.appendchild(l_node_val_cob_pac, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colCoberturasAgrupadas')));
                 --
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'codCobertura')));
                 l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_cob(cob_index).COD_COB );
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                 --
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'nomCobertura')));
                 l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_cob(cob_index).NOM_COB );
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                 --
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'mcaSeleccionCob')));
                 --
                 l_tab_cob(cob_index).MCA_SELEC_COB := fp_devuelve_mca_contrata_spto(l_tab_cob(cob_index).COD_COB
                                                                                     ,g_k_cod_campo_cob_agrupada
                                                                                     ,l_tab_cob(cob_index).MCA_SELEC_COB);
                 --
                 l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_cob(cob_index).MCA_SELEC_COB );
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                 --
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'mcaModificaCapital')));
                 l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_cob(cob_index).MCA_MODIF_CAP );
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                 --
                 l_tab_val_lim_inde := l_tab_cob(cob_index).TAB_VAL_LIM_INDE;
                 --
                 -- TRATA INFORMACOES DO LIMITE DE INDENIZACAO
                 --
                 FOR inde_index IN l_tab_val_lim_inde.FIRST..l_tab_val_lim_inde.LAST
                 LOOP
                       --
                       l_node_lim_max_inde := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valLimiteMaxIndenizacao')));
                       --
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_lim_max_inde, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'codCampo')));
                       l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_lim_inde(inde_index).COD_CAMPO );
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                       --
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_lim_max_inde, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valCampo')));
                       l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_lim_inde(inde_index).VAL_CAMPO );
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                       --
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_lim_max_inde, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'mcaValDefecto')));
                       l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_lim_inde(inde_index).MCA_VAL_DEFEC );
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                       --
                 END LOOP;
                 --
                 l_tab_atri_lista := l_tab_cob(cob_index).TAB_ATRI_LISTA;
                 --
                 l_node_col_atri_lis := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colCoberturas')));
                 --
                 -- TRATA LISTA DE COBERTURAS
                 --
                 IF l_tab_atri_lista.EXISTS(1) THEN
                    --
                    FOR atri_lis_index IN l_tab_atri_lista.FIRST..l_tab_atri_lista.LAST
                    LOOP
                       --
                       l_tab_atri_cob := l_tab_atri_lista(atri_lis_index);
                       --
                       -- TRATA LISTA DA LISTA DE COBERTURAS
                       --
                       IF l_tab_atri_cob.EXISTS(1) THEN
                          --
                          FOR atri_cob_index IN l_tab_atri_cob.FIRST..l_tab_atri_cob.LAST
                          LOOP
                             --
                             l_node_tip_atri_cob := DBMS_XMLDOM.appendchild(l_node_col_atri_lis, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'coberturas')));
                             --
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_tip_atri_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'codCobertura')));
                             l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_atri_cob(atri_cob_index).VAL_CAMPO );
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                             --
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_tip_atri_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'codCampo')));
                             l_text_campo := DBMS_XMLDOM.createtextnode(l_document, 'SUMA_ASEG_' || l_tab_atri_cob(atri_cob_index).VAL_CAMPO );
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                             --
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_tip_atri_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valCampo')));
                             l_text_campo := DBMS_XMLDOM.createtextnode(l_document, trn.CERO );
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                             --
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_tip_atri_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'txtCampo')));
                             l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_atri_cob(atri_cob_index).TXT_CAMPO );
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                             --
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_tip_atri_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'mcaSeleccionCob')));
                             --
                             l_tab_atri_cob(atri_cob_index).MCA_SELEC := fp_devuelve_mca_contrata_spto(l_tab_atri_cob(atri_cob_index).VAL_CAMPO
                                                                                                      ,NULL
                                                                                                      ,l_tab_atri_cob(atri_cob_index).MCA_SELEC);
                             --
                             l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_atri_cob(atri_cob_index).MCA_SELEC );
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                             --
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_tip_atri_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'mcaValDefecto')));
                             l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_atri_cob(atri_cob_index).MCA_SELEC );
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                             --
                          END LOOP;
                          --
                       END IF;
                       --
                    END LOOP;
                    --
                 END IF;
                 --
                 l_tab_val_franq := l_tab_cob(cob_index).TAB_VAL_FRANQ;
                 --
                 -- TRATA LISTA DE FRANQUIA DA COBERTURA
                 --
                  IF l_tab_val_franq.COUNT = trn.CERO THEN
                    --
                    l_node_val_franq := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valFranquia')));
                    --
                 ELSE
                    --
                    FOR val_franq_index IN l_tab_val_franq.FIRST..l_tab_val_franq.LAST
                    LOOP
                       --
                       l_node_val_franq := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valFranquia')));
                       --
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_val_franq, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'codCampo')));
                       l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_franq(val_franq_index).COD_CAMPO );
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                       --
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_val_franq, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valCampo')));
                       l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_franq(val_franq_index).VAL_CAMPO );
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                       --
                    END LOOP;
                    --
                 END IF;
                 --
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valPremio')));
                 l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_cob(cob_index).VAL_PREMIO );
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                 --
                --END IF;  --1.85
              END LOOP;
              --
           END IF;
           --
           mx('F', 'TRATA INFORMACEOS DAS COBERTURAS AGRUPADAS CONTRATADAS'); -- v1.63 fim
           --
           -- BUSCA TYPE DE COBERTURAS CONTRATADAS
           --
           mx('I', 'TRATA INFORMACEOS DAS COBERTURAS CONTRATADAS');
           --
           l_tab_cob := fp_bus_coberturas(l_rec_lista_pac.COD_CIA,
                                                      l_rec_lista_pac.COD_RAMO,
                                                      l_rec_lista_pac.NUM_COTIZACION,
                                                      l_rec_lista_pac.NUM_SIMULACION,
                                                      l_rec_lista_pac.COD_PACOTE,
                                                      l_rec_lista_pac.COD_TARIFA,
                                                      l_rec_lista_pac.VAL_CLAVE_FORMULA,
                                                      'P');
           --
           -- TRATA INFORMACEOS DAS COBERTURAS CONTRATADAS
           --
           IF l_tab_cob.EXISTS(1) THEN
              --
              FOR cob_index IN l_tab_cob.FIRST..l_tab_cob.LAST
              LOOP
                 --
                 --l_node_col_cob := DBMS_XMLDOM.appendchild(l_node_col_cobs, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colCoberturas')));
                 l_node_col_cob := DBMS_XMLDOM.appendchild(l_node_val_cob_pac, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colCoberturas')));
                 --
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'codCobertura')));
                 l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_cob(cob_index).COD_COB );
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                 --
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'nomCobertura')));
                 l_text_campo := DBMS_XMLDOM.createtextnode(l_document, fp_valores_lista (1, 'NOM_COB', l_tab_cob(cob_index).NOM_COB, l_tab_cob(cob_index).COD_COB) );
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                 --
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'mcaSeleccionCob')));
                 l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_cob(cob_index).MCA_SELEC_COB );
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                 --
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'mcaModificaCapital')));
                 l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_cob(cob_index).MCA_MODIF_CAP );
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                 --
                 l_tab_val_lim_inde := l_tab_cob(cob_index).TAB_VAL_LIM_INDE;
                 --
                 -- TRATA INFORMACOES DO LIMITE DE INDENIZACAO
                 IF l_tab_val_lim_inde.COUNT = trn.CERO THEN
                    --
                    l_node_lim_max_inde := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valLimiteMaxIndenizacao')));
                    --
                 ELSE
                    --
                    FOR inde_index IN l_tab_val_lim_inde.FIRST..l_tab_val_lim_inde.LAST
                    LOOP
                       --
                       l_node_lim_max_inde := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valLimiteMaxIndenizacao')));
                       --
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_lim_max_inde, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'codCampo')));
                       l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_lim_inde(inde_index).COD_CAMPO );
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                       --
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_lim_max_inde, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valCampo')));
                       l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_lim_inde(inde_index).VAL_CAMPO );
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                       --
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_lim_max_inde, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'mcaValDefecto')));
                       l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_lim_inde(inde_index).MCA_VAL_DEFEC );
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                       --
                    END LOOP;
                    --
                 END IF;
                 --
                 l_tab_atri_lista := l_tab_cob(cob_index).TAB_ATRI_LISTA;
                 --
                 l_node_col_atri_lis := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colAtributosLista')));
                 --
                 -- TRATA LISTA DE ATRIBUTOS DA LISTA DA COBERTURA (DV) - LISTA DE LISTA
                 IF l_tab_atri_lista.EXISTS(1) THEN
                    --
                    FOR atri_lis_index IN l_tab_atri_lista.FIRST..l_tab_atri_lista.LAST
                    LOOP
                       --
                       l_tab_atri_cob := l_tab_atri_lista(atri_lis_index);
                       --
                       -- TRATA LISTA DA LISTA DA COBERTURA (LISTA DO DV)
                       IF l_tab_atri_cob.EXISTS(1) THEN
                          --
                          FOR atri_cob_index IN l_tab_atri_cob.FIRST..l_tab_atri_cob.LAST
                          LOOP
                             --
                             l_node_tip_atri_cob := DBMS_XMLDOM.appendchild(l_node_col_atri_lis, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'tipAtributoCob')));
                             --
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_tip_atri_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'codCampo')));
                             l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_atri_cob(atri_cob_index).COD_CAMPO );
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                             --
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_tip_atri_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valCampo')));
                             l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_atri_cob(atri_cob_index).VAL_CAMPO );
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                             --
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_tip_atri_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'txtCampo')));
                             l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_atri_cob(atri_cob_index).TXT_CAMPO );
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                             --
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_tip_atri_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'mcaSeleccionAtributo')));
                             l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_atri_cob(atri_cob_index).MCA_SELEC );
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                             --
                          END LOOP;
                          --
                       END IF;
                       --
                    END LOOP;
                    --
                 END IF;
                 --
                 l_tab_val_franq := l_tab_cob(cob_index).TAB_VAL_FRANQ;
                 --
                 -- TRATA LISTA DE FRANQUIA DA COBERTURA
                 IF l_tab_val_franq.COUNT = trn.CERO THEN
                    --
                    l_node_val_franq := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valFranquia')));
                    --
                 ELSE
                    --
                    FOR val_franq_index IN l_tab_val_franq.FIRST..l_tab_val_franq.LAST
                    LOOP
                       --
                       l_node_val_franq := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valFranquia')));
                       --
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_val_franq, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'codCampo')));
                       l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_franq(val_franq_index).COD_CAMPO );
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                       --
                       IF l_tab_val_franq(val_franq_index).TXT_CAMPO IS NOT NULL THEN
                          --
                          l_node_valor := DBMS_XMLDOM.appendchild(l_node_val_franq, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'txtCampo')));
                          l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_franq(val_franq_index).TXT_CAMPO );
                          l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                          --
                       END IF;
                       --
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_val_franq, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valCampo')));
                       l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_franq(val_franq_index).VAL_CAMPO );
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                       --
                    END LOOP;
                    --
                 END IF;
                 --
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valPremio')));
                 l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_cob(cob_index).VAL_PREMIO );
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                 --
              END LOOP;
              --
           END IF;
           --
           mx('F', 'TRATA INFORMACEOS DAS COBERTURAS CONTRATADAS');
           --
           l_node_val_cobs_adi := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCoberturasAdicionais')));
           --
           -- BUSCA TYPE DE COBERTURAS ADICIONAIS
           --
           mx('I', 'TRATA INFORMACEOS DAS COBERTURAS ADICIONAIS');
           --
           l_tab_cob := fp_bus_coberturas(l_rec_lista_pac.COD_CIA,
                                                      l_rec_lista_pac.COD_RAMO,
                                                      l_rec_lista_pac.NUM_COTIZACION,
                                                      l_rec_lista_pac.NUM_SIMULACION,
                                                      l_rec_lista_pac.COD_PACOTE,
                                                      l_rec_lista_pac.COD_TARIFA,
                                                      l_rec_lista_pac.VAL_CLAVE_FORMULA,
                                                      'A');
           --
           -- TRATA INFORMACEOS DAS COBERTURAS ADICIONAIS
           --
           IF l_tab_cob.EXISTS(1) THEN
              --
              FOR cob_index IN l_tab_cob.FIRST..l_tab_cob.LAST
              LOOP
                 --
                 l_node_col_cob := DBMS_XMLDOM.appendchild(l_node_val_cobs_adi, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colCoberturas')));
                 --
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'codCobertura')));
                 l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_cob(cob_index).COD_COB );
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                 --
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'nomCobertura')));
                 l_text_campo := DBMS_XMLDOM.createtextnode(l_document, fp_valores_lista (1, 'NOM_COB', l_tab_cob(cob_index).NOM_COB, l_tab_cob(cob_index).COD_COB) );
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                 --
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'mcaSeleccionCob')));
                 l_tab_cob(cob_index).MCA_SELEC_COB := fp_devuelve_mca_contrata_spto(l_tab_cob(cob_index).COD_COB
                                                                                    ,NULL
                                                                                    ,l_tab_cob(cob_index).MCA_SELEC_COB);
                 l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_cob(cob_index).MCA_SELEC_COB );
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                 --
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'mcaModificaCapital')));
                 l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_cob(cob_index).MCA_MODIF_CAP );
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                 --
                 l_tab_val_lim_inde := l_tab_cob(cob_index).TAB_VAL_LIM_INDE;
                 --
                 -- TRATA INFORMACOES DO LIMITE DE INDENIZACAO
                 IF l_tab_val_lim_inde.COUNT = trn.CERO THEN
                    --
                    l_node_lim_max_inde := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valLimiteMaxIndenizacao')));
                    --
                 ELSE
                    --
                    FOR inde_index IN l_tab_val_lim_inde.FIRST..l_tab_val_lim_inde.LAST
                    LOOP
                       --
                       l_node_lim_max_inde := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valLimiteMaxIndenizacao')));
                       --
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_lim_max_inde, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'codCampo')));
                       l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_lim_inde(inde_index).COD_CAMPO );
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                       --
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_lim_max_inde, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valCampo')));
                       l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_lim_inde(inde_index).VAL_CAMPO);
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                       --
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_lim_max_inde, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'mcaValDefecto')));
                       l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_lim_inde(inde_index).MCA_VAL_DEFEC );
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                       --
                    END LOOP;
                    --
                 END IF;
                 --
                 l_tab_atri_lista := l_tab_cob(cob_index).TAB_ATRI_LISTA;
                 --
                 l_node_col_atri_lis := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colAtributosLista')));
                 --
                 -- TRATA LISTA DE ATRIBUTOS DA LISTA DA COBERTURA (DV) - LISTA DE LISTA
                 --
                 IF l_tab_atri_lista.EXISTS(1) THEN
                    --
                    FOR atri_lis_index IN l_tab_atri_lista.FIRST..l_tab_atri_lista.LAST
                    LOOP
                       --
                       l_tab_atri_cob := l_tab_atri_lista(atri_lis_index);
                       --
                       -- TRATA LISTA DA LISTA DA COBERTURA (LISTA DO DV)
                       --
                       IF l_tab_atri_cob.EXISTS(1) THEN
                          --
                          FOR atri_cob_index IN l_tab_atri_cob.FIRST..l_tab_atri_cob.LAST
                          LOOP
                             --
                             l_node_tip_atri_cob := DBMS_XMLDOM.appendchild(l_node_col_atri_lis, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'tipAtributoCob')));
                             --l_node_tip_atri_cob := DBMS_XMLDOM.appendchild(l_node_col_tip_atri_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'tipAtributoCob')));
                             --
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_tip_atri_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'codCampo')));
                             l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_atri_cob(atri_cob_index).COD_CAMPO );
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                             --
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_tip_atri_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valCampo')));
                             l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_atri_cob(atri_cob_index).VAL_CAMPO );
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                             --
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_tip_atri_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'txtCampo')));
                             l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_atri_cob(atri_cob_index).TXT_CAMPO );
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                             --
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_tip_atri_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'mcaSeleccionAtributo')));
                             l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_atri_cob(atri_cob_index).MCA_SELEC );
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                             --
                          END LOOP;
                          --
                      END IF;
                      --
                    END LOOP;
                    --
                 END IF;
                 --
                 l_tab_val_franq := l_tab_cob(cob_index).TAB_VAL_FRANQ;
                 --
                 -- TRATA LISTA DE FRANQUIA DA COBERTURA
                 --
                 IF l_tab_val_franq.COUNT = trn.CERO THEN
                    --
                    l_node_val_franq := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valFranquia')));
                    --
                 ELSE
                    --
                    FOR val_franq_index IN l_tab_val_franq.FIRST..l_tab_val_franq.LAST
                    LOOP
                       --
                       l_node_val_franq := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valFranquia')));
                       --l_node_val_franq := DBMS_XMLDOM.appendchild(l_node_col_val_franq, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valFranquia')));
                       --
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_val_franq, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'codCampo')));
                       l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_franq(val_franq_index).COD_CAMPO );
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                       --
                       IF l_tab_val_franq(val_franq_index).TXT_CAMPO IS NOT NULL THEN
                          --
                          l_node_valor := DBMS_XMLDOM.appendchild(l_node_val_franq, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'txtCampo')));
                          l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_franq(val_franq_index).TXT_CAMPO );
                          l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                          --
                       END IF;
                       --
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_val_franq, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valCampo')));
                       l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_franq(val_franq_index).VAL_CAMPO );
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                       --
                    END LOOP;
                    --
                 END IF;
                 --
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valPremio')));
                 l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_cob(cob_index).VAL_PREMIO );
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                 --
              END LOOP;
              --
           ELSE
              --
              l_node_col_cob := DBMS_XMLDOM.appendchild(l_node_val_cobs_adi, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colCoberturas')));
              --
           END IF;
           --
           mx('F', 'TRATA INFORMACEOS DAS COBERTURAS ADICIONAIS');
           --
           --TRATAMENTO PARA COBERTURAS AGRUPADAS ADICIONAIS PARA ENDOSSO
           --
           mx('I', 'TRATAMENTO PARA COBERTURAS AGRUPADAS ADICIONAIS PARA ENDOSSO');
           --
           IF g_tip_mvto_batch = g_k_tip_mvto_batch_endosso THEN
            --
               mx('I', 'TRATA INFORMACEOS DAS COBERTURAS AGRUPADAS DE CASCO ADICIONAIS PARA ENDOSSO');
               --
               -- BUSCA TYPE DE COBERTURAS AGRUPADAS DE CASCO ADICIONAIS PARA ENDOSSO
               --
            l_tab_cob_cas := fp_bus_coberturas_agrupadas(l_rec_lista_pac.COD_CIA,
                                               l_rec_lista_pac.COD_RAMO,
                                               l_rec_lista_pac.NUM_COTIZACION,
                                               l_rec_lista_pac.NUM_SIMULACION,
                                               l_rec_lista_pac.COD_PACOTE,
                                               l_rec_lista_pac.VAL_VEICULO,
                                               l_rec_lista_pac.FEC_VALIDEZ_TARIFA,
                                               l_rec_lista_pac.VAL_CLAVE_FORMULA,
                                               g_k_cod_campo_cob_casco,
                                               trn.NO,
                                               'A') ;
            --
               -- TRATA INFORMACEOS DAS COBERTURAS AGRUPADAS DE CASCO ADICIONAIS PARA ENDOSSO
               --
               IF l_tab_cob_cas.EXISTS(1) THEN
                  --
                  l_node_val_cobs_agr := DBMS_XMLDOM.appendchild(l_node_val_cobs_adi, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colCoberturasAgrupadas')));
                  --
                  l_node_col_cobs_cas := DBMS_XMLDOM.appendchild(l_node_val_cobs_agr, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colCoberturasCasco')));
                  --
                  FOR cob_index IN l_tab_cob_cas.FIRST..l_tab_cob_cas.LAST
                  LOOP
                     --
                     l_node_col_cob := DBMS_XMLDOM.appendchild(l_node_col_cobs_cas, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'coberturasCasco')));
                     --
                     l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'codCobertura')));
                     l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_cob_cas(cob_index).COD_COB );
                     l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                     --
                     l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'nomCobertura')));
                     l_text_campo := DBMS_XMLDOM.createtextnode(l_document, fp_valores_lista (l_rec_lista_pac.COD_CIA
                                                         ,'NOM_COB'
                                                         ,l_tab_cob_cas(cob_index).nom_cob
                                                         ,l_tab_cob_cas(cob_index).COD_COB));
                     --
                     l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                     --
                     l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'mcaSeleccionCob')));
                     -- DEFINICAO DE VALOR DEFAULT PARA COBERTURAS DE CASCO PARA ENDOSSO
                     --
                     l_tab_cob_cas(cob_index).MCA_SELEC_COB := fp_devuelve_mca_contrata_spto(l_tab_cob_cas(cob_index).COD_COB
                                                                                            ,g_k_cod_campo_cob_casco
                                                                                            ,l_tab_cob_cas(cob_index).MCA_SELEC_COB); -- DEFINICAO DE COBERTURA COMO SELECIONADA PARFA ENDOsso
                     --
                     l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_cob_cas(cob_index).MCA_SELEC_COB );
                     l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                     --
                     l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'mcaModificaCapital')));
                     l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_cob_cas(cob_index).MCA_MODIF_CAP );
                     l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                     --
                  END LOOP;
                  --
                  -- TRATA INFORMACOES DO LIMITE DE INDENIZACAO
                  --
                  l_node_lim_max_inde := DBMS_XMLDOM.appendchild(l_node_val_cobs_agr, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valLimiteMaxIndenizacao')));
                  --
                  FOR cob_index IN l_tab_cob_cas.FIRST..l_tab_cob_cas.LAST
                  LOOP
                     --
                     l_tab_val_lim_inde := l_tab_cob_cas(cob_index).TAB_VAL_LIM_INDE;
                     --
                     IF l_tab_cob_cas(cob_index).COD_COB = '1' THEN
                     --
                     FOR inde_index IN l_tab_val_lim_inde.FIRST..l_tab_val_lim_inde.LAST
                     LOOP
                         --
                         l_node_valor := DBMS_XMLDOM.appendchild(l_node_lim_max_inde, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'codCampo')));
                         l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_lim_inde(inde_index).COD_CAMPO );
                         l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                         --
                         l_node_valor := DBMS_XMLDOM.appendchild(l_node_lim_max_inde, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valCampo')));
                         l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_lim_inde(inde_index).VAL_CAMPO );
                         l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                         --
                         l_node_valor := DBMS_XMLDOM.appendchild(l_node_lim_max_inde, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'mcaValDefecto')));
                         l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_lim_inde(inde_index).MCA_VAL_DEFEC );
                         l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                         --
                     END LOOP;
                     --
                     END IF;
                     --
                  END LOOP;
                  --
                  -- TRATA LISTA DE ATRIBUTOS DA LISTA DA COBERTURA
                  --
                  l_node_col_atri_lis := DBMS_XMLDOM.appendchild(l_node_val_cobs_agr, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colAtributosLista')));
                  --
                  FOR cob_index IN l_tab_cob_cas.FIRST..l_tab_cob_cas.LAST
                  LOOP
                     --
                     l_tab_atri_lista := l_tab_cob_cas(cob_index).TAB_ATRI_LISTA;
                     --
                     IF l_tab_cob_cas(cob_index).COD_COB = '1' AND l_tab_atri_lista.COUNT <> trn.CERO THEN
                        --
                        FOR atri_lis_index IN l_tab_atri_lista.FIRST..l_tab_atri_lista.LAST
                        LOOP
                           --
                           l_tab_atri_cob := l_tab_atri_lista(atri_lis_index);
                           --
                           -- TRATA LISTA DA LISTA DA COBERTURA (LISTA DO DV)
                           IF l_tab_atri_cob.EXISTS(1) THEN
                              --
                              FOR atri_cob_index IN l_tab_atri_cob.FIRST..l_tab_atri_cob.LAST
                              LOOP
                                 --
                                 l_node_tip_atri_cob := DBMS_XMLDOM.appendchild(l_node_col_atri_lis, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'tipAtributoCob')));
                                 --
                                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_tip_atri_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'codCampo')));
                                 l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_atri_cob(atri_cob_index).COD_CAMPO );
                                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                                 --
                                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_tip_atri_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valCampo')));
                                 l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_atri_cob(atri_cob_index).VAL_CAMPO );
                                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                                 --
                                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_tip_atri_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'txtCampo')));
                                 l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_atri_cob(atri_cob_index).TXT_CAMPO );
                                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                                 --
                                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_tip_atri_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'mcaSeleccionAtributo')));
                                 l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_atri_cob(atri_cob_index).MCA_SELEC );
                                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                                 --
                              END LOOP;
                              --
                           END IF;
                           --
                        END LOOP;
                        --
                     END IF;
                     --
                  END LOOP;
                  --
                  -- TRATA LISTA DE FRANQUIA DA COBERTURA
                  --
                  l_node_val_franq := DBMS_XMLDOM.appendchild(l_node_val_cobs_agr, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valFranquia')));
                  --
                  FOR cob_index IN l_tab_cob_cas.FIRST..l_tab_cob_cas.LAST
                  LOOP
                     --
                     l_tab_val_franq := l_tab_cob_cas(cob_index).TAB_VAL_FRANQ;
                     --
                     -- TRATA LISTA DE FRANQUIA DA COBERTURA
                     --
                     IF l_tab_cob_cas(cob_index).COD_COB = '1' AND l_tab_val_franq.COUNT <> trn.CERO THEN
                        --
                        FOR val_franq_index IN l_tab_val_franq.FIRST..l_tab_val_franq.LAST
                        LOOP
                           --
                           l_node_valor := DBMS_XMLDOM.appendchild(l_node_val_franq, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'codCampo')));
                           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_franq(val_franq_index).COD_CAMPO );
                           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                           --
                           IF l_tab_val_franq(val_franq_index).TXT_CAMPO IS NOT NULL THEN
                              --
                              l_node_valor := DBMS_XMLDOM.appendchild(l_node_val_franq, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'txtCampo')));
                              l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_franq(val_franq_index).TXT_CAMPO );
                              l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                              --
                           END IF;
                           --
                           l_node_valor := DBMS_XMLDOM.appendchild(l_node_val_franq, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valCampo')));
                           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_franq(val_franq_index).VAL_CAMPO );
                           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                           --
                        END LOOP;
                        --
                     END IF;
                     --
                  END LOOP;
                  --
                  -- TRATA VALOR DO PREMIO
                  --
                  l_node_valor := DBMS_XMLDOM.appendchild(l_node_val_cobs_agr, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valPremio')));
                  --
                  FOR cob_index IN l_tab_cob_cas.FIRST..l_tab_cob_cas.LAST
                  LOOP
                     --
                     IF l_tab_cob_cas(cob_index).COD_COB = '1' THEN
                        --
                        l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_cob_cas(cob_index).VAL_PREMIO );
                        l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                        --
                     END IF;
                     --
                  END LOOP;
                  --
               END IF;
               --
               mx('F', 'TRATA INFORMACEOS DAS COBERTURAS AGRUPADAS DE CASCO ADICIONAIS PARA ENDOSSO');
               --
               -- BUSCA TYPE DE COBERTURAS AGRUPADAS GRATUITAS ADICIONAIS PARA ENDOSSO
               --
               mx('I', 'TRATA INFORMACEOS DAS COBERTURAS AGRUPADAS GRATUITAS ADICIONAIS PARA ENDOSSO');
               --
               l_tab_cob := NULL;
               --
               l_tab_cob := fp_bus_coberturas_agrupadas(l_rec_lista_pac.COD_CIA,
                                                        l_rec_lista_pac.COD_RAMO,
                                                        l_rec_lista_pac.NUM_COTIZACION,
                                                        l_rec_lista_pac.NUM_SIMULACION,
                                                        l_rec_lista_pac.COD_PACOTE,
                                                        l_rec_lista_pac.VAL_VEICULO,
                                                        l_rec_lista_pac.FEC_VALIDEZ_TARIFA,
                                                        l_rec_lista_pac.VAL_CLAVE_FORMULA,
                                                        g_k_cod_campo_cob_agrupada,
                                                        trn.SI,
                                                        'A') ;
               --
               -- TRATA INFORMACEOS DAS COBERTURAS AGRUPADAS GRATUITAS ADICIONAIS PARA ENDOSSO
               --
               IF l_tab_cob.EXISTS(1) THEN
                  --
                  FOR cob_index IN l_tab_cob.FIRST..l_tab_cob.LAST
                  LOOP
                   --
                  l_node_col_cob := DBMS_XMLDOM.appendchild(l_node_val_cobs_adi, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colCoberturasAgrupadas')));
                   --
                   l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'codCobertura')));
                   l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_cob(cob_index).COD_COB );
                   l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                   --
                   l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'nomCobertura')));
                   l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_cob(cob_index).NOM_COB );
                   l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                   --
                   l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'mcaSeleccionCob')));
                  --
                  l_tab_cob(cob_index).MCA_SELEC_COB := fp_devuelve_mca_contrata_spto(l_tab_cob(cob_index).COD_COB
                                                                                     ,g_k_cod_campo_cob_agrupada
                                                                                     ,l_tab_cob(cob_index).MCA_SELEC_COB);
                  l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_cob(cob_index).MCA_SELEC_COB);
                   l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                   --
                   l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'mcaModificaCapital')));
                   l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_cob(cob_index).MCA_MODIF_CAP );
                   l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                   --
                  l_tab_val_lim_inde := NULL;
                  --
                   l_tab_val_lim_inde := l_tab_cob(cob_index).TAB_VAL_LIM_INDE;
                   --
                   -- TRATA INFORMACOES DO LIMITE DE INDENIZACAO
                   --
                  IF l_tab_cob(cob_index).MCA_SELEC_COB = 'S' THEN
                    --
                   FOR inde_index IN l_tab_val_lim_inde.FIRST..l_tab_val_lim_inde.LAST
                   LOOP
                       --
                       l_node_lim_max_inde := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valLimiteMaxIndenizacao')));
                       --
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_lim_max_inde, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'codCampo')));
                       l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_lim_inde(inde_index).COD_CAMPO );
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                       --
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_lim_max_inde, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valCampo')));
                       l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_lim_inde(inde_index).VAL_CAMPO );
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                       --
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_lim_max_inde, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'mcaValDefecto')));
                       l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_lim_inde(inde_index).MCA_VAL_DEFEC );
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                       --
                   END LOOP;
                   --
                  END IF;
                  --
                   l_tab_atri_lista := l_tab_cob(cob_index).TAB_ATRI_LISTA;
                   --
                   l_node_col_atri_lis := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colCoberturas')));
                   --
                   -- TRATA LISTA DE COBERTURAS
                   --
                   IF l_tab_atri_lista.EXISTS(1) THEN
                      --
                      FOR atri_lis_index IN l_tab_atri_lista.FIRST..l_tab_atri_lista.LAST
                      LOOP
                         --
                         l_tab_atri_cob := l_tab_atri_lista(atri_lis_index);
                         --
                         -- TRATA LISTA DA LISTA DE COBERTURAS
                         IF l_tab_atri_cob.EXISTS(1) THEN
                            --
                            FOR atri_cob_index IN l_tab_atri_cob.FIRST..l_tab_atri_cob.LAST
                            LOOP
                               --
                               l_node_tip_atri_cob := DBMS_XMLDOM.appendchild(l_node_col_atri_lis, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'coberturas')));
                               --
                               l_node_valor := DBMS_XMLDOM.appendchild(l_node_tip_atri_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'codCobertura')));
                               l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_atri_cob(atri_cob_index).VAL_CAMPO );
                               l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                               --
                               l_node_valor := DBMS_XMLDOM.appendchild(l_node_tip_atri_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'codCampo')));
                               l_text_campo := DBMS_XMLDOM.createtextnode(l_document, 'SUMA_ASEG_' || l_tab_atri_cob(atri_cob_index).VAL_CAMPO );
                               l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                               --
                               l_node_valor := DBMS_XMLDOM.appendchild(l_node_tip_atri_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valCampo')));
                               l_text_campo := DBMS_XMLDOM.createtextnode(l_document, trn.CERO );
                               l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                               --
                               l_node_valor := DBMS_XMLDOM.appendchild(l_node_tip_atri_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'txtCampo')));
                               l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_atri_cob(atri_cob_index).TXT_CAMPO );
                               l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                               --
                               l_node_valor := DBMS_XMLDOM.appendchild(l_node_tip_atri_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'mcaSeleccionCob')));
                           l_tab_atri_cob(atri_cob_index).MCA_SELEC := fp_devuelve_mca_contrata_spto(l_tab_atri_cob(atri_cob_index).VAL_CAMPO
                                                                                                    ,NULL
                                                                                                    ,l_tab_atri_cob(atri_cob_index).MCA_SELEC);
                               l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_atri_cob(atri_cob_index).MCA_SELEC );

                               l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                               --
                               l_node_valor := DBMS_XMLDOM.appendchild(l_node_tip_atri_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'mcaValDefecto')));
                               l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_atri_cob(atri_cob_index).MCA_SELEC );
                               l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                               --
                            END LOOP;
                            --
                         END IF;
                         --
                      END LOOP;
                      --
                   END IF;
                   --
                   l_tab_val_franq := l_tab_cob(cob_index).TAB_VAL_FRANQ;
                   --
                   -- TRATA LISTA DE FRANQUIA DA COBERTURA
                   IF l_tab_val_franq.COUNT = trn.CERO THEN
                      --
                      l_node_val_franq := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valFranquia')));
                      --
                   ELSE
                      --
                      FOR val_franq_index IN l_tab_val_franq.FIRST..l_tab_val_franq.LAST
                      LOOP
                         --
                         l_node_val_franq := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valFranquia')));
                         --
                         l_node_valor := DBMS_XMLDOM.appendchild(l_node_val_franq, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'codCampo')));
                         l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_franq(val_franq_index).COD_CAMPO );
                         l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                         --
                         l_node_valor := DBMS_XMLDOM.appendchild(l_node_val_franq, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valCampo')));
                         l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_franq(val_franq_index).VAL_CAMPO );
                         l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                         --
                      END LOOP;
                      --
                   END IF;
                   --
                   l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valPremio')));
                   l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_cob(cob_index).VAL_PREMIO );
                   l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                   --
                  END LOOP;
                  --
               END IF;
               --
               mx('F', 'TRATA INFORMACEOS DAS COBERTURAS AGRUPADAS GRATUITAS ADICIONAIS PARA ENDOSSO');
               --
           END IF;
           --
           mx('F', 'TRATAMENTO PARA COBERTURAS AGRUPADAS ADICIONAIS PARA ENDOSSO');
           --
           -- BUSCA TYPE DE COBERTURAS AGRUPADAS
           --
           mx('I', 'TRATA INFORMACEOS DAS COBERTURAS AGRUPADAS ADICIONAIS');
           --
           pp_asigna('cod_agt', l_cod_agt); -- 2.84
           l_tab_cob := fp_bus_coberturas_agrupadas(l_rec_lista_pac.COD_CIA,
                                                l_rec_lista_pac.COD_RAMO,
                                                l_rec_lista_pac.NUM_COTIZACION,
                                                l_rec_lista_pac.NUM_SIMULACION,
                                                l_rec_lista_pac.COD_PACOTE,
                                                l_rec_lista_pac.VAL_VEICULO,
                                                l_rec_lista_pac.FEC_VALIDEZ_TARIFA,
                                                l_rec_lista_pac.VAL_CLAVE_FORMULA,
                                                g_k_cod_campo_cob_agrupada,
                                                trn.NO,
                                                'A') ;
           --
           -- TRATA INFORMACEOS DAS COBERTURAS AGRUPADAS ADICIONAIS
           --
           IF l_tab_cob.EXISTS(1) THEN
              --
              FOR cob_index IN l_tab_cob.FIRST..l_tab_cob.LAST
              LOOP
                 --
                 l_node_col_cob := DBMS_XMLDOM.appendchild(l_node_val_cobs_adi, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colCoberturasAgrupadas')));
                 --
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'codCobertura')));
                 l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_cob(cob_index).COD_COB );
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                 --
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'nomCobertura')));
                 l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_cob(cob_index).NOM_COB );
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                 --
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'mcaSeleccionCob')));
                 --
                 l_tab_cob(cob_index).MCA_SELEC_COB := fp_devuelve_mca_contrata_spto(l_tab_cob(cob_index).COD_COB
                                                                                     ,g_k_cod_campo_cob_agrupada
                                                                                     ,l_tab_cob(cob_index).MCA_SELEC_COB);
                 --
                 l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_cob(cob_index).MCA_SELEC_COB );
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                 --
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'mcaModificaCapital')));
                 l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_cob(cob_index).MCA_MODIF_CAP );
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                 --
                 l_tab_val_lim_inde := l_tab_cob(cob_index).TAB_VAL_LIM_INDE;
                 --
                 -- TRATA INFORMACOES DO LIMITE DE INDENIZACAO
                 --
                 FOR inde_index IN l_tab_val_lim_inde.FIRST..l_tab_val_lim_inde.LAST
                 LOOP
                       --
                       l_node_lim_max_inde := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valLimiteMaxIndenizacao')));
                       --
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_lim_max_inde, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'codCampo')));
                       l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_lim_inde(inde_index).COD_CAMPO );
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                       --
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_lim_max_inde, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valCampo')));
                       l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_lim_inde(inde_index).VAL_CAMPO );
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                       --
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_lim_max_inde, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'mcaValDefecto')));
                       l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_lim_inde(inde_index).MCA_VAL_DEFEC );
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                       --
                 END LOOP;
                 --
                 l_tab_atri_lista := l_tab_cob(cob_index).TAB_ATRI_LISTA;
                 --
                 l_node_col_atri_lis := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colCoberturas')));
                 --
                 -- TRATA LISTA DE COBERTURAS
                 --
                 IF l_tab_atri_lista.EXISTS(1) THEN
                    --
                    FOR atri_lis_index IN l_tab_atri_lista.FIRST..l_tab_atri_lista.LAST
                    LOOP
                       --
                       l_tab_atri_cob := l_tab_atri_lista(atri_lis_index);
                       --
                       -- TRATA LISTA DA LISTA DE COBERTURAS
                       --
                       IF l_tab_atri_cob.EXISTS(1) THEN
                          --
                          FOR atri_cob_index IN l_tab_atri_cob.FIRST..l_tab_atri_cob.LAST
                          LOOP
                             --
                             l_node_tip_atri_cob := DBMS_XMLDOM.appendchild(l_node_col_atri_lis, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'coberturas')));
                             --
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_tip_atri_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'codCobertura')));
                             l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_atri_cob(atri_cob_index).VAL_CAMPO );
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                             --
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_tip_atri_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'codCampo')));
                             l_text_campo := DBMS_XMLDOM.createtextnode(l_document, 'SUMA_ASEG_' || l_tab_atri_cob(atri_cob_index).VAL_CAMPO );
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                             --
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_tip_atri_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valCampo')));
                             l_text_campo := DBMS_XMLDOM.createtextnode(l_document, trn.CERO );
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                             --
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_tip_atri_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'txtCampo')));
                             l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_atri_cob(atri_cob_index).TXT_CAMPO );
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                             --
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_tip_atri_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'mcaSeleccionCob')));
                             --
                             l_tab_atri_cob(atri_cob_index).MCA_SELEC := fp_devuelve_mca_contrata_spto(l_tab_atri_cob(atri_cob_index).VAL_CAMPO
                                                                                                      ,NULL
                                                                                                      ,l_tab_atri_cob(atri_cob_index).MCA_SELEC);
                             --
                             l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_atri_cob(atri_cob_index).MCA_SELEC );
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                             --
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_tip_atri_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'mcaValDefecto')));
                             l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_atri_cob(atri_cob_index).MCA_SELEC );
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                             --
                          END LOOP;
                          --
                       END IF;
                       --
                    END LOOP;
                    --
                 END IF;
                 --
                 l_tab_val_franq := l_tab_cob(cob_index).TAB_VAL_FRANQ;
                 --
                 -- TRATA LISTA DE FRANQUIA DA COBERTURA
                 --
                  IF l_tab_val_franq.COUNT = trn.CERO THEN
                    --
                    l_node_val_franq := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valFranquia')));
                    --
                 ELSE
                    --
                    FOR val_franq_index IN l_tab_val_franq.FIRST..l_tab_val_franq.LAST
                    LOOP
                       --
                       l_node_val_franq := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valFranquia')));
                       --
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_val_franq, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'codCampo')));
                       l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_franq(val_franq_index).COD_CAMPO );
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                       --
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_val_franq, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valCampo')));
                       l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_franq(val_franq_index).VAL_CAMPO );
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                       --
                    END LOOP;
                    --
                 END IF;
                 --
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valPremio')));
                 l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_cob(cob_index).VAL_PREMIO );
                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                 --
              END LOOP;
              --
           END IF;
           --
           mx('F', 'TRATA INFORMACEOS DAS COBERTURAS AGRUPADAS ADICIONAIS');
           --
       IF trn_k_global.devuelve('MCA_PREFERENCIA') = 'S' THEN -- 4.37
             --
             --abre dados
             l_node_lista := DBMS_XMLDOM.appendchild(l_node_dados,
                                                     DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,
                                                                                                    'valFormaPagamento')));
             --
             LOOP
               FETCH l_retorno_forma_pago
                 INTO l_rec_pref_forma_pago;
               --
               EXIT WHEN l_retorno_forma_pago%NOTFOUND; -- v4.15 ini
               --
               --abre dados
               l_node_col_val_pago := DBMS_XMLDOM.appendchild(l_node_lista,
                                                              DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,
                                                                                                             'colValoresCampos')));
               --
               --monta nome do campo
               l_node_codigo := DBMS_XMLDOM.appendchild(l_node_col_val_pago,
                                                        DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,
                                                                                                       g_k_val_campo_codCampo)));
               l_text_campo  := DBMS_XMLDOM.createtextnode(l_document,
                                                           l_rec_pref_forma_pago.cod_forma_pago);
               l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo,
                                                        DBMS_XMLDOM.makenode(l_text_campo));
               --monta valor
               l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_val_pago,
                                                       DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,
                                                                                                      g_k_val_campo_valCampo)));
               l_text_campo := DBMS_XMLDOM.createtextnode(l_document,
                                                          l_rec_pref_forma_pago.nom_forma_pago);
               l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor,
                                                       DBMS_XMLDOM.makenode(l_text_campo));
               --
               l_mca_defecto_forma_pago := fp_bus_forma_pago(g_cod_cia,
                                                             g_cod_ramo,
                                                             l_cod_agt,
                                                             l_rec_pref_forma_pago.cod_forma_pago);
               --monta val_defecto
               l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_val_pago,
                                                       DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,
                                                                                                      'mcaValDefecto')));
               l_text_campo := DBMS_XMLDOM.createtextnode(l_document,
                                                          l_mca_defecto_forma_pago);
               l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor,
                                                       DBMS_XMLDOM.makenode(l_text_campo));
               --
               --
             END LOOP;
             --
             --abre dados
             l_node_lista          := DBMS_XMLDOM.appendchild(l_node_dados,
                                                              DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,
                                                                                                             'valParcelasPagamento')));
             l_node_val_lista_pago := DBMS_XMLDOM.appendchild(l_node_lista,
                                                              DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,
                                                                                                             'colValoresLista')));

             LOOP
               FETCH l_retorno_parcelas_pago
                 INTO l_rec_pref_parcelas_pago;
               --
               EXIT WHEN l_retorno_parcelas_pago%NOTFOUND;
               --
               --abre dados
               l_node_col_val_pago := DBMS_XMLDOM.appendchild(l_node_val_lista_pago,
                                                              DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,
                                                                                                             'colValoresCampos')));
               --
               --monta nome do campo
               l_node_codigo := DBMS_XMLDOM.appendchild(l_node_col_val_pago,
                                                        DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,
                                                                                                       g_k_val_campo_codCampo)));
               l_text_campo  := DBMS_XMLDOM.createtextnode(l_document,
                                                           l_rec_pref_parcelas_pago.cod_forma_pago);
               l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo,
                                                        DBMS_XMLDOM.makenode(l_text_campo));
               --monta valor
               l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_val_pago,
                                                       DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,
                                                                                                      g_k_val_campo_valCampo)));
               l_text_campo := DBMS_XMLDOM.createtextnode(l_document,
                                                          l_rec_pref_parcelas_pago.cod_parcelas_pago);
               l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor,
                                                       DBMS_XMLDOM.makenode(l_text_campo));
               --
               l_mca_defecto_parcela_pago := fp_bus_parcelas_pago(g_cod_cia,
                                                                  g_cod_ramo,
                                                                  l_cod_agt,
                                                                  l_rec_pref_parcelas_pago.cod_forma_pago,
                                                                  l_rec_pref_parcelas_pago.cod_parcelas_pago);
               --monta val_defecto
               l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_val_pago,
                                                       DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,
                                                                                                      'mcaValDefecto')));
               l_text_campo := DBMS_XMLDOM.createtextnode(l_document,
                                                          l_mca_defecto_parcela_pago);
               l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor,
                                                       DBMS_XMLDOM.makenode(l_text_campo));
               --
               --
             END LOOP;
             --
           END IF; --v4.37
       --
           -- TRATAMENTO PARA COBERTURAS BLOQUEADAS PARA ENDOSSO
           --
           mx('I', 'TRATAMENTO PARA COBERTURAS BLOQUEADAS PARA ENDOSSO');
           --
           IF g_tip_mvto_batch = g_k_tip_mvto_batch_endosso THEN
                --
                l_node_val_cobs_blo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCoberturasBloqueadas')));
                --
                -- BUSCA TYPE DE COBERTURAS AGRUPADAS DE CASCO BLOQUEADAS
                --
                mx('I', 'TRATA INFORMACEOS DAS COBERTURAS AGRUPADAS DE CASCO BLOQUEADAS');
                --
                l_tab_cob_cas := fp_bus_coberturas_agrupadas(l_rec_lista_pac.COD_CIA,
                                                            l_rec_lista_pac.COD_RAMO,
                                                            l_rec_lista_pac.NUM_COTIZACION,
                                                            l_rec_lista_pac.NUM_SIMULACION,
                                                            l_rec_lista_pac.COD_PACOTE,
                                                            l_rec_lista_pac.VAL_VEICULO,
                                                            l_rec_lista_pac.FEC_VALIDEZ_TARIFA,
                                                            l_rec_lista_pac.VAL_CLAVE_FORMULA,
                                                            g_k_cod_campo_cob_casco,
                                                            trn.NO,
                                                            'B') ;
                --
                -- TRATA INFORMACEOS DAS COBERTURAS AGRUPADAS DE CASCO BLOQUEADAS
                --
                IF l_tab_cob_cas.EXISTS(1) THEN
                    --
                    l_node_val_cobs_agr := DBMS_XMLDOM.appendchild(l_node_val_cobs_blo, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colCoberturasAgrupadas')));
                    --
                    l_node_col_cobs_cas := DBMS_XMLDOM.appendchild(l_node_val_cobs_agr, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colCoberturasCasco')));
                    --
                    FOR cob_index IN l_tab_cob_cas.FIRST..l_tab_cob_cas.LAST
                    LOOP
                       --
                       l_node_col_cob := DBMS_XMLDOM.appendchild(l_node_col_cobs_cas, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'coberturasCasco')));
                       --
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'codCobertura')));
                       l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_cob_cas(cob_index).COD_COB );
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                       --
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'nomCobertura')));
                       l_text_campo := DBMS_XMLDOM.createtextnode(l_document, fp_valores_lista (l_rec_lista_pac.COD_CIA
                                                                                               ,'NOM_COB'
                                                                                               ,l_tab_cob_cas(cob_index).nom_cob
                                                                                               ,l_tab_cob_cas(cob_index).COD_COB));
                       --
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                       --
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'mcaSeleccionCob')));
                     --l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_cob_cas(cob_index).MCA_SELEC_COB );
                       l_text_campo := DBMS_XMLDOM.createtextnode(l_document, 'N' ); -- DEFINICAO DE COBERTURA BLOQUEADA COMO NAO SELECIONADA
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                       --
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'mcaModificaCapital')));
                       l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_cob_cas(cob_index).MCA_MODIF_CAP );
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                       --
                    END LOOP;
                    --
                    -- TRATA INFORMACOES DO LIMITE DE INDENIZACAO
                    --
                    l_node_lim_max_inde := DBMS_XMLDOM.appendchild(l_node_val_cobs_agr, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valLimiteMaxIndenizacao')));
                    --
                    FOR cob_index IN l_tab_cob_cas.FIRST..l_tab_cob_cas.LAST
                    LOOP
                       --
                       l_tab_val_lim_inde := l_tab_cob_cas(cob_index).TAB_VAL_LIM_INDE;
                       --
                     IF l_tab_cob_cas(cob_index).COD_COB = '1' THEN
                     --
                       FOR inde_index IN l_tab_val_lim_inde.FIRST..l_tab_val_lim_inde.LAST
                       LOOP
                           --
                           l_node_valor := DBMS_XMLDOM.appendchild(l_node_lim_max_inde, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'codCampo')));
                           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_lim_inde(inde_index).COD_CAMPO );
                           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                           --
                           l_node_valor := DBMS_XMLDOM.appendchild(l_node_lim_max_inde, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valCampo')));
                           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_lim_inde(inde_index).VAL_CAMPO );
                           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                           --
                           l_node_valor := DBMS_XMLDOM.appendchild(l_node_lim_max_inde, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'mcaValDefecto')));
                           --l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_lim_inde(inde_index).MCA_VAL_DEFEC );
                           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, 'N' ); -- DEFINICAO DE COBERTURA BLOQUEADA COMO NAO SELECIONADA
                           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                           --
                       END LOOP;
                       --
                     END IF;
                     --
                    END LOOP;
                    --
                    -- TRATA LISTA DE ATRIBUTOS DA LISTA DA COBERTURA
                    --
                    l_node_col_atri_lis := DBMS_XMLDOM.appendchild(l_node_val_cobs_agr, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colAtributosLista')));
                    --
                    FOR cob_index IN l_tab_cob_cas.FIRST..l_tab_cob_cas.LAST
                    LOOP
                       --
                       l_tab_atri_lista := l_tab_cob_cas(cob_index).TAB_ATRI_LISTA;
                       --
                     IF l_tab_cob_cas(cob_index).COD_COB = '1' AND l_tab_atri_lista.COUNT <> trn.CERO THEN
                          --
                          FOR atri_lis_index IN l_tab_atri_lista.FIRST..l_tab_atri_lista.LAST
                          LOOP
                             --
                             l_tab_atri_cob := l_tab_atri_lista(atri_lis_index);
                             --
                             -- TRATA LISTA DA LISTA DA COBERTURA (LISTA DO DV)
                             IF l_tab_atri_cob.EXISTS(1) THEN
                                --
                                FOR atri_cob_index IN l_tab_atri_cob.FIRST..l_tab_atri_cob.LAST
                                LOOP
                                   --
                                   l_node_tip_atri_cob := DBMS_XMLDOM.appendchild(l_node_col_atri_lis, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'tipAtributoCob')));
                                   --
                                   l_node_valor := DBMS_XMLDOM.appendchild(l_node_tip_atri_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'codCampo')));
                                   l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_atri_cob(atri_cob_index).COD_CAMPO );
                                   l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                                   --
                                   l_node_valor := DBMS_XMLDOM.appendchild(l_node_tip_atri_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valCampo')));
                                   l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_atri_cob(atri_cob_index).VAL_CAMPO );
                                   l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                                   --
                                   l_node_valor := DBMS_XMLDOM.appendchild(l_node_tip_atri_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'txtCampo')));
                                   l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_atri_cob(atri_cob_index).TXT_CAMPO );
                                   l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                                   --
                                   l_node_valor := DBMS_XMLDOM.appendchild(l_node_tip_atri_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'mcaSeleccionAtributo')));
                                 --l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_atri_cob(atri_cob_index).MCA_SELEC );
                                 l_text_campo := DBMS_XMLDOM.createtextnode(l_document, 'N' ); -- DEFINICAO DE COBERTURA BLOQUEADA COMO NAO SELECIONADA
                                   l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                                   --
                                END LOOP;
                                --
                             END IF;
                             --
                          END LOOP;
                          --
                       END IF;
                       --
                    END LOOP;
                    --
                    -- TRATA LISTA DE FRANQUIA DA COBERTURA
                    --
                    l_node_val_franq := DBMS_XMLDOM.appendchild(l_node_val_cobs_agr, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valFranquia')));
                    --
                    FOR cob_index IN l_tab_cob_cas.FIRST..l_tab_cob_cas.LAST
                    LOOP
                       --
                       l_tab_val_franq := l_tab_cob_cas(cob_index).TAB_VAL_FRANQ;
                       --
                       -- TRATA LISTA DE FRANQUIA DA COBERTURA
                       --
                     IF l_tab_cob_cas(cob_index).COD_COB = '1' AND l_tab_val_franq.COUNT <> trn.CERO THEN
                          --
                          FOR val_franq_index IN l_tab_val_franq.FIRST..l_tab_val_franq.LAST
                          LOOP
                             --
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_val_franq, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'codCampo')));
                             l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_franq(val_franq_index).COD_CAMPO );
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                             --
                             IF l_tab_val_franq(val_franq_index).TXT_CAMPO IS NOT NULL THEN
                                --
                                l_node_valor := DBMS_XMLDOM.appendchild(l_node_val_franq, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'txtCampo')));
                                l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_franq(val_franq_index).TXT_CAMPO );
                                l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                                --
                             END IF;
                             --
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_val_franq, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valCampo')));
                             l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_franq(val_franq_index).VAL_CAMPO );
                             l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                             --
                          END LOOP;
                          --
                       END IF;
                       --
                    END LOOP;
                    --
                    -- TRATA VALOR DO PREMIO
                    --
                    l_node_valor := DBMS_XMLDOM.appendchild(l_node_val_cobs_agr, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valPremio')));
                    --
                    FOR cob_index IN l_tab_cob_cas.FIRST..l_tab_cob_cas.LAST
                    LOOP
                       --
                     IF l_tab_cob_cas(cob_index).COD_COB = '1' THEN
                          --
                          l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_cob_cas(cob_index).VAL_PREMIO );
                          l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                          --
                       END IF;
                       --
                    END LOOP;
                    --
                END IF;
                --
                mx('F', 'TRATA INFORMACEOS DAS COBERTURAS AGRUPADAS DE CASCO BLOQUEADAS');
                --
                -- BUSCA TYPE DE COBERTURAS AGRUPADAS GRATUITAS BLOQUEADAS PARA ENDOSSO
                --
                mx('I', 'TRATA INFORMACEOS DAS COBERTURAS AGRUPADAS GRATUITAS BLOQUEADAS PARA ENDOSSO');
                --
                l_tab_cob := fp_bus_coberturas_agrupadas(l_rec_lista_pac.COD_CIA,
                                                       l_rec_lista_pac.COD_RAMO,
                                                       l_rec_lista_pac.NUM_COTIZACION,
                                                       l_rec_lista_pac.NUM_SIMULACION,
                                                       l_rec_lista_pac.COD_PACOTE,
                                                       l_rec_lista_pac.VAL_VEICULO,
                                                       l_rec_lista_pac.FEC_VALIDEZ_TARIFA,
                                                       l_rec_lista_pac.VAL_CLAVE_FORMULA,
                                                       g_k_cod_campo_cob_agrupada,
                                                       trn.SI,
                                                       'B') ;
                --
                -- TRATA INFORMACEOS DAS COBERTURAS AGRUPADAS GRATUITAS ADICIONAIS PARA ENDOSSO
                --
                IF l_tab_cob.EXISTS(1) THEN
                  --
                  FOR cob_index IN l_tab_cob.FIRST..l_tab_cob.LAST
                  LOOP
                  --
                  l_node_col_cob := DBMS_XMLDOM.appendchild(l_node_val_cobs_blo, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colCoberturasAgrupadas')));
                  --
                  l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'codCobertura')));
                  l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_cob(cob_index).COD_COB );
                  l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                  --
                  l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'nomCobertura')));
                  l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_cob(cob_index).NOM_COB );
                  l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                  --
                  l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'mcaSeleccionCob')));
                  --l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_cob(cob_index).MCA_SELEC_COB );
                  l_text_campo := DBMS_XMLDOM.createtextnode(l_document, 'N' ); -- DEFINICAO DE COBERTURA BLOQUEADA COMO NAO SELECIONADA
                  l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                  --
                  l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'mcaModificaCapital')));
                  l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_cob(cob_index).MCA_MODIF_CAP );
                  l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                  --
                  l_tab_val_lim_inde := NULL;
                  --
                  l_tab_val_lim_inde := l_tab_cob(cob_index).TAB_VAL_LIM_INDE;
                  --
                  -- TRATA INFORMACOES DO LIMITE DE INDENIZACAO
                  --
                  IF l_tab_cob(cob_index).MCA_SELEC_COB = 'S' THEN
                    --
                    FOR inde_index IN l_tab_val_lim_inde.FIRST..l_tab_val_lim_inde.LAST
                    LOOP
                          --
                          l_node_lim_max_inde := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valLimiteMaxIndenizacao')));
                          --
                          l_node_valor := DBMS_XMLDOM.appendchild(l_node_lim_max_inde, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'codCampo')));
                          l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_lim_inde(inde_index).COD_CAMPO );
                          l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                          --
                          l_node_valor := DBMS_XMLDOM.appendchild(l_node_lim_max_inde, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valCampo')));
                          l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_lim_inde(inde_index).VAL_CAMPO );
                          l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                          --
                          l_node_valor := DBMS_XMLDOM.appendchild(l_node_lim_max_inde, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'mcaValDefecto')));
                          --l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_lim_inde(inde_index).MCA_VAL_DEFEC );
                          l_text_campo := DBMS_XMLDOM.createtextnode(l_document, 'N' ); -- DEFINICAO DE COBERTURA BLOQUEADA COMO NAO SELECIONADA
                          l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                          --
                    END LOOP;
                    --
                  END IF;
                  --
                  l_tab_atri_lista := l_tab_cob(cob_index).TAB_ATRI_LISTA;
                  --
                  l_node_col_atri_lis := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colCoberturas')));
                  --
                  -- TRATA LISTA DE COBERTURAS
                       --
                  IF l_tab_atri_lista.EXISTS(1) THEN
                    --
                    FOR atri_lis_index IN l_tab_atri_lista.FIRST..l_tab_atri_lista.LAST
                    LOOP
                       --
                       l_tab_atri_cob := l_tab_atri_lista(atri_lis_index);
                       --
                       -- TRATA LISTA DA LISTA DE COBERTURAS
                       IF l_tab_atri_cob.EXISTS(1) THEN
                         --
                         FOR atri_cob_index IN l_tab_atri_cob.FIRST..l_tab_atri_cob.LAST
                         LOOP
                           --
                           l_node_tip_atri_cob := DBMS_XMLDOM.appendchild(l_node_col_atri_lis, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'coberturas')));
                           --
                           l_node_valor := DBMS_XMLDOM.appendchild(l_node_tip_atri_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'codCobertura')));
                           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_atri_cob(atri_cob_index).VAL_CAMPO );
                           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                           --
                           l_node_valor := DBMS_XMLDOM.appendchild(l_node_tip_atri_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'codCampo')));
                           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, 'SUMA_ASEG_' || l_tab_atri_cob(atri_cob_index).VAL_CAMPO );
                           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                           --
                           l_node_valor := DBMS_XMLDOM.appendchild(l_node_tip_atri_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valCampo')));
                           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, trn.CERO );
                           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                           --
                           l_node_valor := DBMS_XMLDOM.appendchild(l_node_tip_atri_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'txtCampo')));
                           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_atri_cob(atri_cob_index).TXT_CAMPO );
                           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                           --
                           l_node_valor := DBMS_XMLDOM.appendchild(l_node_tip_atri_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'mcaSeleccionCob')));
                           --l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_atri_cob(atri_cob_index).MCA_SELEC );
                           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, 'N' ); -- DEFINICAO DE COBERTURA BLOQUEADA COMO NAO SELECIONADA
                           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                           --
                           l_node_valor := DBMS_XMLDOM.appendchild(l_node_tip_atri_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'mcaValDefecto')));
                           --l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_atri_cob(atri_cob_index).MCA_SELEC );
                           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, 'N' ); -- DEFINICAO DE COBERTURA BLOQUEADA COMO NAO SELECIONADA
                           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                           --
                         END LOOP;
                         --
                       END IF;
                       --
                    END LOOP;
                    --
                  END IF;
                  --
                  l_tab_val_franq := l_tab_cob(cob_index).TAB_VAL_FRANQ;
                  --
                  -- TRATA LISTA DE FRANQUIA DA COBERTURA
                  IF l_tab_val_franq.COUNT = trn.CERO THEN
                    --
                    l_node_val_franq := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valFranquia')));
                    --
                  ELSE
                    --
                    FOR val_franq_index IN l_tab_val_franq.FIRST..l_tab_val_franq.LAST
                    LOOP
                       --
                       l_node_val_franq := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valFranquia')));
                       --
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_val_franq, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'codCampo')));
                       l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_franq(val_franq_index).COD_CAMPO );
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                       --
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_val_franq, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valCampo')));
                       l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_franq(val_franq_index).VAL_CAMPO );
                       l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                       --
                    END LOOP;
                    --
                  END IF;
                  --
                  l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valPremio')));
                  l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_cob(cob_index).VAL_PREMIO );
                  l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                  --
                  END LOOP;
                  --
                END IF;
                --
                mx('F', 'TRATA INFORMACEOS DAS COBERTURAS AGRUPADAS GRATUITAS BLOQUEADAS PARA ENDOSSO');
                --
                -- BUSCA TYPE DE COBERTURAS AGRUPADAS BLOQUEADAS
                --
                mx('I', 'TRATA INFORMACEOS DAS COBERTURAS AGRUPADAS BLOQUEADAS');
                --
                l_tab_cob := fp_bus_coberturas_agrupadas(l_rec_lista_pac.COD_CIA,
                                                          l_rec_lista_pac.COD_RAMO,
                                                          l_rec_lista_pac.NUM_COTIZACION,
                                                          l_rec_lista_pac.NUM_SIMULACION,
                                                          l_rec_lista_pac.COD_PACOTE,
                                                          l_rec_lista_pac.VAL_VEICULO,
                                                          l_rec_lista_pac.FEC_VALIDEZ_TARIFA,
                                                          l_rec_lista_pac.VAL_CLAVE_FORMULA,
                                                          g_k_cod_campo_cob_agrupada,
                                                          trn.NO,
                                                          'B') ;
                --
                -- TRATA INFORMACEOS DAS COBERTURAS AGRUPADAS BLOQUEADAS
                --
                IF l_tab_cob.EXISTS(1) THEN
                  --
                  FOR cob_index IN l_tab_cob.FIRST..l_tab_cob.LAST
                  LOOP
                     --
                     l_node_col_cob := DBMS_XMLDOM.appendchild(l_node_val_cobs_blo, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colCoberturasAgrupadas')));
                     --
                     l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'codCobertura')));
                     l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_cob(cob_index).COD_COB );
                     l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                     --
                     l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'nomCobertura')));
                     l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_cob(cob_index).NOM_COB );
                     l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                     --
                     l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'mcaSeleccionCob')));
                     --l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_cob(cob_index).MCA_SELEC_COB );
                     l_text_campo := DBMS_XMLDOM.createtextnode(l_document, 'N' ); -- DEFINICAO DE COBERTURA BLOQUEADA COMO NAO SELECIONADA
                     l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                     --
                     l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'mcaModificaCapital')));
                     l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_cob(cob_index).MCA_MODIF_CAP );
                     l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                     --
                     l_tab_val_lim_inde := l_tab_cob(cob_index).TAB_VAL_LIM_INDE;
                     --
                     -- TRATA INFORMACOES DO LIMITE DE INDENIZACAO
                     --
                     FOR inde_index IN l_tab_val_lim_inde.FIRST..l_tab_val_lim_inde.LAST
                     LOOP
                         --
                         l_node_lim_max_inde := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valLimiteMaxIndenizacao')));
                         --
                         l_node_valor := DBMS_XMLDOM.appendchild(l_node_lim_max_inde, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'codCampo')));
                         l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_lim_inde(inde_index).COD_CAMPO );
                         l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                         --
                         l_node_valor := DBMS_XMLDOM.appendchild(l_node_lim_max_inde, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valCampo')));
                         l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_lim_inde(inde_index).VAL_CAMPO );
                         l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                         --
                         l_node_valor := DBMS_XMLDOM.appendchild(l_node_lim_max_inde, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'mcaValDefecto')));
                           --l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_lim_inde(inde_index).MCA_VAL_DEFEC );
                           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, 'N' ); -- DEFINICAO DE COBERTURA BLOQUEADA COMO NAO SELECIONADA
                         l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                         --
                     END LOOP;
                     --
                     l_tab_atri_lista := l_tab_cob(cob_index).TAB_ATRI_LISTA;
                     --
                     l_node_col_atri_lis := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colCoberturas')));
                     --
                     -- TRATA LISTA DE COBERTURAS
                     --
                     IF l_tab_atri_lista.EXISTS(1) THEN
                        --
                        FOR atri_lis_index IN l_tab_atri_lista.FIRST..l_tab_atri_lista.LAST
                        LOOP
                           --
                           l_tab_atri_cob := l_tab_atri_lista(atri_lis_index);
                           --
                           -- TRATA LISTA DA LISTA DE COBERTURAS
                           IF l_tab_atri_cob.EXISTS(1) THEN
                              --
                              FOR atri_cob_index IN l_tab_atri_cob.FIRST..l_tab_atri_cob.LAST
                              LOOP
                                 --
                                 l_node_tip_atri_cob := DBMS_XMLDOM.appendchild(l_node_col_atri_lis, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'coberturas')));
                                 --
                                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_tip_atri_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'codCobertura')));
                                 l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_atri_cob(atri_cob_index).VAL_CAMPO );
                                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                                 --
                                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_tip_atri_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'codCampo')));
                                 l_text_campo := DBMS_XMLDOM.createtextnode(l_document, 'SUMA_ASEG_' || l_tab_atri_cob(atri_cob_index).VAL_CAMPO );
                                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                                 --
                                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_tip_atri_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valCampo')));
                                 l_text_campo := DBMS_XMLDOM.createtextnode(l_document, trn.CERO );
                                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                                 --
                                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_tip_atri_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'txtCampo')));
                                 l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_atri_cob(atri_cob_index).TXT_CAMPO );
                                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                                 --
                                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_tip_atri_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'mcaSeleccionCob')));
                                         --l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_atri_cob(atri_cob_index).MCA_SELEC );
                                         l_text_campo := DBMS_XMLDOM.createtextnode(l_document, 'N' ); -- DEFINICAO DE COBERTURA BLOQUEADA COMO NAO SELECIONADA
                                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                                 --
                                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_tip_atri_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'mcaValDefecto')));
                                         --l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_atri_cob(atri_cob_index).MCA_SELEC );
                                         l_text_campo := DBMS_XMLDOM.createtextnode(l_document, 'N' ); -- DEFINICAO DE COBERTURA BLOQUEADA COMO NAO SELECIONADA
                                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                                 --
                              END LOOP;
                              --
                           END IF;
                           --
                        END LOOP;
                        --
                     END IF;
                     --
                     l_tab_val_franq := l_tab_cob(cob_index).TAB_VAL_FRANQ;
                     --
                     -- TRATA LISTA DE FRANQUIA DA COBERTURA
                     IF l_tab_val_franq.COUNT = trn.CERO THEN
                        --
                        l_node_val_franq := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valFranquia')));
                        --
                     ELSE
                        --
                        FOR val_franq_index IN l_tab_val_franq.FIRST..l_tab_val_franq.LAST
                        LOOP
                           --
                           l_node_val_franq := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valFranquia')));
                           --
                           l_node_valor := DBMS_XMLDOM.appendchild(l_node_val_franq, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'codCampo')));
                           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_franq(val_franq_index).COD_CAMPO );
                           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                           --
                           l_node_valor := DBMS_XMLDOM.appendchild(l_node_val_franq, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valCampo')));
                           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_franq(val_franq_index).VAL_CAMPO );
                           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                           --
                        END LOOP;
                        --
                     END IF;
                     --
                     l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valPremio')));
                     l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_cob(cob_index).VAL_PREMIO );
                     l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                     --
                  END LOOP;
                  --
                END IF;
                --
                mx('F', 'TRATA INFORMACEOS DAS COBERTURAS AGRUPADAS BLOQUEADAS');
                --
                -- BUSCA TYPE DE COBERTURAS BLOQUEADAS
                --
                mx('I', 'TRATA INFORMACEOS DAS COBERTURAS BLOQUEADAS');
                --
                l_tab_cob := fp_bus_coberturas(l_rec_lista_pac.COD_CIA,
                                              l_rec_lista_pac.COD_RAMO,
                                              l_rec_lista_pac.NUM_COTIZACION,
                                              l_rec_lista_pac.NUM_SIMULACION,
                                              l_rec_lista_pac.COD_PACOTE,
                                              l_rec_lista_pac.COD_TARIFA,
                                              l_rec_lista_pac.VAL_CLAVE_FORMULA,
                                              'B');
                --
                -- TRATA INFORMACEOS DAS COBERTURAS BLOQUEADAS
                IF l_tab_cob.EXISTS(1) THEN
                  --
                  FOR cob_index IN l_tab_cob.FIRST..l_tab_cob.LAST
                  LOOP
                     --
                     l_node_col_cob := DBMS_XMLDOM.appendchild(l_node_val_cobs_blo, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colCoberturas')));
                     --
                     l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'codCobertura')));
                     l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_cob(cob_index).COD_COB );
                     l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                     --
                     l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'nomCobertura')));
                     l_text_campo := DBMS_XMLDOM.createtextnode(l_document, fp_valores_lista (1, 'NOM_COB', l_tab_cob(cob_index).NOM_COB, l_tab_cob(cob_index).COD_COB) );
                     l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                     --
                     l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'mcaSeleccionCob')));
                     --l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_cob(cob_index).MCA_SELEC_COB );
                     l_text_campo := DBMS_XMLDOM.createtextnode(l_document, 'N' ); -- DEFINICAO DE COBERTURA BLOQUEADA COMO NAO SELECIONADA
                     l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                     --
                     l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'mcaModificaCapital')));
                     l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_cob(cob_index).MCA_MODIF_CAP );
                     l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                     --
                     l_tab_val_lim_inde := NULL;
                     --
                     l_tab_val_lim_inde := l_tab_cob(cob_index).TAB_VAL_LIM_INDE;
                     --
                     -- TRATA INFORMACOES DO LIMITE DE INDENIZACAO
                     IF l_tab_val_lim_inde.COUNT = trn.CERO THEN
                        --
                        l_node_lim_max_inde := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valLimiteMaxIndenizacao')));
                        --
                     ELSE
                        --
                        FOR inde_index IN l_tab_val_lim_inde.FIRST..l_tab_val_lim_inde.LAST
                        LOOP
                           --
                           l_node_lim_max_inde := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valLimiteMaxIndenizacao')));
                           --
                           l_node_valor := DBMS_XMLDOM.appendchild(l_node_lim_max_inde, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'codCampo')));
                           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_lim_inde(inde_index).COD_CAMPO );
                           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                           --
                           l_node_valor := DBMS_XMLDOM.appendchild(l_node_lim_max_inde, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valCampo')));
                           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_lim_inde(inde_index).VAL_CAMPO );
                           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                           --
                           l_node_valor := DBMS_XMLDOM.appendchild(l_node_lim_max_inde, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'mcaValDefecto')));
                           --l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_lim_inde(inde_index).MCA_VAL_DEFEC );
                           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, 'N' ); -- DEFINICAO DE COBERTURA BLOQUEADA COMO NAO SELECIONADA
                           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                           --
                        END LOOP;
                        --
                     END IF;
                     --
                     l_tab_atri_lista := l_tab_cob(cob_index).TAB_ATRI_LISTA;
                     --
                     l_node_col_atri_lis := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colAtributosLista')));
                     --
                     -- TRATA LISTA DE ATRIBUTOS DA LISTA DA COBERTURA (DV) - LISTA DE LISTA
                     IF l_tab_atri_lista.EXISTS(1) THEN
                        --
                        FOR atri_lis_index IN l_tab_atri_lista.FIRST..l_tab_atri_lista.LAST
                        LOOP
                           --
                           l_tab_atri_cob := l_tab_atri_lista(atri_lis_index);
                           --
                           -- TRATA LISTA DA LISTA DA COBERTURA (LISTA DO DV)
                           IF l_tab_atri_cob.EXISTS(1) THEN
                              --
                              FOR atri_cob_index IN l_tab_atri_cob.FIRST..l_tab_atri_cob.LAST
                              LOOP
                                 --
                                 l_node_tip_atri_cob := DBMS_XMLDOM.appendchild(l_node_col_atri_lis, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'tipAtributoCob')));
                                 --l_node_tip_atri_cob := DBMS_XMLDOM.appendchild(l_node_col_tip_atri_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'tipAtributoCob')));
                                 --
                                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_tip_atri_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'codCampo')));
                                 l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_atri_cob(atri_cob_index).COD_CAMPO );
                                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                                 --
                                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_tip_atri_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valCampo')));
                                 l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_atri_cob(atri_cob_index).VAL_CAMPO );
                                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                                 --
                                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_tip_atri_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'txtCampo')));
                                 l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_atri_cob(atri_cob_index).TXT_CAMPO );
                                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                                 --
                                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_tip_atri_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'mcaSeleccionAtributo')));
                                     --l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_atri_cob(atri_cob_index).MCA_SELEC );
                                     l_text_campo := DBMS_XMLDOM.createtextnode(l_document, 'N' ); -- DEFINICAO DE COBERTURA BLOQUEADA COMO NAO SELECIONADA
                                 l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                                 --
                              END LOOP;
                              --
                           END IF;
                           --
                        END LOOP;
                        --
                     END IF;
                     --
                     l_tab_val_franq := l_tab_cob(cob_index).TAB_VAL_FRANQ;
                     --
                     -- TRATA LISTA DE FRANQUIA DA COBERTURA
                     IF l_tab_val_franq.COUNT = trn.CERO THEN
                        --
                        l_node_val_franq := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valFranquia')));
                        --
                     ELSE
                        --
                        FOR val_franq_index IN l_tab_val_franq.FIRST..l_tab_val_franq.LAST
                        LOOP
                           --
                           l_node_val_franq := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valFranquia')));
                           --l_node_val_franq := DBMS_XMLDOM.appendchild(l_node_col_val_franq, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valFranquia')));
                           --
                           l_node_valor := DBMS_XMLDOM.appendchild(l_node_val_franq, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'codCampo')));
                           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_franq(val_franq_index).COD_CAMPO );
                           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                           --
                           IF l_tab_val_franq(val_franq_index).TXT_CAMPO IS NOT NULL THEN
                              --
                              l_node_valor := DBMS_XMLDOM.appendchild(l_node_val_franq, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'txtCampo')));
                              l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_franq(val_franq_index).TXT_CAMPO );
                              l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                              --
                           END IF;
                           --
                           l_node_valor := DBMS_XMLDOM.appendchild(l_node_val_franq, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valCampo')));
                           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_val_franq(val_franq_index).VAL_CAMPO );
                           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                           --
                        END LOOP;
                        --
                     END IF;
                     --
                     l_node_valor := DBMS_XMLDOM.appendchild(l_node_col_cob, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'valPremio')));
                     l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_tab_cob(cob_index).VAL_PREMIO );
                     l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                     --
                  END LOOP;
                  --
                ELSE
                  --
                  l_node_col_cob := DBMS_XMLDOM.appendchild(l_node_val_cobs_blo, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colCoberturas')));
                  --
                END IF;
                --
                mx('F', 'TRATA INFORMACEOS DAS COBERTURAS BLOQUEADAS');
                --
           END IF;
           --
           mx('F', 'TRATAMENTO PARA COBERTURAS BLOQUEADAS PARA ENDOSSO');
           --
        END LOOP;
        --
        l_xml_lista := DBMS_XMLDOM.getxmltype(l_document);
        DBMS_XMLDOM.freedocument(l_document);
        p_clob_lista := l_xml_lista.getclobval;
        --
        mx('F', 'p_gerar_xml_detalhe_pacote');
        --
   END p_gerar_xml_detalhe_pacote;
   --
   /* ------------------------------------------------------
   || transforma resultado do processamento em CLOB de XML
   */ ------------------------------------------------------
    --
    PROCEDURE p_gerar_xml_uso_categoria(p_retorno       IN ref_cursor,
                                        p_clob_lista    OUT CLOB)
    IS
       --
       l_retorno_xml   ref_cursor;
       l_rec_lista_pac rec_dados_uso;
       l_xml_lista     XMLTYPE;
       l_document      DBMS_XMLDOM.DOMDOCUMENT;
       l_node_dados    DBMS_XMLDOM.DOMNODE;
       l_node_lista    DBMS_XMLDOM.DOMNODE;
       l_node_codigo   DBMS_XMLDOM.DOMNODE;
       l_node_valor    DBMS_XMLDOM.DOMNODE;
       l_text_campo    DBMS_XMLDOM.DOMTEXT;
       --

    BEGIN
       --
       mx('I', 'p_gerar_xml_uso_categoria');
       --
       l_retorno_xml := p_retorno;
       l_document    := DBMS_XMLDOM.newdomdocument;
       l_node_lista  := DBMS_XMLDOM.makenode(l_document);
       --
       LOOP FETCH l_retorno_xml INTO l_rec_lista_pac;
          --
          EXIT WHEN l_retorno_xml%NOTFOUND;
          --
          --abre dados
          l_node_lista := DBMS_XMLDOM.makenode(l_document);
          l_node_lista := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresLista')));
          --abre dados
          l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
          --monta nome do campo
          l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
          l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_pac.NOM_CAMPO_COD_CATEGORIA);
          l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
          --monta valor
          l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
          l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_pac.COD_CATEGORIA );
          l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
          --abre dados
          l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
          --monta nome do campo
          l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
          l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_pac.NOM_CAMPO_NOM_CATEGORIA);
          l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
          --monta valor
          l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
          l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_pac.NOM_CATEGORIA );
          l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
          --abre dados
          l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
          --monta nome do campo
          l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
          l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_pac.NOM_CAMPO_COD_USO_VEHI);
          l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
          --monta valor
          l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
          l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_pac.COD_USO_VEHI );
          l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
          --abre dados
          l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
          --monta nome do campo
          l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
          l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_pac.NOM_CAMPO_NOM_COD_USO_VEHI);
          l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
          --monta valor
          l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
          l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_pac.NOM_COD_USO_VEHI );
          l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
          --abre dados
          l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
          --monta nome do campo
          l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
          l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_pac.NOM_CAMPO_MCA_ISENCAO_IMPOSTO);
          l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
          --monta valor
          l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
          l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_pac.MCA_ISENCAO_IMPOSTO );
          l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
          --
       END LOOP;

       --
       l_xml_lista := DBMS_XMLDOM.getxmltype(l_document);
       DBMS_XMLDOM.freedocument(l_document);
       p_clob_lista := l_xml_lista.getclobval;
       --
       mx('F', 'p_gerar_xml_uso_categoria');
       --
    END p_gerar_xml_uso_categoria;

    --
     /* ------------------------------------------------------
     || transforma resultado do processamento em CLOB de XML
     */ ------------------------------------------------------
     --
     PROCEDURE p_gerar_xml_campo_unico(p_retorno        IN ref_cursor,
                                       p_clob_lista     OUT CLOB)
     IS
        --
        l_retorno_xml     ref_cursor;
    --I 1.60
    l_rec_lista_campo rec_lista_campo;
    --l_rec_lista_campo rec_lista_pref_pago;
    --F 1.60
        l_xml_lista       XMLTYPE;
        l_document        DBMS_XMLDOM.DOMDOCUMENT;
        l_node_dados      DBMS_XMLDOM.DOMNODE;
        l_node_lista      DBMS_XMLDOM.DOMNODE;
        l_node_codigo     DBMS_XMLDOM.DOMNODE;
        l_node_valor      DBMS_XMLDOM.DOMNODE;
        l_text_campo      DBMS_XMLDOM.DOMTEXT;
        --

     BEGIN
        --
        mx('I', 'p_gerar_xml_campo_unico');
        --
        l_retorno_xml := p_retorno;
        --
        mx('-', '1.1');
        --
        l_document    := DBMS_XMLDOM.newdomdocument;
        --
        mx('-', '1.2');
        --
        l_node_lista   := DBMS_XMLDOM.makenode(l_document);
        --
        mx('-', '1.3');
        --
        LOOP FETCH l_retorno_xml INTO l_rec_lista_campo;
           --
           mx('-', 'LOOP FETCH');
           mx('-', 'l_rec_lista_campo.cod_Campo: ' || l_rec_lista_campo.cod_campo);
           mx('-', 'l_rec_lista_campo.val_campo: ' || l_rec_lista_campo.val_campo);
           --
           EXIT WHEN l_retorno_xml%NOTFOUND;
           --abre dados
           l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
           --monta codigo
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
           l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_campo.cod_Campo);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
           --monta valor
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_campo.val_campo );
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
           --I 1.60
           --monta mca_defecto
           --l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_mcaValDefecto)));
           --l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_campo.mca_defecto );
           --l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
           --F 1.60
           --
        END LOOP;
    --
        IF p_retorno%ISOPEN THEN
         --
          CLOSE p_retorno;
         --
        END IF;
        --
        mx('-', '1.4');
        --
        l_xml_lista := DBMS_XMLDOM.getxmltype(l_document);
        --
        mx('-', '1.5');
        --
        DBMS_XMLDOM.freedocument(l_document);
        --
        mx('-', '1.6');
        --
        p_clob_lista := l_xml_lista.getclobval;
        --
        mx('-', '1.7');
        --
        mx('F', 'p_gerar_xml_campo_unico');
        --
     EXCEPTION
       WHEN OTHERS
       THEN
         --
         IF l_retorno_xml%ISOPEN THEN
           --
           CLOSE l_retorno_xml;
           --
         END IF;
         --
         mx('F', 'p_gerar_xml_campo_unico - Exception: ' || SQLERRM);
         --
     END p_gerar_xml_campo_unico;

     --
     /* ------------------------------------------------------
     || transforma resultado do processamento em CLOB de XML
     */ ------------------------------------------------------
     --
     PROCEDURE p_gerar_xml_campos_corretor(p_retorno        IN ref_cursor,
                                           p_clob_lista     OUT CLOB)
     IS
        --
        l_retorno_xml    ref_cursor;
        l_rec_lista_corr rec_campos_corretor;
        l_xml_lista      XMLTYPE;
        l_document       DBMS_XMLDOM.DOMDOCUMENT;
        l_node_dados     DBMS_XMLDOM.DOMNODE;
        l_node_lista     DBMS_XMLDOM.DOMNODE;
        l_node_codigo    DBMS_XMLDOM.DOMNODE;
        l_node_valor     DBMS_XMLDOM.DOMNODE;
        l_text_campo     DBMS_XMLDOM.DOMTEXT;
        --

     BEGIN
        --
        mx('I', 'p_gerar_xml_campos_corretor');
        --
        l_retorno_xml := p_retorno;
        l_document    := DBMS_XMLDOM.newdomdocument;
        l_node_lista  := DBMS_XMLDOM.makenode(l_document);
        --
        LOOP FETCH l_retorno_xml INTO l_rec_lista_corr;
           --
           EXIT WHEN l_retorno_xml%NOTFOUND;
           --abre dados
           l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
           l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_corr.NOM_CAMPO_NOM_TERCERO_AGT);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
           --monta valor
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_corr.NOM_TERCERO_AGT );
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
           --monta codigo
           l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
           l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_corr.NOM_CAMPO_TLF_NUMERO_AGT);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
           --monta valor
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_corr.TLF_NUMERO_AGT );
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
           --monta codigo
           l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
           l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_corr.NOM_CAMPO_COD_CAMPANHA_VCR);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
           --monta valor
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_corr.COD_CAMPANHA_VCR );
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
           --monta codigo
           l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
           l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_corr.NOM_CAMPO_MCA_SICREDI);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
           --monta valor
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_corr.MCA_SICREDI );
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
           -- I 1.52
           --monta codigo
           l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
           l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_corr.NOM_CAMPO_PCT_AGT_NPR);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));

           --monta valor
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_corr.PCT_AGT_NPR );
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
           -- F 1.52
           --
           -- I 3.77
           --monta codigo
           l_node_dados  := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,  g_k_val_campo_codCampo)));
           l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_corr.NOM_CAMPO_EMAIL);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
           --monta valor
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_corr.EMAIL);
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
           -- F 3.77
           --
           l_node_dados  := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,  g_k_val_campo_codCampo)));
           l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_corr.NOM_CAMPO_COD_DOCUM_SUSEP);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
           --monta valor
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_corr.COD_DOCUM_SUSEP);
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
           --
           l_node_dados  := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos'))); -- JORGE MARIO RESIDENDIAL INI
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,  g_k_val_campo_codCampo)));
           l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_corr.NOM_CAMPO_COD_DOCUM);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
           --monta valor
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_corr.COD_DOCUM);
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo)); -- JORGE MARIO RESIDENDIAL FIN v.4.98
           --
        END LOOP;
           --
        IF p_retorno%ISOPEN THEN
         --
          CLOSE p_retorno;
         --
        END IF;
        --
        l_xml_lista := DBMS_XMLDOM.getxmltype(l_document);
        DBMS_XMLDOM.freedocument(l_document);
        p_clob_lista := l_xml_lista.getclobval;
        --
        mx('F', 'p_gerar_xml_campos_corretor');
        --
     END p_gerar_xml_campos_corretor;

     --
     /* ------------------------------------------------------
     || transforma resultado do processamento em CLOB de XML
     */ ------------------------------------------------------
     --
     PROCEDURE p_gerar_xml_campos_cotacao(p_retorno        IN ref_cursor,
                                          p_clob_lista     OUT CLOB)
     IS
        --
        l_retorno_xml   ref_cursor;
        l_rec_lista_cot rec_campos_cotacao;
        l_xml_lista     XMLTYPE;
        l_document      DBMS_XMLDOM.DOMDOCUMENT;
        l_node_dados    DBMS_XMLDOM.DOMNODE;
        l_node_lista    DBMS_XMLDOM.DOMNODE;
        l_node_codigo   DBMS_XMLDOM.DOMNODE;
        l_node_valor    DBMS_XMLDOM.DOMNODE;
        l_text_campo    DBMS_XMLDOM.DOMTEXT;
        --

     BEGIN
        --
        mx('I', 'p_gerar_xml_campos_cotacao');
        --
        l_retorno_xml := p_retorno;
        l_document   := DBMS_XMLDOM.newdomdocument;
        l_node_lista := DBMS_XMLDOM.makenode(l_document);
        --
        LOOP FETCH l_retorno_xml INTO l_rec_lista_cot;
           --
           EXIT WHEN l_retorno_xml%NOTFOUND;
           --abre dados
           l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));

           --monta codigo
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
           l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_cot.NOM_COLUMNA);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
           --monta valor
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_cot.VAL_COLUMNA );
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
           --
        END LOOP;

        --
        --valorLista.DELETE;
        l_xml_lista := DBMS_XMLDOM.getxmltype(l_document);
        DBMS_XMLDOM.freedocument(l_document);
        p_clob_lista := l_xml_lista.getclobval;
        --
        mx('F', 'p_gerar_xml_campos_cotacao');
        --
     END p_gerar_xml_campos_cotacao;

     --
     /* ------------------------------------------------------
     || transforma resultado do processamento em CLOB de XML
     */ ------------------------------------------------------
     --
     PROCEDURE p_gerar_xml_dados_veiculo(p_retorno        IN ref_cursor,
                                         p_clob_lista     OUT CLOB)
     IS
        --
        l_retorno_xml    ref_cursor;
        l_rec_lista_veic rec_dados_veiculo;
        l_rec_lista_veic_2 rec_dados_veiculo_2; --2.98
        l_xml_lista      XMLTYPE;
        l_document       DBMS_XMLDOM.DOMDOCUMENT;
        l_node_dados     DBMS_XMLDOM.DOMNODE;
        l_node_lista     DBMS_XMLDOM.DOMNODE;
        l_node_codigo    DBMS_XMLDOM.DOMNODE;
        l_node_valor     DBMS_XMLDOM.DOMNODE;
        l_text_campo     DBMS_XMLDOM.DOMTEXT;
        --

    --1.40 INI
    FUNCTION fp_habilita_blindagem  (p_cod_cia          IN  G9999992.cod_cia           %TYPE
                                        ,p_cod_ramo         IN  G9999992.cod_ramo          %TYPE
                                        ,p_cod_tip_vehi     IN  a2000020.val_campo         %TYPE)
        RETURN a2000020.val_campo%TYPE AS
        --
        BEGIN
          --
          mx('I', 'fp_habilita_blindagem');
          --
          pp_asigna('fec_validez'
                   ,NVL(TO_CHAR(fp_ref_devuelve_f('fec_validez')
                               ,trn.FORMATO_FECHA)
                       ,TO_CHAR(TRUNC(sysdate)
                               ,trn.FORMATO_FECHA)));
          --
          pp_inicializa_variables;
          --
          IF trn_k_df_cmn_nwt_xx_vrb_cnc.f_row_val_exist(p_vrb_nam => 'COD_TIP_VEHI_226'
                                                        ,p_cnc_vrb_val => p_cod_tip_vehi)
          THEN
            --
            RETURN ea_k_231_utils.f_recupera_constante(p_cod_cia   => p_cod_cia
                                                      ,p_cod_campo => 'AUTO_CAMINHAO');
            --
          ELSIF trn_k_df_cmn_nwt_xx_vrb_cnc.f_row_val_exist(p_vrb_nam => 'COD_TIP_VEHI_229'
                                                           ,p_cnc_vrb_val => p_cod_tip_vehi)
          THEN
            --
            RETURN ea_k_231_utils.f_recupera_constante(p_cod_cia   => p_cod_cia
                                                      ,p_cod_campo => 'AUTO_DUAS_RODAS');
            --
          ELSE
            --
            RETURN ea_k_231_utils.f_recupera_constante(p_cod_cia   => p_cod_cia
                                                      ,p_cod_campo => 'AUTO_ONLINE');
            --
          END IF;
          --
          mx('F', 'fp_habilita_blindagem');
          --
        END fp_habilita_blindagem;
    --1.40 FIM
     BEGIN
        --
        mx('I', 'p_gerar_xml_dados_veiculo');
        --
        l_retorno_xml := p_retorno;
        l_document   := DBMS_XMLDOM.newdomdocument;
        l_node_lista := DBMS_XMLDOM.makenode(l_document);
        --
        IF g_existe_g2109042_vcr = 'TRUE'  THEN  --3.70
          -- I 2.98
          IF g_existe_num_serie OR g_existe_num_matricula THEN

             LOOP FETCH l_retorno_xml INTO l_rec_lista_veic_2;
                --
                EXIT WHEN l_retorno_xml%NOTFOUND;
                --abre dados
                l_node_lista := DBMS_XMLDOM.makenode(l_document);
                l_node_lista := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresLista')));
                --abre dados
                l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
                --monta nome do campo
                l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
                l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_veic_2.NOM_CAMPO_COD_FIPE);
                l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
                --monta valor
                l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
                l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_veic_2.COD_FIPE );
                l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                --abre dados
                l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
                --monta codigo
                l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
                l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_veic_2.NOM_CAMPO_COD_MOLICAR);
                l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
                --monta valor
                l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
                l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_veic_2.COD_MOLICAR );
                l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                --abre dados
                l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
                --monta codigo
                l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
                l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_veic_2.NOM_CAMPO_COD_MARCA);
                l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
                --monta valor
                l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
                l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_veic_2.COD_MARCA );
                l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                --abre dados
                l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
                --monta codigo
                l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
                l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_veic_2.NOM_CAMPO_COD_MODELO);
                l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
                --monta valor
                l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
                l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_veic_2.COD_MODELO );
                l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                --monta codigo
                l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
                --monta codigo
                l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
                l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_veic_2.NOM_CAMPO_COD_SUB_MODELO);
                l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
                --monta valor
                l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
                l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_veic_2.COD_SUB_MODELO );
                l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                --monta codigo
                l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
                --monta codigo
                l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
                l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_veic_2.NOM_CAMPO_ANIO_SUB_MODELO);
                l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
                --monta valor
                l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
                l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_veic_2.ANIO_SUB_MODELO);
                l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                --monta codigo
                l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
                --monta codigo
                l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
                l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_veic_2.NOM_CAMPO_COD_ANO_FABR);
                l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
                --monta valor
                l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
                l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_veic_2.COD_ANO_FABR);
                l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                --monta codigo
                l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
                --monta codigo
                l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
                l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_veic_2.NOM_CAMPO_VAL_SUB_MODELO);
                l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
                --monta valor
                l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
                l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_veic_2.VAL_SUB_MODELO);
                l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                --monta codigo
                l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
                --monta codigo
                l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
                l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_veic_2.NOM_CAMPO_NOM_MODELO_SUBMODELO);
                l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
                --monta valor
                l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
                l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_veic_2.NOM_MODELO_SUBMODELO);
                l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                --monta codigo
                l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
                --monta codigo
                l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
                l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_veic_2.NOM_CAMPO_COD_MADRE);
                l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
                --monta valor
                l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
                l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_veic_2.COD_MADRE);
                l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                --monta codigo
                l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
                --monta codigo
                l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
                l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_veic_2.NOM_CAMPO_COD_CATEGORIA);
                l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
                --monta valor
                l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
                l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_veic_2.COD_CATEGORIA);
                l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
             -- I 2.98
                --monta codigo
                l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,'colValoresCampos')));
                --monta codigo
                l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_codCampo)));
                l_text_campo  := DBMS_XMLDOM.createtextnode(l_document,l_rec_lista_veic_2.NOM_CAMPO_NUM_SERIE_MATRICULA);
                l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo,DBMS_XMLDOM.makenode(l_text_campo));
                --monta valor
                l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_valCampo)));
                l_text_campo := DBMS_XMLDOM.createtextnode(l_document,l_rec_lista_veic_2.NUM_SERIE_MATRICULA);
                l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor,DBMS_XMLDOM.makenode(l_text_campo));
             -- F 2.98

            -- 1.40 INI
                l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
                --
                l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
                l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, 'TIP_PRODUTO');
                l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
                --monta valor
                l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
                l_text_campo := DBMS_XMLDOM.createtextnode(l_document, fp_habilita_blindagem(fp_devuelve_n('cod_cia')
                                                                                            ,fp_devuelve_n('cod_ramo')
                                                                                            ,l_rec_lista_veic_2.COD_CATEGORIA));
                l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));

                -- 1.40 FIM
   /*             --monta codigo
                l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
                --monta codigo
                l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
                l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_veic_2.NOM_CAMPO_NUM_PORTAS);
                l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
                --monta valor
                l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
                l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_veic_2.NUM_PORTAS);
                l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                --monta codigo
                l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
                --monta codigo
                l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
                l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_veic_2.NOM_CAMPO_NUM_PASSAGEIROS);
                l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
                --monta valor
                l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
                l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_veic_2.NUM_PASSAGEIROS);
                l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                --monta codigo
                l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
                --monta codigo
                l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
                l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_veic_2.NOM_CAMPO_COD_CLASSE);
                l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
                --monta valor
                l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
                l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_veic_2.COD_CLASSE);
                l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                --monta codigo
                l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
                --monta codigo
                l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
                l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_veic_2.NOM_CAMPO_QTDE_IRREGULAR);
                l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
                --monta valor
                l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
                l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_veic_2.NUM_QTDE_IRREGULAR);
                l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                --monta codigo
                l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
                --monta codigo
                l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
                l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_veic_2.NOM_CAMPO_FEC_CONSULTA);
                l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
                --monta valor
                l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
                l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_veic_2.FEC_CONSULTA);
                l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                --monta codigo
                l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
                --monta codigo
                l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
                l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_veic_2.NOM_CAMPO_RETORNO_SERVICO);
                l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
                --monta valor
                l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
                l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_veic_2.RETORNO_SERVICO);
                l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                --monta codigo
                l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
                --monta codigo
                l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
                l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_veic_2.NOM_CAMPO_NOM_MARCA);
                l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
                --monta valor
                l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
                l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_veic_2.NOM_MARCA);
                l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));*/
             END LOOP;

          ELSE
          -- F 2.98
             LOOP FETCH l_retorno_xml INTO l_rec_lista_veic;
                --
                EXIT WHEN l_retorno_xml%NOTFOUND;
                --abre dados
                l_node_lista := DBMS_XMLDOM.makenode(l_document);
                l_node_lista := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresLista')));
                --abre dados
                l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
                --monta nome do campo
                l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
                l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_veic.NOM_CAMPO_COD_FIPE);
                l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
                --monta valor
                l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
                l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_veic.COD_FIPE );
                l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                --abre dados
                l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
                --monta codigo
                l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
                l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_veic.NOM_CAMPO_COD_MOLICAR);
                l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
                --monta valor
                l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
                l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_veic.COD_MOLICAR );
                l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                --abre dados
                l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
                --monta codigo
                l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
                l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_veic.NOM_CAMPO_COD_MARCA);
                l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
                --monta valor
                l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
                l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_veic.COD_MARCA );
                l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                --abre dados
                l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
                --monta codigo
                l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
                l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_veic.NOM_CAMPO_COD_MODELO);
                l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
                --monta valor
                l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
                l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_veic.COD_MODELO );
                l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                --monta codigo
                l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
                --monta codigo
                l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
                l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_veic.NOM_CAMPO_COD_SUB_MODELO);
                l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
                --monta valor
                l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
                l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_veic.COD_SUB_MODELO );
                l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                --monta codigo
                l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
                --monta codigo
                l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
                l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_veic.NOM_CAMPO_ANIO_SUB_MODELO);
                l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
                --monta valor
                l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
                l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_veic.ANIO_SUB_MODELO);
                l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                --monta codigo
                l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
                --monta codigo
                l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
                l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_veic.NOM_CAMPO_COD_ANO_FABR);
                l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
                --monta valor
                l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
                l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_veic.COD_ANO_FABR);
                l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                --monta codigo
                l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
                --monta codigo
                l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
                l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_veic.NOM_CAMPO_VAL_SUB_MODELO);
                l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
                --monta valor
                l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
                l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_veic.VAL_SUB_MODELO);
                l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                --monta codigo
                l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
                --monta codigo
                l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
                l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_veic.NOM_CAMPO_NOM_MODELO_SUBMODELO);
                l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
                --monta valor
                l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
                l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_veic.NOM_MODELO_SUBMODELO);
                l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                --monta codigo
                l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
                --monta codigo
                l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
                l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_veic.NOM_CAMPO_COD_MADRE);
                l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
                --monta valor
                l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
                l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_veic.COD_MADRE);
                l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                --monta codigo
                l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
                --monta codigo
                l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
                l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_veic.NOM_CAMPO_COD_CATEGORIA);
                l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
                --monta valor
                l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
                l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_veic.COD_CATEGORIA);
                l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
            -- 1.40 INI
                l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
                --
                l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
                l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, 'TIP_PRODUTO');
                l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
                --monta valor
                l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
                l_text_campo := DBMS_XMLDOM.createtextnode(l_document, fp_habilita_blindagem(fp_devuelve_n('cod_cia')
                                                                                            ,fp_devuelve_n('cod_ramo')
                                                                                            ,l_rec_lista_veic.COD_CATEGORIA));
                l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                -- 1.40 FIM
   /*             --monta codigo
                l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
                --monta codigo
                l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
                l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_veic.NOM_CAMPO_NUM_PORTAS);
                l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
                --monta valor
                l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
                l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_veic.NUM_PORTAS);
                l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                --monta codigo
                l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
                --monta codigo
                l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
                l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_veic.NOM_CAMPO_NUM_PASSAGEIROS);
                l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
                --monta valor
                l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
                l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_veic.NUM_PASSAGEIROS);
                l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                --monta codigo
                l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
                --monta codigo
                l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
                l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_veic.NOM_CAMPO_COD_CLASSE);
                l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
                --monta valor
                l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
                l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_veic.COD_CLASSE);
                l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                --monta codigo
                l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
                --monta codigo
                l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
                l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_veic.NOM_CAMPO_QTDE_IRREGULAR);
                l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
                --monta valor
                l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
                l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_veic.NUM_QTDE_IRREGULAR);
                l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                --monta codigo
                l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
                --monta codigo
                l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
                l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_veic.NOM_CAMPO_FEC_CONSULTA);
                l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
                --monta valor
                l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
                l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_veic.FEC_CONSULTA);
                l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                --monta codigo
                l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
                --monta codigo
                l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
                l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_veic.NOM_CAMPO_RETORNO_SERVICO);
                l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
                --monta valor
                l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
                l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_veic.RETORNO_SERVICO);
                l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                --monta codigo
                l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
                --monta codigo
                l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
                l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_veic.NOM_CAMPO_NOM_MARCA);
                l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
                --monta valor
                l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
                l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_veic.NOM_MARCA);
                l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));*/
              END LOOP;
           END IF; -- 2.98
          --
          l_xml_lista := DBMS_XMLDOM.getxmltype(l_document);
          DBMS_XMLDOM.freedocument(l_document);
          p_clob_lista := l_xml_lista.getclobval;
          --
      END IF; --3.70
       --
        mx('F', 'p_gerar_xml_dados_veiculo');
        --
     END p_gerar_xml_dados_veiculo;

     --
     /* ------------------------------------------------------
     || transforma resultado do processamento em CLOB de XML
     */ ------------------------------------------------------
     --
     PROCEDURE p_gerar_xml_dados_plano_pagto(p_retorno        IN ref_cursor,
                                             p_clob_lista     OUT CLOB)
     IS
        --
        TYPE rec_dados_plan_pago IS RECORD(cod_fracc_pago     a1009213_vcr.cod_plan_pago%TYPE,
                                           num_cuotas         a1009213_vcr.num_cuotas   %TYPE,
                                           tip_gestor         a1009213_vcr.tip_gestor   %TYPE,
                                           nom_mca_juros      a2000020.val_campo        %TYPE,
                                           imp_primera_cuota  c2990700.imp_recibo       %TYPE,
                                           imp_otras_cuotas   c2990700.imp_recibo       %TYPE,
                                           imp_encargos       c2990700.imp_interes      %TYPE,
                                           imp_total          c2990700.imp_recibo       %TYPE,
                                           imp_liquido        c2990700.imp_neta         %TYPE,
                                           imp_iof            c2990700.imp_imptos       %TYPE,
                                           mca_defecto        VARCHAR2(1)); --1.54

        --
        l_nom_desc_plan_pago a2000020.val_campo%TYPE;
        l_val_primera_cuota  a2000020.val_campo%TYPE;
        l_val_otras_cuotas   a2000020.val_campo%TYPE;
        l_val_encargos       a2000020.val_campo%TYPE;
        l_val_imp_total      a2000020.val_campo%TYPE;
        l_val_liquido        a2000020.val_campo%TYPE;
        l_val_iof            a2000020.val_campo%TYPE;
        --
        l_mca_defecto        VARCHAR2(1); --1.54
        --
        l_retorno_xml         ref_cursor;
        l_rec_lista_plan_pago rec_dados_plan_pago;
        l_xml_lista           XMLTYPE;
        l_document            DBMS_XMLDOM.DOMDOCUMENT;
        l_node_dados          DBMS_XMLDOM.DOMNODE;
        l_node_lista          DBMS_XMLDOM.DOMNODE;
        l_node_codigo         DBMS_XMLDOM.DOMNODE;
        l_node_valor          DBMS_XMLDOM.DOMNODE;
        l_text_campo          DBMS_XMLDOM.DOMTEXT;
        --
        FUNCTION fpp_formata_valor(p_val_numerico NUMBER)
           RETURN VARCHAR2
        IS
           --
           l_val_formato a2000020.val_campo%TYPE;
           --

        BEGIN
           --
           IF p_val_numerico = trn.CERO THEN
              --
              l_val_formato := '-';
              --
           ELSE
              --
              l_val_formato := 'R$ '|| TO_CHAR(p_val_numerico, 'FM999G999G999D90', 'nls_numeric_characters='',.''');
              --

           END IF;

       --
           RETURN l_val_formato;
           --
        END fpp_formata_valor;

        --

     BEGIN
        --
        mx('I', 'p_gerar_xml_dados_plano_pagto');
        --
        l_retorno_xml := p_retorno;
        l_document   := DBMS_XMLDOM.newdomdocument;
        l_node_lista := DBMS_XMLDOM.makenode(l_document);
        --
        LOOP FETCH l_retorno_xml INTO l_rec_lista_plan_pago;
           --
           EXIT WHEN l_retorno_xml%NOTFOUND;
           --
           -- formata dados
           l_nom_desc_plan_pago := l_rec_lista_plan_pago.num_cuotas || 'x ' || l_rec_lista_plan_pago.nom_mca_juros;
           l_val_primera_cuota  := fpp_formata_valor(l_rec_lista_plan_pago.imp_primera_cuota);
           l_val_otras_cuotas   := fpp_formata_valor(l_rec_lista_plan_pago.imp_otras_cuotas);
           l_val_encargos       := fpp_formata_valor(l_rec_lista_plan_pago.imp_encargos);
           l_val_imp_total      := fpp_formata_valor(l_rec_lista_plan_pago.imp_total);
           l_val_liquido        := fpp_formata_valor(l_rec_lista_plan_pago.imp_liquido);
           l_val_iof            := fpp_formata_valor(l_rec_lista_plan_pago.imp_iof);
           l_mca_defecto        := l_rec_lista_plan_pago.mca_defecto; --1.54
           --abre dados
           l_node_lista := DBMS_XMLDOM.makenode(l_document);
           l_node_lista := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresLista')));
           --abre dados
           l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
           --monta nome do campo
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
           l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, 'COD_FRACC_PAGO');
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
           --monta valor
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_plan_pago.cod_fracc_pago );
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
                      --abre dados
           l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
           --monta nome do campo
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
           l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, 'TIP_GESTOR');
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
           --monta valor
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_plan_pago.tip_gestor);
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
           --abre dados
           l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
           --monta nome do campo
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
           l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, 'NOM_FRACC_PAGO');
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
           --monta valor
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_nom_desc_plan_pago);
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
           --abre dados
           l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
           --monta nome do campo
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
           l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, 'VAL_PRIMERA_CUOTA');
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
           --monta valor
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_val_primera_cuota);
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
           --abre dados
           l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
           --monta nome do campo
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
           l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, 'VAL_OTRAS_CUOTAS');
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
           --monta valor
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_val_otras_cuotas);
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
           --abre dados
           l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
           --monta nome do campo
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
           l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, 'VAL_ENCARGOS');
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
           --monta valor
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_val_encargos);
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
           --abre dados
           l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
           --monta nome do campo
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
           l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, 'VAL_IMP_TOTAL');
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
           --monta valor
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_val_imp_total);
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
           --abre dados
           l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
           --monta nome do campo
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
           l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, 'VAL_LIQUIDO');
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
           --monta valor
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_val_liquido);
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
           --abre dados
           l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
           --monta nome do campo
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
           l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, 'VAL_IOF');
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
           --monta valor
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_val_iof);
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
           --
           --I 1.54
           --abre dados
           l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));

            --monta nome do campo
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
           l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, 'MCA_DEFECTO');
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
           --monta valor
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_mca_defecto);
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));

           --F 1.54
        END LOOP;
        --
        l_xml_lista := DBMS_XMLDOM.getxmltype(l_document);
        DBMS_XMLDOM.freedocument(l_document);
        p_clob_lista := l_xml_lista.getclobval;
        --
        mx('F', 'p_gerar_xml_dados_plano_pagto');
        --
     END p_gerar_xml_dados_plano_pagto;

     --
     /* ------------------------------------------------------
     || transforma resultado do processamento em CLOB de XML
     */ ------------------------------------------------------
     --
     PROCEDURE p_gerar_xml_mensagem(p_retorno        IN ref_cursor,
                                    p_clob_lista     OUT CLOB)
     IS
        --
        l_retorno_xml   ref_cursor;
        l_xml_lista     XMLTYPE;
        l_document      DBMS_XMLDOM.DOMDOCUMENT;
        l_node_dados    DBMS_XMLDOM.DOMNODE;
        l_node_lista    DBMS_XMLDOM.DOMNODE;
        l_node_codigo   DBMS_XMLDOM.DOMNODE;
        l_node_valor    DBMS_XMLDOM.DOMNODE;
        l_text_campo    DBMS_XMLDOM.DOMTEXT;
        --
        TYPE rec_mensagem IS RECORD (cod_campo                      VARCHAR2(30),
                                     des_Mensagem                   VARCHAR2(350),
                                     tip_Mensagem                   VARCHAR2(80));

        --
        l_rec_mensagem  rec_mensagem;
        --

     BEGIN
        --
        mx('I', 'p_gerar_xml_mensagem');
        --
        l_retorno_xml := p_retorno;
        l_document    := DBMS_XMLDOM.newdomdocument;
        l_node_lista  := DBMS_XMLDOM.makenode(l_document);
        --
        LOOP FETCH l_retorno_xml INTO l_rec_mensagem;
           ---
           EXIT WHEN l_retorno_xml%NOTFOUND;
           --abre dados
           l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colMensagemValidacao')));
           --monta codigo
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
           l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_mensagem.cod_Campo);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
           --monta valor
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'desMensagem')));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_mensagem.des_mensagem );
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
           --monta valor
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'tipMensagem')));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_mensagem.tip_mensagem );
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
           --
        END LOOP;
        --
        l_xml_lista := DBMS_XMLDOM.getxmltype(l_document);
        DBMS_XMLDOM.freedocument(l_document);
        p_clob_lista := l_xml_lista.getclobval;
        --
        mx('F', 'p_gerar_xml_mensagem');
        --
     END p_gerar_xml_mensagem;

     --
     /* ------------------------------------------------------
     || transforma resultado do processamento em CLOB de XML
     */ ------------------------------------------------------
     --
     PROCEDURE p_gerar_xml_segurado(p_retorno        IN ref_cursor,
                                    p_clob_lista     OUT CLOB)
     IS
        --
        l_retorno_xml   ref_cursor;
        l_rec_lista_seg rec_dados_segurado;
        l_xml_lista     XMLTYPE;
        l_document      DBMS_XMLDOM.DOMDOCUMENT;
        l_node_dados    DBMS_XMLDOM.DOMNODE;
        l_node_lista    DBMS_XMLDOM.DOMNODE;
        l_node_codigo   DBMS_XMLDOM.DOMNODE;
        l_node_valor    DBMS_XMLDOM.DOMNODE;
        l_text_campo    DBMS_XMLDOM.DOMTEXT;
        --

     BEGIN
        --
        mx('I', 'p_gerar_xml_segurado');
        --
        l_retorno_xml := p_retorno;
        --
        mx('-', '1.1');
        --
        l_document   := DBMS_XMLDOM.newdomdocument;
        --
        mx('-', '1.2');
        --
        l_node_lista := DBMS_XMLDOM.makenode(l_document);
        --
        mx('-', '1.3');
        --
        LOOP FETCH l_retorno_xml INTO l_rec_lista_seg;
           --
           mx('-', 'LOOP FETCH l_retorno_xml');
           --
           EXIT WHEN l_retorno_xml%NOTFOUND;
           --abre dados
           mx('-', 'abre dados');
           --
           l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
           --monta codigo
           mx('-', 'NOM_CAMPO_NOM_TERCERO: ' || l_rec_lista_seg.NOM_CAMPO_NOM_TERCERO);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
           l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_seg.NOM_CAMPO_NOM_TERCERO);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
           --monta valor
           mx('-', 'NOM_TERCERO: '||l_rec_lista_seg.NOM_TERCERO);
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_seg.NOM_TERCERO );
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
           --abre dados
           mx('-', 'abre dados');
           l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
           --monta codigo
           mx('-', 'NOM_CAMPO_FEC_NASCIMENTO: '||l_rec_lista_seg.NOM_CAMPO_FEC_NASCIMENTO);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
           l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_seg.NOM_CAMPO_FEC_NASCIMENTO);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
           --monta valor
           mx('-', 'FEC_NASCIMENTO: '||TO_CHAR(l_rec_lista_seg.FEC_NASCIMENTO, trn.FORMATO_FECHA));
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, TO_CHAR(l_rec_lista_seg.FEC_NASCIMENTO, trn.FORMATO_FECHA));
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
           --abre dados
           mx('-', 'abre dados');
           l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
           --monta codigo
           mx('-', 'NOM_CAMPO_TLF_MOVIL: '||l_rec_lista_seg.NOM_CAMPO_TLF_MOVIL);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
           l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_seg.NOM_CAMPO_TLF_MOVIL);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
           --monta valor
           mx('-', 'TLF_MOVIL: '||l_rec_lista_seg.TLF_MOVIL);
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_seg.TLF_MOVIL );
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
           --abre dados
           mx('-', 'abre dados');
           l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
           --monta codigo
           mx('-', 'NOM_CAMPO_TLF_NUMERO: '||l_rec_lista_seg.NOM_CAMPO_TLF_NUMERO);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
           l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_seg.NOM_CAMPO_TLF_NUMERO);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
           --monta valor
           mx('-', 'TLF_NUMERO: '||l_rec_lista_seg.TLF_NUMERO);
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_seg.TLF_NUMERO );
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
           --monta codigo
           mx('-', 'abre dados');
           l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
           --monta codigo
           mx('-', 'NOM_CAMPO_TLF_NUMERO_COM: '||l_rec_lista_seg.NOM_CAMPO_TLF_NUMERO_COM);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
           l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_seg.NOM_CAMPO_TLF_NUMERO_COM);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
           --monta valor
           mx('-', 'TLF_NUMERO_COM: '||l_rec_lista_seg.TLF_NUMERO_COM);
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_seg.TLF_NUMERO_COM );
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
           --monta codigo
           mx('-', 'abre dados');
           l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
           --monta codigo
           mx('-', 'NOM_CAMPO_EMAIL: '||l_rec_lista_seg.NOM_CAMPO_EMAIL);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
           l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_seg.NOM_CAMPO_EMAIL);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
           --monta valor
           mx('-', 'EMAIL: '||l_rec_lista_seg.EMAIL);
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_seg.EMAIL);
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
           --monta codigo
           mx('-', 'abre dados');
           l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
           --monta codigo
           mx('-', 'NOM_CAMPO_MCA_AUTORIZA_SMS: '||l_rec_lista_seg.NOM_CAMPO_MCA_AUTORIZA_SMS);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
           l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_seg.NOM_CAMPO_MCA_AUTORIZA_SMS);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
           --monta valor
           mx('-', 'MCA_AUTORIZA_SMS: '||l_rec_lista_seg.MCA_AUTORIZA_SMS);
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_seg.MCA_AUTORIZA_SMS);
           --abre dados
           mx('-', 'abre dados');
           l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
           --monta codigo
           mx('-', 'NOM_CAMPO_SEXO: '||l_rec_lista_seg.NOM_CAMPO_SEXO);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
           l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_seg.NOM_CAMPO_SEXO);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
           --monta valor
           mx('-', 'SEXO: '||l_rec_lista_seg.SEXO);
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_seg.SEXO );
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
           --abre dados
           mx('-', 'abre dados');
           l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
           --monta codigo
           mx('-', 'NOM_CAMPO_ESTADO_CIVIL: '||l_rec_lista_seg.NOM_CAMPO_ESTADO_CIVIL);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
           l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_seg.NOM_CAMPO_ESTADO_CIVIL);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
           --monta valor
           mx('-', 'ESTADO_CIVIL: '||l_rec_lista_seg.ESTADO_CIVIL);
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_seg.ESTADO_CIVIL );
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
            --INI AMARCO
            --abre dados
           mx('-', 'abre dados');
           l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
           --monta codigo
           mx('-', 'NOM_CAMPO_TIP_ACT_ECONOMICAL: '||l_rec_lista_seg.NOM_CAMPO_TIP_ACT_ECONOMICA);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
           l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_seg.NOM_CAMPO_TIP_ACT_ECONOMICA);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
           --monta valor
           mx('-', 'TIP_ACT_ECONOMICA: '||l_rec_lista_seg.TIP_ACT_ECONOMICA);
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_seg.TIP_ACT_ECONOMICA );
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
            --abre dados
           mx('-', 'abre dados');
           l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
           --monta codigo
           mx('-', 'NOM_CAMPO_DESC_ACT_ECONOMICA: '||l_rec_lista_seg.NOM_CAMPO_DESC_ACT_ECONOMICA);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
           l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_seg.NOM_CAMPO_DESC_ACT_ECONOMICA);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
           --monta valor
           mx('-', 'DESC_ACT_ECONOMICA: '||l_rec_lista_seg.DESC_ACT_ECONOMICA);
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_seg.DESC_ACT_ECONOMICA );
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
           --
        END LOOP;

        --
        mx('-', '1.4');
        --
        l_xml_lista := DBMS_XMLDOM.getxmltype(l_document);
        --
        mx('-', '1.5');
        --
        DBMS_XMLDOM.freedocument(l_document);
        --
        mx('-', '1.6');
        --
        p_clob_lista := l_xml_lista.getclobval;
        --
        mx('F', 'p_gerar_xml_segurado');
        --
     EXCEPTION
       WHEN OTHERS
       THEN
         --
         mx('F', 'p_gerar_xml_segurado - [E]: ' || SQLERRM);
         --
         IF l_retorno_xml%ISOPEN
         THEN
           --
           CLOSE l_retorno_xml;
           --
         END IF;
         --
     END p_gerar_xml_segurado;
--
     /* ------------------------------------------------------
     || transforma resultado do processamento em CLOB de XML
     */ ------------------------------------------------------
     --
     PROCEDURE p_gerar_xml_conductor(p_retorno        IN ref_cursor,      --5.35
                                     p_clob_lista     OUT CLOB)
     IS
        --
        l_retorno_xml   ref_cursor;
        l_rec_lista_seg rec_dados_segurado;
        l_xml_lista     XMLTYPE;
        l_document      DBMS_XMLDOM.DOMDOCUMENT;
        l_node_dados    DBMS_XMLDOM.DOMNODE;
        l_node_lista    DBMS_XMLDOM.DOMNODE;
        l_node_codigo   DBMS_XMLDOM.DOMNODE;
        l_node_valor    DBMS_XMLDOM.DOMNODE;
        l_text_campo    DBMS_XMLDOM.DOMTEXT;
        --

     BEGIN
        --
        mx('I', 'p_gerar_xml_conductor');
        --
        l_retorno_xml := p_retorno;
        --
        mx('-', '1.1');
        --
        l_document   := DBMS_XMLDOM.newdomdocument;
        --
        mx('-', '1.2');
        --
        l_node_lista := DBMS_XMLDOM.makenode(l_document);
        --
        mx('-', '1.3');
        --
        LOOP FETCH l_retorno_xml INTO l_rec_lista_seg;
           --
           mx('-', 'LOOP FETCH l_retorno_xml');
           --
           EXIT WHEN l_retorno_xml%NOTFOUND;
           --abre dados
           mx('-', 'abre dados');
           --
           l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
           --monta codigo
           mx('-', 'NOM_CAMPO_NOM_TERCERO: ' || l_rec_lista_seg.NOM_CAMPO_NOM_TERCERO);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
           l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_seg.NOM_CAMPO_NOM_TERCERO);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
           --monta valor
           mx('-', 'NOM_TERCERO: '||l_rec_lista_seg.NOM_TERCERO);
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_seg.NOM_TERCERO );
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
           --abre dados
           mx('-', 'abre dados');
           l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
           --monta codigo
           mx('-', 'NOM_CAMPO_FEC_NASCIMENTO: '||l_rec_lista_seg.NOM_CAMPO_FEC_NASCIMENTO);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
           l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_seg.NOM_CAMPO_FEC_NASCIMENTO);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
           --monta valor
           mx('-', 'FEC_NASCIMENTO: '||TO_CHAR(l_rec_lista_seg.FEC_NASCIMENTO, trn.FORMATO_FECHA));
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, TO_CHAR(l_rec_lista_seg.FEC_NASCIMENTO, trn.FORMATO_FECHA));
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
           --abre dados
           mx('-', 'abre dados');
           l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
           --monta codigo
           mx('-', 'NOM_CAMPO_TLF_MOVIL: '||l_rec_lista_seg.NOM_CAMPO_TLF_MOVIL);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
           l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_seg.NOM_CAMPO_TLF_MOVIL);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
           --monta valor
           mx('-', 'TLF_MOVIL: '||l_rec_lista_seg.TLF_MOVIL);
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_seg.TLF_MOVIL );
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
           --abre dados
           mx('-', 'abre dados');
           l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
           --monta codigo
           mx('-', 'NOM_CAMPO_TLF_NUMERO: '||l_rec_lista_seg.NOM_CAMPO_TLF_NUMERO);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
           l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_seg.NOM_CAMPO_TLF_NUMERO);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
           --monta valor
           mx('-', 'TLF_NUMERO: '||l_rec_lista_seg.TLF_NUMERO);
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_seg.TLF_NUMERO );
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
           --monta codigo
           mx('-', 'abre dados');
           l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
           --monta codigo
           mx('-', 'NOM_CAMPO_TLF_NUMERO_COM: '||l_rec_lista_seg.NOM_CAMPO_TLF_NUMERO_COM);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
           l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_seg.NOM_CAMPO_TLF_NUMERO_COM);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
           --monta valor
           mx('-', 'TLF_NUMERO_COM: '||l_rec_lista_seg.TLF_NUMERO_COM);
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_seg.TLF_NUMERO_COM );
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
           --monta codigo
           mx('-', 'abre dados');
           l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
           --monta codigo
           mx('-', 'NOM_CAMPO_EMAIL: '||l_rec_lista_seg.NOM_CAMPO_EMAIL);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
           l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_seg.NOM_CAMPO_EMAIL);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
           --monta valor
           mx('-', 'EMAIL: '||l_rec_lista_seg.EMAIL);
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_seg.EMAIL);
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
           --monta codigo
           mx('-', 'abre dados');
           l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
           --monta codigo
           mx('-', 'NOM_CAMPO_MCA_AUTORIZA_SMS: '||l_rec_lista_seg.NOM_CAMPO_MCA_AUTORIZA_SMS);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
           l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_seg.NOM_CAMPO_MCA_AUTORIZA_SMS);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
           --monta valor
           mx('-', 'MCA_AUTORIZA_SMS: '||l_rec_lista_seg.MCA_AUTORIZA_SMS);
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_seg.MCA_AUTORIZA_SMS);
           --abre dados
           mx('-', 'abre dados');
           l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
           --monta codigo
           mx('-', 'NOM_CAMPO_SEXO: '||l_rec_lista_seg.NOM_CAMPO_SEXO);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
           l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_seg.NOM_CAMPO_SEXO);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
           --monta valor
           mx('-', 'SEXO: '||l_rec_lista_seg.SEXO);
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_seg.SEXO );
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
           --abre dados
           mx('-', 'abre dados');
           l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
           --monta codigo
           mx('-', 'NOM_CAMPO_ESTADO_CIVIL: '||l_rec_lista_seg.NOM_CAMPO_ESTADO_CIVIL);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
           l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_seg.NOM_CAMPO_ESTADO_CIVIL);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
           --monta valor
           mx('-', 'ESTADO_CIVIL: '||l_rec_lista_seg.ESTADO_CIVIL);
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_seg.ESTADO_CIVIL );
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
            --INI AMARCO
            --abre dados
           mx('-', 'abre dados');
           l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
           --monta codigo
           mx('-', 'NOM_CAMPO_TIP_ACT_ECONOMICAL: '||l_rec_lista_seg.NOM_CAMPO_TIP_ACT_ECONOMICA);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
           l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_seg.NOM_CAMPO_TIP_ACT_ECONOMICA);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
           --monta valor
           mx('-', 'TIP_ACT_ECONOMICA: '||l_rec_lista_seg.TIP_ACT_ECONOMICA);
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_seg.TIP_ACT_ECONOMICA );
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
            --abre dados
           mx('-', 'abre dados');
           l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
           --monta codigo
           mx('-', 'NOM_CAMPO_DESC_ACT_ECONOMICA: '||l_rec_lista_seg.NOM_CAMPO_DESC_ACT_ECONOMICA);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
           l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_seg.NOM_CAMPO_DESC_ACT_ECONOMICA);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
           --monta valor
           mx('-', 'DESC_ACT_ECONOMICA: '||l_rec_lista_seg.DESC_ACT_ECONOMICA);
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_seg.DESC_ACT_ECONOMICA );
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
           --
        END LOOP;

        --
        mx('-', '1.4');
        --
        l_xml_lista := DBMS_XMLDOM.getxmltype(l_document);
        --
        mx('-', '1.5');
        --
        DBMS_XMLDOM.freedocument(l_document);
        --
        mx('-', '1.6');
        --
        p_clob_lista := l_xml_lista.getclobval;
        --
        mx('F', 'p_gerar_xml_conductor');
        --
     EXCEPTION
       WHEN OTHERS
       THEN
         --
         mx('F', 'p_gerar_xml_conductor - [E]: ' || SQLERRM);
         --
         IF l_retorno_xml%ISOPEN
         THEN
           --
           CLOSE l_retorno_xml;
           --
         END IF;
         --
     END p_gerar_xml_conductor;
     --
     /* ------------------------------------------------------
     || transforma resultado do processamento em CLOB de XML
     */ ------------------------------------------------------
     --
     PROCEDURE p_gerar_xml_cep(p_retorno        IN ref_cursor,
                               p_clob_lista     OUT CLOB)
     IS
        --
        l_retorno_xml   ref_cursor;
        l_rec_lista_cep rec_dados_cep;
        l_xml_lista     XMLTYPE;
        l_document      DBMS_XMLDOM.DOMDOCUMENT;
        l_node_dados    DBMS_XMLDOM.DOMNODE;
        l_node_lista    DBMS_XMLDOM.DOMNODE;
        l_node_codigo   DBMS_XMLDOM.DOMNODE;
        l_node_valor    DBMS_XMLDOM.DOMNODE;
        l_text_campo    DBMS_XMLDOM.DOMTEXT;
        --

     BEGIN
        --
        mx('I', 'p_gerar_xml_cep');
        --
        l_retorno_xml := p_retorno;
        l_document   := DBMS_XMLDOM.newdomdocument;
        l_node_lista := DBMS_XMLDOM.makenode(l_document);
        --
        LOOP FETCH l_retorno_xml INTO l_rec_lista_cep;
           --
           EXIT WHEN l_retorno_xml%NOTFOUND;
           --
           --abre dados
           l_node_lista := DBMS_XMLDOM.makenode(l_document);
           l_node_lista := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresLista')));
           --abre dados
           l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
           --monta codigo
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
           l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_cep.NOM_CAMPO_NOM_DOMICILO1);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
           --monta valor
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_cep.NOM_DOMICILO1);
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
           --abre dados
           l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
           --monta codigo
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
           l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_cep.NOM_CAMPO_NUM_APARTADO);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
           --monta valor
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_cep.NUM_APARTADO );
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
           --abre dados
           l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
           --monta codigo
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
           l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_cep.NOM_CAMPO_NOM_DOMICILIO2);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
           --monta valor
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_cep.NOM_DOMICILIO2);
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
           --abre dados
           l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
           --monta codigo
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
           l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_cep.NOM_CAMPO_NOM_LOCALIDAD);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
           --monta valor
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_cep.NOM_LOCALIDAD);
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
           --monta codigo
           l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
           --monta codigo
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
           l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_cep.NOM_CAMPO_COD_ESTADO);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
           --monta valor
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_cep.COD_ESTADO);
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
           --monta codigo
           l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
           --monta codigo
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
           l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_cep.NOM_CAMPO_NOM_ESTADO);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
           --monta valor
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_cep.NOM_ESTADO);
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
           --monta codigo
           l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
           --monta codigo
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
           l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_cep.NOM_CAMPO_ABR_ESTADO);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
           --monta valor
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_cep.ABR_ESTADO);
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
           --monta codigo
           l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
           --monta codigo
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
           l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_cep.NOM_CAMPO_COD_PROV);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
           --monta valor
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_cep.COD_PROV);
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
           --monta codigo
           l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
           --monta codigo
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
           l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_cep.NOM_CAMPO_NOM_CIDADE);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
           --monta valor
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_cep.NOM_CIDADE);
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
           --monta codigo
           l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
           --monta codigo
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
           l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_cep.NOM_CAMPO_NOM_PAIS);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
           --monta valor
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_cep.NOM_PAIS);
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
           --
           l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
           --monta codigo
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
           l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_cep.NOM_CAMPO_CEP);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
           --monta valor
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_cep.COD_CEP);
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
           --
        END LOOP;

        --
        l_xml_lista := DBMS_XMLDOM.getxmltype(l_document);
        DBMS_XMLDOM.freedocument(l_document);
        p_clob_lista := l_xml_lista.getclobval;
        --
        mx('F', 'p_gerar_xml_cep');
        --
     END p_gerar_xml_cep;

     --
     /* ------------------------------------------------------
     || transforma resultado do processamento em CLOB de XML
     */ ------------------------------------------------------
     --
     PROCEDURE p_gerar_xml_lista_campos(p_retorno        IN ref_cursor,
                                        p_clob_lista     OUT CLOB)
     IS
        --
        l_retorno_xml     ref_cursor;
        l_rec_lista_campo rec_lista_campo;
        l_xml_lista       XMLTYPE;
        l_document        DBMS_XMLDOM.DOMDOCUMENT;
        l_node_dados      DBMS_XMLDOM.DOMNODE;
        l_node_lista      DBMS_XMLDOM.DOMNODE;
        l_node_codigo     DBMS_XMLDOM.DOMNODE;
        l_node_valor      DBMS_XMLDOM.DOMNODE;
        l_text_campo      DBMS_XMLDOM.DOMTEXT;
        --

     BEGIN
        --
        mx('I', 'p_gerar_xml_lista_campos');
        --
        l_retorno_xml := p_retorno;
        l_document   := DBMS_XMLDOM.newdomdocument;
        l_node_lista := DBMS_XMLDOM.makenode(l_document);
        --
        LOOP FETCH l_retorno_xml INTO l_rec_lista_campo;
           --
           EXIT WHEN l_retorno_xml%NOTFOUND;
           --abre dados
           l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresLista')));
           --monta codigo
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'codValor')));
           l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_campo.cod_campo);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
           --monta valor
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'nomValor')));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_campo.val_campo );
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
           --
        END LOOP;

        --
        l_xml_lista := DBMS_XMLDOM.getxmltype(l_document);
        DBMS_XMLDOM.freedocument(l_document);
        p_clob_lista := l_xml_lista.getclobval;
        --
        mx('F', 'p_gerar_xml_lista_campos');
        --
     END p_gerar_xml_lista_campos;

     --
     /* ------------------------------------------------------
     || transforma resultado do processamento em CLOB de XML
     */ ------------------------------------------------------
     --
     PROCEDURE p_gerar_xml_cotacao(p_retorno        IN ref_cursor,
                                   p_clob_lista     OUT CLOB)
     IS
        --
        l_retorno_xml   ref_cursor;
        l_rec_lista     rec_lista_cotacao;
        l_xml_lista     XMLTYPE;
        l_document      DBMS_XMLDOM.DOMDOCUMENT;
        l_node_dados    DBMS_XMLDOM.DOMNODE;
        l_node_lista    DBMS_XMLDOM.DOMNODE;
        l_node_codigo   DBMS_XMLDOM.DOMNODE;
        l_node_valor    DBMS_XMLDOM.DOMNODE;
        l_text_campo    DBMS_XMLDOM.DOMTEXT;
        --
        l_num_dias_renov g2009026_vcr.num_dias_expirar%TYPE;
        l_data_limite   a2009540_vcr.fec_vcto_poliza %TYPE; -- v5.19
        --
     BEGIN
        --
        mx('I', 'p_gerar_xml_cotacao');
        --
        l_retorno_xml := p_retorno;
        l_document    := DBMS_XMLDOM.newdomdocument;
        l_node_lista  := DBMS_XMLDOM.makenode(l_document);
        --
        BEGIN -- v5.19
          --
          l_data_limite := TO_DATE(ea_k_231_utils.f_recupera_constante(p_cod_cia   => trn_k_global.devuelve('cod_cia'),
                                                                       p_cod_campo => 'RENDATA_LIMITE'),'ddmmyyyy');
          --
        EXCEPTION
          --
          WHEN OTHERS THEN
            --
            l_data_limite := to_date('01012000','ddmmyyyy'); -- DATA DEFECTO
            --
          --
        END;
        --
        mx('l_data_limite', l_data_limite);
        --
        l_num_dias_renov := ea_k_231_utils.f_recupera_constante(p_cod_cia   => trn_k_global.devuelve('cod_cia'),
                                                                p_cod_campo => 'DIAS_RENOV_MIN');
        --
        mx('l_num_dias_renov', l_num_dias_renov);
        --
        SELECT GREATEST(l_data_limite, SYSDATE + l_num_dias_renov)
          INTO l_data_limite
          FROM dual;
        --
        mx('fec_compara     ', l_data_limite);
        --
        LOOP FETCH l_retorno_xml INTO l_rec_lista;
           ---
           EXIT WHEN l_retorno_xml%NOTFOUND;
           --abre dados
           mx('FEC_VCTO_POLIZA_CONGENERE', l_rec_lista.FEC_VCTO_POLIZA_CONGENERE);
           --
           IF NOT (    l_rec_lista.MCA_RENOV_OUTRAS IN (2,6)  -- v5.31
                   AND l_data_limite < TO_DATE(l_rec_lista.FEC_VCTO_POLIZA_CONGENERE,'ddmmyyyy'))  THEN
             --
             l_node_lista := DBMS_XMLDOM.makenode(l_document);
             l_node_lista := DBMS_XMLDOM.makenode(l_document);
             l_node_lista := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresLista')));
             -- v2.25 ini
             --abre dados
             l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
             --monta nome do campo
             l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
             l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista.NOM_COD_CIA);
             l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
             --monta valor
             l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
             l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista.COD_CIA );
             l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
             -- v2.25 fim
             --abre dados
             l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
             --monta nome do campo
             l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
             l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista.NOM_NUM_COTIZACION);
             l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
             --monta valor
             l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
             l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista.NUM_COTIZACION );
             l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
             -- v2.25 ini
             --abre dados
             l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
             --monta nome do campo
             l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
             l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista.NOM_NUM_POLIZA_RENOV);
             l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
             --monta valor
             l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
             l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista.NUM_POLIZA_RENOV );
             l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
             -- v2.25 fim
             --abre dados
             l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
             --monta nome do campo
             l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
             l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista.NOM_NOM_TERCERO);
             l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
             --monta valor
             l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
             l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista.NOM_TERCERO );
             l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
             -- v2.25 ini
             --abre dados
             l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
             --monta nome do campo
             l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
             l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista.NOM_NUM_SERIE);
             l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
             --monta valor
             l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
             l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista.NUM_SERIE );
             l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
             -- v2.25 fim
             --abre dados
             -- v2.25 ini
             --abre dados
             l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
             --monta nome do campo
             l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
             l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista.NOM_NUM_MATRICULA);
             l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
             --monta valor
             l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
             l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista.NUM_MATRICULA );
             l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
             -- v2.25 fim
             --abre dados
             --abre dados
             l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
             --monta nome do campo
             l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
             l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista.NOM_TXT_SUB_MODELO);
             l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
             --monta valor
             l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
             l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista.TXT_SUB_MODELO );
             l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
             -- v2.25 ini
             --abre dados
             l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
             --monta nome do campo
             l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
             l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista.NOM_MCA_RENOVACION);
             l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
             --monta valor
             l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
             l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista.MCA_RENOVACION );
             l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
             -- v2.25 fim
             -- v2.25 ini
             --abre dados
             l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
             --monta nome do campo
             l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
             l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista.NOM_MCA_RENOV_OUTRAS);
             l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
             --monta valor
             l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
             l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista.MCA_RENOV_OUTRAS );
             l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
             -- v2.25 fim
             -- v2.25 ini
             --abre dados
             l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
             --monta nome do campo
             l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
             l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista.NOM_COD_TIP_RENOV);
             l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
             --monta valor
             l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
             l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista.COD_TIP_RENOV );
             l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
             -- v2.25 fim
             -- v2.25 ini
             --abre dados
             l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
             --monta nome do campo
             l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
             l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista.NOM_FEC_VCTO_POLIZA_CONGENERE);
             l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
             --monta valor
             l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
             l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista.FEC_VCTO_POLIZA_CONGENERE );
             l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
             -- v2.25 fim
             --abre dados
             l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
             --monta nome do campo
             l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
             l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista.NOM_TIP_SITU_COTI_IND_RENOV);
             l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
             --monta valor
             l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
             l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista.TIP_SITU_COTI_IND_RENOV );
             l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
             --
             --abre dados
             l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
             --monta nome do campo
             l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
             l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista.NOM_NUM_PASO_ATUAL);
             l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
             --monta valor
             l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
             l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista.NUM_PASO_ATUAL );
             l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
             --
             -- { v5.43
             --abre dados
             l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
             --monta nome do campo
             l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
             l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista.NOM_FEC_PRAZO_VALIDADE);
             l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
             --monta valor
             l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
             l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista.FEC_PRAZO_VALIDADE );
             l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
             -- v5.43 }
             --
           END IF;
           --
        END LOOP;
        --
        l_xml_lista := DBMS_XMLDOM.getxmltype(l_document);
        DBMS_XMLDOM.freedocument(l_document);
        p_clob_lista := l_xml_lista.getclobval;
        --
        mx('F', 'p_gerar_xml_cotacao');
        --
     END p_gerar_xml_cotacao;
     --
     /* ------------------------------------------------------
     || transforma resultado do processamento em CLOB de XML
     */ ------------------------------------------------------
     --


     PROCEDURE p_gerar_xml_apolice(p_retorno        IN rec_tab_lista_apolice,
                                   p_clob_lista     OUT CLOB)
     IS
        --
        l_xml_lista     XMLTYPE;
        l_document      DBMS_XMLDOM.DOMDOCUMENT;
        l_node_dados    DBMS_XMLDOM.DOMNODE;
        l_node_lista    DBMS_XMLDOM.DOMNODE;
        l_node_codigo   DBMS_XMLDOM.DOMNODE;
        l_node_valor    DBMS_XMLDOM.DOMNODE;
        l_text_campo    DBMS_XMLDOM.DOMTEXT;
        l_cod_sistema   NUMBER; -- V 2.03
        --
     BEGIN
        --
        mx('I', 'p_gerar_xml_apolice');
        --
        l_document    := DBMS_XMLDOM.newdomdocument;
        l_node_lista  := DBMS_XMLDOM.makenode(l_document);
        l_cod_sistema := trn_k_global.ref_f_global('COD_SISTEMA'); -- V 2.03
        --
        -- inicio V 1.84
        --
        IF p_retorno.COUNT > 0 THEN
          --
          FOR CONTADOR IN p_retorno.first .. p_retorno.last LOOP
             --
             trn_k_global.asigna('MCA_APOLICE_ENCONTRADA', trn.SI);
             --
             g_cod_agt_consulta := p_retorno(CONTADOR).COD_AGT;
             --abre dados
             l_node_lista := DBMS_XMLDOM.makenode(l_document);
             l_node_lista := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresLista')));
             --abre dados
             l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
             --monta nome do campo
             l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
             l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, p_retorno(CONTADOR).NOM_CAMPO_NOM_TERCERO);
             l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
             --monta valor
             l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
             l_text_campo := DBMS_XMLDOM.createtextnode(l_document, p_retorno(CONTADOR).NOM_TERCERO );
             l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
             --abre dados
             l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
             --monta nome do campo
             l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
             l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, p_retorno(CONTADOR).NOM_CAMPO_NUM_POLIZA);
             l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
             --monta valor
             l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
             l_text_campo := DBMS_XMLDOM.createtextnode(l_document, p_retorno(CONTADOR).NUM_POLIZA );
             l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
             --abre dados
             l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
             --monta nome do campo
             l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
             l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, p_retorno(CONTADOR).NOM_CAMPO_NUM_ITEM);
             l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
             --monta valor
             l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
             l_text_campo := DBMS_XMLDOM.createtextnode(l_document, p_retorno(CONTADOR).NUM_ITEM );
             l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
             --abre dados
             l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
             --monta nome do campo
             l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
             l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, p_retorno(CONTADOR).NOM_CAMPO_TXT_SUB_MODELO);
             l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
             --monta valor
             l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
             l_text_campo := DBMS_XMLDOM.createtextnode(l_document, p_retorno(CONTADOR).TXT_SUB_MODELO );
             l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
             --abre dados
             l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
             --monta nome do campo
             l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
             l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, p_retorno(CONTADOR).NOM_CAMPO_NUM_MATRICULA);
             l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
             --monta valor
             l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
             l_text_campo := DBMS_XMLDOM.createtextnode(l_document, p_retorno(CONTADOR).NUM_MATRICULA );
             l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
             --abre dados
             l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
             --monta nome do campo
             l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
             l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, p_retorno(CONTADOR).NOM_CAMPO_NUM_SERIE);
             l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
             --monta valor
             l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
             l_text_campo := DBMS_XMLDOM.createtextnode(l_document, p_retorno(CONTADOR).NUM_SERIE );
             l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
             -- INICIO V 2.03
             --
             IF(l_cod_sistema = 1) THEN
               --
               --abre dados
               l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
               --monta nome do campo
               l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
               l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, p_retorno(CONTADOR).NOM_CAMPO_MCA_POLIZA_ANULADA);
               l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
               --monta valor
               l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
               l_text_campo := DBMS_XMLDOM.createtextnode(l_document, p_retorno(CONTADOR).MCA_POLIZA_ANULADA );
               l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
               --
               --abre dados
               l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
               --monta nome do campo
               l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
               l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, p_retorno(CONTADOR).NOM_CAMPO_MCA_PROVISIONAL);
               l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
               --monta valor
               l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
               l_text_campo := DBMS_XMLDOM.createtextnode(l_document, p_retorno(CONTADOR).MCA_PROVISIONAL );
               l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
               --
               --abre dados
               l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
               --monta nome do campo
               l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
               l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, p_retorno(CONTADOR).NOM_CAMPO_FEC_VCTO_POLIZA);
               l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
               --monta valor
               l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
               l_text_campo := DBMS_XMLDOM.createtextnode(l_document, p_retorno(CONTADOR).FEC_VCTO_POLIZA );
               l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
               --
               --
           END IF;
             -- FIM V 2.03

            -- v5.26
            --abre dados
            l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
            --monta nome do campo
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
            l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, p_retorno(CONTADOR).NOM_FEC_PRAZO_VALIDADE);
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
            --monta valor
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
            l_text_campo := DBMS_XMLDOM.createtextnode(l_document, p_retorno(CONTADOR).NUM_FEC_PRAZO_VALIDADE );
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
            -- v5.26

          --
          END LOOP;
        --
        END IF;
        --
        -- fim V 1.84
        --
        l_xml_lista := DBMS_XMLDOM.getxmltype(l_document);
        DBMS_XMLDOM.freedocument(l_document);
        p_clob_lista := l_xml_lista.getclobval;
        --
        mx('F', 'p_gerar_xml_apolice');
        --
     END p_gerar_xml_apolice;
     --
     /* ------------------------------------------------------
     || transforma resultado do processamento em CLOB de XML
     */ ------------------------------------------------------
     --
     PROCEDURE p_gerar_xml_calc_restituicao(p_retorno        IN ref_cursor,
                                            p_clob_lista     OUT CLOB)
     IS
        --
        l_retorno_xml   ref_cursor;
        l_rec_lista     rec_lista_restituicao;
        l_xml_lista     XMLTYPE;
        l_document      DBMS_XMLDOM.DOMDOCUMENT;
        l_node_dados    DBMS_XMLDOM.DOMNODE;
        l_node_lista    DBMS_XMLDOM.DOMNODE;
        l_node_codigo   DBMS_XMLDOM.DOMNODE;
        l_node_valor    DBMS_XMLDOM.DOMNODE;
        l_text_campo    DBMS_XMLDOM.DOMTEXT;
        --
     BEGIN
        --
        mx('I', 'p_gerar_xml_calc_restituicao');
        --
        l_retorno_xml := p_retorno;
        l_document    := DBMS_XMLDOM.newdomdocument;
        l_node_lista  := DBMS_XMLDOM.makenode(l_document);
        --
        LOOP FETCH l_retorno_xml INTO l_rec_lista;
           --
           EXIT WHEN l_retorno_xml%NOTFOUND;
           --abre dados
           l_node_lista := DBMS_XMLDOM.makenode(l_document);
           l_node_lista := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresLista')));
           --abre dados
           l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
           --monta nome do campo
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
           l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista.NOM_CAMPO_NUM_POLIZA);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
           --monta valor
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista.NUM_POLIZA );
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
           --abre dados
           l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
           --monta nome do campo
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
           l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista.NOM_CAMPO_IMP_RESTITUICAO);
           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
           --monta valor
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista.IMP_RESTITUICAO );
           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
           --
        END LOOP;
        --
        l_xml_lista := DBMS_XMLDOM.getxmltype(l_document);
        DBMS_XMLDOM.freedocument(l_document);
        p_clob_lista := l_xml_lista.getclobval;
        --
        mx('F', 'p_gerar_xml_calc_restituicao');
        --
     END p_gerar_xml_calc_restituicao;
     --
     /* ------------------------------------------------------
     || transforma resultado do processamento em CLOB de XML
     */ ------------------------------------------------------
     --
     PROCEDURE p_gerar_xml_lista_campos_mcc(p_retorno        IN ref_cursor            ,
                                            p_cod_cia        IN c2000000.cod_cia %TYPE, -- jwolff
                                            p_cod_ramo       IN c2000000.cod_ramo%TYPE, -- jwolff
                                            p_clob_lista     OUT CLOB                 )
     IS
     --
     l_retorno_xml   ref_cursor;
     l_rec_lista     rec_lista_cotacao_mcc;
     l_rec_lista_com_proposta rec_lista_cotacao_mcc_proposta; --v4.98
     l_rec_lista_3_pct rec_lista_cotacao_mcc_3_pct; -- 2.43
     l_xml_lista     XMLTYPE;
     l_document      DBMS_XMLDOM.DOMDOCUMENT;
     l_node_dados    DBMS_XMLDOM.DOMNODE;
     l_node_lista    DBMS_XMLDOM.DOMNODE;
     l_node_codigo   DBMS_XMLDOM.DOMNODE;
     l_node_valor    DBMS_XMLDOM.DOMNODE;
     l_text_campo    DBMS_XMLDOM.DOMTEXT;
     -- { jwolff
     l_num_veiculos          NUMBER;
     l_tip_situ_coti_grp     c2000000.val_columna   %TYPE;
     l_nom_situ_coti_grp     g2990006.nom_valor     %TYPE;
     -- } jwolff
     l_eh_3_pacotes BOOLEAN := FALSE; -- 2.43
     l_cod_agt      c2009030_vcr.cod_agt%type; -- 2.43
     l_tip_produto  g2109142_vcr.tip_produto %TYPE; -- 2.43
     --
     l_txt_obser a2992131_vcr.obs_situ_bo %TYPE; -- 3.48
     --
     BEGIN
       --
       mx('I', 'p_gerar_xml_lista_campos_mcc');
       --
       l_retorno_xml := p_retorno;
       l_document    := DBMS_XMLDOM.newdomdocument;
       l_node_lista  := DBMS_XMLDOM.makenode(l_document);
       --
       l_cod_agt      := trn_k_global.ref_f_global('COD_AGT'); -- 2.43
       l_tip_produto  := trn_k_global.ref_f_global('TIP_PRODUTO'); -- 2.43
       --
       l_eh_3_pacotes := ea_k_g2109142_vcr.f_eh_3_pacotes(p_cod_cia, --2.70
                                                          p_cod_ramo,
                                                          l_cod_agt,
                                                          l_tip_produto); -- 2.43
        -- I 3.47
        IF l_eh_3_pacotes THEN
         --
         pp_asigna('tres_pacotes',1);
         --
        ELSE
         --
         pp_asigna('tres_pacotes',0);
         --
        END IF;
       -- F 3.47
       -- I 2.43
       IF l_eh_3_pacotes THEN
                --
                LOOP
                      FETCH l_retorno_xml
                        INTO l_rec_lista_3_pct;
                      --
                      EXIT WHEN l_retorno_xml%NOTFOUND;
                      --
                      --abre dados
                      l_node_lista := DBMS_XMLDOM.makenode(l_document);
                      l_node_lista := DBMS_XMLDOM.appendchild(l_node_lista,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,'colValoresLista')));
                      --abre dados
                      l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,'colValoresCampos')));
                      --monta nome do campo
                      l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_codCampo)));
                      l_text_campo  := DBMS_XMLDOM.createtextnode(l_document,'NUM_COTIZACION');
                      l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo,DBMS_XMLDOM.makenode(l_text_campo));
                      --monta valor
                      l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_valCampo)));
                      l_text_campo := DBMS_XMLDOM.createtextnode(l_document,l_rec_lista_3_pct.NUM_COTIZACION);
                      l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor,DBMS_XMLDOM.makenode(l_text_campo));
                      --abre dados
                      l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,'colValoresCampos')));
                      --monta nome do campo
                      l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_codCampo)));
                      l_text_campo  := DBMS_XMLDOM.createtextnode(l_document,'NOM_TERCERO');
                      l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo,DBMS_XMLDOM.makenode(l_text_campo));
                      --monta valor
                      l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_valCampo)));
                      l_text_campo := DBMS_XMLDOM.createtextnode(l_document,l_rec_lista_3_pct.NOM_TERCERO);
                      l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor,DBMS_XMLDOM.makenode(l_text_campo));
                      --abre dados
                      l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,'colValoresCampos')));
                      --monta nome do campo
                      l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_codCampo)));
                      l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, 'COD_DOCUM');
                      l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo,DBMS_XMLDOM.makenode(l_text_campo));
                      --monta valor
                      l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_valCampo)));
                      l_text_campo := DBMS_XMLDOM.createtextnode(l_document,l_rec_lista_3_pct.COD_DOCUM);
                      l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor,DBMS_XMLDOM.makenode(l_text_campo));
                      --abre dados
                      l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,'colValoresCampos')));
                      --monta nome do campo
                      l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_codCampo)));
                      l_text_campo  := DBMS_XMLDOM.createtextnode(l_document,'NUM_PASO_ATUAL');
                      l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo,DBMS_XMLDOM.makenode(l_text_campo));
                      --monta valor
                      l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_valCampo)));
                      l_text_campo := DBMS_XMLDOM.createtextnode(l_document,l_rec_lista_3_pct.NUM_PASO_ATUAL);
                      l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor,DBMS_XMLDOM.makenode(l_text_campo));
                      --abre dados
                      l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,'colValoresCampos')));
                      --monta nome do campo
                      l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_codCampo)));
                      l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, 'COD_AGT');
                      l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo,DBMS_XMLDOM.makenode(l_text_campo));
                      --monta valor
                      l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_valCampo)));
                      l_text_campo := DBMS_XMLDOM.createtextnode(l_document,l_rec_lista_3_pct.COD_AGT);
                      l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor,DBMS_XMLDOM.makenode(l_text_campo));
                      --abre dados
                      l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,'colValoresCampos')));
                      --monta nome do campo
                      l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_codCampo)));
                      l_text_campo  := DBMS_XMLDOM.createtextnode(l_document,'FEC_EMISION');
                      l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo,DBMS_XMLDOM.makenode(l_text_campo));
                      --monta valor
                      l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_valCampo)));
                      l_text_campo := DBMS_XMLDOM.createtextnode(l_document,l_rec_lista_3_pct.FEC_EMISION);
                      l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor,DBMS_XMLDOM.makenode(l_text_campo));
                      --abre dados
                      l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,'colValoresCampos')));
                      --monta nome do campo
                      l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_codCampo)));
                      l_text_campo  := DBMS_XMLDOM.createtextnode(l_document,'MCA_CALCULADO');
                      l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo,DBMS_XMLDOM.makenode(l_text_campo));
                      --monta valor
                      l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_valCampo)));
                      l_text_campo := DBMS_XMLDOM.createtextnode(l_document,l_rec_lista_3_pct.MCA_CALCULADO);
                      l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor,DBMS_XMLDOM.makenode(l_text_campo));
                      --abre dados
                      l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,'colValoresCampos')));
                      --monta nome do campo
                      l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_codCampo)));
                      l_text_campo  := DBMS_XMLDOM.createtextnode(l_document,'NOM_NIVEL_COTACAO');
                      l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo,DBMS_XMLDOM.makenode(l_text_campo));
                      --monta valor
                      l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_valCampo)));
                      l_text_campo := DBMS_XMLDOM.createtextnode(l_document,l_rec_lista_3_pct.NOM_NIVEL_COTACAO);
                      l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor,DBMS_XMLDOM.makenode(l_text_campo));
                      --abre dados
                      l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,'colValoresCampos')));
                      --monta nome do campo
                      l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_codCampo)));
                      l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, 'FEC_ENVIO');
                      l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo,DBMS_XMLDOM.makenode(l_text_campo));
                      --monta valor
                      l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_valCampo)));
                      l_text_campo := DBMS_XMLDOM.createtextnode(l_document,l_rec_lista_3_pct.FEC_ENVIO);
                      l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor,DBMS_XMLDOM.makenode(l_text_campo));
                      --abre dados
                      l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,'colValoresCampos')));
                      --monta nome do campo
                      l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_codCampo)));
                      l_text_campo  := DBMS_XMLDOM.createtextnode(l_document,'TIP_PRODUTO');
                      l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo,DBMS_XMLDOM.makenode(l_text_campo));
                      --monta valor
                      l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_valCampo)));
                      l_text_campo := DBMS_XMLDOM.createtextnode(l_document,l_rec_lista_3_pct.TIP_PRODUTO);
                      l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor,DBMS_XMLDOM.makenode(l_text_campo));
                      --
                      --abre dados
                      l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,'colValoresCampos')));
                      --monta nome do campo
                      l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_codCampo)));
                      l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, 'PRODUTO');
                      l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo,DBMS_XMLDOM.makenode(l_text_campo));
                      --monta valor
                      l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_valCampo)));
                      l_text_campo := DBMS_XMLDOM.createtextnode(l_document,l_rec_lista_3_pct.PRODUTO);
                      l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor,DBMS_XMLDOM.makenode(l_text_campo));
                      --
                      -- V I 2.15
                      --abre dados   campo
                      l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,'colValoresCampos')));
                      --monta nome do campo
                      l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_codCampo)));
                      l_text_campo  := DBMS_XMLDOM.createtextnode(l_document,'TOT_REGISTRO');
                      l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo,DBMS_XMLDOM.makenode(l_text_campo));
                      --monta valor
                      l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_valCampo)));
                      l_text_campo := DBMS_XMLDOM.createtextnode(l_document,l_rec_lista_3_pct.TOT_REGISTRO);
                      l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor,DBMS_XMLDOM.makenode(l_text_campo));
                      -- v F 2.15
                      -- v I 3.48
                      l_txt_obser := fp_recupera_txt_obser(p_cod_cia        => p_cod_cia,
                                                           p_cod_ramo       => p_cod_ramo,
                                                           p_num_cotizacion => l_rec_lista_3_pct.NUM_COTIZACION);
                      --
                      --abre dados   campo
                      l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista,
                                                              DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,
                                                                                               'colValoresCampos')));
                      --monta nome do campo
                      l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados,
                                                               DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,
                                                                                                g_k_val_campo_codCampo)));
                      l_text_campo  := DBMS_XMLDOM.createtextnode(l_document,
                                                                  'TXT_OBSER_BO');
                      l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo,
                                                               DBMS_XMLDOM.makenode(l_text_campo));
                      --monta valor
                      l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados,
                                                              DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,
                                                                                               g_k_val_campo_valCampo)));
                      l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_txt_obser);
                      l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor,
                                                              DBMS_XMLDOM.makenode(l_text_campo));
                      --V F. 3.48
                      --
                      -- {v5.35
                      --abre dados   campo
                      l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,'colValoresCampos')));
                      --monta nome do campo
                      l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_codCampo)));
                      l_text_campo  := DBMS_XMLDOM.createtextnode(l_document,'NUM_DIAS_VALIDEZ');
                      l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo,DBMS_XMLDOM.makenode(l_text_campo));
                      --monta valor
                      l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_valCampo)));
                      l_text_campo := DBMS_XMLDOM.createtextnode(l_document,l_rec_lista_3_pct.NUM_DIAS_VALIDEZ);
                      l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor,DBMS_XMLDOM.makenode(l_text_campo));
                      -- v5.35}
                      -- { jwolff
         IF trn.SI = NVL(trn_k_global.ref_f_global('MCA_FROTA'), trn.NO) THEN
              --
              l_num_veiculos := 0;
              --
              IF gc_num_veiculos%ISOPEN THEN
                --
                CLOSE gc_num_veiculos;
                --
              END IF;
              --
              OPEN gc_num_veiculos(pc_cod_cia        => p_cod_cia,
                                   pc_cod_ramo       => p_cod_ramo,
                                   pc_num_coti_grupo => l_rec_lista_3_pct.NUM_COTIZACION);
              --
              FETCH gc_num_veiculos
              INTO l_num_veiculos;
              --
              CLOSE gc_num_veiculos;
              --
              l_tip_situ_coti_grp := f_recupera_val_dv(p_cod_cia        => p_cod_cia,
                                                       p_cod_ramo       => p_cod_ramo,
                                                       p_num_cotizacion => l_rec_lista_3_pct.NUM_COTIZACION,
                                                       p_nom_columna    => 'TIP_SITU_COTI_GRP');
              --
              l_nom_situ_coti_grp := em_f_nom_valor(p_cod_cia       => p_cod_cia,
                                                    p_cod_ramo      => p_cod_ramo,
                                                    p_cod_modalidad => em.COD_MODALIDAD_GEN,
                                                    p_fec_validez   => SYSDATE,
                                                    p_cod_campo     => 'TIP_SITU_COTI_GRP',
                                                    p_cod_valor     => NVL(l_tip_situ_coti_grp,'1'));
              --
              -- Ajuste para prevenir error al calcular numero de riesgos si TIP_SITU_COTI_GRP = 11. No recupera vehiculos de c2009030_vcr.
              IF     NVL( l_num_veiculos, 0 ) = 0
                 AND NVL( l_tip_situ_coti_grp, ea_k_231_flota_batch.g_k_tip_situ_elaboracion ) = ea_k_231_flota_batch.g_k_tip_situ_prop_efec
              THEN
                 --
                 mx('-', 'Go to efectivada 1');
                 --
                 IF gc_num_veiculos_prop_efec %ISOPEN
                 THEN
                    --
                    CLOSE gc_num_veiculos_prop_efec;
                    --
                 END IF;
                 --
                 OPEN gc_num_veiculos_prop_efec(pc_cod_cia          => p_cod_cia  ,
                                                pc_cod_ramo         => p_cod_ramo ,
                                                pc_num_poliza_grupo => l_rec_lista_3_pct.NUM_COTIZACION );
                 --
                 FETCH gc_num_veiculos_prop_efec INTO l_num_veiculos;
                 --
                 CLOSE gc_num_veiculos_prop_efec;
                 --
              END IF;
              --
            END IF;
            --abre dados
            l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,'colValoresCampos')));
            --monta nome do campo
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_codCampo)));
            l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, 'NUM_ITEMS');
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo,DBMS_XMLDOM.makenode(l_text_campo));
            --monta valor
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_valCampo)));
            l_text_campo := DBMS_XMLDOM.createtextnode(l_document,l_num_veiculos);
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor,DBMS_XMLDOM.makenode(l_text_campo));
            -- --abre dados
            l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,'colValoresCampos')));
            --monta nome do campo
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_codCampo)));
            l_text_campo  := DBMS_XMLDOM.createtextnode(l_document,'TIP_SITU_COTI_GRP');
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo,DBMS_XMLDOM.makenode(l_text_campo));
            --monta valor
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_valCampo)));
            l_text_campo := DBMS_XMLDOM.createtextnode(l_document,l_tip_situ_coti_grp);
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor,DBMS_XMLDOM.makenode(l_text_campo));
            --
            --abre dados
            l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,'colValoresCampos')));
            --monta nome do campo
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_codCampo)));
            l_text_campo  := DBMS_XMLDOM.createtextnode(l_document,'NOM_SITU_COTI_GRP');
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo,DBMS_XMLDOM.makenode(l_text_campo));
            --monta valor
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_valCampo)));
            l_text_campo := DBMS_XMLDOM.createtextnode(l_document,l_nom_situ_coti_grp);
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor,DBMS_XMLDOM.makenode(l_text_campo));
            -- } jwolff
            --abre dados
            l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,'colValoresCampos')));
            --monta nome do campo
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_codCampo)));
            l_text_campo  := DBMS_XMLDOM.createtextnode(l_document,'NUM_SIMULACION');
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo,DBMS_XMLDOM.makenode(l_text_campo));
            --monta valor
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_valCampo)));
            l_text_campo := DBMS_XMLDOM.createtextnode(l_document,l_rec_lista_3_pct.NUM_SIMULACION);
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor,DBMS_XMLDOM.makenode(l_text_campo));
            -- 4.80
            --
            l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista,
                                                    DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,
                                                                                                   'colValoresCampos')));
            --monta nome do campo
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados,
                                                     DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,
                                                                                                    g_k_val_campo_codCampo)));
            l_text_campo  := DBMS_XMLDOM.createtextnode(l_document,
                                                        'TIP_RENOV');
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo,
                                                     DBMS_XMLDOM.makenode(l_text_campo));
            --monta valor
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados,
                                                    DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,
                                                                                                   g_k_val_campo_valCampo)));
            l_text_campo := DBMS_XMLDOM.createtextnode(l_document,
                                                       l_rec_lista_3_pct.TIP_RENOV);
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor,
                                                    DBMS_XMLDOM.makenode(l_text_campo));
            -- 4.80
            -- I 5.29
            l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,'colValoresCampos')));
            --monta nome do campo
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_codCampo)));
            l_text_campo  := DBMS_XMLDOM.createtextnode(l_document,'TIP_SITU_BO');
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo,DBMS_XMLDOM.makenode(l_text_campo));
            --monta valor
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_valCampo)));
            l_text_campo := DBMS_XMLDOM.createtextnode(l_document,l_rec_lista_3_pct.TIP_SITU_BO);
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor,DBMS_XMLDOM.makenode(l_text_campo));
            -- F 5.29
            -- {v5.35
            --abre dados   campo
            l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,'colValoresCampos')));
            --monta nome do campo
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_codCampo)));
            l_text_campo  := DBMS_XMLDOM.createtextnode(l_document,'NUM_DIAS_VALIDEZ');
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo,DBMS_XMLDOM.makenode(l_text_campo));
            --monta valor
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_valCampo)));
            l_text_campo := DBMS_XMLDOM.createtextnode(l_document,l_rec_lista_3_pct.NUM_DIAS_VALIDEZ);
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor,DBMS_XMLDOM.makenode(l_text_campo));
            -- v5.35}
            --
          END LOOP;
          --
        ELSIF g_cod_ramo = g_k_residencial--{v4.82
        THEN
           --
           LOOP
            FETCH l_retorno_xml
              INTO l_rec_lista_com_proposta;
            --
            EXIT WHEN l_retorno_xml%NOTFOUND;
            --abre dados
            l_node_lista := DBMS_XMLDOM.makenode(l_document);
            l_node_lista := DBMS_XMLDOM.appendchild(l_node_lista,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,'colValoresLista')));
            --abre dados
            l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
            --monta nome do campo
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
            l_text_campo  := DBMS_XMLDOM.createtextnode(l_document,'NUM_COTIZACION');
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo,DBMS_XMLDOM.makenode(l_text_campo));
            --monta valor
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
            l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_com_proposta.NUM_COTIZACION );
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
            --abre dados
            l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,'colValoresCampos')));
            --monta nome do campo
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_codCampo)));
            l_text_campo  := DBMS_XMLDOM.createtextnode(l_document,'NOM_TERCERO');
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo,DBMS_XMLDOM.makenode(l_text_campo));
            --monta valor
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_valCampo)));
            l_text_campo := DBMS_XMLDOM.createtextnode(l_document,l_rec_lista_com_proposta.NOM_TERCERO);
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor,DBMS_XMLDOM.makenode(l_text_campo));
            --abre dados
            l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,'colValoresCampos')));
            --monta nome do campo
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_codCampo)));
            l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, 'COD_DOCUM');
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo,DBMS_XMLDOM.makenode(l_text_campo));
            --monta valor
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_valCampo)));
            l_text_campo := DBMS_XMLDOM.createtextnode(l_document,l_rec_lista_com_proposta.COD_DOCUM);
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor,DBMS_XMLDOM.makenode(l_text_campo));
            --abre dados
            l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,'colValoresCampos')));
            --monta nome do campo
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_codCampo)));
            l_text_campo  := DBMS_XMLDOM.createtextnode(l_document,'NUM_PASO_ATUAL');
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo,DBMS_XMLDOM.makenode(l_text_campo));
            --monta valor
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_valCampo)));
            l_text_campo := DBMS_XMLDOM.createtextnode(l_document,l_rec_lista_com_proposta.NUM_PASO_ATUAL);
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor,DBMS_XMLDOM.makenode(l_text_campo));
            --abre dados
            l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,'colValoresCampos')));
            --monta nome do campo
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_codCampo)));
            l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, 'COD_AGT');
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo,DBMS_XMLDOM.makenode(l_text_campo));
            --monta valor
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_valCampo)));
            l_text_campo := DBMS_XMLDOM.createtextnode(l_document,l_rec_lista_com_proposta.COD_AGT);
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor,DBMS_XMLDOM.makenode(l_text_campo));
            --abre dados
            l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,'colValoresCampos')));
            --monta nome do campo
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_codCampo)));
            l_text_campo  := DBMS_XMLDOM.createtextnode(l_document,'FEC_EMISION');
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo,DBMS_XMLDOM.makenode(l_text_campo));
            --monta valor
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_valCampo)));
            l_text_campo := DBMS_XMLDOM.createtextnode(l_document,l_rec_lista_com_proposta.FEC_EMISION);
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor,DBMS_XMLDOM.makenode(l_text_campo));
            --abre dados
            l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,'colValoresCampos')));
            --monta nome do campo
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_codCampo)));
            l_text_campo  := DBMS_XMLDOM.createtextnode(l_document,'MCA_CALCULADO');
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo,DBMS_XMLDOM.makenode(l_text_campo));
            --monta valor
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_valCampo)));
            l_text_campo := DBMS_XMLDOM.createtextnode(l_document,l_rec_lista_com_proposta.MCA_CALCULADO);
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor,DBMS_XMLDOM.makenode(l_text_campo));
            --abre dados
            l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,'colValoresCampos')));
            --monta nome do campo
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_codCampo)));
            l_text_campo  := DBMS_XMLDOM.createtextnode(l_document,'NOM_NIVEL_COTACAO');
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo,DBMS_XMLDOM.makenode(l_text_campo));
            --monta valor
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_valCampo)));
            l_text_campo := DBMS_XMLDOM.createtextnode(l_document,l_rec_lista_com_proposta.NOM_NIVEL_COTACAO);
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor,DBMS_XMLDOM.makenode(l_text_campo));
            --abre dados
            l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,'colValoresCampos')));
            --monta nome do campo
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_codCampo)));
            l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, 'FEC_ENVIO');
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo,DBMS_XMLDOM.makenode(l_text_campo));
            --monta valor
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_valCampo)));
            l_text_campo := DBMS_XMLDOM.createtextnode(l_document,l_rec_lista_com_proposta.FEC_ENVIO);
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor,DBMS_XMLDOM.makenode(l_text_campo));
            --abre dados
            l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,'colValoresCampos')));
            --monta nome do campo
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_codCampo)));
            l_text_campo  := DBMS_XMLDOM.createtextnode(l_document,'TIP_PRODUTO');
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo,DBMS_XMLDOM.makenode(l_text_campo));
            --monta valor
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_valCampo)));
            l_text_campo := DBMS_XMLDOM.createtextnode(l_document,l_rec_lista_com_proposta.TIP_PRODUTO);
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor,DBMS_XMLDOM.makenode(l_text_campo));
            --
            --abre dados
            l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,'colValoresCampos')));
            --monta nome do campo
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_codCampo)));
            l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, 'PRODUTO');
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo,DBMS_XMLDOM.makenode(l_text_campo));
            --monta valor
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_valCampo)));
            l_text_campo := DBMS_XMLDOM.createtextnode(l_document,l_rec_lista_com_proposta.PRODUTO);
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor,DBMS_XMLDOM.makenode(l_text_campo));
            --
            -- V I 2.15
            --abre dados   campo
            l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,'colValoresCampos')));
            --monta nome do campo
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_codCampo)));
            l_text_campo  := DBMS_XMLDOM.createtextnode(l_document,'TOT_REGISTRO');
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo,DBMS_XMLDOM.makenode(l_text_campo));
            --monta valor
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_valCampo)));
            l_text_campo := DBMS_XMLDOM.createtextnode(l_document,l_rec_lista_com_proposta.TOT_REGISTRO);
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor,DBMS_XMLDOM.makenode(l_text_campo));
            --
            -- v F 2.15
            -- V I 3.48
            --
            l_txt_obser := fp_recupera_txt_obser(p_cod_cia        => p_cod_cia,
                                                 p_cod_ramo       => p_cod_ramo,
                                                 p_num_cotizacion => l_rec_lista_3_pct.NUM_COTIZACION);
            --
            --abre dados   campo
            l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista,
                                                    DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,
                                                                                                   'colValoresCampos')));
            --monta nome do campo
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados,
                                                     DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,
                                                                                                    g_k_val_campo_codCampo)));
            l_text_campo  := DBMS_XMLDOM.createtextnode(l_document,
                                                        'TXT_OBSER_BO');
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo,
                                                     DBMS_XMLDOM.makenode(l_text_campo));
            --monta valor
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados,
                                                    DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,
                                                                                                   g_k_val_campo_valCampo)));
            l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_txt_obser);
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor,
                                                    DBMS_XMLDOM.makenode(l_text_campo));
            --V F. 3.48
            -- { jwolff
            IF trn.SI = NVL(trn_k_global.ref_f_global('MCA_FROTA'), trn.NO) THEN
              --
              l_num_veiculos := 0;
              --
              --2.88{
                mx('-','IF num_vehiculos');
                --
                --v 2.96{
                IF g_flag_coti = 'TRUE' THEN
                    --
                    IF gc_num_veiculos_coti%ISOPEN THEN
                    --
                    CLOSE gc_num_veiculos_coti;
                    --
                    END IF;
                    OPEN gc_num_veiculos_coti(pc_cod_cia        => p_cod_cia,
                                            pc_cod_ramo       => p_cod_ramo,
                                            pc_num_coti_grupo => l_rec_lista_com_proposta.NUM_COTIZACION);
                    --
                    FETCH gc_num_veiculos_coti
                    INTO l_num_veiculos;
                    --
                    mx('l_rec_lista_3_pct.NUM_COTIZACION',l_rec_lista_com_proposta.NUM_COTIZACION);
                    mx('l_num_veiculos',l_num_veiculos);
                    CLOSE gc_num_veiculos_coti;
                    --
                ELSE
                    IF gc_num_veiculos%ISOPEN THEN
                    --
                    CLOSE gc_num_veiculos;
                    --
                    END IF;
                    --
                    OPEN gc_num_veiculos(pc_cod_cia        => p_cod_cia,
                                        pc_cod_ramo       => p_cod_ramo,
                                        pc_num_coti_grupo => l_rec_lista_com_proposta.NUM_COTIZACION);
                    --
                    FETCH gc_num_veiculos
                    INTO l_num_veiculos;
                    --
                    CLOSE gc_num_veiculos;
              END IF;
              --}--v 2.96
              --
              l_tip_situ_coti_grp := f_recupera_val_dv(p_cod_cia        => p_cod_cia,
                                                       p_cod_ramo       => p_cod_ramo,
                                                       p_num_cotizacion => l_rec_lista_com_proposta.NUM_COTIZACION,
                                                       p_nom_columna    => 'TIP_SITU_COTI_GRP');
              -- v 4.39
              l_nom_situ_coti_grp := l_rec_lista_com_proposta.NOM_NIVEL_COTACAO;
              --
              /*l_nom_situ_coti_grp := em_f_nom_valor(p_cod_cia       => p_cod_cia,
                                                    p_cod_ramo      => p_cod_ramo,
                                                    p_cod_modalidad => em.COD_MODALIDAD_GEN,
                                                    p_fec_validez   => SYSDATE,
                                                    p_cod_campo     => 'TIP_SITU_COTI_GRP',
                                                    p_cod_valor     => NVL(l_tip_situ_coti_grp,
                                                                            '1'));*/
              --
              -- Ajuste para prevenir error al calcular numero de riesgos si TIP_SITU_COTI_GRP = 11. No recupera vehiculos de c2009030_vcr.
              IF     NVL( l_num_veiculos, 0 ) = 0
                 AND NVL( l_tip_situ_coti_grp, ea_k_231_flota_batch.g_k_tip_situ_elaboracion ) = ea_k_231_flota_batch.g_k_tip_situ_prop_efec
              THEN
                 --
                 mx('-', 'Go to efectivada 2');
                 --
                 IF gc_num_veiculos_prop_efec %ISOPEN
                 THEN
                    --
                    CLOSE gc_num_veiculos_prop_efec;
                    --
                 END IF;
                 --
                 OPEN gc_num_veiculos_prop_efec(pc_cod_cia          => p_cod_cia  ,
                                                pc_cod_ramo         => p_cod_ramo ,
                                                pc_num_poliza_grupo => l_rec_lista_com_proposta.NUM_COTIZACION );
                 --
                 FETCH gc_num_veiculos_prop_efec INTO l_num_veiculos;
                 --
                 CLOSE gc_num_veiculos_prop_efec;
                 --
              END IF;
              --
            END IF;
            --abre dados
            l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,'colValoresCampos')));
            --monta nome do campo
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_codCampo)));
            l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, 'NUM_ITEMS');
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo,DBMS_XMLDOM.makenode(l_text_campo));
            --monta valor
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_valCampo)));
            l_text_campo := DBMS_XMLDOM.createtextnode(l_document,l_num_veiculos);
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor,DBMS_XMLDOM.makenode(l_text_campo));
            -- --abre dados
            l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,'colValoresCampos')));
            --monta nome do campo
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_codCampo)));
            l_text_campo  := DBMS_XMLDOM.createtextnode(l_document,'TIP_SITU_COTI_GRP');
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo,DBMS_XMLDOM.makenode(l_text_campo));
            --monta valor
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_valCampo)));
            l_text_campo := DBMS_XMLDOM.createtextnode(l_document,l_tip_situ_coti_grp);
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor,DBMS_XMLDOM.makenode(l_text_campo));
            --
            --abre dados
            l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,'colValoresCampos')));
            --monta nome do campo
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_codCampo)));
            l_text_campo  := DBMS_XMLDOM.createtextnode(l_document,'NOM_SITU_COTI_GRP');
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo,DBMS_XMLDOM.makenode(l_text_campo));
            --monta valor
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_valCampo)));
            l_text_campo := DBMS_XMLDOM.createtextnode(l_document,l_nom_situ_coti_grp);
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor,DBMS_XMLDOM.makenode(l_text_campo));
            --
            --abre dados   - v 4.78
            l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,'colValoresCampos')));
            --monta nome do campo
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_codCampo)));
            l_text_campo  := DBMS_XMLDOM.createtextnode(l_document,'NUM_PROPOSTA');
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo,DBMS_XMLDOM.makenode(l_text_campo));
            --monta valor
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_valCampo)));
            l_text_campo := DBMS_XMLDOM.createtextnode(l_document,l_rec_lista_com_proposta.NUM_PROPOSTA);
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor,DBMS_XMLDOM.makenode(l_text_campo));
            --} v4.78
            END LOOP;
        ELSE
          --
          LOOP
            FETCH l_retorno_xml
              INTO l_rec_lista;
            --
            EXIT WHEN l_retorno_xml%NOTFOUND;
            --abre dados
            l_node_lista := DBMS_XMLDOM.makenode(l_document);
            l_node_lista := DBMS_XMLDOM.appendchild(l_node_lista,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,'colValoresLista')));
            --abre dados
            l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
            --monta nome do campo
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
            l_text_campo  := DBMS_XMLDOM.createtextnode(l_document,'NUM_COTIZACION');
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo,DBMS_XMLDOM.makenode(l_text_campo));
            --monta valor
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
            l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista.NUM_COTIZACION );
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
            --abre dados
            l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,'colValoresCampos')));
            --monta nome do campo
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_codCampo)));
            l_text_campo  := DBMS_XMLDOM.createtextnode(l_document,'NOM_TERCERO');
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo,DBMS_XMLDOM.makenode(l_text_campo));
            --monta valor
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_valCampo)));
            l_text_campo := DBMS_XMLDOM.createtextnode(l_document,l_rec_lista.NOM_TERCERO);
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor,DBMS_XMLDOM.makenode(l_text_campo));
            --abre dados
            l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,'colValoresCampos')));
            --monta nome do campo
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_codCampo)));
            l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, 'COD_DOCUM');
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo,DBMS_XMLDOM.makenode(l_text_campo));
            --monta valor
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_valCampo)));
            l_text_campo := DBMS_XMLDOM.createtextnode(l_document,l_rec_lista.COD_DOCUM);
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor,DBMS_XMLDOM.makenode(l_text_campo));
            --abre dados
            l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,'colValoresCampos')));
            --monta nome do campo
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_codCampo)));
            l_text_campo  := DBMS_XMLDOM.createtextnode(l_document,'NUM_PASO_ATUAL');
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo,DBMS_XMLDOM.makenode(l_text_campo));
            --monta valor
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_valCampo)));
            l_text_campo := DBMS_XMLDOM.createtextnode(l_document,l_rec_lista.NUM_PASO_ATUAL);
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor,DBMS_XMLDOM.makenode(l_text_campo));
            --abre dados
            l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,'colValoresCampos')));
            --monta nome do campo
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_codCampo)));
            l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, 'COD_AGT');
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo,DBMS_XMLDOM.makenode(l_text_campo));
            --monta valor
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_valCampo)));
            l_text_campo := DBMS_XMLDOM.createtextnode(l_document,l_rec_lista.COD_AGT);
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor,DBMS_XMLDOM.makenode(l_text_campo));
            --abre dados
            l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,'colValoresCampos')));
            --monta nome do campo
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_codCampo)));
            l_text_campo  := DBMS_XMLDOM.createtextnode(l_document,'FEC_EMISION');
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo,DBMS_XMLDOM.makenode(l_text_campo));
            --monta valor
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_valCampo)));
            l_text_campo := DBMS_XMLDOM.createtextnode(l_document,l_rec_lista.FEC_EMISION);
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor,DBMS_XMLDOM.makenode(l_text_campo));
            --abre dados
            l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,'colValoresCampos')));
            --monta nome do campo
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_codCampo)));
            l_text_campo  := DBMS_XMLDOM.createtextnode(l_document,'MCA_CALCULADO');
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo,DBMS_XMLDOM.makenode(l_text_campo));
            --monta valor
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_valCampo)));
            l_text_campo := DBMS_XMLDOM.createtextnode(l_document,l_rec_lista.MCA_CALCULADO);
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor,DBMS_XMLDOM.makenode(l_text_campo));
            --abre dados
            l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,'colValoresCampos')));
            --monta nome do campo
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_codCampo)));
            l_text_campo  := DBMS_XMLDOM.createtextnode(l_document,'NOM_NIVEL_COTACAO');
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo,DBMS_XMLDOM.makenode(l_text_campo));
            --monta valor
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_valCampo)));
            l_text_campo := DBMS_XMLDOM.createtextnode(l_document,l_rec_lista.NOM_NIVEL_COTACAO);
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor,DBMS_XMLDOM.makenode(l_text_campo));
            --abre dados
            l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,'colValoresCampos')));
            --monta nome do campo
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_codCampo)));
            l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, 'FEC_ENVIO');
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo,DBMS_XMLDOM.makenode(l_text_campo));
            --monta valor
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_valCampo)));
            l_text_campo := DBMS_XMLDOM.createtextnode(l_document,l_rec_lista.FEC_ENVIO);
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor,DBMS_XMLDOM.makenode(l_text_campo));
            --abre dados
            l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,'colValoresCampos')));
            --monta nome do campo
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_codCampo)));
            l_text_campo  := DBMS_XMLDOM.createtextnode(l_document,'TIP_PRODUTO');
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo,DBMS_XMLDOM.makenode(l_text_campo));
            --monta valor
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_valCampo)));
            l_text_campo := DBMS_XMLDOM.createtextnode(l_document,l_rec_lista.TIP_PRODUTO);
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor,DBMS_XMLDOM.makenode(l_text_campo));
            --
            --abre dados
            l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,'colValoresCampos')));
            --monta nome do campo
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_codCampo)));
            l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, 'PRODUTO');
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo,DBMS_XMLDOM.makenode(l_text_campo));
            --monta valor
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_valCampo)));
            l_text_campo := DBMS_XMLDOM.createtextnode(l_document,l_rec_lista.PRODUTO);
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor,DBMS_XMLDOM.makenode(l_text_campo));
            --
            -- V I 2.15
            --abre dados   campo
            l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,'colValoresCampos')));
            --monta nome do campo
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_codCampo)));
            l_text_campo  := DBMS_XMLDOM.createtextnode(l_document,'TOT_REGISTRO');
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo,DBMS_XMLDOM.makenode(l_text_campo));
            --monta valor
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_valCampo)));
            l_text_campo := DBMS_XMLDOM.createtextnode(l_document,l_rec_lista.TOT_REGISTRO);
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor,DBMS_XMLDOM.makenode(l_text_campo));
            -- v F 2.15
            -- V I 3.48
            --
            l_txt_obser := fp_recupera_txt_obser(p_cod_cia        => p_cod_cia,
                                                 p_cod_ramo       => p_cod_ramo,
                                                 p_num_cotizacion => l_rec_lista_3_pct.NUM_COTIZACION);
            --
            --abre dados   campo
            l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista,
                                                    DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,
                                                                                                   'colValoresCampos')));
            --monta nome do campo
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados,
                                                     DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,
                                                                                                    g_k_val_campo_codCampo)));
            l_text_campo  := DBMS_XMLDOM.createtextnode(l_document,
                                                        'TXT_OBSER_BO');
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo,
                                                     DBMS_XMLDOM.makenode(l_text_campo));
            --monta valor
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados,
                                                    DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,
                                                                                                   g_k_val_campo_valCampo)));
            l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_txt_obser);
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor,
                                                    DBMS_XMLDOM.makenode(l_text_campo));
            --V F. 3.48
            -- { jwolff
            IF trn.SI = NVL(trn_k_global.ref_f_global('MCA_FROTA'), trn.NO) THEN
              --
              l_num_veiculos := 0;
              --
              --2.88{
                mx('-','IF num_vehiculos');
                --
                --v 2.96{
                IF g_flag_coti = 'TRUE' THEN
                    --
                    IF gc_num_veiculos_coti%ISOPEN THEN
                    --
                    CLOSE gc_num_veiculos_coti;
                    --
                    END IF;
                    OPEN gc_num_veiculos_coti(pc_cod_cia        => p_cod_cia,
                                            pc_cod_ramo       => p_cod_ramo,
                                            pc_num_coti_grupo => l_rec_lista.NUM_COTIZACION);
                    --
                    FETCH gc_num_veiculos_coti
                    INTO l_num_veiculos;
                    --
                    mx('l_rec_lista_3_pct.NUM_COTIZACION',l_rec_lista.NUM_COTIZACION);
                    mx('l_num_veiculos',l_num_veiculos);
                    CLOSE gc_num_veiculos_coti;
                    --
                ELSE
                    IF gc_num_veiculos%ISOPEN THEN
                    --
                    CLOSE gc_num_veiculos;
                    --
                    END IF;
                    --
                    OPEN gc_num_veiculos(pc_cod_cia        => p_cod_cia,
                                        pc_cod_ramo       => p_cod_ramo,
                                        pc_num_coti_grupo => l_rec_lista.NUM_COTIZACION);
                    --
                    FETCH gc_num_veiculos
                    INTO l_num_veiculos;
                    --
                    CLOSE gc_num_veiculos;
              END IF;
              --}--v 2.96
              --
              l_tip_situ_coti_grp := f_recupera_val_dv(p_cod_cia        => p_cod_cia,
                                                       p_cod_ramo       => p_cod_ramo,
                                                       p_num_cotizacion => l_rec_lista.NUM_COTIZACION,
                                                       p_nom_columna    => 'TIP_SITU_COTI_GRP');
              --
              l_nom_situ_coti_grp := em_f_nom_valor(p_cod_cia       => p_cod_cia,
                                                    p_cod_ramo      => p_cod_ramo,
                                                    p_cod_modalidad => em.COD_MODALIDAD_GEN,
                                                    p_fec_validez   => SYSDATE,
                                                    p_cod_campo     => 'TIP_SITU_COTI_GRP',
                                                    p_cod_valor     => NVL(l_tip_situ_coti_grp,
                                                                          '1'));
              --
              -- Ajuste para prevenir error al calcular numero de riesgos si TIP_SITU_COTI_GRP = 11. No recupera vehiculos de c2009030_vcr.
              IF     NVL( l_num_veiculos, 0 ) = 0
                 AND NVL( l_tip_situ_coti_grp, ea_k_231_flota_batch.g_k_tip_situ_elaboracion ) = ea_k_231_flota_batch.g_k_tip_situ_prop_efec
              THEN
                 --
                 mx('-', 'Go to efectivada 2');
                 --
                 IF gc_num_veiculos_prop_efec %ISOPEN
                 THEN
                    --
                    CLOSE gc_num_veiculos_prop_efec;
                    --
                 END IF;
                 --
                 OPEN gc_num_veiculos_prop_efec(pc_cod_cia          => p_cod_cia  ,
                                                pc_cod_ramo         => p_cod_ramo ,
                                                pc_num_poliza_grupo => l_rec_lista.NUM_COTIZACION );
                 --
                 FETCH gc_num_veiculos_prop_efec INTO l_num_veiculos;
                 --
                 CLOSE gc_num_veiculos_prop_efec;
                 --
              END IF;
              --
            END IF;
            --abre dados
            l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,'colValoresCampos')));
            --monta nome do campo
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_codCampo)));
            l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, 'NUM_ITEMS');
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo,DBMS_XMLDOM.makenode(l_text_campo));
            --monta valor
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_valCampo)));
            l_text_campo := DBMS_XMLDOM.createtextnode(l_document,l_num_veiculos);
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor,DBMS_XMLDOM.makenode(l_text_campo));
            -- --abre dados
            l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,'colValoresCampos')));
            --monta nome do campo
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_codCampo)));
            l_text_campo  := DBMS_XMLDOM.createtextnode(l_document,'TIP_SITU_COTI_GRP');
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo,DBMS_XMLDOM.makenode(l_text_campo));
            --monta valor
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_valCampo)));
            l_text_campo := DBMS_XMLDOM.createtextnode(l_document,l_tip_situ_coti_grp);
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor,DBMS_XMLDOM.makenode(l_text_campo));
            --
            --abre dados
            l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,'colValoresCampos')));
            --monta nome do campo
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_codCampo)));
            l_text_campo  := DBMS_XMLDOM.createtextnode(l_document,'NOM_SITU_COTI_GRP');
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo,DBMS_XMLDOM.makenode(l_text_campo));
            --monta valor
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_valCampo)));
            l_text_campo := DBMS_XMLDOM.createtextnode(l_document,l_nom_situ_coti_grp);
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor,DBMS_XMLDOM.makenode(l_text_campo));
            -- } jwolff
            --
            --abre dados I 5.29
            l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,'colValoresCampos')));
            --monta nome do campo
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_codCampo)));
            l_text_campo  := DBMS_XMLDOM.createtextnode(l_document,'NUM_SIMULACION');
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo,DBMS_XMLDOM.makenode(l_text_campo));
            --monta valor
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_valCampo)));
            l_text_campo := DBMS_XMLDOM.createtextnode(l_document,l_rec_lista.NUM_SIMULACION);
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor,DBMS_XMLDOM.makenode(l_text_campo));
            -- F 5.29
            -- 4.80
            l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista,
                                                    DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,
                                                                                                   'colValoresCampos')));
            --monta nome do campo
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados,
                                                     DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,
                                                                                                    g_k_val_campo_codCampo)));
            l_text_campo  := DBMS_XMLDOM.createtextnode(l_document,
                                                        'TIP_RENOV');
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo,
                                                     DBMS_XMLDOM.makenode(l_text_campo));
            --monta valor
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados,
                                                    DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,
                                                                                                   g_k_val_campo_valCampo)));
            l_text_campo := DBMS_XMLDOM.createtextnode(l_document,
                                                       l_rec_lista.TIP_RENOV);
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor,
                                                    DBMS_XMLDOM.makenode(l_text_campo));
            -- 4.80
            -- I 5.29
            --abre dados
            l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,'colValoresCampos')));
            --monta nome do campo
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_codCampo)));
            l_text_campo  := DBMS_XMLDOM.createtextnode(l_document,'TIP_SITU_BO');
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo,DBMS_XMLDOM.makenode(l_text_campo));
            --monta valor
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_valCampo)));
            l_text_campo := DBMS_XMLDOM.createtextnode(l_document,l_rec_lista.TIP_SITU_BO);
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor,DBMS_XMLDOM.makenode(l_text_campo));
            -- F 5.29
            -- {v5.35
            --abre dados   campo
            l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,'colValoresCampos')));
            --monta nome do campo
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_codCampo)));
            l_text_campo  := DBMS_XMLDOM.createtextnode(l_document,'NUM_DIAS_VALIDEZ');
            l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo,DBMS_XMLDOM.makenode(l_text_campo));
            --monta valor
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados,DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document,g_k_val_campo_valCampo)));
            l_text_campo := DBMS_XMLDOM.createtextnode(l_document,l_rec_lista.NUM_DIAS_VALIDEZ);
            l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor,DBMS_XMLDOM.makenode(l_text_campo));
            -- v5.35}
      END LOOP;
    END IF;
    -- F 2.43
       --
       l_xml_lista := DBMS_XMLDOM.getxmltype(l_document);
       DBMS_XMLDOM.freedocument(l_document);
       p_clob_lista := l_xml_lista.getclobval;
       --
       mx('F', 'p_gerar_xml_lista_campos_mcc');
       --
     END p_gerar_xml_lista_campos_mcc;
     --
     -- JWOLFF
     /* ------------------------------------------------------
     || transforma resultado do processamento em CLOB de XML
     */ ------------------------------------------------------
     --
     PROCEDURE p_gerar_xml_lista_campos_mcc(p_retorno        IN ref_cursor            ,
                                            p_clob_lista     OUT CLOB                 )
     IS
     --
     BEGIN
       --
       mx('I', 'p_gerar_xml_lista_campos_mcc');
       --
       p_gerar_xml_lista_campos_mcc(p_retorno, trn_k_global.cod_cia, em.COD_RAMO_GEN, p_clob_lista);
       --
       mx('F', 'p_gerar_xml_lista_campos_mcc');
       --
     END p_gerar_xml_lista_campos_mcc;
     --
/* ------------------------------------------------------
     || transforma resultado do processamento em CLOB de XML  CVG
     */ ------------------------------------------------------
     --I - 1.61
     PROCEDURE p_gerar_xml_lista_campos_intv (p_retorno        IN ref_cursor,
                                            p_clob_lista     OUT CLOB)
     IS
     --
     l_retorno_xml   ref_cursor;
     l_rec_lista     rec_lista_cotacao_intv;
     l_xml_lista     XMLTYPE;
     l_document      DBMS_XMLDOM.DOMDOCUMENT;
     l_node_dados    DBMS_XMLDOM.DOMNODE;
     l_node_lista    DBMS_XMLDOM.DOMNODE;
     l_node_codigo   DBMS_XMLDOM.DOMNODE;
     l_node_valor    DBMS_XMLDOM.DOMNODE;
     l_text_campo    DBMS_XMLDOM.DOMTEXT;
     --
     BEGIN
       --
       mx('I', 'p_gerar_xml_lista_campos_intv');
       --
       l_retorno_xml := p_retorno;
       l_document    := DBMS_XMLDOM.newdomdocument;
       l_node_lista  := DBMS_XMLDOM.makenode(l_document);
       --
       LOOP FETCH l_retorno_xml INTO l_rec_lista;
         ---
         EXIT WHEN l_retorno_xml%NOTFOUND;
         --
         --abre dados
         l_node_lista := DBMS_XMLDOM.makenode(l_document);
         l_node_lista := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresLista')));
         --abre dados
         l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
         --monta nome do campo
         l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
         l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, 'NUM_COTIZACION');
         l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
         --monta valor
         l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
         l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista.NUM_COTIZACION );
         l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
         --abre dados
         l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
         --monta nome do campo
         l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
         l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, 'NUM_POLIZA');
         l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
         --monta valor
         l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
         l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista.NUM_POLIZA );
         l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
         --abre dados
         l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
         --monta nome do campo
         l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
         l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, 'NOM_TERCERO');
         l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
         --monta valor
         l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
         l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista.NOM_TERCERO );
         l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
         --abre dados
         l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
         --monta nome do campo
         l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
         l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, 'COD_DOCUM');
         l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
         --monta valor
         l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
         l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista.COD_DOCUM );
         l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
         --abre dados
         l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
         --monta nome do campo
         l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
         l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, 'NUM_PASO_ATUAL');
         l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
         --monta valor
         l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
         l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista.NUM_PASO_ATUAL );
         l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
         --abre dados
         l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
         --monta nome do campo
         l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
         l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, 'COD_AGT');
         l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
         --monta valor
         l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
         l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista.COD_AGT );
         l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
         --abre dados
         l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
         --monta nome do campo
         l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
         l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, 'FEC_EMISION');
         l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
         --monta valor
         l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
         l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista.FEC_EMISION );
         l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
         --abre dados
         l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
         --monta nome do campo
         l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
         l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, 'MCA_CALCULADO');
         l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
         --monta valor
         l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
         l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista.MCA_CALCULADO );
         l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
         --abre dados
         l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
         --monta nome do campo
         l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
         l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, 'NOM_NIVEL_COTACAO');
         l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
         --monta valor
         l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
         l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista.NOM_NIVEL_COTACAO );
         l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
         --abre dados
         l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
         --monta nome do campo
         l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
         l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, 'FEC_ENVIO');
         l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
         --monta valor
         l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
         l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista.FEC_ENVIO );
         l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
         --abre dados
         l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
         --monta nome do campo
         l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
         l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, 'TIP_PRODUTO');
         l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
         --monta valor
         l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
         l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista.TIP_PRODUTO );
         l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
         --
         --abre dados
         l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));
         --monta nome do campo
         l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));
         l_text_campo  := DBMS_XMLDOM.createtextnode(l_document, 'PRODUTO');
         l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));
         --monta valor
         l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));
         l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista.PRODUTO);
         l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));
         --
       END LOOP;
       --
       l_xml_lista := DBMS_XMLDOM.getxmltype(l_document);
       DBMS_XMLDOM.freedocument(l_document);
       p_clob_lista := l_xml_lista.getclobval;
       --
       mx('F', 'p_gerar_xml_lista_campos_intv');
       --
     END p_gerar_xml_lista_campos_intv;
     -- F - 1.61
     /* ---------------------------------------------------------------- *
     || Validacao de controle de passo: Flexibilidade da cotacao e Recusa Flexivel
     */ ----------------------------------------------------------------
     --
     PROCEDURE p_valida_controle_passo(p_cod_cia          IN  G9999992.cod_cia%TYPE,
                                       p_cod_ramo         IN  G9999992.cod_ramo%TYPE,
                                       p_cod_tarifa       IN  G9999992.cod_tarifa%TYPE,
                                       p_cod_agt          IN  G9999992.cod_agt%TYPE,
                                       p_num_cotizacion   IN  C2009030_vcr.num_cotizacion%TYPE,
                                       p_num_poliza_grupo IN  A2000500.num_poliza_grupo%TYPE,
                                       p_num_contrato     IN  A2000500.num_contrato%TYPE,
                                       p_num_subcontrato  IN  A2000500.num_contrato%TYPE,
                                       p_num_paso         IN  G9999992.num_paso%TYPE,
                                       p_tip_mvto_batch   IN  A2000500.tip_mvto_batch%TYPE,
                                       p_xml_in           IN  CLOB,
                                       p_xml              OUT CLOB)
     IS
        --
        l_retorno             ref_cursor               ;
        l_mca_poliza_grupo    c2000000.val_columna%TYPE;
        --
        PROCEDURE pi_inicializa_variables
        IS
        --
        BEGIN
          --
          g_fic_traza      := NVL(p_num_cotizacion, g_fic_traza);
          --
          g_tip_mvto_batch := NVL(p_tip_mvto_batch, g_k_tip_mvto_batch_cotacao);
          --
          pp_asigna('cod_cia'         ,p_cod_cia);
          pp_asigna('cod_ramo'        ,p_cod_ramo);
          pp_asigna('cod_tarifa'      ,p_cod_tarifa);
          pp_asigna('cod_agt'         ,p_cod_agt);
          pp_asigna('num_cotizacion'  ,p_num_cotizacion);
          pp_asigna('num_paso'        ,p_num_paso);
          pp_asigna('tip_mvto_batch'  ,g_tip_mvto_batch);
          --
          pp_asigna('num_poliza_grupo',NVL(p_num_poliza_grupo, em.NUM_POLIZA_GRUPO_GEN));
          pp_asigna('num_contrato'    ,NVL(p_num_contrato    , em.NUM_CONTRATO_GEN));
          pp_asigna('num_subcontrato' ,NVL(p_num_subcontrato , em.NUM_SUBCONTRATO_GEN));
          --
          pp_asigna('num_poliza_cliente',NVL(fp_ref_devuelve_c('num_poliza_cliente'), em.NUM_POLIZA_GEN));
          pp_asigna('num_poliza'        ,NVL(fp_ref_devuelve_c('num_poliza')        , em.NUM_POLIZA_GEN));
          --
          pp_asigna('cod_nivel1'      ,NVL(fp_ref_devuelve_n('cod_nivel1'),dc.COD_NIVEL1_GEN));
          pp_asigna('cod_nivel2'      ,NVL(fp_ref_devuelve_n('cod_nivel2'),dc.COD_NIVEL2_GEN));
          pp_asigna('cod_nivel3'      ,NVL(fp_ref_devuelve_n('cod_nivel2'),dc.COD_NIVEL3_GEN));
          pp_asigna('cod_canal1'      ,NVL(fp_ref_devuelve_c('cod_canal1'),dc.COD_CANAL1_GEN));
          pp_asigna('cod_canal2'      ,NVL(fp_ref_devuelve_c('cod_canal2'),dc.COD_CANAL1_GEN));
          pp_asigna('cod_canal3'      ,NVL(fp_ref_devuelve_c('cod_canal3'),dc.COD_CANAL1_GEN));
          --
          pp_asigna('cod_idioma'      ,g_k_cod_idioma);
          --
          pp_asigna('fec_validez'     ,g_fec_tratamiento);
          --
          IF fp_ref_devuelve_c('mca_poliza_grupo') IS NULL
          THEN
            --
            IF p_num_poliza_grupo IS NULL                   OR
               p_num_poliza_grupo = em.NUM_POLIZA_GRUPO_GEN OR
               p_num_poliza_grupo = TO_CHAR(trn.CERO)
            THEN
              --
              l_mca_poliza_grupo := trn.NO;
              --
            ELSE
              --
              l_mca_poliza_grupo := trn.SI;
              --
            END IF;
            --
          ELSE
            --
            l_mca_poliza_grupo := fp_ref_devuelve_c('mca_poliza_grupo');
            --
          END IF;
          --
          pp_inicializa_variables;
          --
        END pi_inicializa_variables;
        --
     BEGIN
        --
        mx('I', 'p_valida_controle_passo');
        --
        pi_inicializa_variables;
        --
        IF g_tip_mvto_batch   = g_k_tip_mvto_batch_cotacao AND
           l_mca_poliza_grupo = trn.NO
        THEN
           --
           IF p_xml_in IS NULL THEN
              --
              g_num_cotizacion     := p_num_cotizacion;
              --
           ELSE
              --
              g_num_cotizacion     := fp_recupera_valor (p_xml_in, 'NUM_COTIZACION');
              --
              g_num_simulacion     := fp_recupera_valor (p_xml_in, 'NUM_SIMULACION');
              --

           END IF;
           --
           IF fp_valida_controle_passo(g_cod_cia
                                      ,g_cod_ramo
                                      ,g_cod_tarifa
                                      ,g_cod_agt
                                      ,g_num_cotizacion
                                      ,g_num_simulacion
                                      ,g_num_poliza_grupo
                                      ,g_num_contrato
                                      ,g_num_subcontrato
                                      ,p_num_paso
                                      ,g_tip_mvto_batch)
           THEN
             --
             pp_processa_retorno(p_xml);
             --
           ELSE
             --
             pp_borra_tablas_cotizacion(g_cod_cia
                                       ,g_cod_ramo
                                       ,g_cod_tarifa
                                       ,g_cod_agt
                                       ,g_num_cotizacion
                                       ,g_num_simulacion
                                       ,g_num_poliza_grupo
                                       ,g_num_contrato
                                       ,g_num_subcontrato
                                       ,p_num_paso
                                       ,g_tip_mvto_batch);
             --
             g_err_msg.EXTEND(1); -- 4.99
             g_err_msg(g_err_msg.LAST) := fp_trata_msg('COD_RETORNO', -- 4.99
                                                                                       NULL,
                                                                                       g_k_pre_msg_erro || '2' || g_k_sep_cod_msg || g_txt_error);
             pp_processa_mensagem(g_err_msg, -- 4.99
                                  l_retorno);
             --
             p_gerar_xml_mensagem(l_retorno, p_xml);
             --
           END IF;
           --
        END IF;
        --
        mx('F', 'p_valida_controle_passo');
        --
     END p_valida_controle_passo;
     --

     --I 1.75
     PROCEDURE p_ws_consulta_config_banco (p_xml_in IN clob, p_xml out clob)

       IS

       l_retorno ref_cursor;
       l_reg_msg_erro typreg_msg_ws;
       p_cod_banco a2109170_vcr.cod_banco%type;
       --
       l_reg_a2009710      a2009710_vcr%ROWTYPE; -- 4.52
       --
      BEGIN
        --
        mx('I', 'P_WS_CONSULTA_CONFIG_BANCO');
        --
        -- 4.52 I
        --
        g_cod_cia              := trn_k_global.ref_f_global('COD_CIA');
        g_cod_ramo             := trn_k_global.ref_f_global('COD_RAMO');
        g_cod_agt              := trn_k_global.ref_f_global('COD_AGT');
        g_num_cotizacion       := trn_k_global.ref_f_global('NUM_COTIZACION');
        g_tip_mvto_batch       := trn_k_global.ref_f_global('TIP_MVTO_BATCH');
        g_num_paso             := trn_k_global.ref_f_global('NUM_PASO');
        --
        -- 4.52 F
        --
        g_err_msg := typtab_msg_ws(); -- 4.99
        --
        p_cod_banco := fp_recupera_valor (p_xml => p_xml_in, p_cod_campo => 'COD_BANCO');
        --
        IF p_cod_banco IS NULL THEN
           --
           g_cod_mensaje := 20098000;
           g_anx_mensaje := null;
           pp_devuelve_error;
           --
        END IF;
        --
        -- 4.52 I
        --
        l_reg_a2009710.cod_cia        := NVL(g_cod_cia, ea_k_231_utils_vcr.g_k_cod_cia_gen);
        l_reg_a2009710.cod_ramo       := NVL(g_cod_ramo, em.COD_RAMO_GEN)        ;
        l_reg_a2009710.cod_agt        := NVL(g_cod_agt, em.COD_AGT_GEN)          ;
        l_reg_a2009710.num_cotizacion := NVL(g_num_cotizacion, em.NUM_POLIZA_GEN);
        l_reg_a2009710.tip_mvto_batch := NVL(g_tip_mvto_batch,9)     ;
        l_reg_a2009710.num_paso       := NVL(g_num_paso,99)          ;
        l_reg_a2009710.txt_processo   := 'consultarConfiguracaoBanco';
        l_reg_a2009710.fec_ini        := SYSDATE                     ;
        l_reg_a2009710.fec_fim        := NULL                        ;
        l_reg_a2009710.cod_retorno    := NULL                        ;
        l_reg_a2009710.desc_xml_in    := p_xml_in                    ;
        l_reg_a2009710.desc_xml_out   := NULL                        ;
        --
        trn_k_global.asigna('COD_USR',g_cod_usr_automatico);
        --
        open l_retorno FOR
        SELECT 'MCA_DEBITO_CONTA'         AS nom_campo_mca_debito_conta,
               mca_debito_conta           AS mca_debito_conta,
               'MCA_DIGITO_AGENCIA'       AS nom_campo_mca_digito_agencia,
               mca_digito_agencia         AS mca_digito_agencia,
               'NUM_CAMPO_AGENCIA'        AS nom_campo_num_campo_agencia,
               num_campo_agencia          AS num_campo_agencia,
               'NUM_CAMPO_DIGITO_AGENCIA' AS nom_campo_num_campo_dg_ag,
               num_campo_digito_agencia   AS num_campo_digito_agencia,
               'MCA_DIGITO_CONTA'         AS nom_campo_mca_digito_conta,
               mca_digito_conta           AS mca_digito_conta,
               'NUM_CAMPO_CONTA'          AS nom_campo_num_campo_conta,
               num_campo_conta            AS num_campo_conta,
               'NUM_CAMPO_DIGITO_CONTA'   AS nom_campo_num_campo_dg_conta,
               num_campo_digito_conta     AS num_campo_digito_conta,
               'MCA_TIPO_CONTA'           AS nom_campo_mca_tipo_conta,
               mca_tipo_conta             AS mca_tipo_conta,
               'NUM_CAMPO_TIPO_CONTA'     AS nom_campo_num_campo_tipo_conta ,
               num_campo_tipo_conta       AS num_campo_tipo_conta
        FROM   a2109170_vcr
        WHERE  cod_banco = p_cod_banco;

        --
        p_gerar_xml_dados_banco(l_retorno, p_xml);
        --
        l_reg_a2009710.fec_fim        := SYSDATE;
        l_reg_a2009710.desc_xml_out   := p_xml;
        --
        IF LENGTH(p_xml) = trn.CERO THEN
          --
          l_reg_a2009710.cod_retorno    := g_k_cod_retorno_erro;
          --
        ELSE
          --
          l_reg_a2009710.cod_retorno    := g_k_cod_retorno_suce;
          --
        END IF;
        --
        em_k_a2009710_vcr.p_trata_log_processo(l_reg_a2009710);
        --
        mx('F', 'P_WS_CONSULTA_CONFIG_BANCO');
        --
        exception
      WHEN others THEN --
        l_reg_msg_erro := fp_trata_msg('COD_BANCO', sqlcode, sqlerrm);
        --
        g_err_msg.extend(1); -- 4.99
        g_err_msg(g_err_msg.last) := l_reg_msg_erro; -- 4.99
        --
        pp_processa_mensagem(g_err_msg, l_retorno); -- 4.99
        --
        p_gerar_xml_mensagem(l_retorno, p_xml);
        --
        g_err_msg := NULL; -- 4.99
        --
        l_reg_a2009710.fec_fim        := SYSDATE;
        l_reg_a2009710.desc_xml_out   := p_xml;
        l_reg_a2009710.cod_retorno    := g_k_cod_retorno_erro;
        --
        em_k_a2009710_vcr.p_trata_log_processo(l_reg_a2009710);
        --
        trn_k_global.borra_todas;
        --
        mx('F', 'P_WS_CONSULTA_CONFIG_BANCO - EXCEPTION');
        --
      END p_ws_consulta_config_banco;

        PROCEDURE p_gerar_xml_dados_banco(p_retorno IN ref_cursor,
                                          p_clob_lista OUT CLOB)
        IS
           --
           l_retorno_xml ref_cursor;
           l_rec_lista_banco rec_dados_banco;
           l_xml_lista XMLTYPE;
           l_document DBMS_XMLDOM.DOMDOCUMENT;
           l_node_dados DBMS_XMLDOM.DOMNODE;
           l_node_lista DBMS_XMLDOM.DOMNODE;
           l_node_codigo DBMS_XMLDOM.DOMNODE;
           l_node_valor DBMS_XMLDOM.DOMNODE;
           l_text_campo DBMS_XMLDOM.DOMTEXT;

           BEGIN

           --
           mx('I', 'p_gerar_xml_dados_banco');
           --

           l_retorno_xml := p_retorno;

           l_document := DBMS_XMLDOM.newdomdocument;

           l_node_lista := DBMS_XMLDOM.makenode(l_document);

           --

           LOOP FETCH l_retorno_xml INTO l_rec_lista_banco;

           --

           EXIT WHEN l_retorno_xml%NOTFOUND;

           --abre dados

           l_node_lista := DBMS_XMLDOM.makenode(l_document);

           l_node_lista := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresLista')));

          /*##################################################*/

          --abre dados

           l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));

           --monta nome do campo

           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));

           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_banco.NOM_CAMPO_MCA_DEBITO_CONTA);

           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));

           --monta valor

           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));

           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_banco.MCA_DEBITO_CONTA );

           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));

          /*##################################################*/

          --abre dados

           l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));

           --monta codigo

           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));

           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_banco.NOM_CAMPO_MCA_DIGITO_AGENCIA);

           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));

           --monta valor

           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));

           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_banco.MCA_DIGITO_AGENCIA );

           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));

          /*##################################################*/

           --abre dados

           l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));

           --monta codigo

           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));

           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_banco.NOM_CAMPO_NUM_CAMPO_AGENCIA);

           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));

           --monta valor

           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));

           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_banco.NUM_CAMPO_AGENCIA );

           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));

          /*##################################################*/

          --abre dados

           l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));

           --monta codigo

           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));

           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_banco.NOM_CAMPO_NUM_CAMPO_DG_AG);

           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));

           --monta valor

           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));

           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_banco.NUM_CAMPO_DIGITO_AGENCIA );

           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));

          /*##################################################*/

          --ABRE DADOS

           l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));

           --monta codigo

           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));

           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_banco.NOM_CAMPO_MCA_DIGITO_CONTA);

           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));

           --monta valor

           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));

           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_banco.MCA_DIGITO_CONTA );

           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));

          /*##################################################*/

          --monta codigo

           l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));

           --monta codigo

           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));

           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_banco.NOM_CAMPO_NUM_CAMPO_CONTA);

           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));

           --monta valor

           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));

           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_banco.NUM_CAMPO_CONTA);

           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));

          /*##################################################*/

          --monta codigo

           l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));

           --monta codigo

           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));

           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_banco.NOM_CAMPO_NUM_CAMPO_DG_CONTA);

           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));

           --monta valor

           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));

           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_banco.NUM_CAMPO_DIGITO_CONTA);

           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));

          /*##################################################*/

          --monta codigo

           l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));

           --monta codigo

           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));

           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_banco.NOM_CAMPO_MCA_TIPO_CONTA);

           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));

           --monta valor

           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));

           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_banco.MCA_TIPO_CONTA);

           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));

          /*##################################################*/

          --monta codigo

           l_node_dados := DBMS_XMLDOM.appendchild(l_node_lista, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, 'colValoresCampos')));

           --monta codigo

           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_codCampo)));

           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_banco.NOM_CAMPO_NUM_CAMPO_TIPO_CONTA);

           l_node_codigo := DBMS_XMLDOM.appendchild(l_node_codigo, DBMS_XMLDOM.makenode(l_text_campo));

           --monta valor

           l_node_valor := DBMS_XMLDOM.appendchild(l_node_dados, DBMS_XMLDOM.makenode(DBMS_XMLDOM.createelement(l_document, g_k_val_campo_valCampo)));

           l_text_campo := DBMS_XMLDOM.createtextnode(l_document, l_rec_lista_banco.NUM_CAMPO_TIPO_CONTA);

           l_node_valor := DBMS_XMLDOM.appendchild(l_node_valor, DBMS_XMLDOM.makenode(l_text_campo));

          END LOOP;
          --

           l_xml_lista := DBMS_XMLDOM.getxmltype(l_document);

           DBMS_XMLDOM.freedocument(l_document);

           p_clob_lista := l_xml_lista.getclobval;
           --
           mx('F', 'p_gerar_xml_dados_banco');
           --
           END p_gerar_xml_dados_banco;
     --F 1.75

      --
  PROCEDURE p_grava_pacote_cobertura IS
      l_exception       EXCEPTION;  -- 4.41
      l_obs_proceso    a2000520 .txt_error %TYPE; -- 4.41
    BEGIN
      -- I 4.41
      mx('I', 'p_grava_pacote_cobertura');
      pp_asigna('mca_preferencias_corredor',trn.si);
      ea_k_definicion_pacote_vcr.p_grava_pacote_cobertura(g_cob_dados,l_obs_proceso);
      mx('F', 'p_grava_pacote_cobertura');
      --
      IF l_obs_proceso <> g_k_tip_obs_ok THEN
      --
        g_cod_mensaje := g_k_cod_error_gen;
        g_anx_mensaje := l_obs_proceso;
        raise l_exception;
        --
      END IF;
      --
    EXCEPTION

    WHEN l_exception THEN
      --
      g_cod_mensaje := null;
      If l_obs_proceso IS NULL then
      --
        g_anx_mensaje    := SQLERRM;
      --
      END IF;
      --
      mx('F', 'p_grava_pacote_cobertura - EXCEPTION');

      pp_devuelve_error;
      WHEN OTHERS THEN
        --
      --ROLLBACK;
      g_cod_mensaje :=null;
      g_anx_mensaje := SQLERRM;
      --
      mx('F', 'p_grava_pacote_cobertura - EXCEPTION');
      pp_devuelve_error;
      -- F 4.41
  END p_grava_pacote_cobertura;
  --F 2.50
    --V 2.10
  --Inicializa type de retorno para cotac?es do Convivencia
  PROCEDURE p_inicializa_type_cvv IS
  BEGIN
    g_err_msg := TYPTAB_MSG_WS();
  END p_inicializa_type_cvv;
--
-- inicio v 4.44
  --
  /*  -------------------------
  ||    pp_trata_tip_duracion    :
  */  -------------------------
  --
  PROCEDURE pp_trata_tip_duracion(p_fec_efec_poliza     a2000030.fec_efec_poliza%TYPE,
                                  p_fec_vcto_poliza     a2000030.fec_vcto_poliza%TYPE,
                                  p_tip_duracion    OUT a2000020.val_campo      %TYPE)
  IS
    --
    l_num_meses NUMBER;
    --
    l_calc_vig_00 DF_CMN_NWT_XX_CNN.vrb_nam_val %TYPE:= NULL;
    l_calc_vig_01 DF_CMN_NWT_XX_CNN.vrb_nam_val %TYPE:= NULL;
    l_calc_vig_02 DF_CMN_NWT_XX_CNN.vrb_nam_val %TYPE:= NULL;
    l_calc_vig_03 DF_CMN_NWT_XX_CNN.vrb_nam_val %TYPE:= NULL;
    l_calc_vig_04 DF_CMN_NWT_XX_CNN.vrb_nam_val %TYPE:= NULL;
    l_calc_vig_05 DF_CMN_NWT_XX_CNN.vrb_nam_val %TYPE:= NULL;
    l_min_pluria  DF_CMN_NWT_XX_CNN.vrb_nam_val %TYPE:= NULL;
    l_max_pluria  DF_CMN_NWT_XX_CNN.vrb_nam_val %TYPE:= NULL;
    --
  BEGIN
    --
    l_num_meses := MONTHS_BETWEEN(p_fec_vcto_poliza,p_fec_efec_poliza);
    --
    l_calc_vig_00 := trn_k_df_cmn_nwt_xx_cnn.f_vrb_nam_val('NUM_DIAS_TIP_CALC_PRAZO_CURTO');
    l_calc_vig_01 := trn_k_df_cmn_nwt_xx_cnn.f_vrb_nam_val('NUM_MESES_TIP_CALC_ANUAL');
    l_calc_vig_02 := trn_k_df_cmn_nwt_xx_cnn.f_vrb_nam_val('NUM_MESES_TIP_CALC_BIANUAL');
    l_calc_vig_03 := trn_k_df_cmn_nwt_xx_cnn.f_vrb_nam_val('NUM_MESES_TIP_CALC_TRIANUAL');
    l_calc_vig_04 := trn_k_df_cmn_nwt_xx_cnn.f_vrb_nam_val('NUM_MESES_TIP_CALC_QUADRIANUAL');
    l_calc_vig_05 := trn_k_df_cmn_nwt_xx_cnn.f_vrb_nam_val('NUM_MESES_TIP_CALC_QUINQUENAL');
    l_min_pluria  := trn_k_df_cmn_nwt_xx_cnn.f_vrb_nam_val('MIN_MESES_TIP_CALC_PLURIANUAL');
    l_max_pluria  := trn_k_df_cmn_nwt_xx_cnn.f_vrb_nam_val('MAX_MESES_TIP_CALC_PLURIANUAL');
    --
    IF l_num_meses = to_number(l_calc_vig_01) THEN
      --
      p_tip_duracion := trn_k_df_cmn_nwt_xx_cnn.f_vrb_nam_val('TIP_CALC_ANUAL');
      --
    ELSIF l_num_meses = to_number(l_calc_vig_02) THEN
      --
      p_tip_duracion := trn_k_df_cmn_nwt_xx_cnn.f_vrb_nam_val('TIP_CALC_BIANUAL');
      --
    ELSIF l_num_meses = to_number(l_calc_vig_03) THEN
      --
      p_tip_duracion := trn_k_df_cmn_nwt_xx_cnn.f_vrb_nam_val('TIP_CALC_TRIANUAL');
      --
    ELSIF l_num_meses = to_number(l_calc_vig_04) THEN
      --
      p_tip_duracion := trn_k_df_cmn_nwt_xx_cnn.f_vrb_nam_val('TIP_CALC_QUADRIANUAL');
      --
    ELSIF l_num_meses >= to_number(l_calc_vig_05) THEN
      --
      p_tip_duracion := trn_k_df_cmn_nwt_xx_cnn.f_vrb_nam_val('TIP_CALC_QUINQUENAL');
      --
    ELSIF p_fec_vcto_poliza - p_fec_efec_poliza <= to_number(l_calc_vig_00) THEN
      --
      p_tip_duracion := trn_k_df_cmn_nwt_xx_cnn.f_vrb_nam_val('TIP_CALC_PRAZO_CURTO');
      --
    ELSIF l_num_meses BETWEEN l_min_pluria AND l_max_pluria THEN
      --
      p_tip_duracion := trn_k_df_cmn_nwt_xx_cnn.f_vrb_nam_val('TIP_CALC_PLURIANUAL');
      --
    END IF;
    --
    mx ('p_tip_duracion', p_tip_duracion);
  END pp_trata_tip_duracion;
  --

  /*  -------------------------
  ||    pp_trata_tempo_de_casa   :
  */  -------------------------
  --
  PROCEDURE pp_trata_tempo_de_casa(p_num_poliza_renov in   a2000030.num_poliza%TYPE,
                                   p_cod_ramo         in   a2000030.cod_ramo%TYPE  ,
                                   p_cod_cia          in   a2000030.cod_cia%TYPE   ,
                                   p_num_spto         in   a2000030.num_spto%TYPE  ,
                                   p_tempo_de_casa    in out  number               )
  IS
  --
  l_tempo_de_casa      number;
  --
  l_tip_duracion       g2109011_vcr.tip_duracion%TYPE:= NULL;
  --
  l_fec_efec_poliza    a2000030.fec_efec_poliza%TYPE:= NULL;
  --
  l_fec_vcto_poliza    a2000030.fec_vcto_poliza%TYPE:= NULL;

  --I. 5.17 Correcao ORA 2000
  l_anx_mensaje       VARCHAR2(350);
  --F. 5.17 Correcao ORA 2000
  BEGIN
    --
    l_tempo_de_casa := to_number(p_tempo_de_casa);
    --
      em_k_a2000030.p_lee( p_cod_cia       => p_cod_cia           ,
                          p_num_poliza    => p_num_poliza_renov  ,
                          p_num_spto      => p_num_spto          ,
                          p_num_apli      => trn.CERO            ,
                          p_num_spto_apli => trn.CERO            );

      l_fec_efec_poliza   := NVL(em_k_a2000030.f_fec_efec_poliza, TRUNC(SYSDATE));
      l_fec_vcto_poliza   := NVL(em_k_a2000030.f_fec_vcto_poliza, ADD_MONTHS(l_fec_efec_poliza,trn.MESES_ANIO));
    --
    pp_trata_tip_duracion(p_fec_efec_poliza => l_fec_efec_poliza
                         ,p_fec_vcto_poliza => l_fec_vcto_poliza
                         ,p_tip_duracion    => l_tip_duracion);
    --
    mx('trata_tempo_casa',l_tip_duracion);
    --
    p_tempo_de_casa    := l_tempo_de_casa + l_tip_duracion;
    --
    EXCEPTION
      WHEN OTHERS THEN
         --
         g_txt_error      := substr(SQLERRM,1,2000);
         l_anx_mensaje := trn.BLANCO || ss_k_mensaje.f_solo_texto_idioma(99999030, g_cod_idioma);
         --g_cod_mensaje    := '99999029';
         --g_anx_mensaje    := SQLERRM;
         --
         g_err_msg.EXTEND(1);
         g_err_msg(g_err_msg.LAST) := fp_trata_msg('COD_RETORNO',
                                                     '99999030',
                                                     l_anx_mensaje);
         --
         --I 5.39
         g_err_msg.EXTEND(1);
         g_err_msg(g_err_msg.LAST) := fp_trata_msg('',
                                                     null,
                                                     g_k_pre_msg_erro || '20098400' || g_k_sep_cod_msg || g_txt_error);

         --f 5.39
         --
         mx('F', 'p_grava_dados - EXCEPTION');
         --
         pp_devuelve_error;
         --
  END pp_trata_tempo_de_casa;
  --
  /*  -----------------------------
  ||     p_insere_tempo_de_casa   :
  */  -----------------------------
  --
  PROCEDURE p_insere_tempo_de_casa (p_cod_cia        in c2000000.cod_cia%TYPE,
                                    p_cod_ramo       in c2000000.cod_ramo%TYPE,
                                    p_num_cotizacion in c2000000.num_cotizacion%TYPE,
                                    p_tempo_de_casa  in c2000000.val_columna%TYPE)
  IS
  --
  BEGIN
    --
   INSERT INTO c2000000
               (COD_CIA,
                COD_RAMO,
                NUM_COTIZACION,
                NOM_TABLA,
                NOM_COLUMNA,
                COD_FILA,
                VAL_COLUMNA)
        VALUES (p_cod_cia,
                p_cod_ramo,
                p_num_cotizacion,
                'A2000020',
                'TEMPO_DE_CASA',
                '99999',
                p_tempo_de_casa);
            --
    EXCEPTION
                 WHEN DUP_VAL_ON_INDEX THEN

                      g_cod_mensaje :=null;
                      g_anx_mensaje := 'Erro no insert da tabela c2000000.Erro: ' || sqlerrm;

                 WHEN OTHERS THEN

                      g_cod_mensaje :=null;
                      g_anx_mensaje := 'Erro no insert da tabela c2000000.Erro: ' || sqlerrm;
            --
  END p_insere_tempo_de_casa;
  --
  --fim v 4.44
  --
  -- In??A???A???A?o V
     /* ------------------------
   ||  p_eligibiidade_faf: Verificar se o PCT FAF esta elegivel v 5.61
   */ ------------------------
  --
  --
  PROCEDURE p_eligibilidade_faf
  IS
  --
    l_xml CLOB;
  --
  BEGIN
    --
    mx('I', 'p_eligibilidade_faf');
    --
    g_xml_in := em_k_gen_ws.f_recupera_xml_in;
    --
    p_eligibilidade_faf(p_cod_cia         => trn_k_global.ref_f_global('COD_CIA'),
                              p_cod_ramo        => trn_k_global.ref_f_global('COD_RAMO'),
                              p_num_cotizacion  => trn_k_global.ref_f_global('NUM_COTIZACION'),
                              p_xml_in          => nvl(g_xml_in,em_k_gen_ws.f_recupera_xml_in),
                              p_xml             => l_xml
                            );
    --
    mx('F', 'p_eligibilidade_faf');
    --
  END p_eligibilidade_faf;
  -- Fim V.

  -- In??A???A???A?o V5.34
     /* ------------------------
   ||  p_eligibiidade_faf: Verificar se o PCT FAF esta elegivel v 5.61
   */ ------------------------
   --
  --
PROCEDURE p_eligibilidade_faf
               ( p_cod_cia        IN c2000000.cod_cia%TYPE,
                  p_cod_ramo       IN c2000000.cod_ramo%TYPE,
                  p_num_cotizacion IN c2000000.num_cotizacion%TYPE,
                  p_xml_in         IN   CLOB,
                  p_xml            OUT  CLOB
                )
  --
  --
  IS
    --
    vexception EXCEPTION;
    --
    l_elegivel NUMBER:=0;
    l_hist_faf NUMBER:=0;
    --
    l_imp_faf  a2109900_vcr.pct_faf%TYPE;
    l_imp_faf_sem_batente  a2109900_vcr.pct_faf%TYPE; -- CR
    --
    l_flag_faf CHAR(1) := 'N';
    l_flag_regra_faf  CHAR(1):='S';
    --
    l_mca_apiisu CHAR(1):='N';
    l_mca_comeround CHAR(1):='N';
    --
    l_num_cotizacion    c2000000.num_cotizacion%TYPE;-- CR
    l_cod_cia           g2109900_vcr.cod_cia%TYPE;
    l_cod_ramo          g2109900_vcr.cod_ramo%TYPE;
    l_cod_subramo       g2109140_vcr.tip_produto%TYPE;
    l_cod_tarifa        g2109900_vcr.cod_tarifa%TYPE;
    l_cod_canal_origem  g2109900_vcr.cod_canal_origem%TYPE;
    l_tip_seguro        g2109900_vcr.tip_seguro%TYPE;
    l_cod_tip_vehi      g2109900_vcr.cod_tip_vehi%TYPE;
    l_cod_docum         a2109900_vcr.cod_docum%TYPE;
    l_cod_amostra       g2109900_vcr.cod_amostra_de%TYPE;
    --
    l_tip_docum         a2109900_vcr.tip_docum%TYPE;
    l_cod_zona_tarifa   a2109900_vcr.cod_zona_tarifa%TYPE;
    l_cod_marca         a2109900_vcr.cod_marca%TYPE;
    l_cod_modelo        a2109900_vcr.cod_modelo%TYPE;
    l_cod_sub_modelo    a2109900_vcr.cod_sub_modelo%TYPE;
    l_cod_ano_fabr      a2109900_vcr.cod_ano_fabr%TYPE;
    --
    l_cod_hist_faf     a2109900_vcr.cod_hist_faf%TYPE;  -- CR
    l_tip_marcacao_robo df_cmn_nwt_xx_vrb_cnc.row_nam%TYPE; -- CR
    -- para gravar os dados para postirior consulta da ATENEA
    l_k_val_clave_formula_1 CONSTANT c2000000.nom_columna%TYPE := 'VAL_CLAVE_FORMULA#1';
    l_val_clave_formula1             c2000000.val_columna%TYPE;
    --
    /*TYPE l_t_dados_para_atenea IS RECORD (cod_cob          tron2000.g2109040_vcr.cod_cia         %TYPE,  --a.
                                          mca_contrata     tron2000.g2109040_vcr.mca_contrata    %TYPE,  --a.
                                          mca_contrata_cob tron2000.g2109041_vcr.mca_contrata_cob%TYPE,  --b.
                                          suma_aseg        tron2000.g2109040_vcr.suma_aseg       %TYPE,  --a.
                                          nom_cob          tron2000.a1002150.nom_cob             %TYPE); --c.
    l_reg_dados_para_atenea l_t_dados_para_atenea;*/
    l_atenea_cod_cob          tron2000.g2109040_vcr.cod_cia         %TYPE;
    l_atenea_mca_contrata     tron2000.g2109040_vcr.mca_contrata    %TYPE;
    l_atenea_mca_contrata_cob tron2000.g2109041_vcr.mca_contrata_cob%TYPE;
    l_atenea_suma_aseg        tron2000.g2109040_vcr.suma_aseg       %TYPE;
    l_atenea_nom_cob          tron2000.a1002150.nom_cob             %TYPE;

    --
    l_k_cob_vidros       CONSTANT a1002150.cod_cob%TYPE := 1301;
    l_k_cob_de           CONSTANT a1002150.cod_cob%TYPE := 392;
    l_k_cob_isdm         CONSTANT a1002150.cod_cob%TYPE := 204;
    l_k_cob_carroreserva CONSTANT a1002150.cod_cob%TYPE := 1302;
    l_k_assitencia_km    CONSTANT a1002150.cod_cob%TYPE := 1304;
    --
    l_k_val_cob_vidros       CONSTANT c2000000.val_columna%TYPE := 'COBERTURAS_VIDROS';        --1301;
    l_k_val_cob_de           CONSTANT c2000000.val_columna%TYPE := 'COBERTURAS_DE';            --392;
    l_k_val_cob_isdm         CONSTANT c2000000.val_columna%TYPE := 'COBERTURAS_ISDM';         --204;
    l_k_val_cob_carroreserva CONSTANT c2000000.val_columna%TYPE := 'COBERTURAS_CARRORESERVA'; --1302;
    l_k_val_assitencia_km    CONSTANT c2000000.val_columna%TYPE := 'ASSISTENCIAS_KM';         --1304;
    --
    l_k_tabla_g91        CONSTANT c2000000.nom_tabla%TYPE := 'G9999991';
    --
    PROCEDURE pi_grava_dados_para_ATENEA

    IS
       --

       CURSOR c_busca_val_clave_formula (pc_cod_cia        c2000000.cod_cia       %TYPE,
                                         pc_cod_ramo       c2000000.cod_ramo      %TYPE,
                                         pc_num_cotizacion c2000000.num_cotizacion%TYPE)
       IS
          --
          SELECT val_columna
            FROM c2000000 a
           WHERE a.cod_cia        = pc_cod_cia
             AND a.cod_ramo       = pc_cod_ramo
             AND a.num_cotizacion = pc_num_cotizacion
             AND a.nom_columna    = l_k_val_clave_formula_1;
          --
        CURSOR c_prepara_dados_atenea (pc_cod_cia           g2109040_vcr.cod_cia          %TYPE,
                                       pc_cod_ramo          g2109040_vcr.cod_ramo         %TYPE,
                                       pc_val_clave_formula g2109040_vcr.val_clave_formula%TYPE)
        IS
          --
          SELECT a.cod_cob,
                 a.mca_contrata    ,
                 b.mca_contrata_cob,
                 a.suma_aseg       ,
                 c.nom_cob
            FROM tron2000.g2109040_vcr a,
                 tron2000.g2109041_vcr b,
                 tron2000.a1002150 c
           WHERE a.cod_Cia           = pc_cod_cia --1
             AND a.val_clave_formula = pc_val_clave_formula --'Sua Preferencia-89585'
             AND a.cod_tarifa        = trn_k_global.ref_f_global('COD_TARIFA') --215
             AND a.cod_Ramo          = pc_cod_ramo
             AND a.mca_contrata      = trn.SI--'S'
             AND a.mca_defecto       = trn.SI--'S'
             AND a.cod_cob           IN (l_k_cob_vidros      ,
                                         l_k_cob_de          ,
                                         l_k_cob_isdm        ,
                                         l_k_cob_carroreserva,
                                         l_k_assitencia_km) -- coberturas para consulta ATENEA
             -- b
             AND b.cod_cia           = a.cod_Cia
             AND b.cod_ramo          = a.cod_ramo
             AND b.val_clave_formula = a.val_clave_formula
             AND b.cod_tarifa        = a.cod_tarifa
             AND b.cod_cob           = a.cod_cob
             AND b.cod_agt           = a.cod_agt
             AND b.mca_contrata_cob  = trn.SI--'S'
             -- c
             AND c.cod_cob           = b.cod_cob
             AND c.cod_ramo          = b.cod_ramo
             AND c.cod_cia           = a.cod_cia;
             --
       --
       /*TYPE l_t_dados_para_atenea IS RECORD (cod_cob          tron2000.g2109040_vcr.cod_cia         %TYPE,  --a.
                                          mca_contrata     tron2000.g2109040_vcr.mca_contrata    %TYPE,  --a.
                                          mca_contrata_cob tron2000.g2109041_vcr.mca_contrata_cob%TYPE,  --b.
                                          suma_aseg        tron2000.g2109040_vcr.suma_aseg       %TYPE,  --a.
                                          nom_cob          tron2000.a1002150.nom_cob             %TYPE); --c.*/
       --
       l_reg_dados_para_atenea c_prepara_dados_atenea%ROWTYPE;
       --
    BEGIN
       --
       mx('I','pi_grava_dados_para_ATENEA');
       --
       IF c_busca_val_clave_formula%ISOPEN
       THEN
          CLOSE c_busca_val_clave_formula;
       END IF;
       --
       mx('-', 'c_busca_val_clave_formula');
       mx('-',trn_k_global.ref_f_global('COD_CIA'));
       mx('-',trn_k_global.ref_f_global('COD_RAMO'));
       mx('-',trn_k_global.ref_f_global('NUM_COTIZACION'));
       OPEN c_busca_val_clave_formula (pc_cod_cia        => trn_k_global.ref_f_global('COD_CIA')      ,
                                       pc_cod_ramo       => trn_k_global.ref_f_global('COD_RAMO')     ,
                                       pc_num_cotizacion => trn_k_global.ref_f_global('NUM_COTIZACION'));
       --
       FETCH c_busca_val_clave_formula INTO l_val_clave_formula1;
       --
       IF c_prepara_dados_atenea%ISOPEN
       THEN
          CLOSE c_prepara_dados_atenea;
       END IF;
       --
       mx('-', 'c_prepara_dados_atenea');
       mx('-',trn_k_global.ref_f_global('COD_CIA'));
       mx('-',trn_k_global.ref_f_global('COD_RAMO'));
       mx('-',l_val_clave_formula1);
       OPEN c_prepara_dados_atenea (pc_cod_cia           => trn_k_global.ref_f_global('COD_CIA') ,
                                    pc_cod_ramo          => trn_k_global.ref_f_global('COD_RAMO'),
                                    pc_val_clave_formula => l_val_clave_formula1);
       --
       --INSERTA valores DEFAULT para as coberturas para consulta da ATENEA
       -- l_k_val_cob_vidros       CONSTANT c2000000.val_columna%TYPE := 'COBERTURAS_VIDROS';        --1301;
       pp_inserta_c2000000 (p_nom_tabla   => l_k_tabla_g91,
                            p_nom_columna => l_k_val_cob_vidros,
                            p_val_columna => trn.NO);
       -- l_k_val_cob_de           CONSTANT c2000000.val_columna%TYPE := 'COBERTURAS_DE';            --392;
       pp_inserta_c2000000 (p_nom_tabla   => l_k_tabla_g91,
                            p_nom_columna => l_k_val_cob_de,
                            p_val_columna => trn.NO);
       -- l_k_val_cob_isdm         CONSTANT c2000000.val_columna%TYPE := 'COBERTURAS_ISDM';         --204;
       pp_inserta_c2000000 (p_nom_tabla   => l_k_tabla_g91,
                            p_nom_columna => l_k_val_cob_isdm,
                            p_val_columna => trn.CERO);
       -- l_k_val_cob_carroreserva CONSTANT c2000000.val_columna%TYPE := 'COBERTURAS_CARRORESERVA'; --1302;
       pp_inserta_c2000000 (p_nom_tabla   => l_k_tabla_g91,
                            p_nom_columna => l_k_val_cob_carroreserva,
                            p_val_columna => trn.NO);
       -- l_k_val_assitencia_km    CONSTANT c2000000.val_columna%TYPE := 'ASSISTENCIAS_KM';         --1304;
       pp_inserta_c2000000 (p_nom_tabla   => l_k_tabla_g91,
                            p_nom_columna => l_k_val_assitencia_km,
                            p_val_columna => trn.NO);
       --
       mx('-','c_prepara_dados_atenea');
       LOOP
          --
          mx('-','c_prepara_dados_atenea 1');
          FETCH c_prepara_dados_atenea
          INTO l_reg_dados_para_atenea;
           /*INTO l_dados_atenea_cod_cob          ,
                l_atenea_mca_contrata_cob     ,
                l_dados_atenea_mca_cob ,
                l_dados_atenea_suma_aseg,
                l_dados_atenea_nom_cob; */
          --
          mx('-','c_prepara_dados_atenea 2');
          EXIT WHEN c_prepara_dados_atenea%NOTFOUND;
          --
          mx('-',l_atenea_cod_cob);
          mx('-',l_atenea_mca_contrata);
          mx('-',l_atenea_mca_contrata_cob);
          mx('-',l_atenea_suma_aseg);
          mx('-',l_atenea_nom_cob);
          --
          mx('-',l_reg_dados_para_atenea.cod_cob);
          mx('-',l_reg_dados_para_atenea.mca_contrata);
          mx('-',l_reg_dados_para_atenea.mca_contrata_cob);
          mx('-',l_reg_dados_para_atenea.suma_Aseg);
          mx('-',l_reg_dados_para_atenea.nom_cob);
          --
          IF l_reg_dados_para_atenea.cod_cob = l_k_cob_vidros
          THEN
             --
             IF l_reg_dados_para_atenea.mca_contrata     = trn.SI AND
                l_reg_dados_para_atenea.mca_contrata_cob = trn.SI
             THEN
                --
                pp_inserta_c2000000 (p_nom_tabla   => l_k_tabla_g91,
                                     p_nom_columna => l_k_val_cob_vidros,
                                     p_val_columna => trn.SI);
                --
             ELSE
                --
                pp_inserta_c2000000 (p_nom_tabla   => l_k_tabla_g91,
                                     p_nom_columna => l_k_val_cob_vidros,
                                     p_val_columna => trn.NO);
                --
             END IF;
             --
          ELSIF l_reg_dados_para_atenea.cod_cob = l_k_cob_de
          THEN
             --
             IF l_reg_dados_para_atenea.mca_contrata     = trn.SI AND
                l_reg_dados_para_atenea.mca_contrata_cob = trn.SI
             THEN
                --
                pp_inserta_c2000000 (p_nom_tabla   => l_k_tabla_g91,
                                     p_nom_columna => l_k_val_cob_de,
                                     p_val_columna => trn.SI);
                --
             ELSE
                --
                pp_inserta_c2000000 (p_nom_tabla   => l_k_tabla_g91,
                                     p_nom_columna => l_k_val_cob_de,
                                     p_val_columna => trn.NO);
                --
             END IF;
             --
          ELSIF l_reg_dados_para_atenea.cod_cob = l_k_cob_isdm
          THEN
             --
             IF l_reg_dados_para_atenea.mca_contrata     = trn.SI AND
                l_reg_dados_para_atenea.mca_contrata_cob = trn.SI
             THEN
                --
                pp_inserta_c2000000 (p_nom_tabla   => l_k_tabla_g91,
                                     p_nom_columna => l_k_val_cob_isdm,
                                     p_val_columna => l_reg_dados_para_atenea.suma_aseg);
                --
             ELSE
                --
                pp_inserta_c2000000 (p_nom_tabla   => l_k_tabla_g91,
                                     p_nom_columna => l_k_val_cob_isdm,
                                     p_val_columna => trn.CERO);
                --
             END IF;
             --
          ELSIF l_reg_dados_para_atenea.cod_cob = l_k_cob_carroreserva
          THEN
             --
             IF l_reg_dados_para_atenea.mca_contrata     = trn.SI AND
                l_reg_dados_para_atenea.mca_contrata_cob = trn.SI
             THEN
                --
                pp_inserta_c2000000 (p_nom_tabla   => l_k_tabla_g91,
                                     p_nom_columna => l_k_val_cob_carroreserva,
                                     p_val_columna => trn.SI);
                --
             ELSE
                --
                pp_inserta_c2000000 (p_nom_tabla   => l_k_tabla_g91,
                                     p_nom_columna => l_k_val_cob_carroreserva,
                                     p_val_columna => trn.NO);
                --
             END IF;
             --
          ELSIF l_reg_dados_para_atenea.cod_cob = l_k_assitencia_km
          THEN
             --
             IF l_reg_dados_para_atenea.mca_contrata     = trn.SI AND
                l_reg_dados_para_atenea.mca_contrata_cob = trn.SI
             THEN
                --
                pp_inserta_c2000000 (p_nom_tabla   => l_k_tabla_g91,
                                     p_nom_columna => l_k_val_assitencia_km,
                                     p_val_columna => trn.SI);
                --
             ELSE
                --
                pp_inserta_c2000000 (p_nom_tabla   => l_k_tabla_g91,
                                     p_nom_columna => l_k_val_assitencia_km,
                                     p_val_columna => trn.NO);
                --
             END IF;
             --
          END IF;
          --
       END LOOP;
       --
       mx('F','pi_grava_dados_para_ATENEA');
       --
    END pi_grava_dados_para_ATENEA;
  --
  BEGIN
      --
      mx('i', 'p_eligibilidade_faf');
      --
      mx('p_xml_in', SUBSTR(p_xml_in,0,50));
      l_num_cotizacion   := nvl(p_num_cotizacion,trn_k_global.ref_f_global('NUM_COTIZACION'));
      l_cod_cia          := nvl(p_cod_cia,trn_k_global.ref_f_global('COD_CIA'));
      l_cod_ramo         := nvl(p_cod_ramo,trn_k_global.ref_f_global('COD_RAMO'));
      --
      mx('Verifica se ? produto 231', 'p_eligibilidade_faf');
      --
      --
      -- Verificando de onde foi chamado o processo 28 - Eligibilidade FAF
      l_mca_apiisu    := em_k_gen_ws.f_recupera_valor(p_xml       => p_xml_in,
                                             p_cod_campo => 'MCA_APIISU'); -- CR

      l_mca_comeround := em_k_gen_ws.f_recupera_valor(p_xml       => p_xml_in,
                                             p_cod_campo => 'MCA_COMEROUND'); -- CR

      mx('l_mca_comeround', l_mca_comeround);
      pp_inserta_c2000000(p_nom_tabla   => ea_k_231_utils.g_k_tabla_dv,
                                                  p_nom_columna => 'MCA_APIISU',
                                                  p_val_columna => nvl(l_mca_apiisu,'N'));

      pp_inserta_c2000000(p_nom_tabla   => ea_k_231_utils.g_k_tabla_dv,
                                                  p_nom_columna => 'MCA_COMEROUND',
                                                  p_val_columna => nvl(l_mca_comeround,'N'));
      ----------------------------------------------------------------------------
      mx('l_mca_comeround',l_mca_comeround);
      IF (UPPER(l_mca_comeround) = trn.SI) then
         -- SE MCA_ATENEA = 'S' esse processo vai falhar obrigatoriamente depois de ea_k_231_coti.p_prepara_pacotes
         BEGIN
            --
            mx('-','p_calcula');
            p_calcula; -- calculo interrompido, soh retorna valores de pacotes de cobertura
            --
         EXCEPTION
           WHEN OTHERS THEN
             NULL;
         END;
         --
      END IF;
        mx('busca inf. cota?', 'p_eligibilidade_faf');
        --
        --
        WITH c_c2000000 AS (SELECT *
                              FROM (SELECT num_cotizacion
                                         , cod_cia
                                         , cod_ramo
                                         , nom_columna
                                         , val_columna
                                      FROM c2000000
                                     WHERE num_cotizacion = l_num_cotizacion
                                       AND cod_cia      = l_cod_cia
                                       AND cod_ramo     = l_cod_ramo)
                             pivot ( MAX(val_columna)
                                     FOR nom_columna IN ('MCA_RENOV_OUTRAS' AS tip_seguro
                                                        , 'TIP_PRODUTO' AS cod_subramo
                                                        , 'COD_TARIFA' as cod_tarifa -- CR
                                                        ,'COD_CANAL_ORIGEM' AS cod_canal_origem
                                                        ,'COD_TIP_VEHI' AS cod_tip_vehi
                                                        ,'COD_DOCUM' AS cod_docum
                                                        , 'TIP_DOCUM' AS tip_docum
                                                        , 'COD_ZONA_TARIFA' AS cod_zona_tarifa
                                                        , 'COD_MARCA' AS cod_marca
                                                        , 'COD_MODELO' AS cod_modelo
                                                        , 'COD_SUB_MODELO' AS cod_sub_modelo
                                                        , 'COD_ANO_FABR' AS cod_ano_fabr
                                                        , 'TIP_MARCACAO_ROBO' AS tip_marcacao_robo ) )
                             ORDER BY num_cotizacion)
             SELECT num_cotizacion
                  , cod_cia
                  , cod_ramo
                  , tip_seguro
                  , cod_subramo
                  , cod_tarifa -- CR
                  , cod_canal_origem
                  , cod_tip_vehi
                  , cod_docum
                  , tip_docum
                  , cod_zona_tarifa
                  , cod_marca
                  , cod_modelo
                  , cod_sub_modelo
                  , cod_ano_fabr
                  , tip_marcacao_robo
               INTO l_num_cotizacion
                  , l_cod_cia
                  , l_cod_ramo
                  , l_tip_seguro
                  , l_cod_subramo
                  , l_cod_tarifa -- CR
                  , l_cod_canal_origem
                  , l_cod_tip_vehi
                  , l_cod_docum
                  , l_tip_docum
                  , l_cod_zona_tarifa
                  , l_cod_marca
                  , l_cod_modelo
                  , l_cod_sub_modelo
                  , l_cod_ano_fabr
                  , l_tip_marcacao_robo
               FROM c_c2000000 a;
             --
             --
             -- -- Ajustando o codigo canal Origem para atendimento da DAE (3.1.1.2  RF002 Definicao Canal de Origem)

             IF l_tip_marcacao_robo IS NOT NULL then

               BEGIN

                 select cnc_vrb_val
                   into l_cod_canal_origem
                   from df_cmn_nwt_xx_vrb_cnc
                  where vrb_nam = 'TIP_MARCACAO_ROBO'
                    and row_nam = l_tip_marcacao_robo;

                     mx('l_cod_canal_origem', l_cod_canal_origem);
                 EXCEPTION
                   WHEN NO_DATA_FOUND THEN
                     NULL;

               END;
               --
               --
               pp_inserta_c2000000(p_nom_tabla   => ea_k_231_utils.g_k_tabla_dv,
                                                    p_nom_columna => 'COD_CANAL_ORIGEM',
                                                    p_val_columna => l_cod_canal_origem);
             END IF;
             -----------------------------------------------------------------------------
      /*
      -- Retirando a regra de premissa a pedido da Mapfre 09/10/2023
      IF l_cod_ramo = 231 and l_cod_subramo = 224
                          and l_cod_canal_origem in ('1','2','21','22','23')
                          and l_cod_tip_vehi BETWEEN 10 AND 23 THEN
        --
        l_flag_regra_faf := 'S';
        --
      ELSE
        l_flag_regra_faf := 'N';
      END IF;
      */
      --
      --
      mx('l_flag_regra_faf', l_flag_regra_faf);
      IF l_flag_regra_faf = 'S' THEN
        --
         mx('-','p_eligibilidade_faf - Consulta se existe informa? no table de controle de cota?');
         --
          begin
          select MAX(cod_hist_faf) AS cod_hist_faf
            into l_cod_hist_faf
            From G2109904_VCR
           WHERE cod_cia         = l_cod_cia
             AND cod_ramo        = l_cod_ramo
             AND num_cotizacion  = l_num_cotizacion
             AND cod_docum       = l_cod_docum
             AND cod_zona_tarifa = l_cod_zona_tarifa
             AND cod_marca       = l_cod_marca
             AND cod_modelo      = l_cod_modelo
             AND cod_sub_modelo  = l_cod_sub_modelo
             AND cod_ano_fabr    = l_cod_ano_fabr
             AND fec_validez     >= sysdate();

             exception
               when no_data_found then
                 l_cod_hist_faf := null;
           end;
             --

             mx('l_cod_hist_faf', l_cod_hist_faf);
             --
             mx('Consulta se existe informa?s Hist. FAF', 'p_eligibilidade_faf');
             --
             SELECT MAX(cod_hist_faf) AS cod_hist_faf
                  , COUNT(*) AS l_hist_faf
               INTO l_cod_hist_faf
                  , l_hist_faf
               FROM a2109900_vcr
              WHERE cod_cia         = l_cod_cia
                AND cod_ramo        = l_cod_ramo
                AND cod_docum       = l_cod_docum
                AND cod_zona_tarifa = l_cod_zona_tarifa
                AND cod_marca       = l_cod_marca
                AND cod_modelo      = l_cod_modelo
                AND cod_sub_modelo  = l_cod_sub_modelo
                AND cod_ano_fabr    = l_cod_ano_fabr
                AND cod_hist_faf    = NVL(l_cod_hist_faf,cod_hist_faf)
                AND status         IN (1, 2);
                --AND fec_validez  >= sysdate();
             --
             mx('l_cod_hist_faf', l_cod_hist_faf);
             mx('l_hist_faf', l_hist_faf);
             --
             mx('verifica faf elegivel', 'p_eligibilidade_faf');
             --
             l_cod_amostra := to_number(substr(l_cod_docum,4,1) || substr(l_cod_docum,6,1));
             --
             mx('l_cod_cia'         , l_cod_cia);
             mx('l_cod_ramo'        , l_cod_ramo);
             mx('l_cod_tarifa'      , l_cod_tarifa);
             mx('l_cod_canal_origem', l_cod_canal_origem);
             mx('l_tip_seguro'      , l_tip_seguro);
             mx('l_cod_tip_vehi'    , l_cod_tip_vehi);
             mx('l_cod_amostra'     , l_cod_amostra);
             --mx('verifica faf elegivel', 'p_eligibilidade_faf');
            SELECT count(1)
              INTO l_elegivel
              FROM g2109900_vcr a
             WHERE cod_cia          = l_cod_cia
               AND cod_ramo         = l_cod_ramo
               AND cod_tarifa       = l_cod_tarifa -- CR
               AND cod_canal_origem = l_cod_canal_origem
               AND tip_seguro       = l_tip_seguro
               AND cod_tip_vehi     = l_cod_tip_vehi
               AND l_cod_amostra  BETWEEN cod_amostra_de AND cod_amostra_ate
               AND fec_validez  = (SELECT MAX(fec_validez)
                                    FROM g2109900_vcr b
                                    WHERE b.cod_cia          = a.cod_cia
                                      AND b.cod_ramo         = a.cod_ramo
                                      AND b.cod_tarifa       = a.cod_tarifa -- CR
                                      AND b.cod_canal_origem = a.cod_canal_origem
                                      AND b.tip_seguro       = a.tip_seguro
                                      AND b.cod_tip_vehi     = a.cod_tip_vehi
                                      AND l_cod_amostra  BETWEEN cod_amostra_de AND cod_amostra_ate
                                      AND b.fec_validez >= TRUNC(SYSDATE));
             --
             -- dbms_output.put_line(l_elegivel);
             --
             --

             mx('l_elegivel', l_elegivel);
             mx('l_flag_faf', l_flag_faf);
             IF l_elegivel = 0 AND
                l_hist_faf = 0  -- se tiver hist aplica o batente anterior
             THEN
                l_flag_faf := 'N';
                --
                l_imp_faf := 1.0;
                --
                pp_inserta_c2000000(p_nom_tabla   => ea_k_231_utils.g_k_tabla_dv,
                                                    p_nom_columna => 'PCT_FAF',
                                                    p_val_columna => l_imp_faf);
                --
                --
                pp_inserta_c2000000(p_nom_tabla   => ea_k_231_utils.g_k_tabla_dv,
                                                    p_nom_columna => 'PCT_FAF_SEM_BATENTE',
                                                    p_val_columna => l_imp_faf);
                --
                --
                trn_k_global.asigna('PCT_FAF',  l_imp_faf);
                --
             ELSE
                l_flag_faf := 'S';
             END IF;
             --
             --
             --
             mx('-', 'p_eligibilidade_faf - Verifica sem existe hist??o aplicar o FAF');
             --
             IF l_hist_faf > 0 THEN
                --
                l_flag_faf := 'H';
                --
                --
                 begin

                   SELECT PCT_FAF, PCT_FAF_SEM_BATENTE
                     INTO l_imp_faf, l_imp_faf_sem_batente
                     FROM a2109900_vcr
                    WHERE cod_cia         = l_cod_cia
                      AND cod_ramo        = l_cod_ramo
                      AND cod_docum       = l_cod_docum
                      AND cod_zona_tarifa = l_cod_zona_tarifa
                      AND cod_marca       = l_cod_marca
                      AND cod_modelo      = l_cod_modelo
                      AND cod_sub_modelo  = l_cod_sub_modelo
                      AND cod_ano_fabr    = l_cod_ano_fabr
                      AND cod_hist_faf    = l_cod_hist_faf
                      AND status          = 1;
                      -- AND fec_validez  >= SYSDATE();
                      EXCEPTION
                        WHEN NO_DATA_FOUND THEN
                          -- jgfneto - confirmar.
                          l_imp_faf := 1.0;
                          l_imp_faf_sem_batente := 1.0;
                  end;
                  --
                  pp_inserta_c2000000(p_nom_tabla   => ea_k_231_utils.g_k_tabla_dv,
                                      p_nom_columna => 'PCT_FAF',
                                      p_val_columna => l_imp_faf);
                  --
                  pp_inserta_c2000000(p_nom_tabla   => ea_k_231_utils.g_k_tabla_dv,
                                                    p_nom_columna => 'PCT_FAF_SEM_BATENTE',
                                                    p_val_columna => l_imp_faf_sem_batente);
                  --
                  --
                  trn_k_global.asigna('PCT_FAF',  l_imp_faf);
                  --
                  --
                  pp_inserta_c2000000(p_nom_tabla   => ea_k_231_utils.g_k_tabla_dv,
                                      p_nom_columna => 'COD_HIST_FAF',
                                      p_val_columna => l_cod_hist_faf);
                  --
                  --
                  trn_k_global.asigna('COD_HIST_FAF',  l_cod_hist_faf);
                  --
                  --
             END IF;
             --
             --
             pp_inserta_c2000000(p_nom_tabla   => ea_k_231_utils.g_k_tabla_dv,
                                                  p_nom_columna => 'MCA_FAF',
                                                  p_val_columna => l_flag_faf);
             --
             --
             mx('atribui faf elegivel', 'p_eligibilidade_faf');
             trn_k_global.asigna('MCA_FAF',l_flag_faf);
             --
             mx('MCA_FAF', l_flag_faf);
             mx('l_mca_comeround', l_mca_comeround);
             -- Processo a ser implementado
             /*IF (l_flag_faf = 'S' and l_mca_comeround = 'S') then
                -- SE MCA_ATENEA = 'S' esse processo vai falhar obrigatoriamente depois de ea_k_231_coti.p_prepara_pacotes
                BEGIN
                   --
                   p_calcula; -- calculo interrompido, soh retorna valores de pacotes de cobertura
                   --
                EXCEPTION
                  WHEN OTHERS THEN
                    NULL;
                END;
                pi_grava_dados_para_ATENEA;
                --
             END IF;*/
             IF (UPPER(l_flag_faf) = trn.SI) then
                --
                pi_grava_dados_para_ATENEA;
                --
             END IF;
             --

             --
         ELSE
             --
             pp_inserta_c2000000(p_nom_tabla   => ea_k_231_utils.g_k_tabla_dv,
                                                  p_nom_columna => 'MCA_FAF',
                                                  p_val_columna => l_flag_faf);
             --
             mx('atribui faf elegivel', 'p_eligibilidade_faf');
             trn_k_global.asigna('MCA_FAF',l_flag_faf);
         END IF;
         --
         --dbms_output.put_line(trn_k_global.devuelve('flag_faf'));
         /*dbms_output.put_line('elegivel:'||l_elegivel
                            ||' flag_faf:'||l_flag_faf
                            ||' cod_cia:'||l_cod_cia
                            ||' prod:'||l_cod_ramo
                            ||' cota?:'||l_num_cotizacion
                            ||' tp_seg:'||l_tip_seguro
                            ||' sb_prd:'||l_cod_subramo
                            ||' tp_vei:'||l_cod_tip_vehi
                            ||' cn_ori:'||l_cod_canal_origem
                            ||' cod_docum:'||l_cod_docum
                            ||' cod_amostra:'||l_cod_amostra);
         */
         --
         --
         mx('f', 'p_eligibilidade_faf');
         --
    EXCEPTION
      when vexception THEN
        raise_application_error(-20999,'erro ao verificar eligibilidade do faf ', false);
      WHEN OTHERS THEN
        --
        pp_inserta_c2000000(p_nom_tabla   => ea_k_231_utils.g_k_tabla_dv,
                            p_nom_columna => 'MCA_FAF'                  ,
                            p_val_columna => 'E'                        );
        --
    --
  END p_eligibilidade_faf;
  -- Fim V5.34
  --
  --
  /*  -----------------------------
  ||     p_carrega_hist_faf: Carrega historico de aplicao do FAF por cotacao.
  */  -----------------------------
  --
  -- In??A???A???A?o V5.34
  PROCEDURE p_carrega_hist_faf
  IS
    vexception EXCEPTION;
    --
    l_mca_faf CHAR(1);
    --
    l_cod_cia          a2109900_vcr.cod_cia%TYPE;
    l_cod_ramo         a2109900_vcr.cod_ramo%TYPE;
    l_cod_atenea       a2109900_vcr.cod_atenea%TYPE;  -- CR
    l_tip_docum        a2109900_vcr.tip_docum%TYPE;
    l_cod_docum        a2109900_vcr.cod_docum%TYPE;
    l_cod_zona_tarifa  a2109900_vcr.cod_zona_tarifa%TYPE;
    l_cod_marca        a2109900_vcr.cod_marca%TYPE;
    l_cod_modelo       a2109900_vcr.cod_modelo%TYPE;
    l_cod_sub_modelo   a2109900_vcr.cod_sub_modelo%TYPE;
    l_cod_ano_fabr     a2109900_vcr.cod_ano_fabr%TYPE;
    -- l_fec_calculo      a2109900_vcr.fec_calculo%TYPE;
    l_fec_validez      g2109904_vcr.fec_validez%TYPE;
    l_num_cotizacion    c2000000.num_cotizacion%TYPE; -- CR
    l_pct_faf_sem_batente c2000000.val_columna%TYPE;  -- CR
    l_pct_faf             c2000000.val_columna%TYPE;
    l_status           a2109900_vcr.status%TYPE;
    l_fec_actu         a2109900_vcr.fec_actu%TYPE;
    l_cod_usr          a2109900_vcr.cod_usr%TYPE;
    l_cod_hist_faf     a2109900_vcr.cod_hist_faf%TYPE;  -- CR
    l_fec_validez_tarifa g2109904_vcr.fec_validez_tarifa%TYPE; -- CR
    --
    BEGIN
      --
      mx('i', 'p_carrega_hist_faf');
      --
      --
      l_num_cotizacion   := trn_k_global.ref_f_global('NUM_COTIZACION');
      l_cod_cia          := trn_k_global.ref_f_global('COD_CIA');
      l_cod_ramo         := trn_k_global.ref_f_global('COD_RAMO');
      l_cod_usr          := trn_k_global.cod_usr;
      --
      --
        mx('busca inf. cota?', 'p_carrega_hist_faf');
        --
        WITH c_c2000000 AS (SELECT *
                              FROM (SELECT num_cotizacion
                                         , cod_cia
                                         , cod_ramo
                                         , nom_columna
                                         , val_columna
                                      FROM c2000000
                                     WHERE num_cotizacion = l_num_cotizacion
                                       AND cod_cia      = l_cod_cia
                                       AND cod_ramo     = l_cod_ramo)
                             pivot ( MAX(val_columna)
                                     FOR nom_columna in ('COD_DOCUM' AS COD_DOCUM
                                                        , 'TIP_DOCUM' AS TIP_DOCUM
                                                        , 'COD_ZONA_TARIFA' AS COD_ZONA_TARIFA
                                                        , 'COD_MARCA' AS COD_MARCA
                                                        , 'COD_MODELO' AS COD_MODELO
                                                        , 'COD_SUB_MODELO' AS COD_SUB_MODELO
                                                        , 'COD_ANO_FABR' AS COD_ANO_FABR
                                                        , 'COD_ATENEA' AS COD_ATENEA -- CR
                                                        , 'PCT_FAF' AS PCT_FAF
                                                        , 'PCT_FAF_SEM_BATENTE' AS PCT_FAF_SEM_BATENTE -- CR
                                                        , 'MCA_FAF' AS MCA_FAF
                                                        , 'COD_HIST_FAF' AS COD_HIST_FAF-- CR
                                                        , 'FEC_VALIDEZ_TARIFA' AS FEC_VALIDEZ_TARIFA
                                                        )
                                   )
                             ORDER BY num_cotizacion)
             SELECT COD_DOCUM
                  , TIP_DOCUM
                  , COD_ZONA_TARIFA
                  , COD_MARCA
                  , COD_MODELO
                  , COD_SUB_MODELO
                  , COD_ANO_FABR
                  , COD_ATENEA
                  , PCT_FAF
                  , PCT_FAF_SEM_BATENTE
                  , MCA_FAF
                  , COD_HIST_FAF
                  , to_date(FEC_VALIDEZ_TARIFA, 'DDMMYYYY')
               INTO l_cod_docum
                  , l_tip_docum
                  , l_cod_zona_tarifa
                  , l_cod_marca
                  , l_cod_modelo
                  , l_cod_sub_modelo
                  , l_cod_ano_fabr
                  , l_cod_atenea
                  , l_pct_faf
                  , l_pct_faf_sem_batente
                  , l_mca_faf
                  , l_cod_hist_faf
                  , l_fec_validez_tarifa
               FROM c_c2000000 a;
             --
             --
        mx('Verifica se ? produto 231', 'p_carrega_hist_faf');
        --
        IF l_cod_ramo = 231 THEN
          --
          --
          IF l_mca_faf in ('S', 'H') THEN
            l_status := 1;
           END IF;
          --
          IF l_mca_faf = 'N' THEN
            l_status := 2;
           END IF;
          --
          IF l_mca_faf = 'E' THEN
            l_status := 3;
           END IF;
          --
          l_status           := nvl(l_status,3);
          --
          --
             l_fec_actu := TRUNC(SYSDATE);
             -- l_fec_calculo := to_date(SYSDATE, 'dd-mm-yyyy');
             l_fec_validez := l_fec_actu + 15;
             --l_fec_validez_tarifa := to_date(l_fec_validez_tarifa, 'dd-mm-yyyy');
             l_cod_hist_faf := COD_HIST_FAF.NEXTVAL;
             --
             mx('-', to_char(l_fec_actu));
             mx('-', to_char(l_fec_validez));
             --
             --
             mx('Inclusao Table A2109900_vcr', 'p_carrega_hist_faf');
             --
             INSERT
               INTO A2109900_vcr
                  ( cod_cia
                  , cod_ramo
                  , cod_hist_faf -- CR
                  , cod_atenea  -- CR
                  , tip_docum
                  , cod_docum
                  , cod_zona_tarifa
                  , cod_marca
                  , cod_modelo
                  , cod_sub_modelo
                  , cod_ano_fabr
                  -- , fec_calculo
                  -- , fec_validez
                  -- , num_cotizacion
                  , pct_faf_sem_batente -- CR
                  , pct_faf
                  , status
                  , fec_actu
                  , cod_usr)
                VALUES
                  ( l_cod_cia
                  , l_cod_ramo
                  , l_cod_hist_faf -- CR
                  , l_cod_atenea -- CR
                  , l_tip_docum
                  , l_cod_docum
                  , l_cod_zona_tarifa
                  , l_cod_marca
                  , l_cod_modelo
                  , l_cod_sub_modelo
                  , l_cod_ano_fabr
                  --, l_fec_calculo
                  --, l_fec_validez
                  --, l_num_cotizacion
                  , NVL(to_number(l_pct_faf_sem_batente,'99999.99'),0) -- CR
                  , NVL(to_number(l_pct_faf,'99999.99'),0)
                  , l_status
                  , l_fec_actu
                  , l_cod_usr);
                  --
                  --
             mx('Inclusao Table A2109900_vcr', 'p_carrega_hist_faf');
             --
             INSERT
               INTO G2109904_VCR
                  ( cod_cia
                  , cod_ramo
                  , num_cotizacion
                  , tip_docum
                  , cod_docum
                  , cod_zona_tarifa
                  , cod_marca
                  , cod_modelo
                  , cod_sub_modelo
                  , cod_ano_fabr
                  , cod_hist_faf
                  --, cod_hist_risco_seg
                  --, cod_hist_risco_cond
                  --, cod_hist_veiculo
                  , fec_validez
                  , fec_validez_tarifa
                  , fec_actu
                  , cod_usr)
             VALUES
                  ( l_cod_cia
                  , l_cod_ramo
                  , l_num_cotizacion
                  , l_tip_docum
                  , l_cod_docum
                  , l_cod_zona_tarifa
                  , l_cod_marca
                  , l_cod_modelo
                  , l_cod_sub_modelo
                  , l_cod_ano_fabr
                  , l_cod_hist_faf
                  --, cod_hist_risco_seg
                  --, cod_hist_risco_cond
                  --, cod_hist_veiculo
                  , l_fec_validez
                  , l_fec_validez_tarifa
                  , l_fec_actu
                  , l_cod_usr);


       END if;
                  --
                  mx('f', 'p_carrega_hist_faf');
                  --
                  --
    EXCEPTION
      WHEN vexception THEN
        raise_application_error(-20999,'erro ao carregar informa?s de dados hist?os do faf ', FALSE);
      WHEN OTHERS THEN
        mx('-', 'ERR: p_carrega_pct_faf');
    --
  END p_carrega_hist_faf;
  -- Fim V5.34
  --
  --
  /*  ---------------------------------------------------------------------------------------
  ||     p_carrega_pct_faf: Carrega pct faf.
  */  ---------------------------------------------------------------------------------------
  --
  --
  --
  -- In??A???A???A?o V5.34
  PROCEDURE p_carrega_pct_faf_athenea
  IS
  --
    l_xml CLOB;
    l_xml_in_ws_api CLOB;
  --
  BEGIN
    --
    mx('I', 'p_carrega_pct_faf_athenea');
    --execute immediate 'alter session set nls_numeric_characters = '',.''';
    --
    g_xml_in := em_k_gen_ws.f_recupera_xml_in;
    --
    mx('g_xml_in', SUBSTR(g_xml_in, 0, 100));
    --
    --
    mx('-', '====================');
    --
    --
    l_xml_in_ws_api := em_k_ws_api.f_recupera_xml_in;
    --
    mx('l_xml_in_ws_api', SUBSTR(l_xml_in_ws_api, 0, 100));
    --
    IF NVL(LENGTH(l_xml_in_ws_api), 0) > NVL(LENGTH(g_xml_in), 0)
    THEN
      g_xml_in := em_k_ws_api.f_recupera_xml_in;
    END IF;
    --
    p_carrega_pct_faf_athenea(p_cod_cia         => trn_k_global.ref_f_global('COD_CIA'),
                              p_cod_ramo        => trn_k_global.ref_f_global('COD_RAMO'),
                              p_num_cotizacion  => trn_k_global.ref_f_global('NUM_COTIZACION'),
                              p_xml_in          => nvl(g_xml_in,em_k_gen_ws.f_recupera_xml_in),
                              p_xml             => l_xml
                            );
    --
    --execute immediate 'alter session set nls_numeric_characters = ''.,''';
    --
    mx('F', 'p_carrega_pct_faf');
    --
  END p_carrega_pct_faf_athenea;
  -- Fim V5.34
  --
  --
  -- In??A???A???A?o V5.34
  PROCEDURE p_carrega_pct_faf_athenea
                ( p_cod_cia        IN c2000000.cod_cia%TYPE,
                  p_cod_ramo       IN c2000000.cod_ramo%TYPE,
                  p_num_cotizacion IN c2000000.num_cotizacion%TYPE,
                  p_xml_in         IN   CLOB,
                  p_xml            OUT  CLOB
                )
  IS
    vexception EXCEPTION;
    --
    --
    l_cod_cia              c2000000.cod_cia%TYPE;
    l_cod_ramo             c2000000.cod_ramo%TYPE;
    l_num_cotizacion       c2000000.num_cotizacion%TYPE;
    l_imp_faf              a2109900_vcr.pct_faf%TYPE;
    l_imp_faf_sem_batente  a2109900_vcr.pct_faf_sem_batente%TYPE; -- CR
    l_cod_atenea           a2109900_vcr.cod_atenea%TYPE; -- CR
    l_imp_faf_c2000000               c2000000.val_columna%TYPE;
    l_imp_faf_sem_batente_c2000000  c2000000.val_columna%TYPE;
    --
    FUNCTION fi_pct_faf (p_cod_cia        c2000000.cod_cia       %TYPE,
                         p_cod_ramo       c2000000.cod_ramo      %TYPE,
                         p_num_cotizacion c2000000.num_cotizacion%TYPE)
    RETURN VARCHAR2
    IS
       --
       l_pct_faf c2000000.val_columna%TYPE := NULL;
       --
    BEGIN
       --
       mx('I', 'fi_pct_faf');
       --
       SELECT val_columna
         INTO l_pct_faf
         FROM c2000000 a
        WHERE a.cod_cia        = p_cod_cia
          AND a.cod_ramo       = p_cod_ramo
          AND a.num_cotizacion = p_num_cotizacion
          AND a.nom_columna    = 'PCT_FAF';
       --
       mx('F', 'fi_pct_faf');
       RETURN l_pct_faf;
    EXCEPTION
       WHEN OTHERS THEN
          mx('F', 'E - fi_pct_faf');
          RETURN NULL;
       --
    END fi_pct_faf;
    --
    FUNCTION fi_mca_faf (p_cod_cia        c2000000.cod_cia       %TYPE,
                         p_cod_ramo       c2000000.cod_ramo      %TYPE,
                         p_num_cotizacion c2000000.num_cotizacion%TYPE)
    RETURN VARCHAR2
    IS
       --
       l_mca_faf c2000000.val_columna%TYPE;
       --
    BEGIN
       --
       mx('I', 'fi_mca_faf');
       --
       SELECT val_columna
         INTO l_mca_faf
         FROM c2000000 a
        WHERE a.cod_cia        = p_cod_cia
          AND a.cod_ramo       = p_cod_ramo
          AND a.num_cotizacion = p_num_cotizacion
          AND a.nom_columna = 'MCA_FAF';
       --
       mx('F', 'fi_mca_faf');
       RETURN l_mca_faf;
    EXCEPTION
       WHEN OTHERS THEN
          mx('F', 'E - fi_mca_faf');
          RETURN trn.NO;
       --
    END fi_mca_faf;
    --
    BEGIN
      --
      mx('i', 'p_carrega_pct_faf');
      --
      --
      l_num_cotizacion   := nvl(p_num_cotizacion,trn_k_global.ref_f_global('NUM_COTIZACION'));
      l_cod_cia          := nvl(p_cod_cia,trn_k_global.ref_f_global('COD_CIA'));
      l_cod_ramo         := nvl(p_cod_ramo,trn_k_global.ref_f_global('COD_RAMO'));
      --
      --
      mx('-', 'p_carrega_pct_faf 1');
      l_cod_atenea := em_k_gen_ws.f_recupera_valor(p_xml       => p_xml_in,
                                                         p_cod_campo => 'COD_ATENEA'); -- CR

      --
      mx('-', 'p_carrega_pct_faf 2');
      l_imp_faf := TO_NUMBER(em_k_gen_ws.f_recupera_valor(p_xml       => p_xml_in,
                                                         p_cod_campo => 'PCT_FAF'));
      --
      --
      mx('-', 'p_carrega_pct_faf 3');
      l_imp_faf_sem_batente := TO_NUMBER(em_k_gen_ws.f_recupera_valor(p_xml       => p_xml_in,
                                                                      p_cod_campo => 'PCT_FAF_S')); -- CR
      --
      --
      mx('-', 'p_carrega_pct_faf 4');
      l_imp_faf_c2000000 := em_k_gen_ws.f_recupera_valor(p_xml       => p_xml_in,
                                                         p_cod_campo => 'PCT_FAF');
      --
      --
      mx('-', 'p_carrega_pct_faf 5');
      l_imp_faf_sem_batente_c2000000 := em_k_gen_ws.f_recupera_valor(p_xml       => p_xml_in,
                                                                      p_cod_campo => 'PCT_FAF_S'); -- CR

      mx('l_cod_atenea', l_cod_atenea);
      mx('l_imp_faf', l_imp_faf);
      mx('l_imp_faf_sem_batente', l_imp_faf_sem_batente);
      --
      mx('Inclusao COD_ATENEA ', 'p_carrega_pct_faf');
      --
      pp_inserta_c2000000(p_nom_tabla => ea_k_231_utils.g_k_tabla_dv,
                                          p_nom_columna => 'COD_ATENEA',
                                          p_val_columna => l_cod_atenea);  -- CR
      --
      --
      mx('Inclusao PCT ', 'p_carrega_pct_faf');
      --
      /*pp_inserta_c2000000(p_nom_tabla => ea_k_231_utils.g_k_tabla_dv,
                                          p_nom_columna => 'PCT_FAF',
                                          p_val_columna => REPLACE(TO_CHAR(l_imp_faf), ',', '.'));
      --
      pp_inserta_c2000000(p_nom_tabla => ea_k_231_utils.g_k_tabla_dv,
                                          p_nom_columna => 'PCT_FAF_SEM_BATENTE',
                                          p_val_columna => REPLACE(TO_CHAR(l_imp_faf_sem_batente), ',', '.'));  -- CR*/
      --
      mx('fi_mca_faf ->', fi_mca_faf(p_cod_cia        => l_cod_Cia,
                                     p_cod_ramo       => l_cod_ramo,
                                     p_num_cotizacion => l_num_cotizacion));
      --
      mx('fi_pct_faf ->', fi_pct_faf(p_cod_cia        => l_cod_Cia,
                                     p_cod_ramo       => l_cod_ramo,
                                     p_num_cotizacion => l_num_cotizacion));
      --
      IF l_imp_faf IS NULL AND
         l_imp_faf = ''    AND
         fi_pct_faf(p_cod_cia        => l_cod_Cia,
                    p_cod_ramo       => l_cod_ramo,
                    p_num_cotizacion => l_num_cotizacion) IS NULL  AND
         fi_pct_faf(p_cod_cia        => l_cod_Cia,
                    p_cod_ramo       => l_cod_ramo,
                    p_num_cotizacion => l_num_cotizacion) = ''
      THEN
         --
         pp_inserta_c2000000(p_nom_tabla   => ea_k_231_utils.g_k_tabla_dv,
                             p_nom_columna => 'MCA_FAF'                  ,
                             p_val_columna => 'E'                        );
         --
      END IF;
      IF fi_mca_faf(p_cod_cia        => l_cod_Cia,
                    p_cod_ramo       => l_cod_ramo,
                    p_num_cotizacion => l_num_cotizacion) = trn.SI
      THEN
        mx('-', 'INSERTA PCT_FAF');
      pp_inserta_c2000000(p_nom_tabla => ea_k_231_utils.g_k_tabla_dv,
                                          p_nom_columna => 'PCT_FAF',
                                          p_val_columna => REPLACE(l_imp_faf_c2000000, ',', '.'));
      --
      pp_inserta_c2000000(p_nom_tabla => ea_k_231_utils.g_k_tabla_dv,
                                          p_nom_columna => 'PCT_FAF_SEM_BATENTE',
                                          p_val_columna => REPLACE(l_imp_faf_sem_batente_c2000000, ',', '.'));
      END IF;
      --
      trn_k_global.asigna('COD_ATENEA',  l_cod_atenea);
      trn_k_global.asigna('PCT_FAF',  l_imp_faf);
      trn_k_global.asigna('PCT_FAF_SEM_BATENTE',  l_imp_faf_sem_batente); -- CR
      --
      --
      p_carrega_hist_faf;
      --
      --
      mx('f','p_carrega_pct_faf');
      --
      --
    EXCEPTION
      WHEN vexception THEN
        raise_application_error(-20999,'erro ao carregar pct faf', FALSE);
      WHEN OTHERS THEN
        mx('-', 'ERR: p_carrega_pct_faf');
    --
  END p_carrega_pct_faf_athenea;
  -- Fim V5.34
  --
  --
  /*  ---------------------------------------------------------------------------------------
  ||     p_carrega_log_api_athenea: Carrega informacoes de Log de erro da athenea.
  */  ---------------------------------------------------------------------------------------
  --
  --
  -- In??A???A???A?o V5.34
  PROCEDURE p_carrega_log_api_athenea
  IS
  --
    l_xml CLOB;
  --
  BEGIN
    --
    mx('I', 'p_carrega_log_api_athenea');
    --
    g_xml_in := em_k_gen_ws.f_recupera_xml_in;
    --
    p_carrega_log_api_athenea(p_cod_cia         => trn_k_global.ref_f_global('COD_CIA'),
                              p_cod_ramo        => trn_k_global.ref_f_global('COD_RAMO'),
                              p_num_cotizacion  => trn_k_global.ref_f_global('NUM_COTIZACION'),
                              p_xml_in          => nvl(g_xml_in,em_k_ws_api.f_recupera_xml_in),
                              p_xml             => l_xml
                             );
    --
    mx('F', 'p_carrega_log_api_athenea');
    --
  END p_carrega_log_api_athenea;
  -- Fim V5.34
  --
  --
  -- In??A???A???A?o V5.34
  PROCEDURE p_carrega_log_api_athenea
                  ( p_cod_cia        IN c2000000.cod_cia%TYPE,
                    p_cod_ramo       IN c2000000.cod_ramo%TYPE,
                    p_num_cotizacion IN c2000000.num_cotizacion%TYPE,
                    p_xml_in         IN CLOB,
                    p_xml            OUT  CLOB
                  )
  IS
    vexception EXCEPTION;
    --
    --
    l_cod_cia         c2000000.cod_cia%TYPE;
    l_cod_ramo        c2000000.cod_ramo%TYPE;
    l_num_cotizacion  c2000000.num_cotizacion%TYPE;
    l_desc_log_api    VARCHAR2(2000);
    l_fec_actu        DATE;
    --
    --
    --
    BEGIN
      --
      mx('i', 'p_carrega_log_api_athenea');
      --
      --
      l_num_cotizacion   := nvl(p_num_cotizacion,trn_k_global.ref_f_global('NUM_COTIZACION'));
      l_cod_cia          := nvl(p_cod_cia,trn_k_global.ref_f_global('COD_CIA'));
      l_cod_ramo         := nvl(p_cod_ramo,trn_k_global.ref_f_global('COD_RAMO'));
      --
      l_desc_log_api     := em_k_gen_ws.f_recupera_valor (p_xml       => p_xml_in,
                                                          p_cod_campo => 'DESC_LOG_API');
      --
      l_fec_actu         := to_date(SYSDATE, 'dd-mm-yyyy');
      --
      --
     --
     --
     mx('Inclusao Table log_api_athenea', 'p_carrega_hist_faf');
     --
     --IF l_desc_log_api IS NOT NULL THEN
     --
     mx('l_cod_cia', l_cod_cia);
     mx('l_cod_ramo', l_cod_ramo);
     mx('l_num_cotizacion', l_num_cotizacion);
     mx('l_desc_log_api', substr(l_desc_log_api,0,100));
     mx('l_fec_actu', l_fec_actu);
     --
     --
   INSERT
         INTO log_api_athenea
            ( cod_cia
            , cod_ramo
            , num_cotizacion
            , desc_log_api
            , fec_actu)
       VALUES
            ( l_cod_cia
            , l_cod_ramo
            , l_num_cotizacion
            , l_desc_log_api
            , l_fec_actu);
      --
      --END IF;
      --
      --
      mx('f', 'p_carrega_log_api_athenea');
      --
      --
      --
    EXCEPTION
      WHEN vexception THEN
        raise_application_error(-20999,'erro ao carregar informacoes de Log de erro da athenea ', FALSE);
WHEN OTHERS THEN
       mx('F', 'E - p_carrega_log_api_athenea');
    --
  END p_carrega_log_api_athenea;
  -- Fim V5.34
  --
  --
END em_k_gen_ws_vcr;
/
